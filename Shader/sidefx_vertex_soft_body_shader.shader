//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "sidefx/vertex_soft_body_shader" {
Properties {
_Color ("Color", Color) = (1,1,1,1)
_MainTex ("Albedo (RGB)", 2D) = "white" { }
_Glossiness ("Smoothness", Range(0, 1)) = 0.5
_Metallic ("Metallic", Range(0, 1)) = 0
_boundingMax ("Bounding Max", Float) = 1
_boundingMin ("Bounding Min", Float) = 1
_numOfFrames ("Number Of Frames", Float) = 240
_speed ("Speed", Float) = 0.33
[MaterialToggle] _pack_normal ("Pack Normal", Float) = 0
_posTex ("Position Map (RGB)", 2D) = "white" { }
_nTex ("Normal Map (RGB)", 2D) = "grey" { }
_EmissionLM ("Emission (Lightmapper)", Color) = (1,1,1,1)
[Toggle] _DynamicEmissionLM ("Dynamic Emission (Lightmapper)", Float) = 0
}
SubShader {
 LOD 200
 Tags { "RenderType" = "Opaque" }
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 62425
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bvec3 u_xlatb8;
vec3 u_xlat9;
bvec3 u_xlatb10;
vec3 u_xlat11;
float u_xlat12;
float u_xlat22;
float u_xlat23;
float u_xlat33;
float u_xlat34;
float u_xlat35;
bool u_xlatb35;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat34 = (-_Glossiness) + 1.0;
    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb35){
        u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat35 = inversesqrt(u_xlat35);
        u_xlat5.xyz = vec3(u_xlat35) * u_xlat4.xyz;
        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat6;
            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
            u_xlat6 = hlslcc_movcTemp;
        }
        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
        u_xlat35 = min(u_xlat6.z, u_xlat35);
        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
    } else {
        u_xlat5.xyz = u_xlat4.xyz;
    }
    u_xlat35 = (-u_xlat34) * 0.699999988 + 1.70000005;
    u_xlat35 = u_xlat34 * u_xlat35;
    u_xlat35 = u_xlat35 * 6.0;
    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat35);
    u_xlat36 = u_xlat5.w + -1.0;
    u_xlat36 = unity_SpecCube0_HDR.w * u_xlat36 + 1.0;
    u_xlat36 = log2(u_xlat36);
    u_xlat36 = u_xlat36 * unity_SpecCube0_HDR.y;
    u_xlat36 = exp2(u_xlat36);
    u_xlat36 = u_xlat36 * unity_SpecCube0_HDR.x;
    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat36);
    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb37){
        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb37){
            u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat37 = inversesqrt(u_xlat37);
            u_xlat7.xyz = vec3(u_xlat37) * u_xlat4.xyz;
            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat8;
                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
                u_xlat8 = hlslcc_movcTemp;
            }
            u_xlat37 = min(u_xlat8.y, u_xlat8.x);
            u_xlat37 = min(u_xlat8.z, u_xlat37);
            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat7.xyz * vec3(u_xlat37) + u_xlat8.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat35);
        u_xlat35 = u_xlat4.w + -1.0;
        u_xlat35 = unity_SpecCube1_HDR.w * u_xlat35 + 1.0;
        u_xlat35 = log2(u_xlat35);
        u_xlat35 = u_xlat35 * unity_SpecCube1_HDR.y;
        u_xlat35 = exp2(u_xlat35);
        u_xlat35 = u_xlat35 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
        u_xlat5.xyz = vec3(u_xlat36) * u_xlat5.xyz + (-u_xlat4.xyz);
        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat4.xyz;
    }
    u_xlat35 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * vs_TEXCOORD1.xyz;
    u_xlat5.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat35 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat11.x = u_xlat0.x * u_xlat0.x;
    u_xlat11.x = dot(u_xlat11.xx, vec2(u_xlat34));
    u_xlat11.x = u_xlat11.x + -0.5;
    u_xlat22 = (-u_xlat1.x) + 1.0;
    u_xlat23 = u_xlat22 * u_xlat22;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat22 = u_xlat22 * u_xlat23;
    u_xlat22 = u_xlat11.x * u_xlat22 + 1.0;
    u_xlat23 = -abs(u_xlat33) + 1.0;
    u_xlat36 = u_xlat23 * u_xlat23;
    u_xlat36 = u_xlat36 * u_xlat36;
    u_xlat23 = u_xlat23 * u_xlat36;
    u_xlat11.x = u_xlat11.x * u_xlat23 + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat22;
    u_xlat22 = u_xlat34 * u_xlat34;
    u_xlat22 = max(u_xlat22, 0.00200000009);
    u_xlat34 = (-u_xlat22) + 1.0;
    u_xlat36 = abs(u_xlat33) * u_xlat34 + u_xlat22;
    u_xlat34 = u_xlat1.x * u_xlat34 + u_xlat22;
    u_xlat33 = abs(u_xlat33) * u_xlat34;
    u_xlat33 = u_xlat1.x * u_xlat36 + u_xlat33;
    u_xlat33 = u_xlat33 + 9.99999975e-06;
    u_xlat33 = 0.5 / u_xlat33;
    u_xlat34 = u_xlat22 * u_xlat22;
    u_xlat36 = u_xlat12 * u_xlat34 + (-u_xlat12);
    u_xlat12 = u_xlat36 * u_xlat12 + 1.0;
    u_xlat34 = u_xlat34 * 0.318309873;
    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;
    u_xlat12 = u_xlat34 / u_xlat12;
    u_xlat33 = u_xlat33 * u_xlat12;
    u_xlat11.z = u_xlat33 * 3.14159274;
    u_xlat11.xz = u_xlat1.xx * u_xlat11.xz;
    u_xlat33 = max(u_xlat11.z, 0.0);
    u_xlat22 = u_xlat22 * u_xlat22 + 1.0;
    u_xlat22 = float(1.0) / u_xlat22;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat1.x;
    u_xlat1.x = (-u_xlat35) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
    u_xlat7.xyz = vec3(u_xlat33) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat11.x = u_xlat0.x * u_xlat0.x;
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat0.x = u_xlat0.x * u_xlat11.x;
    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat7.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat22);
    u_xlat1.xyw = (-u_xlat5.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat23) * u_xlat1.xyw + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %225 %236 %237 %373 %379 %380 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %223 0 BuiltIn 223 
                                                      OpMemberDecorate %223 1 BuiltIn 223 
                                                      OpMemberDecorate %223 2 BuiltIn 223 
                                                      OpDecorate %223 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 236 
                                                      OpDecorate %237 Location 237 
                                                      OpDecorate vs_TEXCOORD1 Location 373 
                                                      OpDecorate vs_TEXCOORD5 Location 379 
                                                      OpDecorate vs_TEXCOORD6 Location 380 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 7 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 8 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 6 
                                         i32 %119 = OpConstant 5 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 1 
                                             %168 = OpTypePointer Uniform %7 
                                         i32 %179 = OpConstant 2 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %222 = OpTypeArray %6 %20 
                                             %223 = OpTypeStruct %7 %6 %222 
                                             %224 = OpTypePointer Output %223 
        Output struct {f32_4; f32; f32[1];}* %225 = OpVariable Output 
                                             %233 = OpTypePointer Output %7 
                                             %235 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %237 = OpVariable Input 
                                         i32 %240 = OpConstant 9 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_2 %264 = OpConstantComposite %263 %263 
                                         f32 %266 = OpConstant 3.674022E-40 
                                       f32_2 %267 = OpConstantComposite %266 %266 
                                Private f32* %271 = OpVariable Private 
                                         f32 %280 = OpConstant 3.674022E-40 
                                         f32 %281 = OpConstant 3.674022E-40 
                                       f32_2 %282 = OpConstantComposite %280 %281 
                                       f32_2 %284 = OpConstantComposite %56 %56 
                                         u32 %288 = OpConstant 2 
                                       f32_3 %306 = OpConstantComposite %56 %56 %56 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                       f32_4 %321 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %322 = OpConstant 4 
                                             %326 = OpTypeVector %318 4 
                                             %330 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %381 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %331 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %169 = OpAccessChain %18 %167 %167 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpFMul %166 %170 
                                                      OpStore %164 %171 
                              Uniform f32_4* %172 = OpAccessChain %18 %167 %19 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpLoad %114 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %164 
                                       f32_4 %178 = OpFAdd %176 %177 
                                                      OpStore %164 %178 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %205 = OpAccessChain %18 %188 %167 
                                       f32_4 %206 = OpLoad %205 
                                       f32_4 %207 = OpFMul %204 %206 
                                                      OpStore %114 %207 
                              Uniform f32_4* %208 = OpAccessChain %18 %188 %19 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %164 
                                       f32_4 %211 = OpVectorShuffle %210 %210 0 0 0 0 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %114 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %114 %214 
                              Uniform f32_4* %215 = OpAccessChain %18 %188 %179 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %164 
                                       f32_4 %218 = OpVectorShuffle %217 %217 2 2 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %114 
                                       f32_4 %221 = OpFAdd %219 %220 
                                                      OpStore %114 %221 
                              Uniform f32_4* %226 = OpAccessChain %18 %188 %188 
                                       f32_4 %227 = OpLoad %226 
                                       f32_4 %228 = OpLoad %164 
                                       f32_4 %229 = OpVectorShuffle %228 %228 3 3 3 3 
                                       f32_4 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %114 
                                       f32_4 %232 = OpFAdd %230 %231 
                               Output f32_4* %234 = OpAccessChain %225 %19 
                                                      OpStore %234 %232 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                              Uniform f32_4* %241 = OpAccessChain %18 %240 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                              Uniform f32_4* %245 = OpAccessChain %18 %240 
                                       f32_4 %246 = OpLoad %245 
                                       f32_2 %247 = OpVectorShuffle %246 %246 2 3 
                                       f32_2 %248 = OpFAdd %244 %247 
                                                      OpStore vs_TEXCOORD0 %248 
                                Private f32* %249 = OpAccessChain %76 %20 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpExtInst %1 8 %250 
                                Private f32* %252 = OpAccessChain %114 %29 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %114 %29 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFNegate %254 
                                         f32 %256 = OpFMul %255 %146 
                                Private f32* %257 = OpAccessChain %76 %29 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %114 %20 
                                                      OpStore %260 %259 
                                       f32_4 %261 = OpLoad %114 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_2 %265 = OpFMul %262 %264 
                                       f32_2 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %76 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %76 %270 
                                       f32_4 %272 = OpLoad %76 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_4 %274 = OpLoad %76 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                         f32 %276 = OpDot %273 %275 
                                                      OpStore %271 %276 
                                         f32 %277 = OpLoad %271 
                                       f32_2 %278 = OpCompositeConstruct %277 %277 
                                       f32_2 %279 = OpFNegate %278 
                                       f32_2 %283 = OpFMul %279 %282 
                                       f32_2 %285 = OpFAdd %283 %284 
                                       f32_4 %286 = OpLoad %114 
                                       f32_4 %287 = OpVectorShuffle %286 %285 0 1 4 5 
                                                      OpStore %114 %287 
                                Private f32* %289 = OpAccessChain %114 %288 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpExtInst %1 31 %290 
                                                      OpStore %271 %291 
                                       f32_4 %292 = OpLoad %76 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                         f32 %294 = OpLoad %271 
                                       f32_2 %295 = OpCompositeConstruct %294 %294 
                                       f32_2 %296 = OpFMul %293 %295 
                                       f32_4 %297 = OpLoad %114 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %114 %298 
                                       f32_4 %299 = OpLoad %114 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 3 
                                       f32_3 %301 = OpExtInst %1 40 %300 %110 
                                       f32_4 %302 = OpLoad %76 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %76 %303 
                                       f32_4 %304 = OpLoad %76 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %307 = OpExtInst %1 37 %305 %306 
                                       f32_4 %308 = OpLoad %76 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %76 %309 
                                Private f32* %310 = OpAccessChain %76 %29 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                Private f32* %313 = OpAccessChain %76 %154 
                                                      OpStore %313 %312 
                                Private f32* %314 = OpAccessChain %9 %29 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFNegate %315 
                                Private f32* %317 = OpAccessChain %9 %154 
                                                      OpStore %317 %316 
                                Uniform f32* %323 = OpAccessChain %18 %322 
                                         f32 %324 = OpLoad %323 
                                       f32_4 %325 = OpCompositeConstruct %324 %324 %324 %324 
                                      bool_4 %327 = OpFOrdNotEqual %321 %325 
                                        bool %328 = OpAny %327 
                                                      OpStore %320 %328 
                                        bool %329 = OpLoad %320 
                                                      OpSelectionMerge %333 None 
                                                      OpBranchConditional %329 %332 %336 
                                             %332 = OpLabel 
                                       f32_4 %334 = OpLoad %76 
                                       f32_3 %335 = OpVectorShuffle %334 %334 3 2 1 
                                                      OpStore %331 %335 
                                                      OpBranch %333 
                                             %336 = OpLabel 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 3 1 2 
                                                      OpStore %331 %338 
                                                      OpBranch %333 
                                             %333 = OpLabel 
                                       f32_3 %339 = OpLoad %331 
                                       f32_4 %340 = OpLoad %9 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %9 %341 
                                       f32_4 %342 = OpLoad %9 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                              Uniform f32_4* %344 = OpAccessChain %18 %179 %19 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                         f32 %347 = OpDot %343 %346 
                                Private f32* %348 = OpAccessChain %76 %29 
                                                      OpStore %348 %347 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                              Uniform f32_4* %351 = OpAccessChain %18 %179 %167 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %354 = OpDot %350 %353 
                                Private f32* %355 = OpAccessChain %76 %20 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                              Uniform f32_4* %358 = OpAccessChain %18 %179 %179 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                         f32 %361 = OpDot %357 %360 
                                Private f32* %362 = OpAccessChain %76 %288 
                                                      OpStore %362 %361 
                                       f32_4 %363 = OpLoad %76 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_4 %365 = OpLoad %76 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                         f32 %367 = OpDot %364 %366 
                                Private f32* %368 = OpAccessChain %9 %29 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %9 %29 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpExtInst %1 32 %370 
                                Private f32* %372 = OpAccessChain %9 %29 
                                                      OpStore %372 %371 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_4 %376 = OpLoad %76 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                                      OpStore vs_TEXCOORD1 %378 
                                                      OpStore vs_TEXCOORD5 %321 
                                                      OpStore vs_TEXCOORD6 %321 
                                 Output f32* %382 = OpAccessChain %225 %19 %20 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpFNegate %383 
                                 Output f32* %385 = OpAccessChain %225 %19 %20 
                                                      OpStore %385 %384 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 863
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %57 %81 %849 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate vs_TEXCOORD0 Location 57 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %247 DescriptorSet 247 
                                                      OpDecorate %247 Binding 247 
                                                      OpDecorate %249 DescriptorSet 249 
                                                      OpDecorate %249 Binding 249 
                                                      OpDecorate %402 DescriptorSet 402 
                                                      OpDecorate %402 Binding 402 
                                                      OpDecorate %849 Location 849 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                                              %43 = OpTypePointer Private %10 
                               Private f32_3* %44 = OpVariable Private 
                                              %45 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %46 = OpTypePointer UniformConstant %45 
         UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
                                              %49 = OpTypeSampler 
                                              %50 = OpTypePointer UniformConstant %49 
                     UniformConstant sampler* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampledImage %45 
                                              %55 = OpTypeVector %6 2 
                                              %56 = OpTypePointer Input %55 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %61 = OpVariable Private 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
                                          i32 %70 = OpConstant 11 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %77 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_4* %87 = OpVariable Private 
                                              %99 = OpTypeBool 
                                             %100 = OpTypePointer Private %99 
                               Private bool* %101 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 4 
                                             %104 = OpTypeInt 32 0 
                                         u32 %105 = OpConstant 3 
                              Private f32_4* %119 = OpVariable Private 
                              Private f32_3* %127 = OpVariable Private 
                                         i32 %130 = OpConstant 2 
                              Private f32_3* %139 = OpVariable Private 
                                         i32 %142 = OpConstant 3 
                                             %151 = OpTypeVector %99 3 
                                             %152 = OpTypePointer Private %151 
                             Private bool_3* %153 = OpVariable Private 
                                       f32_4 %154 = OpConstantComposite %102 %102 %102 %102 
                                             %157 = OpTypeVector %99 4 
                                             %160 = OpTypePointer Function %10 
                                         u32 %163 = OpConstant 0 
                                             %166 = OpTypePointer Function %6 
                                         u32 %177 = OpConstant 1 
                                         u32 %190 = OpConstant 2 
                                         f32 %235 = OpConstant 3.674022E-40 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                             %245 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %246 = OpTypePointer UniformConstant %245 
      UniformConstant read_only TextureCube* %247 = OpVariable UniformConstant 
                    UniformConstant sampler* %249 = OpVariable UniformConstant 
                                             %251 = OpTypeSampledImage %245 
                                Private f32* %257 = OpVariable Private 
                                         f32 %260 = OpConstant 3.674022E-40 
                                         i32 %262 = OpConstant 5 
                               Private bool* %285 = OpVariable Private 
                                         f32 %288 = OpConstant 3.674022E-40 
                                         i32 %293 = OpConstant 8 
                                Private f32* %300 = OpVariable Private 
                              Private f32_3* %313 = OpVariable Private 
                                         i32 %316 = OpConstant 6 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %327 = OpConstant 7 
                             Private bool_3* %335 = OpVariable Private 
      UniformConstant read_only TextureCube* %402 = OpVariable UniformConstant 
                                         i32 %413 = OpConstant 9 
                                         f32 %474 = OpConstant 3.674022E-40 
                                       f32_3 %475 = OpConstantComposite %474 %474 %474 
                                         i32 %479 = OpConstant 12 
                                         f32 %494 = OpConstant 3.674022E-40 
                                       f32_3 %495 = OpConstantComposite %494 %494 %494 
                                         f32 %502 = OpConstant 3.674022E-40 
                                         i32 %514 = OpConstant 1 
                                         f32 %527 = OpConstant 3.674022E-40 
                                Private f32* %554 = OpVariable Private 
                              Private f32_3* %573 = OpVariable Private 
                                         f32 %588 = OpConstant 3.674022E-40 
                                Private f32* %591 = OpVariable Private 
                                Private f32* %596 = OpVariable Private 
                                         f32 %639 = OpConstant 3.674022E-40 
                                         f32 %667 = OpConstant 3.674022E-40 
                                         f32 %669 = OpConstant 3.674022E-40 
                                         f32 %686 = OpConstant 3.674022E-40 
                                         f32 %691 = OpConstant 3.674022E-40 
                                         f32 %709 = OpConstant 3.674022E-40 
                               Private bool* %725 = OpVariable Private 
                                         i32 %752 = OpConstant 10 
                                       f32_3 %791 = OpConstantComposite %75 %75 %75 
                                             %848 = OpTypePointer Output %7 
                               Output f32_4* %849 = OpVariable Output 
                                             %860 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %161 = OpVariable Function 
                               Function f32* %167 = OpVariable Function 
                               Function f32* %180 = OpVariable Function 
                               Function f32* %193 = OpVariable Function 
                             Function f32_3* %340 = OpVariable Function 
                               Function f32* %344 = OpVariable Function 
                               Function f32* %356 = OpVariable Function 
                               Function f32* %368 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %48 = OpLoad %47 
                                      sampler %52 = OpLoad %51 
                   read_only Texture2DSampled %54 = OpSampledImage %48 %52 
                                        f32_2 %58 = OpLoad vs_TEXCOORD0 
                                        f32_4 %59 = OpImageSampleImplicitLod %54 %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                                      OpStore %44 %60 
                                        f32_3 %62 = OpLoad %44 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %61 %68 
                                 Uniform f32* %72 = OpAccessChain %17 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFAdd %74 %75 
                                                      OpStore %69 %76 
                                        f32_4 %78 = OpLoad %35 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad vs_TEXCOORD1 
                                          f32 %83 = OpDot %80 %82 
                                                      OpStore %77 %83 
                                          f32 %84 = OpLoad %77 
                                          f32 %85 = OpLoad %77 
                                          f32 %86 = OpFAdd %84 %85 
                                                      OpStore %77 %86 
                                        f32_3 %88 = OpLoad vs_TEXCOORD1 
                                          f32 %89 = OpLoad %77 
                                        f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                        f32_3 %91 = OpFNegate %90 
                                        f32_3 %92 = OpFMul %88 %91 
                                        f32_4 %93 = OpLoad %35 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFNegate %94 
                                        f32_3 %96 = OpFAdd %92 %95 
                                        f32_4 %97 = OpLoad %87 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %87 %98 
                                Uniform f32* %106 = OpAccessChain %17 %103 %105 
                                         f32 %107 = OpLoad %106 
                                        bool %108 = OpFOrdLessThan %102 %107 
                                                      OpStore %101 %108 
                                        bool %109 = OpLoad %101 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %228 
                                             %110 = OpLabel 
                                       f32_4 %112 = OpLoad %87 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_4 %114 = OpLoad %87 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                         f32 %116 = OpDot %113 %115 
                                                      OpStore %77 %116 
                                         f32 %117 = OpLoad %77 
                                         f32 %118 = OpExtInst %1 32 %117 
                                                      OpStore %77 %118 
                                         f32 %120 = OpLoad %77 
                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
                                       f32_4 %122 = OpLoad %87 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %119 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %119 %126 
                                       f32_3 %128 = OpLoad vs_TEXCOORD2 
                                       f32_3 %129 = OpFNegate %128 
                              Uniform f32_4* %131 = OpAccessChain %17 %130 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFAdd %129 %133 
                                                      OpStore %127 %134 
                                       f32_3 %135 = OpLoad %127 
                                       f32_4 %136 = OpLoad %119 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFDiv %135 %137 
                                                      OpStore %127 %138 
                                       f32_3 %140 = OpLoad vs_TEXCOORD2 
                                       f32_3 %141 = OpFNegate %140 
                              Uniform f32_4* %143 = OpAccessChain %17 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFAdd %141 %145 
                                                      OpStore %139 %146 
                                       f32_3 %147 = OpLoad %139 
                                       f32_4 %148 = OpLoad %119 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFDiv %147 %149 
                                                      OpStore %139 %150 
                                       f32_4 %155 = OpLoad %119 
                                       f32_4 %156 = OpVectorShuffle %155 %155 0 1 2 0 
                                      bool_4 %158 = OpFOrdLessThan %154 %156 
                                      bool_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                                      OpStore %153 %159 
                                       f32_3 %162 = OpLoad %127 
                                                      OpStore %161 %162 
                               Private bool* %164 = OpAccessChain %153 %163 
                                        bool %165 = OpLoad %164 
                                                      OpSelectionMerge %169 None 
                                                      OpBranchConditional %165 %168 %172 
                                             %168 = OpLabel 
                                Private f32* %170 = OpAccessChain %127 %163 
                                         f32 %171 = OpLoad %170 
                                                      OpStore %167 %171 
                                                      OpBranch %169 
                                             %172 = OpLabel 
                                Private f32* %173 = OpAccessChain %139 %163 
                                         f32 %174 = OpLoad %173 
                                                      OpStore %167 %174 
                                                      OpBranch %169 
                                             %169 = OpLabel 
                                         f32 %175 = OpLoad %167 
                               Function f32* %176 = OpAccessChain %161 %163 
                                                      OpStore %176 %175 
                               Private bool* %178 = OpAccessChain %153 %177 
                                        bool %179 = OpLoad %178 
                                                      OpSelectionMerge %182 None 
                                                      OpBranchConditional %179 %181 %185 
                                             %181 = OpLabel 
                                Private f32* %183 = OpAccessChain %127 %177 
                                         f32 %184 = OpLoad %183 
                                                      OpStore %180 %184 
                                                      OpBranch %182 
                                             %185 = OpLabel 
                                Private f32* %186 = OpAccessChain %139 %177 
                                         f32 %187 = OpLoad %186 
                                                      OpStore %180 %187 
                                                      OpBranch %182 
                                             %182 = OpLabel 
                                         f32 %188 = OpLoad %180 
                               Function f32* %189 = OpAccessChain %161 %177 
                                                      OpStore %189 %188 
                               Private bool* %191 = OpAccessChain %153 %190 
                                        bool %192 = OpLoad %191 
                                                      OpSelectionMerge %195 None 
                                                      OpBranchConditional %192 %194 %198 
                                             %194 = OpLabel 
                                Private f32* %196 = OpAccessChain %127 %190 
                                         f32 %197 = OpLoad %196 
                                                      OpStore %193 %197 
                                                      OpBranch %195 
                                             %198 = OpLabel 
                                Private f32* %199 = OpAccessChain %139 %190 
                                         f32 %200 = OpLoad %199 
                                                      OpStore %193 %200 
                                                      OpBranch %195 
                                             %195 = OpLabel 
                                         f32 %201 = OpLoad %193 
                               Function f32* %202 = OpAccessChain %161 %190 
                                                      OpStore %202 %201 
                                       f32_3 %203 = OpLoad %161 
                                                      OpStore %127 %203 
                                Private f32* %204 = OpAccessChain %127 %177 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %127 %163 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpExtInst %1 37 %205 %207 
                                                      OpStore %77 %208 
                                Private f32* %209 = OpAccessChain %127 %190 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpLoad %77 
                                         f32 %212 = OpExtInst %1 37 %210 %211 
                                                      OpStore %77 %212 
                                       f32_3 %213 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %214 = OpAccessChain %17 %103 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_3 %218 = OpFAdd %213 %217 
                                                      OpStore %127 %218 
                                       f32_4 %219 = OpLoad %119 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpLoad %77 
                                       f32_3 %222 = OpCompositeConstruct %221 %221 %221 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_3 %224 = OpLoad %127 
                                       f32_3 %225 = OpFAdd %223 %224 
                                       f32_4 %226 = OpLoad %119 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                                      OpStore %119 %227 
                                                      OpBranch %111 
                                             %228 = OpLabel 
                                       f32_4 %229 = OpLoad %87 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_4 %231 = OpLoad %119 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %119 %232 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                         f32 %233 = OpLoad %69 
                                         f32 %234 = OpFNegate %233 
                                         f32 %236 = OpFMul %234 %235 
                                         f32 %238 = OpFAdd %236 %237 
                                                      OpStore %77 %238 
                                         f32 %239 = OpLoad %69 
                                         f32 %240 = OpLoad %77 
                                         f32 %241 = OpFMul %239 %240 
                                                      OpStore %77 %241 
                                         f32 %242 = OpLoad %77 
                                         f32 %244 = OpFMul %242 %243 
                                                      OpStore %77 %244 
                       read_only TextureCube %248 = OpLoad %247 
                                     sampler %250 = OpLoad %249 
                read_only TextureCubeSampled %252 = OpSampledImage %248 %250 
                                       f32_4 %253 = OpLoad %119 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                         f32 %255 = OpLoad %77 
                                       f32_4 %256 = OpImageSampleExplicitLod %252 %254 Lod %7 
                                                      OpStore %119 %256 
                                Private f32* %258 = OpAccessChain %119 %105 
                                         f32 %259 = OpLoad %258 
                                         f32 %261 = OpFAdd %259 %260 
                                                      OpStore %257 %261 
                                Uniform f32* %263 = OpAccessChain %17 %262 %105 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpLoad %257 
                                         f32 %266 = OpFMul %264 %265 
                                         f32 %267 = OpFAdd %266 %75 
                                                      OpStore %257 %267 
                                         f32 %268 = OpLoad %257 
                                         f32 %269 = OpExtInst %1 30 %268 
                                                      OpStore %257 %269 
                                         f32 %270 = OpLoad %257 
                                Uniform f32* %271 = OpAccessChain %17 %262 %177 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFMul %270 %272 
                                                      OpStore %257 %273 
                                         f32 %274 = OpLoad %257 
                                         f32 %275 = OpExtInst %1 29 %274 
                                                      OpStore %257 %275 
                                         f32 %276 = OpLoad %257 
                                Uniform f32* %277 = OpAccessChain %17 %262 %163 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFMul %276 %278 
                                                      OpStore %257 %279 
                                       f32_4 %280 = OpLoad %119 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                         f32 %282 = OpLoad %257 
                                       f32_3 %283 = OpCompositeConstruct %282 %282 %282 
                                       f32_3 %284 = OpFMul %281 %283 
                                                      OpStore %127 %284 
                                Uniform f32* %286 = OpAccessChain %17 %142 %105 
                                         f32 %287 = OpLoad %286 
                                        bool %289 = OpFOrdLessThan %287 %288 
                                                      OpStore %285 %289 
                                        bool %290 = OpLoad %285 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                Uniform f32* %294 = OpAccessChain %17 %293 %105 
                                         f32 %295 = OpLoad %294 
                                        bool %296 = OpFOrdLessThan %102 %295 
                                                      OpStore %285 %296 
                                        bool %297 = OpLoad %285 
                                                      OpSelectionMerge %299 None 
                                                      OpBranchConditional %297 %298 %299 
                                             %298 = OpLabel 
                                       f32_4 %301 = OpLoad %87 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %87 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                         f32 %305 = OpDot %302 %304 
                                                      OpStore %300 %305 
                                         f32 %306 = OpLoad %300 
                                         f32 %307 = OpExtInst %1 32 %306 
                                                      OpStore %300 %307 
                                         f32 %308 = OpLoad %300 
                                       f32_3 %309 = OpCompositeConstruct %308 %308 %308 
                                       f32_4 %310 = OpLoad %87 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFMul %309 %311 
                                                      OpStore %139 %312 
                                       f32_3 %314 = OpLoad vs_TEXCOORD2 
                                       f32_3 %315 = OpFNegate %314 
                              Uniform f32_4* %317 = OpAccessChain %17 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %315 %319 
                                                      OpStore %313 %320 
                                       f32_3 %321 = OpLoad %313 
                                       f32_3 %322 = OpLoad %139 
                                       f32_3 %323 = OpFDiv %321 %322 
                                                      OpStore %313 %323 
                                       f32_3 %325 = OpLoad vs_TEXCOORD2 
                                       f32_3 %326 = OpFNegate %325 
                              Uniform f32_4* %328 = OpAccessChain %17 %327 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFAdd %326 %330 
                                                      OpStore %324 %331 
                                       f32_3 %332 = OpLoad %324 
                                       f32_3 %333 = OpLoad %139 
                                       f32_3 %334 = OpFDiv %332 %333 
                                                      OpStore %324 %334 
                                       f32_3 %336 = OpLoad %139 
                                       f32_4 %337 = OpVectorShuffle %336 %336 0 1 2 0 
                                      bool_4 %338 = OpFOrdLessThan %154 %337 
                                      bool_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                                      OpStore %335 %339 
                                       f32_3 %341 = OpLoad %313 
                                                      OpStore %340 %341 
                               Private bool* %342 = OpAccessChain %335 %163 
                                        bool %343 = OpLoad %342 
                                                      OpSelectionMerge %346 None 
                                                      OpBranchConditional %343 %345 %349 
                                             %345 = OpLabel 
                                Private f32* %347 = OpAccessChain %313 %163 
                                         f32 %348 = OpLoad %347 
                                                      OpStore %344 %348 
                                                      OpBranch %346 
                                             %349 = OpLabel 
                                Private f32* %350 = OpAccessChain %324 %163 
                                         f32 %351 = OpLoad %350 
                                                      OpStore %344 %351 
                                                      OpBranch %346 
                                             %346 = OpLabel 
                                         f32 %352 = OpLoad %344 
                               Function f32* %353 = OpAccessChain %340 %163 
                                                      OpStore %353 %352 
                               Private bool* %354 = OpAccessChain %335 %177 
                                        bool %355 = OpLoad %354 
                                                      OpSelectionMerge %358 None 
                                                      OpBranchConditional %355 %357 %361 
                                             %357 = OpLabel 
                                Private f32* %359 = OpAccessChain %313 %177 
                                         f32 %360 = OpLoad %359 
                                                      OpStore %356 %360 
                                                      OpBranch %358 
                                             %361 = OpLabel 
                                Private f32* %362 = OpAccessChain %324 %177 
                                         f32 %363 = OpLoad %362 
                                                      OpStore %356 %363 
                                                      OpBranch %358 
                                             %358 = OpLabel 
                                         f32 %364 = OpLoad %356 
                               Function f32* %365 = OpAccessChain %340 %177 
                                                      OpStore %365 %364 
                               Private bool* %366 = OpAccessChain %335 %190 
                                        bool %367 = OpLoad %366 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %367 %369 %373 
                                             %369 = OpLabel 
                                Private f32* %371 = OpAccessChain %313 %190 
                                         f32 %372 = OpLoad %371 
                                                      OpStore %368 %372 
                                                      OpBranch %370 
                                             %373 = OpLabel 
                                Private f32* %374 = OpAccessChain %324 %190 
                                         f32 %375 = OpLoad %374 
                                                      OpStore %368 %375 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %376 = OpLoad %368 
                               Function f32* %377 = OpAccessChain %340 %190 
                                                      OpStore %377 %376 
                                       f32_3 %378 = OpLoad %340 
                                                      OpStore %313 %378 
                                Private f32* %379 = OpAccessChain %313 %177 
                                         f32 %380 = OpLoad %379 
                                Private f32* %381 = OpAccessChain %313 %163 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpExtInst %1 37 %380 %382 
                                                      OpStore %300 %383 
                                Private f32* %384 = OpAccessChain %313 %190 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpLoad %300 
                                         f32 %387 = OpExtInst %1 37 %385 %386 
                                                      OpStore %300 %387 
                                       f32_3 %388 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %389 = OpAccessChain %17 %293 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFNegate %391 
                                       f32_3 %393 = OpFAdd %388 %392 
                                                      OpStore %313 %393 
                                       f32_3 %394 = OpLoad %139 
                                         f32 %395 = OpLoad %300 
                                       f32_3 %396 = OpCompositeConstruct %395 %395 %395 
                                       f32_3 %397 = OpFMul %394 %396 
                                       f32_3 %398 = OpLoad %313 
                                       f32_3 %399 = OpFAdd %397 %398 
                                       f32_4 %400 = OpLoad %87 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %87 %401 
                                                      OpBranch %299 
                                             %299 = OpLabel 
                       read_only TextureCube %403 = OpLoad %402 
                                     sampler %404 = OpLoad %249 
                read_only TextureCubeSampled %405 = OpSampledImage %403 %404 
                                       f32_4 %406 = OpLoad %87 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                         f32 %408 = OpLoad %77 
                                       f32_4 %409 = OpImageSampleExplicitLod %405 %407 Lod %7 
                                                      OpStore %87 %409 
                                Private f32* %410 = OpAccessChain %87 %105 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFAdd %411 %260 
                                                      OpStore %77 %412 
                                Uniform f32* %414 = OpAccessChain %17 %413 %105 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpLoad %77 
                                         f32 %417 = OpFMul %415 %416 
                                         f32 %418 = OpFAdd %417 %75 
                                                      OpStore %77 %418 
                                         f32 %419 = OpLoad %77 
                                         f32 %420 = OpExtInst %1 30 %419 
                                                      OpStore %77 %420 
                                         f32 %421 = OpLoad %77 
                                Uniform f32* %422 = OpAccessChain %17 %413 %177 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFMul %421 %423 
                                                      OpStore %77 %424 
                                         f32 %425 = OpLoad %77 
                                         f32 %426 = OpExtInst %1 29 %425 
                                                      OpStore %77 %426 
                                         f32 %427 = OpLoad %77 
                                Uniform f32* %428 = OpAccessChain %17 %413 %163 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                                      OpStore %77 %430 
                                       f32_4 %431 = OpLoad %87 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                         f32 %433 = OpLoad %77 
                                       f32_3 %434 = OpCompositeConstruct %433 %433 %433 
                                       f32_3 %435 = OpFMul %432 %434 
                                       f32_4 %436 = OpLoad %87 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %87 %437 
                                         f32 %438 = OpLoad %257 
                                       f32_3 %439 = OpCompositeConstruct %438 %438 %438 
                                       f32_4 %440 = OpLoad %119 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %439 %441 
                                       f32_4 %443 = OpLoad %87 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_3 %445 = OpFNegate %444 
                                       f32_3 %446 = OpFAdd %442 %445 
                                       f32_4 %447 = OpLoad %119 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %119 %448 
                              Uniform f32_4* %449 = OpAccessChain %17 %142 
                                       f32_4 %450 = OpLoad %449 
                                       f32_3 %451 = OpVectorShuffle %450 %450 3 3 3 
                                       f32_4 %452 = OpLoad %119 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                       f32_3 %454 = OpFMul %451 %453 
                                       f32_4 %455 = OpLoad %87 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpFAdd %454 %456 
                                                      OpStore %127 %457 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                       f32_3 %458 = OpLoad vs_TEXCOORD1 
                                       f32_3 %459 = OpLoad vs_TEXCOORD1 
                                         f32 %460 = OpDot %458 %459 
                                                      OpStore %77 %460 
                                         f32 %461 = OpLoad %77 
                                         f32 %462 = OpExtInst %1 32 %461 
                                                      OpStore %77 %462 
                                         f32 %463 = OpLoad %77 
                                       f32_3 %464 = OpCompositeConstruct %463 %463 %463 
                                       f32_3 %465 = OpLoad vs_TEXCOORD1 
                                       f32_3 %466 = OpFMul %464 %465 
                                       f32_4 %467 = OpLoad %87 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %87 %468 
                                       f32_3 %469 = OpLoad %44 
                              Uniform f32_4* %470 = OpAccessChain %17 %63 
                                       f32_4 %471 = OpLoad %470 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFMul %469 %472 
                                       f32_3 %476 = OpFAdd %473 %475 
                                       f32_4 %477 = OpLoad %119 
                                       f32_4 %478 = OpVectorShuffle %477 %476 4 5 6 3 
                                                      OpStore %119 %478 
                                Uniform f32* %480 = OpAccessChain %17 %479 
                                         f32 %481 = OpLoad %480 
                                Uniform f32* %482 = OpAccessChain %17 %479 
                                         f32 %483 = OpLoad %482 
                                Uniform f32* %484 = OpAccessChain %17 %479 
                                         f32 %485 = OpLoad %484 
                                       f32_3 %486 = OpCompositeConstruct %481 %483 %485 
                                         f32 %487 = OpCompositeExtract %486 0 
                                         f32 %488 = OpCompositeExtract %486 1 
                                         f32 %489 = OpCompositeExtract %486 2 
                                       f32_3 %490 = OpCompositeConstruct %487 %488 %489 
                                       f32_4 %491 = OpLoad %119 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFMul %490 %492 
                                       f32_3 %496 = OpFAdd %493 %495 
                                       f32_4 %497 = OpLoad %119 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
                                                      OpStore %119 %498 
                                Uniform f32* %499 = OpAccessChain %17 %479 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFNegate %500 
                                         f32 %503 = OpFMul %501 %502 
                                         f32 %504 = OpFAdd %503 %502 
                                                      OpStore %77 %504 
                                         f32 %505 = OpLoad %77 
                                       f32_3 %506 = OpCompositeConstruct %505 %505 %505 
                                       f32_3 %507 = OpLoad %61 
                                       f32_3 %508 = OpFMul %506 %507 
                                                      OpStore %61 %508 
                                       f32_4 %509 = OpLoad %9 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                         f32 %511 = OpLoad %27 
                                       f32_3 %512 = OpCompositeConstruct %511 %511 %511 
                                       f32_3 %513 = OpFMul %510 %512 
                              Uniform f32_4* %515 = OpAccessChain %17 %514 
                                       f32_4 %516 = OpLoad %515 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpFAdd %513 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %9 %520 
                                       f32_4 %521 = OpLoad %9 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_4 %523 = OpLoad %9 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                         f32 %525 = OpDot %522 %524 
                                                      OpStore %27 %525 
                                         f32 %526 = OpLoad %27 
                                         f32 %528 = OpExtInst %1 40 %526 %527 
                                                      OpStore %27 %528 
                                         f32 %529 = OpLoad %27 
                                         f32 %530 = OpExtInst %1 32 %529 
                                                      OpStore %27 %530 
                                         f32 %531 = OpLoad %27 
                                       f32_3 %532 = OpCompositeConstruct %531 %531 %531 
                                       f32_4 %533 = OpLoad %9 
                                       f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                       f32_3 %535 = OpFMul %532 %534 
                                       f32_4 %536 = OpLoad %9 
                                       f32_4 %537 = OpVectorShuffle %536 %535 4 5 6 3 
                                                      OpStore %9 %537 
                                       f32_4 %538 = OpLoad %87 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_4 %540 = OpLoad %35 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                         f32 %542 = OpDot %539 %541 
                                                      OpStore %27 %542 
                                       f32_4 %543 = OpLoad %87 
                                       f32_3 %544 = OpVectorShuffle %543 %543 0 1 2 
                              Uniform f32_4* %545 = OpAccessChain %17 %514 
                                       f32_4 %546 = OpLoad %545 
                                       f32_3 %547 = OpVectorShuffle %546 %546 0 1 2 
                                         f32 %548 = OpDot %544 %547 
                                Private f32* %549 = OpAccessChain %35 %163 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %35 %163 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpExtInst %1 43 %551 %102 %75 
                                Private f32* %553 = OpAccessChain %35 %163 
                                                      OpStore %553 %552 
                                       f32_4 %555 = OpLoad %87 
                                       f32_3 %556 = OpVectorShuffle %555 %555 0 1 2 
                                       f32_4 %557 = OpLoad %9 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                         f32 %559 = OpDot %556 %558 
                                                      OpStore %554 %559 
                                         f32 %560 = OpLoad %554 
                                         f32 %561 = OpExtInst %1 43 %560 %102 %75 
                                                      OpStore %554 %561 
                              Uniform f32_4* %562 = OpAccessChain %17 %514 
                                       f32_4 %563 = OpLoad %562 
                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
                                       f32_4 %565 = OpLoad %9 
                                       f32_3 %566 = OpVectorShuffle %565 %565 0 1 2 
                                         f32 %567 = OpDot %564 %566 
                                Private f32* %568 = OpAccessChain %9 %163 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %9 %163 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpExtInst %1 43 %570 %102 %75 
                                Private f32* %572 = OpAccessChain %9 %163 
                                                      OpStore %572 %571 
                                Private f32* %574 = OpAccessChain %9 %163 
                                         f32 %575 = OpLoad %574 
                                Private f32* %576 = OpAccessChain %9 %163 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpFMul %575 %577 
                                Private f32* %579 = OpAccessChain %573 %163 
                                                      OpStore %579 %578 
                                       f32_3 %580 = OpLoad %573 
                                       f32_2 %581 = OpVectorShuffle %580 %580 0 0 
                                         f32 %582 = OpLoad %69 
                                       f32_2 %583 = OpCompositeConstruct %582 %582 
                                         f32 %584 = OpDot %581 %583 
                                Private f32* %585 = OpAccessChain %573 %163 
                                                      OpStore %585 %584 
                                Private f32* %586 = OpAccessChain %573 %163 
                                         f32 %587 = OpLoad %586 
                                         f32 %589 = OpFAdd %587 %588 
                                Private f32* %590 = OpAccessChain %573 %163 
                                                      OpStore %590 %589 
                                Private f32* %592 = OpAccessChain %35 %163 
                                         f32 %593 = OpLoad %592 
                                         f32 %594 = OpFNegate %593 
                                         f32 %595 = OpFAdd %594 %75 
                                                      OpStore %591 %595 
                                         f32 %597 = OpLoad %591 
                                         f32 %598 = OpLoad %591 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %596 %599 
                                         f32 %600 = OpLoad %596 
                                         f32 %601 = OpLoad %596 
                                         f32 %602 = OpFMul %600 %601 
                                                      OpStore %596 %602 
                                         f32 %603 = OpLoad %591 
                                         f32 %604 = OpLoad %596 
                                         f32 %605 = OpFMul %603 %604 
                                                      OpStore %591 %605 
                                Private f32* %606 = OpAccessChain %573 %163 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpLoad %591 
                                         f32 %609 = OpFMul %607 %608 
                                         f32 %610 = OpFAdd %609 %75 
                                                      OpStore %591 %610 
                                         f32 %611 = OpLoad %27 
                                         f32 %612 = OpExtInst %1 4 %611 
                                         f32 %613 = OpFNegate %612 
                                         f32 %614 = OpFAdd %613 %75 
                                                      OpStore %596 %614 
                                         f32 %615 = OpLoad %596 
                                         f32 %616 = OpLoad %596 
                                         f32 %617 = OpFMul %615 %616 
                                                      OpStore %257 %617 
                                         f32 %618 = OpLoad %257 
                                         f32 %619 = OpLoad %257 
                                         f32 %620 = OpFMul %618 %619 
                                                      OpStore %257 %620 
                                         f32 %621 = OpLoad %596 
                                         f32 %622 = OpLoad %257 
                                         f32 %623 = OpFMul %621 %622 
                                                      OpStore %596 %623 
                                Private f32* %624 = OpAccessChain %573 %163 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpLoad %596 
                                         f32 %627 = OpFMul %625 %626 
                                         f32 %628 = OpFAdd %627 %75 
                                Private f32* %629 = OpAccessChain %573 %163 
                                                      OpStore %629 %628 
                                Private f32* %630 = OpAccessChain %573 %163 
                                         f32 %631 = OpLoad %630 
                                         f32 %632 = OpLoad %591 
                                         f32 %633 = OpFMul %631 %632 
                                Private f32* %634 = OpAccessChain %573 %163 
                                                      OpStore %634 %633 
                                         f32 %635 = OpLoad %69 
                                         f32 %636 = OpLoad %69 
                                         f32 %637 = OpFMul %635 %636 
                                                      OpStore %591 %637 
                                         f32 %638 = OpLoad %591 
                                         f32 %640 = OpExtInst %1 40 %638 %639 
                                                      OpStore %591 %640 
                                         f32 %641 = OpLoad %591 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFAdd %642 %75 
                                                      OpStore %69 %643 
                                         f32 %644 = OpLoad %27 
                                         f32 %645 = OpExtInst %1 4 %644 
                                         f32 %646 = OpLoad %69 
                                         f32 %647 = OpFMul %645 %646 
                                         f32 %648 = OpLoad %591 
                                         f32 %649 = OpFAdd %647 %648 
                                                      OpStore %257 %649 
                                Private f32* %650 = OpAccessChain %35 %163 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpLoad %69 
                                         f32 %653 = OpFMul %651 %652 
                                         f32 %654 = OpLoad %591 
                                         f32 %655 = OpFAdd %653 %654 
                                                      OpStore %69 %655 
                                         f32 %656 = OpLoad %27 
                                         f32 %657 = OpExtInst %1 4 %656 
                                         f32 %658 = OpLoad %69 
                                         f32 %659 = OpFMul %657 %658 
                                                      OpStore %27 %659 
                                Private f32* %660 = OpAccessChain %35 %163 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %257 
                                         f32 %663 = OpFMul %661 %662 
                                         f32 %664 = OpLoad %27 
                                         f32 %665 = OpFAdd %663 %664 
                                                      OpStore %27 %665 
                                         f32 %666 = OpLoad %27 
                                         f32 %668 = OpFAdd %666 %667 
                                                      OpStore %27 %668 
                                         f32 %670 = OpLoad %27 
                                         f32 %671 = OpFDiv %669 %670 
                                                      OpStore %27 %671 
                                         f32 %672 = OpLoad %591 
                                         f32 %673 = OpLoad %591 
                                         f32 %674 = OpFMul %672 %673 
                                                      OpStore %69 %674 
                                         f32 %675 = OpLoad %554 
                                         f32 %676 = OpLoad %69 
                                         f32 %677 = OpFMul %675 %676 
                                         f32 %678 = OpLoad %554 
                                         f32 %679 = OpFNegate %678 
                                         f32 %680 = OpFAdd %677 %679 
                                                      OpStore %257 %680 
                                         f32 %681 = OpLoad %257 
                                         f32 %682 = OpLoad %554 
                                         f32 %683 = OpFMul %681 %682 
                                         f32 %684 = OpFAdd %683 %75 
                                                      OpStore %554 %684 
                                         f32 %685 = OpLoad %69 
                                         f32 %687 = OpFMul %685 %686 
                                                      OpStore %69 %687 
                                         f32 %688 = OpLoad %554 
                                         f32 %689 = OpLoad %554 
                                         f32 %690 = OpFMul %688 %689 
                                         f32 %692 = OpFAdd %690 %691 
                                                      OpStore %554 %692 
                                         f32 %693 = OpLoad %69 
                                         f32 %694 = OpLoad %554 
                                         f32 %695 = OpFDiv %693 %694 
                                                      OpStore %554 %695 
                                         f32 %696 = OpLoad %27 
                                         f32 %697 = OpLoad %554 
                                         f32 %698 = OpFMul %696 %697 
                                Private f32* %699 = OpAccessChain %573 %190 
                                                      OpStore %699 %698 
                                       f32_4 %700 = OpLoad %35 
                                       f32_2 %701 = OpVectorShuffle %700 %700 0 0 
                                       f32_3 %702 = OpLoad %573 
                                       f32_2 %703 = OpVectorShuffle %702 %702 0 2 
                                       f32_2 %704 = OpFMul %701 %703 
                                       f32_3 %705 = OpLoad %573 
                                       f32_3 %706 = OpVectorShuffle %705 %704 3 1 4 
                                                      OpStore %573 %706 
                                Private f32* %707 = OpAccessChain %573 %190 
                                         f32 %708 = OpLoad %707 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %27 %710 
                                         f32 %711 = OpLoad %27 
                                         f32 %712 = OpExtInst %1 40 %711 %102 
                                                      OpStore %27 %712 
                                         f32 %713 = OpLoad %591 
                                         f32 %714 = OpLoad %591 
                                         f32 %715 = OpFMul %713 %714 
                                         f32 %716 = OpFAdd %715 %75 
                                                      OpStore %591 %716 
                                         f32 %717 = OpLoad %591 
                                         f32 %718 = OpFDiv %75 %717 
                                                      OpStore %591 %718 
                                       f32_4 %719 = OpLoad %119 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 1 2 
                                       f32_4 %721 = OpLoad %119 
                                       f32_3 %722 = OpVectorShuffle %721 %721 0 1 2 
                                         f32 %723 = OpDot %720 %722 
                                Private f32* %724 = OpAccessChain %35 %163 
                                                      OpStore %724 %723 
                                Private f32* %726 = OpAccessChain %35 %163 
                                         f32 %727 = OpLoad %726 
                                        bool %728 = OpFOrdNotEqual %727 %102 
                                                      OpStore %725 %728 
                                        bool %729 = OpLoad %725 
                                         f32 %730 = OpSelect %729 %75 %102 
                                Private f32* %731 = OpAccessChain %35 %163 
                                                      OpStore %731 %730 
                                         f32 %732 = OpLoad %27 
                                Private f32* %733 = OpAccessChain %35 %163 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpFMul %732 %734 
                                                      OpStore %27 %735 
                                         f32 %736 = OpLoad %77 
                                         f32 %737 = OpFNegate %736 
                                Uniform f32* %738 = OpAccessChain %17 %70 
                                         f32 %739 = OpLoad %738 
                                         f32 %740 = OpFAdd %737 %739 
                                Private f32* %741 = OpAccessChain %35 %163 
                                                      OpStore %741 %740 
                                Private f32* %742 = OpAccessChain %35 %163 
                                         f32 %743 = OpLoad %742 
                                         f32 %744 = OpFAdd %743 %75 
                                Private f32* %745 = OpAccessChain %35 %163 
                                                      OpStore %745 %744 
                                Private f32* %746 = OpAccessChain %35 %163 
                                         f32 %747 = OpLoad %746 
                                         f32 %748 = OpExtInst %1 43 %747 %102 %75 
                                Private f32* %749 = OpAccessChain %35 %163 
                                                      OpStore %749 %748 
                                       f32_3 %750 = OpLoad %573 
                                       f32_3 %751 = OpVectorShuffle %750 %750 0 0 0 
                              Uniform f32_4* %753 = OpAccessChain %17 %752 
                                       f32_4 %754 = OpLoad %753 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %751 %755 
                                       f32_4 %757 = OpLoad %87 
                                       f32_4 %758 = OpVectorShuffle %757 %756 4 5 6 3 
                                                      OpStore %87 %758 
                                         f32 %759 = OpLoad %27 
                                       f32_3 %760 = OpCompositeConstruct %759 %759 %759 
                              Uniform f32_4* %761 = OpAccessChain %17 %752 
                                       f32_4 %762 = OpLoad %761 
                                       f32_3 %763 = OpVectorShuffle %762 %762 0 1 2 
                                       f32_3 %764 = OpFMul %760 %763 
                                                      OpStore %139 %764 
                                Private f32* %765 = OpAccessChain %9 %163 
                                         f32 %766 = OpLoad %765 
                                         f32 %767 = OpFNegate %766 
                                         f32 %768 = OpFAdd %767 %75 
                                Private f32* %769 = OpAccessChain %9 %163 
                                                      OpStore %769 %768 
                                Private f32* %770 = OpAccessChain %9 %163 
                                         f32 %771 = OpLoad %770 
                                Private f32* %772 = OpAccessChain %9 %163 
                                         f32 %773 = OpLoad %772 
                                         f32 %774 = OpFMul %771 %773 
                                Private f32* %775 = OpAccessChain %573 %163 
                                                      OpStore %775 %774 
                                Private f32* %776 = OpAccessChain %573 %163 
                                         f32 %777 = OpLoad %776 
                                Private f32* %778 = OpAccessChain %573 %163 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFMul %777 %779 
                                Private f32* %781 = OpAccessChain %573 %163 
                                                      OpStore %781 %780 
                                Private f32* %782 = OpAccessChain %9 %163 
                                         f32 %783 = OpLoad %782 
                                Private f32* %784 = OpAccessChain %573 %163 
                                         f32 %785 = OpLoad %784 
                                         f32 %786 = OpFMul %783 %785 
                                Private f32* %787 = OpAccessChain %9 %163 
                                                      OpStore %787 %786 
                                       f32_4 %788 = OpLoad %119 
                                       f32_3 %789 = OpVectorShuffle %788 %788 0 1 2 
                                       f32_3 %790 = OpFNegate %789 
                                       f32_3 %792 = OpFAdd %790 %791 
                                                      OpStore %313 %792 
                                       f32_3 %793 = OpLoad %313 
                                       f32_4 %794 = OpLoad %9 
                                       f32_3 %795 = OpVectorShuffle %794 %794 0 0 0 
                                       f32_3 %796 = OpFMul %793 %795 
                                       f32_4 %797 = OpLoad %119 
                                       f32_3 %798 = OpVectorShuffle %797 %797 0 1 2 
                                       f32_3 %799 = OpFAdd %796 %798 
                                       f32_4 %800 = OpLoad %9 
                                       f32_4 %801 = OpVectorShuffle %800 %799 4 5 2 6 
                                                      OpStore %9 %801 
                                       f32_4 %802 = OpLoad %9 
                                       f32_3 %803 = OpVectorShuffle %802 %802 0 1 3 
                                       f32_3 %804 = OpLoad %139 
                                       f32_3 %805 = OpFMul %803 %804 
                                       f32_4 %806 = OpLoad %9 
                                       f32_4 %807 = OpVectorShuffle %806 %805 4 5 2 6 
                                                      OpStore %9 %807 
                                       f32_3 %808 = OpLoad %61 
                                       f32_4 %809 = OpLoad %87 
                                       f32_3 %810 = OpVectorShuffle %809 %809 0 1 2 
                                       f32_3 %811 = OpFMul %808 %810 
                                       f32_4 %812 = OpLoad %9 
                                       f32_3 %813 = OpVectorShuffle %812 %812 0 1 3 
                                       f32_3 %814 = OpFAdd %811 %813 
                                       f32_4 %815 = OpLoad %9 
                                       f32_4 %816 = OpVectorShuffle %815 %814 4 5 2 6 
                                                      OpStore %9 %816 
                                       f32_3 %817 = OpLoad %127 
                                         f32 %818 = OpLoad %591 
                                       f32_3 %819 = OpCompositeConstruct %818 %818 %818 
                                       f32_3 %820 = OpFMul %817 %819 
                                                      OpStore %61 %820 
                                       f32_4 %821 = OpLoad %119 
                                       f32_3 %822 = OpVectorShuffle %821 %821 0 1 2 
                                       f32_3 %823 = OpFNegate %822 
                                       f32_4 %824 = OpLoad %35 
                                       f32_3 %825 = OpVectorShuffle %824 %824 0 0 0 
                                       f32_3 %826 = OpFAdd %823 %825 
                                       f32_4 %827 = OpLoad %35 
                                       f32_4 %828 = OpVectorShuffle %827 %826 4 5 2 6 
                                                      OpStore %35 %828 
                                         f32 %829 = OpLoad %596 
                                       f32_3 %830 = OpCompositeConstruct %829 %829 %829 
                                       f32_4 %831 = OpLoad %35 
                                       f32_3 %832 = OpVectorShuffle %831 %831 0 1 3 
                                       f32_3 %833 = OpFMul %830 %832 
                                       f32_4 %834 = OpLoad %119 
                                       f32_3 %835 = OpVectorShuffle %834 %834 0 1 2 
                                       f32_3 %836 = OpFAdd %833 %835 
                                       f32_4 %837 = OpLoad %35 
                                       f32_4 %838 = OpVectorShuffle %837 %836 4 5 6 3 
                                                      OpStore %35 %838 
                                       f32_3 %839 = OpLoad %61 
                                       f32_4 %840 = OpLoad %35 
                                       f32_3 %841 = OpVectorShuffle %840 %840 0 1 2 
                                       f32_3 %842 = OpFMul %839 %841 
                                       f32_4 %843 = OpLoad %9 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 3 
                                       f32_3 %845 = OpFAdd %842 %844 
                                       f32_4 %846 = OpLoad %9 
                                       f32_4 %847 = OpVectorShuffle %846 %845 4 5 6 3 
                                                      OpStore %9 %847 
                                       f32_3 %850 = OpLoad %44 
                              Uniform f32_4* %851 = OpAccessChain %17 %63 
                                       f32_4 %852 = OpLoad %851 
                                       f32_3 %853 = OpVectorShuffle %852 %852 0 1 2 
                                       f32_3 %854 = OpFMul %850 %853 
                                       f32_4 %855 = OpLoad %9 
                                       f32_3 %856 = OpVectorShuffle %855 %855 0 1 2 
                                       f32_3 %857 = OpFAdd %854 %856 
                                       f32_4 %858 = OpLoad %849 
                                       f32_4 %859 = OpVectorShuffle %858 %857 4 5 6 3 
                                                      OpStore %849 %859 
                                 Output f32* %861 = OpAccessChain %849 %105 
                                                      OpStore %861 %75 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
float u_xlat12;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat12 = u_xlat0.y * u_xlat0.y;
    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat37 = (-_Glossiness) + 1.0;
    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz;
    u_xlat5.w = 1.0;
    u_xlat6.x = dot(unity_SHAr, u_xlat5);
    u_xlat6.y = dot(unity_SHAg, u_xlat5);
    u_xlat6.z = dot(unity_SHAb, u_xlat5);
    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb38){
        u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat38 = inversesqrt(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat38) * u_xlat4.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
        u_xlat38 = min(u_xlat7.z, u_xlat38);
        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat38 = (-u_xlat37) * 0.699999988 + 1.70000005;
    u_xlat38 = u_xlat37 * u_xlat38;
    u_xlat38 = u_xlat38 * 6.0;
    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat38);
    u_xlat39 = u_xlat6.w + -1.0;
    u_xlat39 = unity_SpecCube0_HDR.w * u_xlat39 + 1.0;
    u_xlat39 = log2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.y;
    u_xlat39 = exp2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat39);
    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = inversesqrt(u_xlat40);
            u_xlat8.xyz = vec3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat38);
        u_xlat38 = u_xlat4.w + -1.0;
        u_xlat38 = unity_SpecCube1_HDR.w * u_xlat38 + 1.0;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.y;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz + (-u_xlat4.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
    }
    u_xlat38 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat4.xyz = vec3(u_xlat38) * vs_TEXCOORD1.xyz;
    u_xlat6.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat38 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat38) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat37));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat39 = u_xlat25 * u_xlat25;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat25 = u_xlat25 * u_xlat39;
    u_xlat12.x = u_xlat12.x * u_xlat25 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat37 * u_xlat37;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat37 = (-u_xlat24) + 1.0;
    u_xlat39 = abs(u_xlat36) * u_xlat37 + u_xlat24;
    u_xlat37 = u_xlat1.x * u_xlat37 + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat37;
    u_xlat36 = u_xlat1.x * u_xlat39 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat37 = u_xlat24 * u_xlat24;
    u_xlat39 = u_xlat13 * u_xlat37 + (-u_xlat13);
    u_xlat13 = u_xlat39 * u_xlat13 + 1.0;
    u_xlat37 = u_xlat37 * 0.318309873;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat13 = u_xlat37 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat12.z = u_xlat36 * 3.14159274;
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat36 = max(u_xlat12.z, 0.0);
    u_xlat24 = u_xlat24 * u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat36 * u_xlat1.x;
    u_xlat1.x = (-u_xlat38) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat5.xyz;
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat8.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat24);
    u_xlat1.xyw = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyw + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 439
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %194 %227 %238 %239 %383 %420 %431 %432 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 194 
                                                      OpMemberDecorate %225 0 BuiltIn 225 
                                                      OpMemberDecorate %225 1 BuiltIn 225 
                                                      OpMemberDecorate %225 2 BuiltIn 225 
                                                      OpDecorate %225 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 238 
                                                      OpDecorate %239 Location 239 
                                                      OpDecorate vs_TEXCOORD1 Location 383 
                                                      OpDecorate vs_TEXCOORD3 Location 420 
                                                      OpDecorate vs_TEXCOORD5 Location 431 
                                                      OpDecorate vs_TEXCOORD6 Location 432 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 11 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 12 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 10 
                                         i32 %119 = OpConstant 9 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 5 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                                             %193 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %206 = OpConstant 7 
                                             %224 = OpTypeArray %6 %20 
                                             %225 = OpTypeStruct %7 %6 %224 
                                             %226 = OpTypePointer Output %225 
        Output struct {f32_4; f32; f32[1];}* %227 = OpVariable Output 
                                             %235 = OpTypePointer Output %7 
                                             %237 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %239 = OpVariable Input 
                                         i32 %242 = OpConstant 13 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_2 %266 = OpConstantComposite %265 %265 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_2 %269 = OpConstantComposite %268 %268 
                                Private f32* %273 = OpVariable Private 
                                         f32 %282 = OpConstant 3.674022E-40 
                                         f32 %283 = OpConstant 3.674022E-40 
                                       f32_2 %284 = OpConstantComposite %282 %283 
                                       f32_2 %286 = OpConstantComposite %56 %56 
                                         u32 %290 = OpConstant 2 
                                       f32_3 %308 = OpConstantComposite %56 %56 %56 
                                             %320 = OpTypeBool 
                                             %321 = OpTypePointer Private %320 
                               Private bool* %322 = OpVariable Private 
                                       f32_4 %323 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %324 = OpConstant 8 
                                             %328 = OpTypeVector %320 4 
                                             %332 = OpTypePointer Function %100 
                                         i32 %346 = OpConstant 6 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                Private f32* %386 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %421 = OpConstant 4 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %433 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %333 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %18 %167 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %166 %171 
                                                      OpStore %164 %172 
                              Uniform f32_4* %173 = OpAccessChain %18 %167 %19 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %114 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %164 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %164 %179 
                              Uniform f32_4* %181 = OpAccessChain %18 %167 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %114 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %164 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %114 %187 
                                       f32_4 %188 = OpLoad %114 
                              Uniform f32_4* %190 = OpAccessChain %18 %167 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %164 %192 
                              Uniform f32_4* %195 = OpAccessChain %18 %167 %189 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %158 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %114 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                                      OpStore vs_TEXCOORD2 %203 
                                       f32_4 %204 = OpLoad %164 
                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
                              Uniform f32_4* %207 = OpAccessChain %18 %206 %168 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpFMul %205 %208 
                                                      OpStore %114 %209 
                              Uniform f32_4* %210 = OpAccessChain %18 %206 %19 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %164 
                                       f32_4 %213 = OpVectorShuffle %212 %212 0 0 0 0 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %114 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %114 %216 
                              Uniform f32_4* %217 = OpAccessChain %18 %206 %180 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %164 
                                       f32_4 %220 = OpVectorShuffle %219 %219 2 2 2 2 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %114 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %114 %223 
                              Uniform f32_4* %228 = OpAccessChain %18 %206 %189 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %164 
                                       f32_4 %231 = OpVectorShuffle %230 %230 3 3 3 3 
                                       f32_4 %232 = OpFMul %229 %231 
                                       f32_4 %233 = OpLoad %114 
                                       f32_4 %234 = OpFAdd %232 %233 
                               Output f32_4* %236 = OpAccessChain %227 %19 
                                                      OpStore %236 %234 
                                       f32_4 %240 = OpLoad %239 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                              Uniform f32_4* %243 = OpAccessChain %18 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                                       f32_2 %246 = OpFMul %241 %245 
                              Uniform f32_4* %247 = OpAccessChain %18 %242 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 2 3 
                                       f32_2 %250 = OpFAdd %246 %249 
                                                      OpStore vs_TEXCOORD0 %250 
                                Private f32* %251 = OpAccessChain %76 %20 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpExtInst %1 8 %252 
                                Private f32* %254 = OpAccessChain %114 %29 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %114 %29 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFNegate %256 
                                         f32 %258 = OpFMul %257 %146 
                                Private f32* %259 = OpAccessChain %76 %29 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %114 %20 
                                                      OpStore %262 %261 
                                       f32_4 %263 = OpLoad %114 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                       f32_2 %267 = OpFMul %264 %266 
                                       f32_2 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %76 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 2 3 
                                                      OpStore %76 %272 
                                       f32_4 %274 = OpLoad %76 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_4 %276 = OpLoad %76 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                         f32 %278 = OpDot %275 %277 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                       f32_2 %280 = OpCompositeConstruct %279 %279 
                                       f32_2 %281 = OpFNegate %280 
                                       f32_2 %285 = OpFMul %281 %284 
                                       f32_2 %287 = OpFAdd %285 %286 
                                       f32_4 %288 = OpLoad %114 
                                       f32_4 %289 = OpVectorShuffle %288 %287 0 1 4 5 
                                                      OpStore %114 %289 
                                Private f32* %291 = OpAccessChain %114 %290 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpExtInst %1 31 %292 
                                                      OpStore %273 %293 
                                       f32_4 %294 = OpLoad %76 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                         f32 %296 = OpLoad %273 
                                       f32_2 %297 = OpCompositeConstruct %296 %296 
                                       f32_2 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %114 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 2 3 
                                                      OpStore %114 %300 
                                       f32_4 %301 = OpLoad %114 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 3 
                                       f32_3 %303 = OpExtInst %1 40 %302 %110 
                                       f32_4 %304 = OpLoad %76 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %76 %305 
                                       f32_4 %306 = OpLoad %76 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %309 = OpExtInst %1 37 %307 %308 
                                       f32_4 %310 = OpLoad %76 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %76 %311 
                                Private f32* %312 = OpAccessChain %76 %29 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFNegate %313 
                                Private f32* %315 = OpAccessChain %76 %154 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %9 %29 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFNegate %317 
                                Private f32* %319 = OpAccessChain %9 %154 
                                                      OpStore %319 %318 
                                Uniform f32* %325 = OpAccessChain %18 %324 
                                         f32 %326 = OpLoad %325 
                                       f32_4 %327 = OpCompositeConstruct %326 %326 %326 %326 
                                      bool_4 %329 = OpFOrdNotEqual %323 %327 
                                        bool %330 = OpAny %329 
                                                      OpStore %322 %330 
                                        bool %331 = OpLoad %322 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %331 %334 %338 
                                             %334 = OpLabel 
                                       f32_4 %336 = OpLoad %76 
                                       f32_3 %337 = OpVectorShuffle %336 %336 3 2 1 
                                                      OpStore %333 %337 
                                                      OpBranch %335 
                                             %338 = OpLabel 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 3 1 2 
                                                      OpStore %333 %340 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_3 %341 = OpLoad %333 
                                       f32_4 %342 = OpLoad %9 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %9 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                              Uniform f32_4* %347 = OpAccessChain %18 %346 %19 
                                       f32_4 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                         f32 %350 = OpDot %345 %349 
                                Private f32* %351 = OpAccessChain %76 %29 
                                                      OpStore %351 %350 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                              Uniform f32_4* %354 = OpAccessChain %18 %346 %168 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                         f32 %357 = OpDot %353 %356 
                                Private f32* %358 = OpAccessChain %76 %20 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %9 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                              Uniform f32_4* %361 = OpAccessChain %18 %346 %180 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                         f32 %364 = OpDot %360 %363 
                                Private f32* %365 = OpAccessChain %76 %290 
                                                      OpStore %365 %364 
                                       f32_4 %366 = OpLoad %76 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %76 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                         f32 %370 = OpDot %367 %369 
                                Private f32* %371 = OpAccessChain %9 %29 
                                                      OpStore %371 %370 
                                Private f32* %372 = OpAccessChain %9 %29 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpExtInst %1 32 %373 
                                Private f32* %375 = OpAccessChain %9 %29 
                                                      OpStore %375 %374 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 0 0 
                                       f32_4 %378 = OpLoad %76 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %377 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
                                                      OpStore %9 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                                      OpStore vs_TEXCOORD1 %385 
                                Private f32* %387 = OpAccessChain %9 %20 
                                         f32 %388 = OpLoad %387 
                                Private f32* %389 = OpAccessChain %9 %20 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFMul %388 %390 
                                                      OpStore %386 %391 
                                Private f32* %392 = OpAccessChain %9 %29 
                                         f32 %393 = OpLoad %392 
                                Private f32* %394 = OpAccessChain %9 %29 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                         f32 %397 = OpLoad %386 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFAdd %396 %398 
                                                      OpStore %386 %399 
                                       f32_4 %400 = OpLoad %9 
                                       f32_4 %401 = OpVectorShuffle %400 %400 1 2 2 0 
                                       f32_4 %402 = OpLoad %9 
                                       f32_4 %403 = OpVectorShuffle %402 %402 0 1 2 2 
                                       f32_4 %404 = OpFMul %401 %403 
                                                      OpStore %76 %404 
                              Uniform f32_4* %405 = OpAccessChain %18 %168 
                                       f32_4 %406 = OpLoad %405 
                                       f32_4 %407 = OpLoad %76 
                                         f32 %408 = OpDot %406 %407 
                                Private f32* %409 = OpAccessChain %9 %29 
                                                      OpStore %409 %408 
                              Uniform f32_4* %410 = OpAccessChain %18 %180 
                                       f32_4 %411 = OpLoad %410 
                                       f32_4 %412 = OpLoad %76 
                                         f32 %413 = OpDot %411 %412 
                                Private f32* %414 = OpAccessChain %9 %20 
                                                      OpStore %414 %413 
                              Uniform f32_4* %415 = OpAccessChain %18 %189 
                                       f32_4 %416 = OpLoad %415 
                                       f32_4 %417 = OpLoad %76 
                                         f32 %418 = OpDot %416 %417 
                                Private f32* %419 = OpAccessChain %9 %290 
                                                      OpStore %419 %418 
                              Uniform f32_4* %422 = OpAccessChain %18 %421 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                         f32 %425 = OpLoad %386 
                                       f32_3 %426 = OpCompositeConstruct %425 %425 %425 
                                       f32_3 %427 = OpFMul %424 %426 
                                       f32_4 %428 = OpLoad %9 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                       f32_3 %430 = OpFAdd %427 %429 
                                                      OpStore vs_TEXCOORD3 %430 
                                                      OpStore vs_TEXCOORD5 %323 
                                                      OpStore vs_TEXCOORD6 %323 
                                 Output f32* %434 = OpAccessChain %227 %19 %20 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpFNegate %435 
                                 Output f32* %437 = OpAccessChain %227 %19 %20 
                                                      OpStore %437 %436 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 905
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %57 %81 %130 %891 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate vs_TEXCOORD0 Location 57 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate vs_TEXCOORD3 Location 130 
                                                      OpDecorate %283 DescriptorSet 283 
                                                      OpDecorate %283 Binding 283 
                                                      OpDecorate %285 DescriptorSet 285 
                                                      OpDecorate %285 Binding 285 
                                                      OpDecorate %438 DescriptorSet 438 
                                                      OpDecorate %438 Binding 438 
                                                      OpDecorate %891 Location 891 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                                              %43 = OpTypePointer Private %10 
                               Private f32_3* %44 = OpVariable Private 
                                              %45 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %46 = OpTypePointer UniformConstant %45 
         UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
                                              %49 = OpTypeSampler 
                                              %50 = OpTypePointer UniformConstant %49 
                     UniformConstant sampler* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampledImage %45 
                                              %55 = OpTypeVector %6 2 
                                              %56 = OpTypePointer Input %55 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %61 = OpVariable Private 
                                          i32 %63 = OpConstant 16 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
                                          i32 %70 = OpConstant 14 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %77 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_4* %87 = OpVariable Private 
                               Private f32_4* %99 = OpVariable Private 
                                             %103 = OpTypeInt 32 0 
                                         u32 %104 = OpConstant 3 
                              Private f32_4* %106 = OpVariable Private 
                                         i32 %107 = OpConstant 2 
                                         u32 %112 = OpConstant 0 
                                         i32 %114 = OpConstant 3 
                                         u32 %119 = OpConstant 1 
                                         i32 %121 = OpConstant 4 
                                         u32 %126 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                         f32 %137 = OpConstant 3.674022E-40 
                                       f32_3 %138 = OpConstantComposite %137 %137 %137 
                                             %142 = OpTypeBool 
                                             %143 = OpTypePointer Private %142 
                               Private bool* %144 = OpVariable Private 
                                         i32 %145 = OpConstant 7 
                              Private f32_3* %166 = OpVariable Private 
                                         i32 %169 = OpConstant 5 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %181 = OpConstant 6 
                                             %190 = OpTypeVector %142 3 
                                             %191 = OpTypePointer Private %190 
                             Private bool_3* %192 = OpVariable Private 
                                       f32_4 %193 = OpConstantComposite %137 %137 %137 %137 
                                             %196 = OpTypeVector %142 4 
                                             %199 = OpTypePointer Function %10 
                                             %204 = OpTypePointer Function %6 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %273 = OpConstant 3.674022E-40 
                                         f32 %279 = OpConstant 3.674022E-40 
                                             %281 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %282 = OpTypePointer UniformConstant %281 
      UniformConstant read_only TextureCube* %283 = OpVariable UniformConstant 
                    UniformConstant sampler* %285 = OpVariable UniformConstant 
                                             %287 = OpTypeSampledImage %281 
                                Private f32* %293 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         i32 %298 = OpConstant 8 
                               Private bool* %321 = OpVariable Private 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         i32 %329 = OpConstant 11 
                                Private f32* %336 = OpVariable Private 
                              Private f32_3* %349 = OpVariable Private 
                                         i32 %352 = OpConstant 9 
                              Private f32_3* %360 = OpVariable Private 
                                         i32 %363 = OpConstant 10 
                             Private bool_3* %371 = OpVariable Private 
      UniformConstant read_only TextureCube* %438 = OpVariable UniformConstant 
                                         i32 %449 = OpConstant 12 
                                         f32 %510 = OpConstant 3.674022E-40 
                                       f32_3 %511 = OpConstantComposite %510 %510 %510 
                                         i32 %515 = OpConstant 15 
                                         f32 %530 = OpConstant 3.674022E-40 
                                       f32_3 %531 = OpConstantComposite %530 %530 %530 
                                         f32 %538 = OpConstant 3.674022E-40 
                                         i32 %550 = OpConstant 1 
                                         f32 %563 = OpConstant 3.674022E-40 
                                Private f32* %590 = OpVariable Private 
                              Private f32_3* %609 = OpVariable Private 
                                         f32 %624 = OpConstant 3.674022E-40 
                                Private f32* %627 = OpVariable Private 
                                Private f32* %632 = OpVariable Private 
                                         f32 %675 = OpConstant 3.674022E-40 
                                         f32 %703 = OpConstant 3.674022E-40 
                                         f32 %705 = OpConstant 3.674022E-40 
                                         f32 %722 = OpConstant 3.674022E-40 
                                         f32 %727 = OpConstant 3.674022E-40 
                                         f32 %745 = OpConstant 3.674022E-40 
                               Private bool* %761 = OpVariable Private 
                                         i32 %786 = OpConstant 13 
                                       f32_3 %832 = OpConstantComposite %75 %75 %75 
                                             %890 = OpTypePointer Output %7 
                               Output f32_4* %891 = OpVariable Output 
                                             %902 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %200 = OpVariable Function 
                               Function f32* %205 = OpVariable Function 
                               Function f32* %217 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                             Function f32_3* %376 = OpVariable Function 
                               Function f32* %380 = OpVariable Function 
                               Function f32* %392 = OpVariable Function 
                               Function f32* %404 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %48 = OpLoad %47 
                                      sampler %52 = OpLoad %51 
                   read_only Texture2DSampled %54 = OpSampledImage %48 %52 
                                        f32_2 %58 = OpLoad vs_TEXCOORD0 
                                        f32_4 %59 = OpImageSampleImplicitLod %54 %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                                      OpStore %44 %60 
                                        f32_3 %62 = OpLoad %44 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %61 %68 
                                 Uniform f32* %72 = OpAccessChain %17 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFAdd %74 %75 
                                                      OpStore %69 %76 
                                        f32_4 %78 = OpLoad %35 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad vs_TEXCOORD1 
                                          f32 %83 = OpDot %80 %82 
                                                      OpStore %77 %83 
                                          f32 %84 = OpLoad %77 
                                          f32 %85 = OpLoad %77 
                                          f32 %86 = OpFAdd %84 %85 
                                                      OpStore %77 %86 
                                        f32_3 %88 = OpLoad vs_TEXCOORD1 
                                          f32 %89 = OpLoad %77 
                                        f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                        f32_3 %91 = OpFNegate %90 
                                        f32_3 %92 = OpFMul %88 %91 
                                        f32_4 %93 = OpLoad %35 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFNegate %94 
                                        f32_3 %96 = OpFAdd %92 %95 
                                        f32_4 %97 = OpLoad %87 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %87 %98 
                                       f32_3 %100 = OpLoad vs_TEXCOORD1 
                                       f32_4 %101 = OpLoad %99 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 6 3 
                                                      OpStore %99 %102 
                                Private f32* %105 = OpAccessChain %99 %104 
                                                      OpStore %105 %75 
                              Uniform f32_4* %108 = OpAccessChain %17 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %99 
                                         f32 %111 = OpDot %109 %110 
                                Private f32* %113 = OpAccessChain %106 %112 
                                                      OpStore %113 %111 
                              Uniform f32_4* %115 = OpAccessChain %17 %114 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %99 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %120 = OpAccessChain %106 %119 
                                                      OpStore %120 %118 
                              Uniform f32_4* %122 = OpAccessChain %17 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %99 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %127 = OpAccessChain %106 %126 
                                                      OpStore %127 %125 
                                       f32_4 %128 = OpLoad %106 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %131 = OpLoad vs_TEXCOORD3 
                                       f32_3 %132 = OpFAdd %129 %131 
                                       f32_4 %133 = OpLoad %99 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %99 %134 
                                       f32_4 %135 = OpLoad %99 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %139 = OpExtInst %1 40 %136 %138 
                                       f32_4 %140 = OpLoad %99 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %99 %141 
                                Uniform f32* %146 = OpAccessChain %17 %145 %104 
                                         f32 %147 = OpLoad %146 
                                        bool %148 = OpFOrdLessThan %137 %147 
                                                      OpStore %144 %148 
                                        bool %149 = OpLoad %144 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %264 
                                             %150 = OpLabel 
                                       f32_4 %152 = OpLoad %87 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %87 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %153 %155 
                                                      OpStore %77 %156 
                                         f32 %157 = OpLoad %77 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %77 %158 
                                         f32 %159 = OpLoad %77 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_4 %161 = OpLoad %87 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %106 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %106 %165 
                                       f32_3 %167 = OpLoad vs_TEXCOORD2 
                                       f32_3 %168 = OpFNegate %167 
                              Uniform f32_4* %170 = OpAccessChain %17 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %168 %172 
                                                      OpStore %166 %173 
                                       f32_3 %174 = OpLoad %166 
                                       f32_4 %175 = OpLoad %106 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFDiv %174 %176 
                                                      OpStore %166 %177 
                                       f32_3 %179 = OpLoad vs_TEXCOORD2 
                                       f32_3 %180 = OpFNegate %179 
                              Uniform f32_4* %182 = OpAccessChain %17 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %180 %184 
                                                      OpStore %178 %185 
                                       f32_3 %186 = OpLoad %178 
                                       f32_4 %187 = OpLoad %106 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFDiv %186 %188 
                                                      OpStore %178 %189 
                                       f32_4 %194 = OpLoad %106 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 1 2 0 
                                      bool_4 %197 = OpFOrdLessThan %193 %195 
                                      bool_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                                      OpStore %192 %198 
                                       f32_3 %201 = OpLoad %166 
                                                      OpStore %200 %201 
                               Private bool* %202 = OpAccessChain %192 %112 
                                        bool %203 = OpLoad %202 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %203 %206 %210 
                                             %206 = OpLabel 
                                Private f32* %208 = OpAccessChain %166 %112 
                                         f32 %209 = OpLoad %208 
                                                      OpStore %205 %209 
                                                      OpBranch %207 
                                             %210 = OpLabel 
                                Private f32* %211 = OpAccessChain %178 %112 
                                         f32 %212 = OpLoad %211 
                                                      OpStore %205 %212 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                         f32 %213 = OpLoad %205 
                               Function f32* %214 = OpAccessChain %200 %112 
                                                      OpStore %214 %213 
                               Private bool* %215 = OpAccessChain %192 %119 
                                        bool %216 = OpLoad %215 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %216 %218 %222 
                                             %218 = OpLabel 
                                Private f32* %220 = OpAccessChain %166 %119 
                                         f32 %221 = OpLoad %220 
                                                      OpStore %217 %221 
                                                      OpBranch %219 
                                             %222 = OpLabel 
                                Private f32* %223 = OpAccessChain %178 %119 
                                         f32 %224 = OpLoad %223 
                                                      OpStore %217 %224 
                                                      OpBranch %219 
                                             %219 = OpLabel 
                                         f32 %225 = OpLoad %217 
                               Function f32* %226 = OpAccessChain %200 %119 
                                                      OpStore %226 %225 
                               Private bool* %227 = OpAccessChain %192 %126 
                                        bool %228 = OpLoad %227 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %228 %230 %234 
                                             %230 = OpLabel 
                                Private f32* %232 = OpAccessChain %166 %126 
                                         f32 %233 = OpLoad %232 
                                                      OpStore %229 %233 
                                                      OpBranch %231 
                                             %234 = OpLabel 
                                Private f32* %235 = OpAccessChain %178 %126 
                                         f32 %236 = OpLoad %235 
                                                      OpStore %229 %236 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                         f32 %237 = OpLoad %229 
                               Function f32* %238 = OpAccessChain %200 %126 
                                                      OpStore %238 %237 
                                       f32_3 %239 = OpLoad %200 
                                                      OpStore %166 %239 
                                Private f32* %240 = OpAccessChain %166 %119 
                                         f32 %241 = OpLoad %240 
                                Private f32* %242 = OpAccessChain %166 %112 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpExtInst %1 37 %241 %243 
                                                      OpStore %77 %244 
                                Private f32* %245 = OpAccessChain %166 %126 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpLoad %77 
                                         f32 %248 = OpExtInst %1 37 %246 %247 
                                                      OpStore %77 %248 
                                       f32_3 %249 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %250 = OpAccessChain %17 %145 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFNegate %252 
                                       f32_3 %254 = OpFAdd %249 %253 
                                                      OpStore %166 %254 
                                       f32_4 %255 = OpLoad %106 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpLoad %77 
                                       f32_3 %258 = OpCompositeConstruct %257 %257 %257 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %166 
                                       f32_3 %261 = OpFAdd %259 %260 
                                       f32_4 %262 = OpLoad %106 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %106 %263 
                                                      OpBranch %151 
                                             %264 = OpLabel 
                                       f32_4 %265 = OpLoad %87 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %106 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %106 %268 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                         f32 %269 = OpLoad %69 
                                         f32 %270 = OpFNegate %269 
                                         f32 %272 = OpFMul %270 %271 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %77 %274 
                                         f32 %275 = OpLoad %69 
                                         f32 %276 = OpLoad %77 
                                         f32 %277 = OpFMul %275 %276 
                                                      OpStore %77 %277 
                                         f32 %278 = OpLoad %77 
                                         f32 %280 = OpFMul %278 %279 
                                                      OpStore %77 %280 
                       read_only TextureCube %284 = OpLoad %283 
                                     sampler %286 = OpLoad %285 
                read_only TextureCubeSampled %288 = OpSampledImage %284 %286 
                                       f32_4 %289 = OpLoad %106 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                         f32 %291 = OpLoad %77 
                                       f32_4 %292 = OpImageSampleExplicitLod %288 %290 Lod %7 
                                                      OpStore %106 %292 
                                Private f32* %294 = OpAccessChain %106 %104 
                                         f32 %295 = OpLoad %294 
                                         f32 %297 = OpFAdd %295 %296 
                                                      OpStore %293 %297 
                                Uniform f32* %299 = OpAccessChain %17 %298 %104 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpLoad %293 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpFAdd %302 %75 
                                                      OpStore %293 %303 
                                         f32 %304 = OpLoad %293 
                                         f32 %305 = OpExtInst %1 30 %304 
                                                      OpStore %293 %305 
                                         f32 %306 = OpLoad %293 
                                Uniform f32* %307 = OpAccessChain %17 %298 %119 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                                      OpStore %293 %309 
                                         f32 %310 = OpLoad %293 
                                         f32 %311 = OpExtInst %1 29 %310 
                                                      OpStore %293 %311 
                                         f32 %312 = OpLoad %293 
                                Uniform f32* %313 = OpAccessChain %17 %298 %112 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                                      OpStore %293 %315 
                                       f32_4 %316 = OpLoad %106 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                         f32 %318 = OpLoad %293 
                                       f32_3 %319 = OpCompositeConstruct %318 %318 %318 
                                       f32_3 %320 = OpFMul %317 %319 
                                                      OpStore %166 %320 
                                Uniform f32* %322 = OpAccessChain %17 %181 %104 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdLessThan %323 %324 
                                                      OpStore %321 %325 
                                        bool %326 = OpLoad %321 
                                                      OpSelectionMerge %328 None 
                                                      OpBranchConditional %326 %327 %328 
                                             %327 = OpLabel 
                                Uniform f32* %330 = OpAccessChain %17 %329 %104 
                                         f32 %331 = OpLoad %330 
                                        bool %332 = OpFOrdLessThan %137 %331 
                                                      OpStore %321 %332 
                                        bool %333 = OpLoad %321 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %335 
                                             %334 = OpLabel 
                                       f32_4 %337 = OpLoad %87 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_4 %339 = OpLoad %87 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                         f32 %341 = OpDot %338 %340 
                                                      OpStore %336 %341 
                                         f32 %342 = OpLoad %336 
                                         f32 %343 = OpExtInst %1 32 %342 
                                                      OpStore %336 %343 
                                         f32 %344 = OpLoad %336 
                                       f32_3 %345 = OpCompositeConstruct %344 %344 %344 
                                       f32_4 %346 = OpLoad %87 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFMul %345 %347 
                                                      OpStore %178 %348 
                                       f32_3 %350 = OpLoad vs_TEXCOORD2 
                                       f32_3 %351 = OpFNegate %350 
                              Uniform f32_4* %353 = OpAccessChain %17 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %351 %355 
                                                      OpStore %349 %356 
                                       f32_3 %357 = OpLoad %349 
                                       f32_3 %358 = OpLoad %178 
                                       f32_3 %359 = OpFDiv %357 %358 
                                                      OpStore %349 %359 
                                       f32_3 %361 = OpLoad vs_TEXCOORD2 
                                       f32_3 %362 = OpFNegate %361 
                              Uniform f32_4* %364 = OpAccessChain %17 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %362 %366 
                                                      OpStore %360 %367 
                                       f32_3 %368 = OpLoad %360 
                                       f32_3 %369 = OpLoad %178 
                                       f32_3 %370 = OpFDiv %368 %369 
                                                      OpStore %360 %370 
                                       f32_3 %372 = OpLoad %178 
                                       f32_4 %373 = OpVectorShuffle %372 %372 0 1 2 0 
                                      bool_4 %374 = OpFOrdLessThan %193 %373 
                                      bool_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                                      OpStore %371 %375 
                                       f32_3 %377 = OpLoad %349 
                                                      OpStore %376 %377 
                               Private bool* %378 = OpAccessChain %371 %112 
                                        bool %379 = OpLoad %378 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %379 %381 %385 
                                             %381 = OpLabel 
                                Private f32* %383 = OpAccessChain %349 %112 
                                         f32 %384 = OpLoad %383 
                                                      OpStore %380 %384 
                                                      OpBranch %382 
                                             %385 = OpLabel 
                                Private f32* %386 = OpAccessChain %360 %112 
                                         f32 %387 = OpLoad %386 
                                                      OpStore %380 %387 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                         f32 %388 = OpLoad %380 
                               Function f32* %389 = OpAccessChain %376 %112 
                                                      OpStore %389 %388 
                               Private bool* %390 = OpAccessChain %371 %119 
                                        bool %391 = OpLoad %390 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %391 %393 %397 
                                             %393 = OpLabel 
                                Private f32* %395 = OpAccessChain %349 %119 
                                         f32 %396 = OpLoad %395 
                                                      OpStore %392 %396 
                                                      OpBranch %394 
                                             %397 = OpLabel 
                                Private f32* %398 = OpAccessChain %360 %119 
                                         f32 %399 = OpLoad %398 
                                                      OpStore %392 %399 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %400 = OpLoad %392 
                               Function f32* %401 = OpAccessChain %376 %119 
                                                      OpStore %401 %400 
                               Private bool* %402 = OpAccessChain %371 %126 
                                        bool %403 = OpLoad %402 
                                                      OpSelectionMerge %406 None 
                                                      OpBranchConditional %403 %405 %409 
                                             %405 = OpLabel 
                                Private f32* %407 = OpAccessChain %349 %126 
                                         f32 %408 = OpLoad %407 
                                                      OpStore %404 %408 
                                                      OpBranch %406 
                                             %409 = OpLabel 
                                Private f32* %410 = OpAccessChain %360 %126 
                                         f32 %411 = OpLoad %410 
                                                      OpStore %404 %411 
                                                      OpBranch %406 
                                             %406 = OpLabel 
                                         f32 %412 = OpLoad %404 
                               Function f32* %413 = OpAccessChain %376 %126 
                                                      OpStore %413 %412 
                                       f32_3 %414 = OpLoad %376 
                                                      OpStore %349 %414 
                                Private f32* %415 = OpAccessChain %349 %119 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %349 %112 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpExtInst %1 37 %416 %418 
                                                      OpStore %336 %419 
                                Private f32* %420 = OpAccessChain %349 %126 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpLoad %336 
                                         f32 %423 = OpExtInst %1 37 %421 %422 
                                                      OpStore %336 %423 
                                       f32_3 %424 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %425 = OpAccessChain %17 %329 
                                       f32_4 %426 = OpLoad %425 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_3 %428 = OpFNegate %427 
                                       f32_3 %429 = OpFAdd %424 %428 
                                                      OpStore %349 %429 
                                       f32_3 %430 = OpLoad %178 
                                         f32 %431 = OpLoad %336 
                                       f32_3 %432 = OpCompositeConstruct %431 %431 %431 
                                       f32_3 %433 = OpFMul %430 %432 
                                       f32_3 %434 = OpLoad %349 
                                       f32_3 %435 = OpFAdd %433 %434 
                                       f32_4 %436 = OpLoad %87 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %87 %437 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                       read_only TextureCube %439 = OpLoad %438 
                                     sampler %440 = OpLoad %285 
                read_only TextureCubeSampled %441 = OpSampledImage %439 %440 
                                       f32_4 %442 = OpLoad %87 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                         f32 %444 = OpLoad %77 
                                       f32_4 %445 = OpImageSampleExplicitLod %441 %443 Lod %7 
                                                      OpStore %87 %445 
                                Private f32* %446 = OpAccessChain %87 %104 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFAdd %447 %296 
                                                      OpStore %77 %448 
                                Uniform f32* %450 = OpAccessChain %17 %449 %104 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpLoad %77 
                                         f32 %453 = OpFMul %451 %452 
                                         f32 %454 = OpFAdd %453 %75 
                                                      OpStore %77 %454 
                                         f32 %455 = OpLoad %77 
                                         f32 %456 = OpExtInst %1 30 %455 
                                                      OpStore %77 %456 
                                         f32 %457 = OpLoad %77 
                                Uniform f32* %458 = OpAccessChain %17 %449 %119 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFMul %457 %459 
                                                      OpStore %77 %460 
                                         f32 %461 = OpLoad %77 
                                         f32 %462 = OpExtInst %1 29 %461 
                                                      OpStore %77 %462 
                                         f32 %463 = OpLoad %77 
                                Uniform f32* %464 = OpAccessChain %17 %449 %112 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                                      OpStore %77 %466 
                                       f32_4 %467 = OpLoad %87 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                         f32 %469 = OpLoad %77 
                                       f32_3 %470 = OpCompositeConstruct %469 %469 %469 
                                       f32_3 %471 = OpFMul %468 %470 
                                       f32_4 %472 = OpLoad %87 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %87 %473 
                                         f32 %474 = OpLoad %293 
                                       f32_3 %475 = OpCompositeConstruct %474 %474 %474 
                                       f32_4 %476 = OpLoad %106 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %87 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpFNegate %480 
                                       f32_3 %482 = OpFAdd %478 %481 
                                       f32_4 %483 = OpLoad %106 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %106 %484 
                              Uniform f32_4* %485 = OpAccessChain %17 %181 
                                       f32_4 %486 = OpLoad %485 
                                       f32_3 %487 = OpVectorShuffle %486 %486 3 3 3 
                                       f32_4 %488 = OpLoad %106 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 2 
                                       f32_3 %490 = OpFMul %487 %489 
                                       f32_4 %491 = OpLoad %87 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFAdd %490 %492 
                                                      OpStore %166 %493 
                                                      OpBranch %328 
                                             %328 = OpLabel 
                                       f32_3 %494 = OpLoad vs_TEXCOORD1 
                                       f32_3 %495 = OpLoad vs_TEXCOORD1 
                                         f32 %496 = OpDot %494 %495 
                                                      OpStore %77 %496 
                                         f32 %497 = OpLoad %77 
                                         f32 %498 = OpExtInst %1 32 %497 
                                                      OpStore %77 %498 
                                         f32 %499 = OpLoad %77 
                                       f32_3 %500 = OpCompositeConstruct %499 %499 %499 
                                       f32_3 %501 = OpLoad vs_TEXCOORD1 
                                       f32_3 %502 = OpFMul %500 %501 
                                       f32_4 %503 = OpLoad %87 
                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 6 3 
                                                      OpStore %87 %504 
                                       f32_3 %505 = OpLoad %44 
                              Uniform f32_4* %506 = OpAccessChain %17 %63 
                                       f32_4 %507 = OpLoad %506 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFMul %505 %508 
                                       f32_3 %512 = OpFAdd %509 %511 
                                       f32_4 %513 = OpLoad %106 
                                       f32_4 %514 = OpVectorShuffle %513 %512 4 5 6 3 
                                                      OpStore %106 %514 
                                Uniform f32* %516 = OpAccessChain %17 %515 
                                         f32 %517 = OpLoad %516 
                                Uniform f32* %518 = OpAccessChain %17 %515 
                                         f32 %519 = OpLoad %518 
                                Uniform f32* %520 = OpAccessChain %17 %515 
                                         f32 %521 = OpLoad %520 
                                       f32_3 %522 = OpCompositeConstruct %517 %519 %521 
                                         f32 %523 = OpCompositeExtract %522 0 
                                         f32 %524 = OpCompositeExtract %522 1 
                                         f32 %525 = OpCompositeExtract %522 2 
                                       f32_3 %526 = OpCompositeConstruct %523 %524 %525 
                                       f32_4 %527 = OpLoad %106 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFMul %526 %528 
                                       f32_3 %532 = OpFAdd %529 %531 
                                       f32_4 %533 = OpLoad %106 
                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
                                                      OpStore %106 %534 
                                Uniform f32* %535 = OpAccessChain %17 %515 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFNegate %536 
                                         f32 %539 = OpFMul %537 %538 
                                         f32 %540 = OpFAdd %539 %538 
                                                      OpStore %77 %540 
                                         f32 %541 = OpLoad %77 
                                       f32_3 %542 = OpCompositeConstruct %541 %541 %541 
                                       f32_3 %543 = OpLoad %61 
                                       f32_3 %544 = OpFMul %542 %543 
                                                      OpStore %61 %544 
                                       f32_4 %545 = OpLoad %9 
                                       f32_3 %546 = OpVectorShuffle %545 %545 0 1 2 
                                         f32 %547 = OpLoad %27 
                                       f32_3 %548 = OpCompositeConstruct %547 %547 %547 
                                       f32_3 %549 = OpFMul %546 %548 
                              Uniform f32_4* %551 = OpAccessChain %17 %550 
                                       f32_4 %552 = OpLoad %551 
                                       f32_3 %553 = OpVectorShuffle %552 %552 0 1 2 
                                       f32_3 %554 = OpFAdd %549 %553 
                                       f32_4 %555 = OpLoad %9 
                                       f32_4 %556 = OpVectorShuffle %555 %554 4 5 6 3 
                                                      OpStore %9 %556 
                                       f32_4 %557 = OpLoad %9 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                       f32_4 %559 = OpLoad %9 
                                       f32_3 %560 = OpVectorShuffle %559 %559 0 1 2 
                                         f32 %561 = OpDot %558 %560 
                                                      OpStore %27 %561 
                                         f32 %562 = OpLoad %27 
                                         f32 %564 = OpExtInst %1 40 %562 %563 
                                                      OpStore %27 %564 
                                         f32 %565 = OpLoad %27 
                                         f32 %566 = OpExtInst %1 32 %565 
                                                      OpStore %27 %566 
                                         f32 %567 = OpLoad %27 
                                       f32_3 %568 = OpCompositeConstruct %567 %567 %567 
                                       f32_4 %569 = OpLoad %9 
                                       f32_3 %570 = OpVectorShuffle %569 %569 0 1 2 
                                       f32_3 %571 = OpFMul %568 %570 
                                       f32_4 %572 = OpLoad %9 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %9 %573 
                                       f32_4 %574 = OpLoad %87 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                                       f32_4 %576 = OpLoad %35 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 1 2 
                                         f32 %578 = OpDot %575 %577 
                                                      OpStore %27 %578 
                                       f32_4 %579 = OpLoad %87 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                              Uniform f32_4* %581 = OpAccessChain %17 %550 
                                       f32_4 %582 = OpLoad %581 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                         f32 %584 = OpDot %580 %583 
                                Private f32* %585 = OpAccessChain %35 %112 
                                                      OpStore %585 %584 
                                Private f32* %586 = OpAccessChain %35 %112 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpExtInst %1 43 %587 %137 %75 
                                Private f32* %589 = OpAccessChain %35 %112 
                                                      OpStore %589 %588 
                                       f32_4 %591 = OpLoad %87 
                                       f32_3 %592 = OpVectorShuffle %591 %591 0 1 2 
                                       f32_4 %593 = OpLoad %9 
                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
                                         f32 %595 = OpDot %592 %594 
                                                      OpStore %590 %595 
                                         f32 %596 = OpLoad %590 
                                         f32 %597 = OpExtInst %1 43 %596 %137 %75 
                                                      OpStore %590 %597 
                              Uniform f32_4* %598 = OpAccessChain %17 %550 
                                       f32_4 %599 = OpLoad %598 
                                       f32_3 %600 = OpVectorShuffle %599 %599 0 1 2 
                                       f32_4 %601 = OpLoad %9 
                                       f32_3 %602 = OpVectorShuffle %601 %601 0 1 2 
                                         f32 %603 = OpDot %600 %602 
                                Private f32* %604 = OpAccessChain %9 %112 
                                                      OpStore %604 %603 
                                Private f32* %605 = OpAccessChain %9 %112 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpExtInst %1 43 %606 %137 %75 
                                Private f32* %608 = OpAccessChain %9 %112 
                                                      OpStore %608 %607 
                                Private f32* %610 = OpAccessChain %9 %112 
                                         f32 %611 = OpLoad %610 
                                Private f32* %612 = OpAccessChain %9 %112 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpFMul %611 %613 
                                Private f32* %615 = OpAccessChain %609 %112 
                                                      OpStore %615 %614 
                                       f32_3 %616 = OpLoad %609 
                                       f32_2 %617 = OpVectorShuffle %616 %616 0 0 
                                         f32 %618 = OpLoad %69 
                                       f32_2 %619 = OpCompositeConstruct %618 %618 
                                         f32 %620 = OpDot %617 %619 
                                Private f32* %621 = OpAccessChain %609 %112 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %609 %112 
                                         f32 %623 = OpLoad %622 
                                         f32 %625 = OpFAdd %623 %624 
                                Private f32* %626 = OpAccessChain %609 %112 
                                                      OpStore %626 %625 
                                Private f32* %628 = OpAccessChain %35 %112 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFNegate %629 
                                         f32 %631 = OpFAdd %630 %75 
                                                      OpStore %627 %631 
                                         f32 %633 = OpLoad %627 
                                         f32 %634 = OpLoad %627 
                                         f32 %635 = OpFMul %633 %634 
                                                      OpStore %632 %635 
                                         f32 %636 = OpLoad %632 
                                         f32 %637 = OpLoad %632 
                                         f32 %638 = OpFMul %636 %637 
                                                      OpStore %632 %638 
                                         f32 %639 = OpLoad %627 
                                         f32 %640 = OpLoad %632 
                                         f32 %641 = OpFMul %639 %640 
                                                      OpStore %627 %641 
                                Private f32* %642 = OpAccessChain %609 %112 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpLoad %627 
                                         f32 %645 = OpFMul %643 %644 
                                         f32 %646 = OpFAdd %645 %75 
                                                      OpStore %627 %646 
                                         f32 %647 = OpLoad %27 
                                         f32 %648 = OpExtInst %1 4 %647 
                                         f32 %649 = OpFNegate %648 
                                         f32 %650 = OpFAdd %649 %75 
                                                      OpStore %632 %650 
                                         f32 %651 = OpLoad %632 
                                         f32 %652 = OpLoad %632 
                                         f32 %653 = OpFMul %651 %652 
                                                      OpStore %293 %653 
                                         f32 %654 = OpLoad %293 
                                         f32 %655 = OpLoad %293 
                                         f32 %656 = OpFMul %654 %655 
                                                      OpStore %293 %656 
                                         f32 %657 = OpLoad %632 
                                         f32 %658 = OpLoad %293 
                                         f32 %659 = OpFMul %657 %658 
                                                      OpStore %632 %659 
                                Private f32* %660 = OpAccessChain %609 %112 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %632 
                                         f32 %663 = OpFMul %661 %662 
                                         f32 %664 = OpFAdd %663 %75 
                                Private f32* %665 = OpAccessChain %609 %112 
                                                      OpStore %665 %664 
                                Private f32* %666 = OpAccessChain %609 %112 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpLoad %627 
                                         f32 %669 = OpFMul %667 %668 
                                Private f32* %670 = OpAccessChain %609 %112 
                                                      OpStore %670 %669 
                                         f32 %671 = OpLoad %69 
                                         f32 %672 = OpLoad %69 
                                         f32 %673 = OpFMul %671 %672 
                                                      OpStore %627 %673 
                                         f32 %674 = OpLoad %627 
                                         f32 %676 = OpExtInst %1 40 %674 %675 
                                                      OpStore %627 %676 
                                         f32 %677 = OpLoad %627 
                                         f32 %678 = OpFNegate %677 
                                         f32 %679 = OpFAdd %678 %75 
                                                      OpStore %69 %679 
                                         f32 %680 = OpLoad %27 
                                         f32 %681 = OpExtInst %1 4 %680 
                                         f32 %682 = OpLoad %69 
                                         f32 %683 = OpFMul %681 %682 
                                         f32 %684 = OpLoad %627 
                                         f32 %685 = OpFAdd %683 %684 
                                                      OpStore %293 %685 
                                Private f32* %686 = OpAccessChain %35 %112 
                                         f32 %687 = OpLoad %686 
                                         f32 %688 = OpLoad %69 
                                         f32 %689 = OpFMul %687 %688 
                                         f32 %690 = OpLoad %627 
                                         f32 %691 = OpFAdd %689 %690 
                                                      OpStore %69 %691 
                                         f32 %692 = OpLoad %27 
                                         f32 %693 = OpExtInst %1 4 %692 
                                         f32 %694 = OpLoad %69 
                                         f32 %695 = OpFMul %693 %694 
                                                      OpStore %27 %695 
                                Private f32* %696 = OpAccessChain %35 %112 
                                         f32 %697 = OpLoad %696 
                                         f32 %698 = OpLoad %293 
                                         f32 %699 = OpFMul %697 %698 
                                         f32 %700 = OpLoad %27 
                                         f32 %701 = OpFAdd %699 %700 
                                                      OpStore %27 %701 
                                         f32 %702 = OpLoad %27 
                                         f32 %704 = OpFAdd %702 %703 
                                                      OpStore %27 %704 
                                         f32 %706 = OpLoad %27 
                                         f32 %707 = OpFDiv %705 %706 
                                                      OpStore %27 %707 
                                         f32 %708 = OpLoad %627 
                                         f32 %709 = OpLoad %627 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %69 %710 
                                         f32 %711 = OpLoad %590 
                                         f32 %712 = OpLoad %69 
                                         f32 %713 = OpFMul %711 %712 
                                         f32 %714 = OpLoad %590 
                                         f32 %715 = OpFNegate %714 
                                         f32 %716 = OpFAdd %713 %715 
                                                      OpStore %293 %716 
                                         f32 %717 = OpLoad %293 
                                         f32 %718 = OpLoad %590 
                                         f32 %719 = OpFMul %717 %718 
                                         f32 %720 = OpFAdd %719 %75 
                                                      OpStore %590 %720 
                                         f32 %721 = OpLoad %69 
                                         f32 %723 = OpFMul %721 %722 
                                                      OpStore %69 %723 
                                         f32 %724 = OpLoad %590 
                                         f32 %725 = OpLoad %590 
                                         f32 %726 = OpFMul %724 %725 
                                         f32 %728 = OpFAdd %726 %727 
                                                      OpStore %590 %728 
                                         f32 %729 = OpLoad %69 
                                         f32 %730 = OpLoad %590 
                                         f32 %731 = OpFDiv %729 %730 
                                                      OpStore %590 %731 
                                         f32 %732 = OpLoad %27 
                                         f32 %733 = OpLoad %590 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %609 %126 
                                                      OpStore %735 %734 
                                       f32_4 %736 = OpLoad %35 
                                       f32_2 %737 = OpVectorShuffle %736 %736 0 0 
                                       f32_3 %738 = OpLoad %609 
                                       f32_2 %739 = OpVectorShuffle %738 %738 0 2 
                                       f32_2 %740 = OpFMul %737 %739 
                                       f32_3 %741 = OpLoad %609 
                                       f32_3 %742 = OpVectorShuffle %741 %740 3 1 4 
                                                      OpStore %609 %742 
                                Private f32* %743 = OpAccessChain %609 %126 
                                         f32 %744 = OpLoad %743 
                                         f32 %746 = OpFMul %744 %745 
                                                      OpStore %27 %746 
                                         f32 %747 = OpLoad %27 
                                         f32 %748 = OpExtInst %1 40 %747 %137 
                                                      OpStore %27 %748 
                                         f32 %749 = OpLoad %627 
                                         f32 %750 = OpLoad %627 
                                         f32 %751 = OpFMul %749 %750 
                                         f32 %752 = OpFAdd %751 %75 
                                                      OpStore %627 %752 
                                         f32 %753 = OpLoad %627 
                                         f32 %754 = OpFDiv %75 %753 
                                                      OpStore %627 %754 
                                       f32_4 %755 = OpLoad %106 
                                       f32_3 %756 = OpVectorShuffle %755 %755 0 1 2 
                                       f32_4 %757 = OpLoad %106 
                                       f32_3 %758 = OpVectorShuffle %757 %757 0 1 2 
                                         f32 %759 = OpDot %756 %758 
                                Private f32* %760 = OpAccessChain %35 %112 
                                                      OpStore %760 %759 
                                Private f32* %762 = OpAccessChain %35 %112 
                                         f32 %763 = OpLoad %762 
                                        bool %764 = OpFOrdNotEqual %763 %137 
                                                      OpStore %761 %764 
                                        bool %765 = OpLoad %761 
                                         f32 %766 = OpSelect %765 %75 %137 
                                Private f32* %767 = OpAccessChain %35 %112 
                                                      OpStore %767 %766 
                                         f32 %768 = OpLoad %27 
                                Private f32* %769 = OpAccessChain %35 %112 
                                         f32 %770 = OpLoad %769 
                                         f32 %771 = OpFMul %768 %770 
                                                      OpStore %27 %771 
                                         f32 %772 = OpLoad %77 
                                         f32 %773 = OpFNegate %772 
                                Uniform f32* %774 = OpAccessChain %17 %70 
                                         f32 %775 = OpLoad %774 
                                         f32 %776 = OpFAdd %773 %775 
                                Private f32* %777 = OpAccessChain %35 %112 
                                                      OpStore %777 %776 
                                Private f32* %778 = OpAccessChain %35 %112 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFAdd %779 %75 
                                Private f32* %781 = OpAccessChain %35 %112 
                                                      OpStore %781 %780 
                                Private f32* %782 = OpAccessChain %35 %112 
                                         f32 %783 = OpLoad %782 
                                         f32 %784 = OpExtInst %1 43 %783 %137 %75 
                                Private f32* %785 = OpAccessChain %35 %112 
                                                      OpStore %785 %784 
                              Uniform f32_4* %787 = OpAccessChain %17 %786 
                                       f32_4 %788 = OpLoad %787 
                                       f32_3 %789 = OpVectorShuffle %788 %788 0 1 2 
                                       f32_3 %790 = OpLoad %609 
                                       f32_3 %791 = OpVectorShuffle %790 %790 0 0 0 
                                       f32_3 %792 = OpFMul %789 %791 
                                       f32_4 %793 = OpLoad %99 
                                       f32_3 %794 = OpVectorShuffle %793 %793 0 1 2 
                                       f32_3 %795 = OpFAdd %792 %794 
                                       f32_4 %796 = OpLoad %87 
                                       f32_4 %797 = OpVectorShuffle %796 %795 4 5 6 3 
                                                      OpStore %87 %797 
                                         f32 %798 = OpLoad %27 
                                       f32_3 %799 = OpCompositeConstruct %798 %798 %798 
                              Uniform f32_4* %800 = OpAccessChain %17 %786 
                                       f32_4 %801 = OpLoad %800 
                                       f32_3 %802 = OpVectorShuffle %801 %801 0 1 2 
                                       f32_3 %803 = OpFMul %799 %802 
                                       f32_4 %804 = OpLoad %99 
                                       f32_4 %805 = OpVectorShuffle %804 %803 4 5 6 3 
                                                      OpStore %99 %805 
                                Private f32* %806 = OpAccessChain %9 %112 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFNegate %807 
                                         f32 %809 = OpFAdd %808 %75 
                                Private f32* %810 = OpAccessChain %9 %112 
                                                      OpStore %810 %809 
                                Private f32* %811 = OpAccessChain %9 %112 
                                         f32 %812 = OpLoad %811 
                                Private f32* %813 = OpAccessChain %9 %112 
                                         f32 %814 = OpLoad %813 
                                         f32 %815 = OpFMul %812 %814 
                                Private f32* %816 = OpAccessChain %609 %112 
                                                      OpStore %816 %815 
                                Private f32* %817 = OpAccessChain %609 %112 
                                         f32 %818 = OpLoad %817 
                                Private f32* %819 = OpAccessChain %609 %112 
                                         f32 %820 = OpLoad %819 
                                         f32 %821 = OpFMul %818 %820 
                                Private f32* %822 = OpAccessChain %609 %112 
                                                      OpStore %822 %821 
                                Private f32* %823 = OpAccessChain %9 %112 
                                         f32 %824 = OpLoad %823 
                                Private f32* %825 = OpAccessChain %609 %112 
                                         f32 %826 = OpLoad %825 
                                         f32 %827 = OpFMul %824 %826 
                                Private f32* %828 = OpAccessChain %9 %112 
                                                      OpStore %828 %827 
                                       f32_4 %829 = OpLoad %106 
                                       f32_3 %830 = OpVectorShuffle %829 %829 0 1 2 
                                       f32_3 %831 = OpFNegate %830 
                                       f32_3 %833 = OpFAdd %831 %832 
                                                      OpStore %178 %833 
                                       f32_3 %834 = OpLoad %178 
                                       f32_4 %835 = OpLoad %9 
                                       f32_3 %836 = OpVectorShuffle %835 %835 0 0 0 
                                       f32_3 %837 = OpFMul %834 %836 
                                       f32_4 %838 = OpLoad %106 
                                       f32_3 %839 = OpVectorShuffle %838 %838 0 1 2 
                                       f32_3 %840 = OpFAdd %837 %839 
                                       f32_4 %841 = OpLoad %9 
                                       f32_4 %842 = OpVectorShuffle %841 %840 4 5 2 6 
                                                      OpStore %9 %842 
                                       f32_4 %843 = OpLoad %9 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 3 
                                       f32_4 %845 = OpLoad %99 
                                       f32_3 %846 = OpVectorShuffle %845 %845 0 1 2 
                                       f32_3 %847 = OpFMul %844 %846 
                                       f32_4 %848 = OpLoad %9 
                                       f32_4 %849 = OpVectorShuffle %848 %847 4 5 2 6 
                                                      OpStore %9 %849 
                                       f32_3 %850 = OpLoad %61 
                                       f32_4 %851 = OpLoad %87 
                                       f32_3 %852 = OpVectorShuffle %851 %851 0 1 2 
                                       f32_3 %853 = OpFMul %850 %852 
                                       f32_4 %854 = OpLoad %9 
                                       f32_3 %855 = OpVectorShuffle %854 %854 0 1 3 
                                       f32_3 %856 = OpFAdd %853 %855 
                                       f32_4 %857 = OpLoad %9 
                                       f32_4 %858 = OpVectorShuffle %857 %856 4 5 2 6 
                                                      OpStore %9 %858 
                                       f32_3 %859 = OpLoad %166 
                                         f32 %860 = OpLoad %627 
                                       f32_3 %861 = OpCompositeConstruct %860 %860 %860 
                                       f32_3 %862 = OpFMul %859 %861 
                                                      OpStore %61 %862 
                                       f32_4 %863 = OpLoad %106 
                                       f32_3 %864 = OpVectorShuffle %863 %863 0 1 2 
                                       f32_3 %865 = OpFNegate %864 
                                       f32_4 %866 = OpLoad %35 
                                       f32_3 %867 = OpVectorShuffle %866 %866 0 0 0 
                                       f32_3 %868 = OpFAdd %865 %867 
                                       f32_4 %869 = OpLoad %35 
                                       f32_4 %870 = OpVectorShuffle %869 %868 4 5 2 6 
                                                      OpStore %35 %870 
                                         f32 %871 = OpLoad %632 
                                       f32_3 %872 = OpCompositeConstruct %871 %871 %871 
                                       f32_4 %873 = OpLoad %35 
                                       f32_3 %874 = OpVectorShuffle %873 %873 0 1 3 
                                       f32_3 %875 = OpFMul %872 %874 
                                       f32_4 %876 = OpLoad %106 
                                       f32_3 %877 = OpVectorShuffle %876 %876 0 1 2 
                                       f32_3 %878 = OpFAdd %875 %877 
                                       f32_4 %879 = OpLoad %35 
                                       f32_4 %880 = OpVectorShuffle %879 %878 4 5 6 3 
                                                      OpStore %35 %880 
                                       f32_3 %881 = OpLoad %61 
                                       f32_4 %882 = OpLoad %35 
                                       f32_3 %883 = OpVectorShuffle %882 %882 0 1 2 
                                       f32_3 %884 = OpFMul %881 %883 
                                       f32_4 %885 = OpLoad %9 
                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 3 
                                       f32_3 %887 = OpFAdd %884 %886 
                                       f32_4 %888 = OpLoad %9 
                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 6 3 
                                                      OpStore %9 %889 
                                       f32_3 %892 = OpLoad %44 
                              Uniform f32_4* %893 = OpAccessChain %17 %63 
                                       f32_4 %894 = OpLoad %893 
                                       f32_3 %895 = OpVectorShuffle %894 %894 0 1 2 
                                       f32_3 %896 = OpFMul %892 %895 
                                       f32_4 %897 = OpLoad %9 
                                       f32_3 %898 = OpVectorShuffle %897 %897 0 1 2 
                                       f32_3 %899 = OpFAdd %896 %898 
                                       f32_4 %900 = OpLoad %891 
                                       f32_4 %901 = OpVectorShuffle %900 %899 4 5 6 3 
                                                      OpStore %891 %901 
                                 Output f32* %903 = OpAccessChain %891 %104 
                                                      OpStore %903 %75 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(4) uniform  sampler2D _posTex;
UNITY_LOCATION(5) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat37 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat38 = (-u_xlat37) + u_xlat38;
    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat38 + u_xlat37;
    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat38 = (-u_xlat4.x) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat38 + u_xlat4.x;
    u_xlat38 = (-_Glossiness) + 1.0;
    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat39 = u_xlat39 + u_xlat39;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat37) * _LightColor0.xyz;
    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat37 = inversesqrt(u_xlat37);
        u_xlat6.xyz = vec3(u_xlat37) * u_xlat4.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat37 = min(u_xlat7.y, u_xlat7.x);
        u_xlat37 = min(u_xlat7.z, u_xlat37);
        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat37 = (-u_xlat38) * 0.699999988 + 1.70000005;
    u_xlat37 = u_xlat37 * u_xlat38;
    u_xlat37 = u_xlat37 * 6.0;
    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat37);
    u_xlat39 = u_xlat6.w + -1.0;
    u_xlat39 = unity_SpecCube0_HDR.w * u_xlat39 + 1.0;
    u_xlat39 = log2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.y;
    u_xlat39 = exp2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat39);
    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = inversesqrt(u_xlat40);
            u_xlat8.xyz = vec3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat37);
        u_xlat37 = u_xlat4.w + -1.0;
        u_xlat37 = unity_SpecCube1_HDR.w * u_xlat37 + 1.0;
        u_xlat37 = log2(u_xlat37);
        u_xlat37 = u_xlat37 * unity_SpecCube1_HDR.y;
        u_xlat37 = exp2(u_xlat37);
        u_xlat37 = u_xlat37 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat37);
        u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz + (-u_xlat4.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
    }
    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat4.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
    u_xlat6.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat37 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat37) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat38));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat39 = u_xlat25 * u_xlat25;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat25 = u_xlat25 * u_xlat39;
    u_xlat12.x = u_xlat12.x * u_xlat25 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat38 * u_xlat38;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat38 = (-u_xlat24) + 1.0;
    u_xlat39 = abs(u_xlat36) * u_xlat38 + u_xlat24;
    u_xlat38 = u_xlat1.x * u_xlat38 + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat38;
    u_xlat36 = u_xlat1.x * u_xlat39 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat38 = u_xlat24 * u_xlat24;
    u_xlat39 = u_xlat13 * u_xlat38 + (-u_xlat13);
    u_xlat13 = u_xlat39 * u_xlat13 + 1.0;
    u_xlat38 = u_xlat38 * 0.318309873;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat13 = u_xlat38 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat12.z = u_xlat36 * 3.14159274;
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat36 = max(u_xlat12.z, 0.0);
    u_xlat24 = u_xlat24 * u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat36 * u_xlat1.x;
    u_xlat1.x = (-u_xlat37) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat8.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat24);
    u_xlat1.xyw = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyw + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 416
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %233 %238 %239 %375 %397 %409 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %231 0 BuiltIn 231 
                                                      OpMemberDecorate %231 1 BuiltIn 231 
                                                      OpMemberDecorate %231 2 BuiltIn 231 
                                                      OpDecorate %231 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 238 
                                                      OpDecorate %239 Location 239 
                                                      OpDecorate vs_TEXCOORD1 Location 375 
                                                      OpDecorate vs_TEXCOORD5 Location 397 
                                                      OpDecorate vs_TEXCOORD6 Location 409 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 8 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 9 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 7 
                                         i32 %119 = OpConstant 6 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 2 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %205 = OpConstant 4 
                                             %230 = OpTypeArray %6 %20 
                                             %231 = OpTypeStruct %7 %6 %230 
                                             %232 = OpTypePointer Output %231 
        Output struct {f32_4; f32; f32[1];}* %233 = OpVariable Output 
                                             %235 = OpTypePointer Output %7 
                                             %237 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %239 = OpVariable Input 
                                         i32 %242 = OpConstant 10 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_2 %266 = OpConstantComposite %265 %265 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_2 %269 = OpConstantComposite %268 %268 
                                Private f32* %273 = OpVariable Private 
                                         f32 %282 = OpConstant 3.674022E-40 
                                         f32 %283 = OpConstant 3.674022E-40 
                                       f32_2 %284 = OpConstantComposite %282 %283 
                                       f32_2 %286 = OpConstantComposite %56 %56 
                                         u32 %290 = OpConstant 2 
                                       f32_3 %308 = OpConstantComposite %56 %56 %56 
                                             %320 = OpTypeBool 
                                             %321 = OpTypePointer Private %320 
                               Private bool* %322 = OpVariable Private 
                                       f32_4 %323 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %324 = OpConstant 5 
                                             %328 = OpTypeVector %320 4 
                                             %332 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                       f32_2 %393 = OpConstantComposite %283 %283 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %410 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %333 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %18 %167 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %166 %171 
                                                      OpStore %164 %172 
                              Uniform f32_4* %173 = OpAccessChain %18 %167 %19 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %114 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %164 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %164 %179 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %167 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %18 %205 %168 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpFMul %204 %207 
                                                      OpStore %114 %208 
                              Uniform f32_4* %209 = OpAccessChain %18 %205 %19 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %164 
                                       f32_4 %212 = OpVectorShuffle %211 %211 0 0 0 0 
                                       f32_4 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %114 
                                       f32_4 %215 = OpFAdd %213 %214 
                                                      OpStore %114 %215 
                              Uniform f32_4* %216 = OpAccessChain %18 %205 %167 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %164 
                                       f32_4 %219 = OpVectorShuffle %218 %218 2 2 2 2 
                                       f32_4 %220 = OpFMul %217 %219 
                                       f32_4 %221 = OpLoad %114 
                                       f32_4 %222 = OpFAdd %220 %221 
                                                      OpStore %114 %222 
                              Uniform f32_4* %223 = OpAccessChain %18 %205 %188 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %164 
                                       f32_4 %226 = OpVectorShuffle %225 %225 3 3 3 3 
                                       f32_4 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %114 
                                       f32_4 %229 = OpFAdd %227 %228 
                                                      OpStore %114 %229 
                                       f32_4 %234 = OpLoad %114 
                               Output f32_4* %236 = OpAccessChain %233 %19 
                                                      OpStore %236 %234 
                                       f32_4 %240 = OpLoad %239 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                              Uniform f32_4* %243 = OpAccessChain %18 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                                       f32_2 %246 = OpFMul %241 %245 
                              Uniform f32_4* %247 = OpAccessChain %18 %242 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 2 3 
                                       f32_2 %250 = OpFAdd %246 %249 
                                                      OpStore vs_TEXCOORD0 %250 
                                Private f32* %251 = OpAccessChain %76 %20 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpExtInst %1 8 %252 
                                Private f32* %254 = OpAccessChain %164 %29 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %164 %29 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFNegate %256 
                                         f32 %258 = OpFMul %257 %146 
                                Private f32* %259 = OpAccessChain %76 %29 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %164 %20 
                                                      OpStore %262 %261 
                                       f32_4 %263 = OpLoad %164 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                       f32_2 %267 = OpFMul %264 %266 
                                       f32_2 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %76 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 2 3 
                                                      OpStore %76 %272 
                                       f32_4 %274 = OpLoad %76 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_4 %276 = OpLoad %76 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                         f32 %278 = OpDot %275 %277 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                       f32_2 %280 = OpCompositeConstruct %279 %279 
                                       f32_2 %281 = OpFNegate %280 
                                       f32_2 %285 = OpFMul %281 %284 
                                       f32_2 %287 = OpFAdd %285 %286 
                                       f32_4 %288 = OpLoad %164 
                                       f32_4 %289 = OpVectorShuffle %288 %287 0 1 4 5 
                                                      OpStore %164 %289 
                                Private f32* %291 = OpAccessChain %164 %290 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpExtInst %1 31 %292 
                                                      OpStore %273 %293 
                                       f32_4 %294 = OpLoad %76 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                         f32 %296 = OpLoad %273 
                                       f32_2 %297 = OpCompositeConstruct %296 %296 
                                       f32_2 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %164 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 2 3 
                                                      OpStore %164 %300 
                                       f32_4 %301 = OpLoad %164 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 3 
                                       f32_3 %303 = OpExtInst %1 40 %302 %110 
                                       f32_4 %304 = OpLoad %76 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %76 %305 
                                       f32_4 %306 = OpLoad %76 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %309 = OpExtInst %1 37 %307 %308 
                                       f32_4 %310 = OpLoad %76 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %76 %311 
                                Private f32* %312 = OpAccessChain %76 %29 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFNegate %313 
                                Private f32* %315 = OpAccessChain %76 %154 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %9 %29 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFNegate %317 
                                Private f32* %319 = OpAccessChain %9 %154 
                                                      OpStore %319 %318 
                                Uniform f32* %325 = OpAccessChain %18 %324 
                                         f32 %326 = OpLoad %325 
                                       f32_4 %327 = OpCompositeConstruct %326 %326 %326 %326 
                                      bool_4 %329 = OpFOrdNotEqual %323 %327 
                                        bool %330 = OpAny %329 
                                                      OpStore %322 %330 
                                        bool %331 = OpLoad %322 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %331 %334 %338 
                                             %334 = OpLabel 
                                       f32_4 %336 = OpLoad %76 
                                       f32_3 %337 = OpVectorShuffle %336 %336 3 2 1 
                                                      OpStore %333 %337 
                                                      OpBranch %335 
                                             %338 = OpLabel 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 3 1 2 
                                                      OpStore %333 %340 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_3 %341 = OpLoad %333 
                                       f32_4 %342 = OpLoad %9 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %9 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                              Uniform f32_4* %346 = OpAccessChain %18 %188 %19 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                         f32 %349 = OpDot %345 %348 
                                Private f32* %350 = OpAccessChain %76 %29 
                                                      OpStore %350 %349 
                                       f32_4 %351 = OpLoad %9 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_4* %353 = OpAccessChain %18 %188 %168 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                         f32 %356 = OpDot %352 %355 
                                Private f32* %357 = OpAccessChain %76 %20 
                                                      OpStore %357 %356 
                                       f32_4 %358 = OpLoad %9 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                              Uniform f32_4* %360 = OpAccessChain %18 %188 %167 
                                       f32_4 %361 = OpLoad %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                         f32 %363 = OpDot %359 %362 
                                Private f32* %364 = OpAccessChain %76 %290 
                                                      OpStore %364 %363 
                                       f32_4 %365 = OpLoad %76 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_4 %367 = OpLoad %76 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                         f32 %369 = OpDot %366 %368 
                                Private f32* %370 = OpAccessChain %9 %29 
                                                      OpStore %370 %369 
                                Private f32* %371 = OpAccessChain %9 %29 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpExtInst %1 32 %372 
                                Private f32* %374 = OpAccessChain %9 %29 
                                                      OpStore %374 %373 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 0 0 
                                       f32_4 %378 = OpLoad %76 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %377 %379 
                                                      OpStore vs_TEXCOORD1 %380 
                                Private f32* %381 = OpAccessChain %114 %20 
                                         f32 %382 = OpLoad %381 
                                Uniform f32* %383 = OpAccessChain %18 %168 %29 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFMul %382 %384 
                                Private f32* %386 = OpAccessChain %9 %29 
                                                      OpStore %386 %385 
                                Private f32* %387 = OpAccessChain %9 %29 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %388 %283 
                                Private f32* %390 = OpAccessChain %9 %154 
                                                      OpStore %390 %389 
                                       f32_4 %391 = OpLoad %114 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 3 
                                       f32_2 %394 = OpFMul %392 %393 
                                       f32_4 %395 = OpLoad %9 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 1 5 3 
                                                      OpStore %9 %396 
                                       f32_4 %398 = OpLoad %114 
                                       f32_2 %399 = OpVectorShuffle %398 %398 2 3 
                                       f32_4 %400 = OpLoad vs_TEXCOORD5 
                                       f32_4 %401 = OpVectorShuffle %400 %399 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %401 
                                       f32_4 %402 = OpLoad %9 
                                       f32_2 %403 = OpVectorShuffle %402 %402 2 2 
                                       f32_4 %404 = OpLoad %9 
                                       f32_2 %405 = OpVectorShuffle %404 %404 0 3 
                                       f32_2 %406 = OpFAdd %403 %405 
                                       f32_4 %407 = OpLoad vs_TEXCOORD5 
                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %408 
                                                      OpStore vs_TEXCOORD6 %323 
                                 Output f32* %411 = OpAccessChain %233 %19 %20 
                                         f32 %412 = OpLoad %411 
                                         f32 %413 = OpFNegate %412 
                                 Output f32* %414 = OpAccessChain %233 %19 %20 
                                                      OpStore %414 %413 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 945
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %60 %135 %169 %931 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate vs_TEXCOORD5 Location 135 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate vs_TEXCOORD1 Location 169 
                                                      OpDecorate %336 DescriptorSet 336 
                                                      OpDecorate %336 Binding 336 
                                                      OpDecorate %338 DescriptorSet 338 
                                                      OpDecorate %338 Binding 338 
                                                      OpDecorate %490 DescriptorSet 490 
                                                      OpDecorate %490 Binding 490 
                                                      OpDecorate %931 Location 931 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %7 %17 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %10 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_4* %38 = OpVariable Private 
                                              %46 = OpTypePointer Private %10 
                               Private f32_3* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypePointer UniformConstant %48 
         UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampler 
                                              %53 = OpTypePointer UniformConstant %52 
                     UniformConstant sampler* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampledImage %48 
                                              %58 = OpTypeVector %6 2 
                                              %59 = OpTypePointer Input %58 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %64 = OpVariable Private 
                                          i32 %66 = OpConstant 16 
                                              %67 = OpTypePointer Uniform %7 
                               Private f32_4* %72 = OpVariable Private 
                                          i32 %73 = OpConstant 4 
                                          u32 %74 = OpConstant 2 
                                              %75 = OpTypePointer Uniform %6 
                                          u32 %78 = OpConstant 0 
                                          i32 %80 = OpConstant 1 
                                          u32 %83 = OpConstant 1 
                                          i32 %85 = OpConstant 2 
                                 Private f32* %89 = OpVariable Private 
                                          i32 %96 = OpConstant 3 
                                Private f32* %104 = OpVariable Private 
                                         u32 %116 = OpConstant 3 
                                         f32 %131 = OpConstant 3.674022E-40 
                                         f32 %132 = OpConstant 3.674022E-40 
                                             %134 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %143 = OpVariable UniformConstant 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                Private f32* %152 = OpVariable Private 
                                         i32 %161 = OpConstant 14 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %186 = OpVariable Private 
                                         i32 %189 = OpConstant 13 
                                             %194 = OpTypeBool 
                                             %195 = OpTypePointer Private %194 
                               Private bool* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 7 
                              Private f32_4* %211 = OpVariable Private 
                              Private f32_3* %219 = OpVariable Private 
                                         i32 %222 = OpConstant 5 
                              Private f32_3* %231 = OpVariable Private 
                                         i32 %234 = OpConstant 6 
                                             %243 = OpTypeVector %194 3 
                                             %244 = OpTypePointer Private %243 
                             Private bool_3* %245 = OpVariable Private 
                                       f32_4 %246 = OpConstantComposite %131 %131 %131 %131 
                                             %249 = OpTypeVector %194 4 
                                             %252 = OpTypePointer Function %10 
                                             %257 = OpTypePointer Function %6 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         f32 %326 = OpConstant 3.674022E-40 
                                         f32 %332 = OpConstant 3.674022E-40 
                                             %334 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %335 = OpTypePointer UniformConstant %334 
      UniformConstant read_only TextureCube* %336 = OpVariable UniformConstant 
                    UniformConstant sampler* %338 = OpVariable UniformConstant 
                                             %340 = OpTypeSampledImage %334 
                                         f32 %348 = OpConstant 3.674022E-40 
                                         i32 %350 = OpConstant 8 
                               Private bool* %373 = OpVariable Private 
                                         f32 %376 = OpConstant 3.674022E-40 
                                         i32 %381 = OpConstant 11 
                                Private f32* %388 = OpVariable Private 
                              Private f32_3* %401 = OpVariable Private 
                                         i32 %404 = OpConstant 9 
                              Private f32_3* %412 = OpVariable Private 
                                         i32 %415 = OpConstant 10 
                             Private bool_3* %423 = OpVariable Private 
      UniformConstant read_only TextureCube* %490 = OpVariable UniformConstant 
                                         i32 %501 = OpConstant 12 
                                         f32 %562 = OpConstant 3.674022E-40 
                                       f32_3 %563 = OpConstantComposite %562 %562 %562 
                                         i32 %567 = OpConstant 15 
                                         f32 %582 = OpConstant 3.674022E-40 
                                       f32_3 %583 = OpConstantComposite %582 %582 %582 
                                         f32 %590 = OpConstant 3.674022E-40 
                                         f32 %614 = OpConstant 3.674022E-40 
                                Private f32* %641 = OpVariable Private 
                              Private f32_3* %660 = OpVariable Private 
                                         f32 %675 = OpConstant 3.674022E-40 
                                Private f32* %678 = OpVariable Private 
                                Private f32* %683 = OpVariable Private 
                                         f32 %726 = OpConstant 3.674022E-40 
                                         f32 %754 = OpConstant 3.674022E-40 
                                         f32 %756 = OpConstant 3.674022E-40 
                                         f32 %773 = OpConstant 3.674022E-40 
                                         f32 %778 = OpConstant 3.674022E-40 
                                         f32 %796 = OpConstant 3.674022E-40 
                               Private bool* %812 = OpVariable Private 
                                       f32_3 %873 = OpConstantComposite %132 %132 %132 
                                             %930 = OpTypePointer Output %7 
                               Output f32_4* %931 = OpVariable Output 
                                             %942 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %253 = OpVariable Function 
                               Function f32* %258 = OpVariable Function 
                               Function f32* %270 = OpVariable Function 
                               Function f32* %282 = OpVariable Function 
                             Function f32_3* %428 = OpVariable Function 
                               Function f32* %432 = OpVariable Function 
                               Function f32* %444 = OpVariable Function 
                               Function f32* %456 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %14 %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
                                                      OpStore %9 %28 
                                        f32_4 %31 = OpLoad %9 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                          f32 %35 = OpDot %32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                          f32 %37 = OpExtInst %1 32 %36 
                                                      OpStore %30 %37 
                                          f32 %39 = OpLoad %30 
                                        f32_3 %40 = OpCompositeConstruct %39 %39 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %38 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 6 3 
                                                      OpStore %38 %45 
                          read_only Texture2D %51 = OpLoad %50 
                                      sampler %55 = OpLoad %54 
                   read_only Texture2DSampled %57 = OpSampledImage %51 %55 
                                        f32_2 %61 = OpLoad vs_TEXCOORD0 
                                        f32_4 %62 = OpImageSampleImplicitLod %57 %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                                      OpStore %47 %63 
                                        f32_3 %65 = OpLoad %47 
                               Uniform f32_4* %68 = OpAccessChain %20 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                                      OpStore %64 %71 
                                 Uniform f32* %76 = OpAccessChain %20 %73 %22 %74 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %72 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %20 %73 %80 %74 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %84 = OpAccessChain %72 %83 
                                                      OpStore %84 %82 
                                 Uniform f32* %86 = OpAccessChain %20 %73 %85 %74 
                                          f32 %87 = OpLoad %86 
                                 Private f32* %88 = OpAccessChain %72 %74 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %72 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                                      OpStore %89 %94 
                                        f32_3 %95 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %97 = OpAccessChain %20 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpFAdd %95 %100 
                                       f32_4 %102 = OpLoad %72 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %72 %103 
                                       f32_4 %105 = OpLoad %72 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %106 %108 
                                                      OpStore %104 %109 
                                         f32 %110 = OpLoad %104 
                                         f32 %111 = OpExtInst %1 31 %110 
                                                      OpStore %104 %111 
                                         f32 %112 = OpLoad %89 
                                         f32 %113 = OpFNegate %112 
                                         f32 %114 = OpLoad %104 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %104 %115 
                                Uniform f32* %117 = OpAccessChain %20 %96 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpLoad %104 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %121 = OpLoad %89 
                                         f32 %122 = OpFAdd %120 %121 
                                                      OpStore %89 %122 
                                         f32 %123 = OpLoad %89 
                                Uniform f32* %124 = OpAccessChain %20 %85 %74 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFMul %123 %125 
                                Uniform f32* %127 = OpAccessChain %20 %85 %116 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %126 %128 
                                                      OpStore %89 %129 
                                         f32 %130 = OpLoad %89 
                                         f32 %133 = OpExtInst %1 43 %130 %131 %132 
                                                      OpStore %89 %133 
                                       f32_4 %136 = OpLoad vs_TEXCOORD5 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_4 %138 = OpLoad vs_TEXCOORD5 
                                       f32_2 %139 = OpVectorShuffle %138 %138 3 3 
                                       f32_2 %140 = OpFDiv %137 %139 
                                       f32_4 %141 = OpLoad %72 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
                                                      OpStore %72 %142 
                         read_only Texture2D %144 = OpLoad %143 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %147 = OpSampledImage %144 %146 
                                       f32_4 %148 = OpLoad %72 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_4 %150 = OpImageSampleImplicitLod %147 %149 
                                         f32 %151 = OpCompositeExtract %150 0 
                                                      OpStore %104 %151 
                                         f32 %153 = OpLoad %104 
                                         f32 %154 = OpFNegate %153 
                                         f32 %155 = OpFAdd %154 %132 
                                                      OpStore %152 %155 
                                         f32 %156 = OpLoad %89 
                                         f32 %157 = OpLoad %152 
                                         f32 %158 = OpFMul %156 %157 
                                         f32 %159 = OpLoad %104 
                                         f32 %160 = OpFAdd %158 %159 
                                                      OpStore %89 %160 
                                Uniform f32* %162 = OpAccessChain %20 %161 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                         f32 %165 = OpFAdd %164 %132 
                                                      OpStore %104 %165 
                                       f32_4 %166 = OpLoad %38 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFNegate %167 
                                       f32_3 %170 = OpLoad vs_TEXCOORD1 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %152 %171 
                                         f32 %172 = OpLoad %152 
                                         f32 %173 = OpLoad %152 
                                         f32 %174 = OpFAdd %172 %173 
                                                      OpStore %152 %174 
                                       f32_3 %175 = OpLoad vs_TEXCOORD1 
                                         f32 %176 = OpLoad %152 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_3 %178 = OpFNegate %177 
                                       f32_3 %179 = OpFMul %175 %178 
                                       f32_4 %180 = OpLoad %38 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFNegate %181 
                                       f32_3 %183 = OpFAdd %179 %182 
                                       f32_4 %184 = OpLoad %72 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                      OpStore %72 %185 
                                         f32 %187 = OpLoad %89 
                                       f32_3 %188 = OpCompositeConstruct %187 %187 %187 
                              Uniform f32_4* %190 = OpAccessChain %20 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFMul %188 %192 
                                                      OpStore %186 %193 
                                Uniform f32* %198 = OpAccessChain %20 %197 %116 
                                         f32 %199 = OpLoad %198 
                                        bool %200 = OpFOrdLessThan %131 %199 
                                                      OpStore %196 %200 
                                        bool %201 = OpLoad %196 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %317 
                                             %202 = OpLabel 
                                       f32_4 %204 = OpLoad %72 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %72 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                                      OpStore %89 %208 
                                         f32 %209 = OpLoad %89 
                                         f32 %210 = OpExtInst %1 32 %209 
                                                      OpStore %89 %210 
                                         f32 %212 = OpLoad %89 
                                       f32_3 %213 = OpCompositeConstruct %212 %212 %212 
                                       f32_4 %214 = OpLoad %72 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_4 %217 = OpLoad %211 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %211 %218 
                                       f32_3 %220 = OpLoad vs_TEXCOORD2 
                                       f32_3 %221 = OpFNegate %220 
                              Uniform f32_4* %223 = OpAccessChain %20 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFAdd %221 %225 
                                                      OpStore %219 %226 
                                       f32_3 %227 = OpLoad %219 
                                       f32_4 %228 = OpLoad %211 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFDiv %227 %229 
                                                      OpStore %219 %230 
                                       f32_3 %232 = OpLoad vs_TEXCOORD2 
                                       f32_3 %233 = OpFNegate %232 
                              Uniform f32_4* %235 = OpAccessChain %20 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFAdd %233 %237 
                                                      OpStore %231 %238 
                                       f32_3 %239 = OpLoad %231 
                                       f32_4 %240 = OpLoad %211 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFDiv %239 %241 
                                                      OpStore %231 %242 
                                       f32_4 %247 = OpLoad %211 
                                       f32_4 %248 = OpVectorShuffle %247 %247 0 1 2 0 
                                      bool_4 %250 = OpFOrdLessThan %246 %248 
                                      bool_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                                      OpStore %245 %251 
                                       f32_3 %254 = OpLoad %219 
                                                      OpStore %253 %254 
                               Private bool* %255 = OpAccessChain %245 %78 
                                        bool %256 = OpLoad %255 
                                                      OpSelectionMerge %260 None 
                                                      OpBranchConditional %256 %259 %263 
                                             %259 = OpLabel 
                                Private f32* %261 = OpAccessChain %219 %78 
                                         f32 %262 = OpLoad %261 
                                                      OpStore %258 %262 
                                                      OpBranch %260 
                                             %263 = OpLabel 
                                Private f32* %264 = OpAccessChain %231 %78 
                                         f32 %265 = OpLoad %264 
                                                      OpStore %258 %265 
                                                      OpBranch %260 
                                             %260 = OpLabel 
                                         f32 %266 = OpLoad %258 
                               Function f32* %267 = OpAccessChain %253 %78 
                                                      OpStore %267 %266 
                               Private bool* %268 = OpAccessChain %245 %83 
                                        bool %269 = OpLoad %268 
                                                      OpSelectionMerge %272 None 
                                                      OpBranchConditional %269 %271 %275 
                                             %271 = OpLabel 
                                Private f32* %273 = OpAccessChain %219 %83 
                                         f32 %274 = OpLoad %273 
                                                      OpStore %270 %274 
                                                      OpBranch %272 
                                             %275 = OpLabel 
                                Private f32* %276 = OpAccessChain %231 %83 
                                         f32 %277 = OpLoad %276 
                                                      OpStore %270 %277 
                                                      OpBranch %272 
                                             %272 = OpLabel 
                                         f32 %278 = OpLoad %270 
                               Function f32* %279 = OpAccessChain %253 %83 
                                                      OpStore %279 %278 
                               Private bool* %280 = OpAccessChain %245 %74 
                                        bool %281 = OpLoad %280 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %281 %283 %287 
                                             %283 = OpLabel 
                                Private f32* %285 = OpAccessChain %219 %74 
                                         f32 %286 = OpLoad %285 
                                                      OpStore %282 %286 
                                                      OpBranch %284 
                                             %287 = OpLabel 
                                Private f32* %288 = OpAccessChain %231 %74 
                                         f32 %289 = OpLoad %288 
                                                      OpStore %282 %289 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                         f32 %290 = OpLoad %282 
                               Function f32* %291 = OpAccessChain %253 %74 
                                                      OpStore %291 %290 
                                       f32_3 %292 = OpLoad %253 
                                                      OpStore %219 %292 
                                Private f32* %293 = OpAccessChain %219 %83 
                                         f32 %294 = OpLoad %293 
                                Private f32* %295 = OpAccessChain %219 %78 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpExtInst %1 37 %294 %296 
                                                      OpStore %89 %297 
                                Private f32* %298 = OpAccessChain %219 %74 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpLoad %89 
                                         f32 %301 = OpExtInst %1 37 %299 %300 
                                                      OpStore %89 %301 
                                       f32_3 %302 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %303 = OpAccessChain %20 %197 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFNegate %305 
                                       f32_3 %307 = OpFAdd %302 %306 
                                                      OpStore %219 %307 
                                       f32_4 %308 = OpLoad %211 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                         f32 %310 = OpLoad %89 
                                       f32_3 %311 = OpCompositeConstruct %310 %310 %310 
                                       f32_3 %312 = OpFMul %309 %311 
                                       f32_3 %313 = OpLoad %219 
                                       f32_3 %314 = OpFAdd %312 %313 
                                       f32_4 %315 = OpLoad %211 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %211 %316 
                                                      OpBranch %203 
                                             %317 = OpLabel 
                                       f32_4 %318 = OpLoad %72 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_4 %320 = OpLoad %211 
                                       f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                                      OpStore %211 %321 
                                                      OpBranch %203 
                                             %203 = OpLabel 
                                         f32 %322 = OpLoad %104 
                                         f32 %323 = OpFNegate %322 
                                         f32 %325 = OpFMul %323 %324 
                                         f32 %327 = OpFAdd %325 %326 
                                                      OpStore %89 %327 
                                         f32 %328 = OpLoad %89 
                                         f32 %329 = OpLoad %104 
                                         f32 %330 = OpFMul %328 %329 
                                                      OpStore %89 %330 
                                         f32 %331 = OpLoad %89 
                                         f32 %333 = OpFMul %331 %332 
                                                      OpStore %89 %333 
                       read_only TextureCube %337 = OpLoad %336 
                                     sampler %339 = OpLoad %338 
                read_only TextureCubeSampled %341 = OpSampledImage %337 %339 
                                       f32_4 %342 = OpLoad %211 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                         f32 %344 = OpLoad %89 
                                       f32_4 %345 = OpImageSampleExplicitLod %341 %343 Lod %7 
                                                      OpStore %211 %345 
                                Private f32* %346 = OpAccessChain %211 %116 
                                         f32 %347 = OpLoad %346 
                                         f32 %349 = OpFAdd %347 %348 
                                                      OpStore %152 %349 
                                Uniform f32* %351 = OpAccessChain %20 %350 %116 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpLoad %152 
                                         f32 %354 = OpFMul %352 %353 
                                         f32 %355 = OpFAdd %354 %132 
                                                      OpStore %152 %355 
                                         f32 %356 = OpLoad %152 
                                         f32 %357 = OpExtInst %1 30 %356 
                                                      OpStore %152 %357 
                                         f32 %358 = OpLoad %152 
                                Uniform f32* %359 = OpAccessChain %20 %350 %83 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFMul %358 %360 
                                                      OpStore %152 %361 
                                         f32 %362 = OpLoad %152 
                                         f32 %363 = OpExtInst %1 29 %362 
                                                      OpStore %152 %363 
                                         f32 %364 = OpLoad %152 
                                Uniform f32* %365 = OpAccessChain %20 %350 %78 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFMul %364 %366 
                                                      OpStore %152 %367 
                                       f32_4 %368 = OpLoad %211 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                         f32 %370 = OpLoad %152 
                                       f32_3 %371 = OpCompositeConstruct %370 %370 %370 
                                       f32_3 %372 = OpFMul %369 %371 
                                                      OpStore %219 %372 
                                Uniform f32* %374 = OpAccessChain %20 %234 %116 
                                         f32 %375 = OpLoad %374 
                                        bool %377 = OpFOrdLessThan %375 %376 
                                                      OpStore %373 %377 
                                        bool %378 = OpLoad %373 
                                                      OpSelectionMerge %380 None 
                                                      OpBranchConditional %378 %379 %380 
                                             %379 = OpLabel 
                                Uniform f32* %382 = OpAccessChain %20 %381 %116 
                                         f32 %383 = OpLoad %382 
                                        bool %384 = OpFOrdLessThan %131 %383 
                                                      OpStore %373 %384 
                                        bool %385 = OpLoad %373 
                                                      OpSelectionMerge %387 None 
                                                      OpBranchConditional %385 %386 %387 
                                             %386 = OpLabel 
                                       f32_4 %389 = OpLoad %72 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_4 %391 = OpLoad %72 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpDot %390 %392 
                                                      OpStore %388 %393 
                                         f32 %394 = OpLoad %388 
                                         f32 %395 = OpExtInst %1 32 %394 
                                                      OpStore %388 %395 
                                         f32 %396 = OpLoad %388 
                                       f32_3 %397 = OpCompositeConstruct %396 %396 %396 
                                       f32_4 %398 = OpLoad %72 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_3 %400 = OpFMul %397 %399 
                                                      OpStore %231 %400 
                                       f32_3 %402 = OpLoad vs_TEXCOORD2 
                                       f32_3 %403 = OpFNegate %402 
                              Uniform f32_4* %405 = OpAccessChain %20 %404 
                                       f32_4 %406 = OpLoad %405 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpFAdd %403 %407 
                                                      OpStore %401 %408 
                                       f32_3 %409 = OpLoad %401 
                                       f32_3 %410 = OpLoad %231 
                                       f32_3 %411 = OpFDiv %409 %410 
                                                      OpStore %401 %411 
                                       f32_3 %413 = OpLoad vs_TEXCOORD2 
                                       f32_3 %414 = OpFNegate %413 
                              Uniform f32_4* %416 = OpAccessChain %20 %415 
                                       f32_4 %417 = OpLoad %416 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_3 %419 = OpFAdd %414 %418 
                                                      OpStore %412 %419 
                                       f32_3 %420 = OpLoad %412 
                                       f32_3 %421 = OpLoad %231 
                                       f32_3 %422 = OpFDiv %420 %421 
                                                      OpStore %412 %422 
                                       f32_3 %424 = OpLoad %231 
                                       f32_4 %425 = OpVectorShuffle %424 %424 0 1 2 0 
                                      bool_4 %426 = OpFOrdLessThan %246 %425 
                                      bool_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                                      OpStore %423 %427 
                                       f32_3 %429 = OpLoad %401 
                                                      OpStore %428 %429 
                               Private bool* %430 = OpAccessChain %423 %78 
                                        bool %431 = OpLoad %430 
                                                      OpSelectionMerge %434 None 
                                                      OpBranchConditional %431 %433 %437 
                                             %433 = OpLabel 
                                Private f32* %435 = OpAccessChain %401 %78 
                                         f32 %436 = OpLoad %435 
                                                      OpStore %432 %436 
                                                      OpBranch %434 
                                             %437 = OpLabel 
                                Private f32* %438 = OpAccessChain %412 %78 
                                         f32 %439 = OpLoad %438 
                                                      OpStore %432 %439 
                                                      OpBranch %434 
                                             %434 = OpLabel 
                                         f32 %440 = OpLoad %432 
                               Function f32* %441 = OpAccessChain %428 %78 
                                                      OpStore %441 %440 
                               Private bool* %442 = OpAccessChain %423 %83 
                                        bool %443 = OpLoad %442 
                                                      OpSelectionMerge %446 None 
                                                      OpBranchConditional %443 %445 %449 
                                             %445 = OpLabel 
                                Private f32* %447 = OpAccessChain %401 %83 
                                         f32 %448 = OpLoad %447 
                                                      OpStore %444 %448 
                                                      OpBranch %446 
                                             %449 = OpLabel 
                                Private f32* %450 = OpAccessChain %412 %83 
                                         f32 %451 = OpLoad %450 
                                                      OpStore %444 %451 
                                                      OpBranch %446 
                                             %446 = OpLabel 
                                         f32 %452 = OpLoad %444 
                               Function f32* %453 = OpAccessChain %428 %83 
                                                      OpStore %453 %452 
                               Private bool* %454 = OpAccessChain %423 %74 
                                        bool %455 = OpLoad %454 
                                                      OpSelectionMerge %458 None 
                                                      OpBranchConditional %455 %457 %461 
                                             %457 = OpLabel 
                                Private f32* %459 = OpAccessChain %401 %74 
                                         f32 %460 = OpLoad %459 
                                                      OpStore %456 %460 
                                                      OpBranch %458 
                                             %461 = OpLabel 
                                Private f32* %462 = OpAccessChain %412 %74 
                                         f32 %463 = OpLoad %462 
                                                      OpStore %456 %463 
                                                      OpBranch %458 
                                             %458 = OpLabel 
                                         f32 %464 = OpLoad %456 
                               Function f32* %465 = OpAccessChain %428 %74 
                                                      OpStore %465 %464 
                                       f32_3 %466 = OpLoad %428 
                                                      OpStore %401 %466 
                                Private f32* %467 = OpAccessChain %401 %83 
                                         f32 %468 = OpLoad %467 
                                Private f32* %469 = OpAccessChain %401 %78 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpExtInst %1 37 %468 %470 
                                                      OpStore %388 %471 
                                Private f32* %472 = OpAccessChain %401 %74 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpLoad %388 
                                         f32 %475 = OpExtInst %1 37 %473 %474 
                                                      OpStore %388 %475 
                                       f32_3 %476 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %477 = OpAccessChain %20 %381 
                                       f32_4 %478 = OpLoad %477 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFNegate %479 
                                       f32_3 %481 = OpFAdd %476 %480 
                                                      OpStore %401 %481 
                                       f32_3 %482 = OpLoad %231 
                                         f32 %483 = OpLoad %388 
                                       f32_3 %484 = OpCompositeConstruct %483 %483 %483 
                                       f32_3 %485 = OpFMul %482 %484 
                                       f32_3 %486 = OpLoad %401 
                                       f32_3 %487 = OpFAdd %485 %486 
                                       f32_4 %488 = OpLoad %72 
                                       f32_4 %489 = OpVectorShuffle %488 %487 4 5 6 3 
                                                      OpStore %72 %489 
                                                      OpBranch %387 
                                             %387 = OpLabel 
                       read_only TextureCube %491 = OpLoad %490 
                                     sampler %492 = OpLoad %338 
                read_only TextureCubeSampled %493 = OpSampledImage %491 %492 
                                       f32_4 %494 = OpLoad %72 
                                       f32_3 %495 = OpVectorShuffle %494 %494 0 1 2 
                                         f32 %496 = OpLoad %89 
                                       f32_4 %497 = OpImageSampleExplicitLod %493 %495 Lod %7 
                                                      OpStore %72 %497 
                                Private f32* %498 = OpAccessChain %72 %116 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %499 %348 
                                                      OpStore %89 %500 
                                Uniform f32* %502 = OpAccessChain %20 %501 %116 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpLoad %89 
                                         f32 %505 = OpFMul %503 %504 
                                         f32 %506 = OpFAdd %505 %132 
                                                      OpStore %89 %506 
                                         f32 %507 = OpLoad %89 
                                         f32 %508 = OpExtInst %1 30 %507 
                                                      OpStore %89 %508 
                                         f32 %509 = OpLoad %89 
                                Uniform f32* %510 = OpAccessChain %20 %501 %83 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpFMul %509 %511 
                                                      OpStore %89 %512 
                                         f32 %513 = OpLoad %89 
                                         f32 %514 = OpExtInst %1 29 %513 
                                                      OpStore %89 %514 
                                         f32 %515 = OpLoad %89 
                                Uniform f32* %516 = OpAccessChain %20 %501 %78 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFMul %515 %517 
                                                      OpStore %89 %518 
                                       f32_4 %519 = OpLoad %72 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                         f32 %521 = OpLoad %89 
                                       f32_3 %522 = OpCompositeConstruct %521 %521 %521 
                                       f32_3 %523 = OpFMul %520 %522 
                                       f32_4 %524 = OpLoad %72 
                                       f32_4 %525 = OpVectorShuffle %524 %523 4 5 6 3 
                                                      OpStore %72 %525 
                                         f32 %526 = OpLoad %152 
                                       f32_3 %527 = OpCompositeConstruct %526 %526 %526 
                                       f32_4 %528 = OpLoad %211 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFMul %527 %529 
                                       f32_4 %531 = OpLoad %72 
                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
                                       f32_3 %533 = OpFNegate %532 
                                       f32_3 %534 = OpFAdd %530 %533 
                                       f32_4 %535 = OpLoad %211 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %211 %536 
                              Uniform f32_4* %537 = OpAccessChain %20 %234 
                                       f32_4 %538 = OpLoad %537 
                                       f32_3 %539 = OpVectorShuffle %538 %538 3 3 3 
                                       f32_4 %540 = OpLoad %211 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                       f32_3 %542 = OpFMul %539 %541 
                                       f32_4 %543 = OpLoad %72 
                                       f32_3 %544 = OpVectorShuffle %543 %543 0 1 2 
                                       f32_3 %545 = OpFAdd %542 %544 
                                                      OpStore %219 %545 
                                                      OpBranch %380 
                                             %380 = OpLabel 
                                       f32_3 %546 = OpLoad vs_TEXCOORD1 
                                       f32_3 %547 = OpLoad vs_TEXCOORD1 
                                         f32 %548 = OpDot %546 %547 
                                                      OpStore %89 %548 
                                         f32 %549 = OpLoad %89 
                                         f32 %550 = OpExtInst %1 32 %549 
                                                      OpStore %89 %550 
                                         f32 %551 = OpLoad %89 
                                       f32_3 %552 = OpCompositeConstruct %551 %551 %551 
                                       f32_3 %553 = OpLoad vs_TEXCOORD1 
                                       f32_3 %554 = OpFMul %552 %553 
                                       f32_4 %555 = OpLoad %72 
                                       f32_4 %556 = OpVectorShuffle %555 %554 4 5 6 3 
                                                      OpStore %72 %556 
                                       f32_3 %557 = OpLoad %47 
                              Uniform f32_4* %558 = OpAccessChain %20 %66 
                                       f32_4 %559 = OpLoad %558 
                                       f32_3 %560 = OpVectorShuffle %559 %559 0 1 2 
                                       f32_3 %561 = OpFMul %557 %560 
                                       f32_3 %564 = OpFAdd %561 %563 
                                       f32_4 %565 = OpLoad %211 
                                       f32_4 %566 = OpVectorShuffle %565 %564 4 5 6 3 
                                                      OpStore %211 %566 
                                Uniform f32* %568 = OpAccessChain %20 %567 
                                         f32 %569 = OpLoad %568 
                                Uniform f32* %570 = OpAccessChain %20 %567 
                                         f32 %571 = OpLoad %570 
                                Uniform f32* %572 = OpAccessChain %20 %567 
                                         f32 %573 = OpLoad %572 
                                       f32_3 %574 = OpCompositeConstruct %569 %571 %573 
                                         f32 %575 = OpCompositeExtract %574 0 
                                         f32 %576 = OpCompositeExtract %574 1 
                                         f32 %577 = OpCompositeExtract %574 2 
                                       f32_3 %578 = OpCompositeConstruct %575 %576 %577 
                                       f32_4 %579 = OpLoad %211 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpFMul %578 %580 
                                       f32_3 %584 = OpFAdd %581 %583 
                                       f32_4 %585 = OpLoad %211 
                                       f32_4 %586 = OpVectorShuffle %585 %584 4 5 6 3 
                                                      OpStore %211 %586 
                                Uniform f32* %587 = OpAccessChain %20 %567 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFNegate %588 
                                         f32 %591 = OpFMul %589 %590 
                                         f32 %592 = OpFAdd %591 %590 
                                                      OpStore %89 %592 
                                         f32 %593 = OpLoad %89 
                                       f32_3 %594 = OpCompositeConstruct %593 %593 %593 
                                       f32_3 %595 = OpLoad %64 
                                       f32_3 %596 = OpFMul %594 %595 
                                                      OpStore %64 %596 
                                       f32_4 %597 = OpLoad %9 
                                       f32_3 %598 = OpVectorShuffle %597 %597 0 1 2 
                                         f32 %599 = OpLoad %30 
                                       f32_3 %600 = OpCompositeConstruct %599 %599 %599 
                                       f32_3 %601 = OpFMul %598 %600 
                              Uniform f32_4* %602 = OpAccessChain %20 %80 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFAdd %601 %604 
                                       f32_4 %606 = OpLoad %9 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %9 %607 
                                       f32_4 %608 = OpLoad %9 
                                       f32_3 %609 = OpVectorShuffle %608 %608 0 1 2 
                                       f32_4 %610 = OpLoad %9 
                                       f32_3 %611 = OpVectorShuffle %610 %610 0 1 2 
                                         f32 %612 = OpDot %609 %611 
                                                      OpStore %30 %612 
                                         f32 %613 = OpLoad %30 
                                         f32 %615 = OpExtInst %1 40 %613 %614 
                                                      OpStore %30 %615 
                                         f32 %616 = OpLoad %30 
                                         f32 %617 = OpExtInst %1 32 %616 
                                                      OpStore %30 %617 
                                         f32 %618 = OpLoad %30 
                                       f32_3 %619 = OpCompositeConstruct %618 %618 %618 
                                       f32_4 %620 = OpLoad %9 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                       f32_3 %622 = OpFMul %619 %621 
                                       f32_4 %623 = OpLoad %9 
                                       f32_4 %624 = OpVectorShuffle %623 %622 4 5 6 3 
                                                      OpStore %9 %624 
                                       f32_4 %625 = OpLoad %72 
                                       f32_3 %626 = OpVectorShuffle %625 %625 0 1 2 
                                       f32_4 %627 = OpLoad %38 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 2 
                                         f32 %629 = OpDot %626 %628 
                                                      OpStore %30 %629 
                                       f32_4 %630 = OpLoad %72 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                              Uniform f32_4* %632 = OpAccessChain %20 %80 
                                       f32_4 %633 = OpLoad %632 
                                       f32_3 %634 = OpVectorShuffle %633 %633 0 1 2 
                                         f32 %635 = OpDot %631 %634 
                                Private f32* %636 = OpAccessChain %38 %78 
                                                      OpStore %636 %635 
                                Private f32* %637 = OpAccessChain %38 %78 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpExtInst %1 43 %638 %131 %132 
                                Private f32* %640 = OpAccessChain %38 %78 
                                                      OpStore %640 %639 
                                       f32_4 %642 = OpLoad %72 
                                       f32_3 %643 = OpVectorShuffle %642 %642 0 1 2 
                                       f32_4 %644 = OpLoad %9 
                                       f32_3 %645 = OpVectorShuffle %644 %644 0 1 2 
                                         f32 %646 = OpDot %643 %645 
                                                      OpStore %641 %646 
                                         f32 %647 = OpLoad %641 
                                         f32 %648 = OpExtInst %1 43 %647 %131 %132 
                                                      OpStore %641 %648 
                              Uniform f32_4* %649 = OpAccessChain %20 %80 
                                       f32_4 %650 = OpLoad %649 
                                       f32_3 %651 = OpVectorShuffle %650 %650 0 1 2 
                                       f32_4 %652 = OpLoad %9 
                                       f32_3 %653 = OpVectorShuffle %652 %652 0 1 2 
                                         f32 %654 = OpDot %651 %653 
                                Private f32* %655 = OpAccessChain %9 %78 
                                                      OpStore %655 %654 
                                Private f32* %656 = OpAccessChain %9 %78 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpExtInst %1 43 %657 %131 %132 
                                Private f32* %659 = OpAccessChain %9 %78 
                                                      OpStore %659 %658 
                                Private f32* %661 = OpAccessChain %9 %78 
                                         f32 %662 = OpLoad %661 
                                Private f32* %663 = OpAccessChain %9 %78 
                                         f32 %664 = OpLoad %663 
                                         f32 %665 = OpFMul %662 %664 
                                Private f32* %666 = OpAccessChain %660 %78 
                                                      OpStore %666 %665 
                                       f32_3 %667 = OpLoad %660 
                                       f32_2 %668 = OpVectorShuffle %667 %667 0 0 
                                         f32 %669 = OpLoad %104 
                                       f32_2 %670 = OpCompositeConstruct %669 %669 
                                         f32 %671 = OpDot %668 %670 
                                Private f32* %672 = OpAccessChain %660 %78 
                                                      OpStore %672 %671 
                                Private f32* %673 = OpAccessChain %660 %78 
                                         f32 %674 = OpLoad %673 
                                         f32 %676 = OpFAdd %674 %675 
                                Private f32* %677 = OpAccessChain %660 %78 
                                                      OpStore %677 %676 
                                Private f32* %679 = OpAccessChain %38 %78 
                                         f32 %680 = OpLoad %679 
                                         f32 %681 = OpFNegate %680 
                                         f32 %682 = OpFAdd %681 %132 
                                                      OpStore %678 %682 
                                         f32 %684 = OpLoad %678 
                                         f32 %685 = OpLoad %678 
                                         f32 %686 = OpFMul %684 %685 
                                                      OpStore %683 %686 
                                         f32 %687 = OpLoad %683 
                                         f32 %688 = OpLoad %683 
                                         f32 %689 = OpFMul %687 %688 
                                                      OpStore %683 %689 
                                         f32 %690 = OpLoad %678 
                                         f32 %691 = OpLoad %683 
                                         f32 %692 = OpFMul %690 %691 
                                                      OpStore %678 %692 
                                Private f32* %693 = OpAccessChain %660 %78 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpLoad %678 
                                         f32 %696 = OpFMul %694 %695 
                                         f32 %697 = OpFAdd %696 %132 
                                                      OpStore %678 %697 
                                         f32 %698 = OpLoad %30 
                                         f32 %699 = OpExtInst %1 4 %698 
                                         f32 %700 = OpFNegate %699 
                                         f32 %701 = OpFAdd %700 %132 
                                                      OpStore %683 %701 
                                         f32 %702 = OpLoad %683 
                                         f32 %703 = OpLoad %683 
                                         f32 %704 = OpFMul %702 %703 
                                                      OpStore %152 %704 
                                         f32 %705 = OpLoad %152 
                                         f32 %706 = OpLoad %152 
                                         f32 %707 = OpFMul %705 %706 
                                                      OpStore %152 %707 
                                         f32 %708 = OpLoad %683 
                                         f32 %709 = OpLoad %152 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %683 %710 
                                Private f32* %711 = OpAccessChain %660 %78 
                                         f32 %712 = OpLoad %711 
                                         f32 %713 = OpLoad %683 
                                         f32 %714 = OpFMul %712 %713 
                                         f32 %715 = OpFAdd %714 %132 
                                Private f32* %716 = OpAccessChain %660 %78 
                                                      OpStore %716 %715 
                                Private f32* %717 = OpAccessChain %660 %78 
                                         f32 %718 = OpLoad %717 
                                         f32 %719 = OpLoad %678 
                                         f32 %720 = OpFMul %718 %719 
                                Private f32* %721 = OpAccessChain %660 %78 
                                                      OpStore %721 %720 
                                         f32 %722 = OpLoad %104 
                                         f32 %723 = OpLoad %104 
                                         f32 %724 = OpFMul %722 %723 
                                                      OpStore %678 %724 
                                         f32 %725 = OpLoad %678 
                                         f32 %727 = OpExtInst %1 40 %725 %726 
                                                      OpStore %678 %727 
                                         f32 %728 = OpLoad %678 
                                         f32 %729 = OpFNegate %728 
                                         f32 %730 = OpFAdd %729 %132 
                                                      OpStore %104 %730 
                                         f32 %731 = OpLoad %30 
                                         f32 %732 = OpExtInst %1 4 %731 
                                         f32 %733 = OpLoad %104 
                                         f32 %734 = OpFMul %732 %733 
                                         f32 %735 = OpLoad %678 
                                         f32 %736 = OpFAdd %734 %735 
                                                      OpStore %152 %736 
                                Private f32* %737 = OpAccessChain %38 %78 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpLoad %104 
                                         f32 %740 = OpFMul %738 %739 
                                         f32 %741 = OpLoad %678 
                                         f32 %742 = OpFAdd %740 %741 
                                                      OpStore %104 %742 
                                         f32 %743 = OpLoad %30 
                                         f32 %744 = OpExtInst %1 4 %743 
                                         f32 %745 = OpLoad %104 
                                         f32 %746 = OpFMul %744 %745 
                                                      OpStore %30 %746 
                                Private f32* %747 = OpAccessChain %38 %78 
                                         f32 %748 = OpLoad %747 
                                         f32 %749 = OpLoad %152 
                                         f32 %750 = OpFMul %748 %749 
                                         f32 %751 = OpLoad %30 
                                         f32 %752 = OpFAdd %750 %751 
                                                      OpStore %30 %752 
                                         f32 %753 = OpLoad %30 
                                         f32 %755 = OpFAdd %753 %754 
                                                      OpStore %30 %755 
                                         f32 %757 = OpLoad %30 
                                         f32 %758 = OpFDiv %756 %757 
                                                      OpStore %30 %758 
                                         f32 %759 = OpLoad %678 
                                         f32 %760 = OpLoad %678 
                                         f32 %761 = OpFMul %759 %760 
                                                      OpStore %104 %761 
                                         f32 %762 = OpLoad %641 
                                         f32 %763 = OpLoad %104 
                                         f32 %764 = OpFMul %762 %763 
                                         f32 %765 = OpLoad %641 
                                         f32 %766 = OpFNegate %765 
                                         f32 %767 = OpFAdd %764 %766 
                                                      OpStore %152 %767 
                                         f32 %768 = OpLoad %152 
                                         f32 %769 = OpLoad %641 
                                         f32 %770 = OpFMul %768 %769 
                                         f32 %771 = OpFAdd %770 %132 
                                                      OpStore %641 %771 
                                         f32 %772 = OpLoad %104 
                                         f32 %774 = OpFMul %772 %773 
                                                      OpStore %104 %774 
                                         f32 %775 = OpLoad %641 
                                         f32 %776 = OpLoad %641 
                                         f32 %777 = OpFMul %775 %776 
                                         f32 %779 = OpFAdd %777 %778 
                                                      OpStore %641 %779 
                                         f32 %780 = OpLoad %104 
                                         f32 %781 = OpLoad %641 
                                         f32 %782 = OpFDiv %780 %781 
                                                      OpStore %641 %782 
                                         f32 %783 = OpLoad %30 
                                         f32 %784 = OpLoad %641 
                                         f32 %785 = OpFMul %783 %784 
                                Private f32* %786 = OpAccessChain %660 %74 
                                                      OpStore %786 %785 
                                       f32_4 %787 = OpLoad %38 
                                       f32_2 %788 = OpVectorShuffle %787 %787 0 0 
                                       f32_3 %789 = OpLoad %660 
                                       f32_2 %790 = OpVectorShuffle %789 %789 0 2 
                                       f32_2 %791 = OpFMul %788 %790 
                                       f32_3 %792 = OpLoad %660 
                                       f32_3 %793 = OpVectorShuffle %792 %791 3 1 4 
                                                      OpStore %660 %793 
                                Private f32* %794 = OpAccessChain %660 %74 
                                         f32 %795 = OpLoad %794 
                                         f32 %797 = OpFMul %795 %796 
                                                      OpStore %30 %797 
                                         f32 %798 = OpLoad %30 
                                         f32 %799 = OpExtInst %1 40 %798 %131 
                                                      OpStore %30 %799 
                                         f32 %800 = OpLoad %678 
                                         f32 %801 = OpLoad %678 
                                         f32 %802 = OpFMul %800 %801 
                                         f32 %803 = OpFAdd %802 %132 
                                                      OpStore %678 %803 
                                         f32 %804 = OpLoad %678 
                                         f32 %805 = OpFDiv %132 %804 
                                                      OpStore %678 %805 
                                       f32_4 %806 = OpLoad %211 
                                       f32_3 %807 = OpVectorShuffle %806 %806 0 1 2 
                                       f32_4 %808 = OpLoad %211 
                                       f32_3 %809 = OpVectorShuffle %808 %808 0 1 2 
                                         f32 %810 = OpDot %807 %809 
                                Private f32* %811 = OpAccessChain %38 %78 
                                                      OpStore %811 %810 
                                Private f32* %813 = OpAccessChain %38 %78 
                                         f32 %814 = OpLoad %813 
                                        bool %815 = OpFOrdNotEqual %814 %131 
                                                      OpStore %812 %815 
                                        bool %816 = OpLoad %812 
                                         f32 %817 = OpSelect %816 %132 %131 
                                Private f32* %818 = OpAccessChain %38 %78 
                                                      OpStore %818 %817 
                                         f32 %819 = OpLoad %30 
                                Private f32* %820 = OpAccessChain %38 %78 
                                         f32 %821 = OpLoad %820 
                                         f32 %822 = OpFMul %819 %821 
                                                      OpStore %30 %822 
                                         f32 %823 = OpLoad %89 
                                         f32 %824 = OpFNegate %823 
                                Uniform f32* %825 = OpAccessChain %20 %161 
                                         f32 %826 = OpLoad %825 
                                         f32 %827 = OpFAdd %824 %826 
                                Private f32* %828 = OpAccessChain %38 %78 
                                                      OpStore %828 %827 
                                Private f32* %829 = OpAccessChain %38 %78 
                                         f32 %830 = OpLoad %829 
                                         f32 %831 = OpFAdd %830 %132 
                                Private f32* %832 = OpAccessChain %38 %78 
                                                      OpStore %832 %831 
                                Private f32* %833 = OpAccessChain %38 %78 
                                         f32 %834 = OpLoad %833 
                                         f32 %835 = OpExtInst %1 43 %834 %131 %132 
                                Private f32* %836 = OpAccessChain %38 %78 
                                                      OpStore %836 %835 
                                       f32_3 %837 = OpLoad %660 
                                       f32_3 %838 = OpVectorShuffle %837 %837 0 0 0 
                                       f32_3 %839 = OpLoad %186 
                                       f32_3 %840 = OpFMul %838 %839 
                                       f32_4 %841 = OpLoad %72 
                                       f32_4 %842 = OpVectorShuffle %841 %840 4 5 6 3 
                                                      OpStore %72 %842 
                                       f32_3 %843 = OpLoad %186 
                                         f32 %844 = OpLoad %30 
                                       f32_3 %845 = OpCompositeConstruct %844 %844 %844 
                                       f32_3 %846 = OpFMul %843 %845 
                                                      OpStore %186 %846 
                                Private f32* %847 = OpAccessChain %9 %78 
                                         f32 %848 = OpLoad %847 
                                         f32 %849 = OpFNegate %848 
                                         f32 %850 = OpFAdd %849 %132 
                                Private f32* %851 = OpAccessChain %9 %78 
                                                      OpStore %851 %850 
                                Private f32* %852 = OpAccessChain %9 %78 
                                         f32 %853 = OpLoad %852 
                                Private f32* %854 = OpAccessChain %9 %78 
                                         f32 %855 = OpLoad %854 
                                         f32 %856 = OpFMul %853 %855 
                                Private f32* %857 = OpAccessChain %660 %78 
                                                      OpStore %857 %856 
                                Private f32* %858 = OpAccessChain %660 %78 
                                         f32 %859 = OpLoad %858 
                                Private f32* %860 = OpAccessChain %660 %78 
                                         f32 %861 = OpLoad %860 
                                         f32 %862 = OpFMul %859 %861 
                                Private f32* %863 = OpAccessChain %660 %78 
                                                      OpStore %863 %862 
                                Private f32* %864 = OpAccessChain %9 %78 
                                         f32 %865 = OpLoad %864 
                                Private f32* %866 = OpAccessChain %660 %78 
                                         f32 %867 = OpLoad %866 
                                         f32 %868 = OpFMul %865 %867 
                                Private f32* %869 = OpAccessChain %9 %78 
                                                      OpStore %869 %868 
                                       f32_4 %870 = OpLoad %211 
                                       f32_3 %871 = OpVectorShuffle %870 %870 0 1 2 
                                       f32_3 %872 = OpFNegate %871 
                                       f32_3 %874 = OpFAdd %872 %873 
                                                      OpStore %231 %874 
                                       f32_3 %875 = OpLoad %231 
                                       f32_4 %876 = OpLoad %9 
                                       f32_3 %877 = OpVectorShuffle %876 %876 0 0 0 
                                       f32_3 %878 = OpFMul %875 %877 
                                       f32_4 %879 = OpLoad %211 
                                       f32_3 %880 = OpVectorShuffle %879 %879 0 1 2 
                                       f32_3 %881 = OpFAdd %878 %880 
                                       f32_4 %882 = OpLoad %9 
                                       f32_4 %883 = OpVectorShuffle %882 %881 4 5 2 6 
                                                      OpStore %9 %883 
                                       f32_4 %884 = OpLoad %9 
                                       f32_3 %885 = OpVectorShuffle %884 %884 0 1 3 
                                       f32_3 %886 = OpLoad %186 
                                       f32_3 %887 = OpFMul %885 %886 
                                       f32_4 %888 = OpLoad %9 
                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 2 6 
                                                      OpStore %9 %889 
                                       f32_3 %890 = OpLoad %64 
                                       f32_4 %891 = OpLoad %72 
                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
                                       f32_3 %893 = OpFMul %890 %892 
                                       f32_4 %894 = OpLoad %9 
                                       f32_3 %895 = OpVectorShuffle %894 %894 0 1 3 
                                       f32_3 %896 = OpFAdd %893 %895 
                                       f32_4 %897 = OpLoad %9 
                                       f32_4 %898 = OpVectorShuffle %897 %896 4 5 2 6 
                                                      OpStore %9 %898 
                                       f32_3 %899 = OpLoad %219 
                                         f32 %900 = OpLoad %678 
                                       f32_3 %901 = OpCompositeConstruct %900 %900 %900 
                                       f32_3 %902 = OpFMul %899 %901 
                                                      OpStore %64 %902 
                                       f32_4 %903 = OpLoad %211 
                                       f32_3 %904 = OpVectorShuffle %903 %903 0 1 2 
                                       f32_3 %905 = OpFNegate %904 
                                       f32_4 %906 = OpLoad %38 
                                       f32_3 %907 = OpVectorShuffle %906 %906 0 0 0 
                                       f32_3 %908 = OpFAdd %905 %907 
                                       f32_4 %909 = OpLoad %38 
                                       f32_4 %910 = OpVectorShuffle %909 %908 4 5 2 6 
                                                      OpStore %38 %910 
                                         f32 %911 = OpLoad %683 
                                       f32_3 %912 = OpCompositeConstruct %911 %911 %911 
                                       f32_4 %913 = OpLoad %38 
                                       f32_3 %914 = OpVectorShuffle %913 %913 0 1 3 
                                       f32_3 %915 = OpFMul %912 %914 
                                       f32_4 %916 = OpLoad %211 
                                       f32_3 %917 = OpVectorShuffle %916 %916 0 1 2 
                                       f32_3 %918 = OpFAdd %915 %917 
                                       f32_4 %919 = OpLoad %38 
                                       f32_4 %920 = OpVectorShuffle %919 %918 4 5 6 3 
                                                      OpStore %38 %920 
                                       f32_3 %921 = OpLoad %64 
                                       f32_4 %922 = OpLoad %38 
                                       f32_3 %923 = OpVectorShuffle %922 %922 0 1 2 
                                       f32_3 %924 = OpFMul %921 %923 
                                       f32_4 %925 = OpLoad %9 
                                       f32_3 %926 = OpVectorShuffle %925 %925 0 1 3 
                                       f32_3 %927 = OpFAdd %924 %926 
                                       f32_4 %928 = OpLoad %9 
                                       f32_4 %929 = OpVectorShuffle %928 %927 4 5 6 3 
                                                      OpStore %9 %929 
                                       f32_3 %932 = OpLoad %47 
                              Uniform f32_4* %933 = OpAccessChain %20 %66 
                                       f32_4 %934 = OpLoad %933 
                                       f32_3 %935 = OpVectorShuffle %934 %934 0 1 2 
                                       f32_3 %936 = OpFMul %932 %935 
                                       f32_4 %937 = OpLoad %9 
                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 2 
                                       f32_3 %939 = OpFAdd %936 %938 
                                       f32_4 %940 = OpLoad %931 
                                       f32_4 %941 = OpVectorShuffle %940 %939 4 5 6 3 
                                                      OpStore %931 %941 
                                 Output f32* %943 = OpAccessChain %931 %116 
                                                      OpStore %943 %132 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(4) uniform  sampler2D _posTex;
UNITY_LOCATION(5) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
float u_xlat12;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat12 = u_xlat0.y * u_xlat0.y;
    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
float u_xlat41;
float u_xlat42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat41 + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat41 = (-u_xlat4.x) + 1.0;
    u_xlat40 = u_xlat40 * u_xlat41 + u_xlat4.x;
    u_xlat41 = (-_Glossiness) + 1.0;
    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat42 = u_xlat42 + u_xlat42;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat40) * _LightColor0.xyz;
    u_xlat6.xyz = vs_TEXCOORD1.xyz;
    u_xlat6.w = 1.0;
    u_xlat7.x = dot(unity_SHAr, u_xlat6);
    u_xlat7.y = dot(unity_SHAg, u_xlat6);
    u_xlat7.z = dot(unity_SHAb, u_xlat6);
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = inversesqrt(u_xlat40);
        u_xlat7.xyz = vec3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat40 = u_xlat40 * u_xlat41;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat40);
    u_xlat42 = u_xlat7.w + -1.0;
    u_xlat42 = unity_SpecCube0_HDR.w * u_xlat42 + 1.0;
    u_xlat42 = log2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat40);
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = unity_SpecCube1_HDR.w * u_xlat40 + 1.0;
        u_xlat40 = log2(u_xlat40);
        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.y;
        u_xlat40 = exp2(u_xlat40);
        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40);
        u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz + (-u_xlat4.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
    }
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat4.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat7.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat40 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat42 = u_xlat27 * u_xlat27;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat27 = u_xlat27 * u_xlat42;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat42 = abs(u_xlat39) * u_xlat41 + u_xlat26;
    u_xlat41 = u_xlat1.x * u_xlat41 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = u_xlat1.x * u_xlat42 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat42 = u_xlat14 * u_xlat41 + (-u_xlat14);
    u_xlat14 = u_xlat42 * u_xlat14 + 1.0;
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat13.z = u_xlat39 * 3.14159274;
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat39 = max(u_xlat13.z, 0.0);
    u_xlat26 = u_xlat26 * u_xlat26 + 1.0;
    u_xlat26 = float(1.0) / u_xlat26;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat5.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat6.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat1.xyw = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat7.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 468
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %194 %234 %239 %240 %384 %422 %449 %461 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 194 
                                                      OpMemberDecorate %232 0 BuiltIn 232 
                                                      OpMemberDecorate %232 1 BuiltIn 232 
                                                      OpMemberDecorate %232 2 BuiltIn 232 
                                                      OpDecorate %232 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 239 
                                                      OpDecorate %240 Location 240 
                                                      OpDecorate vs_TEXCOORD1 Location 384 
                                                      OpDecorate vs_TEXCOORD3 Location 422 
                                                      OpDecorate vs_TEXCOORD5 Location 449 
                                                      OpDecorate vs_TEXCOORD6 Location 461 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 12 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 13 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 11 
                                         i32 %119 = OpConstant 10 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 6 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                                             %193 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %206 = OpConstant 8 
                                             %231 = OpTypeArray %6 %20 
                                             %232 = OpTypeStruct %7 %6 %231 
                                             %233 = OpTypePointer Output %232 
        Output struct {f32_4; f32; f32[1];}* %234 = OpVariable Output 
                                             %236 = OpTypePointer Output %7 
                                             %238 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %240 = OpVariable Input 
                                         i32 %243 = OpConstant 14 
                                         f32 %266 = OpConstant 3.674022E-40 
                                       f32_2 %267 = OpConstantComposite %266 %266 
                                         f32 %269 = OpConstant 3.674022E-40 
                                       f32_2 %270 = OpConstantComposite %269 %269 
                                Private f32* %274 = OpVariable Private 
                                         f32 %283 = OpConstant 3.674022E-40 
                                         f32 %284 = OpConstant 3.674022E-40 
                                       f32_2 %285 = OpConstantComposite %283 %284 
                                       f32_2 %287 = OpConstantComposite %56 %56 
                                         u32 %291 = OpConstant 2 
                                       f32_3 %309 = OpConstantComposite %56 %56 %56 
                                             %321 = OpTypeBool 
                                             %322 = OpTypePointer Private %321 
                               Private bool* %323 = OpVariable Private 
                                       f32_4 %324 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %325 = OpConstant 9 
                                             %329 = OpTypeVector %321 4 
                                             %333 = OpTypePointer Function %100 
                                         i32 %347 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                Private f32* %387 = OpVariable Private 
                                         i32 %416 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %423 = OpConstant 5 
                                       f32_2 %445 = OpConstantComposite %284 %284 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %462 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %334 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %18 %167 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %166 %171 
                                                      OpStore %164 %172 
                              Uniform f32_4* %173 = OpAccessChain %18 %167 %19 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %114 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %164 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %164 %179 
                              Uniform f32_4* %181 = OpAccessChain %18 %167 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %114 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %164 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %114 %187 
                                       f32_4 %188 = OpLoad %114 
                              Uniform f32_4* %190 = OpAccessChain %18 %167 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %164 %192 
                              Uniform f32_4* %195 = OpAccessChain %18 %167 %189 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %158 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %114 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                                      OpStore vs_TEXCOORD2 %203 
                                       f32_4 %204 = OpLoad %164 
                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
                              Uniform f32_4* %207 = OpAccessChain %18 %206 %168 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpFMul %205 %208 
                                                      OpStore %114 %209 
                              Uniform f32_4* %210 = OpAccessChain %18 %206 %19 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %164 
                                       f32_4 %213 = OpVectorShuffle %212 %212 0 0 0 0 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %114 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %114 %216 
                              Uniform f32_4* %217 = OpAccessChain %18 %206 %180 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %164 
                                       f32_4 %220 = OpVectorShuffle %219 %219 2 2 2 2 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %114 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %114 %223 
                              Uniform f32_4* %224 = OpAccessChain %18 %206 %189 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %164 
                                       f32_4 %227 = OpVectorShuffle %226 %226 3 3 3 3 
                                       f32_4 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %114 
                                       f32_4 %230 = OpFAdd %228 %229 
                                                      OpStore %114 %230 
                                       f32_4 %235 = OpLoad %114 
                               Output f32_4* %237 = OpAccessChain %234 %19 
                                                      OpStore %237 %235 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                              Uniform f32_4* %244 = OpAccessChain %18 %243 
                                       f32_4 %245 = OpLoad %244 
                                       f32_2 %246 = OpVectorShuffle %245 %245 0 1 
                                       f32_2 %247 = OpFMul %242 %246 
                              Uniform f32_4* %248 = OpAccessChain %18 %243 
                                       f32_4 %249 = OpLoad %248 
                                       f32_2 %250 = OpVectorShuffle %249 %249 2 3 
                                       f32_2 %251 = OpFAdd %247 %250 
                                                      OpStore vs_TEXCOORD0 %251 
                                Private f32* %252 = OpAccessChain %76 %20 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpExtInst %1 8 %253 
                                Private f32* %255 = OpAccessChain %164 %29 
                                                      OpStore %255 %254 
                                Private f32* %256 = OpAccessChain %164 %29 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFNegate %257 
                                         f32 %259 = OpFMul %258 %146 
                                Private f32* %260 = OpAccessChain %76 %29 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFAdd %259 %261 
                                Private f32* %263 = OpAccessChain %164 %20 
                                                      OpStore %263 %262 
                                       f32_4 %264 = OpLoad %164 
                                       f32_2 %265 = OpVectorShuffle %264 %264 0 1 
                                       f32_2 %268 = OpFMul %265 %267 
                                       f32_2 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %76 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 2 3 
                                                      OpStore %76 %273 
                                       f32_4 %275 = OpLoad %76 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_4 %277 = OpLoad %76 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                         f32 %279 = OpDot %276 %278 
                                                      OpStore %274 %279 
                                         f32 %280 = OpLoad %274 
                                       f32_2 %281 = OpCompositeConstruct %280 %280 
                                       f32_2 %282 = OpFNegate %281 
                                       f32_2 %286 = OpFMul %282 %285 
                                       f32_2 %288 = OpFAdd %286 %287 
                                       f32_4 %289 = OpLoad %164 
                                       f32_4 %290 = OpVectorShuffle %289 %288 0 1 4 5 
                                                      OpStore %164 %290 
                                Private f32* %292 = OpAccessChain %164 %291 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 31 %293 
                                                      OpStore %274 %294 
                                       f32_4 %295 = OpLoad %76 
                                       f32_2 %296 = OpVectorShuffle %295 %295 0 1 
                                         f32 %297 = OpLoad %274 
                                       f32_2 %298 = OpCompositeConstruct %297 %297 
                                       f32_2 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %164 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 2 3 
                                                      OpStore %164 %301 
                                       f32_4 %302 = OpLoad %164 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 3 
                                       f32_3 %304 = OpExtInst %1 40 %303 %110 
                                       f32_4 %305 = OpLoad %76 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %76 %306 
                                       f32_4 %307 = OpLoad %76 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %310 = OpExtInst %1 37 %308 %309 
                                       f32_4 %311 = OpLoad %76 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                                      OpStore %76 %312 
                                Private f32* %313 = OpAccessChain %76 %29 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                Private f32* %316 = OpAccessChain %76 %154 
                                                      OpStore %316 %315 
                                Private f32* %317 = OpAccessChain %9 %29 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFNegate %318 
                                Private f32* %320 = OpAccessChain %9 %154 
                                                      OpStore %320 %319 
                                Uniform f32* %326 = OpAccessChain %18 %325 
                                         f32 %327 = OpLoad %326 
                                       f32_4 %328 = OpCompositeConstruct %327 %327 %327 %327 
                                      bool_4 %330 = OpFOrdNotEqual %324 %328 
                                        bool %331 = OpAny %330 
                                                      OpStore %323 %331 
                                        bool %332 = OpLoad %323 
                                                      OpSelectionMerge %336 None 
                                                      OpBranchConditional %332 %335 %339 
                                             %335 = OpLabel 
                                       f32_4 %337 = OpLoad %76 
                                       f32_3 %338 = OpVectorShuffle %337 %337 3 2 1 
                                                      OpStore %334 %338 
                                                      OpBranch %336 
                                             %339 = OpLabel 
                                       f32_4 %340 = OpLoad %9 
                                       f32_3 %341 = OpVectorShuffle %340 %340 3 1 2 
                                                      OpStore %334 %341 
                                                      OpBranch %336 
                                             %336 = OpLabel 
                                       f32_3 %342 = OpLoad %334 
                                       f32_4 %343 = OpLoad %9 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 6 3 
                                                      OpStore %9 %344 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                              Uniform f32_4* %348 = OpAccessChain %18 %347 %19 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                         f32 %351 = OpDot %346 %350 
                                Private f32* %352 = OpAccessChain %76 %29 
                                                      OpStore %352 %351 
                                       f32_4 %353 = OpLoad %9 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                              Uniform f32_4* %355 = OpAccessChain %18 %347 %168 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                         f32 %358 = OpDot %354 %357 
                                Private f32* %359 = OpAccessChain %76 %20 
                                                      OpStore %359 %358 
                                       f32_4 %360 = OpLoad %9 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                              Uniform f32_4* %362 = OpAccessChain %18 %347 %180 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                         f32 %365 = OpDot %361 %364 
                                Private f32* %366 = OpAccessChain %76 %291 
                                                      OpStore %366 %365 
                                       f32_4 %367 = OpLoad %76 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_4 %369 = OpLoad %76 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                         f32 %371 = OpDot %368 %370 
                                Private f32* %372 = OpAccessChain %9 %29 
                                                      OpStore %372 %371 
                                Private f32* %373 = OpAccessChain %9 %29 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpExtInst %1 32 %374 
                                Private f32* %376 = OpAccessChain %9 %29 
                                                      OpStore %376 %375 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_4 %379 = OpLoad %76 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                       f32_4 %385 = OpLoad %9 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                                      OpStore vs_TEXCOORD1 %386 
                                Private f32* %388 = OpAccessChain %9 %20 
                                         f32 %389 = OpLoad %388 
                                Private f32* %390 = OpAccessChain %9 %20 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFMul %389 %391 
                                                      OpStore %387 %392 
                                Private f32* %393 = OpAccessChain %9 %29 
                                         f32 %394 = OpLoad %393 
                                Private f32* %395 = OpAccessChain %9 %29 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFMul %394 %396 
                                         f32 %398 = OpLoad %387 
                                         f32 %399 = OpFNegate %398 
                                         f32 %400 = OpFAdd %397 %399 
                                                      OpStore %387 %400 
                                       f32_4 %401 = OpLoad %9 
                                       f32_4 %402 = OpVectorShuffle %401 %401 1 2 2 0 
                                       f32_4 %403 = OpLoad %9 
                                       f32_4 %404 = OpVectorShuffle %403 %403 0 1 2 2 
                                       f32_4 %405 = OpFMul %402 %404 
                                                      OpStore %76 %405 
                              Uniform f32_4* %406 = OpAccessChain %18 %180 
                                       f32_4 %407 = OpLoad %406 
                                       f32_4 %408 = OpLoad %76 
                                         f32 %409 = OpDot %407 %408 
                                Private f32* %410 = OpAccessChain %9 %29 
                                                      OpStore %410 %409 
                              Uniform f32_4* %411 = OpAccessChain %18 %189 
                                       f32_4 %412 = OpLoad %411 
                                       f32_4 %413 = OpLoad %76 
                                         f32 %414 = OpDot %412 %413 
                                Private f32* %415 = OpAccessChain %9 %20 
                                                      OpStore %415 %414 
                              Uniform f32_4* %417 = OpAccessChain %18 %416 
                                       f32_4 %418 = OpLoad %417 
                                       f32_4 %419 = OpLoad %76 
                                         f32 %420 = OpDot %418 %419 
                                Private f32* %421 = OpAccessChain %9 %291 
                                                      OpStore %421 %420 
                              Uniform f32_4* %424 = OpAccessChain %18 %423 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                         f32 %427 = OpLoad %387 
                                       f32_3 %428 = OpCompositeConstruct %427 %427 %427 
                                       f32_3 %429 = OpFMul %426 %428 
                                       f32_4 %430 = OpLoad %9 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_3 %432 = OpFAdd %429 %431 
                                                      OpStore vs_TEXCOORD3 %432 
                                Private f32* %433 = OpAccessChain %114 %20 
                                         f32 %434 = OpLoad %433 
                                Uniform f32* %435 = OpAccessChain %18 %168 %29 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFMul %434 %436 
                                Private f32* %438 = OpAccessChain %9 %29 
                                                      OpStore %438 %437 
                                Private f32* %439 = OpAccessChain %9 %29 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpFMul %440 %284 
                                Private f32* %442 = OpAccessChain %9 %154 
                                                      OpStore %442 %441 
                                       f32_4 %443 = OpLoad %114 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 3 
                                       f32_2 %446 = OpFMul %444 %445 
                                       f32_4 %447 = OpLoad %9 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 1 5 3 
                                                      OpStore %9 %448 
                                       f32_4 %450 = OpLoad %114 
                                       f32_2 %451 = OpVectorShuffle %450 %450 2 3 
                                       f32_4 %452 = OpLoad vs_TEXCOORD5 
                                       f32_4 %453 = OpVectorShuffle %452 %451 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %453 
                                       f32_4 %454 = OpLoad %9 
                                       f32_2 %455 = OpVectorShuffle %454 %454 2 2 
                                       f32_4 %456 = OpLoad %9 
                                       f32_2 %457 = OpVectorShuffle %456 %456 0 3 
                                       f32_2 %458 = OpFAdd %455 %457 
                                       f32_4 %459 = OpLoad vs_TEXCOORD5 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %460 
                                                      OpStore vs_TEXCOORD6 %324 
                                 Output f32* %463 = OpAccessChain %234 %19 %20 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpFNegate %464 
                                 Output f32* %466 = OpAccessChain %234 %19 %20 
                                                      OpStore %466 %465 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 987
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %60 %136 %170 %220 %973 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpMemberDecorate %18 17 Offset 18 
                                                      OpMemberDecorate %18 18 Offset 18 
                                                      OpMemberDecorate %18 19 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate vs_TEXCOORD5 Location 136 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate vs_TEXCOORD3 Location 220 
                                                      OpDecorate %372 DescriptorSet 372 
                                                      OpDecorate %372 Binding 372 
                                                      OpDecorate %374 DescriptorSet 374 
                                                      OpDecorate %374 Binding 374 
                                                      OpDecorate %526 DescriptorSet 526 
                                                      OpDecorate %526 Binding 526 
                                                      OpDecorate %973 Location 973 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %17 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %10 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_4* %38 = OpVariable Private 
                                              %46 = OpTypePointer Private %10 
                               Private f32_3* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypePointer UniformConstant %48 
         UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampler 
                                              %53 = OpTypePointer UniformConstant %52 
                     UniformConstant sampler* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampledImage %48 
                                              %58 = OpTypeVector %6 2 
                                              %59 = OpTypePointer Input %58 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %64 = OpVariable Private 
                                          i32 %66 = OpConstant 19 
                                              %67 = OpTypePointer Uniform %7 
                               Private f32_4* %72 = OpVariable Private 
                                          i32 %73 = OpConstant 7 
                                          u32 %74 = OpConstant 2 
                                              %75 = OpTypePointer Uniform %6 
                                          u32 %78 = OpConstant 0 
                                          i32 %80 = OpConstant 1 
                                          u32 %83 = OpConstant 1 
                                          i32 %85 = OpConstant 2 
                                 Private f32* %89 = OpVariable Private 
                                          i32 %96 = OpConstant 6 
                                Private f32* %104 = OpVariable Private 
                                         u32 %116 = OpConstant 3 
                                         i32 %124 = OpConstant 5 
                                         f32 %132 = OpConstant 3.674022E-40 
                                         f32 %133 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                Private f32* %153 = OpVariable Private 
                                         i32 %162 = OpConstant 17 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %187 = OpVariable Private 
                                         i32 %190 = OpConstant 16 
                              Private f32_4* %195 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                         i32 %206 = OpConstant 3 
                                         i32 %212 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %227 = OpConstantComposite %132 %132 %132 
                                             %231 = OpTypeBool 
                                             %232 = OpTypePointer Private %231 
                               Private bool* %233 = OpVariable Private 
                                         i32 %234 = OpConstant 10 
                              Private f32_3* %255 = OpVariable Private 
                                         i32 %258 = OpConstant 8 
                              Private f32_3* %267 = OpVariable Private 
                                         i32 %270 = OpConstant 9 
                                             %279 = OpTypeVector %231 3 
                                             %280 = OpTypePointer Private %279 
                             Private bool_3* %281 = OpVariable Private 
                                       f32_4 %282 = OpConstantComposite %132 %132 %132 %132 
                                             %285 = OpTypeVector %231 4 
                                             %288 = OpTypePointer Function %10 
                                             %293 = OpTypePointer Function %6 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %368 = OpConstant 3.674022E-40 
                                             %370 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %371 = OpTypePointer UniformConstant %370 
      UniformConstant read_only TextureCube* %372 = OpVariable UniformConstant 
                    UniformConstant sampler* %374 = OpVariable UniformConstant 
                                             %376 = OpTypeSampledImage %370 
                                         f32 %384 = OpConstant 3.674022E-40 
                                         i32 %386 = OpConstant 11 
                               Private bool* %409 = OpVariable Private 
                                         f32 %412 = OpConstant 3.674022E-40 
                                         i32 %417 = OpConstant 14 
                                Private f32* %424 = OpVariable Private 
                              Private f32_3* %437 = OpVariable Private 
                                         i32 %440 = OpConstant 12 
                              Private f32_3* %448 = OpVariable Private 
                                         i32 %451 = OpConstant 13 
                             Private bool_3* %459 = OpVariable Private 
      UniformConstant read_only TextureCube* %526 = OpVariable UniformConstant 
                                         i32 %537 = OpConstant 15 
                                         f32 %598 = OpConstant 3.674022E-40 
                                       f32_3 %599 = OpConstantComposite %598 %598 %598 
                                         i32 %603 = OpConstant 18 
                                         f32 %618 = OpConstant 3.674022E-40 
                                       f32_3 %619 = OpConstantComposite %618 %618 %618 
                                         f32 %626 = OpConstant 3.674022E-40 
                                         f32 %650 = OpConstant 3.674022E-40 
                                Private f32* %677 = OpVariable Private 
                              Private f32_3* %696 = OpVariable Private 
                                         f32 %711 = OpConstant 3.674022E-40 
                                Private f32* %714 = OpVariable Private 
                                Private f32* %719 = OpVariable Private 
                                         f32 %762 = OpConstant 3.674022E-40 
                                         f32 %790 = OpConstant 3.674022E-40 
                                         f32 %792 = OpConstant 3.674022E-40 
                                         f32 %809 = OpConstant 3.674022E-40 
                                         f32 %814 = OpConstant 3.674022E-40 
                                         f32 %832 = OpConstant 3.674022E-40 
                               Private bool* %848 = OpVariable Private 
                                       f32_3 %912 = OpConstantComposite %133 %133 %133 
                                             %972 = OpTypePointer Output %7 
                               Output f32_4* %973 = OpVariable Output 
                                             %984 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %289 = OpVariable Function 
                               Function f32* %294 = OpVariable Function 
                               Function f32* %306 = OpVariable Function 
                               Function f32* %318 = OpVariable Function 
                             Function f32_3* %464 = OpVariable Function 
                               Function f32* %468 = OpVariable Function 
                               Function f32* %480 = OpVariable Function 
                               Function f32* %492 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %14 %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
                                                      OpStore %9 %28 
                                        f32_4 %31 = OpLoad %9 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                          f32 %35 = OpDot %32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                          f32 %37 = OpExtInst %1 32 %36 
                                                      OpStore %30 %37 
                                          f32 %39 = OpLoad %30 
                                        f32_3 %40 = OpCompositeConstruct %39 %39 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %38 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 6 3 
                                                      OpStore %38 %45 
                          read_only Texture2D %51 = OpLoad %50 
                                      sampler %55 = OpLoad %54 
                   read_only Texture2DSampled %57 = OpSampledImage %51 %55 
                                        f32_2 %61 = OpLoad vs_TEXCOORD0 
                                        f32_4 %62 = OpImageSampleImplicitLod %57 %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                                      OpStore %47 %63 
                                        f32_3 %65 = OpLoad %47 
                               Uniform f32_4* %68 = OpAccessChain %20 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                                      OpStore %64 %71 
                                 Uniform f32* %76 = OpAccessChain %20 %73 %22 %74 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %72 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %20 %73 %80 %74 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %84 = OpAccessChain %72 %83 
                                                      OpStore %84 %82 
                                 Uniform f32* %86 = OpAccessChain %20 %73 %85 %74 
                                          f32 %87 = OpLoad %86 
                                 Private f32* %88 = OpAccessChain %72 %74 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %72 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                                      OpStore %89 %94 
                                        f32_3 %95 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %97 = OpAccessChain %20 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpFAdd %95 %100 
                                       f32_4 %102 = OpLoad %72 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %72 %103 
                                       f32_4 %105 = OpLoad %72 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %106 %108 
                                                      OpStore %104 %109 
                                         f32 %110 = OpLoad %104 
                                         f32 %111 = OpExtInst %1 31 %110 
                                                      OpStore %104 %111 
                                         f32 %112 = OpLoad %89 
                                         f32 %113 = OpFNegate %112 
                                         f32 %114 = OpLoad %104 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %104 %115 
                                Uniform f32* %117 = OpAccessChain %20 %96 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpLoad %104 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %121 = OpLoad %89 
                                         f32 %122 = OpFAdd %120 %121 
                                                      OpStore %89 %122 
                                         f32 %123 = OpLoad %89 
                                Uniform f32* %125 = OpAccessChain %20 %124 %74 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFMul %123 %126 
                                Uniform f32* %128 = OpAccessChain %20 %124 %116 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFAdd %127 %129 
                                                      OpStore %89 %130 
                                         f32 %131 = OpLoad %89 
                                         f32 %134 = OpExtInst %1 43 %131 %132 %133 
                                                      OpStore %89 %134 
                                       f32_4 %137 = OpLoad vs_TEXCOORD5 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_4 %139 = OpLoad vs_TEXCOORD5 
                                       f32_2 %140 = OpVectorShuffle %139 %139 3 3 
                                       f32_2 %141 = OpFDiv %138 %140 
                                       f32_4 %142 = OpLoad %72 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %72 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_4 %149 = OpLoad %72 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_4 %151 = OpImageSampleImplicitLod %148 %150 
                                         f32 %152 = OpCompositeExtract %151 0 
                                                      OpStore %104 %152 
                                         f32 %154 = OpLoad %104 
                                         f32 %155 = OpFNegate %154 
                                         f32 %156 = OpFAdd %155 %133 
                                                      OpStore %153 %156 
                                         f32 %157 = OpLoad %89 
                                         f32 %158 = OpLoad %153 
                                         f32 %159 = OpFMul %157 %158 
                                         f32 %160 = OpLoad %104 
                                         f32 %161 = OpFAdd %159 %160 
                                                      OpStore %89 %161 
                                Uniform f32* %163 = OpAccessChain %20 %162 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFNegate %164 
                                         f32 %166 = OpFAdd %165 %133 
                                                      OpStore %104 %166 
                                       f32_4 %167 = OpLoad %38 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFNegate %168 
                                       f32_3 %171 = OpLoad vs_TEXCOORD1 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %153 %172 
                                         f32 %173 = OpLoad %153 
                                         f32 %174 = OpLoad %153 
                                         f32 %175 = OpFAdd %173 %174 
                                                      OpStore %153 %175 
                                       f32_3 %176 = OpLoad vs_TEXCOORD1 
                                         f32 %177 = OpLoad %153 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFMul %176 %179 
                                       f32_4 %181 = OpLoad %38 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFNegate %182 
                                       f32_3 %184 = OpFAdd %180 %183 
                                       f32_4 %185 = OpLoad %72 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %72 %186 
                                         f32 %188 = OpLoad %89 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                              Uniform f32_4* %191 = OpAccessChain %20 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %189 %193 
                                                      OpStore %187 %194 
                                       f32_3 %196 = OpLoad vs_TEXCOORD1 
                                       f32_4 %197 = OpLoad %195 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %195 %198 
                                Private f32* %199 = OpAccessChain %195 %116 
                                                      OpStore %199 %133 
                              Uniform f32_4* %201 = OpAccessChain %20 %85 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %195 
                                         f32 %204 = OpDot %202 %203 
                                Private f32* %205 = OpAccessChain %200 %78 
                                                      OpStore %205 %204 
                              Uniform f32_4* %207 = OpAccessChain %20 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %195 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %200 %83 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %20 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %195 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %200 %74 
                                                      OpStore %217 %216 
                                       f32_4 %218 = OpLoad %200 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %221 = OpLoad vs_TEXCOORD3 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %195 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %195 %224 
                                       f32_4 %225 = OpLoad %195 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %228 = OpExtInst %1 40 %226 %227 
                                       f32_4 %229 = OpLoad %195 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %195 %230 
                                Uniform f32* %235 = OpAccessChain %20 %234 %116 
                                         f32 %236 = OpLoad %235 
                                        bool %237 = OpFOrdLessThan %132 %236 
                                                      OpStore %233 %237 
                                        bool %238 = OpLoad %233 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %353 
                                             %239 = OpLabel 
                                       f32_4 %241 = OpLoad %72 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_4 %243 = OpLoad %72 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                         f32 %245 = OpDot %242 %244 
                                                      OpStore %89 %245 
                                         f32 %246 = OpLoad %89 
                                         f32 %247 = OpExtInst %1 32 %246 
                                                      OpStore %89 %247 
                                         f32 %248 = OpLoad %89 
                                       f32_3 %249 = OpCompositeConstruct %248 %248 %248 
                                       f32_4 %250 = OpLoad %72 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_4 %253 = OpLoad %200 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %200 %254 
                                       f32_3 %256 = OpLoad vs_TEXCOORD2 
                                       f32_3 %257 = OpFNegate %256 
                              Uniform f32_4* %259 = OpAccessChain %20 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpFAdd %257 %261 
                                                      OpStore %255 %262 
                                       f32_3 %263 = OpLoad %255 
                                       f32_4 %264 = OpLoad %200 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFDiv %263 %265 
                                                      OpStore %255 %266 
                                       f32_3 %268 = OpLoad vs_TEXCOORD2 
                                       f32_3 %269 = OpFNegate %268 
                              Uniform f32_4* %271 = OpAccessChain %20 %270 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %269 %273 
                                                      OpStore %267 %274 
                                       f32_3 %275 = OpLoad %267 
                                       f32_4 %276 = OpLoad %200 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFDiv %275 %277 
                                                      OpStore %267 %278 
                                       f32_4 %283 = OpLoad %200 
                                       f32_4 %284 = OpVectorShuffle %283 %283 0 1 2 0 
                                      bool_4 %286 = OpFOrdLessThan %282 %284 
                                      bool_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                                      OpStore %281 %287 
                                       f32_3 %290 = OpLoad %255 
                                                      OpStore %289 %290 
                               Private bool* %291 = OpAccessChain %281 %78 
                                        bool %292 = OpLoad %291 
                                                      OpSelectionMerge %296 None 
                                                      OpBranchConditional %292 %295 %299 
                                             %295 = OpLabel 
                                Private f32* %297 = OpAccessChain %255 %78 
                                         f32 %298 = OpLoad %297 
                                                      OpStore %294 %298 
                                                      OpBranch %296 
                                             %299 = OpLabel 
                                Private f32* %300 = OpAccessChain %267 %78 
                                         f32 %301 = OpLoad %300 
                                                      OpStore %294 %301 
                                                      OpBranch %296 
                                             %296 = OpLabel 
                                         f32 %302 = OpLoad %294 
                               Function f32* %303 = OpAccessChain %289 %78 
                                                      OpStore %303 %302 
                               Private bool* %304 = OpAccessChain %281 %83 
                                        bool %305 = OpLoad %304 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %305 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %255 %83 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                Private f32* %312 = OpAccessChain %267 %83 
                                         f32 %313 = OpLoad %312 
                                                      OpStore %306 %313 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %314 = OpLoad %306 
                               Function f32* %315 = OpAccessChain %289 %83 
                                                      OpStore %315 %314 
                               Private bool* %316 = OpAccessChain %281 %74 
                                        bool %317 = OpLoad %316 
                                                      OpSelectionMerge %320 None 
                                                      OpBranchConditional %317 %319 %323 
                                             %319 = OpLabel 
                                Private f32* %321 = OpAccessChain %255 %74 
                                         f32 %322 = OpLoad %321 
                                                      OpStore %318 %322 
                                                      OpBranch %320 
                                             %323 = OpLabel 
                                Private f32* %324 = OpAccessChain %267 %74 
                                         f32 %325 = OpLoad %324 
                                                      OpStore %318 %325 
                                                      OpBranch %320 
                                             %320 = OpLabel 
                                         f32 %326 = OpLoad %318 
                               Function f32* %327 = OpAccessChain %289 %74 
                                                      OpStore %327 %326 
                                       f32_3 %328 = OpLoad %289 
                                                      OpStore %255 %328 
                                Private f32* %329 = OpAccessChain %255 %83 
                                         f32 %330 = OpLoad %329 
                                Private f32* %331 = OpAccessChain %255 %78 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpExtInst %1 37 %330 %332 
                                                      OpStore %89 %333 
                                Private f32* %334 = OpAccessChain %255 %74 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpLoad %89 
                                         f32 %337 = OpExtInst %1 37 %335 %336 
                                                      OpStore %89 %337 
                                       f32_3 %338 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %339 = OpAccessChain %20 %234 
                                       f32_4 %340 = OpLoad %339 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpFNegate %341 
                                       f32_3 %343 = OpFAdd %338 %342 
                                                      OpStore %255 %343 
                                       f32_4 %344 = OpLoad %200 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                         f32 %346 = OpLoad %89 
                                       f32_3 %347 = OpCompositeConstruct %346 %346 %346 
                                       f32_3 %348 = OpFMul %345 %347 
                                       f32_3 %349 = OpLoad %255 
                                       f32_3 %350 = OpFAdd %348 %349 
                                       f32_4 %351 = OpLoad %200 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %200 %352 
                                                      OpBranch %240 
                                             %353 = OpLabel 
                                       f32_4 %354 = OpLoad %72 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %200 
                                       f32_4 %357 = OpVectorShuffle %356 %355 4 5 6 3 
                                                      OpStore %200 %357 
                                                      OpBranch %240 
                                             %240 = OpLabel 
                                         f32 %358 = OpLoad %104 
                                         f32 %359 = OpFNegate %358 
                                         f32 %361 = OpFMul %359 %360 
                                         f32 %363 = OpFAdd %361 %362 
                                                      OpStore %89 %363 
                                         f32 %364 = OpLoad %89 
                                         f32 %365 = OpLoad %104 
                                         f32 %366 = OpFMul %364 %365 
                                                      OpStore %89 %366 
                                         f32 %367 = OpLoad %89 
                                         f32 %369 = OpFMul %367 %368 
                                                      OpStore %89 %369 
                       read_only TextureCube %373 = OpLoad %372 
                                     sampler %375 = OpLoad %374 
                read_only TextureCubeSampled %377 = OpSampledImage %373 %375 
                                       f32_4 %378 = OpLoad %200 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                         f32 %380 = OpLoad %89 
                                       f32_4 %381 = OpImageSampleExplicitLod %377 %379 Lod %7 
                                                      OpStore %200 %381 
                                Private f32* %382 = OpAccessChain %200 %116 
                                         f32 %383 = OpLoad %382 
                                         f32 %385 = OpFAdd %383 %384 
                                                      OpStore %153 %385 
                                Uniform f32* %387 = OpAccessChain %20 %386 %116 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpLoad %153 
                                         f32 %390 = OpFMul %388 %389 
                                         f32 %391 = OpFAdd %390 %133 
                                                      OpStore %153 %391 
                                         f32 %392 = OpLoad %153 
                                         f32 %393 = OpExtInst %1 30 %392 
                                                      OpStore %153 %393 
                                         f32 %394 = OpLoad %153 
                                Uniform f32* %395 = OpAccessChain %20 %386 %83 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFMul %394 %396 
                                                      OpStore %153 %397 
                                         f32 %398 = OpLoad %153 
                                         f32 %399 = OpExtInst %1 29 %398 
                                                      OpStore %153 %399 
                                         f32 %400 = OpLoad %153 
                                Uniform f32* %401 = OpAccessChain %20 %386 %78 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpFMul %400 %402 
                                                      OpStore %153 %403 
                                       f32_4 %404 = OpLoad %200 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                         f32 %406 = OpLoad %153 
                                       f32_3 %407 = OpCompositeConstruct %406 %406 %406 
                                       f32_3 %408 = OpFMul %405 %407 
                                                      OpStore %255 %408 
                                Uniform f32* %410 = OpAccessChain %20 %270 %116 
                                         f32 %411 = OpLoad %410 
                                        bool %413 = OpFOrdLessThan %411 %412 
                                                      OpStore %409 %413 
                                        bool %414 = OpLoad %409 
                                                      OpSelectionMerge %416 None 
                                                      OpBranchConditional %414 %415 %416 
                                             %415 = OpLabel 
                                Uniform f32* %418 = OpAccessChain %20 %417 %116 
                                         f32 %419 = OpLoad %418 
                                        bool %420 = OpFOrdLessThan %132 %419 
                                                      OpStore %409 %420 
                                        bool %421 = OpLoad %409 
                                                      OpSelectionMerge %423 None 
                                                      OpBranchConditional %421 %422 %423 
                                             %422 = OpLabel 
                                       f32_4 %425 = OpLoad %72 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_4 %427 = OpLoad %72 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                         f32 %429 = OpDot %426 %428 
                                                      OpStore %424 %429 
                                         f32 %430 = OpLoad %424 
                                         f32 %431 = OpExtInst %1 32 %430 
                                                      OpStore %424 %431 
                                         f32 %432 = OpLoad %424 
                                       f32_3 %433 = OpCompositeConstruct %432 %432 %432 
                                       f32_4 %434 = OpLoad %72 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpFMul %433 %435 
                                                      OpStore %267 %436 
                                       f32_3 %438 = OpLoad vs_TEXCOORD2 
                                       f32_3 %439 = OpFNegate %438 
                              Uniform f32_4* %441 = OpAccessChain %20 %440 
                                       f32_4 %442 = OpLoad %441 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %439 %443 
                                                      OpStore %437 %444 
                                       f32_3 %445 = OpLoad %437 
                                       f32_3 %446 = OpLoad %267 
                                       f32_3 %447 = OpFDiv %445 %446 
                                                      OpStore %437 %447 
                                       f32_3 %449 = OpLoad vs_TEXCOORD2 
                                       f32_3 %450 = OpFNegate %449 
                              Uniform f32_4* %452 = OpAccessChain %20 %451 
                                       f32_4 %453 = OpLoad %452 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                                       f32_3 %455 = OpFAdd %450 %454 
                                                      OpStore %448 %455 
                                       f32_3 %456 = OpLoad %448 
                                       f32_3 %457 = OpLoad %267 
                                       f32_3 %458 = OpFDiv %456 %457 
                                                      OpStore %448 %458 
                                       f32_3 %460 = OpLoad %267 
                                       f32_4 %461 = OpVectorShuffle %460 %460 0 1 2 0 
                                      bool_4 %462 = OpFOrdLessThan %282 %461 
                                      bool_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                                      OpStore %459 %463 
                                       f32_3 %465 = OpLoad %437 
                                                      OpStore %464 %465 
                               Private bool* %466 = OpAccessChain %459 %78 
                                        bool %467 = OpLoad %466 
                                                      OpSelectionMerge %470 None 
                                                      OpBranchConditional %467 %469 %473 
                                             %469 = OpLabel 
                                Private f32* %471 = OpAccessChain %437 %78 
                                         f32 %472 = OpLoad %471 
                                                      OpStore %468 %472 
                                                      OpBranch %470 
                                             %473 = OpLabel 
                                Private f32* %474 = OpAccessChain %448 %78 
                                         f32 %475 = OpLoad %474 
                                                      OpStore %468 %475 
                                                      OpBranch %470 
                                             %470 = OpLabel 
                                         f32 %476 = OpLoad %468 
                               Function f32* %477 = OpAccessChain %464 %78 
                                                      OpStore %477 %476 
                               Private bool* %478 = OpAccessChain %459 %83 
                                        bool %479 = OpLoad %478 
                                                      OpSelectionMerge %482 None 
                                                      OpBranchConditional %479 %481 %485 
                                             %481 = OpLabel 
                                Private f32* %483 = OpAccessChain %437 %83 
                                         f32 %484 = OpLoad %483 
                                                      OpStore %480 %484 
                                                      OpBranch %482 
                                             %485 = OpLabel 
                                Private f32* %486 = OpAccessChain %448 %83 
                                         f32 %487 = OpLoad %486 
                                                      OpStore %480 %487 
                                                      OpBranch %482 
                                             %482 = OpLabel 
                                         f32 %488 = OpLoad %480 
                               Function f32* %489 = OpAccessChain %464 %83 
                                                      OpStore %489 %488 
                               Private bool* %490 = OpAccessChain %459 %74 
                                        bool %491 = OpLoad %490 
                                                      OpSelectionMerge %494 None 
                                                      OpBranchConditional %491 %493 %497 
                                             %493 = OpLabel 
                                Private f32* %495 = OpAccessChain %437 %74 
                                         f32 %496 = OpLoad %495 
                                                      OpStore %492 %496 
                                                      OpBranch %494 
                                             %497 = OpLabel 
                                Private f32* %498 = OpAccessChain %448 %74 
                                         f32 %499 = OpLoad %498 
                                                      OpStore %492 %499 
                                                      OpBranch %494 
                                             %494 = OpLabel 
                                         f32 %500 = OpLoad %492 
                               Function f32* %501 = OpAccessChain %464 %74 
                                                      OpStore %501 %500 
                                       f32_3 %502 = OpLoad %464 
                                                      OpStore %437 %502 
                                Private f32* %503 = OpAccessChain %437 %83 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %437 %78 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpExtInst %1 37 %504 %506 
                                                      OpStore %424 %507 
                                Private f32* %508 = OpAccessChain %437 %74 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpLoad %424 
                                         f32 %511 = OpExtInst %1 37 %509 %510 
                                                      OpStore %424 %511 
                                       f32_3 %512 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %513 = OpAccessChain %20 %417 
                                       f32_4 %514 = OpLoad %513 
                                       f32_3 %515 = OpVectorShuffle %514 %514 0 1 2 
                                       f32_3 %516 = OpFNegate %515 
                                       f32_3 %517 = OpFAdd %512 %516 
                                                      OpStore %437 %517 
                                       f32_3 %518 = OpLoad %267 
                                         f32 %519 = OpLoad %424 
                                       f32_3 %520 = OpCompositeConstruct %519 %519 %519 
                                       f32_3 %521 = OpFMul %518 %520 
                                       f32_3 %522 = OpLoad %437 
                                       f32_3 %523 = OpFAdd %521 %522 
                                       f32_4 %524 = OpLoad %72 
                                       f32_4 %525 = OpVectorShuffle %524 %523 4 5 6 3 
                                                      OpStore %72 %525 
                                                      OpBranch %423 
                                             %423 = OpLabel 
                       read_only TextureCube %527 = OpLoad %526 
                                     sampler %528 = OpLoad %374 
                read_only TextureCubeSampled %529 = OpSampledImage %527 %528 
                                       f32_4 %530 = OpLoad %72 
                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
                                         f32 %532 = OpLoad %89 
                                       f32_4 %533 = OpImageSampleExplicitLod %529 %531 Lod %7 
                                                      OpStore %72 %533 
                                Private f32* %534 = OpAccessChain %72 %116 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpFAdd %535 %384 
                                                      OpStore %89 %536 
                                Uniform f32* %538 = OpAccessChain %20 %537 %116 
                                         f32 %539 = OpLoad %538 
                                         f32 %540 = OpLoad %89 
                                         f32 %541 = OpFMul %539 %540 
                                         f32 %542 = OpFAdd %541 %133 
                                                      OpStore %89 %542 
                                         f32 %543 = OpLoad %89 
                                         f32 %544 = OpExtInst %1 30 %543 
                                                      OpStore %89 %544 
                                         f32 %545 = OpLoad %89 
                                Uniform f32* %546 = OpAccessChain %20 %537 %83 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFMul %545 %547 
                                                      OpStore %89 %548 
                                         f32 %549 = OpLoad %89 
                                         f32 %550 = OpExtInst %1 29 %549 
                                                      OpStore %89 %550 
                                         f32 %551 = OpLoad %89 
                                Uniform f32* %552 = OpAccessChain %20 %537 %78 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                                      OpStore %89 %554 
                                       f32_4 %555 = OpLoad %72 
                                       f32_3 %556 = OpVectorShuffle %555 %555 0 1 2 
                                         f32 %557 = OpLoad %89 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpFMul %556 %558 
                                       f32_4 %560 = OpLoad %72 
                                       f32_4 %561 = OpVectorShuffle %560 %559 4 5 6 3 
                                                      OpStore %72 %561 
                                         f32 %562 = OpLoad %153 
                                       f32_3 %563 = OpCompositeConstruct %562 %562 %562 
                                       f32_4 %564 = OpLoad %200 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                       f32_3 %566 = OpFMul %563 %565 
                                       f32_4 %567 = OpLoad %72 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 1 2 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %566 %569 
                                       f32_4 %571 = OpLoad %200 
                                       f32_4 %572 = OpVectorShuffle %571 %570 4 5 6 3 
                                                      OpStore %200 %572 
                              Uniform f32_4* %573 = OpAccessChain %20 %270 
                                       f32_4 %574 = OpLoad %573 
                                       f32_3 %575 = OpVectorShuffle %574 %574 3 3 3 
                                       f32_4 %576 = OpLoad %200 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 1 2 
                                       f32_3 %578 = OpFMul %575 %577 
                                       f32_4 %579 = OpLoad %72 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpFAdd %578 %580 
                                                      OpStore %255 %581 
                                                      OpBranch %416 
                                             %416 = OpLabel 
                                       f32_3 %582 = OpLoad vs_TEXCOORD1 
                                       f32_3 %583 = OpLoad vs_TEXCOORD1 
                                         f32 %584 = OpDot %582 %583 
                                                      OpStore %89 %584 
                                         f32 %585 = OpLoad %89 
                                         f32 %586 = OpExtInst %1 32 %585 
                                                      OpStore %89 %586 
                                         f32 %587 = OpLoad %89 
                                       f32_3 %588 = OpCompositeConstruct %587 %587 %587 
                                       f32_3 %589 = OpLoad vs_TEXCOORD1 
                                       f32_3 %590 = OpFMul %588 %589 
                                       f32_4 %591 = OpLoad %72 
                                       f32_4 %592 = OpVectorShuffle %591 %590 4 5 6 3 
                                                      OpStore %72 %592 
                                       f32_3 %593 = OpLoad %47 
                              Uniform f32_4* %594 = OpAccessChain %20 %66 
                                       f32_4 %595 = OpLoad %594 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 2 
                                       f32_3 %597 = OpFMul %593 %596 
                                       f32_3 %600 = OpFAdd %597 %599 
                                       f32_4 %601 = OpLoad %200 
                                       f32_4 %602 = OpVectorShuffle %601 %600 4 5 6 3 
                                                      OpStore %200 %602 
                                Uniform f32* %604 = OpAccessChain %20 %603 
                                         f32 %605 = OpLoad %604 
                                Uniform f32* %606 = OpAccessChain %20 %603 
                                         f32 %607 = OpLoad %606 
                                Uniform f32* %608 = OpAccessChain %20 %603 
                                         f32 %609 = OpLoad %608 
                                       f32_3 %610 = OpCompositeConstruct %605 %607 %609 
                                         f32 %611 = OpCompositeExtract %610 0 
                                         f32 %612 = OpCompositeExtract %610 1 
                                         f32 %613 = OpCompositeExtract %610 2 
                                       f32_3 %614 = OpCompositeConstruct %611 %612 %613 
                                       f32_4 %615 = OpLoad %200 
                                       f32_3 %616 = OpVectorShuffle %615 %615 0 1 2 
                                       f32_3 %617 = OpFMul %614 %616 
                                       f32_3 %620 = OpFAdd %617 %619 
                                       f32_4 %621 = OpLoad %200 
                                       f32_4 %622 = OpVectorShuffle %621 %620 4 5 6 3 
                                                      OpStore %200 %622 
                                Uniform f32* %623 = OpAccessChain %20 %603 
                                         f32 %624 = OpLoad %623 
                                         f32 %625 = OpFNegate %624 
                                         f32 %627 = OpFMul %625 %626 
                                         f32 %628 = OpFAdd %627 %626 
                                                      OpStore %89 %628 
                                         f32 %629 = OpLoad %89 
                                       f32_3 %630 = OpCompositeConstruct %629 %629 %629 
                                       f32_3 %631 = OpLoad %64 
                                       f32_3 %632 = OpFMul %630 %631 
                                                      OpStore %64 %632 
                                       f32_4 %633 = OpLoad %9 
                                       f32_3 %634 = OpVectorShuffle %633 %633 0 1 2 
                                         f32 %635 = OpLoad %30 
                                       f32_3 %636 = OpCompositeConstruct %635 %635 %635 
                                       f32_3 %637 = OpFMul %634 %636 
                              Uniform f32_4* %638 = OpAccessChain %20 %80 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                                       f32_3 %641 = OpFAdd %637 %640 
                                       f32_4 %642 = OpLoad %9 
                                       f32_4 %643 = OpVectorShuffle %642 %641 4 5 6 3 
                                                      OpStore %9 %643 
                                       f32_4 %644 = OpLoad %9 
                                       f32_3 %645 = OpVectorShuffle %644 %644 0 1 2 
                                       f32_4 %646 = OpLoad %9 
                                       f32_3 %647 = OpVectorShuffle %646 %646 0 1 2 
                                         f32 %648 = OpDot %645 %647 
                                                      OpStore %30 %648 
                                         f32 %649 = OpLoad %30 
                                         f32 %651 = OpExtInst %1 40 %649 %650 
                                                      OpStore %30 %651 
                                         f32 %652 = OpLoad %30 
                                         f32 %653 = OpExtInst %1 32 %652 
                                                      OpStore %30 %653 
                                         f32 %654 = OpLoad %30 
                                       f32_3 %655 = OpCompositeConstruct %654 %654 %654 
                                       f32_4 %656 = OpLoad %9 
                                       f32_3 %657 = OpVectorShuffle %656 %656 0 1 2 
                                       f32_3 %658 = OpFMul %655 %657 
                                       f32_4 %659 = OpLoad %9 
                                       f32_4 %660 = OpVectorShuffle %659 %658 4 5 6 3 
                                                      OpStore %9 %660 
                                       f32_4 %661 = OpLoad %72 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                                       f32_4 %663 = OpLoad %38 
                                       f32_3 %664 = OpVectorShuffle %663 %663 0 1 2 
                                         f32 %665 = OpDot %662 %664 
                                                      OpStore %30 %665 
                                       f32_4 %666 = OpLoad %72 
                                       f32_3 %667 = OpVectorShuffle %666 %666 0 1 2 
                              Uniform f32_4* %668 = OpAccessChain %20 %80 
                                       f32_4 %669 = OpLoad %668 
                                       f32_3 %670 = OpVectorShuffle %669 %669 0 1 2 
                                         f32 %671 = OpDot %667 %670 
                                Private f32* %672 = OpAccessChain %38 %78 
                                                      OpStore %672 %671 
                                Private f32* %673 = OpAccessChain %38 %78 
                                         f32 %674 = OpLoad %673 
                                         f32 %675 = OpExtInst %1 43 %674 %132 %133 
                                Private f32* %676 = OpAccessChain %38 %78 
                                                      OpStore %676 %675 
                                       f32_4 %678 = OpLoad %72 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_4 %680 = OpLoad %9 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 1 2 
                                         f32 %682 = OpDot %679 %681 
                                                      OpStore %677 %682 
                                         f32 %683 = OpLoad %677 
                                         f32 %684 = OpExtInst %1 43 %683 %132 %133 
                                                      OpStore %677 %684 
                              Uniform f32_4* %685 = OpAccessChain %20 %80 
                                       f32_4 %686 = OpLoad %685 
                                       f32_3 %687 = OpVectorShuffle %686 %686 0 1 2 
                                       f32_4 %688 = OpLoad %9 
                                       f32_3 %689 = OpVectorShuffle %688 %688 0 1 2 
                                         f32 %690 = OpDot %687 %689 
                                Private f32* %691 = OpAccessChain %9 %78 
                                                      OpStore %691 %690 
                                Private f32* %692 = OpAccessChain %9 %78 
                                         f32 %693 = OpLoad %692 
                                         f32 %694 = OpExtInst %1 43 %693 %132 %133 
                                Private f32* %695 = OpAccessChain %9 %78 
                                                      OpStore %695 %694 
                                Private f32* %697 = OpAccessChain %9 %78 
                                         f32 %698 = OpLoad %697 
                                Private f32* %699 = OpAccessChain %9 %78 
                                         f32 %700 = OpLoad %699 
                                         f32 %701 = OpFMul %698 %700 
                                Private f32* %702 = OpAccessChain %696 %78 
                                                      OpStore %702 %701 
                                       f32_3 %703 = OpLoad %696 
                                       f32_2 %704 = OpVectorShuffle %703 %703 0 0 
                                         f32 %705 = OpLoad %104 
                                       f32_2 %706 = OpCompositeConstruct %705 %705 
                                         f32 %707 = OpDot %704 %706 
                                Private f32* %708 = OpAccessChain %696 %78 
                                                      OpStore %708 %707 
                                Private f32* %709 = OpAccessChain %696 %78 
                                         f32 %710 = OpLoad %709 
                                         f32 %712 = OpFAdd %710 %711 
                                Private f32* %713 = OpAccessChain %696 %78 
                                                      OpStore %713 %712 
                                Private f32* %715 = OpAccessChain %38 %78 
                                         f32 %716 = OpLoad %715 
                                         f32 %717 = OpFNegate %716 
                                         f32 %718 = OpFAdd %717 %133 
                                                      OpStore %714 %718 
                                         f32 %720 = OpLoad %714 
                                         f32 %721 = OpLoad %714 
                                         f32 %722 = OpFMul %720 %721 
                                                      OpStore %719 %722 
                                         f32 %723 = OpLoad %719 
                                         f32 %724 = OpLoad %719 
                                         f32 %725 = OpFMul %723 %724 
                                                      OpStore %719 %725 
                                         f32 %726 = OpLoad %714 
                                         f32 %727 = OpLoad %719 
                                         f32 %728 = OpFMul %726 %727 
                                                      OpStore %714 %728 
                                Private f32* %729 = OpAccessChain %696 %78 
                                         f32 %730 = OpLoad %729 
                                         f32 %731 = OpLoad %714 
                                         f32 %732 = OpFMul %730 %731 
                                         f32 %733 = OpFAdd %732 %133 
                                                      OpStore %714 %733 
                                         f32 %734 = OpLoad %30 
                                         f32 %735 = OpExtInst %1 4 %734 
                                         f32 %736 = OpFNegate %735 
                                         f32 %737 = OpFAdd %736 %133 
                                                      OpStore %719 %737 
                                         f32 %738 = OpLoad %719 
                                         f32 %739 = OpLoad %719 
                                         f32 %740 = OpFMul %738 %739 
                                                      OpStore %153 %740 
                                         f32 %741 = OpLoad %153 
                                         f32 %742 = OpLoad %153 
                                         f32 %743 = OpFMul %741 %742 
                                                      OpStore %153 %743 
                                         f32 %744 = OpLoad %719 
                                         f32 %745 = OpLoad %153 
                                         f32 %746 = OpFMul %744 %745 
                                                      OpStore %719 %746 
                                Private f32* %747 = OpAccessChain %696 %78 
                                         f32 %748 = OpLoad %747 
                                         f32 %749 = OpLoad %719 
                                         f32 %750 = OpFMul %748 %749 
                                         f32 %751 = OpFAdd %750 %133 
                                Private f32* %752 = OpAccessChain %696 %78 
                                                      OpStore %752 %751 
                                Private f32* %753 = OpAccessChain %696 %78 
                                         f32 %754 = OpLoad %753 
                                         f32 %755 = OpLoad %714 
                                         f32 %756 = OpFMul %754 %755 
                                Private f32* %757 = OpAccessChain %696 %78 
                                                      OpStore %757 %756 
                                         f32 %758 = OpLoad %104 
                                         f32 %759 = OpLoad %104 
                                         f32 %760 = OpFMul %758 %759 
                                                      OpStore %714 %760 
                                         f32 %761 = OpLoad %714 
                                         f32 %763 = OpExtInst %1 40 %761 %762 
                                                      OpStore %714 %763 
                                         f32 %764 = OpLoad %714 
                                         f32 %765 = OpFNegate %764 
                                         f32 %766 = OpFAdd %765 %133 
                                                      OpStore %104 %766 
                                         f32 %767 = OpLoad %30 
                                         f32 %768 = OpExtInst %1 4 %767 
                                         f32 %769 = OpLoad %104 
                                         f32 %770 = OpFMul %768 %769 
                                         f32 %771 = OpLoad %714 
                                         f32 %772 = OpFAdd %770 %771 
                                                      OpStore %153 %772 
                                Private f32* %773 = OpAccessChain %38 %78 
                                         f32 %774 = OpLoad %773 
                                         f32 %775 = OpLoad %104 
                                         f32 %776 = OpFMul %774 %775 
                                         f32 %777 = OpLoad %714 
                                         f32 %778 = OpFAdd %776 %777 
                                                      OpStore %104 %778 
                                         f32 %779 = OpLoad %30 
                                         f32 %780 = OpExtInst %1 4 %779 
                                         f32 %781 = OpLoad %104 
                                         f32 %782 = OpFMul %780 %781 
                                                      OpStore %30 %782 
                                Private f32* %783 = OpAccessChain %38 %78 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpLoad %153 
                                         f32 %786 = OpFMul %784 %785 
                                         f32 %787 = OpLoad %30 
                                         f32 %788 = OpFAdd %786 %787 
                                                      OpStore %30 %788 
                                         f32 %789 = OpLoad %30 
                                         f32 %791 = OpFAdd %789 %790 
                                                      OpStore %30 %791 
                                         f32 %793 = OpLoad %30 
                                         f32 %794 = OpFDiv %792 %793 
                                                      OpStore %30 %794 
                                         f32 %795 = OpLoad %714 
                                         f32 %796 = OpLoad %714 
                                         f32 %797 = OpFMul %795 %796 
                                                      OpStore %104 %797 
                                         f32 %798 = OpLoad %677 
                                         f32 %799 = OpLoad %104 
                                         f32 %800 = OpFMul %798 %799 
                                         f32 %801 = OpLoad %677 
                                         f32 %802 = OpFNegate %801 
                                         f32 %803 = OpFAdd %800 %802 
                                                      OpStore %153 %803 
                                         f32 %804 = OpLoad %153 
                                         f32 %805 = OpLoad %677 
                                         f32 %806 = OpFMul %804 %805 
                                         f32 %807 = OpFAdd %806 %133 
                                                      OpStore %677 %807 
                                         f32 %808 = OpLoad %104 
                                         f32 %810 = OpFMul %808 %809 
                                                      OpStore %104 %810 
                                         f32 %811 = OpLoad %677 
                                         f32 %812 = OpLoad %677 
                                         f32 %813 = OpFMul %811 %812 
                                         f32 %815 = OpFAdd %813 %814 
                                                      OpStore %677 %815 
                                         f32 %816 = OpLoad %104 
                                         f32 %817 = OpLoad %677 
                                         f32 %818 = OpFDiv %816 %817 
                                                      OpStore %677 %818 
                                         f32 %819 = OpLoad %30 
                                         f32 %820 = OpLoad %677 
                                         f32 %821 = OpFMul %819 %820 
                                Private f32* %822 = OpAccessChain %696 %74 
                                                      OpStore %822 %821 
                                       f32_4 %823 = OpLoad %38 
                                       f32_2 %824 = OpVectorShuffle %823 %823 0 0 
                                       f32_3 %825 = OpLoad %696 
                                       f32_2 %826 = OpVectorShuffle %825 %825 0 2 
                                       f32_2 %827 = OpFMul %824 %826 
                                       f32_3 %828 = OpLoad %696 
                                       f32_3 %829 = OpVectorShuffle %828 %827 3 1 4 
                                                      OpStore %696 %829 
                                Private f32* %830 = OpAccessChain %696 %74 
                                         f32 %831 = OpLoad %830 
                                         f32 %833 = OpFMul %831 %832 
                                                      OpStore %30 %833 
                                         f32 %834 = OpLoad %30 
                                         f32 %835 = OpExtInst %1 40 %834 %132 
                                                      OpStore %30 %835 
                                         f32 %836 = OpLoad %714 
                                         f32 %837 = OpLoad %714 
                                         f32 %838 = OpFMul %836 %837 
                                         f32 %839 = OpFAdd %838 %133 
                                                      OpStore %714 %839 
                                         f32 %840 = OpLoad %714 
                                         f32 %841 = OpFDiv %133 %840 
                                                      OpStore %714 %841 
                                       f32_4 %842 = OpLoad %200 
                                       f32_3 %843 = OpVectorShuffle %842 %842 0 1 2 
                                       f32_4 %844 = OpLoad %200 
                                       f32_3 %845 = OpVectorShuffle %844 %844 0 1 2 
                                         f32 %846 = OpDot %843 %845 
                                Private f32* %847 = OpAccessChain %38 %78 
                                                      OpStore %847 %846 
                                Private f32* %849 = OpAccessChain %38 %78 
                                         f32 %850 = OpLoad %849 
                                        bool %851 = OpFOrdNotEqual %850 %132 
                                                      OpStore %848 %851 
                                        bool %852 = OpLoad %848 
                                         f32 %853 = OpSelect %852 %133 %132 
                                Private f32* %854 = OpAccessChain %38 %78 
                                                      OpStore %854 %853 
                                         f32 %855 = OpLoad %30 
                                Private f32* %856 = OpAccessChain %38 %78 
                                         f32 %857 = OpLoad %856 
                                         f32 %858 = OpFMul %855 %857 
                                                      OpStore %30 %858 
                                         f32 %859 = OpLoad %89 
                                         f32 %860 = OpFNegate %859 
                                Uniform f32* %861 = OpAccessChain %20 %162 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpFAdd %860 %862 
                                Private f32* %864 = OpAccessChain %38 %78 
                                                      OpStore %864 %863 
                                Private f32* %865 = OpAccessChain %38 %78 
                                         f32 %866 = OpLoad %865 
                                         f32 %867 = OpFAdd %866 %133 
                                Private f32* %868 = OpAccessChain %38 %78 
                                                      OpStore %868 %867 
                                Private f32* %869 = OpAccessChain %38 %78 
                                         f32 %870 = OpLoad %869 
                                         f32 %871 = OpExtInst %1 43 %870 %132 %133 
                                Private f32* %872 = OpAccessChain %38 %78 
                                                      OpStore %872 %871 
                                       f32_3 %873 = OpLoad %187 
                                       f32_3 %874 = OpLoad %696 
                                       f32_3 %875 = OpVectorShuffle %874 %874 0 0 0 
                                       f32_3 %876 = OpFMul %873 %875 
                                       f32_4 %877 = OpLoad %195 
                                       f32_3 %878 = OpVectorShuffle %877 %877 0 1 2 
                                       f32_3 %879 = OpFAdd %876 %878 
                                       f32_4 %880 = OpLoad %72 
                                       f32_4 %881 = OpVectorShuffle %880 %879 4 5 6 3 
                                                      OpStore %72 %881 
                                       f32_3 %882 = OpLoad %187 
                                         f32 %883 = OpLoad %30 
                                       f32_3 %884 = OpCompositeConstruct %883 %883 %883 
                                       f32_3 %885 = OpFMul %882 %884 
                                                      OpStore %187 %885 
                                Private f32* %886 = OpAccessChain %9 %78 
                                         f32 %887 = OpLoad %886 
                                         f32 %888 = OpFNegate %887 
                                         f32 %889 = OpFAdd %888 %133 
                                Private f32* %890 = OpAccessChain %9 %78 
                                                      OpStore %890 %889 
                                Private f32* %891 = OpAccessChain %9 %78 
                                         f32 %892 = OpLoad %891 
                                Private f32* %893 = OpAccessChain %9 %78 
                                         f32 %894 = OpLoad %893 
                                         f32 %895 = OpFMul %892 %894 
                                Private f32* %896 = OpAccessChain %696 %78 
                                                      OpStore %896 %895 
                                Private f32* %897 = OpAccessChain %696 %78 
                                         f32 %898 = OpLoad %897 
                                Private f32* %899 = OpAccessChain %696 %78 
                                         f32 %900 = OpLoad %899 
                                         f32 %901 = OpFMul %898 %900 
                                Private f32* %902 = OpAccessChain %696 %78 
                                                      OpStore %902 %901 
                                Private f32* %903 = OpAccessChain %9 %78 
                                         f32 %904 = OpLoad %903 
                                Private f32* %905 = OpAccessChain %696 %78 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFMul %904 %906 
                                Private f32* %908 = OpAccessChain %9 %78 
                                                      OpStore %908 %907 
                                       f32_4 %909 = OpLoad %200 
                                       f32_3 %910 = OpVectorShuffle %909 %909 0 1 2 
                                       f32_3 %911 = OpFNegate %910 
                                       f32_3 %913 = OpFAdd %911 %912 
                                       f32_4 %914 = OpLoad %195 
                                       f32_4 %915 = OpVectorShuffle %914 %913 4 5 6 3 
                                                      OpStore %195 %915 
                                       f32_4 %916 = OpLoad %195 
                                       f32_3 %917 = OpVectorShuffle %916 %916 0 1 2 
                                       f32_4 %918 = OpLoad %9 
                                       f32_3 %919 = OpVectorShuffle %918 %918 0 0 0 
                                       f32_3 %920 = OpFMul %917 %919 
                                       f32_4 %921 = OpLoad %200 
                                       f32_3 %922 = OpVectorShuffle %921 %921 0 1 2 
                                       f32_3 %923 = OpFAdd %920 %922 
                                       f32_4 %924 = OpLoad %9 
                                       f32_4 %925 = OpVectorShuffle %924 %923 4 5 2 6 
                                                      OpStore %9 %925 
                                       f32_4 %926 = OpLoad %9 
                                       f32_3 %927 = OpVectorShuffle %926 %926 0 1 3 
                                       f32_3 %928 = OpLoad %187 
                                       f32_3 %929 = OpFMul %927 %928 
                                       f32_4 %930 = OpLoad %9 
                                       f32_4 %931 = OpVectorShuffle %930 %929 4 5 2 6 
                                                      OpStore %9 %931 
                                       f32_3 %932 = OpLoad %64 
                                       f32_4 %933 = OpLoad %72 
                                       f32_3 %934 = OpVectorShuffle %933 %933 0 1 2 
                                       f32_3 %935 = OpFMul %932 %934 
                                       f32_4 %936 = OpLoad %9 
                                       f32_3 %937 = OpVectorShuffle %936 %936 0 1 3 
                                       f32_3 %938 = OpFAdd %935 %937 
                                       f32_4 %939 = OpLoad %9 
                                       f32_4 %940 = OpVectorShuffle %939 %938 4 5 2 6 
                                                      OpStore %9 %940 
                                       f32_3 %941 = OpLoad %255 
                                         f32 %942 = OpLoad %714 
                                       f32_3 %943 = OpCompositeConstruct %942 %942 %942 
                                       f32_3 %944 = OpFMul %941 %943 
                                                      OpStore %64 %944 
                                       f32_4 %945 = OpLoad %200 
                                       f32_3 %946 = OpVectorShuffle %945 %945 0 1 2 
                                       f32_3 %947 = OpFNegate %946 
                                       f32_4 %948 = OpLoad %38 
                                       f32_3 %949 = OpVectorShuffle %948 %948 0 0 0 
                                       f32_3 %950 = OpFAdd %947 %949 
                                       f32_4 %951 = OpLoad %38 
                                       f32_4 %952 = OpVectorShuffle %951 %950 4 5 2 6 
                                                      OpStore %38 %952 
                                         f32 %953 = OpLoad %719 
                                       f32_3 %954 = OpCompositeConstruct %953 %953 %953 
                                       f32_4 %955 = OpLoad %38 
                                       f32_3 %956 = OpVectorShuffle %955 %955 0 1 3 
                                       f32_3 %957 = OpFMul %954 %956 
                                       f32_4 %958 = OpLoad %200 
                                       f32_3 %959 = OpVectorShuffle %958 %958 0 1 2 
                                       f32_3 %960 = OpFAdd %957 %959 
                                       f32_4 %961 = OpLoad %38 
                                       f32_4 %962 = OpVectorShuffle %961 %960 4 5 6 3 
                                                      OpStore %38 %962 
                                       f32_3 %963 = OpLoad %64 
                                       f32_4 %964 = OpLoad %38 
                                       f32_3 %965 = OpVectorShuffle %964 %964 0 1 2 
                                       f32_3 %966 = OpFMul %963 %965 
                                       f32_4 %967 = OpLoad %9 
                                       f32_3 %968 = OpVectorShuffle %967 %967 0 1 3 
                                       f32_3 %969 = OpFAdd %966 %968 
                                       f32_4 %970 = OpLoad %9 
                                       f32_4 %971 = OpVectorShuffle %970 %969 4 5 6 3 
                                                      OpStore %9 %971 
                                       f32_3 %974 = OpLoad %47 
                              Uniform f32_4* %975 = OpAccessChain %20 %66 
                                       f32_4 %976 = OpLoad %975 
                                       f32_3 %977 = OpVectorShuffle %976 %976 0 1 2 
                                       f32_3 %978 = OpFMul %974 %977 
                                       f32_4 %979 = OpLoad %9 
                                       f32_3 %980 = OpVectorShuffle %979 %979 0 1 2 
                                       f32_3 %981 = OpFAdd %978 %980 
                                       f32_4 %982 = OpLoad %973 
                                       f32_4 %983 = OpVectorShuffle %982 %981 4 5 6 3 
                                                      OpStore %973 %983 
                                 Output f32* %985 = OpAccessChain %973 %116 
                                                      OpStore %985 %133 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bvec3 u_xlatb8;
vec3 u_xlat9;
bvec3 u_xlatb10;
vec3 u_xlat11;
float u_xlat12;
float u_xlat22;
float u_xlat23;
float u_xlat33;
float u_xlat34;
float u_xlat35;
bool u_xlatb35;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat34 = (-_Glossiness) + 1.0;
    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb35){
        u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat35 = inversesqrt(u_xlat35);
        u_xlat5.xyz = vec3(u_xlat35) * u_xlat4.xyz;
        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat6;
            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
            u_xlat6 = hlslcc_movcTemp;
        }
        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
        u_xlat35 = min(u_xlat6.z, u_xlat35);
        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
    } else {
        u_xlat5.xyz = u_xlat4.xyz;
    }
    u_xlat35 = (-u_xlat34) * 0.699999988 + 1.70000005;
    u_xlat35 = u_xlat34 * u_xlat35;
    u_xlat35 = u_xlat35 * 6.0;
    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat35);
    u_xlat36 = u_xlat5.w + -1.0;
    u_xlat36 = unity_SpecCube0_HDR.w * u_xlat36 + 1.0;
    u_xlat36 = log2(u_xlat36);
    u_xlat36 = u_xlat36 * unity_SpecCube0_HDR.y;
    u_xlat36 = exp2(u_xlat36);
    u_xlat36 = u_xlat36 * unity_SpecCube0_HDR.x;
    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat36);
    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb37){
        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb37){
            u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat37 = inversesqrt(u_xlat37);
            u_xlat7.xyz = vec3(u_xlat37) * u_xlat4.xyz;
            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat8;
                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
                u_xlat8 = hlslcc_movcTemp;
            }
            u_xlat37 = min(u_xlat8.y, u_xlat8.x);
            u_xlat37 = min(u_xlat8.z, u_xlat37);
            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat7.xyz * vec3(u_xlat37) + u_xlat8.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat35);
        u_xlat35 = u_xlat4.w + -1.0;
        u_xlat35 = unity_SpecCube1_HDR.w * u_xlat35 + 1.0;
        u_xlat35 = log2(u_xlat35);
        u_xlat35 = u_xlat35 * unity_SpecCube1_HDR.y;
        u_xlat35 = exp2(u_xlat35);
        u_xlat35 = u_xlat35 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
        u_xlat5.xyz = vec3(u_xlat36) * u_xlat5.xyz + (-u_xlat4.xyz);
        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat4.xyz;
    }
    u_xlat35 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * vs_TEXCOORD1.xyz;
    u_xlat5.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat35 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat11.x = u_xlat0.x * u_xlat0.x;
    u_xlat11.x = dot(u_xlat11.xx, vec2(u_xlat34));
    u_xlat11.x = u_xlat11.x + -0.5;
    u_xlat22 = (-u_xlat1.x) + 1.0;
    u_xlat23 = u_xlat22 * u_xlat22;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat22 = u_xlat22 * u_xlat23;
    u_xlat22 = u_xlat11.x * u_xlat22 + 1.0;
    u_xlat23 = -abs(u_xlat33) + 1.0;
    u_xlat36 = u_xlat23 * u_xlat23;
    u_xlat36 = u_xlat36 * u_xlat36;
    u_xlat23 = u_xlat23 * u_xlat36;
    u_xlat11.x = u_xlat11.x * u_xlat23 + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat22;
    u_xlat22 = u_xlat34 * u_xlat34;
    u_xlat22 = max(u_xlat22, 0.00200000009);
    u_xlat34 = (-u_xlat22) + 1.0;
    u_xlat36 = abs(u_xlat33) * u_xlat34 + u_xlat22;
    u_xlat34 = u_xlat1.x * u_xlat34 + u_xlat22;
    u_xlat33 = abs(u_xlat33) * u_xlat34;
    u_xlat33 = u_xlat1.x * u_xlat36 + u_xlat33;
    u_xlat33 = u_xlat33 + 9.99999975e-06;
    u_xlat33 = 0.5 / u_xlat33;
    u_xlat34 = u_xlat22 * u_xlat22;
    u_xlat36 = u_xlat12 * u_xlat34 + (-u_xlat12);
    u_xlat12 = u_xlat36 * u_xlat12 + 1.0;
    u_xlat34 = u_xlat34 * 0.318309873;
    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;
    u_xlat12 = u_xlat34 / u_xlat12;
    u_xlat33 = u_xlat33 * u_xlat12;
    u_xlat11.z = u_xlat33 * 3.14159274;
    u_xlat11.xz = u_xlat1.xx * u_xlat11.xz;
    u_xlat33 = max(u_xlat11.z, 0.0);
    u_xlat22 = u_xlat22 * u_xlat22 + 1.0;
    u_xlat22 = float(1.0) / u_xlat22;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat1.x;
    u_xlat1.x = (-u_xlat35) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
    u_xlat7.xyz = vec3(u_xlat33) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat11.x = u_xlat0.x * u_xlat0.x;
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat0.x = u_xlat0.x * u_xlat11.x;
    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat7.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat22);
    u_xlat1.xyw = (-u_xlat5.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat23) * u_xlat1.xyw + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %225 %236 %237 %373 %379 %380 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %223 0 BuiltIn 223 
                                                      OpMemberDecorate %223 1 BuiltIn 223 
                                                      OpMemberDecorate %223 2 BuiltIn 223 
                                                      OpDecorate %223 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 236 
                                                      OpDecorate %237 Location 237 
                                                      OpDecorate vs_TEXCOORD1 Location 373 
                                                      OpDecorate vs_TEXCOORD5 Location 379 
                                                      OpDecorate vs_TEXCOORD6 Location 380 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 7 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 8 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 6 
                                         i32 %119 = OpConstant 5 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 1 
                                             %168 = OpTypePointer Uniform %7 
                                         i32 %179 = OpConstant 2 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %222 = OpTypeArray %6 %20 
                                             %223 = OpTypeStruct %7 %6 %222 
                                             %224 = OpTypePointer Output %223 
        Output struct {f32_4; f32; f32[1];}* %225 = OpVariable Output 
                                             %233 = OpTypePointer Output %7 
                                             %235 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %237 = OpVariable Input 
                                         i32 %240 = OpConstant 9 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_2 %264 = OpConstantComposite %263 %263 
                                         f32 %266 = OpConstant 3.674022E-40 
                                       f32_2 %267 = OpConstantComposite %266 %266 
                                Private f32* %271 = OpVariable Private 
                                         f32 %280 = OpConstant 3.674022E-40 
                                         f32 %281 = OpConstant 3.674022E-40 
                                       f32_2 %282 = OpConstantComposite %280 %281 
                                       f32_2 %284 = OpConstantComposite %56 %56 
                                         u32 %288 = OpConstant 2 
                                       f32_3 %306 = OpConstantComposite %56 %56 %56 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                       f32_4 %321 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %322 = OpConstant 4 
                                             %326 = OpTypeVector %318 4 
                                             %330 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %381 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %331 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %169 = OpAccessChain %18 %167 %167 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpFMul %166 %170 
                                                      OpStore %164 %171 
                              Uniform f32_4* %172 = OpAccessChain %18 %167 %19 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpLoad %114 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %164 
                                       f32_4 %178 = OpFAdd %176 %177 
                                                      OpStore %164 %178 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %205 = OpAccessChain %18 %188 %167 
                                       f32_4 %206 = OpLoad %205 
                                       f32_4 %207 = OpFMul %204 %206 
                                                      OpStore %114 %207 
                              Uniform f32_4* %208 = OpAccessChain %18 %188 %19 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %164 
                                       f32_4 %211 = OpVectorShuffle %210 %210 0 0 0 0 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %114 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %114 %214 
                              Uniform f32_4* %215 = OpAccessChain %18 %188 %179 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %164 
                                       f32_4 %218 = OpVectorShuffle %217 %217 2 2 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %114 
                                       f32_4 %221 = OpFAdd %219 %220 
                                                      OpStore %114 %221 
                              Uniform f32_4* %226 = OpAccessChain %18 %188 %188 
                                       f32_4 %227 = OpLoad %226 
                                       f32_4 %228 = OpLoad %164 
                                       f32_4 %229 = OpVectorShuffle %228 %228 3 3 3 3 
                                       f32_4 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %114 
                                       f32_4 %232 = OpFAdd %230 %231 
                               Output f32_4* %234 = OpAccessChain %225 %19 
                                                      OpStore %234 %232 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                              Uniform f32_4* %241 = OpAccessChain %18 %240 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                              Uniform f32_4* %245 = OpAccessChain %18 %240 
                                       f32_4 %246 = OpLoad %245 
                                       f32_2 %247 = OpVectorShuffle %246 %246 2 3 
                                       f32_2 %248 = OpFAdd %244 %247 
                                                      OpStore vs_TEXCOORD0 %248 
                                Private f32* %249 = OpAccessChain %76 %20 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpExtInst %1 8 %250 
                                Private f32* %252 = OpAccessChain %114 %29 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %114 %29 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFNegate %254 
                                         f32 %256 = OpFMul %255 %146 
                                Private f32* %257 = OpAccessChain %76 %29 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %114 %20 
                                                      OpStore %260 %259 
                                       f32_4 %261 = OpLoad %114 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_2 %265 = OpFMul %262 %264 
                                       f32_2 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %76 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %76 %270 
                                       f32_4 %272 = OpLoad %76 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_4 %274 = OpLoad %76 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                         f32 %276 = OpDot %273 %275 
                                                      OpStore %271 %276 
                                         f32 %277 = OpLoad %271 
                                       f32_2 %278 = OpCompositeConstruct %277 %277 
                                       f32_2 %279 = OpFNegate %278 
                                       f32_2 %283 = OpFMul %279 %282 
                                       f32_2 %285 = OpFAdd %283 %284 
                                       f32_4 %286 = OpLoad %114 
                                       f32_4 %287 = OpVectorShuffle %286 %285 0 1 4 5 
                                                      OpStore %114 %287 
                                Private f32* %289 = OpAccessChain %114 %288 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpExtInst %1 31 %290 
                                                      OpStore %271 %291 
                                       f32_4 %292 = OpLoad %76 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                         f32 %294 = OpLoad %271 
                                       f32_2 %295 = OpCompositeConstruct %294 %294 
                                       f32_2 %296 = OpFMul %293 %295 
                                       f32_4 %297 = OpLoad %114 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %114 %298 
                                       f32_4 %299 = OpLoad %114 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 3 
                                       f32_3 %301 = OpExtInst %1 40 %300 %110 
                                       f32_4 %302 = OpLoad %76 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %76 %303 
                                       f32_4 %304 = OpLoad %76 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %307 = OpExtInst %1 37 %305 %306 
                                       f32_4 %308 = OpLoad %76 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %76 %309 
                                Private f32* %310 = OpAccessChain %76 %29 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                Private f32* %313 = OpAccessChain %76 %154 
                                                      OpStore %313 %312 
                                Private f32* %314 = OpAccessChain %9 %29 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFNegate %315 
                                Private f32* %317 = OpAccessChain %9 %154 
                                                      OpStore %317 %316 
                                Uniform f32* %323 = OpAccessChain %18 %322 
                                         f32 %324 = OpLoad %323 
                                       f32_4 %325 = OpCompositeConstruct %324 %324 %324 %324 
                                      bool_4 %327 = OpFOrdNotEqual %321 %325 
                                        bool %328 = OpAny %327 
                                                      OpStore %320 %328 
                                        bool %329 = OpLoad %320 
                                                      OpSelectionMerge %333 None 
                                                      OpBranchConditional %329 %332 %336 
                                             %332 = OpLabel 
                                       f32_4 %334 = OpLoad %76 
                                       f32_3 %335 = OpVectorShuffle %334 %334 3 2 1 
                                                      OpStore %331 %335 
                                                      OpBranch %333 
                                             %336 = OpLabel 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 3 1 2 
                                                      OpStore %331 %338 
                                                      OpBranch %333 
                                             %333 = OpLabel 
                                       f32_3 %339 = OpLoad %331 
                                       f32_4 %340 = OpLoad %9 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %9 %341 
                                       f32_4 %342 = OpLoad %9 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                              Uniform f32_4* %344 = OpAccessChain %18 %179 %19 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                         f32 %347 = OpDot %343 %346 
                                Private f32* %348 = OpAccessChain %76 %29 
                                                      OpStore %348 %347 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                              Uniform f32_4* %351 = OpAccessChain %18 %179 %167 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %354 = OpDot %350 %353 
                                Private f32* %355 = OpAccessChain %76 %20 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                              Uniform f32_4* %358 = OpAccessChain %18 %179 %179 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                         f32 %361 = OpDot %357 %360 
                                Private f32* %362 = OpAccessChain %76 %288 
                                                      OpStore %362 %361 
                                       f32_4 %363 = OpLoad %76 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_4 %365 = OpLoad %76 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                         f32 %367 = OpDot %364 %366 
                                Private f32* %368 = OpAccessChain %9 %29 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %9 %29 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpExtInst %1 32 %370 
                                Private f32* %372 = OpAccessChain %9 %29 
                                                      OpStore %372 %371 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_4 %376 = OpLoad %76 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                                      OpStore vs_TEXCOORD1 %378 
                                                      OpStore vs_TEXCOORD5 %321 
                                                      OpStore vs_TEXCOORD6 %321 
                                 Output f32* %382 = OpAccessChain %225 %19 %20 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpFNegate %383 
                                 Output f32* %385 = OpAccessChain %225 %19 %20 
                                                      OpStore %385 %384 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 863
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %57 %81 %849 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate vs_TEXCOORD0 Location 57 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %247 DescriptorSet 247 
                                                      OpDecorate %247 Binding 247 
                                                      OpDecorate %249 DescriptorSet 249 
                                                      OpDecorate %249 Binding 249 
                                                      OpDecorate %402 DescriptorSet 402 
                                                      OpDecorate %402 Binding 402 
                                                      OpDecorate %849 Location 849 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                                              %43 = OpTypePointer Private %10 
                               Private f32_3* %44 = OpVariable Private 
                                              %45 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %46 = OpTypePointer UniformConstant %45 
         UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
                                              %49 = OpTypeSampler 
                                              %50 = OpTypePointer UniformConstant %49 
                     UniformConstant sampler* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampledImage %45 
                                              %55 = OpTypeVector %6 2 
                                              %56 = OpTypePointer Input %55 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %61 = OpVariable Private 
                                          i32 %63 = OpConstant 13 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
                                          i32 %70 = OpConstant 11 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %77 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_4* %87 = OpVariable Private 
                                              %99 = OpTypeBool 
                                             %100 = OpTypePointer Private %99 
                               Private bool* %101 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 4 
                                             %104 = OpTypeInt 32 0 
                                         u32 %105 = OpConstant 3 
                              Private f32_4* %119 = OpVariable Private 
                              Private f32_3* %127 = OpVariable Private 
                                         i32 %130 = OpConstant 2 
                              Private f32_3* %139 = OpVariable Private 
                                         i32 %142 = OpConstant 3 
                                             %151 = OpTypeVector %99 3 
                                             %152 = OpTypePointer Private %151 
                             Private bool_3* %153 = OpVariable Private 
                                       f32_4 %154 = OpConstantComposite %102 %102 %102 %102 
                                             %157 = OpTypeVector %99 4 
                                             %160 = OpTypePointer Function %10 
                                         u32 %163 = OpConstant 0 
                                             %166 = OpTypePointer Function %6 
                                         u32 %177 = OpConstant 1 
                                         u32 %190 = OpConstant 2 
                                         f32 %235 = OpConstant 3.674022E-40 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                             %245 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %246 = OpTypePointer UniformConstant %245 
      UniformConstant read_only TextureCube* %247 = OpVariable UniformConstant 
                    UniformConstant sampler* %249 = OpVariable UniformConstant 
                                             %251 = OpTypeSampledImage %245 
                                Private f32* %257 = OpVariable Private 
                                         f32 %260 = OpConstant 3.674022E-40 
                                         i32 %262 = OpConstant 5 
                               Private bool* %285 = OpVariable Private 
                                         f32 %288 = OpConstant 3.674022E-40 
                                         i32 %293 = OpConstant 8 
                                Private f32* %300 = OpVariable Private 
                              Private f32_3* %313 = OpVariable Private 
                                         i32 %316 = OpConstant 6 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %327 = OpConstant 7 
                             Private bool_3* %335 = OpVariable Private 
      UniformConstant read_only TextureCube* %402 = OpVariable UniformConstant 
                                         i32 %413 = OpConstant 9 
                                         f32 %474 = OpConstant 3.674022E-40 
                                       f32_3 %475 = OpConstantComposite %474 %474 %474 
                                         i32 %479 = OpConstant 12 
                                         f32 %494 = OpConstant 3.674022E-40 
                                       f32_3 %495 = OpConstantComposite %494 %494 %494 
                                         f32 %502 = OpConstant 3.674022E-40 
                                         i32 %514 = OpConstant 1 
                                         f32 %527 = OpConstant 3.674022E-40 
                                Private f32* %554 = OpVariable Private 
                              Private f32_3* %573 = OpVariable Private 
                                         f32 %588 = OpConstant 3.674022E-40 
                                Private f32* %591 = OpVariable Private 
                                Private f32* %596 = OpVariable Private 
                                         f32 %639 = OpConstant 3.674022E-40 
                                         f32 %667 = OpConstant 3.674022E-40 
                                         f32 %669 = OpConstant 3.674022E-40 
                                         f32 %686 = OpConstant 3.674022E-40 
                                         f32 %691 = OpConstant 3.674022E-40 
                                         f32 %709 = OpConstant 3.674022E-40 
                               Private bool* %725 = OpVariable Private 
                                         i32 %752 = OpConstant 10 
                                       f32_3 %791 = OpConstantComposite %75 %75 %75 
                                             %848 = OpTypePointer Output %7 
                               Output f32_4* %849 = OpVariable Output 
                                             %860 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %161 = OpVariable Function 
                               Function f32* %167 = OpVariable Function 
                               Function f32* %180 = OpVariable Function 
                               Function f32* %193 = OpVariable Function 
                             Function f32_3* %340 = OpVariable Function 
                               Function f32* %344 = OpVariable Function 
                               Function f32* %356 = OpVariable Function 
                               Function f32* %368 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %48 = OpLoad %47 
                                      sampler %52 = OpLoad %51 
                   read_only Texture2DSampled %54 = OpSampledImage %48 %52 
                                        f32_2 %58 = OpLoad vs_TEXCOORD0 
                                        f32_4 %59 = OpImageSampleImplicitLod %54 %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                                      OpStore %44 %60 
                                        f32_3 %62 = OpLoad %44 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %61 %68 
                                 Uniform f32* %72 = OpAccessChain %17 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFAdd %74 %75 
                                                      OpStore %69 %76 
                                        f32_4 %78 = OpLoad %35 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad vs_TEXCOORD1 
                                          f32 %83 = OpDot %80 %82 
                                                      OpStore %77 %83 
                                          f32 %84 = OpLoad %77 
                                          f32 %85 = OpLoad %77 
                                          f32 %86 = OpFAdd %84 %85 
                                                      OpStore %77 %86 
                                        f32_3 %88 = OpLoad vs_TEXCOORD1 
                                          f32 %89 = OpLoad %77 
                                        f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                        f32_3 %91 = OpFNegate %90 
                                        f32_3 %92 = OpFMul %88 %91 
                                        f32_4 %93 = OpLoad %35 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFNegate %94 
                                        f32_3 %96 = OpFAdd %92 %95 
                                        f32_4 %97 = OpLoad %87 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %87 %98 
                                Uniform f32* %106 = OpAccessChain %17 %103 %105 
                                         f32 %107 = OpLoad %106 
                                        bool %108 = OpFOrdLessThan %102 %107 
                                                      OpStore %101 %108 
                                        bool %109 = OpLoad %101 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %228 
                                             %110 = OpLabel 
                                       f32_4 %112 = OpLoad %87 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_4 %114 = OpLoad %87 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                         f32 %116 = OpDot %113 %115 
                                                      OpStore %77 %116 
                                         f32 %117 = OpLoad %77 
                                         f32 %118 = OpExtInst %1 32 %117 
                                                      OpStore %77 %118 
                                         f32 %120 = OpLoad %77 
                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
                                       f32_4 %122 = OpLoad %87 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %119 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %119 %126 
                                       f32_3 %128 = OpLoad vs_TEXCOORD2 
                                       f32_3 %129 = OpFNegate %128 
                              Uniform f32_4* %131 = OpAccessChain %17 %130 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFAdd %129 %133 
                                                      OpStore %127 %134 
                                       f32_3 %135 = OpLoad %127 
                                       f32_4 %136 = OpLoad %119 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFDiv %135 %137 
                                                      OpStore %127 %138 
                                       f32_3 %140 = OpLoad vs_TEXCOORD2 
                                       f32_3 %141 = OpFNegate %140 
                              Uniform f32_4* %143 = OpAccessChain %17 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFAdd %141 %145 
                                                      OpStore %139 %146 
                                       f32_3 %147 = OpLoad %139 
                                       f32_4 %148 = OpLoad %119 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFDiv %147 %149 
                                                      OpStore %139 %150 
                                       f32_4 %155 = OpLoad %119 
                                       f32_4 %156 = OpVectorShuffle %155 %155 0 1 2 0 
                                      bool_4 %158 = OpFOrdLessThan %154 %156 
                                      bool_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                                      OpStore %153 %159 
                                       f32_3 %162 = OpLoad %127 
                                                      OpStore %161 %162 
                               Private bool* %164 = OpAccessChain %153 %163 
                                        bool %165 = OpLoad %164 
                                                      OpSelectionMerge %169 None 
                                                      OpBranchConditional %165 %168 %172 
                                             %168 = OpLabel 
                                Private f32* %170 = OpAccessChain %127 %163 
                                         f32 %171 = OpLoad %170 
                                                      OpStore %167 %171 
                                                      OpBranch %169 
                                             %172 = OpLabel 
                                Private f32* %173 = OpAccessChain %139 %163 
                                         f32 %174 = OpLoad %173 
                                                      OpStore %167 %174 
                                                      OpBranch %169 
                                             %169 = OpLabel 
                                         f32 %175 = OpLoad %167 
                               Function f32* %176 = OpAccessChain %161 %163 
                                                      OpStore %176 %175 
                               Private bool* %178 = OpAccessChain %153 %177 
                                        bool %179 = OpLoad %178 
                                                      OpSelectionMerge %182 None 
                                                      OpBranchConditional %179 %181 %185 
                                             %181 = OpLabel 
                                Private f32* %183 = OpAccessChain %127 %177 
                                         f32 %184 = OpLoad %183 
                                                      OpStore %180 %184 
                                                      OpBranch %182 
                                             %185 = OpLabel 
                                Private f32* %186 = OpAccessChain %139 %177 
                                         f32 %187 = OpLoad %186 
                                                      OpStore %180 %187 
                                                      OpBranch %182 
                                             %182 = OpLabel 
                                         f32 %188 = OpLoad %180 
                               Function f32* %189 = OpAccessChain %161 %177 
                                                      OpStore %189 %188 
                               Private bool* %191 = OpAccessChain %153 %190 
                                        bool %192 = OpLoad %191 
                                                      OpSelectionMerge %195 None 
                                                      OpBranchConditional %192 %194 %198 
                                             %194 = OpLabel 
                                Private f32* %196 = OpAccessChain %127 %190 
                                         f32 %197 = OpLoad %196 
                                                      OpStore %193 %197 
                                                      OpBranch %195 
                                             %198 = OpLabel 
                                Private f32* %199 = OpAccessChain %139 %190 
                                         f32 %200 = OpLoad %199 
                                                      OpStore %193 %200 
                                                      OpBranch %195 
                                             %195 = OpLabel 
                                         f32 %201 = OpLoad %193 
                               Function f32* %202 = OpAccessChain %161 %190 
                                                      OpStore %202 %201 
                                       f32_3 %203 = OpLoad %161 
                                                      OpStore %127 %203 
                                Private f32* %204 = OpAccessChain %127 %177 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %127 %163 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpExtInst %1 37 %205 %207 
                                                      OpStore %77 %208 
                                Private f32* %209 = OpAccessChain %127 %190 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpLoad %77 
                                         f32 %212 = OpExtInst %1 37 %210 %211 
                                                      OpStore %77 %212 
                                       f32_3 %213 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %214 = OpAccessChain %17 %103 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_3 %218 = OpFAdd %213 %217 
                                                      OpStore %127 %218 
                                       f32_4 %219 = OpLoad %119 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpLoad %77 
                                       f32_3 %222 = OpCompositeConstruct %221 %221 %221 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_3 %224 = OpLoad %127 
                                       f32_3 %225 = OpFAdd %223 %224 
                                       f32_4 %226 = OpLoad %119 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                                      OpStore %119 %227 
                                                      OpBranch %111 
                                             %228 = OpLabel 
                                       f32_4 %229 = OpLoad %87 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_4 %231 = OpLoad %119 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %119 %232 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                         f32 %233 = OpLoad %69 
                                         f32 %234 = OpFNegate %233 
                                         f32 %236 = OpFMul %234 %235 
                                         f32 %238 = OpFAdd %236 %237 
                                                      OpStore %77 %238 
                                         f32 %239 = OpLoad %69 
                                         f32 %240 = OpLoad %77 
                                         f32 %241 = OpFMul %239 %240 
                                                      OpStore %77 %241 
                                         f32 %242 = OpLoad %77 
                                         f32 %244 = OpFMul %242 %243 
                                                      OpStore %77 %244 
                       read_only TextureCube %248 = OpLoad %247 
                                     sampler %250 = OpLoad %249 
                read_only TextureCubeSampled %252 = OpSampledImage %248 %250 
                                       f32_4 %253 = OpLoad %119 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                         f32 %255 = OpLoad %77 
                                       f32_4 %256 = OpImageSampleExplicitLod %252 %254 Lod %7 
                                                      OpStore %119 %256 
                                Private f32* %258 = OpAccessChain %119 %105 
                                         f32 %259 = OpLoad %258 
                                         f32 %261 = OpFAdd %259 %260 
                                                      OpStore %257 %261 
                                Uniform f32* %263 = OpAccessChain %17 %262 %105 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpLoad %257 
                                         f32 %266 = OpFMul %264 %265 
                                         f32 %267 = OpFAdd %266 %75 
                                                      OpStore %257 %267 
                                         f32 %268 = OpLoad %257 
                                         f32 %269 = OpExtInst %1 30 %268 
                                                      OpStore %257 %269 
                                         f32 %270 = OpLoad %257 
                                Uniform f32* %271 = OpAccessChain %17 %262 %177 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFMul %270 %272 
                                                      OpStore %257 %273 
                                         f32 %274 = OpLoad %257 
                                         f32 %275 = OpExtInst %1 29 %274 
                                                      OpStore %257 %275 
                                         f32 %276 = OpLoad %257 
                                Uniform f32* %277 = OpAccessChain %17 %262 %163 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFMul %276 %278 
                                                      OpStore %257 %279 
                                       f32_4 %280 = OpLoad %119 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                         f32 %282 = OpLoad %257 
                                       f32_3 %283 = OpCompositeConstruct %282 %282 %282 
                                       f32_3 %284 = OpFMul %281 %283 
                                                      OpStore %127 %284 
                                Uniform f32* %286 = OpAccessChain %17 %142 %105 
                                         f32 %287 = OpLoad %286 
                                        bool %289 = OpFOrdLessThan %287 %288 
                                                      OpStore %285 %289 
                                        bool %290 = OpLoad %285 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                Uniform f32* %294 = OpAccessChain %17 %293 %105 
                                         f32 %295 = OpLoad %294 
                                        bool %296 = OpFOrdLessThan %102 %295 
                                                      OpStore %285 %296 
                                        bool %297 = OpLoad %285 
                                                      OpSelectionMerge %299 None 
                                                      OpBranchConditional %297 %298 %299 
                                             %298 = OpLabel 
                                       f32_4 %301 = OpLoad %87 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %87 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                         f32 %305 = OpDot %302 %304 
                                                      OpStore %300 %305 
                                         f32 %306 = OpLoad %300 
                                         f32 %307 = OpExtInst %1 32 %306 
                                                      OpStore %300 %307 
                                         f32 %308 = OpLoad %300 
                                       f32_3 %309 = OpCompositeConstruct %308 %308 %308 
                                       f32_4 %310 = OpLoad %87 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFMul %309 %311 
                                                      OpStore %139 %312 
                                       f32_3 %314 = OpLoad vs_TEXCOORD2 
                                       f32_3 %315 = OpFNegate %314 
                              Uniform f32_4* %317 = OpAccessChain %17 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %315 %319 
                                                      OpStore %313 %320 
                                       f32_3 %321 = OpLoad %313 
                                       f32_3 %322 = OpLoad %139 
                                       f32_3 %323 = OpFDiv %321 %322 
                                                      OpStore %313 %323 
                                       f32_3 %325 = OpLoad vs_TEXCOORD2 
                                       f32_3 %326 = OpFNegate %325 
                              Uniform f32_4* %328 = OpAccessChain %17 %327 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFAdd %326 %330 
                                                      OpStore %324 %331 
                                       f32_3 %332 = OpLoad %324 
                                       f32_3 %333 = OpLoad %139 
                                       f32_3 %334 = OpFDiv %332 %333 
                                                      OpStore %324 %334 
                                       f32_3 %336 = OpLoad %139 
                                       f32_4 %337 = OpVectorShuffle %336 %336 0 1 2 0 
                                      bool_4 %338 = OpFOrdLessThan %154 %337 
                                      bool_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                                      OpStore %335 %339 
                                       f32_3 %341 = OpLoad %313 
                                                      OpStore %340 %341 
                               Private bool* %342 = OpAccessChain %335 %163 
                                        bool %343 = OpLoad %342 
                                                      OpSelectionMerge %346 None 
                                                      OpBranchConditional %343 %345 %349 
                                             %345 = OpLabel 
                                Private f32* %347 = OpAccessChain %313 %163 
                                         f32 %348 = OpLoad %347 
                                                      OpStore %344 %348 
                                                      OpBranch %346 
                                             %349 = OpLabel 
                                Private f32* %350 = OpAccessChain %324 %163 
                                         f32 %351 = OpLoad %350 
                                                      OpStore %344 %351 
                                                      OpBranch %346 
                                             %346 = OpLabel 
                                         f32 %352 = OpLoad %344 
                               Function f32* %353 = OpAccessChain %340 %163 
                                                      OpStore %353 %352 
                               Private bool* %354 = OpAccessChain %335 %177 
                                        bool %355 = OpLoad %354 
                                                      OpSelectionMerge %358 None 
                                                      OpBranchConditional %355 %357 %361 
                                             %357 = OpLabel 
                                Private f32* %359 = OpAccessChain %313 %177 
                                         f32 %360 = OpLoad %359 
                                                      OpStore %356 %360 
                                                      OpBranch %358 
                                             %361 = OpLabel 
                                Private f32* %362 = OpAccessChain %324 %177 
                                         f32 %363 = OpLoad %362 
                                                      OpStore %356 %363 
                                                      OpBranch %358 
                                             %358 = OpLabel 
                                         f32 %364 = OpLoad %356 
                               Function f32* %365 = OpAccessChain %340 %177 
                                                      OpStore %365 %364 
                               Private bool* %366 = OpAccessChain %335 %190 
                                        bool %367 = OpLoad %366 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %367 %369 %373 
                                             %369 = OpLabel 
                                Private f32* %371 = OpAccessChain %313 %190 
                                         f32 %372 = OpLoad %371 
                                                      OpStore %368 %372 
                                                      OpBranch %370 
                                             %373 = OpLabel 
                                Private f32* %374 = OpAccessChain %324 %190 
                                         f32 %375 = OpLoad %374 
                                                      OpStore %368 %375 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %376 = OpLoad %368 
                               Function f32* %377 = OpAccessChain %340 %190 
                                                      OpStore %377 %376 
                                       f32_3 %378 = OpLoad %340 
                                                      OpStore %313 %378 
                                Private f32* %379 = OpAccessChain %313 %177 
                                         f32 %380 = OpLoad %379 
                                Private f32* %381 = OpAccessChain %313 %163 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpExtInst %1 37 %380 %382 
                                                      OpStore %300 %383 
                                Private f32* %384 = OpAccessChain %313 %190 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpLoad %300 
                                         f32 %387 = OpExtInst %1 37 %385 %386 
                                                      OpStore %300 %387 
                                       f32_3 %388 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %389 = OpAccessChain %17 %293 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFNegate %391 
                                       f32_3 %393 = OpFAdd %388 %392 
                                                      OpStore %313 %393 
                                       f32_3 %394 = OpLoad %139 
                                         f32 %395 = OpLoad %300 
                                       f32_3 %396 = OpCompositeConstruct %395 %395 %395 
                                       f32_3 %397 = OpFMul %394 %396 
                                       f32_3 %398 = OpLoad %313 
                                       f32_3 %399 = OpFAdd %397 %398 
                                       f32_4 %400 = OpLoad %87 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %87 %401 
                                                      OpBranch %299 
                                             %299 = OpLabel 
                       read_only TextureCube %403 = OpLoad %402 
                                     sampler %404 = OpLoad %249 
                read_only TextureCubeSampled %405 = OpSampledImage %403 %404 
                                       f32_4 %406 = OpLoad %87 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                         f32 %408 = OpLoad %77 
                                       f32_4 %409 = OpImageSampleExplicitLod %405 %407 Lod %7 
                                                      OpStore %87 %409 
                                Private f32* %410 = OpAccessChain %87 %105 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFAdd %411 %260 
                                                      OpStore %77 %412 
                                Uniform f32* %414 = OpAccessChain %17 %413 %105 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpLoad %77 
                                         f32 %417 = OpFMul %415 %416 
                                         f32 %418 = OpFAdd %417 %75 
                                                      OpStore %77 %418 
                                         f32 %419 = OpLoad %77 
                                         f32 %420 = OpExtInst %1 30 %419 
                                                      OpStore %77 %420 
                                         f32 %421 = OpLoad %77 
                                Uniform f32* %422 = OpAccessChain %17 %413 %177 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFMul %421 %423 
                                                      OpStore %77 %424 
                                         f32 %425 = OpLoad %77 
                                         f32 %426 = OpExtInst %1 29 %425 
                                                      OpStore %77 %426 
                                         f32 %427 = OpLoad %77 
                                Uniform f32* %428 = OpAccessChain %17 %413 %163 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                                      OpStore %77 %430 
                                       f32_4 %431 = OpLoad %87 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                         f32 %433 = OpLoad %77 
                                       f32_3 %434 = OpCompositeConstruct %433 %433 %433 
                                       f32_3 %435 = OpFMul %432 %434 
                                       f32_4 %436 = OpLoad %87 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %87 %437 
                                         f32 %438 = OpLoad %257 
                                       f32_3 %439 = OpCompositeConstruct %438 %438 %438 
                                       f32_4 %440 = OpLoad %119 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %439 %441 
                                       f32_4 %443 = OpLoad %87 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_3 %445 = OpFNegate %444 
                                       f32_3 %446 = OpFAdd %442 %445 
                                       f32_4 %447 = OpLoad %119 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %119 %448 
                              Uniform f32_4* %449 = OpAccessChain %17 %142 
                                       f32_4 %450 = OpLoad %449 
                                       f32_3 %451 = OpVectorShuffle %450 %450 3 3 3 
                                       f32_4 %452 = OpLoad %119 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                       f32_3 %454 = OpFMul %451 %453 
                                       f32_4 %455 = OpLoad %87 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpFAdd %454 %456 
                                                      OpStore %127 %457 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                       f32_3 %458 = OpLoad vs_TEXCOORD1 
                                       f32_3 %459 = OpLoad vs_TEXCOORD1 
                                         f32 %460 = OpDot %458 %459 
                                                      OpStore %77 %460 
                                         f32 %461 = OpLoad %77 
                                         f32 %462 = OpExtInst %1 32 %461 
                                                      OpStore %77 %462 
                                         f32 %463 = OpLoad %77 
                                       f32_3 %464 = OpCompositeConstruct %463 %463 %463 
                                       f32_3 %465 = OpLoad vs_TEXCOORD1 
                                       f32_3 %466 = OpFMul %464 %465 
                                       f32_4 %467 = OpLoad %87 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %87 %468 
                                       f32_3 %469 = OpLoad %44 
                              Uniform f32_4* %470 = OpAccessChain %17 %63 
                                       f32_4 %471 = OpLoad %470 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFMul %469 %472 
                                       f32_3 %476 = OpFAdd %473 %475 
                                       f32_4 %477 = OpLoad %119 
                                       f32_4 %478 = OpVectorShuffle %477 %476 4 5 6 3 
                                                      OpStore %119 %478 
                                Uniform f32* %480 = OpAccessChain %17 %479 
                                         f32 %481 = OpLoad %480 
                                Uniform f32* %482 = OpAccessChain %17 %479 
                                         f32 %483 = OpLoad %482 
                                Uniform f32* %484 = OpAccessChain %17 %479 
                                         f32 %485 = OpLoad %484 
                                       f32_3 %486 = OpCompositeConstruct %481 %483 %485 
                                         f32 %487 = OpCompositeExtract %486 0 
                                         f32 %488 = OpCompositeExtract %486 1 
                                         f32 %489 = OpCompositeExtract %486 2 
                                       f32_3 %490 = OpCompositeConstruct %487 %488 %489 
                                       f32_4 %491 = OpLoad %119 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFMul %490 %492 
                                       f32_3 %496 = OpFAdd %493 %495 
                                       f32_4 %497 = OpLoad %119 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
                                                      OpStore %119 %498 
                                Uniform f32* %499 = OpAccessChain %17 %479 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFNegate %500 
                                         f32 %503 = OpFMul %501 %502 
                                         f32 %504 = OpFAdd %503 %502 
                                                      OpStore %77 %504 
                                         f32 %505 = OpLoad %77 
                                       f32_3 %506 = OpCompositeConstruct %505 %505 %505 
                                       f32_3 %507 = OpLoad %61 
                                       f32_3 %508 = OpFMul %506 %507 
                                                      OpStore %61 %508 
                                       f32_4 %509 = OpLoad %9 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                         f32 %511 = OpLoad %27 
                                       f32_3 %512 = OpCompositeConstruct %511 %511 %511 
                                       f32_3 %513 = OpFMul %510 %512 
                              Uniform f32_4* %515 = OpAccessChain %17 %514 
                                       f32_4 %516 = OpLoad %515 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpFAdd %513 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %9 %520 
                                       f32_4 %521 = OpLoad %9 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_4 %523 = OpLoad %9 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                         f32 %525 = OpDot %522 %524 
                                                      OpStore %27 %525 
                                         f32 %526 = OpLoad %27 
                                         f32 %528 = OpExtInst %1 40 %526 %527 
                                                      OpStore %27 %528 
                                         f32 %529 = OpLoad %27 
                                         f32 %530 = OpExtInst %1 32 %529 
                                                      OpStore %27 %530 
                                         f32 %531 = OpLoad %27 
                                       f32_3 %532 = OpCompositeConstruct %531 %531 %531 
                                       f32_4 %533 = OpLoad %9 
                                       f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                       f32_3 %535 = OpFMul %532 %534 
                                       f32_4 %536 = OpLoad %9 
                                       f32_4 %537 = OpVectorShuffle %536 %535 4 5 6 3 
                                                      OpStore %9 %537 
                                       f32_4 %538 = OpLoad %87 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_4 %540 = OpLoad %35 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                         f32 %542 = OpDot %539 %541 
                                                      OpStore %27 %542 
                                       f32_4 %543 = OpLoad %87 
                                       f32_3 %544 = OpVectorShuffle %543 %543 0 1 2 
                              Uniform f32_4* %545 = OpAccessChain %17 %514 
                                       f32_4 %546 = OpLoad %545 
                                       f32_3 %547 = OpVectorShuffle %546 %546 0 1 2 
                                         f32 %548 = OpDot %544 %547 
                                Private f32* %549 = OpAccessChain %35 %163 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %35 %163 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpExtInst %1 43 %551 %102 %75 
                                Private f32* %553 = OpAccessChain %35 %163 
                                                      OpStore %553 %552 
                                       f32_4 %555 = OpLoad %87 
                                       f32_3 %556 = OpVectorShuffle %555 %555 0 1 2 
                                       f32_4 %557 = OpLoad %9 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                         f32 %559 = OpDot %556 %558 
                                                      OpStore %554 %559 
                                         f32 %560 = OpLoad %554 
                                         f32 %561 = OpExtInst %1 43 %560 %102 %75 
                                                      OpStore %554 %561 
                              Uniform f32_4* %562 = OpAccessChain %17 %514 
                                       f32_4 %563 = OpLoad %562 
                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
                                       f32_4 %565 = OpLoad %9 
                                       f32_3 %566 = OpVectorShuffle %565 %565 0 1 2 
                                         f32 %567 = OpDot %564 %566 
                                Private f32* %568 = OpAccessChain %9 %163 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %9 %163 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpExtInst %1 43 %570 %102 %75 
                                Private f32* %572 = OpAccessChain %9 %163 
                                                      OpStore %572 %571 
                                Private f32* %574 = OpAccessChain %9 %163 
                                         f32 %575 = OpLoad %574 
                                Private f32* %576 = OpAccessChain %9 %163 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpFMul %575 %577 
                                Private f32* %579 = OpAccessChain %573 %163 
                                                      OpStore %579 %578 
                                       f32_3 %580 = OpLoad %573 
                                       f32_2 %581 = OpVectorShuffle %580 %580 0 0 
                                         f32 %582 = OpLoad %69 
                                       f32_2 %583 = OpCompositeConstruct %582 %582 
                                         f32 %584 = OpDot %581 %583 
                                Private f32* %585 = OpAccessChain %573 %163 
                                                      OpStore %585 %584 
                                Private f32* %586 = OpAccessChain %573 %163 
                                         f32 %587 = OpLoad %586 
                                         f32 %589 = OpFAdd %587 %588 
                                Private f32* %590 = OpAccessChain %573 %163 
                                                      OpStore %590 %589 
                                Private f32* %592 = OpAccessChain %35 %163 
                                         f32 %593 = OpLoad %592 
                                         f32 %594 = OpFNegate %593 
                                         f32 %595 = OpFAdd %594 %75 
                                                      OpStore %591 %595 
                                         f32 %597 = OpLoad %591 
                                         f32 %598 = OpLoad %591 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %596 %599 
                                         f32 %600 = OpLoad %596 
                                         f32 %601 = OpLoad %596 
                                         f32 %602 = OpFMul %600 %601 
                                                      OpStore %596 %602 
                                         f32 %603 = OpLoad %591 
                                         f32 %604 = OpLoad %596 
                                         f32 %605 = OpFMul %603 %604 
                                                      OpStore %591 %605 
                                Private f32* %606 = OpAccessChain %573 %163 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpLoad %591 
                                         f32 %609 = OpFMul %607 %608 
                                         f32 %610 = OpFAdd %609 %75 
                                                      OpStore %591 %610 
                                         f32 %611 = OpLoad %27 
                                         f32 %612 = OpExtInst %1 4 %611 
                                         f32 %613 = OpFNegate %612 
                                         f32 %614 = OpFAdd %613 %75 
                                                      OpStore %596 %614 
                                         f32 %615 = OpLoad %596 
                                         f32 %616 = OpLoad %596 
                                         f32 %617 = OpFMul %615 %616 
                                                      OpStore %257 %617 
                                         f32 %618 = OpLoad %257 
                                         f32 %619 = OpLoad %257 
                                         f32 %620 = OpFMul %618 %619 
                                                      OpStore %257 %620 
                                         f32 %621 = OpLoad %596 
                                         f32 %622 = OpLoad %257 
                                         f32 %623 = OpFMul %621 %622 
                                                      OpStore %596 %623 
                                Private f32* %624 = OpAccessChain %573 %163 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpLoad %596 
                                         f32 %627 = OpFMul %625 %626 
                                         f32 %628 = OpFAdd %627 %75 
                                Private f32* %629 = OpAccessChain %573 %163 
                                                      OpStore %629 %628 
                                Private f32* %630 = OpAccessChain %573 %163 
                                         f32 %631 = OpLoad %630 
                                         f32 %632 = OpLoad %591 
                                         f32 %633 = OpFMul %631 %632 
                                Private f32* %634 = OpAccessChain %573 %163 
                                                      OpStore %634 %633 
                                         f32 %635 = OpLoad %69 
                                         f32 %636 = OpLoad %69 
                                         f32 %637 = OpFMul %635 %636 
                                                      OpStore %591 %637 
                                         f32 %638 = OpLoad %591 
                                         f32 %640 = OpExtInst %1 40 %638 %639 
                                                      OpStore %591 %640 
                                         f32 %641 = OpLoad %591 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFAdd %642 %75 
                                                      OpStore %69 %643 
                                         f32 %644 = OpLoad %27 
                                         f32 %645 = OpExtInst %1 4 %644 
                                         f32 %646 = OpLoad %69 
                                         f32 %647 = OpFMul %645 %646 
                                         f32 %648 = OpLoad %591 
                                         f32 %649 = OpFAdd %647 %648 
                                                      OpStore %257 %649 
                                Private f32* %650 = OpAccessChain %35 %163 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpLoad %69 
                                         f32 %653 = OpFMul %651 %652 
                                         f32 %654 = OpLoad %591 
                                         f32 %655 = OpFAdd %653 %654 
                                                      OpStore %69 %655 
                                         f32 %656 = OpLoad %27 
                                         f32 %657 = OpExtInst %1 4 %656 
                                         f32 %658 = OpLoad %69 
                                         f32 %659 = OpFMul %657 %658 
                                                      OpStore %27 %659 
                                Private f32* %660 = OpAccessChain %35 %163 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %257 
                                         f32 %663 = OpFMul %661 %662 
                                         f32 %664 = OpLoad %27 
                                         f32 %665 = OpFAdd %663 %664 
                                                      OpStore %27 %665 
                                         f32 %666 = OpLoad %27 
                                         f32 %668 = OpFAdd %666 %667 
                                                      OpStore %27 %668 
                                         f32 %670 = OpLoad %27 
                                         f32 %671 = OpFDiv %669 %670 
                                                      OpStore %27 %671 
                                         f32 %672 = OpLoad %591 
                                         f32 %673 = OpLoad %591 
                                         f32 %674 = OpFMul %672 %673 
                                                      OpStore %69 %674 
                                         f32 %675 = OpLoad %554 
                                         f32 %676 = OpLoad %69 
                                         f32 %677 = OpFMul %675 %676 
                                         f32 %678 = OpLoad %554 
                                         f32 %679 = OpFNegate %678 
                                         f32 %680 = OpFAdd %677 %679 
                                                      OpStore %257 %680 
                                         f32 %681 = OpLoad %257 
                                         f32 %682 = OpLoad %554 
                                         f32 %683 = OpFMul %681 %682 
                                         f32 %684 = OpFAdd %683 %75 
                                                      OpStore %554 %684 
                                         f32 %685 = OpLoad %69 
                                         f32 %687 = OpFMul %685 %686 
                                                      OpStore %69 %687 
                                         f32 %688 = OpLoad %554 
                                         f32 %689 = OpLoad %554 
                                         f32 %690 = OpFMul %688 %689 
                                         f32 %692 = OpFAdd %690 %691 
                                                      OpStore %554 %692 
                                         f32 %693 = OpLoad %69 
                                         f32 %694 = OpLoad %554 
                                         f32 %695 = OpFDiv %693 %694 
                                                      OpStore %554 %695 
                                         f32 %696 = OpLoad %27 
                                         f32 %697 = OpLoad %554 
                                         f32 %698 = OpFMul %696 %697 
                                Private f32* %699 = OpAccessChain %573 %190 
                                                      OpStore %699 %698 
                                       f32_4 %700 = OpLoad %35 
                                       f32_2 %701 = OpVectorShuffle %700 %700 0 0 
                                       f32_3 %702 = OpLoad %573 
                                       f32_2 %703 = OpVectorShuffle %702 %702 0 2 
                                       f32_2 %704 = OpFMul %701 %703 
                                       f32_3 %705 = OpLoad %573 
                                       f32_3 %706 = OpVectorShuffle %705 %704 3 1 4 
                                                      OpStore %573 %706 
                                Private f32* %707 = OpAccessChain %573 %190 
                                         f32 %708 = OpLoad %707 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %27 %710 
                                         f32 %711 = OpLoad %27 
                                         f32 %712 = OpExtInst %1 40 %711 %102 
                                                      OpStore %27 %712 
                                         f32 %713 = OpLoad %591 
                                         f32 %714 = OpLoad %591 
                                         f32 %715 = OpFMul %713 %714 
                                         f32 %716 = OpFAdd %715 %75 
                                                      OpStore %591 %716 
                                         f32 %717 = OpLoad %591 
                                         f32 %718 = OpFDiv %75 %717 
                                                      OpStore %591 %718 
                                       f32_4 %719 = OpLoad %119 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 1 2 
                                       f32_4 %721 = OpLoad %119 
                                       f32_3 %722 = OpVectorShuffle %721 %721 0 1 2 
                                         f32 %723 = OpDot %720 %722 
                                Private f32* %724 = OpAccessChain %35 %163 
                                                      OpStore %724 %723 
                                Private f32* %726 = OpAccessChain %35 %163 
                                         f32 %727 = OpLoad %726 
                                        bool %728 = OpFOrdNotEqual %727 %102 
                                                      OpStore %725 %728 
                                        bool %729 = OpLoad %725 
                                         f32 %730 = OpSelect %729 %75 %102 
                                Private f32* %731 = OpAccessChain %35 %163 
                                                      OpStore %731 %730 
                                         f32 %732 = OpLoad %27 
                                Private f32* %733 = OpAccessChain %35 %163 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpFMul %732 %734 
                                                      OpStore %27 %735 
                                         f32 %736 = OpLoad %77 
                                         f32 %737 = OpFNegate %736 
                                Uniform f32* %738 = OpAccessChain %17 %70 
                                         f32 %739 = OpLoad %738 
                                         f32 %740 = OpFAdd %737 %739 
                                Private f32* %741 = OpAccessChain %35 %163 
                                                      OpStore %741 %740 
                                Private f32* %742 = OpAccessChain %35 %163 
                                         f32 %743 = OpLoad %742 
                                         f32 %744 = OpFAdd %743 %75 
                                Private f32* %745 = OpAccessChain %35 %163 
                                                      OpStore %745 %744 
                                Private f32* %746 = OpAccessChain %35 %163 
                                         f32 %747 = OpLoad %746 
                                         f32 %748 = OpExtInst %1 43 %747 %102 %75 
                                Private f32* %749 = OpAccessChain %35 %163 
                                                      OpStore %749 %748 
                                       f32_3 %750 = OpLoad %573 
                                       f32_3 %751 = OpVectorShuffle %750 %750 0 0 0 
                              Uniform f32_4* %753 = OpAccessChain %17 %752 
                                       f32_4 %754 = OpLoad %753 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %751 %755 
                                       f32_4 %757 = OpLoad %87 
                                       f32_4 %758 = OpVectorShuffle %757 %756 4 5 6 3 
                                                      OpStore %87 %758 
                                         f32 %759 = OpLoad %27 
                                       f32_3 %760 = OpCompositeConstruct %759 %759 %759 
                              Uniform f32_4* %761 = OpAccessChain %17 %752 
                                       f32_4 %762 = OpLoad %761 
                                       f32_3 %763 = OpVectorShuffle %762 %762 0 1 2 
                                       f32_3 %764 = OpFMul %760 %763 
                                                      OpStore %139 %764 
                                Private f32* %765 = OpAccessChain %9 %163 
                                         f32 %766 = OpLoad %765 
                                         f32 %767 = OpFNegate %766 
                                         f32 %768 = OpFAdd %767 %75 
                                Private f32* %769 = OpAccessChain %9 %163 
                                                      OpStore %769 %768 
                                Private f32* %770 = OpAccessChain %9 %163 
                                         f32 %771 = OpLoad %770 
                                Private f32* %772 = OpAccessChain %9 %163 
                                         f32 %773 = OpLoad %772 
                                         f32 %774 = OpFMul %771 %773 
                                Private f32* %775 = OpAccessChain %573 %163 
                                                      OpStore %775 %774 
                                Private f32* %776 = OpAccessChain %573 %163 
                                         f32 %777 = OpLoad %776 
                                Private f32* %778 = OpAccessChain %573 %163 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFMul %777 %779 
                                Private f32* %781 = OpAccessChain %573 %163 
                                                      OpStore %781 %780 
                                Private f32* %782 = OpAccessChain %9 %163 
                                         f32 %783 = OpLoad %782 
                                Private f32* %784 = OpAccessChain %573 %163 
                                         f32 %785 = OpLoad %784 
                                         f32 %786 = OpFMul %783 %785 
                                Private f32* %787 = OpAccessChain %9 %163 
                                                      OpStore %787 %786 
                                       f32_4 %788 = OpLoad %119 
                                       f32_3 %789 = OpVectorShuffle %788 %788 0 1 2 
                                       f32_3 %790 = OpFNegate %789 
                                       f32_3 %792 = OpFAdd %790 %791 
                                                      OpStore %313 %792 
                                       f32_3 %793 = OpLoad %313 
                                       f32_4 %794 = OpLoad %9 
                                       f32_3 %795 = OpVectorShuffle %794 %794 0 0 0 
                                       f32_3 %796 = OpFMul %793 %795 
                                       f32_4 %797 = OpLoad %119 
                                       f32_3 %798 = OpVectorShuffle %797 %797 0 1 2 
                                       f32_3 %799 = OpFAdd %796 %798 
                                       f32_4 %800 = OpLoad %9 
                                       f32_4 %801 = OpVectorShuffle %800 %799 4 5 2 6 
                                                      OpStore %9 %801 
                                       f32_4 %802 = OpLoad %9 
                                       f32_3 %803 = OpVectorShuffle %802 %802 0 1 3 
                                       f32_3 %804 = OpLoad %139 
                                       f32_3 %805 = OpFMul %803 %804 
                                       f32_4 %806 = OpLoad %9 
                                       f32_4 %807 = OpVectorShuffle %806 %805 4 5 2 6 
                                                      OpStore %9 %807 
                                       f32_3 %808 = OpLoad %61 
                                       f32_4 %809 = OpLoad %87 
                                       f32_3 %810 = OpVectorShuffle %809 %809 0 1 2 
                                       f32_3 %811 = OpFMul %808 %810 
                                       f32_4 %812 = OpLoad %9 
                                       f32_3 %813 = OpVectorShuffle %812 %812 0 1 3 
                                       f32_3 %814 = OpFAdd %811 %813 
                                       f32_4 %815 = OpLoad %9 
                                       f32_4 %816 = OpVectorShuffle %815 %814 4 5 2 6 
                                                      OpStore %9 %816 
                                       f32_3 %817 = OpLoad %127 
                                         f32 %818 = OpLoad %591 
                                       f32_3 %819 = OpCompositeConstruct %818 %818 %818 
                                       f32_3 %820 = OpFMul %817 %819 
                                                      OpStore %61 %820 
                                       f32_4 %821 = OpLoad %119 
                                       f32_3 %822 = OpVectorShuffle %821 %821 0 1 2 
                                       f32_3 %823 = OpFNegate %822 
                                       f32_4 %824 = OpLoad %35 
                                       f32_3 %825 = OpVectorShuffle %824 %824 0 0 0 
                                       f32_3 %826 = OpFAdd %823 %825 
                                       f32_4 %827 = OpLoad %35 
                                       f32_4 %828 = OpVectorShuffle %827 %826 4 5 2 6 
                                                      OpStore %35 %828 
                                         f32 %829 = OpLoad %596 
                                       f32_3 %830 = OpCompositeConstruct %829 %829 %829 
                                       f32_4 %831 = OpLoad %35 
                                       f32_3 %832 = OpVectorShuffle %831 %831 0 1 3 
                                       f32_3 %833 = OpFMul %830 %832 
                                       f32_4 %834 = OpLoad %119 
                                       f32_3 %835 = OpVectorShuffle %834 %834 0 1 2 
                                       f32_3 %836 = OpFAdd %833 %835 
                                       f32_4 %837 = OpLoad %35 
                                       f32_4 %838 = OpVectorShuffle %837 %836 4 5 6 3 
                                                      OpStore %35 %838 
                                       f32_3 %839 = OpLoad %61 
                                       f32_4 %840 = OpLoad %35 
                                       f32_3 %841 = OpVectorShuffle %840 %840 0 1 2 
                                       f32_3 %842 = OpFMul %839 %841 
                                       f32_4 %843 = OpLoad %9 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 3 
                                       f32_3 %845 = OpFAdd %842 %844 
                                       f32_4 %846 = OpLoad %9 
                                       f32_4 %847 = OpVectorShuffle %846 %845 4 5 6 3 
                                                      OpStore %9 %847 
                                       f32_3 %850 = OpLoad %44 
                              Uniform f32_4* %851 = OpAccessChain %17 %63 
                                       f32_4 %852 = OpLoad %851 
                                       f32_3 %853 = OpVectorShuffle %852 %852 0 1 2 
                                       f32_3 %854 = OpFMul %850 %853 
                                       f32_4 %855 = OpLoad %9 
                                       f32_3 %856 = OpVectorShuffle %855 %855 0 1 2 
                                       f32_3 %857 = OpFAdd %854 %856 
                                       f32_4 %858 = OpLoad %849 
                                       f32_4 %859 = OpVectorShuffle %858 %857 4 5 6 3 
                                                      OpStore %849 %859 
                                 Output f32* %861 = OpAccessChain %849 %105 
                                                      OpStore %861 %75 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat11;
float u_xlat15;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5 = float(_numOfFrames);
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat5;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat0.x = u_xlat5 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat11)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat11 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat11);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat1 = (-u_xlat2.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat0.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat0.xxxx + u_xlat4;
    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat2 * u_xlat1;
    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * u_xlat0.y;
    u_xlat15 = u_xlat0.x * u_xlat0.x + (-u_xlat15);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat2);
    u_xlat0.y = dot(unity_SHBg, u_xlat2);
    u_xlat0.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat37 = (-_Glossiness) + 1.0;
    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz;
    u_xlat5.w = 1.0;
    u_xlat6.x = dot(unity_SHAr, u_xlat5);
    u_xlat6.y = dot(unity_SHAg, u_xlat5);
    u_xlat6.z = dot(unity_SHAb, u_xlat5);
    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb38){
        u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat38 = inversesqrt(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat38) * u_xlat4.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
        u_xlat38 = min(u_xlat7.z, u_xlat38);
        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat38 = (-u_xlat37) * 0.699999988 + 1.70000005;
    u_xlat38 = u_xlat37 * u_xlat38;
    u_xlat38 = u_xlat38 * 6.0;
    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat38);
    u_xlat39 = u_xlat6.w + -1.0;
    u_xlat39 = unity_SpecCube0_HDR.w * u_xlat39 + 1.0;
    u_xlat39 = log2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.y;
    u_xlat39 = exp2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat39);
    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = inversesqrt(u_xlat40);
            u_xlat8.xyz = vec3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat38);
        u_xlat38 = u_xlat4.w + -1.0;
        u_xlat38 = unity_SpecCube1_HDR.w * u_xlat38 + 1.0;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.y;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz + (-u_xlat4.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
    }
    u_xlat38 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat4.xyz = vec3(u_xlat38) * vs_TEXCOORD1.xyz;
    u_xlat6.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat38 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat38) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat37));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat39 = u_xlat25 * u_xlat25;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat25 = u_xlat25 * u_xlat39;
    u_xlat12.x = u_xlat12.x * u_xlat25 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat37 * u_xlat37;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat37 = (-u_xlat24) + 1.0;
    u_xlat39 = abs(u_xlat36) * u_xlat37 + u_xlat24;
    u_xlat37 = u_xlat1.x * u_xlat37 + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat37;
    u_xlat36 = u_xlat1.x * u_xlat39 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat37 = u_xlat24 * u_xlat24;
    u_xlat39 = u_xlat13 * u_xlat37 + (-u_xlat13);
    u_xlat13 = u_xlat39 * u_xlat13 + 1.0;
    u_xlat37 = u_xlat37 * 0.318309873;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat13 = u_xlat37 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat12.z = u_xlat36 * 3.14159274;
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat36 = max(u_xlat12.z, 0.0);
    u_xlat24 = u_xlat24 * u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat36 * u_xlat1.x;
    u_xlat1.x = (-u_xlat38) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat5.xyz;
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat8.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat24);
    u_xlat1.xyw = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyw + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 568
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %69 %160 %230 %241 %242 %387 %390 %554 %560 %561 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpMemberDecorate %18 17 Offset 18 
                                                      OpMemberDecorate %18 18 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %69 Location 69 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %160 Location 160 
                                                      OpMemberDecorate %228 0 BuiltIn 228 
                                                      OpMemberDecorate %228 1 BuiltIn 228 
                                                      OpMemberDecorate %228 2 BuiltIn 228 
                                                      OpDecorate %228 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 241 
                                                      OpDecorate %242 Location 242 
                                                      OpDecorate vs_TEXCOORD1 Location 387 
                                                      OpDecorate vs_TEXCOORD2 Location 390 
                                                      OpDecorate vs_TEXCOORD3 Location 554 
                                                      OpDecorate vs_TEXCOORD5 Location 560 
                                                      OpDecorate vs_TEXCOORD6 Location 561 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeInt 32 1 
                                              %18 = OpTypeStruct %7 %7 %7 %7 %7 %12 %7 %7 %7 %7 %14 %15 %16 %6 %6 %6 %6 %17 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %20 = OpVariable Uniform 
                                          i32 %21 = OpConstant 0 
                                          u32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %6 
                                          i32 %27 = OpConstant 16 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                 Private f32* %38 = OpVariable Private 
                                          i32 %39 = OpConstant 17 
                                              %40 = OpTypePointer Uniform %17 
                                          f32 %58 = OpConstant 3.674022E-40 
                                              %68 = OpTypePointer Input %7 
                                 Input f32_4* %69 = OpVariable Input 
                                              %70 = OpTypePointer Input %6 
                               Private f32_4* %78 = OpVariable Private 
                                              %79 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %80 = OpTypePointer UniformConstant %79 
         UniformConstant read_only Texture2D* %81 = OpVariable UniformConstant 
                                              %83 = OpTypeSampler 
                                              %84 = OpTypePointer UniformConstant %83 
                     UniformConstant sampler* %85 = OpVariable UniformConstant 
                                              %87 = OpTypeSampledImage %79 
                                              %89 = OpTypeVector %6 2 
                                          f32 %92 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %94 = OpVariable UniformConstant 
                     UniformConstant sampler* %96 = OpVariable UniformConstant 
                                             %102 = OpTypeVector %6 3 
                                         f32 %108 = OpConstant 3.674022E-40 
                                       f32_3 %109 = OpConstantComposite %108 %108 %108 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_3 %112 = OpConstantComposite %111 %111 %111 
                              Private f32_4* %116 = OpVariable Private 
                                         i32 %117 = OpConstant 15 
                                         i32 %121 = OpConstant 14 
                                         f32 %147 = OpConstant 3.674022E-40 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %147 %148 
                                         u32 %156 = OpConstant 3 
                                Input f32_4* %160 = OpVariable Input 
                              Private f32_4* %166 = OpVariable Private 
                                         i32 %169 = OpConstant 10 
                                         i32 %170 = OpConstant 1 
                                             %171 = OpTypePointer Uniform %7 
                                         i32 %182 = OpConstant 2 
                                         i32 %191 = OpConstant 3 
                              Private f32_4* %206 = OpVariable Private 
                                         i32 %209 = OpConstant 12 
                                             %227 = OpTypeArray %6 %22 
                                             %228 = OpTypeStruct %7 %6 %227 
                                             %229 = OpTypePointer Output %228 
        Output struct {f32_4; f32; f32[1];}* %230 = OpVariable Output 
                                             %238 = OpTypePointer Output %7 
                                             %240 = OpTypePointer Output %89 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %242 = OpVariable Input 
                                         i32 %245 = OpConstant 18 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_2 %269 = OpConstantComposite %268 %268 
                                         f32 %271 = OpConstant 3.674022E-40 
                                       f32_2 %272 = OpConstantComposite %271 %271 
                                Private f32* %276 = OpVariable Private 
                                         f32 %285 = OpConstant 3.674022E-40 
                                         f32 %286 = OpConstant 3.674022E-40 
                                       f32_2 %287 = OpConstantComposite %285 %286 
                                       f32_2 %289 = OpConstantComposite %58 %58 
                                         u32 %293 = OpConstant 2 
                                       f32_3 %311 = OpConstantComposite %58 %58 %58 
                                             %323 = OpTypeBool 
                                             %324 = OpTypePointer Private %323 
                               Private bool* %325 = OpVariable Private 
                                       f32_4 %326 = OpConstantComposite %92 %92 %92 %92 
                                         i32 %327 = OpConstant 13 
                                             %331 = OpTypeVector %323 4 
                                             %335 = OpTypePointer Function %102 
                                         i32 %349 = OpConstant 11 
                                             %386 = OpTypePointer Output %102 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         f32 %441 = OpConstant 3.674022E-40 
                                       f32_4 %442 = OpConstantComposite %441 %441 %441 %441 
                                         i32 %447 = OpConstant 4 
                                       f32_4 %451 = OpConstantComposite %58 %58 %58 %58 
                                         i32 %465 = OpConstant 5 
                                Private f32* %505 = OpVariable Private 
                                         i32 %524 = OpConstant 6 
                                         i32 %530 = OpConstant 7 
                                         i32 %536 = OpConstant 8 
                                         i32 %542 = OpConstant 9 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %562 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %336 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %20 %21 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                 Uniform f32* %28 = OpAccessChain %20 %27 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %26 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 10 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                 Uniform i32* %41 = OpAccessChain %20 %39 
                                          i32 %42 = OpLoad %41 
                                          f32 %43 = OpConvertSToF %42 
                                                      OpStore %38 %43 
                                          f32 %44 = OpLoad %38 
                                 Private f32* %45 = OpAccessChain %9 %31 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Private f32* %48 = OpAccessChain %9 %31 
                                                      OpStore %48 %47 
                                 Private f32* %49 = OpAccessChain %9 %31 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpExtInst %1 9 %50 
                                 Private f32* %52 = OpAccessChain %9 %31 
                                                      OpStore %52 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpLoad %38 
                                          f32 %56 = OpFDiv %54 %55 
                                 Private f32* %57 = OpAccessChain %9 %31 
                                                      OpStore %57 %56 
                                          f32 %59 = OpLoad %38 
                                          f32 %60 = OpFDiv %58 %59 
                                                      OpStore %38 %60 
                                          f32 %61 = OpLoad %38 
                                 Private f32* %62 = OpAccessChain %9 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %9 %31 
                                          f32 %67 = OpLoad %66 
                                   Input f32* %71 = OpAccessChain %69 %22 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %67 %72 
                                 Private f32* %74 = OpAccessChain %9 %22 
                                                      OpStore %74 %73 
                                   Input f32* %75 = OpAccessChain %69 %31 
                                          f32 %76 = OpLoad %75 
                                 Private f32* %77 = OpAccessChain %9 %31 
                                                      OpStore %77 %76 
                          read_only Texture2D %82 = OpLoad %81 
                                      sampler %86 = OpLoad %85 
                   read_only Texture2DSampled %88 = OpSampledImage %82 %86 
                                        f32_4 %90 = OpLoad %9 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                                        f32_4 %93 = OpImageSampleExplicitLod %88 %91 Lod %7 
                                                      OpStore %78 %93 
                          read_only Texture2D %95 = OpLoad %94 
                                      sampler %97 = OpLoad %96 
                   read_only Texture2DSampled %98 = OpSampledImage %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_4 %101 = OpImageSampleExplicitLod %98 %100 Lod %7 
                                       f32_3 %103 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %9 %105 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 2 1 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                Uniform f32* %118 = OpAccessChain %20 %117 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFNegate %119 
                                Uniform f32* %122 = OpAccessChain %20 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                Private f32* %125 = OpAccessChain %116 %31 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %78 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_4 %128 = OpLoad %116 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 0 0 
                                       f32_3 %130 = OpFMul %127 %129 
                                Uniform f32* %131 = OpAccessChain %20 %117 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %20 %117 
                                         f32 %134 = OpLoad %133 
                                Uniform f32* %135 = OpAccessChain %20 %117 
                                         f32 %136 = OpLoad %135 
                                       f32_3 %137 = OpCompositeConstruct %132 %134 %136 
                                         f32 %138 = OpCompositeExtract %137 0 
                                         f32 %139 = OpCompositeExtract %137 1 
                                         f32 %140 = OpCompositeExtract %137 2 
                                       f32_3 %141 = OpCompositeConstruct %138 %139 %140 
                                       f32_3 %142 = OpFAdd %130 %141 
                                       f32_4 %143 = OpLoad %116 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %116 %144 
                                       f32_4 %145 = OpLoad %78 
                                       f32_2 %146 = OpVectorShuffle %145 %145 3 3 
                                       f32_2 %150 = OpFMul %146 %149 
                                       f32_4 %151 = OpLoad %78 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 2 3 
                                                      OpStore %78 %152 
                                Private f32* %153 = OpAccessChain %116 %31 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                Private f32* %157 = OpAccessChain %116 %156 
                                                      OpStore %157 %155 
                                       f32_4 %158 = OpLoad %116 
                                       f32_3 %159 = OpVectorShuffle %158 %158 3 2 1 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %116 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %116 %165 
                                       f32_4 %167 = OpLoad %116 
                                       f32_4 %168 = OpVectorShuffle %167 %167 1 1 1 1 
                              Uniform f32_4* %172 = OpAccessChain %20 %169 %170 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpFMul %168 %173 
                                                      OpStore %166 %174 
                              Uniform f32_4* %175 = OpAccessChain %20 %169 %21 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpLoad %116 
                                       f32_4 %178 = OpVectorShuffle %177 %177 0 0 0 0 
                                       f32_4 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %166 
                                       f32_4 %181 = OpFAdd %179 %180 
                                                      OpStore %166 %181 
                              Uniform f32_4* %183 = OpAccessChain %20 %169 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpLoad %116 
                                       f32_4 %186 = OpVectorShuffle %185 %185 2 2 2 2 
                                       f32_4 %187 = OpFMul %184 %186 
                                       f32_4 %188 = OpLoad %166 
                                       f32_4 %189 = OpFAdd %187 %188 
                                                      OpStore %116 %189 
                                       f32_4 %190 = OpLoad %116 
                              Uniform f32_4* %192 = OpAccessChain %20 %169 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpFAdd %190 %193 
                                                      OpStore %166 %194 
                              Uniform f32_4* %195 = OpAccessChain %20 %169 %191 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %160 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %116 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %116 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %116 %205 
                                       f32_4 %207 = OpLoad %166 
                                       f32_4 %208 = OpVectorShuffle %207 %207 1 1 1 1 
                              Uniform f32_4* %210 = OpAccessChain %20 %209 %170 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpFMul %208 %211 
                                                      OpStore %206 %212 
                              Uniform f32_4* %213 = OpAccessChain %20 %209 %21 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %166 
                                       f32_4 %216 = OpVectorShuffle %215 %215 0 0 0 0 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %206 
                                       f32_4 %219 = OpFAdd %217 %218 
                                                      OpStore %206 %219 
                              Uniform f32_4* %220 = OpAccessChain %20 %209 %182 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpLoad %166 
                                       f32_4 %223 = OpVectorShuffle %222 %222 2 2 2 2 
                                       f32_4 %224 = OpFMul %221 %223 
                                       f32_4 %225 = OpLoad %206 
                                       f32_4 %226 = OpFAdd %224 %225 
                                                      OpStore %206 %226 
                              Uniform f32_4* %231 = OpAccessChain %20 %209 %191 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %166 
                                       f32_4 %234 = OpVectorShuffle %233 %233 3 3 3 3 
                                       f32_4 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %206 
                                       f32_4 %237 = OpFAdd %235 %236 
                               Output f32_4* %239 = OpAccessChain %230 %21 
                                                      OpStore %239 %237 
                                       f32_4 %243 = OpLoad %242 
                                       f32_2 %244 = OpVectorShuffle %243 %243 0 1 
                              Uniform f32_4* %246 = OpAccessChain %20 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                                       f32_2 %249 = OpFMul %244 %248 
                              Uniform f32_4* %250 = OpAccessChain %20 %245 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 2 3 
                                       f32_2 %253 = OpFAdd %249 %252 
                                                      OpStore vs_TEXCOORD0 %253 
                                Private f32* %254 = OpAccessChain %78 %22 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpExtInst %1 8 %255 
                                Private f32* %257 = OpAccessChain %166 %31 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %166 %31 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFNegate %259 
                                         f32 %261 = OpFMul %260 %148 
                                Private f32* %262 = OpAccessChain %78 %31 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFAdd %261 %263 
                                Private f32* %265 = OpAccessChain %166 %22 
                                                      OpStore %265 %264 
                                       f32_4 %266 = OpLoad %166 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                                       f32_2 %270 = OpFMul %267 %269 
                                       f32_2 %273 = OpFAdd %270 %272 
                                       f32_4 %274 = OpLoad %78 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 2 3 
                                                      OpStore %78 %275 
                                       f32_4 %277 = OpLoad %78 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                       f32_4 %279 = OpLoad %78 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                         f32 %281 = OpDot %278 %280 
                                                      OpStore %276 %281 
                                         f32 %282 = OpLoad %276 
                                       f32_2 %283 = OpCompositeConstruct %282 %282 
                                       f32_2 %284 = OpFNegate %283 
                                       f32_2 %288 = OpFMul %284 %287 
                                       f32_2 %290 = OpFAdd %288 %289 
                                       f32_4 %291 = OpLoad %166 
                                       f32_4 %292 = OpVectorShuffle %291 %290 0 1 4 5 
                                                      OpStore %166 %292 
                                Private f32* %294 = OpAccessChain %166 %293 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 31 %295 
                                                      OpStore %276 %296 
                                       f32_4 %297 = OpLoad %78 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 1 
                                         f32 %299 = OpLoad %276 
                                       f32_2 %300 = OpCompositeConstruct %299 %299 
                                       f32_2 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %166 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 2 3 
                                                      OpStore %166 %303 
                                       f32_4 %304 = OpLoad %166 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 3 
                                       f32_3 %306 = OpExtInst %1 40 %305 %112 
                                       f32_4 %307 = OpLoad %78 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %78 %308 
                                       f32_4 %309 = OpLoad %78 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %312 = OpExtInst %1 37 %310 %311 
                                       f32_4 %313 = OpLoad %78 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %78 %314 
                                Private f32* %315 = OpAccessChain %78 %31 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFNegate %316 
                                Private f32* %318 = OpAccessChain %78 %156 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %9 %31 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                Private f32* %322 = OpAccessChain %9 %156 
                                                      OpStore %322 %321 
                                Uniform f32* %328 = OpAccessChain %20 %327 
                                         f32 %329 = OpLoad %328 
                                       f32_4 %330 = OpCompositeConstruct %329 %329 %329 %329 
                                      bool_4 %332 = OpFOrdNotEqual %326 %330 
                                        bool %333 = OpAny %332 
                                                      OpStore %325 %333 
                                        bool %334 = OpLoad %325 
                                                      OpSelectionMerge %338 None 
                                                      OpBranchConditional %334 %337 %341 
                                             %337 = OpLabel 
                                       f32_4 %339 = OpLoad %78 
                                       f32_3 %340 = OpVectorShuffle %339 %339 3 2 1 
                                                      OpStore %336 %340 
                                                      OpBranch %338 
                                             %341 = OpLabel 
                                       f32_4 %342 = OpLoad %9 
                                       f32_3 %343 = OpVectorShuffle %342 %342 3 1 2 
                                                      OpStore %336 %343 
                                                      OpBranch %338 
                                             %338 = OpLabel 
                                       f32_3 %344 = OpLoad %336 
                                       f32_4 %345 = OpLoad %9 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %9 %346 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                              Uniform f32_4* %350 = OpAccessChain %20 %349 %21 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                         f32 %353 = OpDot %348 %352 
                                Private f32* %354 = OpAccessChain %78 %31 
                                                      OpStore %354 %353 
                                       f32_4 %355 = OpLoad %9 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                              Uniform f32_4* %357 = OpAccessChain %20 %349 %170 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                         f32 %360 = OpDot %356 %359 
                                Private f32* %361 = OpAccessChain %78 %22 
                                                      OpStore %361 %360 
                                       f32_4 %362 = OpLoad %9 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                              Uniform f32_4* %364 = OpAccessChain %20 %349 %182 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                         f32 %367 = OpDot %363 %366 
                                Private f32* %368 = OpAccessChain %78 %293 
                                                      OpStore %368 %367 
                                       f32_4 %369 = OpLoad %78 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_4 %371 = OpLoad %78 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                         f32 %373 = OpDot %370 %372 
                                Private f32* %374 = OpAccessChain %9 %31 
                                                      OpStore %374 %373 
                                Private f32* %375 = OpAccessChain %9 %31 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpExtInst %1 32 %376 
                                Private f32* %378 = OpAccessChain %9 %31 
                                                      OpStore %378 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_4 %381 = OpLoad %78 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFMul %380 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_4 %388 = OpLoad %9 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                                      OpStore vs_TEXCOORD1 %389 
                                       f32_4 %391 = OpLoad %116 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                                      OpStore vs_TEXCOORD2 %392 
                                       f32_4 %393 = OpLoad %116 
                                       f32_4 %394 = OpVectorShuffle %393 %393 0 0 0 0 
                                       f32_4 %395 = OpFNegate %394 
                              Uniform f32_4* %396 = OpAccessChain %20 %170 
                                       f32_4 %397 = OpLoad %396 
                                       f32_4 %398 = OpFAdd %395 %397 
                                                      OpStore %78 %398 
                                       f32_4 %399 = OpLoad %116 
                                       f32_4 %400 = OpVectorShuffle %399 %399 1 1 1 1 
                                       f32_4 %401 = OpFNegate %400 
                              Uniform f32_4* %402 = OpAccessChain %20 %182 
                                       f32_4 %403 = OpLoad %402 
                                       f32_4 %404 = OpFAdd %401 %403 
                                                      OpStore %166 %404 
                                       f32_4 %405 = OpLoad %116 
                                       f32_4 %406 = OpVectorShuffle %405 %405 2 2 2 2 
                                       f32_4 %407 = OpFNegate %406 
                              Uniform f32_4* %408 = OpAccessChain %20 %191 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %410 = OpFAdd %407 %409 
                                                      OpStore %116 %410 
                                       f32_4 %411 = OpLoad %9 
                                       f32_4 %412 = OpVectorShuffle %411 %411 1 1 1 1 
                                       f32_4 %413 = OpLoad %166 
                                       f32_4 %414 = OpFMul %412 %413 
                                                      OpStore %206 %414 
                                       f32_4 %415 = OpLoad %166 
                                       f32_4 %416 = OpLoad %166 
                                       f32_4 %417 = OpFMul %415 %416 
                                                      OpStore %166 %417 
                                       f32_4 %418 = OpLoad %78 
                                       f32_4 %419 = OpLoad %78 
                                       f32_4 %420 = OpFMul %418 %419 
                                       f32_4 %421 = OpLoad %166 
                                       f32_4 %422 = OpFAdd %420 %421 
                                                      OpStore %166 %422 
                                       f32_4 %423 = OpLoad %78 
                                       f32_4 %424 = OpLoad %9 
                                       f32_4 %425 = OpVectorShuffle %424 %424 0 0 0 0 
                                       f32_4 %426 = OpFMul %423 %425 
                                       f32_4 %427 = OpLoad %206 
                                       f32_4 %428 = OpFAdd %426 %427 
                                                      OpStore %78 %428 
                                       f32_4 %429 = OpLoad %116 
                                       f32_4 %430 = OpLoad %9 
                                       f32_4 %431 = OpVectorShuffle %430 %430 2 2 2 2 
                                       f32_4 %432 = OpFMul %429 %431 
                                       f32_4 %433 = OpLoad %78 
                                       f32_4 %434 = OpFAdd %432 %433 
                                                      OpStore %78 %434 
                                       f32_4 %435 = OpLoad %116 
                                       f32_4 %436 = OpLoad %116 
                                       f32_4 %437 = OpFMul %435 %436 
                                       f32_4 %438 = OpLoad %166 
                                       f32_4 %439 = OpFAdd %437 %438 
                                                      OpStore %116 %439 
                                       f32_4 %440 = OpLoad %116 
                                       f32_4 %443 = OpExtInst %1 40 %440 %442 
                                                      OpStore %116 %443 
                                       f32_4 %444 = OpLoad %116 
                                       f32_4 %445 = OpExtInst %1 32 %444 
                                                      OpStore %166 %445 
                                       f32_4 %446 = OpLoad %116 
                              Uniform f32_4* %448 = OpAccessChain %20 %447 
                                       f32_4 %449 = OpLoad %448 
                                       f32_4 %450 = OpFMul %446 %449 
                                       f32_4 %452 = OpFAdd %450 %451 
                                                      OpStore %116 %452 
                                       f32_4 %453 = OpLoad %116 
                                       f32_4 %454 = OpFDiv %451 %453 
                                                      OpStore %116 %454 
                                       f32_4 %455 = OpLoad %78 
                                       f32_4 %456 = OpLoad %166 
                                       f32_4 %457 = OpFMul %455 %456 
                                                      OpStore %78 %457 
                                       f32_4 %458 = OpLoad %78 
                                       f32_4 %459 = OpExtInst %1 40 %458 %326 
                                                      OpStore %78 %459 
                                       f32_4 %460 = OpLoad %116 
                                       f32_4 %461 = OpLoad %78 
                                       f32_4 %462 = OpFMul %460 %461 
                                                      OpStore %78 %462 
                                       f32_4 %463 = OpLoad %78 
                                       f32_3 %464 = OpVectorShuffle %463 %463 1 1 1 
                              Uniform f32_4* %466 = OpAccessChain %20 %465 %170 
                                       f32_4 %467 = OpLoad %466 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                       f32_3 %469 = OpFMul %464 %468 
                                       f32_4 %470 = OpLoad %116 
                                       f32_4 %471 = OpVectorShuffle %470 %469 4 5 6 3 
                                                      OpStore %116 %471 
                              Uniform f32_4* %472 = OpAccessChain %20 %465 %21 
                                       f32_4 %473 = OpLoad %472 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 1 2 
                                       f32_4 %475 = OpLoad %78 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 0 0 
                                       f32_3 %477 = OpFMul %474 %476 
                                       f32_4 %478 = OpLoad %116 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFAdd %477 %479 
                                       f32_4 %481 = OpLoad %116 
                                       f32_4 %482 = OpVectorShuffle %481 %480 4 5 6 3 
                                                      OpStore %116 %482 
                              Uniform f32_4* %483 = OpAccessChain %20 %465 %182 
                                       f32_4 %484 = OpLoad %483 
                                       f32_3 %485 = OpVectorShuffle %484 %484 0 1 2 
                                       f32_4 %486 = OpLoad %78 
                                       f32_3 %487 = OpVectorShuffle %486 %486 2 2 2 
                                       f32_3 %488 = OpFMul %485 %487 
                                       f32_4 %489 = OpLoad %116 
                                       f32_3 %490 = OpVectorShuffle %489 %489 0 1 2 
                                       f32_3 %491 = OpFAdd %488 %490 
                                       f32_4 %492 = OpLoad %78 
                                       f32_4 %493 = OpVectorShuffle %492 %491 4 5 6 3 
                                                      OpStore %78 %493 
                              Uniform f32_4* %494 = OpAccessChain %20 %465 %191 
                                       f32_4 %495 = OpLoad %494 
                                       f32_3 %496 = OpVectorShuffle %495 %495 0 1 2 
                                       f32_4 %497 = OpLoad %78 
                                       f32_3 %498 = OpVectorShuffle %497 %497 3 3 3 
                                       f32_3 %499 = OpFMul %496 %498 
                                       f32_4 %500 = OpLoad %78 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 1 2 
                                       f32_3 %502 = OpFAdd %499 %501 
                                       f32_4 %503 = OpLoad %78 
                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 6 3 
                                                      OpStore %78 %504 
                                Private f32* %506 = OpAccessChain %9 %22 
                                         f32 %507 = OpLoad %506 
                                Private f32* %508 = OpAccessChain %9 %22 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpFMul %507 %509 
                                                      OpStore %505 %510 
                                Private f32* %511 = OpAccessChain %9 %31 
                                         f32 %512 = OpLoad %511 
                                Private f32* %513 = OpAccessChain %9 %31 
                                         f32 %514 = OpLoad %513 
                                         f32 %515 = OpFMul %512 %514 
                                         f32 %516 = OpLoad %505 
                                         f32 %517 = OpFNegate %516 
                                         f32 %518 = OpFAdd %515 %517 
                                                      OpStore %505 %518 
                                       f32_4 %519 = OpLoad %9 
                                       f32_4 %520 = OpVectorShuffle %519 %519 1 2 2 0 
                                       f32_4 %521 = OpLoad %9 
                                       f32_4 %522 = OpVectorShuffle %521 %521 0 1 2 2 
                                       f32_4 %523 = OpFMul %520 %522 
                                                      OpStore %116 %523 
                              Uniform f32_4* %525 = OpAccessChain %20 %524 
                                       f32_4 %526 = OpLoad %525 
                                       f32_4 %527 = OpLoad %116 
                                         f32 %528 = OpDot %526 %527 
                                Private f32* %529 = OpAccessChain %9 %31 
                                                      OpStore %529 %528 
                              Uniform f32_4* %531 = OpAccessChain %20 %530 
                                       f32_4 %532 = OpLoad %531 
                                       f32_4 %533 = OpLoad %116 
                                         f32 %534 = OpDot %532 %533 
                                Private f32* %535 = OpAccessChain %9 %22 
                                                      OpStore %535 %534 
                              Uniform f32_4* %537 = OpAccessChain %20 %536 
                                       f32_4 %538 = OpLoad %537 
                                       f32_4 %539 = OpLoad %116 
                                         f32 %540 = OpDot %538 %539 
                                Private f32* %541 = OpAccessChain %9 %293 
                                                      OpStore %541 %540 
                              Uniform f32_4* %543 = OpAccessChain %20 %542 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                         f32 %546 = OpLoad %505 
                                       f32_3 %547 = OpCompositeConstruct %546 %546 %546 
                                       f32_3 %548 = OpFMul %545 %547 
                                       f32_4 %549 = OpLoad %9 
                                       f32_3 %550 = OpVectorShuffle %549 %549 0 1 2 
                                       f32_3 %551 = OpFAdd %548 %550 
                                       f32_4 %552 = OpLoad %9 
                                       f32_4 %553 = OpVectorShuffle %552 %551 4 5 6 3 
                                                      OpStore %9 %553 
                                       f32_4 %555 = OpLoad %9 
                                       f32_3 %556 = OpVectorShuffle %555 %555 0 1 2 
                                       f32_4 %557 = OpLoad %78 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                       f32_3 %559 = OpFAdd %556 %558 
                                                      OpStore vs_TEXCOORD3 %559 
                                                      OpStore vs_TEXCOORD5 %326 
                                                      OpStore vs_TEXCOORD6 %326 
                                 Output f32* %563 = OpAccessChain %230 %21 %22 
                                         f32 %564 = OpLoad %563 
                                         f32 %565 = OpFNegate %564 
                                 Output f32* %566 = OpAccessChain %230 %21 %22 
                                                      OpStore %566 %565 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 905
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %57 %81 %130 %891 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate vs_TEXCOORD0 Location 57 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate vs_TEXCOORD3 Location 130 
                                                      OpDecorate %283 DescriptorSet 283 
                                                      OpDecorate %283 Binding 283 
                                                      OpDecorate %285 DescriptorSet 285 
                                                      OpDecorate %285 Binding 285 
                                                      OpDecorate %438 DescriptorSet 438 
                                                      OpDecorate %438 Binding 438 
                                                      OpDecorate %891 Location 891 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                                              %43 = OpTypePointer Private %10 
                               Private f32_3* %44 = OpVariable Private 
                                              %45 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %46 = OpTypePointer UniformConstant %45 
         UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
                                              %49 = OpTypeSampler 
                                              %50 = OpTypePointer UniformConstant %49 
                     UniformConstant sampler* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampledImage %45 
                                              %55 = OpTypeVector %6 2 
                                              %56 = OpTypePointer Input %55 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %61 = OpVariable Private 
                                          i32 %63 = OpConstant 16 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
                                          i32 %70 = OpConstant 14 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %77 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_4* %87 = OpVariable Private 
                               Private f32_4* %99 = OpVariable Private 
                                             %103 = OpTypeInt 32 0 
                                         u32 %104 = OpConstant 3 
                              Private f32_4* %106 = OpVariable Private 
                                         i32 %107 = OpConstant 2 
                                         u32 %112 = OpConstant 0 
                                         i32 %114 = OpConstant 3 
                                         u32 %119 = OpConstant 1 
                                         i32 %121 = OpConstant 4 
                                         u32 %126 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                         f32 %137 = OpConstant 3.674022E-40 
                                       f32_3 %138 = OpConstantComposite %137 %137 %137 
                                             %142 = OpTypeBool 
                                             %143 = OpTypePointer Private %142 
                               Private bool* %144 = OpVariable Private 
                                         i32 %145 = OpConstant 7 
                              Private f32_3* %166 = OpVariable Private 
                                         i32 %169 = OpConstant 5 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %181 = OpConstant 6 
                                             %190 = OpTypeVector %142 3 
                                             %191 = OpTypePointer Private %190 
                             Private bool_3* %192 = OpVariable Private 
                                       f32_4 %193 = OpConstantComposite %137 %137 %137 %137 
                                             %196 = OpTypeVector %142 4 
                                             %199 = OpTypePointer Function %10 
                                             %204 = OpTypePointer Function %6 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %273 = OpConstant 3.674022E-40 
                                         f32 %279 = OpConstant 3.674022E-40 
                                             %281 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %282 = OpTypePointer UniformConstant %281 
      UniformConstant read_only TextureCube* %283 = OpVariable UniformConstant 
                    UniformConstant sampler* %285 = OpVariable UniformConstant 
                                             %287 = OpTypeSampledImage %281 
                                Private f32* %293 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         i32 %298 = OpConstant 8 
                               Private bool* %321 = OpVariable Private 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         i32 %329 = OpConstant 11 
                                Private f32* %336 = OpVariable Private 
                              Private f32_3* %349 = OpVariable Private 
                                         i32 %352 = OpConstant 9 
                              Private f32_3* %360 = OpVariable Private 
                                         i32 %363 = OpConstant 10 
                             Private bool_3* %371 = OpVariable Private 
      UniformConstant read_only TextureCube* %438 = OpVariable UniformConstant 
                                         i32 %449 = OpConstant 12 
                                         f32 %510 = OpConstant 3.674022E-40 
                                       f32_3 %511 = OpConstantComposite %510 %510 %510 
                                         i32 %515 = OpConstant 15 
                                         f32 %530 = OpConstant 3.674022E-40 
                                       f32_3 %531 = OpConstantComposite %530 %530 %530 
                                         f32 %538 = OpConstant 3.674022E-40 
                                         i32 %550 = OpConstant 1 
                                         f32 %563 = OpConstant 3.674022E-40 
                                Private f32* %590 = OpVariable Private 
                              Private f32_3* %609 = OpVariable Private 
                                         f32 %624 = OpConstant 3.674022E-40 
                                Private f32* %627 = OpVariable Private 
                                Private f32* %632 = OpVariable Private 
                                         f32 %675 = OpConstant 3.674022E-40 
                                         f32 %703 = OpConstant 3.674022E-40 
                                         f32 %705 = OpConstant 3.674022E-40 
                                         f32 %722 = OpConstant 3.674022E-40 
                                         f32 %727 = OpConstant 3.674022E-40 
                                         f32 %745 = OpConstant 3.674022E-40 
                               Private bool* %761 = OpVariable Private 
                                         i32 %786 = OpConstant 13 
                                       f32_3 %832 = OpConstantComposite %75 %75 %75 
                                             %890 = OpTypePointer Output %7 
                               Output f32_4* %891 = OpVariable Output 
                                             %902 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %200 = OpVariable Function 
                               Function f32* %205 = OpVariable Function 
                               Function f32* %217 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                             Function f32_3* %376 = OpVariable Function 
                               Function f32* %380 = OpVariable Function 
                               Function f32* %392 = OpVariable Function 
                               Function f32* %404 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %48 = OpLoad %47 
                                      sampler %52 = OpLoad %51 
                   read_only Texture2DSampled %54 = OpSampledImage %48 %52 
                                        f32_2 %58 = OpLoad vs_TEXCOORD0 
                                        f32_4 %59 = OpImageSampleImplicitLod %54 %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                                      OpStore %44 %60 
                                        f32_3 %62 = OpLoad %44 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %61 %68 
                                 Uniform f32* %72 = OpAccessChain %17 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFAdd %74 %75 
                                                      OpStore %69 %76 
                                        f32_4 %78 = OpLoad %35 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad vs_TEXCOORD1 
                                          f32 %83 = OpDot %80 %82 
                                                      OpStore %77 %83 
                                          f32 %84 = OpLoad %77 
                                          f32 %85 = OpLoad %77 
                                          f32 %86 = OpFAdd %84 %85 
                                                      OpStore %77 %86 
                                        f32_3 %88 = OpLoad vs_TEXCOORD1 
                                          f32 %89 = OpLoad %77 
                                        f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                        f32_3 %91 = OpFNegate %90 
                                        f32_3 %92 = OpFMul %88 %91 
                                        f32_4 %93 = OpLoad %35 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFNegate %94 
                                        f32_3 %96 = OpFAdd %92 %95 
                                        f32_4 %97 = OpLoad %87 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %87 %98 
                                       f32_3 %100 = OpLoad vs_TEXCOORD1 
                                       f32_4 %101 = OpLoad %99 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 6 3 
                                                      OpStore %99 %102 
                                Private f32* %105 = OpAccessChain %99 %104 
                                                      OpStore %105 %75 
                              Uniform f32_4* %108 = OpAccessChain %17 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %99 
                                         f32 %111 = OpDot %109 %110 
                                Private f32* %113 = OpAccessChain %106 %112 
                                                      OpStore %113 %111 
                              Uniform f32_4* %115 = OpAccessChain %17 %114 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %99 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %120 = OpAccessChain %106 %119 
                                                      OpStore %120 %118 
                              Uniform f32_4* %122 = OpAccessChain %17 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %99 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %127 = OpAccessChain %106 %126 
                                                      OpStore %127 %125 
                                       f32_4 %128 = OpLoad %106 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %131 = OpLoad vs_TEXCOORD3 
                                       f32_3 %132 = OpFAdd %129 %131 
                                       f32_4 %133 = OpLoad %99 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %99 %134 
                                       f32_4 %135 = OpLoad %99 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %139 = OpExtInst %1 40 %136 %138 
                                       f32_4 %140 = OpLoad %99 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %99 %141 
                                Uniform f32* %146 = OpAccessChain %17 %145 %104 
                                         f32 %147 = OpLoad %146 
                                        bool %148 = OpFOrdLessThan %137 %147 
                                                      OpStore %144 %148 
                                        bool %149 = OpLoad %144 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %264 
                                             %150 = OpLabel 
                                       f32_4 %152 = OpLoad %87 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %87 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %153 %155 
                                                      OpStore %77 %156 
                                         f32 %157 = OpLoad %77 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %77 %158 
                                         f32 %159 = OpLoad %77 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_4 %161 = OpLoad %87 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %106 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %106 %165 
                                       f32_3 %167 = OpLoad vs_TEXCOORD2 
                                       f32_3 %168 = OpFNegate %167 
                              Uniform f32_4* %170 = OpAccessChain %17 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %168 %172 
                                                      OpStore %166 %173 
                                       f32_3 %174 = OpLoad %166 
                                       f32_4 %175 = OpLoad %106 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFDiv %174 %176 
                                                      OpStore %166 %177 
                                       f32_3 %179 = OpLoad vs_TEXCOORD2 
                                       f32_3 %180 = OpFNegate %179 
                              Uniform f32_4* %182 = OpAccessChain %17 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %180 %184 
                                                      OpStore %178 %185 
                                       f32_3 %186 = OpLoad %178 
                                       f32_4 %187 = OpLoad %106 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFDiv %186 %188 
                                                      OpStore %178 %189 
                                       f32_4 %194 = OpLoad %106 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 1 2 0 
                                      bool_4 %197 = OpFOrdLessThan %193 %195 
                                      bool_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                                      OpStore %192 %198 
                                       f32_3 %201 = OpLoad %166 
                                                      OpStore %200 %201 
                               Private bool* %202 = OpAccessChain %192 %112 
                                        bool %203 = OpLoad %202 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %203 %206 %210 
                                             %206 = OpLabel 
                                Private f32* %208 = OpAccessChain %166 %112 
                                         f32 %209 = OpLoad %208 
                                                      OpStore %205 %209 
                                                      OpBranch %207 
                                             %210 = OpLabel 
                                Private f32* %211 = OpAccessChain %178 %112 
                                         f32 %212 = OpLoad %211 
                                                      OpStore %205 %212 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                         f32 %213 = OpLoad %205 
                               Function f32* %214 = OpAccessChain %200 %112 
                                                      OpStore %214 %213 
                               Private bool* %215 = OpAccessChain %192 %119 
                                        bool %216 = OpLoad %215 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %216 %218 %222 
                                             %218 = OpLabel 
                                Private f32* %220 = OpAccessChain %166 %119 
                                         f32 %221 = OpLoad %220 
                                                      OpStore %217 %221 
                                                      OpBranch %219 
                                             %222 = OpLabel 
                                Private f32* %223 = OpAccessChain %178 %119 
                                         f32 %224 = OpLoad %223 
                                                      OpStore %217 %224 
                                                      OpBranch %219 
                                             %219 = OpLabel 
                                         f32 %225 = OpLoad %217 
                               Function f32* %226 = OpAccessChain %200 %119 
                                                      OpStore %226 %225 
                               Private bool* %227 = OpAccessChain %192 %126 
                                        bool %228 = OpLoad %227 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %228 %230 %234 
                                             %230 = OpLabel 
                                Private f32* %232 = OpAccessChain %166 %126 
                                         f32 %233 = OpLoad %232 
                                                      OpStore %229 %233 
                                                      OpBranch %231 
                                             %234 = OpLabel 
                                Private f32* %235 = OpAccessChain %178 %126 
                                         f32 %236 = OpLoad %235 
                                                      OpStore %229 %236 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                         f32 %237 = OpLoad %229 
                               Function f32* %238 = OpAccessChain %200 %126 
                                                      OpStore %238 %237 
                                       f32_3 %239 = OpLoad %200 
                                                      OpStore %166 %239 
                                Private f32* %240 = OpAccessChain %166 %119 
                                         f32 %241 = OpLoad %240 
                                Private f32* %242 = OpAccessChain %166 %112 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpExtInst %1 37 %241 %243 
                                                      OpStore %77 %244 
                                Private f32* %245 = OpAccessChain %166 %126 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpLoad %77 
                                         f32 %248 = OpExtInst %1 37 %246 %247 
                                                      OpStore %77 %248 
                                       f32_3 %249 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %250 = OpAccessChain %17 %145 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFNegate %252 
                                       f32_3 %254 = OpFAdd %249 %253 
                                                      OpStore %166 %254 
                                       f32_4 %255 = OpLoad %106 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpLoad %77 
                                       f32_3 %258 = OpCompositeConstruct %257 %257 %257 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %166 
                                       f32_3 %261 = OpFAdd %259 %260 
                                       f32_4 %262 = OpLoad %106 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %106 %263 
                                                      OpBranch %151 
                                             %264 = OpLabel 
                                       f32_4 %265 = OpLoad %87 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %106 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %106 %268 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                         f32 %269 = OpLoad %69 
                                         f32 %270 = OpFNegate %269 
                                         f32 %272 = OpFMul %270 %271 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %77 %274 
                                         f32 %275 = OpLoad %69 
                                         f32 %276 = OpLoad %77 
                                         f32 %277 = OpFMul %275 %276 
                                                      OpStore %77 %277 
                                         f32 %278 = OpLoad %77 
                                         f32 %280 = OpFMul %278 %279 
                                                      OpStore %77 %280 
                       read_only TextureCube %284 = OpLoad %283 
                                     sampler %286 = OpLoad %285 
                read_only TextureCubeSampled %288 = OpSampledImage %284 %286 
                                       f32_4 %289 = OpLoad %106 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                         f32 %291 = OpLoad %77 
                                       f32_4 %292 = OpImageSampleExplicitLod %288 %290 Lod %7 
                                                      OpStore %106 %292 
                                Private f32* %294 = OpAccessChain %106 %104 
                                         f32 %295 = OpLoad %294 
                                         f32 %297 = OpFAdd %295 %296 
                                                      OpStore %293 %297 
                                Uniform f32* %299 = OpAccessChain %17 %298 %104 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpLoad %293 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpFAdd %302 %75 
                                                      OpStore %293 %303 
                                         f32 %304 = OpLoad %293 
                                         f32 %305 = OpExtInst %1 30 %304 
                                                      OpStore %293 %305 
                                         f32 %306 = OpLoad %293 
                                Uniform f32* %307 = OpAccessChain %17 %298 %119 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                                      OpStore %293 %309 
                                         f32 %310 = OpLoad %293 
                                         f32 %311 = OpExtInst %1 29 %310 
                                                      OpStore %293 %311 
                                         f32 %312 = OpLoad %293 
                                Uniform f32* %313 = OpAccessChain %17 %298 %112 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                                      OpStore %293 %315 
                                       f32_4 %316 = OpLoad %106 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                         f32 %318 = OpLoad %293 
                                       f32_3 %319 = OpCompositeConstruct %318 %318 %318 
                                       f32_3 %320 = OpFMul %317 %319 
                                                      OpStore %166 %320 
                                Uniform f32* %322 = OpAccessChain %17 %181 %104 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdLessThan %323 %324 
                                                      OpStore %321 %325 
                                        bool %326 = OpLoad %321 
                                                      OpSelectionMerge %328 None 
                                                      OpBranchConditional %326 %327 %328 
                                             %327 = OpLabel 
                                Uniform f32* %330 = OpAccessChain %17 %329 %104 
                                         f32 %331 = OpLoad %330 
                                        bool %332 = OpFOrdLessThan %137 %331 
                                                      OpStore %321 %332 
                                        bool %333 = OpLoad %321 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %335 
                                             %334 = OpLabel 
                                       f32_4 %337 = OpLoad %87 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_4 %339 = OpLoad %87 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                         f32 %341 = OpDot %338 %340 
                                                      OpStore %336 %341 
                                         f32 %342 = OpLoad %336 
                                         f32 %343 = OpExtInst %1 32 %342 
                                                      OpStore %336 %343 
                                         f32 %344 = OpLoad %336 
                                       f32_3 %345 = OpCompositeConstruct %344 %344 %344 
                                       f32_4 %346 = OpLoad %87 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFMul %345 %347 
                                                      OpStore %178 %348 
                                       f32_3 %350 = OpLoad vs_TEXCOORD2 
                                       f32_3 %351 = OpFNegate %350 
                              Uniform f32_4* %353 = OpAccessChain %17 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %351 %355 
                                                      OpStore %349 %356 
                                       f32_3 %357 = OpLoad %349 
                                       f32_3 %358 = OpLoad %178 
                                       f32_3 %359 = OpFDiv %357 %358 
                                                      OpStore %349 %359 
                                       f32_3 %361 = OpLoad vs_TEXCOORD2 
                                       f32_3 %362 = OpFNegate %361 
                              Uniform f32_4* %364 = OpAccessChain %17 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %362 %366 
                                                      OpStore %360 %367 
                                       f32_3 %368 = OpLoad %360 
                                       f32_3 %369 = OpLoad %178 
                                       f32_3 %370 = OpFDiv %368 %369 
                                                      OpStore %360 %370 
                                       f32_3 %372 = OpLoad %178 
                                       f32_4 %373 = OpVectorShuffle %372 %372 0 1 2 0 
                                      bool_4 %374 = OpFOrdLessThan %193 %373 
                                      bool_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                                      OpStore %371 %375 
                                       f32_3 %377 = OpLoad %349 
                                                      OpStore %376 %377 
                               Private bool* %378 = OpAccessChain %371 %112 
                                        bool %379 = OpLoad %378 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %379 %381 %385 
                                             %381 = OpLabel 
                                Private f32* %383 = OpAccessChain %349 %112 
                                         f32 %384 = OpLoad %383 
                                                      OpStore %380 %384 
                                                      OpBranch %382 
                                             %385 = OpLabel 
                                Private f32* %386 = OpAccessChain %360 %112 
                                         f32 %387 = OpLoad %386 
                                                      OpStore %380 %387 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                         f32 %388 = OpLoad %380 
                               Function f32* %389 = OpAccessChain %376 %112 
                                                      OpStore %389 %388 
                               Private bool* %390 = OpAccessChain %371 %119 
                                        bool %391 = OpLoad %390 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %391 %393 %397 
                                             %393 = OpLabel 
                                Private f32* %395 = OpAccessChain %349 %119 
                                         f32 %396 = OpLoad %395 
                                                      OpStore %392 %396 
                                                      OpBranch %394 
                                             %397 = OpLabel 
                                Private f32* %398 = OpAccessChain %360 %119 
                                         f32 %399 = OpLoad %398 
                                                      OpStore %392 %399 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %400 = OpLoad %392 
                               Function f32* %401 = OpAccessChain %376 %119 
                                                      OpStore %401 %400 
                               Private bool* %402 = OpAccessChain %371 %126 
                                        bool %403 = OpLoad %402 
                                                      OpSelectionMerge %406 None 
                                                      OpBranchConditional %403 %405 %409 
                                             %405 = OpLabel 
                                Private f32* %407 = OpAccessChain %349 %126 
                                         f32 %408 = OpLoad %407 
                                                      OpStore %404 %408 
                                                      OpBranch %406 
                                             %409 = OpLabel 
                                Private f32* %410 = OpAccessChain %360 %126 
                                         f32 %411 = OpLoad %410 
                                                      OpStore %404 %411 
                                                      OpBranch %406 
                                             %406 = OpLabel 
                                         f32 %412 = OpLoad %404 
                               Function f32* %413 = OpAccessChain %376 %126 
                                                      OpStore %413 %412 
                                       f32_3 %414 = OpLoad %376 
                                                      OpStore %349 %414 
                                Private f32* %415 = OpAccessChain %349 %119 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %349 %112 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpExtInst %1 37 %416 %418 
                                                      OpStore %336 %419 
                                Private f32* %420 = OpAccessChain %349 %126 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpLoad %336 
                                         f32 %423 = OpExtInst %1 37 %421 %422 
                                                      OpStore %336 %423 
                                       f32_3 %424 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %425 = OpAccessChain %17 %329 
                                       f32_4 %426 = OpLoad %425 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_3 %428 = OpFNegate %427 
                                       f32_3 %429 = OpFAdd %424 %428 
                                                      OpStore %349 %429 
                                       f32_3 %430 = OpLoad %178 
                                         f32 %431 = OpLoad %336 
                                       f32_3 %432 = OpCompositeConstruct %431 %431 %431 
                                       f32_3 %433 = OpFMul %430 %432 
                                       f32_3 %434 = OpLoad %349 
                                       f32_3 %435 = OpFAdd %433 %434 
                                       f32_4 %436 = OpLoad %87 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %87 %437 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                       read_only TextureCube %439 = OpLoad %438 
                                     sampler %440 = OpLoad %285 
                read_only TextureCubeSampled %441 = OpSampledImage %439 %440 
                                       f32_4 %442 = OpLoad %87 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                         f32 %444 = OpLoad %77 
                                       f32_4 %445 = OpImageSampleExplicitLod %441 %443 Lod %7 
                                                      OpStore %87 %445 
                                Private f32* %446 = OpAccessChain %87 %104 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFAdd %447 %296 
                                                      OpStore %77 %448 
                                Uniform f32* %450 = OpAccessChain %17 %449 %104 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpLoad %77 
                                         f32 %453 = OpFMul %451 %452 
                                         f32 %454 = OpFAdd %453 %75 
                                                      OpStore %77 %454 
                                         f32 %455 = OpLoad %77 
                                         f32 %456 = OpExtInst %1 30 %455 
                                                      OpStore %77 %456 
                                         f32 %457 = OpLoad %77 
                                Uniform f32* %458 = OpAccessChain %17 %449 %119 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFMul %457 %459 
                                                      OpStore %77 %460 
                                         f32 %461 = OpLoad %77 
                                         f32 %462 = OpExtInst %1 29 %461 
                                                      OpStore %77 %462 
                                         f32 %463 = OpLoad %77 
                                Uniform f32* %464 = OpAccessChain %17 %449 %112 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                                      OpStore %77 %466 
                                       f32_4 %467 = OpLoad %87 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                         f32 %469 = OpLoad %77 
                                       f32_3 %470 = OpCompositeConstruct %469 %469 %469 
                                       f32_3 %471 = OpFMul %468 %470 
                                       f32_4 %472 = OpLoad %87 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %87 %473 
                                         f32 %474 = OpLoad %293 
                                       f32_3 %475 = OpCompositeConstruct %474 %474 %474 
                                       f32_4 %476 = OpLoad %106 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %87 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpFNegate %480 
                                       f32_3 %482 = OpFAdd %478 %481 
                                       f32_4 %483 = OpLoad %106 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %106 %484 
                              Uniform f32_4* %485 = OpAccessChain %17 %181 
                                       f32_4 %486 = OpLoad %485 
                                       f32_3 %487 = OpVectorShuffle %486 %486 3 3 3 
                                       f32_4 %488 = OpLoad %106 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 2 
                                       f32_3 %490 = OpFMul %487 %489 
                                       f32_4 %491 = OpLoad %87 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFAdd %490 %492 
                                                      OpStore %166 %493 
                                                      OpBranch %328 
                                             %328 = OpLabel 
                                       f32_3 %494 = OpLoad vs_TEXCOORD1 
                                       f32_3 %495 = OpLoad vs_TEXCOORD1 
                                         f32 %496 = OpDot %494 %495 
                                                      OpStore %77 %496 
                                         f32 %497 = OpLoad %77 
                                         f32 %498 = OpExtInst %1 32 %497 
                                                      OpStore %77 %498 
                                         f32 %499 = OpLoad %77 
                                       f32_3 %500 = OpCompositeConstruct %499 %499 %499 
                                       f32_3 %501 = OpLoad vs_TEXCOORD1 
                                       f32_3 %502 = OpFMul %500 %501 
                                       f32_4 %503 = OpLoad %87 
                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 6 3 
                                                      OpStore %87 %504 
                                       f32_3 %505 = OpLoad %44 
                              Uniform f32_4* %506 = OpAccessChain %17 %63 
                                       f32_4 %507 = OpLoad %506 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFMul %505 %508 
                                       f32_3 %512 = OpFAdd %509 %511 
                                       f32_4 %513 = OpLoad %106 
                                       f32_4 %514 = OpVectorShuffle %513 %512 4 5 6 3 
                                                      OpStore %106 %514 
                                Uniform f32* %516 = OpAccessChain %17 %515 
                                         f32 %517 = OpLoad %516 
                                Uniform f32* %518 = OpAccessChain %17 %515 
                                         f32 %519 = OpLoad %518 
                                Uniform f32* %520 = OpAccessChain %17 %515 
                                         f32 %521 = OpLoad %520 
                                       f32_3 %522 = OpCompositeConstruct %517 %519 %521 
                                         f32 %523 = OpCompositeExtract %522 0 
                                         f32 %524 = OpCompositeExtract %522 1 
                                         f32 %525 = OpCompositeExtract %522 2 
                                       f32_3 %526 = OpCompositeConstruct %523 %524 %525 
                                       f32_4 %527 = OpLoad %106 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFMul %526 %528 
                                       f32_3 %532 = OpFAdd %529 %531 
                                       f32_4 %533 = OpLoad %106 
                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
                                                      OpStore %106 %534 
                                Uniform f32* %535 = OpAccessChain %17 %515 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFNegate %536 
                                         f32 %539 = OpFMul %537 %538 
                                         f32 %540 = OpFAdd %539 %538 
                                                      OpStore %77 %540 
                                         f32 %541 = OpLoad %77 
                                       f32_3 %542 = OpCompositeConstruct %541 %541 %541 
                                       f32_3 %543 = OpLoad %61 
                                       f32_3 %544 = OpFMul %542 %543 
                                                      OpStore %61 %544 
                                       f32_4 %545 = OpLoad %9 
                                       f32_3 %546 = OpVectorShuffle %545 %545 0 1 2 
                                         f32 %547 = OpLoad %27 
                                       f32_3 %548 = OpCompositeConstruct %547 %547 %547 
                                       f32_3 %549 = OpFMul %546 %548 
                              Uniform f32_4* %551 = OpAccessChain %17 %550 
                                       f32_4 %552 = OpLoad %551 
                                       f32_3 %553 = OpVectorShuffle %552 %552 0 1 2 
                                       f32_3 %554 = OpFAdd %549 %553 
                                       f32_4 %555 = OpLoad %9 
                                       f32_4 %556 = OpVectorShuffle %555 %554 4 5 6 3 
                                                      OpStore %9 %556 
                                       f32_4 %557 = OpLoad %9 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                       f32_4 %559 = OpLoad %9 
                                       f32_3 %560 = OpVectorShuffle %559 %559 0 1 2 
                                         f32 %561 = OpDot %558 %560 
                                                      OpStore %27 %561 
                                         f32 %562 = OpLoad %27 
                                         f32 %564 = OpExtInst %1 40 %562 %563 
                                                      OpStore %27 %564 
                                         f32 %565 = OpLoad %27 
                                         f32 %566 = OpExtInst %1 32 %565 
                                                      OpStore %27 %566 
                                         f32 %567 = OpLoad %27 
                                       f32_3 %568 = OpCompositeConstruct %567 %567 %567 
                                       f32_4 %569 = OpLoad %9 
                                       f32_3 %570 = OpVectorShuffle %569 %569 0 1 2 
                                       f32_3 %571 = OpFMul %568 %570 
                                       f32_4 %572 = OpLoad %9 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %9 %573 
                                       f32_4 %574 = OpLoad %87 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                                       f32_4 %576 = OpLoad %35 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 1 2 
                                         f32 %578 = OpDot %575 %577 
                                                      OpStore %27 %578 
                                       f32_4 %579 = OpLoad %87 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                              Uniform f32_4* %581 = OpAccessChain %17 %550 
                                       f32_4 %582 = OpLoad %581 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                         f32 %584 = OpDot %580 %583 
                                Private f32* %585 = OpAccessChain %35 %112 
                                                      OpStore %585 %584 
                                Private f32* %586 = OpAccessChain %35 %112 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpExtInst %1 43 %587 %137 %75 
                                Private f32* %589 = OpAccessChain %35 %112 
                                                      OpStore %589 %588 
                                       f32_4 %591 = OpLoad %87 
                                       f32_3 %592 = OpVectorShuffle %591 %591 0 1 2 
                                       f32_4 %593 = OpLoad %9 
                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
                                         f32 %595 = OpDot %592 %594 
                                                      OpStore %590 %595 
                                         f32 %596 = OpLoad %590 
                                         f32 %597 = OpExtInst %1 43 %596 %137 %75 
                                                      OpStore %590 %597 
                              Uniform f32_4* %598 = OpAccessChain %17 %550 
                                       f32_4 %599 = OpLoad %598 
                                       f32_3 %600 = OpVectorShuffle %599 %599 0 1 2 
                                       f32_4 %601 = OpLoad %9 
                                       f32_3 %602 = OpVectorShuffle %601 %601 0 1 2 
                                         f32 %603 = OpDot %600 %602 
                                Private f32* %604 = OpAccessChain %9 %112 
                                                      OpStore %604 %603 
                                Private f32* %605 = OpAccessChain %9 %112 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpExtInst %1 43 %606 %137 %75 
                                Private f32* %608 = OpAccessChain %9 %112 
                                                      OpStore %608 %607 
                                Private f32* %610 = OpAccessChain %9 %112 
                                         f32 %611 = OpLoad %610 
                                Private f32* %612 = OpAccessChain %9 %112 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpFMul %611 %613 
                                Private f32* %615 = OpAccessChain %609 %112 
                                                      OpStore %615 %614 
                                       f32_3 %616 = OpLoad %609 
                                       f32_2 %617 = OpVectorShuffle %616 %616 0 0 
                                         f32 %618 = OpLoad %69 
                                       f32_2 %619 = OpCompositeConstruct %618 %618 
                                         f32 %620 = OpDot %617 %619 
                                Private f32* %621 = OpAccessChain %609 %112 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %609 %112 
                                         f32 %623 = OpLoad %622 
                                         f32 %625 = OpFAdd %623 %624 
                                Private f32* %626 = OpAccessChain %609 %112 
                                                      OpStore %626 %625 
                                Private f32* %628 = OpAccessChain %35 %112 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFNegate %629 
                                         f32 %631 = OpFAdd %630 %75 
                                                      OpStore %627 %631 
                                         f32 %633 = OpLoad %627 
                                         f32 %634 = OpLoad %627 
                                         f32 %635 = OpFMul %633 %634 
                                                      OpStore %632 %635 
                                         f32 %636 = OpLoad %632 
                                         f32 %637 = OpLoad %632 
                                         f32 %638 = OpFMul %636 %637 
                                                      OpStore %632 %638 
                                         f32 %639 = OpLoad %627 
                                         f32 %640 = OpLoad %632 
                                         f32 %641 = OpFMul %639 %640 
                                                      OpStore %627 %641 
                                Private f32* %642 = OpAccessChain %609 %112 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpLoad %627 
                                         f32 %645 = OpFMul %643 %644 
                                         f32 %646 = OpFAdd %645 %75 
                                                      OpStore %627 %646 
                                         f32 %647 = OpLoad %27 
                                         f32 %648 = OpExtInst %1 4 %647 
                                         f32 %649 = OpFNegate %648 
                                         f32 %650 = OpFAdd %649 %75 
                                                      OpStore %632 %650 
                                         f32 %651 = OpLoad %632 
                                         f32 %652 = OpLoad %632 
                                         f32 %653 = OpFMul %651 %652 
                                                      OpStore %293 %653 
                                         f32 %654 = OpLoad %293 
                                         f32 %655 = OpLoad %293 
                                         f32 %656 = OpFMul %654 %655 
                                                      OpStore %293 %656 
                                         f32 %657 = OpLoad %632 
                                         f32 %658 = OpLoad %293 
                                         f32 %659 = OpFMul %657 %658 
                                                      OpStore %632 %659 
                                Private f32* %660 = OpAccessChain %609 %112 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %632 
                                         f32 %663 = OpFMul %661 %662 
                                         f32 %664 = OpFAdd %663 %75 
                                Private f32* %665 = OpAccessChain %609 %112 
                                                      OpStore %665 %664 
                                Private f32* %666 = OpAccessChain %609 %112 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpLoad %627 
                                         f32 %669 = OpFMul %667 %668 
                                Private f32* %670 = OpAccessChain %609 %112 
                                                      OpStore %670 %669 
                                         f32 %671 = OpLoad %69 
                                         f32 %672 = OpLoad %69 
                                         f32 %673 = OpFMul %671 %672 
                                                      OpStore %627 %673 
                                         f32 %674 = OpLoad %627 
                                         f32 %676 = OpExtInst %1 40 %674 %675 
                                                      OpStore %627 %676 
                                         f32 %677 = OpLoad %627 
                                         f32 %678 = OpFNegate %677 
                                         f32 %679 = OpFAdd %678 %75 
                                                      OpStore %69 %679 
                                         f32 %680 = OpLoad %27 
                                         f32 %681 = OpExtInst %1 4 %680 
                                         f32 %682 = OpLoad %69 
                                         f32 %683 = OpFMul %681 %682 
                                         f32 %684 = OpLoad %627 
                                         f32 %685 = OpFAdd %683 %684 
                                                      OpStore %293 %685 
                                Private f32* %686 = OpAccessChain %35 %112 
                                         f32 %687 = OpLoad %686 
                                         f32 %688 = OpLoad %69 
                                         f32 %689 = OpFMul %687 %688 
                                         f32 %690 = OpLoad %627 
                                         f32 %691 = OpFAdd %689 %690 
                                                      OpStore %69 %691 
                                         f32 %692 = OpLoad %27 
                                         f32 %693 = OpExtInst %1 4 %692 
                                         f32 %694 = OpLoad %69 
                                         f32 %695 = OpFMul %693 %694 
                                                      OpStore %27 %695 
                                Private f32* %696 = OpAccessChain %35 %112 
                                         f32 %697 = OpLoad %696 
                                         f32 %698 = OpLoad %293 
                                         f32 %699 = OpFMul %697 %698 
                                         f32 %700 = OpLoad %27 
                                         f32 %701 = OpFAdd %699 %700 
                                                      OpStore %27 %701 
                                         f32 %702 = OpLoad %27 
                                         f32 %704 = OpFAdd %702 %703 
                                                      OpStore %27 %704 
                                         f32 %706 = OpLoad %27 
                                         f32 %707 = OpFDiv %705 %706 
                                                      OpStore %27 %707 
                                         f32 %708 = OpLoad %627 
                                         f32 %709 = OpLoad %627 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %69 %710 
                                         f32 %711 = OpLoad %590 
                                         f32 %712 = OpLoad %69 
                                         f32 %713 = OpFMul %711 %712 
                                         f32 %714 = OpLoad %590 
                                         f32 %715 = OpFNegate %714 
                                         f32 %716 = OpFAdd %713 %715 
                                                      OpStore %293 %716 
                                         f32 %717 = OpLoad %293 
                                         f32 %718 = OpLoad %590 
                                         f32 %719 = OpFMul %717 %718 
                                         f32 %720 = OpFAdd %719 %75 
                                                      OpStore %590 %720 
                                         f32 %721 = OpLoad %69 
                                         f32 %723 = OpFMul %721 %722 
                                                      OpStore %69 %723 
                                         f32 %724 = OpLoad %590 
                                         f32 %725 = OpLoad %590 
                                         f32 %726 = OpFMul %724 %725 
                                         f32 %728 = OpFAdd %726 %727 
                                                      OpStore %590 %728 
                                         f32 %729 = OpLoad %69 
                                         f32 %730 = OpLoad %590 
                                         f32 %731 = OpFDiv %729 %730 
                                                      OpStore %590 %731 
                                         f32 %732 = OpLoad %27 
                                         f32 %733 = OpLoad %590 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %609 %126 
                                                      OpStore %735 %734 
                                       f32_4 %736 = OpLoad %35 
                                       f32_2 %737 = OpVectorShuffle %736 %736 0 0 
                                       f32_3 %738 = OpLoad %609 
                                       f32_2 %739 = OpVectorShuffle %738 %738 0 2 
                                       f32_2 %740 = OpFMul %737 %739 
                                       f32_3 %741 = OpLoad %609 
                                       f32_3 %742 = OpVectorShuffle %741 %740 3 1 4 
                                                      OpStore %609 %742 
                                Private f32* %743 = OpAccessChain %609 %126 
                                         f32 %744 = OpLoad %743 
                                         f32 %746 = OpFMul %744 %745 
                                                      OpStore %27 %746 
                                         f32 %747 = OpLoad %27 
                                         f32 %748 = OpExtInst %1 40 %747 %137 
                                                      OpStore %27 %748 
                                         f32 %749 = OpLoad %627 
                                         f32 %750 = OpLoad %627 
                                         f32 %751 = OpFMul %749 %750 
                                         f32 %752 = OpFAdd %751 %75 
                                                      OpStore %627 %752 
                                         f32 %753 = OpLoad %627 
                                         f32 %754 = OpFDiv %75 %753 
                                                      OpStore %627 %754 
                                       f32_4 %755 = OpLoad %106 
                                       f32_3 %756 = OpVectorShuffle %755 %755 0 1 2 
                                       f32_4 %757 = OpLoad %106 
                                       f32_3 %758 = OpVectorShuffle %757 %757 0 1 2 
                                         f32 %759 = OpDot %756 %758 
                                Private f32* %760 = OpAccessChain %35 %112 
                                                      OpStore %760 %759 
                                Private f32* %762 = OpAccessChain %35 %112 
                                         f32 %763 = OpLoad %762 
                                        bool %764 = OpFOrdNotEqual %763 %137 
                                                      OpStore %761 %764 
                                        bool %765 = OpLoad %761 
                                         f32 %766 = OpSelect %765 %75 %137 
                                Private f32* %767 = OpAccessChain %35 %112 
                                                      OpStore %767 %766 
                                         f32 %768 = OpLoad %27 
                                Private f32* %769 = OpAccessChain %35 %112 
                                         f32 %770 = OpLoad %769 
                                         f32 %771 = OpFMul %768 %770 
                                                      OpStore %27 %771 
                                         f32 %772 = OpLoad %77 
                                         f32 %773 = OpFNegate %772 
                                Uniform f32* %774 = OpAccessChain %17 %70 
                                         f32 %775 = OpLoad %774 
                                         f32 %776 = OpFAdd %773 %775 
                                Private f32* %777 = OpAccessChain %35 %112 
                                                      OpStore %777 %776 
                                Private f32* %778 = OpAccessChain %35 %112 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFAdd %779 %75 
                                Private f32* %781 = OpAccessChain %35 %112 
                                                      OpStore %781 %780 
                                Private f32* %782 = OpAccessChain %35 %112 
                                         f32 %783 = OpLoad %782 
                                         f32 %784 = OpExtInst %1 43 %783 %137 %75 
                                Private f32* %785 = OpAccessChain %35 %112 
                                                      OpStore %785 %784 
                              Uniform f32_4* %787 = OpAccessChain %17 %786 
                                       f32_4 %788 = OpLoad %787 
                                       f32_3 %789 = OpVectorShuffle %788 %788 0 1 2 
                                       f32_3 %790 = OpLoad %609 
                                       f32_3 %791 = OpVectorShuffle %790 %790 0 0 0 
                                       f32_3 %792 = OpFMul %789 %791 
                                       f32_4 %793 = OpLoad %99 
                                       f32_3 %794 = OpVectorShuffle %793 %793 0 1 2 
                                       f32_3 %795 = OpFAdd %792 %794 
                                       f32_4 %796 = OpLoad %87 
                                       f32_4 %797 = OpVectorShuffle %796 %795 4 5 6 3 
                                                      OpStore %87 %797 
                                         f32 %798 = OpLoad %27 
                                       f32_3 %799 = OpCompositeConstruct %798 %798 %798 
                              Uniform f32_4* %800 = OpAccessChain %17 %786 
                                       f32_4 %801 = OpLoad %800 
                                       f32_3 %802 = OpVectorShuffle %801 %801 0 1 2 
                                       f32_3 %803 = OpFMul %799 %802 
                                       f32_4 %804 = OpLoad %99 
                                       f32_4 %805 = OpVectorShuffle %804 %803 4 5 6 3 
                                                      OpStore %99 %805 
                                Private f32* %806 = OpAccessChain %9 %112 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFNegate %807 
                                         f32 %809 = OpFAdd %808 %75 
                                Private f32* %810 = OpAccessChain %9 %112 
                                                      OpStore %810 %809 
                                Private f32* %811 = OpAccessChain %9 %112 
                                         f32 %812 = OpLoad %811 
                                Private f32* %813 = OpAccessChain %9 %112 
                                         f32 %814 = OpLoad %813 
                                         f32 %815 = OpFMul %812 %814 
                                Private f32* %816 = OpAccessChain %609 %112 
                                                      OpStore %816 %815 
                                Private f32* %817 = OpAccessChain %609 %112 
                                         f32 %818 = OpLoad %817 
                                Private f32* %819 = OpAccessChain %609 %112 
                                         f32 %820 = OpLoad %819 
                                         f32 %821 = OpFMul %818 %820 
                                Private f32* %822 = OpAccessChain %609 %112 
                                                      OpStore %822 %821 
                                Private f32* %823 = OpAccessChain %9 %112 
                                         f32 %824 = OpLoad %823 
                                Private f32* %825 = OpAccessChain %609 %112 
                                         f32 %826 = OpLoad %825 
                                         f32 %827 = OpFMul %824 %826 
                                Private f32* %828 = OpAccessChain %9 %112 
                                                      OpStore %828 %827 
                                       f32_4 %829 = OpLoad %106 
                                       f32_3 %830 = OpVectorShuffle %829 %829 0 1 2 
                                       f32_3 %831 = OpFNegate %830 
                                       f32_3 %833 = OpFAdd %831 %832 
                                                      OpStore %178 %833 
                                       f32_3 %834 = OpLoad %178 
                                       f32_4 %835 = OpLoad %9 
                                       f32_3 %836 = OpVectorShuffle %835 %835 0 0 0 
                                       f32_3 %837 = OpFMul %834 %836 
                                       f32_4 %838 = OpLoad %106 
                                       f32_3 %839 = OpVectorShuffle %838 %838 0 1 2 
                                       f32_3 %840 = OpFAdd %837 %839 
                                       f32_4 %841 = OpLoad %9 
                                       f32_4 %842 = OpVectorShuffle %841 %840 4 5 2 6 
                                                      OpStore %9 %842 
                                       f32_4 %843 = OpLoad %9 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 3 
                                       f32_4 %845 = OpLoad %99 
                                       f32_3 %846 = OpVectorShuffle %845 %845 0 1 2 
                                       f32_3 %847 = OpFMul %844 %846 
                                       f32_4 %848 = OpLoad %9 
                                       f32_4 %849 = OpVectorShuffle %848 %847 4 5 2 6 
                                                      OpStore %9 %849 
                                       f32_3 %850 = OpLoad %61 
                                       f32_4 %851 = OpLoad %87 
                                       f32_3 %852 = OpVectorShuffle %851 %851 0 1 2 
                                       f32_3 %853 = OpFMul %850 %852 
                                       f32_4 %854 = OpLoad %9 
                                       f32_3 %855 = OpVectorShuffle %854 %854 0 1 3 
                                       f32_3 %856 = OpFAdd %853 %855 
                                       f32_4 %857 = OpLoad %9 
                                       f32_4 %858 = OpVectorShuffle %857 %856 4 5 2 6 
                                                      OpStore %9 %858 
                                       f32_3 %859 = OpLoad %166 
                                         f32 %860 = OpLoad %627 
                                       f32_3 %861 = OpCompositeConstruct %860 %860 %860 
                                       f32_3 %862 = OpFMul %859 %861 
                                                      OpStore %61 %862 
                                       f32_4 %863 = OpLoad %106 
                                       f32_3 %864 = OpVectorShuffle %863 %863 0 1 2 
                                       f32_3 %865 = OpFNegate %864 
                                       f32_4 %866 = OpLoad %35 
                                       f32_3 %867 = OpVectorShuffle %866 %866 0 0 0 
                                       f32_3 %868 = OpFAdd %865 %867 
                                       f32_4 %869 = OpLoad %35 
                                       f32_4 %870 = OpVectorShuffle %869 %868 4 5 2 6 
                                                      OpStore %35 %870 
                                         f32 %871 = OpLoad %632 
                                       f32_3 %872 = OpCompositeConstruct %871 %871 %871 
                                       f32_4 %873 = OpLoad %35 
                                       f32_3 %874 = OpVectorShuffle %873 %873 0 1 3 
                                       f32_3 %875 = OpFMul %872 %874 
                                       f32_4 %876 = OpLoad %106 
                                       f32_3 %877 = OpVectorShuffle %876 %876 0 1 2 
                                       f32_3 %878 = OpFAdd %875 %877 
                                       f32_4 %879 = OpLoad %35 
                                       f32_4 %880 = OpVectorShuffle %879 %878 4 5 6 3 
                                                      OpStore %35 %880 
                                       f32_3 %881 = OpLoad %61 
                                       f32_4 %882 = OpLoad %35 
                                       f32_3 %883 = OpVectorShuffle %882 %882 0 1 2 
                                       f32_3 %884 = OpFMul %881 %883 
                                       f32_4 %885 = OpLoad %9 
                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 3 
                                       f32_3 %887 = OpFAdd %884 %886 
                                       f32_4 %888 = OpLoad %9 
                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 6 3 
                                                      OpStore %9 %889 
                                       f32_3 %892 = OpLoad %44 
                              Uniform f32_4* %893 = OpAccessChain %17 %63 
                                       f32_4 %894 = OpLoad %893 
                                       f32_3 %895 = OpVectorShuffle %894 %894 0 1 2 
                                       f32_3 %896 = OpFMul %892 %895 
                                       f32_4 %897 = OpLoad %9 
                                       f32_3 %898 = OpVectorShuffle %897 %897 0 1 2 
                                       f32_3 %899 = OpFAdd %896 %898 
                                       f32_4 %900 = OpLoad %891 
                                       f32_4 %901 = OpVectorShuffle %900 %899 4 5 6 3 
                                                      OpStore %891 %901 
                                 Output f32* %903 = OpAccessChain %891 %104 
                                                      OpStore %903 %75 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(4) uniform  sampler2D _posTex;
UNITY_LOCATION(5) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat37 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat38 = (-u_xlat37) + u_xlat38;
    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat38 + u_xlat37;
    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat38 = (-u_xlat4.x) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat38 + u_xlat4.x;
    u_xlat38 = (-_Glossiness) + 1.0;
    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat39 = u_xlat39 + u_xlat39;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat37) * _LightColor0.xyz;
    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat37 = inversesqrt(u_xlat37);
        u_xlat6.xyz = vec3(u_xlat37) * u_xlat4.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat37 = min(u_xlat7.y, u_xlat7.x);
        u_xlat37 = min(u_xlat7.z, u_xlat37);
        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat37 = (-u_xlat38) * 0.699999988 + 1.70000005;
    u_xlat37 = u_xlat37 * u_xlat38;
    u_xlat37 = u_xlat37 * 6.0;
    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat37);
    u_xlat39 = u_xlat6.w + -1.0;
    u_xlat39 = unity_SpecCube0_HDR.w * u_xlat39 + 1.0;
    u_xlat39 = log2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.y;
    u_xlat39 = exp2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat39);
    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = inversesqrt(u_xlat40);
            u_xlat8.xyz = vec3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat37);
        u_xlat37 = u_xlat4.w + -1.0;
        u_xlat37 = unity_SpecCube1_HDR.w * u_xlat37 + 1.0;
        u_xlat37 = log2(u_xlat37);
        u_xlat37 = u_xlat37 * unity_SpecCube1_HDR.y;
        u_xlat37 = exp2(u_xlat37);
        u_xlat37 = u_xlat37 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat37);
        u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz + (-u_xlat4.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
    }
    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat4.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
    u_xlat6.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat37 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat37) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat38));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat39 = u_xlat25 * u_xlat25;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat25 = u_xlat25 * u_xlat39;
    u_xlat12.x = u_xlat12.x * u_xlat25 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat38 * u_xlat38;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat38 = (-u_xlat24) + 1.0;
    u_xlat39 = abs(u_xlat36) * u_xlat38 + u_xlat24;
    u_xlat38 = u_xlat1.x * u_xlat38 + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat38;
    u_xlat36 = u_xlat1.x * u_xlat39 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat38 = u_xlat24 * u_xlat24;
    u_xlat39 = u_xlat13 * u_xlat38 + (-u_xlat13);
    u_xlat13 = u_xlat39 * u_xlat13 + 1.0;
    u_xlat38 = u_xlat38 * 0.318309873;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat13 = u_xlat38 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat12.z = u_xlat36 * 3.14159274;
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat36 = max(u_xlat12.z, 0.0);
    u_xlat24 = u_xlat24 * u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat36 * u_xlat1.x;
    u_xlat1.x = (-u_xlat37) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat8.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat24);
    u_xlat1.xyw = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyw + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 416
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %233 %238 %239 %375 %397 %409 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %231 0 BuiltIn 231 
                                                      OpMemberDecorate %231 1 BuiltIn 231 
                                                      OpMemberDecorate %231 2 BuiltIn 231 
                                                      OpDecorate %231 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 238 
                                                      OpDecorate %239 Location 239 
                                                      OpDecorate vs_TEXCOORD1 Location 375 
                                                      OpDecorate vs_TEXCOORD5 Location 397 
                                                      OpDecorate vs_TEXCOORD6 Location 409 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 8 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 9 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 7 
                                         i32 %119 = OpConstant 6 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 2 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %205 = OpConstant 4 
                                             %230 = OpTypeArray %6 %20 
                                             %231 = OpTypeStruct %7 %6 %230 
                                             %232 = OpTypePointer Output %231 
        Output struct {f32_4; f32; f32[1];}* %233 = OpVariable Output 
                                             %235 = OpTypePointer Output %7 
                                             %237 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %239 = OpVariable Input 
                                         i32 %242 = OpConstant 10 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_2 %266 = OpConstantComposite %265 %265 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_2 %269 = OpConstantComposite %268 %268 
                                Private f32* %273 = OpVariable Private 
                                         f32 %282 = OpConstant 3.674022E-40 
                                         f32 %283 = OpConstant 3.674022E-40 
                                       f32_2 %284 = OpConstantComposite %282 %283 
                                       f32_2 %286 = OpConstantComposite %56 %56 
                                         u32 %290 = OpConstant 2 
                                       f32_3 %308 = OpConstantComposite %56 %56 %56 
                                             %320 = OpTypeBool 
                                             %321 = OpTypePointer Private %320 
                               Private bool* %322 = OpVariable Private 
                                       f32_4 %323 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %324 = OpConstant 5 
                                             %328 = OpTypeVector %320 4 
                                             %332 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                       f32_2 %393 = OpConstantComposite %283 %283 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %410 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %333 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %18 %167 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %166 %171 
                                                      OpStore %164 %172 
                              Uniform f32_4* %173 = OpAccessChain %18 %167 %19 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %114 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %164 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %164 %179 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %167 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %18 %205 %168 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpFMul %204 %207 
                                                      OpStore %114 %208 
                              Uniform f32_4* %209 = OpAccessChain %18 %205 %19 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %164 
                                       f32_4 %212 = OpVectorShuffle %211 %211 0 0 0 0 
                                       f32_4 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %114 
                                       f32_4 %215 = OpFAdd %213 %214 
                                                      OpStore %114 %215 
                              Uniform f32_4* %216 = OpAccessChain %18 %205 %167 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %164 
                                       f32_4 %219 = OpVectorShuffle %218 %218 2 2 2 2 
                                       f32_4 %220 = OpFMul %217 %219 
                                       f32_4 %221 = OpLoad %114 
                                       f32_4 %222 = OpFAdd %220 %221 
                                                      OpStore %114 %222 
                              Uniform f32_4* %223 = OpAccessChain %18 %205 %188 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %164 
                                       f32_4 %226 = OpVectorShuffle %225 %225 3 3 3 3 
                                       f32_4 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %114 
                                       f32_4 %229 = OpFAdd %227 %228 
                                                      OpStore %114 %229 
                                       f32_4 %234 = OpLoad %114 
                               Output f32_4* %236 = OpAccessChain %233 %19 
                                                      OpStore %236 %234 
                                       f32_4 %240 = OpLoad %239 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                              Uniform f32_4* %243 = OpAccessChain %18 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                                       f32_2 %246 = OpFMul %241 %245 
                              Uniform f32_4* %247 = OpAccessChain %18 %242 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 2 3 
                                       f32_2 %250 = OpFAdd %246 %249 
                                                      OpStore vs_TEXCOORD0 %250 
                                Private f32* %251 = OpAccessChain %76 %20 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpExtInst %1 8 %252 
                                Private f32* %254 = OpAccessChain %164 %29 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %164 %29 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFNegate %256 
                                         f32 %258 = OpFMul %257 %146 
                                Private f32* %259 = OpAccessChain %76 %29 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %164 %20 
                                                      OpStore %262 %261 
                                       f32_4 %263 = OpLoad %164 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                       f32_2 %267 = OpFMul %264 %266 
                                       f32_2 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %76 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 2 3 
                                                      OpStore %76 %272 
                                       f32_4 %274 = OpLoad %76 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_4 %276 = OpLoad %76 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                         f32 %278 = OpDot %275 %277 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                       f32_2 %280 = OpCompositeConstruct %279 %279 
                                       f32_2 %281 = OpFNegate %280 
                                       f32_2 %285 = OpFMul %281 %284 
                                       f32_2 %287 = OpFAdd %285 %286 
                                       f32_4 %288 = OpLoad %164 
                                       f32_4 %289 = OpVectorShuffle %288 %287 0 1 4 5 
                                                      OpStore %164 %289 
                                Private f32* %291 = OpAccessChain %164 %290 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpExtInst %1 31 %292 
                                                      OpStore %273 %293 
                                       f32_4 %294 = OpLoad %76 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                         f32 %296 = OpLoad %273 
                                       f32_2 %297 = OpCompositeConstruct %296 %296 
                                       f32_2 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %164 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 2 3 
                                                      OpStore %164 %300 
                                       f32_4 %301 = OpLoad %164 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 3 
                                       f32_3 %303 = OpExtInst %1 40 %302 %110 
                                       f32_4 %304 = OpLoad %76 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %76 %305 
                                       f32_4 %306 = OpLoad %76 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %309 = OpExtInst %1 37 %307 %308 
                                       f32_4 %310 = OpLoad %76 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %76 %311 
                                Private f32* %312 = OpAccessChain %76 %29 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFNegate %313 
                                Private f32* %315 = OpAccessChain %76 %154 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %9 %29 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFNegate %317 
                                Private f32* %319 = OpAccessChain %9 %154 
                                                      OpStore %319 %318 
                                Uniform f32* %325 = OpAccessChain %18 %324 
                                         f32 %326 = OpLoad %325 
                                       f32_4 %327 = OpCompositeConstruct %326 %326 %326 %326 
                                      bool_4 %329 = OpFOrdNotEqual %323 %327 
                                        bool %330 = OpAny %329 
                                                      OpStore %322 %330 
                                        bool %331 = OpLoad %322 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %331 %334 %338 
                                             %334 = OpLabel 
                                       f32_4 %336 = OpLoad %76 
                                       f32_3 %337 = OpVectorShuffle %336 %336 3 2 1 
                                                      OpStore %333 %337 
                                                      OpBranch %335 
                                             %338 = OpLabel 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 3 1 2 
                                                      OpStore %333 %340 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_3 %341 = OpLoad %333 
                                       f32_4 %342 = OpLoad %9 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %9 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                              Uniform f32_4* %346 = OpAccessChain %18 %188 %19 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                         f32 %349 = OpDot %345 %348 
                                Private f32* %350 = OpAccessChain %76 %29 
                                                      OpStore %350 %349 
                                       f32_4 %351 = OpLoad %9 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                              Uniform f32_4* %353 = OpAccessChain %18 %188 %168 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                         f32 %356 = OpDot %352 %355 
                                Private f32* %357 = OpAccessChain %76 %20 
                                                      OpStore %357 %356 
                                       f32_4 %358 = OpLoad %9 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                              Uniform f32_4* %360 = OpAccessChain %18 %188 %167 
                                       f32_4 %361 = OpLoad %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                         f32 %363 = OpDot %359 %362 
                                Private f32* %364 = OpAccessChain %76 %290 
                                                      OpStore %364 %363 
                                       f32_4 %365 = OpLoad %76 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_4 %367 = OpLoad %76 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                         f32 %369 = OpDot %366 %368 
                                Private f32* %370 = OpAccessChain %9 %29 
                                                      OpStore %370 %369 
                                Private f32* %371 = OpAccessChain %9 %29 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpExtInst %1 32 %372 
                                Private f32* %374 = OpAccessChain %9 %29 
                                                      OpStore %374 %373 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 0 0 
                                       f32_4 %378 = OpLoad %76 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %377 %379 
                                                      OpStore vs_TEXCOORD1 %380 
                                Private f32* %381 = OpAccessChain %114 %20 
                                         f32 %382 = OpLoad %381 
                                Uniform f32* %383 = OpAccessChain %18 %168 %29 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFMul %382 %384 
                                Private f32* %386 = OpAccessChain %9 %29 
                                                      OpStore %386 %385 
                                Private f32* %387 = OpAccessChain %9 %29 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %388 %283 
                                Private f32* %390 = OpAccessChain %9 %154 
                                                      OpStore %390 %389 
                                       f32_4 %391 = OpLoad %114 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 3 
                                       f32_2 %394 = OpFMul %392 %393 
                                       f32_4 %395 = OpLoad %9 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 1 5 3 
                                                      OpStore %9 %396 
                                       f32_4 %398 = OpLoad %114 
                                       f32_2 %399 = OpVectorShuffle %398 %398 2 3 
                                       f32_4 %400 = OpLoad vs_TEXCOORD5 
                                       f32_4 %401 = OpVectorShuffle %400 %399 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %401 
                                       f32_4 %402 = OpLoad %9 
                                       f32_2 %403 = OpVectorShuffle %402 %402 2 2 
                                       f32_4 %404 = OpLoad %9 
                                       f32_2 %405 = OpVectorShuffle %404 %404 0 3 
                                       f32_2 %406 = OpFAdd %403 %405 
                                       f32_4 %407 = OpLoad vs_TEXCOORD5 
                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %408 
                                                      OpStore vs_TEXCOORD6 %323 
                                 Output f32* %411 = OpAccessChain %233 %19 %20 
                                         f32 %412 = OpLoad %411 
                                         f32 %413 = OpFNegate %412 
                                 Output f32* %414 = OpAccessChain %233 %19 %20 
                                                      OpStore %414 %413 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 945
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %60 %135 %169 %931 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate vs_TEXCOORD5 Location 135 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate vs_TEXCOORD1 Location 169 
                                                      OpDecorate %336 DescriptorSet 336 
                                                      OpDecorate %336 Binding 336 
                                                      OpDecorate %338 DescriptorSet 338 
                                                      OpDecorate %338 Binding 338 
                                                      OpDecorate %490 DescriptorSet 490 
                                                      OpDecorate %490 Binding 490 
                                                      OpDecorate %931 Location 931 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %7 %17 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %10 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_4* %38 = OpVariable Private 
                                              %46 = OpTypePointer Private %10 
                               Private f32_3* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypePointer UniformConstant %48 
         UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampler 
                                              %53 = OpTypePointer UniformConstant %52 
                     UniformConstant sampler* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampledImage %48 
                                              %58 = OpTypeVector %6 2 
                                              %59 = OpTypePointer Input %58 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %64 = OpVariable Private 
                                          i32 %66 = OpConstant 16 
                                              %67 = OpTypePointer Uniform %7 
                               Private f32_4* %72 = OpVariable Private 
                                          i32 %73 = OpConstant 4 
                                          u32 %74 = OpConstant 2 
                                              %75 = OpTypePointer Uniform %6 
                                          u32 %78 = OpConstant 0 
                                          i32 %80 = OpConstant 1 
                                          u32 %83 = OpConstant 1 
                                          i32 %85 = OpConstant 2 
                                 Private f32* %89 = OpVariable Private 
                                          i32 %96 = OpConstant 3 
                                Private f32* %104 = OpVariable Private 
                                         u32 %116 = OpConstant 3 
                                         f32 %131 = OpConstant 3.674022E-40 
                                         f32 %132 = OpConstant 3.674022E-40 
                                             %134 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %143 = OpVariable UniformConstant 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                Private f32* %152 = OpVariable Private 
                                         i32 %161 = OpConstant 14 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %186 = OpVariable Private 
                                         i32 %189 = OpConstant 13 
                                             %194 = OpTypeBool 
                                             %195 = OpTypePointer Private %194 
                               Private bool* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 7 
                              Private f32_4* %211 = OpVariable Private 
                              Private f32_3* %219 = OpVariable Private 
                                         i32 %222 = OpConstant 5 
                              Private f32_3* %231 = OpVariable Private 
                                         i32 %234 = OpConstant 6 
                                             %243 = OpTypeVector %194 3 
                                             %244 = OpTypePointer Private %243 
                             Private bool_3* %245 = OpVariable Private 
                                       f32_4 %246 = OpConstantComposite %131 %131 %131 %131 
                                             %249 = OpTypeVector %194 4 
                                             %252 = OpTypePointer Function %10 
                                             %257 = OpTypePointer Function %6 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         f32 %326 = OpConstant 3.674022E-40 
                                         f32 %332 = OpConstant 3.674022E-40 
                                             %334 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %335 = OpTypePointer UniformConstant %334 
      UniformConstant read_only TextureCube* %336 = OpVariable UniformConstant 
                    UniformConstant sampler* %338 = OpVariable UniformConstant 
                                             %340 = OpTypeSampledImage %334 
                                         f32 %348 = OpConstant 3.674022E-40 
                                         i32 %350 = OpConstant 8 
                               Private bool* %373 = OpVariable Private 
                                         f32 %376 = OpConstant 3.674022E-40 
                                         i32 %381 = OpConstant 11 
                                Private f32* %388 = OpVariable Private 
                              Private f32_3* %401 = OpVariable Private 
                                         i32 %404 = OpConstant 9 
                              Private f32_3* %412 = OpVariable Private 
                                         i32 %415 = OpConstant 10 
                             Private bool_3* %423 = OpVariable Private 
      UniformConstant read_only TextureCube* %490 = OpVariable UniformConstant 
                                         i32 %501 = OpConstant 12 
                                         f32 %562 = OpConstant 3.674022E-40 
                                       f32_3 %563 = OpConstantComposite %562 %562 %562 
                                         i32 %567 = OpConstant 15 
                                         f32 %582 = OpConstant 3.674022E-40 
                                       f32_3 %583 = OpConstantComposite %582 %582 %582 
                                         f32 %590 = OpConstant 3.674022E-40 
                                         f32 %614 = OpConstant 3.674022E-40 
                                Private f32* %641 = OpVariable Private 
                              Private f32_3* %660 = OpVariable Private 
                                         f32 %675 = OpConstant 3.674022E-40 
                                Private f32* %678 = OpVariable Private 
                                Private f32* %683 = OpVariable Private 
                                         f32 %726 = OpConstant 3.674022E-40 
                                         f32 %754 = OpConstant 3.674022E-40 
                                         f32 %756 = OpConstant 3.674022E-40 
                                         f32 %773 = OpConstant 3.674022E-40 
                                         f32 %778 = OpConstant 3.674022E-40 
                                         f32 %796 = OpConstant 3.674022E-40 
                               Private bool* %812 = OpVariable Private 
                                       f32_3 %873 = OpConstantComposite %132 %132 %132 
                                             %930 = OpTypePointer Output %7 
                               Output f32_4* %931 = OpVariable Output 
                                             %942 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %253 = OpVariable Function 
                               Function f32* %258 = OpVariable Function 
                               Function f32* %270 = OpVariable Function 
                               Function f32* %282 = OpVariable Function 
                             Function f32_3* %428 = OpVariable Function 
                               Function f32* %432 = OpVariable Function 
                               Function f32* %444 = OpVariable Function 
                               Function f32* %456 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %14 %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
                                                      OpStore %9 %28 
                                        f32_4 %31 = OpLoad %9 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                          f32 %35 = OpDot %32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                          f32 %37 = OpExtInst %1 32 %36 
                                                      OpStore %30 %37 
                                          f32 %39 = OpLoad %30 
                                        f32_3 %40 = OpCompositeConstruct %39 %39 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %38 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 6 3 
                                                      OpStore %38 %45 
                          read_only Texture2D %51 = OpLoad %50 
                                      sampler %55 = OpLoad %54 
                   read_only Texture2DSampled %57 = OpSampledImage %51 %55 
                                        f32_2 %61 = OpLoad vs_TEXCOORD0 
                                        f32_4 %62 = OpImageSampleImplicitLod %57 %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                                      OpStore %47 %63 
                                        f32_3 %65 = OpLoad %47 
                               Uniform f32_4* %68 = OpAccessChain %20 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                                      OpStore %64 %71 
                                 Uniform f32* %76 = OpAccessChain %20 %73 %22 %74 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %72 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %20 %73 %80 %74 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %84 = OpAccessChain %72 %83 
                                                      OpStore %84 %82 
                                 Uniform f32* %86 = OpAccessChain %20 %73 %85 %74 
                                          f32 %87 = OpLoad %86 
                                 Private f32* %88 = OpAccessChain %72 %74 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %72 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                                      OpStore %89 %94 
                                        f32_3 %95 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %97 = OpAccessChain %20 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpFAdd %95 %100 
                                       f32_4 %102 = OpLoad %72 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %72 %103 
                                       f32_4 %105 = OpLoad %72 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %106 %108 
                                                      OpStore %104 %109 
                                         f32 %110 = OpLoad %104 
                                         f32 %111 = OpExtInst %1 31 %110 
                                                      OpStore %104 %111 
                                         f32 %112 = OpLoad %89 
                                         f32 %113 = OpFNegate %112 
                                         f32 %114 = OpLoad %104 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %104 %115 
                                Uniform f32* %117 = OpAccessChain %20 %96 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpLoad %104 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %121 = OpLoad %89 
                                         f32 %122 = OpFAdd %120 %121 
                                                      OpStore %89 %122 
                                         f32 %123 = OpLoad %89 
                                Uniform f32* %124 = OpAccessChain %20 %85 %74 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFMul %123 %125 
                                Uniform f32* %127 = OpAccessChain %20 %85 %116 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %126 %128 
                                                      OpStore %89 %129 
                                         f32 %130 = OpLoad %89 
                                         f32 %133 = OpExtInst %1 43 %130 %131 %132 
                                                      OpStore %89 %133 
                                       f32_4 %136 = OpLoad vs_TEXCOORD5 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_4 %138 = OpLoad vs_TEXCOORD5 
                                       f32_2 %139 = OpVectorShuffle %138 %138 3 3 
                                       f32_2 %140 = OpFDiv %137 %139 
                                       f32_4 %141 = OpLoad %72 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
                                                      OpStore %72 %142 
                         read_only Texture2D %144 = OpLoad %143 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %147 = OpSampledImage %144 %146 
                                       f32_4 %148 = OpLoad %72 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_4 %150 = OpImageSampleImplicitLod %147 %149 
                                         f32 %151 = OpCompositeExtract %150 0 
                                                      OpStore %104 %151 
                                         f32 %153 = OpLoad %104 
                                         f32 %154 = OpFNegate %153 
                                         f32 %155 = OpFAdd %154 %132 
                                                      OpStore %152 %155 
                                         f32 %156 = OpLoad %89 
                                         f32 %157 = OpLoad %152 
                                         f32 %158 = OpFMul %156 %157 
                                         f32 %159 = OpLoad %104 
                                         f32 %160 = OpFAdd %158 %159 
                                                      OpStore %89 %160 
                                Uniform f32* %162 = OpAccessChain %20 %161 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                         f32 %165 = OpFAdd %164 %132 
                                                      OpStore %104 %165 
                                       f32_4 %166 = OpLoad %38 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFNegate %167 
                                       f32_3 %170 = OpLoad vs_TEXCOORD1 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %152 %171 
                                         f32 %172 = OpLoad %152 
                                         f32 %173 = OpLoad %152 
                                         f32 %174 = OpFAdd %172 %173 
                                                      OpStore %152 %174 
                                       f32_3 %175 = OpLoad vs_TEXCOORD1 
                                         f32 %176 = OpLoad %152 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_3 %178 = OpFNegate %177 
                                       f32_3 %179 = OpFMul %175 %178 
                                       f32_4 %180 = OpLoad %38 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFNegate %181 
                                       f32_3 %183 = OpFAdd %179 %182 
                                       f32_4 %184 = OpLoad %72 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                      OpStore %72 %185 
                                         f32 %187 = OpLoad %89 
                                       f32_3 %188 = OpCompositeConstruct %187 %187 %187 
                              Uniform f32_4* %190 = OpAccessChain %20 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFMul %188 %192 
                                                      OpStore %186 %193 
                                Uniform f32* %198 = OpAccessChain %20 %197 %116 
                                         f32 %199 = OpLoad %198 
                                        bool %200 = OpFOrdLessThan %131 %199 
                                                      OpStore %196 %200 
                                        bool %201 = OpLoad %196 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %317 
                                             %202 = OpLabel 
                                       f32_4 %204 = OpLoad %72 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %72 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                                      OpStore %89 %208 
                                         f32 %209 = OpLoad %89 
                                         f32 %210 = OpExtInst %1 32 %209 
                                                      OpStore %89 %210 
                                         f32 %212 = OpLoad %89 
                                       f32_3 %213 = OpCompositeConstruct %212 %212 %212 
                                       f32_4 %214 = OpLoad %72 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_4 %217 = OpLoad %211 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %211 %218 
                                       f32_3 %220 = OpLoad vs_TEXCOORD2 
                                       f32_3 %221 = OpFNegate %220 
                              Uniform f32_4* %223 = OpAccessChain %20 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFAdd %221 %225 
                                                      OpStore %219 %226 
                                       f32_3 %227 = OpLoad %219 
                                       f32_4 %228 = OpLoad %211 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFDiv %227 %229 
                                                      OpStore %219 %230 
                                       f32_3 %232 = OpLoad vs_TEXCOORD2 
                                       f32_3 %233 = OpFNegate %232 
                              Uniform f32_4* %235 = OpAccessChain %20 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFAdd %233 %237 
                                                      OpStore %231 %238 
                                       f32_3 %239 = OpLoad %231 
                                       f32_4 %240 = OpLoad %211 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFDiv %239 %241 
                                                      OpStore %231 %242 
                                       f32_4 %247 = OpLoad %211 
                                       f32_4 %248 = OpVectorShuffle %247 %247 0 1 2 0 
                                      bool_4 %250 = OpFOrdLessThan %246 %248 
                                      bool_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                                      OpStore %245 %251 
                                       f32_3 %254 = OpLoad %219 
                                                      OpStore %253 %254 
                               Private bool* %255 = OpAccessChain %245 %78 
                                        bool %256 = OpLoad %255 
                                                      OpSelectionMerge %260 None 
                                                      OpBranchConditional %256 %259 %263 
                                             %259 = OpLabel 
                                Private f32* %261 = OpAccessChain %219 %78 
                                         f32 %262 = OpLoad %261 
                                                      OpStore %258 %262 
                                                      OpBranch %260 
                                             %263 = OpLabel 
                                Private f32* %264 = OpAccessChain %231 %78 
                                         f32 %265 = OpLoad %264 
                                                      OpStore %258 %265 
                                                      OpBranch %260 
                                             %260 = OpLabel 
                                         f32 %266 = OpLoad %258 
                               Function f32* %267 = OpAccessChain %253 %78 
                                                      OpStore %267 %266 
                               Private bool* %268 = OpAccessChain %245 %83 
                                        bool %269 = OpLoad %268 
                                                      OpSelectionMerge %272 None 
                                                      OpBranchConditional %269 %271 %275 
                                             %271 = OpLabel 
                                Private f32* %273 = OpAccessChain %219 %83 
                                         f32 %274 = OpLoad %273 
                                                      OpStore %270 %274 
                                                      OpBranch %272 
                                             %275 = OpLabel 
                                Private f32* %276 = OpAccessChain %231 %83 
                                         f32 %277 = OpLoad %276 
                                                      OpStore %270 %277 
                                                      OpBranch %272 
                                             %272 = OpLabel 
                                         f32 %278 = OpLoad %270 
                               Function f32* %279 = OpAccessChain %253 %83 
                                                      OpStore %279 %278 
                               Private bool* %280 = OpAccessChain %245 %74 
                                        bool %281 = OpLoad %280 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %281 %283 %287 
                                             %283 = OpLabel 
                                Private f32* %285 = OpAccessChain %219 %74 
                                         f32 %286 = OpLoad %285 
                                                      OpStore %282 %286 
                                                      OpBranch %284 
                                             %287 = OpLabel 
                                Private f32* %288 = OpAccessChain %231 %74 
                                         f32 %289 = OpLoad %288 
                                                      OpStore %282 %289 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                         f32 %290 = OpLoad %282 
                               Function f32* %291 = OpAccessChain %253 %74 
                                                      OpStore %291 %290 
                                       f32_3 %292 = OpLoad %253 
                                                      OpStore %219 %292 
                                Private f32* %293 = OpAccessChain %219 %83 
                                         f32 %294 = OpLoad %293 
                                Private f32* %295 = OpAccessChain %219 %78 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpExtInst %1 37 %294 %296 
                                                      OpStore %89 %297 
                                Private f32* %298 = OpAccessChain %219 %74 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpLoad %89 
                                         f32 %301 = OpExtInst %1 37 %299 %300 
                                                      OpStore %89 %301 
                                       f32_3 %302 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %303 = OpAccessChain %20 %197 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFNegate %305 
                                       f32_3 %307 = OpFAdd %302 %306 
                                                      OpStore %219 %307 
                                       f32_4 %308 = OpLoad %211 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                         f32 %310 = OpLoad %89 
                                       f32_3 %311 = OpCompositeConstruct %310 %310 %310 
                                       f32_3 %312 = OpFMul %309 %311 
                                       f32_3 %313 = OpLoad %219 
                                       f32_3 %314 = OpFAdd %312 %313 
                                       f32_4 %315 = OpLoad %211 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %211 %316 
                                                      OpBranch %203 
                                             %317 = OpLabel 
                                       f32_4 %318 = OpLoad %72 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_4 %320 = OpLoad %211 
                                       f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                                      OpStore %211 %321 
                                                      OpBranch %203 
                                             %203 = OpLabel 
                                         f32 %322 = OpLoad %104 
                                         f32 %323 = OpFNegate %322 
                                         f32 %325 = OpFMul %323 %324 
                                         f32 %327 = OpFAdd %325 %326 
                                                      OpStore %89 %327 
                                         f32 %328 = OpLoad %89 
                                         f32 %329 = OpLoad %104 
                                         f32 %330 = OpFMul %328 %329 
                                                      OpStore %89 %330 
                                         f32 %331 = OpLoad %89 
                                         f32 %333 = OpFMul %331 %332 
                                                      OpStore %89 %333 
                       read_only TextureCube %337 = OpLoad %336 
                                     sampler %339 = OpLoad %338 
                read_only TextureCubeSampled %341 = OpSampledImage %337 %339 
                                       f32_4 %342 = OpLoad %211 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                         f32 %344 = OpLoad %89 
                                       f32_4 %345 = OpImageSampleExplicitLod %341 %343 Lod %7 
                                                      OpStore %211 %345 
                                Private f32* %346 = OpAccessChain %211 %116 
                                         f32 %347 = OpLoad %346 
                                         f32 %349 = OpFAdd %347 %348 
                                                      OpStore %152 %349 
                                Uniform f32* %351 = OpAccessChain %20 %350 %116 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpLoad %152 
                                         f32 %354 = OpFMul %352 %353 
                                         f32 %355 = OpFAdd %354 %132 
                                                      OpStore %152 %355 
                                         f32 %356 = OpLoad %152 
                                         f32 %357 = OpExtInst %1 30 %356 
                                                      OpStore %152 %357 
                                         f32 %358 = OpLoad %152 
                                Uniform f32* %359 = OpAccessChain %20 %350 %83 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFMul %358 %360 
                                                      OpStore %152 %361 
                                         f32 %362 = OpLoad %152 
                                         f32 %363 = OpExtInst %1 29 %362 
                                                      OpStore %152 %363 
                                         f32 %364 = OpLoad %152 
                                Uniform f32* %365 = OpAccessChain %20 %350 %78 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFMul %364 %366 
                                                      OpStore %152 %367 
                                       f32_4 %368 = OpLoad %211 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                         f32 %370 = OpLoad %152 
                                       f32_3 %371 = OpCompositeConstruct %370 %370 %370 
                                       f32_3 %372 = OpFMul %369 %371 
                                                      OpStore %219 %372 
                                Uniform f32* %374 = OpAccessChain %20 %234 %116 
                                         f32 %375 = OpLoad %374 
                                        bool %377 = OpFOrdLessThan %375 %376 
                                                      OpStore %373 %377 
                                        bool %378 = OpLoad %373 
                                                      OpSelectionMerge %380 None 
                                                      OpBranchConditional %378 %379 %380 
                                             %379 = OpLabel 
                                Uniform f32* %382 = OpAccessChain %20 %381 %116 
                                         f32 %383 = OpLoad %382 
                                        bool %384 = OpFOrdLessThan %131 %383 
                                                      OpStore %373 %384 
                                        bool %385 = OpLoad %373 
                                                      OpSelectionMerge %387 None 
                                                      OpBranchConditional %385 %386 %387 
                                             %386 = OpLabel 
                                       f32_4 %389 = OpLoad %72 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_4 %391 = OpLoad %72 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpDot %390 %392 
                                                      OpStore %388 %393 
                                         f32 %394 = OpLoad %388 
                                         f32 %395 = OpExtInst %1 32 %394 
                                                      OpStore %388 %395 
                                         f32 %396 = OpLoad %388 
                                       f32_3 %397 = OpCompositeConstruct %396 %396 %396 
                                       f32_4 %398 = OpLoad %72 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_3 %400 = OpFMul %397 %399 
                                                      OpStore %231 %400 
                                       f32_3 %402 = OpLoad vs_TEXCOORD2 
                                       f32_3 %403 = OpFNegate %402 
                              Uniform f32_4* %405 = OpAccessChain %20 %404 
                                       f32_4 %406 = OpLoad %405 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpFAdd %403 %407 
                                                      OpStore %401 %408 
                                       f32_3 %409 = OpLoad %401 
                                       f32_3 %410 = OpLoad %231 
                                       f32_3 %411 = OpFDiv %409 %410 
                                                      OpStore %401 %411 
                                       f32_3 %413 = OpLoad vs_TEXCOORD2 
                                       f32_3 %414 = OpFNegate %413 
                              Uniform f32_4* %416 = OpAccessChain %20 %415 
                                       f32_4 %417 = OpLoad %416 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_3 %419 = OpFAdd %414 %418 
                                                      OpStore %412 %419 
                                       f32_3 %420 = OpLoad %412 
                                       f32_3 %421 = OpLoad %231 
                                       f32_3 %422 = OpFDiv %420 %421 
                                                      OpStore %412 %422 
                                       f32_3 %424 = OpLoad %231 
                                       f32_4 %425 = OpVectorShuffle %424 %424 0 1 2 0 
                                      bool_4 %426 = OpFOrdLessThan %246 %425 
                                      bool_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                                      OpStore %423 %427 
                                       f32_3 %429 = OpLoad %401 
                                                      OpStore %428 %429 
                               Private bool* %430 = OpAccessChain %423 %78 
                                        bool %431 = OpLoad %430 
                                                      OpSelectionMerge %434 None 
                                                      OpBranchConditional %431 %433 %437 
                                             %433 = OpLabel 
                                Private f32* %435 = OpAccessChain %401 %78 
                                         f32 %436 = OpLoad %435 
                                                      OpStore %432 %436 
                                                      OpBranch %434 
                                             %437 = OpLabel 
                                Private f32* %438 = OpAccessChain %412 %78 
                                         f32 %439 = OpLoad %438 
                                                      OpStore %432 %439 
                                                      OpBranch %434 
                                             %434 = OpLabel 
                                         f32 %440 = OpLoad %432 
                               Function f32* %441 = OpAccessChain %428 %78 
                                                      OpStore %441 %440 
                               Private bool* %442 = OpAccessChain %423 %83 
                                        bool %443 = OpLoad %442 
                                                      OpSelectionMerge %446 None 
                                                      OpBranchConditional %443 %445 %449 
                                             %445 = OpLabel 
                                Private f32* %447 = OpAccessChain %401 %83 
                                         f32 %448 = OpLoad %447 
                                                      OpStore %444 %448 
                                                      OpBranch %446 
                                             %449 = OpLabel 
                                Private f32* %450 = OpAccessChain %412 %83 
                                         f32 %451 = OpLoad %450 
                                                      OpStore %444 %451 
                                                      OpBranch %446 
                                             %446 = OpLabel 
                                         f32 %452 = OpLoad %444 
                               Function f32* %453 = OpAccessChain %428 %83 
                                                      OpStore %453 %452 
                               Private bool* %454 = OpAccessChain %423 %74 
                                        bool %455 = OpLoad %454 
                                                      OpSelectionMerge %458 None 
                                                      OpBranchConditional %455 %457 %461 
                                             %457 = OpLabel 
                                Private f32* %459 = OpAccessChain %401 %74 
                                         f32 %460 = OpLoad %459 
                                                      OpStore %456 %460 
                                                      OpBranch %458 
                                             %461 = OpLabel 
                                Private f32* %462 = OpAccessChain %412 %74 
                                         f32 %463 = OpLoad %462 
                                                      OpStore %456 %463 
                                                      OpBranch %458 
                                             %458 = OpLabel 
                                         f32 %464 = OpLoad %456 
                               Function f32* %465 = OpAccessChain %428 %74 
                                                      OpStore %465 %464 
                                       f32_3 %466 = OpLoad %428 
                                                      OpStore %401 %466 
                                Private f32* %467 = OpAccessChain %401 %83 
                                         f32 %468 = OpLoad %467 
                                Private f32* %469 = OpAccessChain %401 %78 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpExtInst %1 37 %468 %470 
                                                      OpStore %388 %471 
                                Private f32* %472 = OpAccessChain %401 %74 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpLoad %388 
                                         f32 %475 = OpExtInst %1 37 %473 %474 
                                                      OpStore %388 %475 
                                       f32_3 %476 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %477 = OpAccessChain %20 %381 
                                       f32_4 %478 = OpLoad %477 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFNegate %479 
                                       f32_3 %481 = OpFAdd %476 %480 
                                                      OpStore %401 %481 
                                       f32_3 %482 = OpLoad %231 
                                         f32 %483 = OpLoad %388 
                                       f32_3 %484 = OpCompositeConstruct %483 %483 %483 
                                       f32_3 %485 = OpFMul %482 %484 
                                       f32_3 %486 = OpLoad %401 
                                       f32_3 %487 = OpFAdd %485 %486 
                                       f32_4 %488 = OpLoad %72 
                                       f32_4 %489 = OpVectorShuffle %488 %487 4 5 6 3 
                                                      OpStore %72 %489 
                                                      OpBranch %387 
                                             %387 = OpLabel 
                       read_only TextureCube %491 = OpLoad %490 
                                     sampler %492 = OpLoad %338 
                read_only TextureCubeSampled %493 = OpSampledImage %491 %492 
                                       f32_4 %494 = OpLoad %72 
                                       f32_3 %495 = OpVectorShuffle %494 %494 0 1 2 
                                         f32 %496 = OpLoad %89 
                                       f32_4 %497 = OpImageSampleExplicitLod %493 %495 Lod %7 
                                                      OpStore %72 %497 
                                Private f32* %498 = OpAccessChain %72 %116 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %499 %348 
                                                      OpStore %89 %500 
                                Uniform f32* %502 = OpAccessChain %20 %501 %116 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpLoad %89 
                                         f32 %505 = OpFMul %503 %504 
                                         f32 %506 = OpFAdd %505 %132 
                                                      OpStore %89 %506 
                                         f32 %507 = OpLoad %89 
                                         f32 %508 = OpExtInst %1 30 %507 
                                                      OpStore %89 %508 
                                         f32 %509 = OpLoad %89 
                                Uniform f32* %510 = OpAccessChain %20 %501 %83 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpFMul %509 %511 
                                                      OpStore %89 %512 
                                         f32 %513 = OpLoad %89 
                                         f32 %514 = OpExtInst %1 29 %513 
                                                      OpStore %89 %514 
                                         f32 %515 = OpLoad %89 
                                Uniform f32* %516 = OpAccessChain %20 %501 %78 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFMul %515 %517 
                                                      OpStore %89 %518 
                                       f32_4 %519 = OpLoad %72 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                         f32 %521 = OpLoad %89 
                                       f32_3 %522 = OpCompositeConstruct %521 %521 %521 
                                       f32_3 %523 = OpFMul %520 %522 
                                       f32_4 %524 = OpLoad %72 
                                       f32_4 %525 = OpVectorShuffle %524 %523 4 5 6 3 
                                                      OpStore %72 %525 
                                         f32 %526 = OpLoad %152 
                                       f32_3 %527 = OpCompositeConstruct %526 %526 %526 
                                       f32_4 %528 = OpLoad %211 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFMul %527 %529 
                                       f32_4 %531 = OpLoad %72 
                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
                                       f32_3 %533 = OpFNegate %532 
                                       f32_3 %534 = OpFAdd %530 %533 
                                       f32_4 %535 = OpLoad %211 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %211 %536 
                              Uniform f32_4* %537 = OpAccessChain %20 %234 
                                       f32_4 %538 = OpLoad %537 
                                       f32_3 %539 = OpVectorShuffle %538 %538 3 3 3 
                                       f32_4 %540 = OpLoad %211 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                       f32_3 %542 = OpFMul %539 %541 
                                       f32_4 %543 = OpLoad %72 
                                       f32_3 %544 = OpVectorShuffle %543 %543 0 1 2 
                                       f32_3 %545 = OpFAdd %542 %544 
                                                      OpStore %219 %545 
                                                      OpBranch %380 
                                             %380 = OpLabel 
                                       f32_3 %546 = OpLoad vs_TEXCOORD1 
                                       f32_3 %547 = OpLoad vs_TEXCOORD1 
                                         f32 %548 = OpDot %546 %547 
                                                      OpStore %89 %548 
                                         f32 %549 = OpLoad %89 
                                         f32 %550 = OpExtInst %1 32 %549 
                                                      OpStore %89 %550 
                                         f32 %551 = OpLoad %89 
                                       f32_3 %552 = OpCompositeConstruct %551 %551 %551 
                                       f32_3 %553 = OpLoad vs_TEXCOORD1 
                                       f32_3 %554 = OpFMul %552 %553 
                                       f32_4 %555 = OpLoad %72 
                                       f32_4 %556 = OpVectorShuffle %555 %554 4 5 6 3 
                                                      OpStore %72 %556 
                                       f32_3 %557 = OpLoad %47 
                              Uniform f32_4* %558 = OpAccessChain %20 %66 
                                       f32_4 %559 = OpLoad %558 
                                       f32_3 %560 = OpVectorShuffle %559 %559 0 1 2 
                                       f32_3 %561 = OpFMul %557 %560 
                                       f32_3 %564 = OpFAdd %561 %563 
                                       f32_4 %565 = OpLoad %211 
                                       f32_4 %566 = OpVectorShuffle %565 %564 4 5 6 3 
                                                      OpStore %211 %566 
                                Uniform f32* %568 = OpAccessChain %20 %567 
                                         f32 %569 = OpLoad %568 
                                Uniform f32* %570 = OpAccessChain %20 %567 
                                         f32 %571 = OpLoad %570 
                                Uniform f32* %572 = OpAccessChain %20 %567 
                                         f32 %573 = OpLoad %572 
                                       f32_3 %574 = OpCompositeConstruct %569 %571 %573 
                                         f32 %575 = OpCompositeExtract %574 0 
                                         f32 %576 = OpCompositeExtract %574 1 
                                         f32 %577 = OpCompositeExtract %574 2 
                                       f32_3 %578 = OpCompositeConstruct %575 %576 %577 
                                       f32_4 %579 = OpLoad %211 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpFMul %578 %580 
                                       f32_3 %584 = OpFAdd %581 %583 
                                       f32_4 %585 = OpLoad %211 
                                       f32_4 %586 = OpVectorShuffle %585 %584 4 5 6 3 
                                                      OpStore %211 %586 
                                Uniform f32* %587 = OpAccessChain %20 %567 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFNegate %588 
                                         f32 %591 = OpFMul %589 %590 
                                         f32 %592 = OpFAdd %591 %590 
                                                      OpStore %89 %592 
                                         f32 %593 = OpLoad %89 
                                       f32_3 %594 = OpCompositeConstruct %593 %593 %593 
                                       f32_3 %595 = OpLoad %64 
                                       f32_3 %596 = OpFMul %594 %595 
                                                      OpStore %64 %596 
                                       f32_4 %597 = OpLoad %9 
                                       f32_3 %598 = OpVectorShuffle %597 %597 0 1 2 
                                         f32 %599 = OpLoad %30 
                                       f32_3 %600 = OpCompositeConstruct %599 %599 %599 
                                       f32_3 %601 = OpFMul %598 %600 
                              Uniform f32_4* %602 = OpAccessChain %20 %80 
                                       f32_4 %603 = OpLoad %602 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                       f32_3 %605 = OpFAdd %601 %604 
                                       f32_4 %606 = OpLoad %9 
                                       f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                      OpStore %9 %607 
                                       f32_4 %608 = OpLoad %9 
                                       f32_3 %609 = OpVectorShuffle %608 %608 0 1 2 
                                       f32_4 %610 = OpLoad %9 
                                       f32_3 %611 = OpVectorShuffle %610 %610 0 1 2 
                                         f32 %612 = OpDot %609 %611 
                                                      OpStore %30 %612 
                                         f32 %613 = OpLoad %30 
                                         f32 %615 = OpExtInst %1 40 %613 %614 
                                                      OpStore %30 %615 
                                         f32 %616 = OpLoad %30 
                                         f32 %617 = OpExtInst %1 32 %616 
                                                      OpStore %30 %617 
                                         f32 %618 = OpLoad %30 
                                       f32_3 %619 = OpCompositeConstruct %618 %618 %618 
                                       f32_4 %620 = OpLoad %9 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                       f32_3 %622 = OpFMul %619 %621 
                                       f32_4 %623 = OpLoad %9 
                                       f32_4 %624 = OpVectorShuffle %623 %622 4 5 6 3 
                                                      OpStore %9 %624 
                                       f32_4 %625 = OpLoad %72 
                                       f32_3 %626 = OpVectorShuffle %625 %625 0 1 2 
                                       f32_4 %627 = OpLoad %38 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 2 
                                         f32 %629 = OpDot %626 %628 
                                                      OpStore %30 %629 
                                       f32_4 %630 = OpLoad %72 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                              Uniform f32_4* %632 = OpAccessChain %20 %80 
                                       f32_4 %633 = OpLoad %632 
                                       f32_3 %634 = OpVectorShuffle %633 %633 0 1 2 
                                         f32 %635 = OpDot %631 %634 
                                Private f32* %636 = OpAccessChain %38 %78 
                                                      OpStore %636 %635 
                                Private f32* %637 = OpAccessChain %38 %78 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpExtInst %1 43 %638 %131 %132 
                                Private f32* %640 = OpAccessChain %38 %78 
                                                      OpStore %640 %639 
                                       f32_4 %642 = OpLoad %72 
                                       f32_3 %643 = OpVectorShuffle %642 %642 0 1 2 
                                       f32_4 %644 = OpLoad %9 
                                       f32_3 %645 = OpVectorShuffle %644 %644 0 1 2 
                                         f32 %646 = OpDot %643 %645 
                                                      OpStore %641 %646 
                                         f32 %647 = OpLoad %641 
                                         f32 %648 = OpExtInst %1 43 %647 %131 %132 
                                                      OpStore %641 %648 
                              Uniform f32_4* %649 = OpAccessChain %20 %80 
                                       f32_4 %650 = OpLoad %649 
                                       f32_3 %651 = OpVectorShuffle %650 %650 0 1 2 
                                       f32_4 %652 = OpLoad %9 
                                       f32_3 %653 = OpVectorShuffle %652 %652 0 1 2 
                                         f32 %654 = OpDot %651 %653 
                                Private f32* %655 = OpAccessChain %9 %78 
                                                      OpStore %655 %654 
                                Private f32* %656 = OpAccessChain %9 %78 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpExtInst %1 43 %657 %131 %132 
                                Private f32* %659 = OpAccessChain %9 %78 
                                                      OpStore %659 %658 
                                Private f32* %661 = OpAccessChain %9 %78 
                                         f32 %662 = OpLoad %661 
                                Private f32* %663 = OpAccessChain %9 %78 
                                         f32 %664 = OpLoad %663 
                                         f32 %665 = OpFMul %662 %664 
                                Private f32* %666 = OpAccessChain %660 %78 
                                                      OpStore %666 %665 
                                       f32_3 %667 = OpLoad %660 
                                       f32_2 %668 = OpVectorShuffle %667 %667 0 0 
                                         f32 %669 = OpLoad %104 
                                       f32_2 %670 = OpCompositeConstruct %669 %669 
                                         f32 %671 = OpDot %668 %670 
                                Private f32* %672 = OpAccessChain %660 %78 
                                                      OpStore %672 %671 
                                Private f32* %673 = OpAccessChain %660 %78 
                                         f32 %674 = OpLoad %673 
                                         f32 %676 = OpFAdd %674 %675 
                                Private f32* %677 = OpAccessChain %660 %78 
                                                      OpStore %677 %676 
                                Private f32* %679 = OpAccessChain %38 %78 
                                         f32 %680 = OpLoad %679 
                                         f32 %681 = OpFNegate %680 
                                         f32 %682 = OpFAdd %681 %132 
                                                      OpStore %678 %682 
                                         f32 %684 = OpLoad %678 
                                         f32 %685 = OpLoad %678 
                                         f32 %686 = OpFMul %684 %685 
                                                      OpStore %683 %686 
                                         f32 %687 = OpLoad %683 
                                         f32 %688 = OpLoad %683 
                                         f32 %689 = OpFMul %687 %688 
                                                      OpStore %683 %689 
                                         f32 %690 = OpLoad %678 
                                         f32 %691 = OpLoad %683 
                                         f32 %692 = OpFMul %690 %691 
                                                      OpStore %678 %692 
                                Private f32* %693 = OpAccessChain %660 %78 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpLoad %678 
                                         f32 %696 = OpFMul %694 %695 
                                         f32 %697 = OpFAdd %696 %132 
                                                      OpStore %678 %697 
                                         f32 %698 = OpLoad %30 
                                         f32 %699 = OpExtInst %1 4 %698 
                                         f32 %700 = OpFNegate %699 
                                         f32 %701 = OpFAdd %700 %132 
                                                      OpStore %683 %701 
                                         f32 %702 = OpLoad %683 
                                         f32 %703 = OpLoad %683 
                                         f32 %704 = OpFMul %702 %703 
                                                      OpStore %152 %704 
                                         f32 %705 = OpLoad %152 
                                         f32 %706 = OpLoad %152 
                                         f32 %707 = OpFMul %705 %706 
                                                      OpStore %152 %707 
                                         f32 %708 = OpLoad %683 
                                         f32 %709 = OpLoad %152 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %683 %710 
                                Private f32* %711 = OpAccessChain %660 %78 
                                         f32 %712 = OpLoad %711 
                                         f32 %713 = OpLoad %683 
                                         f32 %714 = OpFMul %712 %713 
                                         f32 %715 = OpFAdd %714 %132 
                                Private f32* %716 = OpAccessChain %660 %78 
                                                      OpStore %716 %715 
                                Private f32* %717 = OpAccessChain %660 %78 
                                         f32 %718 = OpLoad %717 
                                         f32 %719 = OpLoad %678 
                                         f32 %720 = OpFMul %718 %719 
                                Private f32* %721 = OpAccessChain %660 %78 
                                                      OpStore %721 %720 
                                         f32 %722 = OpLoad %104 
                                         f32 %723 = OpLoad %104 
                                         f32 %724 = OpFMul %722 %723 
                                                      OpStore %678 %724 
                                         f32 %725 = OpLoad %678 
                                         f32 %727 = OpExtInst %1 40 %725 %726 
                                                      OpStore %678 %727 
                                         f32 %728 = OpLoad %678 
                                         f32 %729 = OpFNegate %728 
                                         f32 %730 = OpFAdd %729 %132 
                                                      OpStore %104 %730 
                                         f32 %731 = OpLoad %30 
                                         f32 %732 = OpExtInst %1 4 %731 
                                         f32 %733 = OpLoad %104 
                                         f32 %734 = OpFMul %732 %733 
                                         f32 %735 = OpLoad %678 
                                         f32 %736 = OpFAdd %734 %735 
                                                      OpStore %152 %736 
                                Private f32* %737 = OpAccessChain %38 %78 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpLoad %104 
                                         f32 %740 = OpFMul %738 %739 
                                         f32 %741 = OpLoad %678 
                                         f32 %742 = OpFAdd %740 %741 
                                                      OpStore %104 %742 
                                         f32 %743 = OpLoad %30 
                                         f32 %744 = OpExtInst %1 4 %743 
                                         f32 %745 = OpLoad %104 
                                         f32 %746 = OpFMul %744 %745 
                                                      OpStore %30 %746 
                                Private f32* %747 = OpAccessChain %38 %78 
                                         f32 %748 = OpLoad %747 
                                         f32 %749 = OpLoad %152 
                                         f32 %750 = OpFMul %748 %749 
                                         f32 %751 = OpLoad %30 
                                         f32 %752 = OpFAdd %750 %751 
                                                      OpStore %30 %752 
                                         f32 %753 = OpLoad %30 
                                         f32 %755 = OpFAdd %753 %754 
                                                      OpStore %30 %755 
                                         f32 %757 = OpLoad %30 
                                         f32 %758 = OpFDiv %756 %757 
                                                      OpStore %30 %758 
                                         f32 %759 = OpLoad %678 
                                         f32 %760 = OpLoad %678 
                                         f32 %761 = OpFMul %759 %760 
                                                      OpStore %104 %761 
                                         f32 %762 = OpLoad %641 
                                         f32 %763 = OpLoad %104 
                                         f32 %764 = OpFMul %762 %763 
                                         f32 %765 = OpLoad %641 
                                         f32 %766 = OpFNegate %765 
                                         f32 %767 = OpFAdd %764 %766 
                                                      OpStore %152 %767 
                                         f32 %768 = OpLoad %152 
                                         f32 %769 = OpLoad %641 
                                         f32 %770 = OpFMul %768 %769 
                                         f32 %771 = OpFAdd %770 %132 
                                                      OpStore %641 %771 
                                         f32 %772 = OpLoad %104 
                                         f32 %774 = OpFMul %772 %773 
                                                      OpStore %104 %774 
                                         f32 %775 = OpLoad %641 
                                         f32 %776 = OpLoad %641 
                                         f32 %777 = OpFMul %775 %776 
                                         f32 %779 = OpFAdd %777 %778 
                                                      OpStore %641 %779 
                                         f32 %780 = OpLoad %104 
                                         f32 %781 = OpLoad %641 
                                         f32 %782 = OpFDiv %780 %781 
                                                      OpStore %641 %782 
                                         f32 %783 = OpLoad %30 
                                         f32 %784 = OpLoad %641 
                                         f32 %785 = OpFMul %783 %784 
                                Private f32* %786 = OpAccessChain %660 %74 
                                                      OpStore %786 %785 
                                       f32_4 %787 = OpLoad %38 
                                       f32_2 %788 = OpVectorShuffle %787 %787 0 0 
                                       f32_3 %789 = OpLoad %660 
                                       f32_2 %790 = OpVectorShuffle %789 %789 0 2 
                                       f32_2 %791 = OpFMul %788 %790 
                                       f32_3 %792 = OpLoad %660 
                                       f32_3 %793 = OpVectorShuffle %792 %791 3 1 4 
                                                      OpStore %660 %793 
                                Private f32* %794 = OpAccessChain %660 %74 
                                         f32 %795 = OpLoad %794 
                                         f32 %797 = OpFMul %795 %796 
                                                      OpStore %30 %797 
                                         f32 %798 = OpLoad %30 
                                         f32 %799 = OpExtInst %1 40 %798 %131 
                                                      OpStore %30 %799 
                                         f32 %800 = OpLoad %678 
                                         f32 %801 = OpLoad %678 
                                         f32 %802 = OpFMul %800 %801 
                                         f32 %803 = OpFAdd %802 %132 
                                                      OpStore %678 %803 
                                         f32 %804 = OpLoad %678 
                                         f32 %805 = OpFDiv %132 %804 
                                                      OpStore %678 %805 
                                       f32_4 %806 = OpLoad %211 
                                       f32_3 %807 = OpVectorShuffle %806 %806 0 1 2 
                                       f32_4 %808 = OpLoad %211 
                                       f32_3 %809 = OpVectorShuffle %808 %808 0 1 2 
                                         f32 %810 = OpDot %807 %809 
                                Private f32* %811 = OpAccessChain %38 %78 
                                                      OpStore %811 %810 
                                Private f32* %813 = OpAccessChain %38 %78 
                                         f32 %814 = OpLoad %813 
                                        bool %815 = OpFOrdNotEqual %814 %131 
                                                      OpStore %812 %815 
                                        bool %816 = OpLoad %812 
                                         f32 %817 = OpSelect %816 %132 %131 
                                Private f32* %818 = OpAccessChain %38 %78 
                                                      OpStore %818 %817 
                                         f32 %819 = OpLoad %30 
                                Private f32* %820 = OpAccessChain %38 %78 
                                         f32 %821 = OpLoad %820 
                                         f32 %822 = OpFMul %819 %821 
                                                      OpStore %30 %822 
                                         f32 %823 = OpLoad %89 
                                         f32 %824 = OpFNegate %823 
                                Uniform f32* %825 = OpAccessChain %20 %161 
                                         f32 %826 = OpLoad %825 
                                         f32 %827 = OpFAdd %824 %826 
                                Private f32* %828 = OpAccessChain %38 %78 
                                                      OpStore %828 %827 
                                Private f32* %829 = OpAccessChain %38 %78 
                                         f32 %830 = OpLoad %829 
                                         f32 %831 = OpFAdd %830 %132 
                                Private f32* %832 = OpAccessChain %38 %78 
                                                      OpStore %832 %831 
                                Private f32* %833 = OpAccessChain %38 %78 
                                         f32 %834 = OpLoad %833 
                                         f32 %835 = OpExtInst %1 43 %834 %131 %132 
                                Private f32* %836 = OpAccessChain %38 %78 
                                                      OpStore %836 %835 
                                       f32_3 %837 = OpLoad %660 
                                       f32_3 %838 = OpVectorShuffle %837 %837 0 0 0 
                                       f32_3 %839 = OpLoad %186 
                                       f32_3 %840 = OpFMul %838 %839 
                                       f32_4 %841 = OpLoad %72 
                                       f32_4 %842 = OpVectorShuffle %841 %840 4 5 6 3 
                                                      OpStore %72 %842 
                                       f32_3 %843 = OpLoad %186 
                                         f32 %844 = OpLoad %30 
                                       f32_3 %845 = OpCompositeConstruct %844 %844 %844 
                                       f32_3 %846 = OpFMul %843 %845 
                                                      OpStore %186 %846 
                                Private f32* %847 = OpAccessChain %9 %78 
                                         f32 %848 = OpLoad %847 
                                         f32 %849 = OpFNegate %848 
                                         f32 %850 = OpFAdd %849 %132 
                                Private f32* %851 = OpAccessChain %9 %78 
                                                      OpStore %851 %850 
                                Private f32* %852 = OpAccessChain %9 %78 
                                         f32 %853 = OpLoad %852 
                                Private f32* %854 = OpAccessChain %9 %78 
                                         f32 %855 = OpLoad %854 
                                         f32 %856 = OpFMul %853 %855 
                                Private f32* %857 = OpAccessChain %660 %78 
                                                      OpStore %857 %856 
                                Private f32* %858 = OpAccessChain %660 %78 
                                         f32 %859 = OpLoad %858 
                                Private f32* %860 = OpAccessChain %660 %78 
                                         f32 %861 = OpLoad %860 
                                         f32 %862 = OpFMul %859 %861 
                                Private f32* %863 = OpAccessChain %660 %78 
                                                      OpStore %863 %862 
                                Private f32* %864 = OpAccessChain %9 %78 
                                         f32 %865 = OpLoad %864 
                                Private f32* %866 = OpAccessChain %660 %78 
                                         f32 %867 = OpLoad %866 
                                         f32 %868 = OpFMul %865 %867 
                                Private f32* %869 = OpAccessChain %9 %78 
                                                      OpStore %869 %868 
                                       f32_4 %870 = OpLoad %211 
                                       f32_3 %871 = OpVectorShuffle %870 %870 0 1 2 
                                       f32_3 %872 = OpFNegate %871 
                                       f32_3 %874 = OpFAdd %872 %873 
                                                      OpStore %231 %874 
                                       f32_3 %875 = OpLoad %231 
                                       f32_4 %876 = OpLoad %9 
                                       f32_3 %877 = OpVectorShuffle %876 %876 0 0 0 
                                       f32_3 %878 = OpFMul %875 %877 
                                       f32_4 %879 = OpLoad %211 
                                       f32_3 %880 = OpVectorShuffle %879 %879 0 1 2 
                                       f32_3 %881 = OpFAdd %878 %880 
                                       f32_4 %882 = OpLoad %9 
                                       f32_4 %883 = OpVectorShuffle %882 %881 4 5 2 6 
                                                      OpStore %9 %883 
                                       f32_4 %884 = OpLoad %9 
                                       f32_3 %885 = OpVectorShuffle %884 %884 0 1 3 
                                       f32_3 %886 = OpLoad %186 
                                       f32_3 %887 = OpFMul %885 %886 
                                       f32_4 %888 = OpLoad %9 
                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 2 6 
                                                      OpStore %9 %889 
                                       f32_3 %890 = OpLoad %64 
                                       f32_4 %891 = OpLoad %72 
                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
                                       f32_3 %893 = OpFMul %890 %892 
                                       f32_4 %894 = OpLoad %9 
                                       f32_3 %895 = OpVectorShuffle %894 %894 0 1 3 
                                       f32_3 %896 = OpFAdd %893 %895 
                                       f32_4 %897 = OpLoad %9 
                                       f32_4 %898 = OpVectorShuffle %897 %896 4 5 2 6 
                                                      OpStore %9 %898 
                                       f32_3 %899 = OpLoad %219 
                                         f32 %900 = OpLoad %678 
                                       f32_3 %901 = OpCompositeConstruct %900 %900 %900 
                                       f32_3 %902 = OpFMul %899 %901 
                                                      OpStore %64 %902 
                                       f32_4 %903 = OpLoad %211 
                                       f32_3 %904 = OpVectorShuffle %903 %903 0 1 2 
                                       f32_3 %905 = OpFNegate %904 
                                       f32_4 %906 = OpLoad %38 
                                       f32_3 %907 = OpVectorShuffle %906 %906 0 0 0 
                                       f32_3 %908 = OpFAdd %905 %907 
                                       f32_4 %909 = OpLoad %38 
                                       f32_4 %910 = OpVectorShuffle %909 %908 4 5 2 6 
                                                      OpStore %38 %910 
                                         f32 %911 = OpLoad %683 
                                       f32_3 %912 = OpCompositeConstruct %911 %911 %911 
                                       f32_4 %913 = OpLoad %38 
                                       f32_3 %914 = OpVectorShuffle %913 %913 0 1 3 
                                       f32_3 %915 = OpFMul %912 %914 
                                       f32_4 %916 = OpLoad %211 
                                       f32_3 %917 = OpVectorShuffle %916 %916 0 1 2 
                                       f32_3 %918 = OpFAdd %915 %917 
                                       f32_4 %919 = OpLoad %38 
                                       f32_4 %920 = OpVectorShuffle %919 %918 4 5 6 3 
                                                      OpStore %38 %920 
                                       f32_3 %921 = OpLoad %64 
                                       f32_4 %922 = OpLoad %38 
                                       f32_3 %923 = OpVectorShuffle %922 %922 0 1 2 
                                       f32_3 %924 = OpFMul %921 %923 
                                       f32_4 %925 = OpLoad %9 
                                       f32_3 %926 = OpVectorShuffle %925 %925 0 1 3 
                                       f32_3 %927 = OpFAdd %924 %926 
                                       f32_4 %928 = OpLoad %9 
                                       f32_4 %929 = OpVectorShuffle %928 %927 4 5 6 3 
                                                      OpStore %9 %929 
                                       f32_3 %932 = OpLoad %47 
                              Uniform f32_4* %933 = OpAccessChain %20 %66 
                                       f32_4 %934 = OpLoad %933 
                                       f32_3 %935 = OpVectorShuffle %934 %934 0 1 2 
                                       f32_3 %936 = OpFMul %932 %935 
                                       f32_4 %937 = OpLoad %9 
                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 2 
                                       f32_3 %939 = OpFAdd %936 %938 
                                       f32_4 %940 = OpLoad %931 
                                       f32_4 %941 = OpVectorShuffle %940 %939 4 5 6 3 
                                                      OpStore %931 %941 
                                 Output f32* %943 = OpAccessChain %931 %116 
                                                      OpStore %943 %132 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(4) uniform  sampler2D _posTex;
UNITY_LOCATION(5) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat13;
float u_xlat18;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat6 = float(_numOfFrames);
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat6;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = u_xlat6 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    gl_Position = u_xlat3;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.x = floor(u_xlat1.y);
    u_xlat4.y = (-u_xlat4.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat4.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat13 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat4.zw = (-vec2(u_xlat13)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat13 = sqrt(u_xlat4.z);
    u_xlat4.xy = u_xlat1.xy * vec2(u_xlat13);
    u_xlat1.xyz = max(u_xlat4.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat1 = (-u_xlat2.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat0.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat1 * u_xlat1 + u_xlat4;
    u_xlat1 = u_xlat1 * u_xlat0.xxxx + u_xlat5;
    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat2 * u_xlat1;
    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat18 = u_xlat0.y * u_xlat0.y;
    u_xlat18 = u_xlat0.x * u_xlat0.x + (-u_xlat18);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat2);
    u_xlat0.y = dot(unity_SHBg, u_xlat2);
    u_xlat0.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat3.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
float u_xlat41;
float u_xlat42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat41 + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat41 = (-u_xlat4.x) + 1.0;
    u_xlat40 = u_xlat40 * u_xlat41 + u_xlat4.x;
    u_xlat41 = (-_Glossiness) + 1.0;
    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat42 = u_xlat42 + u_xlat42;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat40) * _LightColor0.xyz;
    u_xlat6.xyz = vs_TEXCOORD1.xyz;
    u_xlat6.w = 1.0;
    u_xlat7.x = dot(unity_SHAr, u_xlat6);
    u_xlat7.y = dot(unity_SHAg, u_xlat6);
    u_xlat7.z = dot(unity_SHAb, u_xlat6);
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = inversesqrt(u_xlat40);
        u_xlat7.xyz = vec3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat40 = u_xlat40 * u_xlat41;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat40);
    u_xlat42 = u_xlat7.w + -1.0;
    u_xlat42 = unity_SpecCube0_HDR.w * u_xlat42 + 1.0;
    u_xlat42 = log2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat40);
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = unity_SpecCube1_HDR.w * u_xlat40 + 1.0;
        u_xlat40 = log2(u_xlat40);
        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.y;
        u_xlat40 = exp2(u_xlat40);
        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40);
        u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz + (-u_xlat4.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
    }
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat4.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat7.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat40 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat42 = u_xlat27 * u_xlat27;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat27 = u_xlat27 * u_xlat42;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat42 = abs(u_xlat39) * u_xlat41 + u_xlat26;
    u_xlat41 = u_xlat1.x * u_xlat41 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = u_xlat1.x * u_xlat42 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat42 = u_xlat14 * u_xlat41 + (-u_xlat14);
    u_xlat14 = u_xlat42 * u_xlat14 + 1.0;
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat13.z = u_xlat39 * 3.14159274;
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat39 = max(u_xlat13.z, 0.0);
    u_xlat26 = u_xlat26 * u_xlat26 + 1.0;
    u_xlat26 = float(1.0) / u_xlat26;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat5.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat6.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat1.xyw = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat7.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 598
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %69 %160 %237 %242 %243 %388 %391 %557 %579 %591 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpMemberDecorate %18 17 Offset 18 
                                                      OpMemberDecorate %18 18 Offset 18 
                                                      OpMemberDecorate %18 19 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %69 Location 69 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %160 Location 160 
                                                      OpMemberDecorate %235 0 BuiltIn 235 
                                                      OpMemberDecorate %235 1 BuiltIn 235 
                                                      OpMemberDecorate %235 2 BuiltIn 235 
                                                      OpDecorate %235 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 242 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate vs_TEXCOORD1 Location 388 
                                                      OpDecorate vs_TEXCOORD2 Location 391 
                                                      OpDecorate vs_TEXCOORD3 Location 557 
                                                      OpDecorate vs_TEXCOORD5 Location 579 
                                                      OpDecorate vs_TEXCOORD6 Location 591 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeInt 32 1 
                                              %18 = OpTypeStruct %7 %7 %7 %7 %7 %7 %12 %7 %7 %7 %7 %14 %15 %16 %6 %6 %6 %6 %17 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %20 = OpVariable Uniform 
                                          i32 %21 = OpConstant 0 
                                          u32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %6 
                                          i32 %27 = OpConstant 17 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                 Private f32* %38 = OpVariable Private 
                                          i32 %39 = OpConstant 18 
                                              %40 = OpTypePointer Uniform %17 
                                          f32 %58 = OpConstant 3.674022E-40 
                                              %68 = OpTypePointer Input %7 
                                 Input f32_4* %69 = OpVariable Input 
                                              %70 = OpTypePointer Input %6 
                               Private f32_4* %78 = OpVariable Private 
                                              %79 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %80 = OpTypePointer UniformConstant %79 
         UniformConstant read_only Texture2D* %81 = OpVariable UniformConstant 
                                              %83 = OpTypeSampler 
                                              %84 = OpTypePointer UniformConstant %83 
                     UniformConstant sampler* %85 = OpVariable UniformConstant 
                                              %87 = OpTypeSampledImage %79 
                                              %89 = OpTypeVector %6 2 
                                          f32 %92 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %94 = OpVariable UniformConstant 
                     UniformConstant sampler* %96 = OpVariable UniformConstant 
                                             %102 = OpTypeVector %6 3 
                                         f32 %108 = OpConstant 3.674022E-40 
                                       f32_3 %109 = OpConstantComposite %108 %108 %108 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_3 %112 = OpConstantComposite %111 %111 %111 
                              Private f32_4* %116 = OpVariable Private 
                                         i32 %117 = OpConstant 16 
                                         i32 %121 = OpConstant 15 
                                         f32 %147 = OpConstant 3.674022E-40 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %147 %148 
                                         u32 %156 = OpConstant 3 
                                Input f32_4* %160 = OpVariable Input 
                              Private f32_4* %166 = OpVariable Private 
                                         i32 %169 = OpConstant 11 
                                         i32 %170 = OpConstant 1 
                                             %171 = OpTypePointer Uniform %7 
                                         i32 %182 = OpConstant 2 
                                         i32 %191 = OpConstant 3 
                              Private f32_4* %206 = OpVariable Private 
                                         i32 %209 = OpConstant 13 
                                             %234 = OpTypeArray %6 %22 
                                             %235 = OpTypeStruct %7 %6 %234 
                                             %236 = OpTypePointer Output %235 
        Output struct {f32_4; f32; f32[1];}* %237 = OpVariable Output 
                                             %239 = OpTypePointer Output %7 
                                             %241 = OpTypePointer Output %89 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %243 = OpVariable Input 
                                         i32 %246 = OpConstant 19 
                                         f32 %269 = OpConstant 3.674022E-40 
                                       f32_2 %270 = OpConstantComposite %269 %269 
                                         f32 %272 = OpConstant 3.674022E-40 
                                       f32_2 %273 = OpConstantComposite %272 %272 
                                Private f32* %277 = OpVariable Private 
                                         f32 %286 = OpConstant 3.674022E-40 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_2 %288 = OpConstantComposite %286 %287 
                                       f32_2 %290 = OpConstantComposite %58 %58 
                                         u32 %294 = OpConstant 2 
                                       f32_3 %312 = OpConstantComposite %58 %58 %58 
                                             %324 = OpTypeBool 
                                             %325 = OpTypePointer Private %324 
                               Private bool* %326 = OpVariable Private 
                                       f32_4 %327 = OpConstantComposite %92 %92 %92 %92 
                                         i32 %328 = OpConstant 14 
                                             %332 = OpTypeVector %324 4 
                                             %336 = OpTypePointer Function %102 
                                         i32 %350 = OpConstant 12 
                                             %387 = OpTypePointer Output %102 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %409 = OpConstant 4 
                              Private f32_4* %413 = OpVariable Private 
                                         f32 %444 = OpConstant 3.674022E-40 
                                       f32_4 %445 = OpConstantComposite %444 %444 %444 %444 
                                         i32 %450 = OpConstant 5 
                                       f32_4 %454 = OpConstantComposite %58 %58 %58 %58 
                                         i32 %468 = OpConstant 6 
                                Private f32* %508 = OpVariable Private 
                                         i32 %527 = OpConstant 7 
                                         i32 %533 = OpConstant 8 
                                         i32 %539 = OpConstant 9 
                                         i32 %545 = OpConstant 10 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                       f32_2 %575 = OpConstantComposite %287 %287 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %592 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %337 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %20 %21 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                 Uniform f32* %28 = OpAccessChain %20 %27 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %26 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 10 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                 Uniform i32* %41 = OpAccessChain %20 %39 
                                          i32 %42 = OpLoad %41 
                                          f32 %43 = OpConvertSToF %42 
                                                      OpStore %38 %43 
                                          f32 %44 = OpLoad %38 
                                 Private f32* %45 = OpAccessChain %9 %31 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Private f32* %48 = OpAccessChain %9 %31 
                                                      OpStore %48 %47 
                                 Private f32* %49 = OpAccessChain %9 %31 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpExtInst %1 9 %50 
                                 Private f32* %52 = OpAccessChain %9 %31 
                                                      OpStore %52 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpLoad %38 
                                          f32 %56 = OpFDiv %54 %55 
                                 Private f32* %57 = OpAccessChain %9 %31 
                                                      OpStore %57 %56 
                                          f32 %59 = OpLoad %38 
                                          f32 %60 = OpFDiv %58 %59 
                                                      OpStore %38 %60 
                                          f32 %61 = OpLoad %38 
                                 Private f32* %62 = OpAccessChain %9 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %9 %31 
                                          f32 %67 = OpLoad %66 
                                   Input f32* %71 = OpAccessChain %69 %22 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %67 %72 
                                 Private f32* %74 = OpAccessChain %9 %22 
                                                      OpStore %74 %73 
                                   Input f32* %75 = OpAccessChain %69 %31 
                                          f32 %76 = OpLoad %75 
                                 Private f32* %77 = OpAccessChain %9 %31 
                                                      OpStore %77 %76 
                          read_only Texture2D %82 = OpLoad %81 
                                      sampler %86 = OpLoad %85 
                   read_only Texture2DSampled %88 = OpSampledImage %82 %86 
                                        f32_4 %90 = OpLoad %9 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                                        f32_4 %93 = OpImageSampleExplicitLod %88 %91 Lod %7 
                                                      OpStore %78 %93 
                          read_only Texture2D %95 = OpLoad %94 
                                      sampler %97 = OpLoad %96 
                   read_only Texture2DSampled %98 = OpSampledImage %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_4 %101 = OpImageSampleExplicitLod %98 %100 Lod %7 
                                       f32_3 %103 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %9 %105 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 2 1 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                Uniform f32* %118 = OpAccessChain %20 %117 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFNegate %119 
                                Uniform f32* %122 = OpAccessChain %20 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                Private f32* %125 = OpAccessChain %116 %31 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %78 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_4 %128 = OpLoad %116 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 0 0 
                                       f32_3 %130 = OpFMul %127 %129 
                                Uniform f32* %131 = OpAccessChain %20 %117 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %20 %117 
                                         f32 %134 = OpLoad %133 
                                Uniform f32* %135 = OpAccessChain %20 %117 
                                         f32 %136 = OpLoad %135 
                                       f32_3 %137 = OpCompositeConstruct %132 %134 %136 
                                         f32 %138 = OpCompositeExtract %137 0 
                                         f32 %139 = OpCompositeExtract %137 1 
                                         f32 %140 = OpCompositeExtract %137 2 
                                       f32_3 %141 = OpCompositeConstruct %138 %139 %140 
                                       f32_3 %142 = OpFAdd %130 %141 
                                       f32_4 %143 = OpLoad %116 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %116 %144 
                                       f32_4 %145 = OpLoad %78 
                                       f32_2 %146 = OpVectorShuffle %145 %145 3 3 
                                       f32_2 %150 = OpFMul %146 %149 
                                       f32_4 %151 = OpLoad %78 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 2 3 
                                                      OpStore %78 %152 
                                Private f32* %153 = OpAccessChain %116 %31 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                Private f32* %157 = OpAccessChain %116 %156 
                                                      OpStore %157 %155 
                                       f32_4 %158 = OpLoad %116 
                                       f32_3 %159 = OpVectorShuffle %158 %158 3 2 1 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %116 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %116 %165 
                                       f32_4 %167 = OpLoad %116 
                                       f32_4 %168 = OpVectorShuffle %167 %167 1 1 1 1 
                              Uniform f32_4* %172 = OpAccessChain %20 %169 %170 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpFMul %168 %173 
                                                      OpStore %166 %174 
                              Uniform f32_4* %175 = OpAccessChain %20 %169 %21 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpLoad %116 
                                       f32_4 %178 = OpVectorShuffle %177 %177 0 0 0 0 
                                       f32_4 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %166 
                                       f32_4 %181 = OpFAdd %179 %180 
                                                      OpStore %166 %181 
                              Uniform f32_4* %183 = OpAccessChain %20 %169 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpLoad %116 
                                       f32_4 %186 = OpVectorShuffle %185 %185 2 2 2 2 
                                       f32_4 %187 = OpFMul %184 %186 
                                       f32_4 %188 = OpLoad %166 
                                       f32_4 %189 = OpFAdd %187 %188 
                                                      OpStore %116 %189 
                                       f32_4 %190 = OpLoad %116 
                              Uniform f32_4* %192 = OpAccessChain %20 %169 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpFAdd %190 %193 
                                                      OpStore %166 %194 
                              Uniform f32_4* %195 = OpAccessChain %20 %169 %191 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %160 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %116 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %116 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %116 %205 
                                       f32_4 %207 = OpLoad %166 
                                       f32_4 %208 = OpVectorShuffle %207 %207 1 1 1 1 
                              Uniform f32_4* %210 = OpAccessChain %20 %209 %170 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpFMul %208 %211 
                                                      OpStore %206 %212 
                              Uniform f32_4* %213 = OpAccessChain %20 %209 %21 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %166 
                                       f32_4 %216 = OpVectorShuffle %215 %215 0 0 0 0 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %206 
                                       f32_4 %219 = OpFAdd %217 %218 
                                                      OpStore %206 %219 
                              Uniform f32_4* %220 = OpAccessChain %20 %209 %182 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpLoad %166 
                                       f32_4 %223 = OpVectorShuffle %222 %222 2 2 2 2 
                                       f32_4 %224 = OpFMul %221 %223 
                                       f32_4 %225 = OpLoad %206 
                                       f32_4 %226 = OpFAdd %224 %225 
                                                      OpStore %206 %226 
                              Uniform f32_4* %227 = OpAccessChain %20 %209 %191 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %166 
                                       f32_4 %230 = OpVectorShuffle %229 %229 3 3 3 3 
                                       f32_4 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %206 
                                       f32_4 %233 = OpFAdd %231 %232 
                                                      OpStore %166 %233 
                                       f32_4 %238 = OpLoad %166 
                               Output f32_4* %240 = OpAccessChain %237 %21 
                                                      OpStore %240 %238 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                              Uniform f32_4* %247 = OpAccessChain %20 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                                       f32_2 %250 = OpFMul %245 %249 
                              Uniform f32_4* %251 = OpAccessChain %20 %246 
                                       f32_4 %252 = OpLoad %251 
                                       f32_2 %253 = OpVectorShuffle %252 %252 2 3 
                                       f32_2 %254 = OpFAdd %250 %253 
                                                      OpStore vs_TEXCOORD0 %254 
                                Private f32* %255 = OpAccessChain %78 %22 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpExtInst %1 8 %256 
                                Private f32* %258 = OpAccessChain %206 %31 
                                                      OpStore %258 %257 
                                Private f32* %259 = OpAccessChain %206 %31 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFNegate %260 
                                         f32 %262 = OpFMul %261 %148 
                                Private f32* %263 = OpAccessChain %78 %31 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %206 %22 
                                                      OpStore %266 %265 
                                       f32_4 %267 = OpLoad %206 
                                       f32_2 %268 = OpVectorShuffle %267 %267 0 1 
                                       f32_2 %271 = OpFMul %268 %270 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %78 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %78 %276 
                                       f32_4 %278 = OpLoad %78 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_4 %280 = OpLoad %78 
                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
                                         f32 %282 = OpDot %279 %281 
                                                      OpStore %277 %282 
                                         f32 %283 = OpLoad %277 
                                       f32_2 %284 = OpCompositeConstruct %283 %283 
                                       f32_2 %285 = OpFNegate %284 
                                       f32_2 %289 = OpFMul %285 %288 
                                       f32_2 %291 = OpFAdd %289 %290 
                                       f32_4 %292 = OpLoad %206 
                                       f32_4 %293 = OpVectorShuffle %292 %291 0 1 4 5 
                                                      OpStore %206 %293 
                                Private f32* %295 = OpAccessChain %206 %294 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpExtInst %1 31 %296 
                                                      OpStore %277 %297 
                                       f32_4 %298 = OpLoad %78 
                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
                                         f32 %300 = OpLoad %277 
                                       f32_2 %301 = OpCompositeConstruct %300 %300 
                                       f32_2 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %206 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 2 3 
                                                      OpStore %206 %304 
                                       f32_4 %305 = OpLoad %206 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 3 
                                       f32_3 %307 = OpExtInst %1 40 %306 %112 
                                       f32_4 %308 = OpLoad %78 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %78 %309 
                                       f32_4 %310 = OpLoad %78 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %313 = OpExtInst %1 37 %311 %312 
                                       f32_4 %314 = OpLoad %78 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %78 %315 
                                Private f32* %316 = OpAccessChain %78 %31 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFNegate %317 
                                Private f32* %319 = OpAccessChain %78 %156 
                                                      OpStore %319 %318 
                                Private f32* %320 = OpAccessChain %9 %31 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFNegate %321 
                                Private f32* %323 = OpAccessChain %9 %156 
                                                      OpStore %323 %322 
                                Uniform f32* %329 = OpAccessChain %20 %328 
                                         f32 %330 = OpLoad %329 
                                       f32_4 %331 = OpCompositeConstruct %330 %330 %330 %330 
                                      bool_4 %333 = OpFOrdNotEqual %327 %331 
                                        bool %334 = OpAny %333 
                                                      OpStore %326 %334 
                                        bool %335 = OpLoad %326 
                                                      OpSelectionMerge %339 None 
                                                      OpBranchConditional %335 %338 %342 
                                             %338 = OpLabel 
                                       f32_4 %340 = OpLoad %78 
                                       f32_3 %341 = OpVectorShuffle %340 %340 3 2 1 
                                                      OpStore %337 %341 
                                                      OpBranch %339 
                                             %342 = OpLabel 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 3 1 2 
                                                      OpStore %337 %344 
                                                      OpBranch %339 
                                             %339 = OpLabel 
                                       f32_3 %345 = OpLoad %337 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %9 %347 
                                       f32_4 %348 = OpLoad %9 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                              Uniform f32_4* %351 = OpAccessChain %20 %350 %21 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %354 = OpDot %349 %353 
                                Private f32* %355 = OpAccessChain %78 %31 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                              Uniform f32_4* %358 = OpAccessChain %20 %350 %170 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                         f32 %361 = OpDot %357 %360 
                                Private f32* %362 = OpAccessChain %78 %22 
                                                      OpStore %362 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                              Uniform f32_4* %365 = OpAccessChain %20 %350 %182 
                                       f32_4 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                         f32 %368 = OpDot %364 %367 
                                Private f32* %369 = OpAccessChain %78 %294 
                                                      OpStore %369 %368 
                                       f32_4 %370 = OpLoad %78 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_4 %372 = OpLoad %78 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                         f32 %374 = OpDot %371 %373 
                                Private f32* %375 = OpAccessChain %9 %31 
                                                      OpStore %375 %374 
                                Private f32* %376 = OpAccessChain %9 %31 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpExtInst %1 32 %377 
                                Private f32* %379 = OpAccessChain %9 %31 
                                                      OpStore %379 %378 
                                       f32_4 %380 = OpLoad %9 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
                                       f32_4 %382 = OpLoad %78 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFMul %381 %383 
                                       f32_4 %385 = OpLoad %9 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %9 %386 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                                      OpStore vs_TEXCOORD1 %390 
                                       f32_4 %392 = OpLoad %116 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                                      OpStore vs_TEXCOORD2 %393 
                                       f32_4 %394 = OpLoad %116 
                                       f32_4 %395 = OpVectorShuffle %394 %394 0 0 0 0 
                                       f32_4 %396 = OpFNegate %395 
                              Uniform f32_4* %397 = OpAccessChain %20 %182 
                                       f32_4 %398 = OpLoad %397 
                                       f32_4 %399 = OpFAdd %396 %398 
                                                      OpStore %78 %399 
                                       f32_4 %400 = OpLoad %116 
                                       f32_4 %401 = OpVectorShuffle %400 %400 1 1 1 1 
                                       f32_4 %402 = OpFNegate %401 
                              Uniform f32_4* %403 = OpAccessChain %20 %191 
                                       f32_4 %404 = OpLoad %403 
                                       f32_4 %405 = OpFAdd %402 %404 
                                                      OpStore %206 %405 
                                       f32_4 %406 = OpLoad %116 
                                       f32_4 %407 = OpVectorShuffle %406 %406 2 2 2 2 
                                       f32_4 %408 = OpFNegate %407 
                              Uniform f32_4* %410 = OpAccessChain %20 %409 
                                       f32_4 %411 = OpLoad %410 
                                       f32_4 %412 = OpFAdd %408 %411 
                                                      OpStore %116 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpVectorShuffle %414 %414 1 1 1 1 
                                       f32_4 %416 = OpLoad %206 
                                       f32_4 %417 = OpFMul %415 %416 
                                                      OpStore %413 %417 
                                       f32_4 %418 = OpLoad %206 
                                       f32_4 %419 = OpLoad %206 
                                       f32_4 %420 = OpFMul %418 %419 
                                                      OpStore %206 %420 
                                       f32_4 %421 = OpLoad %78 
                                       f32_4 %422 = OpLoad %78 
                                       f32_4 %423 = OpFMul %421 %422 
                                       f32_4 %424 = OpLoad %206 
                                       f32_4 %425 = OpFAdd %423 %424 
                                                      OpStore %206 %425 
                                       f32_4 %426 = OpLoad %78 
                                       f32_4 %427 = OpLoad %9 
                                       f32_4 %428 = OpVectorShuffle %427 %427 0 0 0 0 
                                       f32_4 %429 = OpFMul %426 %428 
                                       f32_4 %430 = OpLoad %413 
                                       f32_4 %431 = OpFAdd %429 %430 
                                                      OpStore %78 %431 
                                       f32_4 %432 = OpLoad %116 
                                       f32_4 %433 = OpLoad %9 
                                       f32_4 %434 = OpVectorShuffle %433 %433 2 2 2 2 
                                       f32_4 %435 = OpFMul %432 %434 
                                       f32_4 %436 = OpLoad %78 
                                       f32_4 %437 = OpFAdd %435 %436 
                                                      OpStore %78 %437 
                                       f32_4 %438 = OpLoad %116 
                                       f32_4 %439 = OpLoad %116 
                                       f32_4 %440 = OpFMul %438 %439 
                                       f32_4 %441 = OpLoad %206 
                                       f32_4 %442 = OpFAdd %440 %441 
                                                      OpStore %116 %442 
                                       f32_4 %443 = OpLoad %116 
                                       f32_4 %446 = OpExtInst %1 40 %443 %445 
                                                      OpStore %116 %446 
                                       f32_4 %447 = OpLoad %116 
                                       f32_4 %448 = OpExtInst %1 32 %447 
                                                      OpStore %206 %448 
                                       f32_4 %449 = OpLoad %116 
                              Uniform f32_4* %451 = OpAccessChain %20 %450 
                                       f32_4 %452 = OpLoad %451 
                                       f32_4 %453 = OpFMul %449 %452 
                                       f32_4 %455 = OpFAdd %453 %454 
                                                      OpStore %116 %455 
                                       f32_4 %456 = OpLoad %116 
                                       f32_4 %457 = OpFDiv %454 %456 
                                                      OpStore %116 %457 
                                       f32_4 %458 = OpLoad %78 
                                       f32_4 %459 = OpLoad %206 
                                       f32_4 %460 = OpFMul %458 %459 
                                                      OpStore %78 %460 
                                       f32_4 %461 = OpLoad %78 
                                       f32_4 %462 = OpExtInst %1 40 %461 %327 
                                                      OpStore %78 %462 
                                       f32_4 %463 = OpLoad %116 
                                       f32_4 %464 = OpLoad %78 
                                       f32_4 %465 = OpFMul %463 %464 
                                                      OpStore %78 %465 
                                       f32_4 %466 = OpLoad %78 
                                       f32_3 %467 = OpVectorShuffle %466 %466 1 1 1 
                              Uniform f32_4* %469 = OpAccessChain %20 %468 %170 
                                       f32_4 %470 = OpLoad %469 
                                       f32_3 %471 = OpVectorShuffle %470 %470 0 1 2 
                                       f32_3 %472 = OpFMul %467 %471 
                                       f32_4 %473 = OpLoad %116 
                                       f32_4 %474 = OpVectorShuffle %473 %472 4 5 6 3 
                                                      OpStore %116 %474 
                              Uniform f32_4* %475 = OpAccessChain %20 %468 %21 
                                       f32_4 %476 = OpLoad %475 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_4 %478 = OpLoad %78 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 0 0 
                                       f32_3 %480 = OpFMul %477 %479 
                                       f32_4 %481 = OpLoad %116 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 1 2 
                                       f32_3 %483 = OpFAdd %480 %482 
                                       f32_4 %484 = OpLoad %116 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 6 3 
                                                      OpStore %116 %485 
                              Uniform f32_4* %486 = OpAccessChain %20 %468 %182 
                                       f32_4 %487 = OpLoad %486 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                       f32_4 %489 = OpLoad %78 
                                       f32_3 %490 = OpVectorShuffle %489 %489 2 2 2 
                                       f32_3 %491 = OpFMul %488 %490 
                                       f32_4 %492 = OpLoad %116 
                                       f32_3 %493 = OpVectorShuffle %492 %492 0 1 2 
                                       f32_3 %494 = OpFAdd %491 %493 
                                       f32_4 %495 = OpLoad %78 
                                       f32_4 %496 = OpVectorShuffle %495 %494 4 5 6 3 
                                                      OpStore %78 %496 
                              Uniform f32_4* %497 = OpAccessChain %20 %468 %191 
                                       f32_4 %498 = OpLoad %497 
                                       f32_3 %499 = OpVectorShuffle %498 %498 0 1 2 
                                       f32_4 %500 = OpLoad %78 
                                       f32_3 %501 = OpVectorShuffle %500 %500 3 3 3 
                                       f32_3 %502 = OpFMul %499 %501 
                                       f32_4 %503 = OpLoad %78 
                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
                                       f32_3 %505 = OpFAdd %502 %504 
                                       f32_4 %506 = OpLoad %78 
                                       f32_4 %507 = OpVectorShuffle %506 %505 4 5 6 3 
                                                      OpStore %78 %507 
                                Private f32* %509 = OpAccessChain %9 %22 
                                         f32 %510 = OpLoad %509 
                                Private f32* %511 = OpAccessChain %9 %22 
                                         f32 %512 = OpLoad %511 
                                         f32 %513 = OpFMul %510 %512 
                                                      OpStore %508 %513 
                                Private f32* %514 = OpAccessChain %9 %31 
                                         f32 %515 = OpLoad %514 
                                Private f32* %516 = OpAccessChain %9 %31 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFMul %515 %517 
                                         f32 %519 = OpLoad %508 
                                         f32 %520 = OpFNegate %519 
                                         f32 %521 = OpFAdd %518 %520 
                                                      OpStore %508 %521 
                                       f32_4 %522 = OpLoad %9 
                                       f32_4 %523 = OpVectorShuffle %522 %522 1 2 2 0 
                                       f32_4 %524 = OpLoad %9 
                                       f32_4 %525 = OpVectorShuffle %524 %524 0 1 2 2 
                                       f32_4 %526 = OpFMul %523 %525 
                                                      OpStore %116 %526 
                              Uniform f32_4* %528 = OpAccessChain %20 %527 
                                       f32_4 %529 = OpLoad %528 
                                       f32_4 %530 = OpLoad %116 
                                         f32 %531 = OpDot %529 %530 
                                Private f32* %532 = OpAccessChain %9 %31 
                                                      OpStore %532 %531 
                              Uniform f32_4* %534 = OpAccessChain %20 %533 
                                       f32_4 %535 = OpLoad %534 
                                       f32_4 %536 = OpLoad %116 
                                         f32 %537 = OpDot %535 %536 
                                Private f32* %538 = OpAccessChain %9 %22 
                                                      OpStore %538 %537 
                              Uniform f32_4* %540 = OpAccessChain %20 %539 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %116 
                                         f32 %543 = OpDot %541 %542 
                                Private f32* %544 = OpAccessChain %9 %294 
                                                      OpStore %544 %543 
                              Uniform f32_4* %546 = OpAccessChain %20 %545 
                                       f32_4 %547 = OpLoad %546 
                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
                                         f32 %549 = OpLoad %508 
                                       f32_3 %550 = OpCompositeConstruct %549 %549 %549 
                                       f32_3 %551 = OpFMul %548 %550 
                                       f32_4 %552 = OpLoad %9 
                                       f32_3 %553 = OpVectorShuffle %552 %552 0 1 2 
                                       f32_3 %554 = OpFAdd %551 %553 
                                       f32_4 %555 = OpLoad %9 
                                       f32_4 %556 = OpVectorShuffle %555 %554 4 5 6 3 
                                                      OpStore %9 %556 
                                       f32_4 %558 = OpLoad %9 
                                       f32_3 %559 = OpVectorShuffle %558 %558 0 1 2 
                                       f32_4 %560 = OpLoad %78 
                                       f32_3 %561 = OpVectorShuffle %560 %560 0 1 2 
                                       f32_3 %562 = OpFAdd %559 %561 
                                                      OpStore vs_TEXCOORD3 %562 
                                Private f32* %563 = OpAccessChain %166 %22 
                                         f32 %564 = OpLoad %563 
                                Uniform f32* %565 = OpAccessChain %20 %170 %31 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %564 %566 
                                Private f32* %568 = OpAccessChain %9 %31 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %9 %31 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpFMul %570 %287 
                                Private f32* %572 = OpAccessChain %9 %156 
                                                      OpStore %572 %571 
                                       f32_4 %573 = OpLoad %166 
                                       f32_2 %574 = OpVectorShuffle %573 %573 0 3 
                                       f32_2 %576 = OpFMul %574 %575 
                                       f32_4 %577 = OpLoad %9 
                                       f32_4 %578 = OpVectorShuffle %577 %576 4 1 5 3 
                                                      OpStore %9 %578 
                                       f32_4 %580 = OpLoad %166 
                                       f32_2 %581 = OpVectorShuffle %580 %580 2 3 
                                       f32_4 %582 = OpLoad vs_TEXCOORD5 
                                       f32_4 %583 = OpVectorShuffle %582 %581 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %583 
                                       f32_4 %584 = OpLoad %9 
                                       f32_2 %585 = OpVectorShuffle %584 %584 2 2 
                                       f32_4 %586 = OpLoad %9 
                                       f32_2 %587 = OpVectorShuffle %586 %586 0 3 
                                       f32_2 %588 = OpFAdd %585 %587 
                                       f32_4 %589 = OpLoad vs_TEXCOORD5 
                                       f32_4 %590 = OpVectorShuffle %589 %588 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %590 
                                                      OpStore vs_TEXCOORD6 %327 
                                 Output f32* %593 = OpAccessChain %237 %21 %22 
                                         f32 %594 = OpLoad %593 
                                         f32 %595 = OpFNegate %594 
                                 Output f32* %596 = OpAccessChain %237 %21 %22 
                                                      OpStore %596 %595 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 987
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %60 %136 %170 %220 %973 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpMemberDecorate %18 17 Offset 18 
                                                      OpMemberDecorate %18 18 Offset 18 
                                                      OpMemberDecorate %18 19 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate vs_TEXCOORD5 Location 136 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate vs_TEXCOORD3 Location 220 
                                                      OpDecorate %372 DescriptorSet 372 
                                                      OpDecorate %372 Binding 372 
                                                      OpDecorate %374 DescriptorSet 374 
                                                      OpDecorate %374 Binding 374 
                                                      OpDecorate %526 DescriptorSet 526 
                                                      OpDecorate %526 Binding 526 
                                                      OpDecorate %973 Location 973 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %17 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %10 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_4* %38 = OpVariable Private 
                                              %46 = OpTypePointer Private %10 
                               Private f32_3* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypePointer UniformConstant %48 
         UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampler 
                                              %53 = OpTypePointer UniformConstant %52 
                     UniformConstant sampler* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampledImage %48 
                                              %58 = OpTypeVector %6 2 
                                              %59 = OpTypePointer Input %58 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %64 = OpVariable Private 
                                          i32 %66 = OpConstant 19 
                                              %67 = OpTypePointer Uniform %7 
                               Private f32_4* %72 = OpVariable Private 
                                          i32 %73 = OpConstant 7 
                                          u32 %74 = OpConstant 2 
                                              %75 = OpTypePointer Uniform %6 
                                          u32 %78 = OpConstant 0 
                                          i32 %80 = OpConstant 1 
                                          u32 %83 = OpConstant 1 
                                          i32 %85 = OpConstant 2 
                                 Private f32* %89 = OpVariable Private 
                                          i32 %96 = OpConstant 6 
                                Private f32* %104 = OpVariable Private 
                                         u32 %116 = OpConstant 3 
                                         i32 %124 = OpConstant 5 
                                         f32 %132 = OpConstant 3.674022E-40 
                                         f32 %133 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                Private f32* %153 = OpVariable Private 
                                         i32 %162 = OpConstant 17 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %187 = OpVariable Private 
                                         i32 %190 = OpConstant 16 
                              Private f32_4* %195 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                         i32 %206 = OpConstant 3 
                                         i32 %212 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %227 = OpConstantComposite %132 %132 %132 
                                             %231 = OpTypeBool 
                                             %232 = OpTypePointer Private %231 
                               Private bool* %233 = OpVariable Private 
                                         i32 %234 = OpConstant 10 
                              Private f32_3* %255 = OpVariable Private 
                                         i32 %258 = OpConstant 8 
                              Private f32_3* %267 = OpVariable Private 
                                         i32 %270 = OpConstant 9 
                                             %279 = OpTypeVector %231 3 
                                             %280 = OpTypePointer Private %279 
                             Private bool_3* %281 = OpVariable Private 
                                       f32_4 %282 = OpConstantComposite %132 %132 %132 %132 
                                             %285 = OpTypeVector %231 4 
                                             %288 = OpTypePointer Function %10 
                                             %293 = OpTypePointer Function %6 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %368 = OpConstant 3.674022E-40 
                                             %370 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %371 = OpTypePointer UniformConstant %370 
      UniformConstant read_only TextureCube* %372 = OpVariable UniformConstant 
                    UniformConstant sampler* %374 = OpVariable UniformConstant 
                                             %376 = OpTypeSampledImage %370 
                                         f32 %384 = OpConstant 3.674022E-40 
                                         i32 %386 = OpConstant 11 
                               Private bool* %409 = OpVariable Private 
                                         f32 %412 = OpConstant 3.674022E-40 
                                         i32 %417 = OpConstant 14 
                                Private f32* %424 = OpVariable Private 
                              Private f32_3* %437 = OpVariable Private 
                                         i32 %440 = OpConstant 12 
                              Private f32_3* %448 = OpVariable Private 
                                         i32 %451 = OpConstant 13 
                             Private bool_3* %459 = OpVariable Private 
      UniformConstant read_only TextureCube* %526 = OpVariable UniformConstant 
                                         i32 %537 = OpConstant 15 
                                         f32 %598 = OpConstant 3.674022E-40 
                                       f32_3 %599 = OpConstantComposite %598 %598 %598 
                                         i32 %603 = OpConstant 18 
                                         f32 %618 = OpConstant 3.674022E-40 
                                       f32_3 %619 = OpConstantComposite %618 %618 %618 
                                         f32 %626 = OpConstant 3.674022E-40 
                                         f32 %650 = OpConstant 3.674022E-40 
                                Private f32* %677 = OpVariable Private 
                              Private f32_3* %696 = OpVariable Private 
                                         f32 %711 = OpConstant 3.674022E-40 
                                Private f32* %714 = OpVariable Private 
                                Private f32* %719 = OpVariable Private 
                                         f32 %762 = OpConstant 3.674022E-40 
                                         f32 %790 = OpConstant 3.674022E-40 
                                         f32 %792 = OpConstant 3.674022E-40 
                                         f32 %809 = OpConstant 3.674022E-40 
                                         f32 %814 = OpConstant 3.674022E-40 
                                         f32 %832 = OpConstant 3.674022E-40 
                               Private bool* %848 = OpVariable Private 
                                       f32_3 %912 = OpConstantComposite %133 %133 %133 
                                             %972 = OpTypePointer Output %7 
                               Output f32_4* %973 = OpVariable Output 
                                             %984 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %289 = OpVariable Function 
                               Function f32* %294 = OpVariable Function 
                               Function f32* %306 = OpVariable Function 
                               Function f32* %318 = OpVariable Function 
                             Function f32_3* %464 = OpVariable Function 
                               Function f32* %468 = OpVariable Function 
                               Function f32* %480 = OpVariable Function 
                               Function f32* %492 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %14 %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
                                                      OpStore %9 %28 
                                        f32_4 %31 = OpLoad %9 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                          f32 %35 = OpDot %32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                          f32 %37 = OpExtInst %1 32 %36 
                                                      OpStore %30 %37 
                                          f32 %39 = OpLoad %30 
                                        f32_3 %40 = OpCompositeConstruct %39 %39 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %38 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 6 3 
                                                      OpStore %38 %45 
                          read_only Texture2D %51 = OpLoad %50 
                                      sampler %55 = OpLoad %54 
                   read_only Texture2DSampled %57 = OpSampledImage %51 %55 
                                        f32_2 %61 = OpLoad vs_TEXCOORD0 
                                        f32_4 %62 = OpImageSampleImplicitLod %57 %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                                      OpStore %47 %63 
                                        f32_3 %65 = OpLoad %47 
                               Uniform f32_4* %68 = OpAccessChain %20 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                                      OpStore %64 %71 
                                 Uniform f32* %76 = OpAccessChain %20 %73 %22 %74 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %72 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %20 %73 %80 %74 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %84 = OpAccessChain %72 %83 
                                                      OpStore %84 %82 
                                 Uniform f32* %86 = OpAccessChain %20 %73 %85 %74 
                                          f32 %87 = OpLoad %86 
                                 Private f32* %88 = OpAccessChain %72 %74 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %72 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                                      OpStore %89 %94 
                                        f32_3 %95 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %97 = OpAccessChain %20 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpFAdd %95 %100 
                                       f32_4 %102 = OpLoad %72 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %72 %103 
                                       f32_4 %105 = OpLoad %72 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %106 %108 
                                                      OpStore %104 %109 
                                         f32 %110 = OpLoad %104 
                                         f32 %111 = OpExtInst %1 31 %110 
                                                      OpStore %104 %111 
                                         f32 %112 = OpLoad %89 
                                         f32 %113 = OpFNegate %112 
                                         f32 %114 = OpLoad %104 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %104 %115 
                                Uniform f32* %117 = OpAccessChain %20 %96 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpLoad %104 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %121 = OpLoad %89 
                                         f32 %122 = OpFAdd %120 %121 
                                                      OpStore %89 %122 
                                         f32 %123 = OpLoad %89 
                                Uniform f32* %125 = OpAccessChain %20 %124 %74 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFMul %123 %126 
                                Uniform f32* %128 = OpAccessChain %20 %124 %116 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFAdd %127 %129 
                                                      OpStore %89 %130 
                                         f32 %131 = OpLoad %89 
                                         f32 %134 = OpExtInst %1 43 %131 %132 %133 
                                                      OpStore %89 %134 
                                       f32_4 %137 = OpLoad vs_TEXCOORD5 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_4 %139 = OpLoad vs_TEXCOORD5 
                                       f32_2 %140 = OpVectorShuffle %139 %139 3 3 
                                       f32_2 %141 = OpFDiv %138 %140 
                                       f32_4 %142 = OpLoad %72 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %72 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_4 %149 = OpLoad %72 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_4 %151 = OpImageSampleImplicitLod %148 %150 
                                         f32 %152 = OpCompositeExtract %151 0 
                                                      OpStore %104 %152 
                                         f32 %154 = OpLoad %104 
                                         f32 %155 = OpFNegate %154 
                                         f32 %156 = OpFAdd %155 %133 
                                                      OpStore %153 %156 
                                         f32 %157 = OpLoad %89 
                                         f32 %158 = OpLoad %153 
                                         f32 %159 = OpFMul %157 %158 
                                         f32 %160 = OpLoad %104 
                                         f32 %161 = OpFAdd %159 %160 
                                                      OpStore %89 %161 
                                Uniform f32* %163 = OpAccessChain %20 %162 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFNegate %164 
                                         f32 %166 = OpFAdd %165 %133 
                                                      OpStore %104 %166 
                                       f32_4 %167 = OpLoad %38 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFNegate %168 
                                       f32_3 %171 = OpLoad vs_TEXCOORD1 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %153 %172 
                                         f32 %173 = OpLoad %153 
                                         f32 %174 = OpLoad %153 
                                         f32 %175 = OpFAdd %173 %174 
                                                      OpStore %153 %175 
                                       f32_3 %176 = OpLoad vs_TEXCOORD1 
                                         f32 %177 = OpLoad %153 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFMul %176 %179 
                                       f32_4 %181 = OpLoad %38 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFNegate %182 
                                       f32_3 %184 = OpFAdd %180 %183 
                                       f32_4 %185 = OpLoad %72 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %72 %186 
                                         f32 %188 = OpLoad %89 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                              Uniform f32_4* %191 = OpAccessChain %20 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %189 %193 
                                                      OpStore %187 %194 
                                       f32_3 %196 = OpLoad vs_TEXCOORD1 
                                       f32_4 %197 = OpLoad %195 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %195 %198 
                                Private f32* %199 = OpAccessChain %195 %116 
                                                      OpStore %199 %133 
                              Uniform f32_4* %201 = OpAccessChain %20 %85 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %195 
                                         f32 %204 = OpDot %202 %203 
                                Private f32* %205 = OpAccessChain %200 %78 
                                                      OpStore %205 %204 
                              Uniform f32_4* %207 = OpAccessChain %20 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %195 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %200 %83 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %20 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %195 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %200 %74 
                                                      OpStore %217 %216 
                                       f32_4 %218 = OpLoad %200 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %221 = OpLoad vs_TEXCOORD3 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %195 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %195 %224 
                                       f32_4 %225 = OpLoad %195 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %228 = OpExtInst %1 40 %226 %227 
                                       f32_4 %229 = OpLoad %195 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %195 %230 
                                Uniform f32* %235 = OpAccessChain %20 %234 %116 
                                         f32 %236 = OpLoad %235 
                                        bool %237 = OpFOrdLessThan %132 %236 
                                                      OpStore %233 %237 
                                        bool %238 = OpLoad %233 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %353 
                                             %239 = OpLabel 
                                       f32_4 %241 = OpLoad %72 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_4 %243 = OpLoad %72 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                         f32 %245 = OpDot %242 %244 
                                                      OpStore %89 %245 
                                         f32 %246 = OpLoad %89 
                                         f32 %247 = OpExtInst %1 32 %246 
                                                      OpStore %89 %247 
                                         f32 %248 = OpLoad %89 
                                       f32_3 %249 = OpCompositeConstruct %248 %248 %248 
                                       f32_4 %250 = OpLoad %72 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_4 %253 = OpLoad %200 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %200 %254 
                                       f32_3 %256 = OpLoad vs_TEXCOORD2 
                                       f32_3 %257 = OpFNegate %256 
                              Uniform f32_4* %259 = OpAccessChain %20 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpFAdd %257 %261 
                                                      OpStore %255 %262 
                                       f32_3 %263 = OpLoad %255 
                                       f32_4 %264 = OpLoad %200 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFDiv %263 %265 
                                                      OpStore %255 %266 
                                       f32_3 %268 = OpLoad vs_TEXCOORD2 
                                       f32_3 %269 = OpFNegate %268 
                              Uniform f32_4* %271 = OpAccessChain %20 %270 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %269 %273 
                                                      OpStore %267 %274 
                                       f32_3 %275 = OpLoad %267 
                                       f32_4 %276 = OpLoad %200 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFDiv %275 %277 
                                                      OpStore %267 %278 
                                       f32_4 %283 = OpLoad %200 
                                       f32_4 %284 = OpVectorShuffle %283 %283 0 1 2 0 
                                      bool_4 %286 = OpFOrdLessThan %282 %284 
                                      bool_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                                      OpStore %281 %287 
                                       f32_3 %290 = OpLoad %255 
                                                      OpStore %289 %290 
                               Private bool* %291 = OpAccessChain %281 %78 
                                        bool %292 = OpLoad %291 
                                                      OpSelectionMerge %296 None 
                                                      OpBranchConditional %292 %295 %299 
                                             %295 = OpLabel 
                                Private f32* %297 = OpAccessChain %255 %78 
                                         f32 %298 = OpLoad %297 
                                                      OpStore %294 %298 
                                                      OpBranch %296 
                                             %299 = OpLabel 
                                Private f32* %300 = OpAccessChain %267 %78 
                                         f32 %301 = OpLoad %300 
                                                      OpStore %294 %301 
                                                      OpBranch %296 
                                             %296 = OpLabel 
                                         f32 %302 = OpLoad %294 
                               Function f32* %303 = OpAccessChain %289 %78 
                                                      OpStore %303 %302 
                               Private bool* %304 = OpAccessChain %281 %83 
                                        bool %305 = OpLoad %304 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %305 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %255 %83 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %306 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                Private f32* %312 = OpAccessChain %267 %83 
                                         f32 %313 = OpLoad %312 
                                                      OpStore %306 %313 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %314 = OpLoad %306 
                               Function f32* %315 = OpAccessChain %289 %83 
                                                      OpStore %315 %314 
                               Private bool* %316 = OpAccessChain %281 %74 
                                        bool %317 = OpLoad %316 
                                                      OpSelectionMerge %320 None 
                                                      OpBranchConditional %317 %319 %323 
                                             %319 = OpLabel 
                                Private f32* %321 = OpAccessChain %255 %74 
                                         f32 %322 = OpLoad %321 
                                                      OpStore %318 %322 
                                                      OpBranch %320 
                                             %323 = OpLabel 
                                Private f32* %324 = OpAccessChain %267 %74 
                                         f32 %325 = OpLoad %324 
                                                      OpStore %318 %325 
                                                      OpBranch %320 
                                             %320 = OpLabel 
                                         f32 %326 = OpLoad %318 
                               Function f32* %327 = OpAccessChain %289 %74 
                                                      OpStore %327 %326 
                                       f32_3 %328 = OpLoad %289 
                                                      OpStore %255 %328 
                                Private f32* %329 = OpAccessChain %255 %83 
                                         f32 %330 = OpLoad %329 
                                Private f32* %331 = OpAccessChain %255 %78 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpExtInst %1 37 %330 %332 
                                                      OpStore %89 %333 
                                Private f32* %334 = OpAccessChain %255 %74 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpLoad %89 
                                         f32 %337 = OpExtInst %1 37 %335 %336 
                                                      OpStore %89 %337 
                                       f32_3 %338 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %339 = OpAccessChain %20 %234 
                                       f32_4 %340 = OpLoad %339 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpFNegate %341 
                                       f32_3 %343 = OpFAdd %338 %342 
                                                      OpStore %255 %343 
                                       f32_4 %344 = OpLoad %200 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                         f32 %346 = OpLoad %89 
                                       f32_3 %347 = OpCompositeConstruct %346 %346 %346 
                                       f32_3 %348 = OpFMul %345 %347 
                                       f32_3 %349 = OpLoad %255 
                                       f32_3 %350 = OpFAdd %348 %349 
                                       f32_4 %351 = OpLoad %200 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %200 %352 
                                                      OpBranch %240 
                                             %353 = OpLabel 
                                       f32_4 %354 = OpLoad %72 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %200 
                                       f32_4 %357 = OpVectorShuffle %356 %355 4 5 6 3 
                                                      OpStore %200 %357 
                                                      OpBranch %240 
                                             %240 = OpLabel 
                                         f32 %358 = OpLoad %104 
                                         f32 %359 = OpFNegate %358 
                                         f32 %361 = OpFMul %359 %360 
                                         f32 %363 = OpFAdd %361 %362 
                                                      OpStore %89 %363 
                                         f32 %364 = OpLoad %89 
                                         f32 %365 = OpLoad %104 
                                         f32 %366 = OpFMul %364 %365 
                                                      OpStore %89 %366 
                                         f32 %367 = OpLoad %89 
                                         f32 %369 = OpFMul %367 %368 
                                                      OpStore %89 %369 
                       read_only TextureCube %373 = OpLoad %372 
                                     sampler %375 = OpLoad %374 
                read_only TextureCubeSampled %377 = OpSampledImage %373 %375 
                                       f32_4 %378 = OpLoad %200 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                         f32 %380 = OpLoad %89 
                                       f32_4 %381 = OpImageSampleExplicitLod %377 %379 Lod %7 
                                                      OpStore %200 %381 
                                Private f32* %382 = OpAccessChain %200 %116 
                                         f32 %383 = OpLoad %382 
                                         f32 %385 = OpFAdd %383 %384 
                                                      OpStore %153 %385 
                                Uniform f32* %387 = OpAccessChain %20 %386 %116 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpLoad %153 
                                         f32 %390 = OpFMul %388 %389 
                                         f32 %391 = OpFAdd %390 %133 
                                                      OpStore %153 %391 
                                         f32 %392 = OpLoad %153 
                                         f32 %393 = OpExtInst %1 30 %392 
                                                      OpStore %153 %393 
                                         f32 %394 = OpLoad %153 
                                Uniform f32* %395 = OpAccessChain %20 %386 %83 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFMul %394 %396 
                                                      OpStore %153 %397 
                                         f32 %398 = OpLoad %153 
                                         f32 %399 = OpExtInst %1 29 %398 
                                                      OpStore %153 %399 
                                         f32 %400 = OpLoad %153 
                                Uniform f32* %401 = OpAccessChain %20 %386 %78 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpFMul %400 %402 
                                                      OpStore %153 %403 
                                       f32_4 %404 = OpLoad %200 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                         f32 %406 = OpLoad %153 
                                       f32_3 %407 = OpCompositeConstruct %406 %406 %406 
                                       f32_3 %408 = OpFMul %405 %407 
                                                      OpStore %255 %408 
                                Uniform f32* %410 = OpAccessChain %20 %270 %116 
                                         f32 %411 = OpLoad %410 
                                        bool %413 = OpFOrdLessThan %411 %412 
                                                      OpStore %409 %413 
                                        bool %414 = OpLoad %409 
                                                      OpSelectionMerge %416 None 
                                                      OpBranchConditional %414 %415 %416 
                                             %415 = OpLabel 
                                Uniform f32* %418 = OpAccessChain %20 %417 %116 
                                         f32 %419 = OpLoad %418 
                                        bool %420 = OpFOrdLessThan %132 %419 
                                                      OpStore %409 %420 
                                        bool %421 = OpLoad %409 
                                                      OpSelectionMerge %423 None 
                                                      OpBranchConditional %421 %422 %423 
                                             %422 = OpLabel 
                                       f32_4 %425 = OpLoad %72 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_4 %427 = OpLoad %72 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                         f32 %429 = OpDot %426 %428 
                                                      OpStore %424 %429 
                                         f32 %430 = OpLoad %424 
                                         f32 %431 = OpExtInst %1 32 %430 
                                                      OpStore %424 %431 
                                         f32 %432 = OpLoad %424 
                                       f32_3 %433 = OpCompositeConstruct %432 %432 %432 
                                       f32_4 %434 = OpLoad %72 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpFMul %433 %435 
                                                      OpStore %267 %436 
                                       f32_3 %438 = OpLoad vs_TEXCOORD2 
                                       f32_3 %439 = OpFNegate %438 
                              Uniform f32_4* %441 = OpAccessChain %20 %440 
                                       f32_4 %442 = OpLoad %441 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %439 %443 
                                                      OpStore %437 %444 
                                       f32_3 %445 = OpLoad %437 
                                       f32_3 %446 = OpLoad %267 
                                       f32_3 %447 = OpFDiv %445 %446 
                                                      OpStore %437 %447 
                                       f32_3 %449 = OpLoad vs_TEXCOORD2 
                                       f32_3 %450 = OpFNegate %449 
                              Uniform f32_4* %452 = OpAccessChain %20 %451 
                                       f32_4 %453 = OpLoad %452 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                                       f32_3 %455 = OpFAdd %450 %454 
                                                      OpStore %448 %455 
                                       f32_3 %456 = OpLoad %448 
                                       f32_3 %457 = OpLoad %267 
                                       f32_3 %458 = OpFDiv %456 %457 
                                                      OpStore %448 %458 
                                       f32_3 %460 = OpLoad %267 
                                       f32_4 %461 = OpVectorShuffle %460 %460 0 1 2 0 
                                      bool_4 %462 = OpFOrdLessThan %282 %461 
                                      bool_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                                      OpStore %459 %463 
                                       f32_3 %465 = OpLoad %437 
                                                      OpStore %464 %465 
                               Private bool* %466 = OpAccessChain %459 %78 
                                        bool %467 = OpLoad %466 
                                                      OpSelectionMerge %470 None 
                                                      OpBranchConditional %467 %469 %473 
                                             %469 = OpLabel 
                                Private f32* %471 = OpAccessChain %437 %78 
                                         f32 %472 = OpLoad %471 
                                                      OpStore %468 %472 
                                                      OpBranch %470 
                                             %473 = OpLabel 
                                Private f32* %474 = OpAccessChain %448 %78 
                                         f32 %475 = OpLoad %474 
                                                      OpStore %468 %475 
                                                      OpBranch %470 
                                             %470 = OpLabel 
                                         f32 %476 = OpLoad %468 
                               Function f32* %477 = OpAccessChain %464 %78 
                                                      OpStore %477 %476 
                               Private bool* %478 = OpAccessChain %459 %83 
                                        bool %479 = OpLoad %478 
                                                      OpSelectionMerge %482 None 
                                                      OpBranchConditional %479 %481 %485 
                                             %481 = OpLabel 
                                Private f32* %483 = OpAccessChain %437 %83 
                                         f32 %484 = OpLoad %483 
                                                      OpStore %480 %484 
                                                      OpBranch %482 
                                             %485 = OpLabel 
                                Private f32* %486 = OpAccessChain %448 %83 
                                         f32 %487 = OpLoad %486 
                                                      OpStore %480 %487 
                                                      OpBranch %482 
                                             %482 = OpLabel 
                                         f32 %488 = OpLoad %480 
                               Function f32* %489 = OpAccessChain %464 %83 
                                                      OpStore %489 %488 
                               Private bool* %490 = OpAccessChain %459 %74 
                                        bool %491 = OpLoad %490 
                                                      OpSelectionMerge %494 None 
                                                      OpBranchConditional %491 %493 %497 
                                             %493 = OpLabel 
                                Private f32* %495 = OpAccessChain %437 %74 
                                         f32 %496 = OpLoad %495 
                                                      OpStore %492 %496 
                                                      OpBranch %494 
                                             %497 = OpLabel 
                                Private f32* %498 = OpAccessChain %448 %74 
                                         f32 %499 = OpLoad %498 
                                                      OpStore %492 %499 
                                                      OpBranch %494 
                                             %494 = OpLabel 
                                         f32 %500 = OpLoad %492 
                               Function f32* %501 = OpAccessChain %464 %74 
                                                      OpStore %501 %500 
                                       f32_3 %502 = OpLoad %464 
                                                      OpStore %437 %502 
                                Private f32* %503 = OpAccessChain %437 %83 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %437 %78 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpExtInst %1 37 %504 %506 
                                                      OpStore %424 %507 
                                Private f32* %508 = OpAccessChain %437 %74 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpLoad %424 
                                         f32 %511 = OpExtInst %1 37 %509 %510 
                                                      OpStore %424 %511 
                                       f32_3 %512 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %513 = OpAccessChain %20 %417 
                                       f32_4 %514 = OpLoad %513 
                                       f32_3 %515 = OpVectorShuffle %514 %514 0 1 2 
                                       f32_3 %516 = OpFNegate %515 
                                       f32_3 %517 = OpFAdd %512 %516 
                                                      OpStore %437 %517 
                                       f32_3 %518 = OpLoad %267 
                                         f32 %519 = OpLoad %424 
                                       f32_3 %520 = OpCompositeConstruct %519 %519 %519 
                                       f32_3 %521 = OpFMul %518 %520 
                                       f32_3 %522 = OpLoad %437 
                                       f32_3 %523 = OpFAdd %521 %522 
                                       f32_4 %524 = OpLoad %72 
                                       f32_4 %525 = OpVectorShuffle %524 %523 4 5 6 3 
                                                      OpStore %72 %525 
                                                      OpBranch %423 
                                             %423 = OpLabel 
                       read_only TextureCube %527 = OpLoad %526 
                                     sampler %528 = OpLoad %374 
                read_only TextureCubeSampled %529 = OpSampledImage %527 %528 
                                       f32_4 %530 = OpLoad %72 
                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
                                         f32 %532 = OpLoad %89 
                                       f32_4 %533 = OpImageSampleExplicitLod %529 %531 Lod %7 
                                                      OpStore %72 %533 
                                Private f32* %534 = OpAccessChain %72 %116 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpFAdd %535 %384 
                                                      OpStore %89 %536 
                                Uniform f32* %538 = OpAccessChain %20 %537 %116 
                                         f32 %539 = OpLoad %538 
                                         f32 %540 = OpLoad %89 
                                         f32 %541 = OpFMul %539 %540 
                                         f32 %542 = OpFAdd %541 %133 
                                                      OpStore %89 %542 
                                         f32 %543 = OpLoad %89 
                                         f32 %544 = OpExtInst %1 30 %543 
                                                      OpStore %89 %544 
                                         f32 %545 = OpLoad %89 
                                Uniform f32* %546 = OpAccessChain %20 %537 %83 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFMul %545 %547 
                                                      OpStore %89 %548 
                                         f32 %549 = OpLoad %89 
                                         f32 %550 = OpExtInst %1 29 %549 
                                                      OpStore %89 %550 
                                         f32 %551 = OpLoad %89 
                                Uniform f32* %552 = OpAccessChain %20 %537 %78 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                                      OpStore %89 %554 
                                       f32_4 %555 = OpLoad %72 
                                       f32_3 %556 = OpVectorShuffle %555 %555 0 1 2 
                                         f32 %557 = OpLoad %89 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpFMul %556 %558 
                                       f32_4 %560 = OpLoad %72 
                                       f32_4 %561 = OpVectorShuffle %560 %559 4 5 6 3 
                                                      OpStore %72 %561 
                                         f32 %562 = OpLoad %153 
                                       f32_3 %563 = OpCompositeConstruct %562 %562 %562 
                                       f32_4 %564 = OpLoad %200 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                       f32_3 %566 = OpFMul %563 %565 
                                       f32_4 %567 = OpLoad %72 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 1 2 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %566 %569 
                                       f32_4 %571 = OpLoad %200 
                                       f32_4 %572 = OpVectorShuffle %571 %570 4 5 6 3 
                                                      OpStore %200 %572 
                              Uniform f32_4* %573 = OpAccessChain %20 %270 
                                       f32_4 %574 = OpLoad %573 
                                       f32_3 %575 = OpVectorShuffle %574 %574 3 3 3 
                                       f32_4 %576 = OpLoad %200 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 1 2 
                                       f32_3 %578 = OpFMul %575 %577 
                                       f32_4 %579 = OpLoad %72 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpFAdd %578 %580 
                                                      OpStore %255 %581 
                                                      OpBranch %416 
                                             %416 = OpLabel 
                                       f32_3 %582 = OpLoad vs_TEXCOORD1 
                                       f32_3 %583 = OpLoad vs_TEXCOORD1 
                                         f32 %584 = OpDot %582 %583 
                                                      OpStore %89 %584 
                                         f32 %585 = OpLoad %89 
                                         f32 %586 = OpExtInst %1 32 %585 
                                                      OpStore %89 %586 
                                         f32 %587 = OpLoad %89 
                                       f32_3 %588 = OpCompositeConstruct %587 %587 %587 
                                       f32_3 %589 = OpLoad vs_TEXCOORD1 
                                       f32_3 %590 = OpFMul %588 %589 
                                       f32_4 %591 = OpLoad %72 
                                       f32_4 %592 = OpVectorShuffle %591 %590 4 5 6 3 
                                                      OpStore %72 %592 
                                       f32_3 %593 = OpLoad %47 
                              Uniform f32_4* %594 = OpAccessChain %20 %66 
                                       f32_4 %595 = OpLoad %594 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 2 
                                       f32_3 %597 = OpFMul %593 %596 
                                       f32_3 %600 = OpFAdd %597 %599 
                                       f32_4 %601 = OpLoad %200 
                                       f32_4 %602 = OpVectorShuffle %601 %600 4 5 6 3 
                                                      OpStore %200 %602 
                                Uniform f32* %604 = OpAccessChain %20 %603 
                                         f32 %605 = OpLoad %604 
                                Uniform f32* %606 = OpAccessChain %20 %603 
                                         f32 %607 = OpLoad %606 
                                Uniform f32* %608 = OpAccessChain %20 %603 
                                         f32 %609 = OpLoad %608 
                                       f32_3 %610 = OpCompositeConstruct %605 %607 %609 
                                         f32 %611 = OpCompositeExtract %610 0 
                                         f32 %612 = OpCompositeExtract %610 1 
                                         f32 %613 = OpCompositeExtract %610 2 
                                       f32_3 %614 = OpCompositeConstruct %611 %612 %613 
                                       f32_4 %615 = OpLoad %200 
                                       f32_3 %616 = OpVectorShuffle %615 %615 0 1 2 
                                       f32_3 %617 = OpFMul %614 %616 
                                       f32_3 %620 = OpFAdd %617 %619 
                                       f32_4 %621 = OpLoad %200 
                                       f32_4 %622 = OpVectorShuffle %621 %620 4 5 6 3 
                                                      OpStore %200 %622 
                                Uniform f32* %623 = OpAccessChain %20 %603 
                                         f32 %624 = OpLoad %623 
                                         f32 %625 = OpFNegate %624 
                                         f32 %627 = OpFMul %625 %626 
                                         f32 %628 = OpFAdd %627 %626 
                                                      OpStore %89 %628 
                                         f32 %629 = OpLoad %89 
                                       f32_3 %630 = OpCompositeConstruct %629 %629 %629 
                                       f32_3 %631 = OpLoad %64 
                                       f32_3 %632 = OpFMul %630 %631 
                                                      OpStore %64 %632 
                                       f32_4 %633 = OpLoad %9 
                                       f32_3 %634 = OpVectorShuffle %633 %633 0 1 2 
                                         f32 %635 = OpLoad %30 
                                       f32_3 %636 = OpCompositeConstruct %635 %635 %635 
                                       f32_3 %637 = OpFMul %634 %636 
                              Uniform f32_4* %638 = OpAccessChain %20 %80 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                                       f32_3 %641 = OpFAdd %637 %640 
                                       f32_4 %642 = OpLoad %9 
                                       f32_4 %643 = OpVectorShuffle %642 %641 4 5 6 3 
                                                      OpStore %9 %643 
                                       f32_4 %644 = OpLoad %9 
                                       f32_3 %645 = OpVectorShuffle %644 %644 0 1 2 
                                       f32_4 %646 = OpLoad %9 
                                       f32_3 %647 = OpVectorShuffle %646 %646 0 1 2 
                                         f32 %648 = OpDot %645 %647 
                                                      OpStore %30 %648 
                                         f32 %649 = OpLoad %30 
                                         f32 %651 = OpExtInst %1 40 %649 %650 
                                                      OpStore %30 %651 
                                         f32 %652 = OpLoad %30 
                                         f32 %653 = OpExtInst %1 32 %652 
                                                      OpStore %30 %653 
                                         f32 %654 = OpLoad %30 
                                       f32_3 %655 = OpCompositeConstruct %654 %654 %654 
                                       f32_4 %656 = OpLoad %9 
                                       f32_3 %657 = OpVectorShuffle %656 %656 0 1 2 
                                       f32_3 %658 = OpFMul %655 %657 
                                       f32_4 %659 = OpLoad %9 
                                       f32_4 %660 = OpVectorShuffle %659 %658 4 5 6 3 
                                                      OpStore %9 %660 
                                       f32_4 %661 = OpLoad %72 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                                       f32_4 %663 = OpLoad %38 
                                       f32_3 %664 = OpVectorShuffle %663 %663 0 1 2 
                                         f32 %665 = OpDot %662 %664 
                                                      OpStore %30 %665 
                                       f32_4 %666 = OpLoad %72 
                                       f32_3 %667 = OpVectorShuffle %666 %666 0 1 2 
                              Uniform f32_4* %668 = OpAccessChain %20 %80 
                                       f32_4 %669 = OpLoad %668 
                                       f32_3 %670 = OpVectorShuffle %669 %669 0 1 2 
                                         f32 %671 = OpDot %667 %670 
                                Private f32* %672 = OpAccessChain %38 %78 
                                                      OpStore %672 %671 
                                Private f32* %673 = OpAccessChain %38 %78 
                                         f32 %674 = OpLoad %673 
                                         f32 %675 = OpExtInst %1 43 %674 %132 %133 
                                Private f32* %676 = OpAccessChain %38 %78 
                                                      OpStore %676 %675 
                                       f32_4 %678 = OpLoad %72 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_4 %680 = OpLoad %9 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 1 2 
                                         f32 %682 = OpDot %679 %681 
                                                      OpStore %677 %682 
                                         f32 %683 = OpLoad %677 
                                         f32 %684 = OpExtInst %1 43 %683 %132 %133 
                                                      OpStore %677 %684 
                              Uniform f32_4* %685 = OpAccessChain %20 %80 
                                       f32_4 %686 = OpLoad %685 
                                       f32_3 %687 = OpVectorShuffle %686 %686 0 1 2 
                                       f32_4 %688 = OpLoad %9 
                                       f32_3 %689 = OpVectorShuffle %688 %688 0 1 2 
                                         f32 %690 = OpDot %687 %689 
                                Private f32* %691 = OpAccessChain %9 %78 
                                                      OpStore %691 %690 
                                Private f32* %692 = OpAccessChain %9 %78 
                                         f32 %693 = OpLoad %692 
                                         f32 %694 = OpExtInst %1 43 %693 %132 %133 
                                Private f32* %695 = OpAccessChain %9 %78 
                                                      OpStore %695 %694 
                                Private f32* %697 = OpAccessChain %9 %78 
                                         f32 %698 = OpLoad %697 
                                Private f32* %699 = OpAccessChain %9 %78 
                                         f32 %700 = OpLoad %699 
                                         f32 %701 = OpFMul %698 %700 
                                Private f32* %702 = OpAccessChain %696 %78 
                                                      OpStore %702 %701 
                                       f32_3 %703 = OpLoad %696 
                                       f32_2 %704 = OpVectorShuffle %703 %703 0 0 
                                         f32 %705 = OpLoad %104 
                                       f32_2 %706 = OpCompositeConstruct %705 %705 
                                         f32 %707 = OpDot %704 %706 
                                Private f32* %708 = OpAccessChain %696 %78 
                                                      OpStore %708 %707 
                                Private f32* %709 = OpAccessChain %696 %78 
                                         f32 %710 = OpLoad %709 
                                         f32 %712 = OpFAdd %710 %711 
                                Private f32* %713 = OpAccessChain %696 %78 
                                                      OpStore %713 %712 
                                Private f32* %715 = OpAccessChain %38 %78 
                                         f32 %716 = OpLoad %715 
                                         f32 %717 = OpFNegate %716 
                                         f32 %718 = OpFAdd %717 %133 
                                                      OpStore %714 %718 
                                         f32 %720 = OpLoad %714 
                                         f32 %721 = OpLoad %714 
                                         f32 %722 = OpFMul %720 %721 
                                                      OpStore %719 %722 
                                         f32 %723 = OpLoad %719 
                                         f32 %724 = OpLoad %719 
                                         f32 %725 = OpFMul %723 %724 
                                                      OpStore %719 %725 
                                         f32 %726 = OpLoad %714 
                                         f32 %727 = OpLoad %719 
                                         f32 %728 = OpFMul %726 %727 
                                                      OpStore %714 %728 
                                Private f32* %729 = OpAccessChain %696 %78 
                                         f32 %730 = OpLoad %729 
                                         f32 %731 = OpLoad %714 
                                         f32 %732 = OpFMul %730 %731 
                                         f32 %733 = OpFAdd %732 %133 
                                                      OpStore %714 %733 
                                         f32 %734 = OpLoad %30 
                                         f32 %735 = OpExtInst %1 4 %734 
                                         f32 %736 = OpFNegate %735 
                                         f32 %737 = OpFAdd %736 %133 
                                                      OpStore %719 %737 
                                         f32 %738 = OpLoad %719 
                                         f32 %739 = OpLoad %719 
                                         f32 %740 = OpFMul %738 %739 
                                                      OpStore %153 %740 
                                         f32 %741 = OpLoad %153 
                                         f32 %742 = OpLoad %153 
                                         f32 %743 = OpFMul %741 %742 
                                                      OpStore %153 %743 
                                         f32 %744 = OpLoad %719 
                                         f32 %745 = OpLoad %153 
                                         f32 %746 = OpFMul %744 %745 
                                                      OpStore %719 %746 
                                Private f32* %747 = OpAccessChain %696 %78 
                                         f32 %748 = OpLoad %747 
                                         f32 %749 = OpLoad %719 
                                         f32 %750 = OpFMul %748 %749 
                                         f32 %751 = OpFAdd %750 %133 
                                Private f32* %752 = OpAccessChain %696 %78 
                                                      OpStore %752 %751 
                                Private f32* %753 = OpAccessChain %696 %78 
                                         f32 %754 = OpLoad %753 
                                         f32 %755 = OpLoad %714 
                                         f32 %756 = OpFMul %754 %755 
                                Private f32* %757 = OpAccessChain %696 %78 
                                                      OpStore %757 %756 
                                         f32 %758 = OpLoad %104 
                                         f32 %759 = OpLoad %104 
                                         f32 %760 = OpFMul %758 %759 
                                                      OpStore %714 %760 
                                         f32 %761 = OpLoad %714 
                                         f32 %763 = OpExtInst %1 40 %761 %762 
                                                      OpStore %714 %763 
                                         f32 %764 = OpLoad %714 
                                         f32 %765 = OpFNegate %764 
                                         f32 %766 = OpFAdd %765 %133 
                                                      OpStore %104 %766 
                                         f32 %767 = OpLoad %30 
                                         f32 %768 = OpExtInst %1 4 %767 
                                         f32 %769 = OpLoad %104 
                                         f32 %770 = OpFMul %768 %769 
                                         f32 %771 = OpLoad %714 
                                         f32 %772 = OpFAdd %770 %771 
                                                      OpStore %153 %772 
                                Private f32* %773 = OpAccessChain %38 %78 
                                         f32 %774 = OpLoad %773 
                                         f32 %775 = OpLoad %104 
                                         f32 %776 = OpFMul %774 %775 
                                         f32 %777 = OpLoad %714 
                                         f32 %778 = OpFAdd %776 %777 
                                                      OpStore %104 %778 
                                         f32 %779 = OpLoad %30 
                                         f32 %780 = OpExtInst %1 4 %779 
                                         f32 %781 = OpLoad %104 
                                         f32 %782 = OpFMul %780 %781 
                                                      OpStore %30 %782 
                                Private f32* %783 = OpAccessChain %38 %78 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpLoad %153 
                                         f32 %786 = OpFMul %784 %785 
                                         f32 %787 = OpLoad %30 
                                         f32 %788 = OpFAdd %786 %787 
                                                      OpStore %30 %788 
                                         f32 %789 = OpLoad %30 
                                         f32 %791 = OpFAdd %789 %790 
                                                      OpStore %30 %791 
                                         f32 %793 = OpLoad %30 
                                         f32 %794 = OpFDiv %792 %793 
                                                      OpStore %30 %794 
                                         f32 %795 = OpLoad %714 
                                         f32 %796 = OpLoad %714 
                                         f32 %797 = OpFMul %795 %796 
                                                      OpStore %104 %797 
                                         f32 %798 = OpLoad %677 
                                         f32 %799 = OpLoad %104 
                                         f32 %800 = OpFMul %798 %799 
                                         f32 %801 = OpLoad %677 
                                         f32 %802 = OpFNegate %801 
                                         f32 %803 = OpFAdd %800 %802 
                                                      OpStore %153 %803 
                                         f32 %804 = OpLoad %153 
                                         f32 %805 = OpLoad %677 
                                         f32 %806 = OpFMul %804 %805 
                                         f32 %807 = OpFAdd %806 %133 
                                                      OpStore %677 %807 
                                         f32 %808 = OpLoad %104 
                                         f32 %810 = OpFMul %808 %809 
                                                      OpStore %104 %810 
                                         f32 %811 = OpLoad %677 
                                         f32 %812 = OpLoad %677 
                                         f32 %813 = OpFMul %811 %812 
                                         f32 %815 = OpFAdd %813 %814 
                                                      OpStore %677 %815 
                                         f32 %816 = OpLoad %104 
                                         f32 %817 = OpLoad %677 
                                         f32 %818 = OpFDiv %816 %817 
                                                      OpStore %677 %818 
                                         f32 %819 = OpLoad %30 
                                         f32 %820 = OpLoad %677 
                                         f32 %821 = OpFMul %819 %820 
                                Private f32* %822 = OpAccessChain %696 %74 
                                                      OpStore %822 %821 
                                       f32_4 %823 = OpLoad %38 
                                       f32_2 %824 = OpVectorShuffle %823 %823 0 0 
                                       f32_3 %825 = OpLoad %696 
                                       f32_2 %826 = OpVectorShuffle %825 %825 0 2 
                                       f32_2 %827 = OpFMul %824 %826 
                                       f32_3 %828 = OpLoad %696 
                                       f32_3 %829 = OpVectorShuffle %828 %827 3 1 4 
                                                      OpStore %696 %829 
                                Private f32* %830 = OpAccessChain %696 %74 
                                         f32 %831 = OpLoad %830 
                                         f32 %833 = OpFMul %831 %832 
                                                      OpStore %30 %833 
                                         f32 %834 = OpLoad %30 
                                         f32 %835 = OpExtInst %1 40 %834 %132 
                                                      OpStore %30 %835 
                                         f32 %836 = OpLoad %714 
                                         f32 %837 = OpLoad %714 
                                         f32 %838 = OpFMul %836 %837 
                                         f32 %839 = OpFAdd %838 %133 
                                                      OpStore %714 %839 
                                         f32 %840 = OpLoad %714 
                                         f32 %841 = OpFDiv %133 %840 
                                                      OpStore %714 %841 
                                       f32_4 %842 = OpLoad %200 
                                       f32_3 %843 = OpVectorShuffle %842 %842 0 1 2 
                                       f32_4 %844 = OpLoad %200 
                                       f32_3 %845 = OpVectorShuffle %844 %844 0 1 2 
                                         f32 %846 = OpDot %843 %845 
                                Private f32* %847 = OpAccessChain %38 %78 
                                                      OpStore %847 %846 
                                Private f32* %849 = OpAccessChain %38 %78 
                                         f32 %850 = OpLoad %849 
                                        bool %851 = OpFOrdNotEqual %850 %132 
                                                      OpStore %848 %851 
                                        bool %852 = OpLoad %848 
                                         f32 %853 = OpSelect %852 %133 %132 
                                Private f32* %854 = OpAccessChain %38 %78 
                                                      OpStore %854 %853 
                                         f32 %855 = OpLoad %30 
                                Private f32* %856 = OpAccessChain %38 %78 
                                         f32 %857 = OpLoad %856 
                                         f32 %858 = OpFMul %855 %857 
                                                      OpStore %30 %858 
                                         f32 %859 = OpLoad %89 
                                         f32 %860 = OpFNegate %859 
                                Uniform f32* %861 = OpAccessChain %20 %162 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpFAdd %860 %862 
                                Private f32* %864 = OpAccessChain %38 %78 
                                                      OpStore %864 %863 
                                Private f32* %865 = OpAccessChain %38 %78 
                                         f32 %866 = OpLoad %865 
                                         f32 %867 = OpFAdd %866 %133 
                                Private f32* %868 = OpAccessChain %38 %78 
                                                      OpStore %868 %867 
                                Private f32* %869 = OpAccessChain %38 %78 
                                         f32 %870 = OpLoad %869 
                                         f32 %871 = OpExtInst %1 43 %870 %132 %133 
                                Private f32* %872 = OpAccessChain %38 %78 
                                                      OpStore %872 %871 
                                       f32_3 %873 = OpLoad %187 
                                       f32_3 %874 = OpLoad %696 
                                       f32_3 %875 = OpVectorShuffle %874 %874 0 0 0 
                                       f32_3 %876 = OpFMul %873 %875 
                                       f32_4 %877 = OpLoad %195 
                                       f32_3 %878 = OpVectorShuffle %877 %877 0 1 2 
                                       f32_3 %879 = OpFAdd %876 %878 
                                       f32_4 %880 = OpLoad %72 
                                       f32_4 %881 = OpVectorShuffle %880 %879 4 5 6 3 
                                                      OpStore %72 %881 
                                       f32_3 %882 = OpLoad %187 
                                         f32 %883 = OpLoad %30 
                                       f32_3 %884 = OpCompositeConstruct %883 %883 %883 
                                       f32_3 %885 = OpFMul %882 %884 
                                                      OpStore %187 %885 
                                Private f32* %886 = OpAccessChain %9 %78 
                                         f32 %887 = OpLoad %886 
                                         f32 %888 = OpFNegate %887 
                                         f32 %889 = OpFAdd %888 %133 
                                Private f32* %890 = OpAccessChain %9 %78 
                                                      OpStore %890 %889 
                                Private f32* %891 = OpAccessChain %9 %78 
                                         f32 %892 = OpLoad %891 
                                Private f32* %893 = OpAccessChain %9 %78 
                                         f32 %894 = OpLoad %893 
                                         f32 %895 = OpFMul %892 %894 
                                Private f32* %896 = OpAccessChain %696 %78 
                                                      OpStore %896 %895 
                                Private f32* %897 = OpAccessChain %696 %78 
                                         f32 %898 = OpLoad %897 
                                Private f32* %899 = OpAccessChain %696 %78 
                                         f32 %900 = OpLoad %899 
                                         f32 %901 = OpFMul %898 %900 
                                Private f32* %902 = OpAccessChain %696 %78 
                                                      OpStore %902 %901 
                                Private f32* %903 = OpAccessChain %9 %78 
                                         f32 %904 = OpLoad %903 
                                Private f32* %905 = OpAccessChain %696 %78 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFMul %904 %906 
                                Private f32* %908 = OpAccessChain %9 %78 
                                                      OpStore %908 %907 
                                       f32_4 %909 = OpLoad %200 
                                       f32_3 %910 = OpVectorShuffle %909 %909 0 1 2 
                                       f32_3 %911 = OpFNegate %910 
                                       f32_3 %913 = OpFAdd %911 %912 
                                       f32_4 %914 = OpLoad %195 
                                       f32_4 %915 = OpVectorShuffle %914 %913 4 5 6 3 
                                                      OpStore %195 %915 
                                       f32_4 %916 = OpLoad %195 
                                       f32_3 %917 = OpVectorShuffle %916 %916 0 1 2 
                                       f32_4 %918 = OpLoad %9 
                                       f32_3 %919 = OpVectorShuffle %918 %918 0 0 0 
                                       f32_3 %920 = OpFMul %917 %919 
                                       f32_4 %921 = OpLoad %200 
                                       f32_3 %922 = OpVectorShuffle %921 %921 0 1 2 
                                       f32_3 %923 = OpFAdd %920 %922 
                                       f32_4 %924 = OpLoad %9 
                                       f32_4 %925 = OpVectorShuffle %924 %923 4 5 2 6 
                                                      OpStore %9 %925 
                                       f32_4 %926 = OpLoad %9 
                                       f32_3 %927 = OpVectorShuffle %926 %926 0 1 3 
                                       f32_3 %928 = OpLoad %187 
                                       f32_3 %929 = OpFMul %927 %928 
                                       f32_4 %930 = OpLoad %9 
                                       f32_4 %931 = OpVectorShuffle %930 %929 4 5 2 6 
                                                      OpStore %9 %931 
                                       f32_3 %932 = OpLoad %64 
                                       f32_4 %933 = OpLoad %72 
                                       f32_3 %934 = OpVectorShuffle %933 %933 0 1 2 
                                       f32_3 %935 = OpFMul %932 %934 
                                       f32_4 %936 = OpLoad %9 
                                       f32_3 %937 = OpVectorShuffle %936 %936 0 1 3 
                                       f32_3 %938 = OpFAdd %935 %937 
                                       f32_4 %939 = OpLoad %9 
                                       f32_4 %940 = OpVectorShuffle %939 %938 4 5 2 6 
                                                      OpStore %9 %940 
                                       f32_3 %941 = OpLoad %255 
                                         f32 %942 = OpLoad %714 
                                       f32_3 %943 = OpCompositeConstruct %942 %942 %942 
                                       f32_3 %944 = OpFMul %941 %943 
                                                      OpStore %64 %944 
                                       f32_4 %945 = OpLoad %200 
                                       f32_3 %946 = OpVectorShuffle %945 %945 0 1 2 
                                       f32_3 %947 = OpFNegate %946 
                                       f32_4 %948 = OpLoad %38 
                                       f32_3 %949 = OpVectorShuffle %948 %948 0 0 0 
                                       f32_3 %950 = OpFAdd %947 %949 
                                       f32_4 %951 = OpLoad %38 
                                       f32_4 %952 = OpVectorShuffle %951 %950 4 5 2 6 
                                                      OpStore %38 %952 
                                         f32 %953 = OpLoad %719 
                                       f32_3 %954 = OpCompositeConstruct %953 %953 %953 
                                       f32_4 %955 = OpLoad %38 
                                       f32_3 %956 = OpVectorShuffle %955 %955 0 1 3 
                                       f32_3 %957 = OpFMul %954 %956 
                                       f32_4 %958 = OpLoad %200 
                                       f32_3 %959 = OpVectorShuffle %958 %958 0 1 2 
                                       f32_3 %960 = OpFAdd %957 %959 
                                       f32_4 %961 = OpLoad %38 
                                       f32_4 %962 = OpVectorShuffle %961 %960 4 5 6 3 
                                                      OpStore %38 %962 
                                       f32_3 %963 = OpLoad %64 
                                       f32_4 %964 = OpLoad %38 
                                       f32_3 %965 = OpVectorShuffle %964 %964 0 1 2 
                                       f32_3 %966 = OpFMul %963 %965 
                                       f32_4 %967 = OpLoad %9 
                                       f32_3 %968 = OpVectorShuffle %967 %967 0 1 3 
                                       f32_3 %969 = OpFAdd %966 %968 
                                       f32_4 %970 = OpLoad %9 
                                       f32_4 %971 = OpVectorShuffle %970 %969 4 5 6 3 
                                                      OpStore %9 %971 
                                       f32_3 %974 = OpLoad %47 
                              Uniform f32_4* %975 = OpAccessChain %20 %66 
                                       f32_4 %976 = OpLoad %975 
                                       f32_3 %977 = OpVectorShuffle %976 %976 0 1 2 
                                       f32_3 %978 = OpFMul %974 %977 
                                       f32_4 %979 = OpLoad %9 
                                       f32_3 %980 = OpVectorShuffle %979 %979 0 1 2 
                                       f32_3 %981 = OpFAdd %978 %980 
                                       f32_4 %982 = OpLoad %973 
                                       f32_4 %983 = OpVectorShuffle %982 %981 4 5 6 3 
                                                      OpStore %973 %983 
                                 Output f32* %985 = OpAccessChain %973 %116 
                                                      OpStore %985 %133 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    gl_Position = u_xlat2;
    vs_TEXCOORD4 = u_xlat2.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bvec3 u_xlatb8;
vec3 u_xlat9;
bvec3 u_xlatb10;
vec3 u_xlat11;
float u_xlat12;
float u_xlat22;
float u_xlat23;
float u_xlat33;
float u_xlat34;
float u_xlat35;
bool u_xlatb35;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat34 = (-_Glossiness) + 1.0;
    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb35){
        u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat35 = inversesqrt(u_xlat35);
        u_xlat5.xyz = vec3(u_xlat35) * u_xlat4.xyz;
        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat6;
            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
            u_xlat6 = hlslcc_movcTemp;
        }
        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
        u_xlat35 = min(u_xlat6.z, u_xlat35);
        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
    } else {
        u_xlat5.xyz = u_xlat4.xyz;
    }
    u_xlat35 = (-u_xlat34) * 0.699999988 + 1.70000005;
    u_xlat35 = u_xlat34 * u_xlat35;
    u_xlat35 = u_xlat35 * 6.0;
    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat35);
    u_xlat36 = u_xlat5.w + -1.0;
    u_xlat36 = unity_SpecCube0_HDR.w * u_xlat36 + 1.0;
    u_xlat36 = log2(u_xlat36);
    u_xlat36 = u_xlat36 * unity_SpecCube0_HDR.y;
    u_xlat36 = exp2(u_xlat36);
    u_xlat36 = u_xlat36 * unity_SpecCube0_HDR.x;
    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat36);
    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb37){
        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb37){
            u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat37 = inversesqrt(u_xlat37);
            u_xlat7.xyz = vec3(u_xlat37) * u_xlat4.xyz;
            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat8;
                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
                u_xlat8 = hlslcc_movcTemp;
            }
            u_xlat37 = min(u_xlat8.y, u_xlat8.x);
            u_xlat37 = min(u_xlat8.z, u_xlat37);
            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat7.xyz * vec3(u_xlat37) + u_xlat8.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat35);
        u_xlat35 = u_xlat4.w + -1.0;
        u_xlat35 = unity_SpecCube1_HDR.w * u_xlat35 + 1.0;
        u_xlat35 = log2(u_xlat35);
        u_xlat35 = u_xlat35 * unity_SpecCube1_HDR.y;
        u_xlat35 = exp2(u_xlat35);
        u_xlat35 = u_xlat35 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
        u_xlat5.xyz = vec3(u_xlat36) * u_xlat5.xyz + (-u_xlat4.xyz);
        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat4.xyz;
    }
    u_xlat35 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * vs_TEXCOORD1.xyz;
    u_xlat5.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat35 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat11.x = u_xlat0.x * u_xlat0.x;
    u_xlat11.x = dot(u_xlat11.xx, vec2(u_xlat34));
    u_xlat11.x = u_xlat11.x + -0.5;
    u_xlat22 = (-u_xlat1.x) + 1.0;
    u_xlat23 = u_xlat22 * u_xlat22;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat22 = u_xlat22 * u_xlat23;
    u_xlat22 = u_xlat11.x * u_xlat22 + 1.0;
    u_xlat23 = -abs(u_xlat33) + 1.0;
    u_xlat36 = u_xlat23 * u_xlat23;
    u_xlat36 = u_xlat36 * u_xlat36;
    u_xlat23 = u_xlat23 * u_xlat36;
    u_xlat11.x = u_xlat11.x * u_xlat23 + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat22;
    u_xlat22 = u_xlat34 * u_xlat34;
    u_xlat22 = max(u_xlat22, 0.00200000009);
    u_xlat34 = (-u_xlat22) + 1.0;
    u_xlat36 = abs(u_xlat33) * u_xlat34 + u_xlat22;
    u_xlat34 = u_xlat1.x * u_xlat34 + u_xlat22;
    u_xlat33 = abs(u_xlat33) * u_xlat34;
    u_xlat33 = u_xlat1.x * u_xlat36 + u_xlat33;
    u_xlat33 = u_xlat33 + 9.99999975e-06;
    u_xlat33 = 0.5 / u_xlat33;
    u_xlat34 = u_xlat22 * u_xlat22;
    u_xlat36 = u_xlat12 * u_xlat34 + (-u_xlat12);
    u_xlat12 = u_xlat36 * u_xlat12 + 1.0;
    u_xlat34 = u_xlat34 * 0.318309873;
    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;
    u_xlat12 = u_xlat34 / u_xlat12;
    u_xlat33 = u_xlat33 * u_xlat12;
    u_xlat11.z = u_xlat33 * 3.14159274;
    u_xlat11.xz = u_xlat1.xx * u_xlat11.xz;
    u_xlat33 = max(u_xlat11.z, 0.0);
    u_xlat22 = u_xlat22 * u_xlat22 + 1.0;
    u_xlat22 = float(1.0) / u_xlat22;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat1.x;
    u_xlat1.x = (-u_xlat35) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
    u_xlat7.xyz = vec3(u_xlat33) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat11.x = u_xlat0.x * u_xlat0.x;
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat0.x = u_xlat0.x * u_xlat11.x;
    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat7.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat22);
    u_xlat1.xyw = (-u_xlat5.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat23) * u_xlat1.xyw + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    u_xlat33 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %232 %237 %242 %243 %378 %384 %385 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %230 0 BuiltIn 230 
                                                      OpMemberDecorate %230 1 BuiltIn 230 
                                                      OpMemberDecorate %230 2 BuiltIn 230 
                                                      OpDecorate %230 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 237 
                                                      OpDecorate vs_TEXCOORD0 Location 242 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate vs_TEXCOORD1 Location 378 
                                                      OpDecorate vs_TEXCOORD5 Location 384 
                                                      OpDecorate vs_TEXCOORD6 Location 385 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 7 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 8 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 6 
                                         i32 %119 = OpConstant 5 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 1 
                                             %168 = OpTypePointer Uniform %7 
                                         i32 %179 = OpConstant 2 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %229 = OpTypeArray %6 %20 
                                             %230 = OpTypeStruct %7 %6 %229 
                                             %231 = OpTypePointer Output %230 
        Output struct {f32_4; f32; f32[1];}* %232 = OpVariable Output 
                                             %234 = OpTypePointer Output %7 
                                             %236 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %238 = OpConstant 2 
                                             %241 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %243 = OpVariable Input 
                                         i32 %246 = OpConstant 9 
                                         f32 %269 = OpConstant 3.674022E-40 
                                       f32_2 %270 = OpConstantComposite %269 %269 
                                         f32 %272 = OpConstant 3.674022E-40 
                                       f32_2 %273 = OpConstantComposite %272 %272 
                                Private f32* %277 = OpVariable Private 
                                         f32 %286 = OpConstant 3.674022E-40 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_2 %288 = OpConstantComposite %286 %287 
                                       f32_2 %290 = OpConstantComposite %56 %56 
                                       f32_3 %311 = OpConstantComposite %56 %56 %56 
                                             %323 = OpTypeBool 
                                             %324 = OpTypePointer Private %323 
                               Private bool* %325 = OpVariable Private 
                                       f32_4 %326 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %327 = OpConstant 4 
                                             %331 = OpTypeVector %323 4 
                                             %335 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %336 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %169 = OpAccessChain %18 %167 %167 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpFMul %166 %170 
                                                      OpStore %164 %171 
                              Uniform f32_4* %172 = OpAccessChain %18 %167 %19 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpLoad %114 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %164 
                                       f32_4 %178 = OpFAdd %176 %177 
                                                      OpStore %164 %178 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %205 = OpAccessChain %18 %188 %167 
                                       f32_4 %206 = OpLoad %205 
                                       f32_4 %207 = OpFMul %204 %206 
                                                      OpStore %114 %207 
                              Uniform f32_4* %208 = OpAccessChain %18 %188 %19 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %164 
                                       f32_4 %211 = OpVectorShuffle %210 %210 0 0 0 0 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %114 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %114 %214 
                              Uniform f32_4* %215 = OpAccessChain %18 %188 %179 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %164 
                                       f32_4 %218 = OpVectorShuffle %217 %217 2 2 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %114 
                                       f32_4 %221 = OpFAdd %219 %220 
                                                      OpStore %114 %221 
                              Uniform f32_4* %222 = OpAccessChain %18 %188 %188 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %164 
                                       f32_4 %225 = OpVectorShuffle %224 %224 3 3 3 3 
                                       f32_4 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %114 
                                       f32_4 %228 = OpFAdd %226 %227 
                                                      OpStore %114 %228 
                                       f32_4 %233 = OpLoad %114 
                               Output f32_4* %235 = OpAccessChain %232 %19 
                                                      OpStore %235 %233 
                                Private f32* %239 = OpAccessChain %114 %238 
                                         f32 %240 = OpLoad %239 
                                                      OpStore vs_TEXCOORD4 %240 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                              Uniform f32_4* %247 = OpAccessChain %18 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                                       f32_2 %250 = OpFMul %245 %249 
                              Uniform f32_4* %251 = OpAccessChain %18 %246 
                                       f32_4 %252 = OpLoad %251 
                                       f32_2 %253 = OpVectorShuffle %252 %252 2 3 
                                       f32_2 %254 = OpFAdd %250 %253 
                                                      OpStore vs_TEXCOORD0 %254 
                                Private f32* %255 = OpAccessChain %76 %20 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpExtInst %1 8 %256 
                                Private f32* %258 = OpAccessChain %114 %29 
                                                      OpStore %258 %257 
                                Private f32* %259 = OpAccessChain %114 %29 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFNegate %260 
                                         f32 %262 = OpFMul %261 %146 
                                Private f32* %263 = OpAccessChain %76 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %114 %20 
                                                      OpStore %266 %265 
                                       f32_4 %267 = OpLoad %114 
                                       f32_2 %268 = OpVectorShuffle %267 %267 0 1 
                                       f32_2 %271 = OpFMul %268 %270 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %76 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %76 %276 
                                       f32_4 %278 = OpLoad %76 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_4 %280 = OpLoad %76 
                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
                                         f32 %282 = OpDot %279 %281 
                                                      OpStore %277 %282 
                                         f32 %283 = OpLoad %277 
                                       f32_2 %284 = OpCompositeConstruct %283 %283 
                                       f32_2 %285 = OpFNegate %284 
                                       f32_2 %289 = OpFMul %285 %288 
                                       f32_2 %291 = OpFAdd %289 %290 
                                       f32_4 %292 = OpLoad %114 
                                       f32_4 %293 = OpVectorShuffle %292 %291 0 1 4 5 
                                                      OpStore %114 %293 
                                Private f32* %294 = OpAccessChain %114 %238 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 31 %295 
                                                      OpStore %277 %296 
                                       f32_4 %297 = OpLoad %76 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 1 
                                         f32 %299 = OpLoad %277 
                                       f32_2 %300 = OpCompositeConstruct %299 %299 
                                       f32_2 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %114 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 2 3 
                                                      OpStore %114 %303 
                                       f32_4 %304 = OpLoad %114 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 3 
                                       f32_3 %306 = OpExtInst %1 40 %305 %110 
                                       f32_4 %307 = OpLoad %76 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %76 %308 
                                       f32_4 %309 = OpLoad %76 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %312 = OpExtInst %1 37 %310 %311 
                                       f32_4 %313 = OpLoad %76 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %76 %314 
                                Private f32* %315 = OpAccessChain %76 %29 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFNegate %316 
                                Private f32* %318 = OpAccessChain %76 %154 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %9 %29 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                Private f32* %322 = OpAccessChain %9 %154 
                                                      OpStore %322 %321 
                                Uniform f32* %328 = OpAccessChain %18 %327 
                                         f32 %329 = OpLoad %328 
                                       f32_4 %330 = OpCompositeConstruct %329 %329 %329 %329 
                                      bool_4 %332 = OpFOrdNotEqual %326 %330 
                                        bool %333 = OpAny %332 
                                                      OpStore %325 %333 
                                        bool %334 = OpLoad %325 
                                                      OpSelectionMerge %338 None 
                                                      OpBranchConditional %334 %337 %341 
                                             %337 = OpLabel 
                                       f32_4 %339 = OpLoad %76 
                                       f32_3 %340 = OpVectorShuffle %339 %339 3 2 1 
                                                      OpStore %336 %340 
                                                      OpBranch %338 
                                             %341 = OpLabel 
                                       f32_4 %342 = OpLoad %9 
                                       f32_3 %343 = OpVectorShuffle %342 %342 3 1 2 
                                                      OpStore %336 %343 
                                                      OpBranch %338 
                                             %338 = OpLabel 
                                       f32_3 %344 = OpLoad %336 
                                       f32_4 %345 = OpLoad %9 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %9 %346 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                              Uniform f32_4* %349 = OpAccessChain %18 %179 %19 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                         f32 %352 = OpDot %348 %351 
                                Private f32* %353 = OpAccessChain %76 %29 
                                                      OpStore %353 %352 
                                       f32_4 %354 = OpLoad %9 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                              Uniform f32_4* %356 = OpAccessChain %18 %179 %167 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                         f32 %359 = OpDot %355 %358 
                                Private f32* %360 = OpAccessChain %76 %20 
                                                      OpStore %360 %359 
                                       f32_4 %361 = OpLoad %9 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                              Uniform f32_4* %363 = OpAccessChain %18 %179 %179 
                                       f32_4 %364 = OpLoad %363 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                         f32 %366 = OpDot %362 %365 
                                Private f32* %367 = OpAccessChain %76 %238 
                                                      OpStore %367 %366 
                                       f32_4 %368 = OpLoad %76 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_4 %370 = OpLoad %76 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                         f32 %372 = OpDot %369 %371 
                                Private f32* %373 = OpAccessChain %9 %29 
                                                      OpStore %373 %372 
                                Private f32* %374 = OpAccessChain %9 %29 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpExtInst %1 32 %375 
                                Private f32* %377 = OpAccessChain %9 %29 
                                                      OpStore %377 %376 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_4 %381 = OpLoad %76 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFMul %380 %382 
                                                      OpStore vs_TEXCOORD1 %383 
                                                      OpStore vs_TEXCOORD5 %326 
                                                      OpStore vs_TEXCOORD6 %326 
                                 Output f32* %386 = OpAccessChain %232 %19 %20 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFNegate %387 
                                 Output f32* %389 = OpAccessChain %232 %19 %20 
                                                      OpStore %389 %388 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 910
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %57 %81 %859 %895 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate vs_TEXCOORD0 Location 57 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %247 DescriptorSet 247 
                                                      OpDecorate %247 Binding 247 
                                                      OpDecorate %249 DescriptorSet 249 
                                                      OpDecorate %249 Binding 249 
                                                      OpDecorate %402 DescriptorSet 402 
                                                      OpDecorate %402 Binding 402 
                                                      OpDecorate vs_TEXCOORD4 Location 859 
                                                      OpDecorate %895 Location 895 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                                              %43 = OpTypePointer Private %10 
                               Private f32_3* %44 = OpVariable Private 
                                              %45 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %46 = OpTypePointer UniformConstant %45 
         UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
                                              %49 = OpTypeSampler 
                                              %50 = OpTypePointer UniformConstant %49 
                     UniformConstant sampler* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampledImage %45 
                                              %55 = OpTypeVector %6 2 
                                              %56 = OpTypePointer Input %55 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %61 = OpVariable Private 
                                          i32 %63 = OpConstant 16 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
                                          i32 %70 = OpConstant 14 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %77 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_4* %87 = OpVariable Private 
                                              %99 = OpTypeBool 
                                             %100 = OpTypePointer Private %99 
                               Private bool* %101 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 7 
                                             %104 = OpTypeInt 32 0 
                                         u32 %105 = OpConstant 3 
                              Private f32_4* %119 = OpVariable Private 
                              Private f32_3* %127 = OpVariable Private 
                                         i32 %130 = OpConstant 5 
                              Private f32_3* %139 = OpVariable Private 
                                         i32 %142 = OpConstant 6 
                                             %151 = OpTypeVector %99 3 
                                             %152 = OpTypePointer Private %151 
                             Private bool_3* %153 = OpVariable Private 
                                       f32_4 %154 = OpConstantComposite %102 %102 %102 %102 
                                             %157 = OpTypeVector %99 4 
                                             %160 = OpTypePointer Function %10 
                                         u32 %163 = OpConstant 0 
                                             %166 = OpTypePointer Function %6 
                                         u32 %177 = OpConstant 1 
                                         u32 %190 = OpConstant 2 
                                         f32 %235 = OpConstant 3.674022E-40 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                             %245 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %246 = OpTypePointer UniformConstant %245 
      UniformConstant read_only TextureCube* %247 = OpVariable UniformConstant 
                    UniformConstant sampler* %249 = OpVariable UniformConstant 
                                             %251 = OpTypeSampledImage %245 
                                Private f32* %257 = OpVariable Private 
                                         f32 %260 = OpConstant 3.674022E-40 
                                         i32 %262 = OpConstant 8 
                               Private bool* %285 = OpVariable Private 
                                         f32 %288 = OpConstant 3.674022E-40 
                                         i32 %293 = OpConstant 11 
                                Private f32* %300 = OpVariable Private 
                              Private f32_3* %313 = OpVariable Private 
                                         i32 %316 = OpConstant 9 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %327 = OpConstant 10 
                             Private bool_3* %335 = OpVariable Private 
      UniformConstant read_only TextureCube* %402 = OpVariable UniformConstant 
                                         i32 %413 = OpConstant 12 
                                         f32 %474 = OpConstant 3.674022E-40 
                                       f32_3 %475 = OpConstantComposite %474 %474 %474 
                                         i32 %479 = OpConstant 15 
                                         f32 %494 = OpConstant 3.674022E-40 
                                       f32_3 %495 = OpConstantComposite %494 %494 %494 
                                         f32 %502 = OpConstant 3.674022E-40 
                                         i32 %514 = OpConstant 2 
                                         f32 %527 = OpConstant 3.674022E-40 
                                Private f32* %554 = OpVariable Private 
                              Private f32_3* %573 = OpVariable Private 
                                         f32 %588 = OpConstant 3.674022E-40 
                                Private f32* %591 = OpVariable Private 
                                Private f32* %596 = OpVariable Private 
                                         f32 %639 = OpConstant 3.674022E-40 
                                         f32 %667 = OpConstant 3.674022E-40 
                                         f32 %669 = OpConstant 3.674022E-40 
                                         f32 %686 = OpConstant 3.674022E-40 
                                         f32 %691 = OpConstant 3.674022E-40 
                                         f32 %709 = OpConstant 3.674022E-40 
                               Private bool* %725 = OpVariable Private 
                                         i32 %752 = OpConstant 13 
                                       f32_3 %791 = OpConstantComposite %75 %75 %75 
                                             %858 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %861 = OpConstant 1 
                                         i32 %875 = OpConstant 4 
                                         i32 %886 = OpConstant 3 
                                             %894 = OpTypePointer Output %7 
                               Output f32_4* %895 = OpVariable Output 
                                             %907 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %161 = OpVariable Function 
                               Function f32* %167 = OpVariable Function 
                               Function f32* %180 = OpVariable Function 
                               Function f32* %193 = OpVariable Function 
                             Function f32_3* %340 = OpVariable Function 
                               Function f32* %344 = OpVariable Function 
                               Function f32* %356 = OpVariable Function 
                               Function f32* %368 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %48 = OpLoad %47 
                                      sampler %52 = OpLoad %51 
                   read_only Texture2DSampled %54 = OpSampledImage %48 %52 
                                        f32_2 %58 = OpLoad vs_TEXCOORD0 
                                        f32_4 %59 = OpImageSampleImplicitLod %54 %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                                      OpStore %44 %60 
                                        f32_3 %62 = OpLoad %44 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %61 %68 
                                 Uniform f32* %72 = OpAccessChain %17 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFAdd %74 %75 
                                                      OpStore %69 %76 
                                        f32_4 %78 = OpLoad %35 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad vs_TEXCOORD1 
                                          f32 %83 = OpDot %80 %82 
                                                      OpStore %77 %83 
                                          f32 %84 = OpLoad %77 
                                          f32 %85 = OpLoad %77 
                                          f32 %86 = OpFAdd %84 %85 
                                                      OpStore %77 %86 
                                        f32_3 %88 = OpLoad vs_TEXCOORD1 
                                          f32 %89 = OpLoad %77 
                                        f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                        f32_3 %91 = OpFNegate %90 
                                        f32_3 %92 = OpFMul %88 %91 
                                        f32_4 %93 = OpLoad %35 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFNegate %94 
                                        f32_3 %96 = OpFAdd %92 %95 
                                        f32_4 %97 = OpLoad %87 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %87 %98 
                                Uniform f32* %106 = OpAccessChain %17 %103 %105 
                                         f32 %107 = OpLoad %106 
                                        bool %108 = OpFOrdLessThan %102 %107 
                                                      OpStore %101 %108 
                                        bool %109 = OpLoad %101 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %228 
                                             %110 = OpLabel 
                                       f32_4 %112 = OpLoad %87 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_4 %114 = OpLoad %87 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                         f32 %116 = OpDot %113 %115 
                                                      OpStore %77 %116 
                                         f32 %117 = OpLoad %77 
                                         f32 %118 = OpExtInst %1 32 %117 
                                                      OpStore %77 %118 
                                         f32 %120 = OpLoad %77 
                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
                                       f32_4 %122 = OpLoad %87 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %119 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %119 %126 
                                       f32_3 %128 = OpLoad vs_TEXCOORD2 
                                       f32_3 %129 = OpFNegate %128 
                              Uniform f32_4* %131 = OpAccessChain %17 %130 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFAdd %129 %133 
                                                      OpStore %127 %134 
                                       f32_3 %135 = OpLoad %127 
                                       f32_4 %136 = OpLoad %119 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFDiv %135 %137 
                                                      OpStore %127 %138 
                                       f32_3 %140 = OpLoad vs_TEXCOORD2 
                                       f32_3 %141 = OpFNegate %140 
                              Uniform f32_4* %143 = OpAccessChain %17 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFAdd %141 %145 
                                                      OpStore %139 %146 
                                       f32_3 %147 = OpLoad %139 
                                       f32_4 %148 = OpLoad %119 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFDiv %147 %149 
                                                      OpStore %139 %150 
                                       f32_4 %155 = OpLoad %119 
                                       f32_4 %156 = OpVectorShuffle %155 %155 0 1 2 0 
                                      bool_4 %158 = OpFOrdLessThan %154 %156 
                                      bool_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                                      OpStore %153 %159 
                                       f32_3 %162 = OpLoad %127 
                                                      OpStore %161 %162 
                               Private bool* %164 = OpAccessChain %153 %163 
                                        bool %165 = OpLoad %164 
                                                      OpSelectionMerge %169 None 
                                                      OpBranchConditional %165 %168 %172 
                                             %168 = OpLabel 
                                Private f32* %170 = OpAccessChain %127 %163 
                                         f32 %171 = OpLoad %170 
                                                      OpStore %167 %171 
                                                      OpBranch %169 
                                             %172 = OpLabel 
                                Private f32* %173 = OpAccessChain %139 %163 
                                         f32 %174 = OpLoad %173 
                                                      OpStore %167 %174 
                                                      OpBranch %169 
                                             %169 = OpLabel 
                                         f32 %175 = OpLoad %167 
                               Function f32* %176 = OpAccessChain %161 %163 
                                                      OpStore %176 %175 
                               Private bool* %178 = OpAccessChain %153 %177 
                                        bool %179 = OpLoad %178 
                                                      OpSelectionMerge %182 None 
                                                      OpBranchConditional %179 %181 %185 
                                             %181 = OpLabel 
                                Private f32* %183 = OpAccessChain %127 %177 
                                         f32 %184 = OpLoad %183 
                                                      OpStore %180 %184 
                                                      OpBranch %182 
                                             %185 = OpLabel 
                                Private f32* %186 = OpAccessChain %139 %177 
                                         f32 %187 = OpLoad %186 
                                                      OpStore %180 %187 
                                                      OpBranch %182 
                                             %182 = OpLabel 
                                         f32 %188 = OpLoad %180 
                               Function f32* %189 = OpAccessChain %161 %177 
                                                      OpStore %189 %188 
                               Private bool* %191 = OpAccessChain %153 %190 
                                        bool %192 = OpLoad %191 
                                                      OpSelectionMerge %195 None 
                                                      OpBranchConditional %192 %194 %198 
                                             %194 = OpLabel 
                                Private f32* %196 = OpAccessChain %127 %190 
                                         f32 %197 = OpLoad %196 
                                                      OpStore %193 %197 
                                                      OpBranch %195 
                                             %198 = OpLabel 
                                Private f32* %199 = OpAccessChain %139 %190 
                                         f32 %200 = OpLoad %199 
                                                      OpStore %193 %200 
                                                      OpBranch %195 
                                             %195 = OpLabel 
                                         f32 %201 = OpLoad %193 
                               Function f32* %202 = OpAccessChain %161 %190 
                                                      OpStore %202 %201 
                                       f32_3 %203 = OpLoad %161 
                                                      OpStore %127 %203 
                                Private f32* %204 = OpAccessChain %127 %177 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %127 %163 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpExtInst %1 37 %205 %207 
                                                      OpStore %77 %208 
                                Private f32* %209 = OpAccessChain %127 %190 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpLoad %77 
                                         f32 %212 = OpExtInst %1 37 %210 %211 
                                                      OpStore %77 %212 
                                       f32_3 %213 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %214 = OpAccessChain %17 %103 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_3 %218 = OpFAdd %213 %217 
                                                      OpStore %127 %218 
                                       f32_4 %219 = OpLoad %119 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpLoad %77 
                                       f32_3 %222 = OpCompositeConstruct %221 %221 %221 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_3 %224 = OpLoad %127 
                                       f32_3 %225 = OpFAdd %223 %224 
                                       f32_4 %226 = OpLoad %119 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                                      OpStore %119 %227 
                                                      OpBranch %111 
                                             %228 = OpLabel 
                                       f32_4 %229 = OpLoad %87 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_4 %231 = OpLoad %119 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %119 %232 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                         f32 %233 = OpLoad %69 
                                         f32 %234 = OpFNegate %233 
                                         f32 %236 = OpFMul %234 %235 
                                         f32 %238 = OpFAdd %236 %237 
                                                      OpStore %77 %238 
                                         f32 %239 = OpLoad %69 
                                         f32 %240 = OpLoad %77 
                                         f32 %241 = OpFMul %239 %240 
                                                      OpStore %77 %241 
                                         f32 %242 = OpLoad %77 
                                         f32 %244 = OpFMul %242 %243 
                                                      OpStore %77 %244 
                       read_only TextureCube %248 = OpLoad %247 
                                     sampler %250 = OpLoad %249 
                read_only TextureCubeSampled %252 = OpSampledImage %248 %250 
                                       f32_4 %253 = OpLoad %119 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                         f32 %255 = OpLoad %77 
                                       f32_4 %256 = OpImageSampleExplicitLod %252 %254 Lod %7 
                                                      OpStore %119 %256 
                                Private f32* %258 = OpAccessChain %119 %105 
                                         f32 %259 = OpLoad %258 
                                         f32 %261 = OpFAdd %259 %260 
                                                      OpStore %257 %261 
                                Uniform f32* %263 = OpAccessChain %17 %262 %105 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpLoad %257 
                                         f32 %266 = OpFMul %264 %265 
                                         f32 %267 = OpFAdd %266 %75 
                                                      OpStore %257 %267 
                                         f32 %268 = OpLoad %257 
                                         f32 %269 = OpExtInst %1 30 %268 
                                                      OpStore %257 %269 
                                         f32 %270 = OpLoad %257 
                                Uniform f32* %271 = OpAccessChain %17 %262 %177 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFMul %270 %272 
                                                      OpStore %257 %273 
                                         f32 %274 = OpLoad %257 
                                         f32 %275 = OpExtInst %1 29 %274 
                                                      OpStore %257 %275 
                                         f32 %276 = OpLoad %257 
                                Uniform f32* %277 = OpAccessChain %17 %262 %163 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFMul %276 %278 
                                                      OpStore %257 %279 
                                       f32_4 %280 = OpLoad %119 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                         f32 %282 = OpLoad %257 
                                       f32_3 %283 = OpCompositeConstruct %282 %282 %282 
                                       f32_3 %284 = OpFMul %281 %283 
                                                      OpStore %127 %284 
                                Uniform f32* %286 = OpAccessChain %17 %142 %105 
                                         f32 %287 = OpLoad %286 
                                        bool %289 = OpFOrdLessThan %287 %288 
                                                      OpStore %285 %289 
                                        bool %290 = OpLoad %285 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                Uniform f32* %294 = OpAccessChain %17 %293 %105 
                                         f32 %295 = OpLoad %294 
                                        bool %296 = OpFOrdLessThan %102 %295 
                                                      OpStore %285 %296 
                                        bool %297 = OpLoad %285 
                                                      OpSelectionMerge %299 None 
                                                      OpBranchConditional %297 %298 %299 
                                             %298 = OpLabel 
                                       f32_4 %301 = OpLoad %87 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %87 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                         f32 %305 = OpDot %302 %304 
                                                      OpStore %300 %305 
                                         f32 %306 = OpLoad %300 
                                         f32 %307 = OpExtInst %1 32 %306 
                                                      OpStore %300 %307 
                                         f32 %308 = OpLoad %300 
                                       f32_3 %309 = OpCompositeConstruct %308 %308 %308 
                                       f32_4 %310 = OpLoad %87 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFMul %309 %311 
                                                      OpStore %139 %312 
                                       f32_3 %314 = OpLoad vs_TEXCOORD2 
                                       f32_3 %315 = OpFNegate %314 
                              Uniform f32_4* %317 = OpAccessChain %17 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %315 %319 
                                                      OpStore %313 %320 
                                       f32_3 %321 = OpLoad %313 
                                       f32_3 %322 = OpLoad %139 
                                       f32_3 %323 = OpFDiv %321 %322 
                                                      OpStore %313 %323 
                                       f32_3 %325 = OpLoad vs_TEXCOORD2 
                                       f32_3 %326 = OpFNegate %325 
                              Uniform f32_4* %328 = OpAccessChain %17 %327 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFAdd %326 %330 
                                                      OpStore %324 %331 
                                       f32_3 %332 = OpLoad %324 
                                       f32_3 %333 = OpLoad %139 
                                       f32_3 %334 = OpFDiv %332 %333 
                                                      OpStore %324 %334 
                                       f32_3 %336 = OpLoad %139 
                                       f32_4 %337 = OpVectorShuffle %336 %336 0 1 2 0 
                                      bool_4 %338 = OpFOrdLessThan %154 %337 
                                      bool_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                                      OpStore %335 %339 
                                       f32_3 %341 = OpLoad %313 
                                                      OpStore %340 %341 
                               Private bool* %342 = OpAccessChain %335 %163 
                                        bool %343 = OpLoad %342 
                                                      OpSelectionMerge %346 None 
                                                      OpBranchConditional %343 %345 %349 
                                             %345 = OpLabel 
                                Private f32* %347 = OpAccessChain %313 %163 
                                         f32 %348 = OpLoad %347 
                                                      OpStore %344 %348 
                                                      OpBranch %346 
                                             %349 = OpLabel 
                                Private f32* %350 = OpAccessChain %324 %163 
                                         f32 %351 = OpLoad %350 
                                                      OpStore %344 %351 
                                                      OpBranch %346 
                                             %346 = OpLabel 
                                         f32 %352 = OpLoad %344 
                               Function f32* %353 = OpAccessChain %340 %163 
                                                      OpStore %353 %352 
                               Private bool* %354 = OpAccessChain %335 %177 
                                        bool %355 = OpLoad %354 
                                                      OpSelectionMerge %358 None 
                                                      OpBranchConditional %355 %357 %361 
                                             %357 = OpLabel 
                                Private f32* %359 = OpAccessChain %313 %177 
                                         f32 %360 = OpLoad %359 
                                                      OpStore %356 %360 
                                                      OpBranch %358 
                                             %361 = OpLabel 
                                Private f32* %362 = OpAccessChain %324 %177 
                                         f32 %363 = OpLoad %362 
                                                      OpStore %356 %363 
                                                      OpBranch %358 
                                             %358 = OpLabel 
                                         f32 %364 = OpLoad %356 
                               Function f32* %365 = OpAccessChain %340 %177 
                                                      OpStore %365 %364 
                               Private bool* %366 = OpAccessChain %335 %190 
                                        bool %367 = OpLoad %366 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %367 %369 %373 
                                             %369 = OpLabel 
                                Private f32* %371 = OpAccessChain %313 %190 
                                         f32 %372 = OpLoad %371 
                                                      OpStore %368 %372 
                                                      OpBranch %370 
                                             %373 = OpLabel 
                                Private f32* %374 = OpAccessChain %324 %190 
                                         f32 %375 = OpLoad %374 
                                                      OpStore %368 %375 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %376 = OpLoad %368 
                               Function f32* %377 = OpAccessChain %340 %190 
                                                      OpStore %377 %376 
                                       f32_3 %378 = OpLoad %340 
                                                      OpStore %313 %378 
                                Private f32* %379 = OpAccessChain %313 %177 
                                         f32 %380 = OpLoad %379 
                                Private f32* %381 = OpAccessChain %313 %163 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpExtInst %1 37 %380 %382 
                                                      OpStore %300 %383 
                                Private f32* %384 = OpAccessChain %313 %190 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpLoad %300 
                                         f32 %387 = OpExtInst %1 37 %385 %386 
                                                      OpStore %300 %387 
                                       f32_3 %388 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %389 = OpAccessChain %17 %293 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFNegate %391 
                                       f32_3 %393 = OpFAdd %388 %392 
                                                      OpStore %313 %393 
                                       f32_3 %394 = OpLoad %139 
                                         f32 %395 = OpLoad %300 
                                       f32_3 %396 = OpCompositeConstruct %395 %395 %395 
                                       f32_3 %397 = OpFMul %394 %396 
                                       f32_3 %398 = OpLoad %313 
                                       f32_3 %399 = OpFAdd %397 %398 
                                       f32_4 %400 = OpLoad %87 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %87 %401 
                                                      OpBranch %299 
                                             %299 = OpLabel 
                       read_only TextureCube %403 = OpLoad %402 
                                     sampler %404 = OpLoad %249 
                read_only TextureCubeSampled %405 = OpSampledImage %403 %404 
                                       f32_4 %406 = OpLoad %87 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                         f32 %408 = OpLoad %77 
                                       f32_4 %409 = OpImageSampleExplicitLod %405 %407 Lod %7 
                                                      OpStore %87 %409 
                                Private f32* %410 = OpAccessChain %87 %105 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFAdd %411 %260 
                                                      OpStore %77 %412 
                                Uniform f32* %414 = OpAccessChain %17 %413 %105 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpLoad %77 
                                         f32 %417 = OpFMul %415 %416 
                                         f32 %418 = OpFAdd %417 %75 
                                                      OpStore %77 %418 
                                         f32 %419 = OpLoad %77 
                                         f32 %420 = OpExtInst %1 30 %419 
                                                      OpStore %77 %420 
                                         f32 %421 = OpLoad %77 
                                Uniform f32* %422 = OpAccessChain %17 %413 %177 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFMul %421 %423 
                                                      OpStore %77 %424 
                                         f32 %425 = OpLoad %77 
                                         f32 %426 = OpExtInst %1 29 %425 
                                                      OpStore %77 %426 
                                         f32 %427 = OpLoad %77 
                                Uniform f32* %428 = OpAccessChain %17 %413 %163 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                                      OpStore %77 %430 
                                       f32_4 %431 = OpLoad %87 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                         f32 %433 = OpLoad %77 
                                       f32_3 %434 = OpCompositeConstruct %433 %433 %433 
                                       f32_3 %435 = OpFMul %432 %434 
                                       f32_4 %436 = OpLoad %87 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %87 %437 
                                         f32 %438 = OpLoad %257 
                                       f32_3 %439 = OpCompositeConstruct %438 %438 %438 
                                       f32_4 %440 = OpLoad %119 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %439 %441 
                                       f32_4 %443 = OpLoad %87 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_3 %445 = OpFNegate %444 
                                       f32_3 %446 = OpFAdd %442 %445 
                                       f32_4 %447 = OpLoad %119 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %119 %448 
                              Uniform f32_4* %449 = OpAccessChain %17 %142 
                                       f32_4 %450 = OpLoad %449 
                                       f32_3 %451 = OpVectorShuffle %450 %450 3 3 3 
                                       f32_4 %452 = OpLoad %119 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                       f32_3 %454 = OpFMul %451 %453 
                                       f32_4 %455 = OpLoad %87 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpFAdd %454 %456 
                                                      OpStore %127 %457 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                       f32_3 %458 = OpLoad vs_TEXCOORD1 
                                       f32_3 %459 = OpLoad vs_TEXCOORD1 
                                         f32 %460 = OpDot %458 %459 
                                                      OpStore %77 %460 
                                         f32 %461 = OpLoad %77 
                                         f32 %462 = OpExtInst %1 32 %461 
                                                      OpStore %77 %462 
                                         f32 %463 = OpLoad %77 
                                       f32_3 %464 = OpCompositeConstruct %463 %463 %463 
                                       f32_3 %465 = OpLoad vs_TEXCOORD1 
                                       f32_3 %466 = OpFMul %464 %465 
                                       f32_4 %467 = OpLoad %87 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %87 %468 
                                       f32_3 %469 = OpLoad %44 
                              Uniform f32_4* %470 = OpAccessChain %17 %63 
                                       f32_4 %471 = OpLoad %470 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFMul %469 %472 
                                       f32_3 %476 = OpFAdd %473 %475 
                                       f32_4 %477 = OpLoad %119 
                                       f32_4 %478 = OpVectorShuffle %477 %476 4 5 6 3 
                                                      OpStore %119 %478 
                                Uniform f32* %480 = OpAccessChain %17 %479 
                                         f32 %481 = OpLoad %480 
                                Uniform f32* %482 = OpAccessChain %17 %479 
                                         f32 %483 = OpLoad %482 
                                Uniform f32* %484 = OpAccessChain %17 %479 
                                         f32 %485 = OpLoad %484 
                                       f32_3 %486 = OpCompositeConstruct %481 %483 %485 
                                         f32 %487 = OpCompositeExtract %486 0 
                                         f32 %488 = OpCompositeExtract %486 1 
                                         f32 %489 = OpCompositeExtract %486 2 
                                       f32_3 %490 = OpCompositeConstruct %487 %488 %489 
                                       f32_4 %491 = OpLoad %119 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFMul %490 %492 
                                       f32_3 %496 = OpFAdd %493 %495 
                                       f32_4 %497 = OpLoad %119 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
                                                      OpStore %119 %498 
                                Uniform f32* %499 = OpAccessChain %17 %479 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFNegate %500 
                                         f32 %503 = OpFMul %501 %502 
                                         f32 %504 = OpFAdd %503 %502 
                                                      OpStore %77 %504 
                                         f32 %505 = OpLoad %77 
                                       f32_3 %506 = OpCompositeConstruct %505 %505 %505 
                                       f32_3 %507 = OpLoad %61 
                                       f32_3 %508 = OpFMul %506 %507 
                                                      OpStore %61 %508 
                                       f32_4 %509 = OpLoad %9 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                         f32 %511 = OpLoad %27 
                                       f32_3 %512 = OpCompositeConstruct %511 %511 %511 
                                       f32_3 %513 = OpFMul %510 %512 
                              Uniform f32_4* %515 = OpAccessChain %17 %514 
                                       f32_4 %516 = OpLoad %515 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpFAdd %513 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %9 %520 
                                       f32_4 %521 = OpLoad %9 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_4 %523 = OpLoad %9 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                         f32 %525 = OpDot %522 %524 
                                                      OpStore %27 %525 
                                         f32 %526 = OpLoad %27 
                                         f32 %528 = OpExtInst %1 40 %526 %527 
                                                      OpStore %27 %528 
                                         f32 %529 = OpLoad %27 
                                         f32 %530 = OpExtInst %1 32 %529 
                                                      OpStore %27 %530 
                                         f32 %531 = OpLoad %27 
                                       f32_3 %532 = OpCompositeConstruct %531 %531 %531 
                                       f32_4 %533 = OpLoad %9 
                                       f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                       f32_3 %535 = OpFMul %532 %534 
                                       f32_4 %536 = OpLoad %9 
                                       f32_4 %537 = OpVectorShuffle %536 %535 4 5 6 3 
                                                      OpStore %9 %537 
                                       f32_4 %538 = OpLoad %87 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_4 %540 = OpLoad %35 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                         f32 %542 = OpDot %539 %541 
                                                      OpStore %27 %542 
                                       f32_4 %543 = OpLoad %87 
                                       f32_3 %544 = OpVectorShuffle %543 %543 0 1 2 
                              Uniform f32_4* %545 = OpAccessChain %17 %514 
                                       f32_4 %546 = OpLoad %545 
                                       f32_3 %547 = OpVectorShuffle %546 %546 0 1 2 
                                         f32 %548 = OpDot %544 %547 
                                Private f32* %549 = OpAccessChain %35 %163 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %35 %163 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpExtInst %1 43 %551 %102 %75 
                                Private f32* %553 = OpAccessChain %35 %163 
                                                      OpStore %553 %552 
                                       f32_4 %555 = OpLoad %87 
                                       f32_3 %556 = OpVectorShuffle %555 %555 0 1 2 
                                       f32_4 %557 = OpLoad %9 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                         f32 %559 = OpDot %556 %558 
                                                      OpStore %554 %559 
                                         f32 %560 = OpLoad %554 
                                         f32 %561 = OpExtInst %1 43 %560 %102 %75 
                                                      OpStore %554 %561 
                              Uniform f32_4* %562 = OpAccessChain %17 %514 
                                       f32_4 %563 = OpLoad %562 
                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
                                       f32_4 %565 = OpLoad %9 
                                       f32_3 %566 = OpVectorShuffle %565 %565 0 1 2 
                                         f32 %567 = OpDot %564 %566 
                                Private f32* %568 = OpAccessChain %9 %163 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %9 %163 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpExtInst %1 43 %570 %102 %75 
                                Private f32* %572 = OpAccessChain %9 %163 
                                                      OpStore %572 %571 
                                Private f32* %574 = OpAccessChain %9 %163 
                                         f32 %575 = OpLoad %574 
                                Private f32* %576 = OpAccessChain %9 %163 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpFMul %575 %577 
                                Private f32* %579 = OpAccessChain %573 %163 
                                                      OpStore %579 %578 
                                       f32_3 %580 = OpLoad %573 
                                       f32_2 %581 = OpVectorShuffle %580 %580 0 0 
                                         f32 %582 = OpLoad %69 
                                       f32_2 %583 = OpCompositeConstruct %582 %582 
                                         f32 %584 = OpDot %581 %583 
                                Private f32* %585 = OpAccessChain %573 %163 
                                                      OpStore %585 %584 
                                Private f32* %586 = OpAccessChain %573 %163 
                                         f32 %587 = OpLoad %586 
                                         f32 %589 = OpFAdd %587 %588 
                                Private f32* %590 = OpAccessChain %573 %163 
                                                      OpStore %590 %589 
                                Private f32* %592 = OpAccessChain %35 %163 
                                         f32 %593 = OpLoad %592 
                                         f32 %594 = OpFNegate %593 
                                         f32 %595 = OpFAdd %594 %75 
                                                      OpStore %591 %595 
                                         f32 %597 = OpLoad %591 
                                         f32 %598 = OpLoad %591 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %596 %599 
                                         f32 %600 = OpLoad %596 
                                         f32 %601 = OpLoad %596 
                                         f32 %602 = OpFMul %600 %601 
                                                      OpStore %596 %602 
                                         f32 %603 = OpLoad %591 
                                         f32 %604 = OpLoad %596 
                                         f32 %605 = OpFMul %603 %604 
                                                      OpStore %591 %605 
                                Private f32* %606 = OpAccessChain %573 %163 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpLoad %591 
                                         f32 %609 = OpFMul %607 %608 
                                         f32 %610 = OpFAdd %609 %75 
                                                      OpStore %591 %610 
                                         f32 %611 = OpLoad %27 
                                         f32 %612 = OpExtInst %1 4 %611 
                                         f32 %613 = OpFNegate %612 
                                         f32 %614 = OpFAdd %613 %75 
                                                      OpStore %596 %614 
                                         f32 %615 = OpLoad %596 
                                         f32 %616 = OpLoad %596 
                                         f32 %617 = OpFMul %615 %616 
                                                      OpStore %257 %617 
                                         f32 %618 = OpLoad %257 
                                         f32 %619 = OpLoad %257 
                                         f32 %620 = OpFMul %618 %619 
                                                      OpStore %257 %620 
                                         f32 %621 = OpLoad %596 
                                         f32 %622 = OpLoad %257 
                                         f32 %623 = OpFMul %621 %622 
                                                      OpStore %596 %623 
                                Private f32* %624 = OpAccessChain %573 %163 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpLoad %596 
                                         f32 %627 = OpFMul %625 %626 
                                         f32 %628 = OpFAdd %627 %75 
                                Private f32* %629 = OpAccessChain %573 %163 
                                                      OpStore %629 %628 
                                Private f32* %630 = OpAccessChain %573 %163 
                                         f32 %631 = OpLoad %630 
                                         f32 %632 = OpLoad %591 
                                         f32 %633 = OpFMul %631 %632 
                                Private f32* %634 = OpAccessChain %573 %163 
                                                      OpStore %634 %633 
                                         f32 %635 = OpLoad %69 
                                         f32 %636 = OpLoad %69 
                                         f32 %637 = OpFMul %635 %636 
                                                      OpStore %591 %637 
                                         f32 %638 = OpLoad %591 
                                         f32 %640 = OpExtInst %1 40 %638 %639 
                                                      OpStore %591 %640 
                                         f32 %641 = OpLoad %591 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFAdd %642 %75 
                                                      OpStore %69 %643 
                                         f32 %644 = OpLoad %27 
                                         f32 %645 = OpExtInst %1 4 %644 
                                         f32 %646 = OpLoad %69 
                                         f32 %647 = OpFMul %645 %646 
                                         f32 %648 = OpLoad %591 
                                         f32 %649 = OpFAdd %647 %648 
                                                      OpStore %257 %649 
                                Private f32* %650 = OpAccessChain %35 %163 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpLoad %69 
                                         f32 %653 = OpFMul %651 %652 
                                         f32 %654 = OpLoad %591 
                                         f32 %655 = OpFAdd %653 %654 
                                                      OpStore %69 %655 
                                         f32 %656 = OpLoad %27 
                                         f32 %657 = OpExtInst %1 4 %656 
                                         f32 %658 = OpLoad %69 
                                         f32 %659 = OpFMul %657 %658 
                                                      OpStore %27 %659 
                                Private f32* %660 = OpAccessChain %35 %163 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %257 
                                         f32 %663 = OpFMul %661 %662 
                                         f32 %664 = OpLoad %27 
                                         f32 %665 = OpFAdd %663 %664 
                                                      OpStore %27 %665 
                                         f32 %666 = OpLoad %27 
                                         f32 %668 = OpFAdd %666 %667 
                                                      OpStore %27 %668 
                                         f32 %670 = OpLoad %27 
                                         f32 %671 = OpFDiv %669 %670 
                                                      OpStore %27 %671 
                                         f32 %672 = OpLoad %591 
                                         f32 %673 = OpLoad %591 
                                         f32 %674 = OpFMul %672 %673 
                                                      OpStore %69 %674 
                                         f32 %675 = OpLoad %554 
                                         f32 %676 = OpLoad %69 
                                         f32 %677 = OpFMul %675 %676 
                                         f32 %678 = OpLoad %554 
                                         f32 %679 = OpFNegate %678 
                                         f32 %680 = OpFAdd %677 %679 
                                                      OpStore %257 %680 
                                         f32 %681 = OpLoad %257 
                                         f32 %682 = OpLoad %554 
                                         f32 %683 = OpFMul %681 %682 
                                         f32 %684 = OpFAdd %683 %75 
                                                      OpStore %554 %684 
                                         f32 %685 = OpLoad %69 
                                         f32 %687 = OpFMul %685 %686 
                                                      OpStore %69 %687 
                                         f32 %688 = OpLoad %554 
                                         f32 %689 = OpLoad %554 
                                         f32 %690 = OpFMul %688 %689 
                                         f32 %692 = OpFAdd %690 %691 
                                                      OpStore %554 %692 
                                         f32 %693 = OpLoad %69 
                                         f32 %694 = OpLoad %554 
                                         f32 %695 = OpFDiv %693 %694 
                                                      OpStore %554 %695 
                                         f32 %696 = OpLoad %27 
                                         f32 %697 = OpLoad %554 
                                         f32 %698 = OpFMul %696 %697 
                                Private f32* %699 = OpAccessChain %573 %190 
                                                      OpStore %699 %698 
                                       f32_4 %700 = OpLoad %35 
                                       f32_2 %701 = OpVectorShuffle %700 %700 0 0 
                                       f32_3 %702 = OpLoad %573 
                                       f32_2 %703 = OpVectorShuffle %702 %702 0 2 
                                       f32_2 %704 = OpFMul %701 %703 
                                       f32_3 %705 = OpLoad %573 
                                       f32_3 %706 = OpVectorShuffle %705 %704 3 1 4 
                                                      OpStore %573 %706 
                                Private f32* %707 = OpAccessChain %573 %190 
                                         f32 %708 = OpLoad %707 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %27 %710 
                                         f32 %711 = OpLoad %27 
                                         f32 %712 = OpExtInst %1 40 %711 %102 
                                                      OpStore %27 %712 
                                         f32 %713 = OpLoad %591 
                                         f32 %714 = OpLoad %591 
                                         f32 %715 = OpFMul %713 %714 
                                         f32 %716 = OpFAdd %715 %75 
                                                      OpStore %591 %716 
                                         f32 %717 = OpLoad %591 
                                         f32 %718 = OpFDiv %75 %717 
                                                      OpStore %591 %718 
                                       f32_4 %719 = OpLoad %119 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 1 2 
                                       f32_4 %721 = OpLoad %119 
                                       f32_3 %722 = OpVectorShuffle %721 %721 0 1 2 
                                         f32 %723 = OpDot %720 %722 
                                Private f32* %724 = OpAccessChain %35 %163 
                                                      OpStore %724 %723 
                                Private f32* %726 = OpAccessChain %35 %163 
                                         f32 %727 = OpLoad %726 
                                        bool %728 = OpFOrdNotEqual %727 %102 
                                                      OpStore %725 %728 
                                        bool %729 = OpLoad %725 
                                         f32 %730 = OpSelect %729 %75 %102 
                                Private f32* %731 = OpAccessChain %35 %163 
                                                      OpStore %731 %730 
                                         f32 %732 = OpLoad %27 
                                Private f32* %733 = OpAccessChain %35 %163 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpFMul %732 %734 
                                                      OpStore %27 %735 
                                         f32 %736 = OpLoad %77 
                                         f32 %737 = OpFNegate %736 
                                Uniform f32* %738 = OpAccessChain %17 %70 
                                         f32 %739 = OpLoad %738 
                                         f32 %740 = OpFAdd %737 %739 
                                Private f32* %741 = OpAccessChain %35 %163 
                                                      OpStore %741 %740 
                                Private f32* %742 = OpAccessChain %35 %163 
                                         f32 %743 = OpLoad %742 
                                         f32 %744 = OpFAdd %743 %75 
                                Private f32* %745 = OpAccessChain %35 %163 
                                                      OpStore %745 %744 
                                Private f32* %746 = OpAccessChain %35 %163 
                                         f32 %747 = OpLoad %746 
                                         f32 %748 = OpExtInst %1 43 %747 %102 %75 
                                Private f32* %749 = OpAccessChain %35 %163 
                                                      OpStore %749 %748 
                                       f32_3 %750 = OpLoad %573 
                                       f32_3 %751 = OpVectorShuffle %750 %750 0 0 0 
                              Uniform f32_4* %753 = OpAccessChain %17 %752 
                                       f32_4 %754 = OpLoad %753 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %751 %755 
                                       f32_4 %757 = OpLoad %87 
                                       f32_4 %758 = OpVectorShuffle %757 %756 4 5 6 3 
                                                      OpStore %87 %758 
                                         f32 %759 = OpLoad %27 
                                       f32_3 %760 = OpCompositeConstruct %759 %759 %759 
                              Uniform f32_4* %761 = OpAccessChain %17 %752 
                                       f32_4 %762 = OpLoad %761 
                                       f32_3 %763 = OpVectorShuffle %762 %762 0 1 2 
                                       f32_3 %764 = OpFMul %760 %763 
                                                      OpStore %139 %764 
                                Private f32* %765 = OpAccessChain %9 %163 
                                         f32 %766 = OpLoad %765 
                                         f32 %767 = OpFNegate %766 
                                         f32 %768 = OpFAdd %767 %75 
                                Private f32* %769 = OpAccessChain %9 %163 
                                                      OpStore %769 %768 
                                Private f32* %770 = OpAccessChain %9 %163 
                                         f32 %771 = OpLoad %770 
                                Private f32* %772 = OpAccessChain %9 %163 
                                         f32 %773 = OpLoad %772 
                                         f32 %774 = OpFMul %771 %773 
                                Private f32* %775 = OpAccessChain %573 %163 
                                                      OpStore %775 %774 
                                Private f32* %776 = OpAccessChain %573 %163 
                                         f32 %777 = OpLoad %776 
                                Private f32* %778 = OpAccessChain %573 %163 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFMul %777 %779 
                                Private f32* %781 = OpAccessChain %573 %163 
                                                      OpStore %781 %780 
                                Private f32* %782 = OpAccessChain %9 %163 
                                         f32 %783 = OpLoad %782 
                                Private f32* %784 = OpAccessChain %573 %163 
                                         f32 %785 = OpLoad %784 
                                         f32 %786 = OpFMul %783 %785 
                                Private f32* %787 = OpAccessChain %9 %163 
                                                      OpStore %787 %786 
                                       f32_4 %788 = OpLoad %119 
                                       f32_3 %789 = OpVectorShuffle %788 %788 0 1 2 
                                       f32_3 %790 = OpFNegate %789 
                                       f32_3 %792 = OpFAdd %790 %791 
                                                      OpStore %313 %792 
                                       f32_3 %793 = OpLoad %313 
                                       f32_4 %794 = OpLoad %9 
                                       f32_3 %795 = OpVectorShuffle %794 %794 0 0 0 
                                       f32_3 %796 = OpFMul %793 %795 
                                       f32_4 %797 = OpLoad %119 
                                       f32_3 %798 = OpVectorShuffle %797 %797 0 1 2 
                                       f32_3 %799 = OpFAdd %796 %798 
                                       f32_4 %800 = OpLoad %9 
                                       f32_4 %801 = OpVectorShuffle %800 %799 4 5 2 6 
                                                      OpStore %9 %801 
                                       f32_4 %802 = OpLoad %9 
                                       f32_3 %803 = OpVectorShuffle %802 %802 0 1 3 
                                       f32_3 %804 = OpLoad %139 
                                       f32_3 %805 = OpFMul %803 %804 
                                       f32_4 %806 = OpLoad %9 
                                       f32_4 %807 = OpVectorShuffle %806 %805 4 5 2 6 
                                                      OpStore %9 %807 
                                       f32_3 %808 = OpLoad %61 
                                       f32_4 %809 = OpLoad %87 
                                       f32_3 %810 = OpVectorShuffle %809 %809 0 1 2 
                                       f32_3 %811 = OpFMul %808 %810 
                                       f32_4 %812 = OpLoad %9 
                                       f32_3 %813 = OpVectorShuffle %812 %812 0 1 3 
                                       f32_3 %814 = OpFAdd %811 %813 
                                       f32_4 %815 = OpLoad %9 
                                       f32_4 %816 = OpVectorShuffle %815 %814 4 5 2 6 
                                                      OpStore %9 %816 
                                       f32_3 %817 = OpLoad %127 
                                         f32 %818 = OpLoad %591 
                                       f32_3 %819 = OpCompositeConstruct %818 %818 %818 
                                       f32_3 %820 = OpFMul %817 %819 
                                                      OpStore %61 %820 
                                       f32_4 %821 = OpLoad %119 
                                       f32_3 %822 = OpVectorShuffle %821 %821 0 1 2 
                                       f32_3 %823 = OpFNegate %822 
                                       f32_4 %824 = OpLoad %35 
                                       f32_3 %825 = OpVectorShuffle %824 %824 0 0 0 
                                       f32_3 %826 = OpFAdd %823 %825 
                                       f32_4 %827 = OpLoad %35 
                                       f32_4 %828 = OpVectorShuffle %827 %826 4 5 2 6 
                                                      OpStore %35 %828 
                                         f32 %829 = OpLoad %596 
                                       f32_3 %830 = OpCompositeConstruct %829 %829 %829 
                                       f32_4 %831 = OpLoad %35 
                                       f32_3 %832 = OpVectorShuffle %831 %831 0 1 3 
                                       f32_3 %833 = OpFMul %830 %832 
                                       f32_4 %834 = OpLoad %119 
                                       f32_3 %835 = OpVectorShuffle %834 %834 0 1 2 
                                       f32_3 %836 = OpFAdd %833 %835 
                                       f32_4 %837 = OpLoad %35 
                                       f32_4 %838 = OpVectorShuffle %837 %836 4 5 6 3 
                                                      OpStore %35 %838 
                                       f32_3 %839 = OpLoad %61 
                                       f32_4 %840 = OpLoad %35 
                                       f32_3 %841 = OpVectorShuffle %840 %840 0 1 2 
                                       f32_3 %842 = OpFMul %839 %841 
                                       f32_4 %843 = OpLoad %9 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 3 
                                       f32_3 %845 = OpFAdd %842 %844 
                                       f32_4 %846 = OpLoad %9 
                                       f32_4 %847 = OpVectorShuffle %846 %845 4 5 6 3 
                                                      OpStore %9 %847 
                                       f32_3 %848 = OpLoad %44 
                              Uniform f32_4* %849 = OpAccessChain %17 %63 
                                       f32_4 %850 = OpLoad %849 
                                       f32_3 %851 = OpVectorShuffle %850 %850 0 1 2 
                                       f32_3 %852 = OpFMul %848 %851 
                                       f32_4 %853 = OpLoad %9 
                                       f32_3 %854 = OpVectorShuffle %853 %853 0 1 2 
                                       f32_3 %855 = OpFAdd %852 %854 
                                       f32_4 %856 = OpLoad %9 
                                       f32_4 %857 = OpVectorShuffle %856 %855 4 5 6 3 
                                                      OpStore %9 %857 
                                         f32 %860 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %862 = OpAccessChain %17 %861 %177 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFDiv %860 %863 
                                                      OpStore %27 %864 
                                         f32 %865 = OpLoad %27 
                                         f32 %866 = OpFNegate %865 
                                         f32 %867 = OpFAdd %866 %75 
                                                      OpStore %27 %867 
                                         f32 %868 = OpLoad %27 
                                Uniform f32* %869 = OpAccessChain %17 %861 %190 
                                         f32 %870 = OpLoad %869 
                                         f32 %871 = OpFMul %868 %870 
                                                      OpStore %27 %871 
                                         f32 %872 = OpLoad %27 
                                         f32 %873 = OpExtInst %1 40 %872 %102 
                                                      OpStore %27 %873 
                                         f32 %874 = OpLoad %27 
                                Uniform f32* %876 = OpAccessChain %17 %875 %190 
                                         f32 %877 = OpLoad %876 
                                         f32 %878 = OpFMul %874 %877 
                                Uniform f32* %879 = OpAccessChain %17 %875 %105 
                                         f32 %880 = OpLoad %879 
                                         f32 %881 = OpFAdd %878 %880 
                                                      OpStore %27 %881 
                                         f32 %882 = OpLoad %27 
                                         f32 %883 = OpExtInst %1 43 %882 %102 %75 
                                                      OpStore %27 %883 
                                       f32_4 %884 = OpLoad %9 
                                       f32_3 %885 = OpVectorShuffle %884 %884 0 1 2 
                              Uniform f32_4* %887 = OpAccessChain %17 %886 
                                       f32_4 %888 = OpLoad %887 
                                       f32_3 %889 = OpVectorShuffle %888 %888 0 1 2 
                                       f32_3 %890 = OpFNegate %889 
                                       f32_3 %891 = OpFAdd %885 %890 
                                       f32_4 %892 = OpLoad %9 
                                       f32_4 %893 = OpVectorShuffle %892 %891 4 5 6 3 
                                                      OpStore %9 %893 
                                         f32 %896 = OpLoad %27 
                                       f32_3 %897 = OpCompositeConstruct %896 %896 %896 
                                       f32_4 %898 = OpLoad %9 
                                       f32_3 %899 = OpVectorShuffle %898 %898 0 1 2 
                                       f32_3 %900 = OpFMul %897 %899 
                              Uniform f32_4* %901 = OpAccessChain %17 %886 
                                       f32_4 %902 = OpLoad %901 
                                       f32_3 %903 = OpVectorShuffle %902 %902 0 1 2 
                                       f32_3 %904 = OpFAdd %900 %903 
                                       f32_4 %905 = OpLoad %895 
                                       f32_4 %906 = OpVectorShuffle %905 %904 4 5 6 3 
                                                      OpStore %895 %906 
                                 Output f32* %908 = OpAccessChain %895 %105 
                                                      OpStore %908 %75 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
float u_xlat12;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    gl_Position = u_xlat2;
    vs_TEXCOORD4 = u_xlat2.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat12 = u_xlat0.y * u_xlat0.y;
    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat37 = (-_Glossiness) + 1.0;
    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz;
    u_xlat5.w = 1.0;
    u_xlat6.x = dot(unity_SHAr, u_xlat5);
    u_xlat6.y = dot(unity_SHAg, u_xlat5);
    u_xlat6.z = dot(unity_SHAb, u_xlat5);
    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb38){
        u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat38 = inversesqrt(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat38) * u_xlat4.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
        u_xlat38 = min(u_xlat7.z, u_xlat38);
        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat38 = (-u_xlat37) * 0.699999988 + 1.70000005;
    u_xlat38 = u_xlat37 * u_xlat38;
    u_xlat38 = u_xlat38 * 6.0;
    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat38);
    u_xlat39 = u_xlat6.w + -1.0;
    u_xlat39 = unity_SpecCube0_HDR.w * u_xlat39 + 1.0;
    u_xlat39 = log2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.y;
    u_xlat39 = exp2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat39);
    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = inversesqrt(u_xlat40);
            u_xlat8.xyz = vec3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat38);
        u_xlat38 = u_xlat4.w + -1.0;
        u_xlat38 = unity_SpecCube1_HDR.w * u_xlat38 + 1.0;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.y;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz + (-u_xlat4.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
    }
    u_xlat38 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat4.xyz = vec3(u_xlat38) * vs_TEXCOORD1.xyz;
    u_xlat6.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat38 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat38) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat37));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat39 = u_xlat25 * u_xlat25;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat25 = u_xlat25 * u_xlat39;
    u_xlat12.x = u_xlat12.x * u_xlat25 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat37 * u_xlat37;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat37 = (-u_xlat24) + 1.0;
    u_xlat39 = abs(u_xlat36) * u_xlat37 + u_xlat24;
    u_xlat37 = u_xlat1.x * u_xlat37 + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat37;
    u_xlat36 = u_xlat1.x * u_xlat39 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat37 = u_xlat24 * u_xlat24;
    u_xlat39 = u_xlat13 * u_xlat37 + (-u_xlat13);
    u_xlat13 = u_xlat39 * u_xlat13 + 1.0;
    u_xlat37 = u_xlat37 * 0.318309873;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat13 = u_xlat37 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat12.z = u_xlat36 * 3.14159274;
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat36 = max(u_xlat12.z, 0.0);
    u_xlat24 = u_xlat24 * u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat36 * u_xlat1.x;
    u_xlat1.x = (-u_xlat38) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat5.xyz;
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat8.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat24);
    u_xlat1.xyw = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyw + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    u_xlat36 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 443
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %194 %234 %239 %244 %245 %388 %425 %436 %437 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 194 
                                                      OpMemberDecorate %232 0 BuiltIn 232 
                                                      OpMemberDecorate %232 1 BuiltIn 232 
                                                      OpMemberDecorate %232 2 BuiltIn 232 
                                                      OpDecorate %232 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 239 
                                                      OpDecorate vs_TEXCOORD0 Location 244 
                                                      OpDecorate %245 Location 245 
                                                      OpDecorate vs_TEXCOORD1 Location 388 
                                                      OpDecorate vs_TEXCOORD3 Location 425 
                                                      OpDecorate vs_TEXCOORD5 Location 436 
                                                      OpDecorate vs_TEXCOORD6 Location 437 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 11 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 12 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 10 
                                         i32 %119 = OpConstant 9 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 5 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                                             %193 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %206 = OpConstant 7 
                                             %231 = OpTypeArray %6 %20 
                                             %232 = OpTypeStruct %7 %6 %231 
                                             %233 = OpTypePointer Output %232 
        Output struct {f32_4; f32; f32[1];}* %234 = OpVariable Output 
                                             %236 = OpTypePointer Output %7 
                                             %238 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %240 = OpConstant 2 
                                             %243 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %245 = OpVariable Input 
                                         i32 %248 = OpConstant 13 
                                         f32 %271 = OpConstant 3.674022E-40 
                                       f32_2 %272 = OpConstantComposite %271 %271 
                                         f32 %274 = OpConstant 3.674022E-40 
                                       f32_2 %275 = OpConstantComposite %274 %274 
                                Private f32* %279 = OpVariable Private 
                                         f32 %288 = OpConstant 3.674022E-40 
                                         f32 %289 = OpConstant 3.674022E-40 
                                       f32_2 %290 = OpConstantComposite %288 %289 
                                       f32_2 %292 = OpConstantComposite %56 %56 
                                       f32_3 %313 = OpConstantComposite %56 %56 %56 
                                             %325 = OpTypeBool 
                                             %326 = OpTypePointer Private %325 
                               Private bool* %327 = OpVariable Private 
                                       f32_4 %328 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %329 = OpConstant 8 
                                             %333 = OpTypeVector %325 4 
                                             %337 = OpTypePointer Function %100 
                                         i32 %351 = OpConstant 6 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                Private f32* %391 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %426 = OpConstant 4 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %338 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %18 %167 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %166 %171 
                                                      OpStore %164 %172 
                              Uniform f32_4* %173 = OpAccessChain %18 %167 %19 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %114 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %164 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %164 %179 
                              Uniform f32_4* %181 = OpAccessChain %18 %167 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %114 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %164 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %114 %187 
                                       f32_4 %188 = OpLoad %114 
                              Uniform f32_4* %190 = OpAccessChain %18 %167 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %164 %192 
                              Uniform f32_4* %195 = OpAccessChain %18 %167 %189 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %158 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %114 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                                      OpStore vs_TEXCOORD2 %203 
                                       f32_4 %204 = OpLoad %164 
                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
                              Uniform f32_4* %207 = OpAccessChain %18 %206 %168 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpFMul %205 %208 
                                                      OpStore %114 %209 
                              Uniform f32_4* %210 = OpAccessChain %18 %206 %19 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %164 
                                       f32_4 %213 = OpVectorShuffle %212 %212 0 0 0 0 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %114 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %114 %216 
                              Uniform f32_4* %217 = OpAccessChain %18 %206 %180 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %164 
                                       f32_4 %220 = OpVectorShuffle %219 %219 2 2 2 2 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %114 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %114 %223 
                              Uniform f32_4* %224 = OpAccessChain %18 %206 %189 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %164 
                                       f32_4 %227 = OpVectorShuffle %226 %226 3 3 3 3 
                                       f32_4 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %114 
                                       f32_4 %230 = OpFAdd %228 %229 
                                                      OpStore %114 %230 
                                       f32_4 %235 = OpLoad %114 
                               Output f32_4* %237 = OpAccessChain %234 %19 
                                                      OpStore %237 %235 
                                Private f32* %241 = OpAccessChain %114 %240 
                                         f32 %242 = OpLoad %241 
                                                      OpStore vs_TEXCOORD4 %242 
                                       f32_4 %246 = OpLoad %245 
                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
                              Uniform f32_4* %249 = OpAccessChain %18 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 1 
                                       f32_2 %252 = OpFMul %247 %251 
                              Uniform f32_4* %253 = OpAccessChain %18 %248 
                                       f32_4 %254 = OpLoad %253 
                                       f32_2 %255 = OpVectorShuffle %254 %254 2 3 
                                       f32_2 %256 = OpFAdd %252 %255 
                                                      OpStore vs_TEXCOORD0 %256 
                                Private f32* %257 = OpAccessChain %76 %20 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpExtInst %1 8 %258 
                                Private f32* %260 = OpAccessChain %114 %29 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %114 %29 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpFNegate %262 
                                         f32 %264 = OpFMul %263 %146 
                                Private f32* %265 = OpAccessChain %76 %29 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFAdd %264 %266 
                                Private f32* %268 = OpAccessChain %114 %20 
                                                      OpStore %268 %267 
                                       f32_4 %269 = OpLoad %114 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                       f32_2 %273 = OpFMul %270 %272 
                                       f32_2 %276 = OpFAdd %273 %275 
                                       f32_4 %277 = OpLoad %76 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %76 %278 
                                       f32_4 %280 = OpLoad %76 
                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
                                       f32_4 %282 = OpLoad %76 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 1 
                                         f32 %284 = OpDot %281 %283 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                       f32_2 %286 = OpCompositeConstruct %285 %285 
                                       f32_2 %287 = OpFNegate %286 
                                       f32_2 %291 = OpFMul %287 %290 
                                       f32_2 %293 = OpFAdd %291 %292 
                                       f32_4 %294 = OpLoad %114 
                                       f32_4 %295 = OpVectorShuffle %294 %293 0 1 4 5 
                                                      OpStore %114 %295 
                                Private f32* %296 = OpAccessChain %114 %240 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpExtInst %1 31 %297 
                                                      OpStore %279 %298 
                                       f32_4 %299 = OpLoad %76 
                                       f32_2 %300 = OpVectorShuffle %299 %299 0 1 
                                         f32 %301 = OpLoad %279 
                                       f32_2 %302 = OpCompositeConstruct %301 %301 
                                       f32_2 %303 = OpFMul %300 %302 
                                       f32_4 %304 = OpLoad %114 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 2 3 
                                                      OpStore %114 %305 
                                       f32_4 %306 = OpLoad %114 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 3 
                                       f32_3 %308 = OpExtInst %1 40 %307 %110 
                                       f32_4 %309 = OpLoad %76 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %76 %310 
                                       f32_4 %311 = OpLoad %76 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %314 = OpExtInst %1 37 %312 %313 
                                       f32_4 %315 = OpLoad %76 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %76 %316 
                                Private f32* %317 = OpAccessChain %76 %29 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFNegate %318 
                                Private f32* %320 = OpAccessChain %76 %154 
                                                      OpStore %320 %319 
                                Private f32* %321 = OpAccessChain %9 %29 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                Private f32* %324 = OpAccessChain %9 %154 
                                                      OpStore %324 %323 
                                Uniform f32* %330 = OpAccessChain %18 %329 
                                         f32 %331 = OpLoad %330 
                                       f32_4 %332 = OpCompositeConstruct %331 %331 %331 %331 
                                      bool_4 %334 = OpFOrdNotEqual %328 %332 
                                        bool %335 = OpAny %334 
                                                      OpStore %327 %335 
                                        bool %336 = OpLoad %327 
                                                      OpSelectionMerge %340 None 
                                                      OpBranchConditional %336 %339 %343 
                                             %339 = OpLabel 
                                       f32_4 %341 = OpLoad %76 
                                       f32_3 %342 = OpVectorShuffle %341 %341 3 2 1 
                                                      OpStore %338 %342 
                                                      OpBranch %340 
                                             %343 = OpLabel 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 3 1 2 
                                                      OpStore %338 %345 
                                                      OpBranch %340 
                                             %340 = OpLabel 
                                       f32_3 %346 = OpLoad %338 
                                       f32_4 %347 = OpLoad %9 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 6 3 
                                                      OpStore %9 %348 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                              Uniform f32_4* %352 = OpAccessChain %18 %351 %19 
                                       f32_4 %353 = OpLoad %352 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                         f32 %355 = OpDot %350 %354 
                                Private f32* %356 = OpAccessChain %76 %29 
                                                      OpStore %356 %355 
                                       f32_4 %357 = OpLoad %9 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                              Uniform f32_4* %359 = OpAccessChain %18 %351 %168 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                         f32 %362 = OpDot %358 %361 
                                Private f32* %363 = OpAccessChain %76 %20 
                                                      OpStore %363 %362 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                              Uniform f32_4* %366 = OpAccessChain %18 %351 %180 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                         f32 %369 = OpDot %365 %368 
                                Private f32* %370 = OpAccessChain %76 %240 
                                                      OpStore %370 %369 
                                       f32_4 %371 = OpLoad %76 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_4 %373 = OpLoad %76 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                         f32 %375 = OpDot %372 %374 
                                Private f32* %376 = OpAccessChain %9 %29 
                                                      OpStore %376 %375 
                                Private f32* %377 = OpAccessChain %9 %29 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpExtInst %1 32 %378 
                                Private f32* %380 = OpAccessChain %9 %29 
                                                      OpStore %380 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 0 0 
                                       f32_4 %383 = OpLoad %76 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_4 %386 = OpLoad %9 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
                                                      OpStore %9 %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                                      OpStore vs_TEXCOORD1 %390 
                                Private f32* %392 = OpAccessChain %9 %20 
                                         f32 %393 = OpLoad %392 
                                Private f32* %394 = OpAccessChain %9 %20 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %391 %396 
                                Private f32* %397 = OpAccessChain %9 %29 
                                         f32 %398 = OpLoad %397 
                                Private f32* %399 = OpAccessChain %9 %29 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFMul %398 %400 
                                         f32 %402 = OpLoad %391 
                                         f32 %403 = OpFNegate %402 
                                         f32 %404 = OpFAdd %401 %403 
                                                      OpStore %391 %404 
                                       f32_4 %405 = OpLoad %9 
                                       f32_4 %406 = OpVectorShuffle %405 %405 1 2 2 0 
                                       f32_4 %407 = OpLoad %9 
                                       f32_4 %408 = OpVectorShuffle %407 %407 0 1 2 2 
                                       f32_4 %409 = OpFMul %406 %408 
                                                      OpStore %76 %409 
                              Uniform f32_4* %410 = OpAccessChain %18 %168 
                                       f32_4 %411 = OpLoad %410 
                                       f32_4 %412 = OpLoad %76 
                                         f32 %413 = OpDot %411 %412 
                                Private f32* %414 = OpAccessChain %9 %29 
                                                      OpStore %414 %413 
                              Uniform f32_4* %415 = OpAccessChain %18 %180 
                                       f32_4 %416 = OpLoad %415 
                                       f32_4 %417 = OpLoad %76 
                                         f32 %418 = OpDot %416 %417 
                                Private f32* %419 = OpAccessChain %9 %20 
                                                      OpStore %419 %418 
                              Uniform f32_4* %420 = OpAccessChain %18 %189 
                                       f32_4 %421 = OpLoad %420 
                                       f32_4 %422 = OpLoad %76 
                                         f32 %423 = OpDot %421 %422 
                                Private f32* %424 = OpAccessChain %9 %240 
                                                      OpStore %424 %423 
                              Uniform f32_4* %427 = OpAccessChain %18 %426 
                                       f32_4 %428 = OpLoad %427 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                         f32 %430 = OpLoad %391 
                                       f32_3 %431 = OpCompositeConstruct %430 %430 %430 
                                       f32_3 %432 = OpFMul %429 %431 
                                       f32_4 %433 = OpLoad %9 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                                       f32_3 %435 = OpFAdd %432 %434 
                                                      OpStore vs_TEXCOORD3 %435 
                                                      OpStore vs_TEXCOORD5 %328 
                                                      OpStore vs_TEXCOORD6 %328 
                                 Output f32* %438 = OpAccessChain %234 %19 %20 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpFNegate %439 
                                 Output f32* %441 = OpAccessChain %234 %19 %20 
                                                      OpStore %441 %440 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 952
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %57 %81 %130 %901 %937 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpMemberDecorate %15 18 Offset 15 
                                                      OpMemberDecorate %15 19 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate vs_TEXCOORD0 Location 57 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate vs_TEXCOORD3 Location 130 
                                                      OpDecorate %283 DescriptorSet 283 
                                                      OpDecorate %283 Binding 283 
                                                      OpDecorate %285 DescriptorSet 285 
                                                      OpDecorate %285 Binding 285 
                                                      OpDecorate %438 DescriptorSet 438 
                                                      OpDecorate %438 Binding 438 
                                                      OpDecorate vs_TEXCOORD4 Location 901 
                                                      OpDecorate %937 Location 937 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                                              %43 = OpTypePointer Private %10 
                               Private f32_3* %44 = OpVariable Private 
                                              %45 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %46 = OpTypePointer UniformConstant %45 
         UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
                                              %49 = OpTypeSampler 
                                              %50 = OpTypePointer UniformConstant %49 
                     UniformConstant sampler* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampledImage %45 
                                              %55 = OpTypeVector %6 2 
                                              %56 = OpTypePointer Input %55 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %61 = OpVariable Private 
                                          i32 %63 = OpConstant 19 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
                                          i32 %70 = OpConstant 17 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %77 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_4* %87 = OpVariable Private 
                               Private f32_4* %99 = OpVariable Private 
                                             %103 = OpTypeInt 32 0 
                                         u32 %104 = OpConstant 3 
                              Private f32_4* %106 = OpVariable Private 
                                         i32 %107 = OpConstant 3 
                                         u32 %112 = OpConstant 0 
                                         i32 %114 = OpConstant 4 
                                         u32 %119 = OpConstant 1 
                                         i32 %121 = OpConstant 5 
                                         u32 %126 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                         f32 %137 = OpConstant 3.674022E-40 
                                       f32_3 %138 = OpConstantComposite %137 %137 %137 
                                             %142 = OpTypeBool 
                                             %143 = OpTypePointer Private %142 
                               Private bool* %144 = OpVariable Private 
                                         i32 %145 = OpConstant 10 
                              Private f32_3* %166 = OpVariable Private 
                                         i32 %169 = OpConstant 8 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %181 = OpConstant 9 
                                             %190 = OpTypeVector %142 3 
                                             %191 = OpTypePointer Private %190 
                             Private bool_3* %192 = OpVariable Private 
                                       f32_4 %193 = OpConstantComposite %137 %137 %137 %137 
                                             %196 = OpTypeVector %142 4 
                                             %199 = OpTypePointer Function %10 
                                             %204 = OpTypePointer Function %6 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %273 = OpConstant 3.674022E-40 
                                         f32 %279 = OpConstant 3.674022E-40 
                                             %281 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %282 = OpTypePointer UniformConstant %281 
      UniformConstant read_only TextureCube* %283 = OpVariable UniformConstant 
                    UniformConstant sampler* %285 = OpVariable UniformConstant 
                                             %287 = OpTypeSampledImage %281 
                                Private f32* %293 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         i32 %298 = OpConstant 11 
                               Private bool* %321 = OpVariable Private 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         i32 %329 = OpConstant 14 
                                Private f32* %336 = OpVariable Private 
                              Private f32_3* %349 = OpVariable Private 
                                         i32 %352 = OpConstant 12 
                              Private f32_3* %360 = OpVariable Private 
                                         i32 %363 = OpConstant 13 
                             Private bool_3* %371 = OpVariable Private 
      UniformConstant read_only TextureCube* %438 = OpVariable UniformConstant 
                                         i32 %449 = OpConstant 15 
                                         f32 %510 = OpConstant 3.674022E-40 
                                       f32_3 %511 = OpConstantComposite %510 %510 %510 
                                         i32 %515 = OpConstant 18 
                                         f32 %530 = OpConstant 3.674022E-40 
                                       f32_3 %531 = OpConstantComposite %530 %530 %530 
                                         f32 %538 = OpConstant 3.674022E-40 
                                         i32 %550 = OpConstant 2 
                                         f32 %563 = OpConstant 3.674022E-40 
                                Private f32* %590 = OpVariable Private 
                              Private f32_3* %609 = OpVariable Private 
                                         f32 %624 = OpConstant 3.674022E-40 
                                Private f32* %627 = OpVariable Private 
                                Private f32* %632 = OpVariable Private 
                                         f32 %675 = OpConstant 3.674022E-40 
                                         f32 %703 = OpConstant 3.674022E-40 
                                         f32 %705 = OpConstant 3.674022E-40 
                                         f32 %722 = OpConstant 3.674022E-40 
                                         f32 %727 = OpConstant 3.674022E-40 
                                         f32 %745 = OpConstant 3.674022E-40 
                               Private bool* %761 = OpVariable Private 
                                         i32 %786 = OpConstant 16 
                                       f32_3 %832 = OpConstantComposite %75 %75 %75 
                                             %900 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %903 = OpConstant 1 
                                         i32 %917 = OpConstant 7 
                                         i32 %928 = OpConstant 6 
                                             %936 = OpTypePointer Output %7 
                               Output f32_4* %937 = OpVariable Output 
                                             %949 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %200 = OpVariable Function 
                               Function f32* %205 = OpVariable Function 
                               Function f32* %217 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                             Function f32_3* %376 = OpVariable Function 
                               Function f32* %380 = OpVariable Function 
                               Function f32* %392 = OpVariable Function 
                               Function f32* %404 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %48 = OpLoad %47 
                                      sampler %52 = OpLoad %51 
                   read_only Texture2DSampled %54 = OpSampledImage %48 %52 
                                        f32_2 %58 = OpLoad vs_TEXCOORD0 
                                        f32_4 %59 = OpImageSampleImplicitLod %54 %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                                      OpStore %44 %60 
                                        f32_3 %62 = OpLoad %44 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %61 %68 
                                 Uniform f32* %72 = OpAccessChain %17 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFAdd %74 %75 
                                                      OpStore %69 %76 
                                        f32_4 %78 = OpLoad %35 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad vs_TEXCOORD1 
                                          f32 %83 = OpDot %80 %82 
                                                      OpStore %77 %83 
                                          f32 %84 = OpLoad %77 
                                          f32 %85 = OpLoad %77 
                                          f32 %86 = OpFAdd %84 %85 
                                                      OpStore %77 %86 
                                        f32_3 %88 = OpLoad vs_TEXCOORD1 
                                          f32 %89 = OpLoad %77 
                                        f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                        f32_3 %91 = OpFNegate %90 
                                        f32_3 %92 = OpFMul %88 %91 
                                        f32_4 %93 = OpLoad %35 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFNegate %94 
                                        f32_3 %96 = OpFAdd %92 %95 
                                        f32_4 %97 = OpLoad %87 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %87 %98 
                                       f32_3 %100 = OpLoad vs_TEXCOORD1 
                                       f32_4 %101 = OpLoad %99 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 6 3 
                                                      OpStore %99 %102 
                                Private f32* %105 = OpAccessChain %99 %104 
                                                      OpStore %105 %75 
                              Uniform f32_4* %108 = OpAccessChain %17 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %99 
                                         f32 %111 = OpDot %109 %110 
                                Private f32* %113 = OpAccessChain %106 %112 
                                                      OpStore %113 %111 
                              Uniform f32_4* %115 = OpAccessChain %17 %114 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %99 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %120 = OpAccessChain %106 %119 
                                                      OpStore %120 %118 
                              Uniform f32_4* %122 = OpAccessChain %17 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %99 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %127 = OpAccessChain %106 %126 
                                                      OpStore %127 %125 
                                       f32_4 %128 = OpLoad %106 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %131 = OpLoad vs_TEXCOORD3 
                                       f32_3 %132 = OpFAdd %129 %131 
                                       f32_4 %133 = OpLoad %99 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %99 %134 
                                       f32_4 %135 = OpLoad %99 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %139 = OpExtInst %1 40 %136 %138 
                                       f32_4 %140 = OpLoad %99 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %99 %141 
                                Uniform f32* %146 = OpAccessChain %17 %145 %104 
                                         f32 %147 = OpLoad %146 
                                        bool %148 = OpFOrdLessThan %137 %147 
                                                      OpStore %144 %148 
                                        bool %149 = OpLoad %144 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %264 
                                             %150 = OpLabel 
                                       f32_4 %152 = OpLoad %87 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %87 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %153 %155 
                                                      OpStore %77 %156 
                                         f32 %157 = OpLoad %77 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %77 %158 
                                         f32 %159 = OpLoad %77 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_4 %161 = OpLoad %87 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %106 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %106 %165 
                                       f32_3 %167 = OpLoad vs_TEXCOORD2 
                                       f32_3 %168 = OpFNegate %167 
                              Uniform f32_4* %170 = OpAccessChain %17 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %168 %172 
                                                      OpStore %166 %173 
                                       f32_3 %174 = OpLoad %166 
                                       f32_4 %175 = OpLoad %106 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFDiv %174 %176 
                                                      OpStore %166 %177 
                                       f32_3 %179 = OpLoad vs_TEXCOORD2 
                                       f32_3 %180 = OpFNegate %179 
                              Uniform f32_4* %182 = OpAccessChain %17 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %180 %184 
                                                      OpStore %178 %185 
                                       f32_3 %186 = OpLoad %178 
                                       f32_4 %187 = OpLoad %106 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFDiv %186 %188 
                                                      OpStore %178 %189 
                                       f32_4 %194 = OpLoad %106 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 1 2 0 
                                      bool_4 %197 = OpFOrdLessThan %193 %195 
                                      bool_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                                      OpStore %192 %198 
                                       f32_3 %201 = OpLoad %166 
                                                      OpStore %200 %201 
                               Private bool* %202 = OpAccessChain %192 %112 
                                        bool %203 = OpLoad %202 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %203 %206 %210 
                                             %206 = OpLabel 
                                Private f32* %208 = OpAccessChain %166 %112 
                                         f32 %209 = OpLoad %208 
                                                      OpStore %205 %209 
                                                      OpBranch %207 
                                             %210 = OpLabel 
                                Private f32* %211 = OpAccessChain %178 %112 
                                         f32 %212 = OpLoad %211 
                                                      OpStore %205 %212 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                         f32 %213 = OpLoad %205 
                               Function f32* %214 = OpAccessChain %200 %112 
                                                      OpStore %214 %213 
                               Private bool* %215 = OpAccessChain %192 %119 
                                        bool %216 = OpLoad %215 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %216 %218 %222 
                                             %218 = OpLabel 
                                Private f32* %220 = OpAccessChain %166 %119 
                                         f32 %221 = OpLoad %220 
                                                      OpStore %217 %221 
                                                      OpBranch %219 
                                             %222 = OpLabel 
                                Private f32* %223 = OpAccessChain %178 %119 
                                         f32 %224 = OpLoad %223 
                                                      OpStore %217 %224 
                                                      OpBranch %219 
                                             %219 = OpLabel 
                                         f32 %225 = OpLoad %217 
                               Function f32* %226 = OpAccessChain %200 %119 
                                                      OpStore %226 %225 
                               Private bool* %227 = OpAccessChain %192 %126 
                                        bool %228 = OpLoad %227 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %228 %230 %234 
                                             %230 = OpLabel 
                                Private f32* %232 = OpAccessChain %166 %126 
                                         f32 %233 = OpLoad %232 
                                                      OpStore %229 %233 
                                                      OpBranch %231 
                                             %234 = OpLabel 
                                Private f32* %235 = OpAccessChain %178 %126 
                                         f32 %236 = OpLoad %235 
                                                      OpStore %229 %236 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                         f32 %237 = OpLoad %229 
                               Function f32* %238 = OpAccessChain %200 %126 
                                                      OpStore %238 %237 
                                       f32_3 %239 = OpLoad %200 
                                                      OpStore %166 %239 
                                Private f32* %240 = OpAccessChain %166 %119 
                                         f32 %241 = OpLoad %240 
                                Private f32* %242 = OpAccessChain %166 %112 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpExtInst %1 37 %241 %243 
                                                      OpStore %77 %244 
                                Private f32* %245 = OpAccessChain %166 %126 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpLoad %77 
                                         f32 %248 = OpExtInst %1 37 %246 %247 
                                                      OpStore %77 %248 
                                       f32_3 %249 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %250 = OpAccessChain %17 %145 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFNegate %252 
                                       f32_3 %254 = OpFAdd %249 %253 
                                                      OpStore %166 %254 
                                       f32_4 %255 = OpLoad %106 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpLoad %77 
                                       f32_3 %258 = OpCompositeConstruct %257 %257 %257 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %166 
                                       f32_3 %261 = OpFAdd %259 %260 
                                       f32_4 %262 = OpLoad %106 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %106 %263 
                                                      OpBranch %151 
                                             %264 = OpLabel 
                                       f32_4 %265 = OpLoad %87 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %106 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %106 %268 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                         f32 %269 = OpLoad %69 
                                         f32 %270 = OpFNegate %269 
                                         f32 %272 = OpFMul %270 %271 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %77 %274 
                                         f32 %275 = OpLoad %69 
                                         f32 %276 = OpLoad %77 
                                         f32 %277 = OpFMul %275 %276 
                                                      OpStore %77 %277 
                                         f32 %278 = OpLoad %77 
                                         f32 %280 = OpFMul %278 %279 
                                                      OpStore %77 %280 
                       read_only TextureCube %284 = OpLoad %283 
                                     sampler %286 = OpLoad %285 
                read_only TextureCubeSampled %288 = OpSampledImage %284 %286 
                                       f32_4 %289 = OpLoad %106 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                         f32 %291 = OpLoad %77 
                                       f32_4 %292 = OpImageSampleExplicitLod %288 %290 Lod %7 
                                                      OpStore %106 %292 
                                Private f32* %294 = OpAccessChain %106 %104 
                                         f32 %295 = OpLoad %294 
                                         f32 %297 = OpFAdd %295 %296 
                                                      OpStore %293 %297 
                                Uniform f32* %299 = OpAccessChain %17 %298 %104 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpLoad %293 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpFAdd %302 %75 
                                                      OpStore %293 %303 
                                         f32 %304 = OpLoad %293 
                                         f32 %305 = OpExtInst %1 30 %304 
                                                      OpStore %293 %305 
                                         f32 %306 = OpLoad %293 
                                Uniform f32* %307 = OpAccessChain %17 %298 %119 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                                      OpStore %293 %309 
                                         f32 %310 = OpLoad %293 
                                         f32 %311 = OpExtInst %1 29 %310 
                                                      OpStore %293 %311 
                                         f32 %312 = OpLoad %293 
                                Uniform f32* %313 = OpAccessChain %17 %298 %112 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                                      OpStore %293 %315 
                                       f32_4 %316 = OpLoad %106 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                         f32 %318 = OpLoad %293 
                                       f32_3 %319 = OpCompositeConstruct %318 %318 %318 
                                       f32_3 %320 = OpFMul %317 %319 
                                                      OpStore %166 %320 
                                Uniform f32* %322 = OpAccessChain %17 %181 %104 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdLessThan %323 %324 
                                                      OpStore %321 %325 
                                        bool %326 = OpLoad %321 
                                                      OpSelectionMerge %328 None 
                                                      OpBranchConditional %326 %327 %328 
                                             %327 = OpLabel 
                                Uniform f32* %330 = OpAccessChain %17 %329 %104 
                                         f32 %331 = OpLoad %330 
                                        bool %332 = OpFOrdLessThan %137 %331 
                                                      OpStore %321 %332 
                                        bool %333 = OpLoad %321 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %335 
                                             %334 = OpLabel 
                                       f32_4 %337 = OpLoad %87 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_4 %339 = OpLoad %87 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                         f32 %341 = OpDot %338 %340 
                                                      OpStore %336 %341 
                                         f32 %342 = OpLoad %336 
                                         f32 %343 = OpExtInst %1 32 %342 
                                                      OpStore %336 %343 
                                         f32 %344 = OpLoad %336 
                                       f32_3 %345 = OpCompositeConstruct %344 %344 %344 
                                       f32_4 %346 = OpLoad %87 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFMul %345 %347 
                                                      OpStore %178 %348 
                                       f32_3 %350 = OpLoad vs_TEXCOORD2 
                                       f32_3 %351 = OpFNegate %350 
                              Uniform f32_4* %353 = OpAccessChain %17 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %351 %355 
                                                      OpStore %349 %356 
                                       f32_3 %357 = OpLoad %349 
                                       f32_3 %358 = OpLoad %178 
                                       f32_3 %359 = OpFDiv %357 %358 
                                                      OpStore %349 %359 
                                       f32_3 %361 = OpLoad vs_TEXCOORD2 
                                       f32_3 %362 = OpFNegate %361 
                              Uniform f32_4* %364 = OpAccessChain %17 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %362 %366 
                                                      OpStore %360 %367 
                                       f32_3 %368 = OpLoad %360 
                                       f32_3 %369 = OpLoad %178 
                                       f32_3 %370 = OpFDiv %368 %369 
                                                      OpStore %360 %370 
                                       f32_3 %372 = OpLoad %178 
                                       f32_4 %373 = OpVectorShuffle %372 %372 0 1 2 0 
                                      bool_4 %374 = OpFOrdLessThan %193 %373 
                                      bool_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                                      OpStore %371 %375 
                                       f32_3 %377 = OpLoad %349 
                                                      OpStore %376 %377 
                               Private bool* %378 = OpAccessChain %371 %112 
                                        bool %379 = OpLoad %378 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %379 %381 %385 
                                             %381 = OpLabel 
                                Private f32* %383 = OpAccessChain %349 %112 
                                         f32 %384 = OpLoad %383 
                                                      OpStore %380 %384 
                                                      OpBranch %382 
                                             %385 = OpLabel 
                                Private f32* %386 = OpAccessChain %360 %112 
                                         f32 %387 = OpLoad %386 
                                                      OpStore %380 %387 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                         f32 %388 = OpLoad %380 
                               Function f32* %389 = OpAccessChain %376 %112 
                                                      OpStore %389 %388 
                               Private bool* %390 = OpAccessChain %371 %119 
                                        bool %391 = OpLoad %390 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %391 %393 %397 
                                             %393 = OpLabel 
                                Private f32* %395 = OpAccessChain %349 %119 
                                         f32 %396 = OpLoad %395 
                                                      OpStore %392 %396 
                                                      OpBranch %394 
                                             %397 = OpLabel 
                                Private f32* %398 = OpAccessChain %360 %119 
                                         f32 %399 = OpLoad %398 
                                                      OpStore %392 %399 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %400 = OpLoad %392 
                               Function f32* %401 = OpAccessChain %376 %119 
                                                      OpStore %401 %400 
                               Private bool* %402 = OpAccessChain %371 %126 
                                        bool %403 = OpLoad %402 
                                                      OpSelectionMerge %406 None 
                                                      OpBranchConditional %403 %405 %409 
                                             %405 = OpLabel 
                                Private f32* %407 = OpAccessChain %349 %126 
                                         f32 %408 = OpLoad %407 
                                                      OpStore %404 %408 
                                                      OpBranch %406 
                                             %409 = OpLabel 
                                Private f32* %410 = OpAccessChain %360 %126 
                                         f32 %411 = OpLoad %410 
                                                      OpStore %404 %411 
                                                      OpBranch %406 
                                             %406 = OpLabel 
                                         f32 %412 = OpLoad %404 
                               Function f32* %413 = OpAccessChain %376 %126 
                                                      OpStore %413 %412 
                                       f32_3 %414 = OpLoad %376 
                                                      OpStore %349 %414 
                                Private f32* %415 = OpAccessChain %349 %119 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %349 %112 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpExtInst %1 37 %416 %418 
                                                      OpStore %336 %419 
                                Private f32* %420 = OpAccessChain %349 %126 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpLoad %336 
                                         f32 %423 = OpExtInst %1 37 %421 %422 
                                                      OpStore %336 %423 
                                       f32_3 %424 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %425 = OpAccessChain %17 %329 
                                       f32_4 %426 = OpLoad %425 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_3 %428 = OpFNegate %427 
                                       f32_3 %429 = OpFAdd %424 %428 
                                                      OpStore %349 %429 
                                       f32_3 %430 = OpLoad %178 
                                         f32 %431 = OpLoad %336 
                                       f32_3 %432 = OpCompositeConstruct %431 %431 %431 
                                       f32_3 %433 = OpFMul %430 %432 
                                       f32_3 %434 = OpLoad %349 
                                       f32_3 %435 = OpFAdd %433 %434 
                                       f32_4 %436 = OpLoad %87 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %87 %437 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                       read_only TextureCube %439 = OpLoad %438 
                                     sampler %440 = OpLoad %285 
                read_only TextureCubeSampled %441 = OpSampledImage %439 %440 
                                       f32_4 %442 = OpLoad %87 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                         f32 %444 = OpLoad %77 
                                       f32_4 %445 = OpImageSampleExplicitLod %441 %443 Lod %7 
                                                      OpStore %87 %445 
                                Private f32* %446 = OpAccessChain %87 %104 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFAdd %447 %296 
                                                      OpStore %77 %448 
                                Uniform f32* %450 = OpAccessChain %17 %449 %104 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpLoad %77 
                                         f32 %453 = OpFMul %451 %452 
                                         f32 %454 = OpFAdd %453 %75 
                                                      OpStore %77 %454 
                                         f32 %455 = OpLoad %77 
                                         f32 %456 = OpExtInst %1 30 %455 
                                                      OpStore %77 %456 
                                         f32 %457 = OpLoad %77 
                                Uniform f32* %458 = OpAccessChain %17 %449 %119 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFMul %457 %459 
                                                      OpStore %77 %460 
                                         f32 %461 = OpLoad %77 
                                         f32 %462 = OpExtInst %1 29 %461 
                                                      OpStore %77 %462 
                                         f32 %463 = OpLoad %77 
                                Uniform f32* %464 = OpAccessChain %17 %449 %112 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                                      OpStore %77 %466 
                                       f32_4 %467 = OpLoad %87 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                         f32 %469 = OpLoad %77 
                                       f32_3 %470 = OpCompositeConstruct %469 %469 %469 
                                       f32_3 %471 = OpFMul %468 %470 
                                       f32_4 %472 = OpLoad %87 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %87 %473 
                                         f32 %474 = OpLoad %293 
                                       f32_3 %475 = OpCompositeConstruct %474 %474 %474 
                                       f32_4 %476 = OpLoad %106 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %87 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpFNegate %480 
                                       f32_3 %482 = OpFAdd %478 %481 
                                       f32_4 %483 = OpLoad %106 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %106 %484 
                              Uniform f32_4* %485 = OpAccessChain %17 %181 
                                       f32_4 %486 = OpLoad %485 
                                       f32_3 %487 = OpVectorShuffle %486 %486 3 3 3 
                                       f32_4 %488 = OpLoad %106 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 2 
                                       f32_3 %490 = OpFMul %487 %489 
                                       f32_4 %491 = OpLoad %87 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFAdd %490 %492 
                                                      OpStore %166 %493 
                                                      OpBranch %328 
                                             %328 = OpLabel 
                                       f32_3 %494 = OpLoad vs_TEXCOORD1 
                                       f32_3 %495 = OpLoad vs_TEXCOORD1 
                                         f32 %496 = OpDot %494 %495 
                                                      OpStore %77 %496 
                                         f32 %497 = OpLoad %77 
                                         f32 %498 = OpExtInst %1 32 %497 
                                                      OpStore %77 %498 
                                         f32 %499 = OpLoad %77 
                                       f32_3 %500 = OpCompositeConstruct %499 %499 %499 
                                       f32_3 %501 = OpLoad vs_TEXCOORD1 
                                       f32_3 %502 = OpFMul %500 %501 
                                       f32_4 %503 = OpLoad %87 
                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 6 3 
                                                      OpStore %87 %504 
                                       f32_3 %505 = OpLoad %44 
                              Uniform f32_4* %506 = OpAccessChain %17 %63 
                                       f32_4 %507 = OpLoad %506 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFMul %505 %508 
                                       f32_3 %512 = OpFAdd %509 %511 
                                       f32_4 %513 = OpLoad %106 
                                       f32_4 %514 = OpVectorShuffle %513 %512 4 5 6 3 
                                                      OpStore %106 %514 
                                Uniform f32* %516 = OpAccessChain %17 %515 
                                         f32 %517 = OpLoad %516 
                                Uniform f32* %518 = OpAccessChain %17 %515 
                                         f32 %519 = OpLoad %518 
                                Uniform f32* %520 = OpAccessChain %17 %515 
                                         f32 %521 = OpLoad %520 
                                       f32_3 %522 = OpCompositeConstruct %517 %519 %521 
                                         f32 %523 = OpCompositeExtract %522 0 
                                         f32 %524 = OpCompositeExtract %522 1 
                                         f32 %525 = OpCompositeExtract %522 2 
                                       f32_3 %526 = OpCompositeConstruct %523 %524 %525 
                                       f32_4 %527 = OpLoad %106 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFMul %526 %528 
                                       f32_3 %532 = OpFAdd %529 %531 
                                       f32_4 %533 = OpLoad %106 
                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
                                                      OpStore %106 %534 
                                Uniform f32* %535 = OpAccessChain %17 %515 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFNegate %536 
                                         f32 %539 = OpFMul %537 %538 
                                         f32 %540 = OpFAdd %539 %538 
                                                      OpStore %77 %540 
                                         f32 %541 = OpLoad %77 
                                       f32_3 %542 = OpCompositeConstruct %541 %541 %541 
                                       f32_3 %543 = OpLoad %61 
                                       f32_3 %544 = OpFMul %542 %543 
                                                      OpStore %61 %544 
                                       f32_4 %545 = OpLoad %9 
                                       f32_3 %546 = OpVectorShuffle %545 %545 0 1 2 
                                         f32 %547 = OpLoad %27 
                                       f32_3 %548 = OpCompositeConstruct %547 %547 %547 
                                       f32_3 %549 = OpFMul %546 %548 
                              Uniform f32_4* %551 = OpAccessChain %17 %550 
                                       f32_4 %552 = OpLoad %551 
                                       f32_3 %553 = OpVectorShuffle %552 %552 0 1 2 
                                       f32_3 %554 = OpFAdd %549 %553 
                                       f32_4 %555 = OpLoad %9 
                                       f32_4 %556 = OpVectorShuffle %555 %554 4 5 6 3 
                                                      OpStore %9 %556 
                                       f32_4 %557 = OpLoad %9 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                       f32_4 %559 = OpLoad %9 
                                       f32_3 %560 = OpVectorShuffle %559 %559 0 1 2 
                                         f32 %561 = OpDot %558 %560 
                                                      OpStore %27 %561 
                                         f32 %562 = OpLoad %27 
                                         f32 %564 = OpExtInst %1 40 %562 %563 
                                                      OpStore %27 %564 
                                         f32 %565 = OpLoad %27 
                                         f32 %566 = OpExtInst %1 32 %565 
                                                      OpStore %27 %566 
                                         f32 %567 = OpLoad %27 
                                       f32_3 %568 = OpCompositeConstruct %567 %567 %567 
                                       f32_4 %569 = OpLoad %9 
                                       f32_3 %570 = OpVectorShuffle %569 %569 0 1 2 
                                       f32_3 %571 = OpFMul %568 %570 
                                       f32_4 %572 = OpLoad %9 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %9 %573 
                                       f32_4 %574 = OpLoad %87 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                                       f32_4 %576 = OpLoad %35 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 1 2 
                                         f32 %578 = OpDot %575 %577 
                                                      OpStore %27 %578 
                                       f32_4 %579 = OpLoad %87 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                              Uniform f32_4* %581 = OpAccessChain %17 %550 
                                       f32_4 %582 = OpLoad %581 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                         f32 %584 = OpDot %580 %583 
                                Private f32* %585 = OpAccessChain %35 %112 
                                                      OpStore %585 %584 
                                Private f32* %586 = OpAccessChain %35 %112 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpExtInst %1 43 %587 %137 %75 
                                Private f32* %589 = OpAccessChain %35 %112 
                                                      OpStore %589 %588 
                                       f32_4 %591 = OpLoad %87 
                                       f32_3 %592 = OpVectorShuffle %591 %591 0 1 2 
                                       f32_4 %593 = OpLoad %9 
                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
                                         f32 %595 = OpDot %592 %594 
                                                      OpStore %590 %595 
                                         f32 %596 = OpLoad %590 
                                         f32 %597 = OpExtInst %1 43 %596 %137 %75 
                                                      OpStore %590 %597 
                              Uniform f32_4* %598 = OpAccessChain %17 %550 
                                       f32_4 %599 = OpLoad %598 
                                       f32_3 %600 = OpVectorShuffle %599 %599 0 1 2 
                                       f32_4 %601 = OpLoad %9 
                                       f32_3 %602 = OpVectorShuffle %601 %601 0 1 2 
                                         f32 %603 = OpDot %600 %602 
                                Private f32* %604 = OpAccessChain %9 %112 
                                                      OpStore %604 %603 
                                Private f32* %605 = OpAccessChain %9 %112 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpExtInst %1 43 %606 %137 %75 
                                Private f32* %608 = OpAccessChain %9 %112 
                                                      OpStore %608 %607 
                                Private f32* %610 = OpAccessChain %9 %112 
                                         f32 %611 = OpLoad %610 
                                Private f32* %612 = OpAccessChain %9 %112 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpFMul %611 %613 
                                Private f32* %615 = OpAccessChain %609 %112 
                                                      OpStore %615 %614 
                                       f32_3 %616 = OpLoad %609 
                                       f32_2 %617 = OpVectorShuffle %616 %616 0 0 
                                         f32 %618 = OpLoad %69 
                                       f32_2 %619 = OpCompositeConstruct %618 %618 
                                         f32 %620 = OpDot %617 %619 
                                Private f32* %621 = OpAccessChain %609 %112 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %609 %112 
                                         f32 %623 = OpLoad %622 
                                         f32 %625 = OpFAdd %623 %624 
                                Private f32* %626 = OpAccessChain %609 %112 
                                                      OpStore %626 %625 
                                Private f32* %628 = OpAccessChain %35 %112 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFNegate %629 
                                         f32 %631 = OpFAdd %630 %75 
                                                      OpStore %627 %631 
                                         f32 %633 = OpLoad %627 
                                         f32 %634 = OpLoad %627 
                                         f32 %635 = OpFMul %633 %634 
                                                      OpStore %632 %635 
                                         f32 %636 = OpLoad %632 
                                         f32 %637 = OpLoad %632 
                                         f32 %638 = OpFMul %636 %637 
                                                      OpStore %632 %638 
                                         f32 %639 = OpLoad %627 
                                         f32 %640 = OpLoad %632 
                                         f32 %641 = OpFMul %639 %640 
                                                      OpStore %627 %641 
                                Private f32* %642 = OpAccessChain %609 %112 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpLoad %627 
                                         f32 %645 = OpFMul %643 %644 
                                         f32 %646 = OpFAdd %645 %75 
                                                      OpStore %627 %646 
                                         f32 %647 = OpLoad %27 
                                         f32 %648 = OpExtInst %1 4 %647 
                                         f32 %649 = OpFNegate %648 
                                         f32 %650 = OpFAdd %649 %75 
                                                      OpStore %632 %650 
                                         f32 %651 = OpLoad %632 
                                         f32 %652 = OpLoad %632 
                                         f32 %653 = OpFMul %651 %652 
                                                      OpStore %293 %653 
                                         f32 %654 = OpLoad %293 
                                         f32 %655 = OpLoad %293 
                                         f32 %656 = OpFMul %654 %655 
                                                      OpStore %293 %656 
                                         f32 %657 = OpLoad %632 
                                         f32 %658 = OpLoad %293 
                                         f32 %659 = OpFMul %657 %658 
                                                      OpStore %632 %659 
                                Private f32* %660 = OpAccessChain %609 %112 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %632 
                                         f32 %663 = OpFMul %661 %662 
                                         f32 %664 = OpFAdd %663 %75 
                                Private f32* %665 = OpAccessChain %609 %112 
                                                      OpStore %665 %664 
                                Private f32* %666 = OpAccessChain %609 %112 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpLoad %627 
                                         f32 %669 = OpFMul %667 %668 
                                Private f32* %670 = OpAccessChain %609 %112 
                                                      OpStore %670 %669 
                                         f32 %671 = OpLoad %69 
                                         f32 %672 = OpLoad %69 
                                         f32 %673 = OpFMul %671 %672 
                                                      OpStore %627 %673 
                                         f32 %674 = OpLoad %627 
                                         f32 %676 = OpExtInst %1 40 %674 %675 
                                                      OpStore %627 %676 
                                         f32 %677 = OpLoad %627 
                                         f32 %678 = OpFNegate %677 
                                         f32 %679 = OpFAdd %678 %75 
                                                      OpStore %69 %679 
                                         f32 %680 = OpLoad %27 
                                         f32 %681 = OpExtInst %1 4 %680 
                                         f32 %682 = OpLoad %69 
                                         f32 %683 = OpFMul %681 %682 
                                         f32 %684 = OpLoad %627 
                                         f32 %685 = OpFAdd %683 %684 
                                                      OpStore %293 %685 
                                Private f32* %686 = OpAccessChain %35 %112 
                                         f32 %687 = OpLoad %686 
                                         f32 %688 = OpLoad %69 
                                         f32 %689 = OpFMul %687 %688 
                                         f32 %690 = OpLoad %627 
                                         f32 %691 = OpFAdd %689 %690 
                                                      OpStore %69 %691 
                                         f32 %692 = OpLoad %27 
                                         f32 %693 = OpExtInst %1 4 %692 
                                         f32 %694 = OpLoad %69 
                                         f32 %695 = OpFMul %693 %694 
                                                      OpStore %27 %695 
                                Private f32* %696 = OpAccessChain %35 %112 
                                         f32 %697 = OpLoad %696 
                                         f32 %698 = OpLoad %293 
                                         f32 %699 = OpFMul %697 %698 
                                         f32 %700 = OpLoad %27 
                                         f32 %701 = OpFAdd %699 %700 
                                                      OpStore %27 %701 
                                         f32 %702 = OpLoad %27 
                                         f32 %704 = OpFAdd %702 %703 
                                                      OpStore %27 %704 
                                         f32 %706 = OpLoad %27 
                                         f32 %707 = OpFDiv %705 %706 
                                                      OpStore %27 %707 
                                         f32 %708 = OpLoad %627 
                                         f32 %709 = OpLoad %627 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %69 %710 
                                         f32 %711 = OpLoad %590 
                                         f32 %712 = OpLoad %69 
                                         f32 %713 = OpFMul %711 %712 
                                         f32 %714 = OpLoad %590 
                                         f32 %715 = OpFNegate %714 
                                         f32 %716 = OpFAdd %713 %715 
                                                      OpStore %293 %716 
                                         f32 %717 = OpLoad %293 
                                         f32 %718 = OpLoad %590 
                                         f32 %719 = OpFMul %717 %718 
                                         f32 %720 = OpFAdd %719 %75 
                                                      OpStore %590 %720 
                                         f32 %721 = OpLoad %69 
                                         f32 %723 = OpFMul %721 %722 
                                                      OpStore %69 %723 
                                         f32 %724 = OpLoad %590 
                                         f32 %725 = OpLoad %590 
                                         f32 %726 = OpFMul %724 %725 
                                         f32 %728 = OpFAdd %726 %727 
                                                      OpStore %590 %728 
                                         f32 %729 = OpLoad %69 
                                         f32 %730 = OpLoad %590 
                                         f32 %731 = OpFDiv %729 %730 
                                                      OpStore %590 %731 
                                         f32 %732 = OpLoad %27 
                                         f32 %733 = OpLoad %590 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %609 %126 
                                                      OpStore %735 %734 
                                       f32_4 %736 = OpLoad %35 
                                       f32_2 %737 = OpVectorShuffle %736 %736 0 0 
                                       f32_3 %738 = OpLoad %609 
                                       f32_2 %739 = OpVectorShuffle %738 %738 0 2 
                                       f32_2 %740 = OpFMul %737 %739 
                                       f32_3 %741 = OpLoad %609 
                                       f32_3 %742 = OpVectorShuffle %741 %740 3 1 4 
                                                      OpStore %609 %742 
                                Private f32* %743 = OpAccessChain %609 %126 
                                         f32 %744 = OpLoad %743 
                                         f32 %746 = OpFMul %744 %745 
                                                      OpStore %27 %746 
                                         f32 %747 = OpLoad %27 
                                         f32 %748 = OpExtInst %1 40 %747 %137 
                                                      OpStore %27 %748 
                                         f32 %749 = OpLoad %627 
                                         f32 %750 = OpLoad %627 
                                         f32 %751 = OpFMul %749 %750 
                                         f32 %752 = OpFAdd %751 %75 
                                                      OpStore %627 %752 
                                         f32 %753 = OpLoad %627 
                                         f32 %754 = OpFDiv %75 %753 
                                                      OpStore %627 %754 
                                       f32_4 %755 = OpLoad %106 
                                       f32_3 %756 = OpVectorShuffle %755 %755 0 1 2 
                                       f32_4 %757 = OpLoad %106 
                                       f32_3 %758 = OpVectorShuffle %757 %757 0 1 2 
                                         f32 %759 = OpDot %756 %758 
                                Private f32* %760 = OpAccessChain %35 %112 
                                                      OpStore %760 %759 
                                Private f32* %762 = OpAccessChain %35 %112 
                                         f32 %763 = OpLoad %762 
                                        bool %764 = OpFOrdNotEqual %763 %137 
                                                      OpStore %761 %764 
                                        bool %765 = OpLoad %761 
                                         f32 %766 = OpSelect %765 %75 %137 
                                Private f32* %767 = OpAccessChain %35 %112 
                                                      OpStore %767 %766 
                                         f32 %768 = OpLoad %27 
                                Private f32* %769 = OpAccessChain %35 %112 
                                         f32 %770 = OpLoad %769 
                                         f32 %771 = OpFMul %768 %770 
                                                      OpStore %27 %771 
                                         f32 %772 = OpLoad %77 
                                         f32 %773 = OpFNegate %772 
                                Uniform f32* %774 = OpAccessChain %17 %70 
                                         f32 %775 = OpLoad %774 
                                         f32 %776 = OpFAdd %773 %775 
                                Private f32* %777 = OpAccessChain %35 %112 
                                                      OpStore %777 %776 
                                Private f32* %778 = OpAccessChain %35 %112 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFAdd %779 %75 
                                Private f32* %781 = OpAccessChain %35 %112 
                                                      OpStore %781 %780 
                                Private f32* %782 = OpAccessChain %35 %112 
                                         f32 %783 = OpLoad %782 
                                         f32 %784 = OpExtInst %1 43 %783 %137 %75 
                                Private f32* %785 = OpAccessChain %35 %112 
                                                      OpStore %785 %784 
                              Uniform f32_4* %787 = OpAccessChain %17 %786 
                                       f32_4 %788 = OpLoad %787 
                                       f32_3 %789 = OpVectorShuffle %788 %788 0 1 2 
                                       f32_3 %790 = OpLoad %609 
                                       f32_3 %791 = OpVectorShuffle %790 %790 0 0 0 
                                       f32_3 %792 = OpFMul %789 %791 
                                       f32_4 %793 = OpLoad %99 
                                       f32_3 %794 = OpVectorShuffle %793 %793 0 1 2 
                                       f32_3 %795 = OpFAdd %792 %794 
                                       f32_4 %796 = OpLoad %87 
                                       f32_4 %797 = OpVectorShuffle %796 %795 4 5 6 3 
                                                      OpStore %87 %797 
                                         f32 %798 = OpLoad %27 
                                       f32_3 %799 = OpCompositeConstruct %798 %798 %798 
                              Uniform f32_4* %800 = OpAccessChain %17 %786 
                                       f32_4 %801 = OpLoad %800 
                                       f32_3 %802 = OpVectorShuffle %801 %801 0 1 2 
                                       f32_3 %803 = OpFMul %799 %802 
                                       f32_4 %804 = OpLoad %99 
                                       f32_4 %805 = OpVectorShuffle %804 %803 4 5 6 3 
                                                      OpStore %99 %805 
                                Private f32* %806 = OpAccessChain %9 %112 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFNegate %807 
                                         f32 %809 = OpFAdd %808 %75 
                                Private f32* %810 = OpAccessChain %9 %112 
                                                      OpStore %810 %809 
                                Private f32* %811 = OpAccessChain %9 %112 
                                         f32 %812 = OpLoad %811 
                                Private f32* %813 = OpAccessChain %9 %112 
                                         f32 %814 = OpLoad %813 
                                         f32 %815 = OpFMul %812 %814 
                                Private f32* %816 = OpAccessChain %609 %112 
                                                      OpStore %816 %815 
                                Private f32* %817 = OpAccessChain %609 %112 
                                         f32 %818 = OpLoad %817 
                                Private f32* %819 = OpAccessChain %609 %112 
                                         f32 %820 = OpLoad %819 
                                         f32 %821 = OpFMul %818 %820 
                                Private f32* %822 = OpAccessChain %609 %112 
                                                      OpStore %822 %821 
                                Private f32* %823 = OpAccessChain %9 %112 
                                         f32 %824 = OpLoad %823 
                                Private f32* %825 = OpAccessChain %609 %112 
                                         f32 %826 = OpLoad %825 
                                         f32 %827 = OpFMul %824 %826 
                                Private f32* %828 = OpAccessChain %9 %112 
                                                      OpStore %828 %827 
                                       f32_4 %829 = OpLoad %106 
                                       f32_3 %830 = OpVectorShuffle %829 %829 0 1 2 
                                       f32_3 %831 = OpFNegate %830 
                                       f32_3 %833 = OpFAdd %831 %832 
                                                      OpStore %178 %833 
                                       f32_3 %834 = OpLoad %178 
                                       f32_4 %835 = OpLoad %9 
                                       f32_3 %836 = OpVectorShuffle %835 %835 0 0 0 
                                       f32_3 %837 = OpFMul %834 %836 
                                       f32_4 %838 = OpLoad %106 
                                       f32_3 %839 = OpVectorShuffle %838 %838 0 1 2 
                                       f32_3 %840 = OpFAdd %837 %839 
                                       f32_4 %841 = OpLoad %9 
                                       f32_4 %842 = OpVectorShuffle %841 %840 4 5 2 6 
                                                      OpStore %9 %842 
                                       f32_4 %843 = OpLoad %9 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 3 
                                       f32_4 %845 = OpLoad %99 
                                       f32_3 %846 = OpVectorShuffle %845 %845 0 1 2 
                                       f32_3 %847 = OpFMul %844 %846 
                                       f32_4 %848 = OpLoad %9 
                                       f32_4 %849 = OpVectorShuffle %848 %847 4 5 2 6 
                                                      OpStore %9 %849 
                                       f32_3 %850 = OpLoad %61 
                                       f32_4 %851 = OpLoad %87 
                                       f32_3 %852 = OpVectorShuffle %851 %851 0 1 2 
                                       f32_3 %853 = OpFMul %850 %852 
                                       f32_4 %854 = OpLoad %9 
                                       f32_3 %855 = OpVectorShuffle %854 %854 0 1 3 
                                       f32_3 %856 = OpFAdd %853 %855 
                                       f32_4 %857 = OpLoad %9 
                                       f32_4 %858 = OpVectorShuffle %857 %856 4 5 2 6 
                                                      OpStore %9 %858 
                                       f32_3 %859 = OpLoad %166 
                                         f32 %860 = OpLoad %627 
                                       f32_3 %861 = OpCompositeConstruct %860 %860 %860 
                                       f32_3 %862 = OpFMul %859 %861 
                                                      OpStore %61 %862 
                                       f32_4 %863 = OpLoad %106 
                                       f32_3 %864 = OpVectorShuffle %863 %863 0 1 2 
                                       f32_3 %865 = OpFNegate %864 
                                       f32_4 %866 = OpLoad %35 
                                       f32_3 %867 = OpVectorShuffle %866 %866 0 0 0 
                                       f32_3 %868 = OpFAdd %865 %867 
                                       f32_4 %869 = OpLoad %35 
                                       f32_4 %870 = OpVectorShuffle %869 %868 4 5 2 6 
                                                      OpStore %35 %870 
                                         f32 %871 = OpLoad %632 
                                       f32_3 %872 = OpCompositeConstruct %871 %871 %871 
                                       f32_4 %873 = OpLoad %35 
                                       f32_3 %874 = OpVectorShuffle %873 %873 0 1 3 
                                       f32_3 %875 = OpFMul %872 %874 
                                       f32_4 %876 = OpLoad %106 
                                       f32_3 %877 = OpVectorShuffle %876 %876 0 1 2 
                                       f32_3 %878 = OpFAdd %875 %877 
                                       f32_4 %879 = OpLoad %35 
                                       f32_4 %880 = OpVectorShuffle %879 %878 4 5 6 3 
                                                      OpStore %35 %880 
                                       f32_3 %881 = OpLoad %61 
                                       f32_4 %882 = OpLoad %35 
                                       f32_3 %883 = OpVectorShuffle %882 %882 0 1 2 
                                       f32_3 %884 = OpFMul %881 %883 
                                       f32_4 %885 = OpLoad %9 
                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 3 
                                       f32_3 %887 = OpFAdd %884 %886 
                                       f32_4 %888 = OpLoad %9 
                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 6 3 
                                                      OpStore %9 %889 
                                       f32_3 %890 = OpLoad %44 
                              Uniform f32_4* %891 = OpAccessChain %17 %63 
                                       f32_4 %892 = OpLoad %891 
                                       f32_3 %893 = OpVectorShuffle %892 %892 0 1 2 
                                       f32_3 %894 = OpFMul %890 %893 
                                       f32_4 %895 = OpLoad %9 
                                       f32_3 %896 = OpVectorShuffle %895 %895 0 1 2 
                                       f32_3 %897 = OpFAdd %894 %896 
                                       f32_4 %898 = OpLoad %9 
                                       f32_4 %899 = OpVectorShuffle %898 %897 4 5 6 3 
                                                      OpStore %9 %899 
                                         f32 %902 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %904 = OpAccessChain %17 %903 %119 
                                         f32 %905 = OpLoad %904 
                                         f32 %906 = OpFDiv %902 %905 
                                                      OpStore %27 %906 
                                         f32 %907 = OpLoad %27 
                                         f32 %908 = OpFNegate %907 
                                         f32 %909 = OpFAdd %908 %75 
                                                      OpStore %27 %909 
                                         f32 %910 = OpLoad %27 
                                Uniform f32* %911 = OpAccessChain %17 %903 %126 
                                         f32 %912 = OpLoad %911 
                                         f32 %913 = OpFMul %910 %912 
                                                      OpStore %27 %913 
                                         f32 %914 = OpLoad %27 
                                         f32 %915 = OpExtInst %1 40 %914 %137 
                                                      OpStore %27 %915 
                                         f32 %916 = OpLoad %27 
                                Uniform f32* %918 = OpAccessChain %17 %917 %126 
                                         f32 %919 = OpLoad %918 
                                         f32 %920 = OpFMul %916 %919 
                                Uniform f32* %921 = OpAccessChain %17 %917 %104 
                                         f32 %922 = OpLoad %921 
                                         f32 %923 = OpFAdd %920 %922 
                                                      OpStore %27 %923 
                                         f32 %924 = OpLoad %27 
                                         f32 %925 = OpExtInst %1 43 %924 %137 %75 
                                                      OpStore %27 %925 
                                       f32_4 %926 = OpLoad %9 
                                       f32_3 %927 = OpVectorShuffle %926 %926 0 1 2 
                              Uniform f32_4* %929 = OpAccessChain %17 %928 
                                       f32_4 %930 = OpLoad %929 
                                       f32_3 %931 = OpVectorShuffle %930 %930 0 1 2 
                                       f32_3 %932 = OpFNegate %931 
                                       f32_3 %933 = OpFAdd %927 %932 
                                       f32_4 %934 = OpLoad %9 
                                       f32_4 %935 = OpVectorShuffle %934 %933 4 5 6 3 
                                                      OpStore %9 %935 
                                         f32 %938 = OpLoad %27 
                                       f32_3 %939 = OpCompositeConstruct %938 %938 %938 
                                       f32_4 %940 = OpLoad %9 
                                       f32_3 %941 = OpVectorShuffle %940 %940 0 1 2 
                                       f32_3 %942 = OpFMul %939 %941 
                              Uniform f32_4* %943 = OpAccessChain %17 %928 
                                       f32_4 %944 = OpLoad %943 
                                       f32_3 %945 = OpVectorShuffle %944 %944 0 1 2 
                                       f32_3 %946 = OpFAdd %942 %945 
                                       f32_4 %947 = OpLoad %937 
                                       f32_4 %948 = OpVectorShuffle %947 %946 4 5 6 3 
                                                      OpStore %937 %948 
                                 Output f32* %950 = OpAccessChain %937 %104 
                                                      OpStore %950 %75 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(4) uniform  sampler2D _posTex;
UNITY_LOCATION(5) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    gl_Position = u_xlat2;
    vs_TEXCOORD4 = u_xlat2.z;
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0.x * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat37 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat38 = (-u_xlat37) + u_xlat38;
    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat38 + u_xlat37;
    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat38 = (-u_xlat4.x) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat38 + u_xlat4.x;
    u_xlat38 = (-_Glossiness) + 1.0;
    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat39 = u_xlat39 + u_xlat39;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat37) * _LightColor0.xyz;
    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat37 = inversesqrt(u_xlat37);
        u_xlat6.xyz = vec3(u_xlat37) * u_xlat4.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat37 = min(u_xlat7.y, u_xlat7.x);
        u_xlat37 = min(u_xlat7.z, u_xlat37);
        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat37 = (-u_xlat38) * 0.699999988 + 1.70000005;
    u_xlat37 = u_xlat37 * u_xlat38;
    u_xlat37 = u_xlat37 * 6.0;
    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat37);
    u_xlat39 = u_xlat6.w + -1.0;
    u_xlat39 = unity_SpecCube0_HDR.w * u_xlat39 + 1.0;
    u_xlat39 = log2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.y;
    u_xlat39 = exp2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat39);
    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = inversesqrt(u_xlat40);
            u_xlat8.xyz = vec3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat37);
        u_xlat37 = u_xlat4.w + -1.0;
        u_xlat37 = unity_SpecCube1_HDR.w * u_xlat37 + 1.0;
        u_xlat37 = log2(u_xlat37);
        u_xlat37 = u_xlat37 * unity_SpecCube1_HDR.y;
        u_xlat37 = exp2(u_xlat37);
        u_xlat37 = u_xlat37 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat37);
        u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz + (-u_xlat4.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
    }
    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat4.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
    u_xlat6.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat37 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat37) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat38));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat39 = u_xlat25 * u_xlat25;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat25 = u_xlat25 * u_xlat39;
    u_xlat12.x = u_xlat12.x * u_xlat25 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat38 * u_xlat38;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat38 = (-u_xlat24) + 1.0;
    u_xlat39 = abs(u_xlat36) * u_xlat38 + u_xlat24;
    u_xlat38 = u_xlat1.x * u_xlat38 + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat38;
    u_xlat36 = u_xlat1.x * u_xlat39 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat38 = u_xlat24 * u_xlat24;
    u_xlat39 = u_xlat13 * u_xlat38 + (-u_xlat13);
    u_xlat13 = u_xlat39 * u_xlat13 + 1.0;
    u_xlat38 = u_xlat38 * 0.318309873;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat13 = u_xlat38 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat12.z = u_xlat36 * 3.14159274;
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat36 = max(u_xlat12.z, 0.0);
    u_xlat24 = u_xlat24 * u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat36 * u_xlat1.x;
    u_xlat1.x = (-u_xlat37) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat8.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat24);
    u_xlat1.xyw = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyw + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    u_xlat36 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 419
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %233 %238 %242 %248 %249 %384 %413 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %231 0 BuiltIn 231 
                                                      OpMemberDecorate %231 1 BuiltIn 231 
                                                      OpMemberDecorate %231 2 BuiltIn 231 
                                                      OpDecorate %231 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 238 
                                                      OpDecorate vs_TEXCOORD5 Location 242 
                                                      OpDecorate vs_TEXCOORD0 Location 248 
                                                      OpDecorate %249 Location 249 
                                                      OpDecorate vs_TEXCOORD1 Location 384 
                                                      OpDecorate vs_TEXCOORD6 Location 413 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 8 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 9 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 7 
                                         i32 %119 = OpConstant 6 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 2 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %205 = OpConstant 4 
                                             %230 = OpTypeArray %6 %20 
                                             %231 = OpTypeStruct %7 %6 %230 
                                             %232 = OpTypePointer Output %231 
        Output struct {f32_4; f32; f32[1];}* %233 = OpVariable Output 
                                             %235 = OpTypePointer Output %7 
                                             %237 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %239 = OpConstant 2 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %247 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %249 = OpVariable Input 
                                         i32 %252 = OpConstant 10 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_2 %276 = OpConstantComposite %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_2 %279 = OpConstantComposite %278 %278 
                                Private f32* %283 = OpVariable Private 
                                         f32 %292 = OpConstant 3.674022E-40 
                                         f32 %293 = OpConstant 3.674022E-40 
                                       f32_2 %294 = OpConstantComposite %292 %293 
                                       f32_2 %296 = OpConstantComposite %56 %56 
                                       f32_3 %317 = OpConstantComposite %56 %56 %56 
                                             %329 = OpTypeBool 
                                             %330 = OpTypePointer Private %329 
                               Private bool* %331 = OpVariable Private 
                                       f32_4 %332 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %333 = OpConstant 5 
                                             %337 = OpTypeVector %329 4 
                                             %341 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                       f32_2 %398 = OpConstantComposite %293 %293 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %342 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %18 %167 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %166 %171 
                                                      OpStore %164 %172 
                              Uniform f32_4* %173 = OpAccessChain %18 %167 %19 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %114 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %164 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %164 %179 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %167 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %18 %205 %168 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpFMul %204 %207 
                                                      OpStore %114 %208 
                              Uniform f32_4* %209 = OpAccessChain %18 %205 %19 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %164 
                                       f32_4 %212 = OpVectorShuffle %211 %211 0 0 0 0 
                                       f32_4 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %114 
                                       f32_4 %215 = OpFAdd %213 %214 
                                                      OpStore %114 %215 
                              Uniform f32_4* %216 = OpAccessChain %18 %205 %167 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %164 
                                       f32_4 %219 = OpVectorShuffle %218 %218 2 2 2 2 
                                       f32_4 %220 = OpFMul %217 %219 
                                       f32_4 %221 = OpLoad %114 
                                       f32_4 %222 = OpFAdd %220 %221 
                                                      OpStore %114 %222 
                              Uniform f32_4* %223 = OpAccessChain %18 %205 %188 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %164 
                                       f32_4 %226 = OpVectorShuffle %225 %225 3 3 3 3 
                                       f32_4 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %114 
                                       f32_4 %229 = OpFAdd %227 %228 
                                                      OpStore %114 %229 
                                       f32_4 %234 = OpLoad %114 
                               Output f32_4* %236 = OpAccessChain %233 %19 
                                                      OpStore %236 %234 
                                Private f32* %240 = OpAccessChain %114 %239 
                                         f32 %241 = OpLoad %240 
                                                      OpStore vs_TEXCOORD4 %241 
                                       f32_4 %243 = OpLoad %114 
                                       f32_2 %244 = OpVectorShuffle %243 %243 2 3 
                                       f32_4 %245 = OpLoad vs_TEXCOORD5 
                                       f32_4 %246 = OpVectorShuffle %245 %244 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %246 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 1 
                              Uniform f32_4* %253 = OpAccessChain %18 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_2 %256 = OpFMul %251 %255 
                              Uniform f32_4* %257 = OpAccessChain %18 %252 
                                       f32_4 %258 = OpLoad %257 
                                       f32_2 %259 = OpVectorShuffle %258 %258 2 3 
                                       f32_2 %260 = OpFAdd %256 %259 
                                                      OpStore vs_TEXCOORD0 %260 
                                Private f32* %261 = OpAccessChain %76 %20 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpExtInst %1 8 %262 
                                Private f32* %264 = OpAccessChain %164 %29 
                                                      OpStore %264 %263 
                                Private f32* %265 = OpAccessChain %164 %29 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFNegate %266 
                                         f32 %268 = OpFMul %267 %146 
                                Private f32* %269 = OpAccessChain %76 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFAdd %268 %270 
                                Private f32* %272 = OpAccessChain %164 %20 
                                                      OpStore %272 %271 
                                       f32_4 %273 = OpLoad %164 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_2 %277 = OpFMul %274 %276 
                                       f32_2 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %76 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 2 3 
                                                      OpStore %76 %282 
                                       f32_4 %284 = OpLoad %76 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 1 
                                       f32_4 %286 = OpLoad %76 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                         f32 %288 = OpDot %285 %287 
                                                      OpStore %283 %288 
                                         f32 %289 = OpLoad %283 
                                       f32_2 %290 = OpCompositeConstruct %289 %289 
                                       f32_2 %291 = OpFNegate %290 
                                       f32_2 %295 = OpFMul %291 %294 
                                       f32_2 %297 = OpFAdd %295 %296 
                                       f32_4 %298 = OpLoad %164 
                                       f32_4 %299 = OpVectorShuffle %298 %297 0 1 4 5 
                                                      OpStore %164 %299 
                                Private f32* %300 = OpAccessChain %164 %239 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpExtInst %1 31 %301 
                                                      OpStore %283 %302 
                                       f32_4 %303 = OpLoad %76 
                                       f32_2 %304 = OpVectorShuffle %303 %303 0 1 
                                         f32 %305 = OpLoad %283 
                                       f32_2 %306 = OpCompositeConstruct %305 %305 
                                       f32_2 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %164 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 2 3 
                                                      OpStore %164 %309 
                                       f32_4 %310 = OpLoad %164 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 3 
                                       f32_3 %312 = OpExtInst %1 40 %311 %110 
                                       f32_4 %313 = OpLoad %76 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %76 %314 
                                       f32_4 %315 = OpLoad %76 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %318 = OpExtInst %1 37 %316 %317 
                                       f32_4 %319 = OpLoad %76 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %76 %320 
                                Private f32* %321 = OpAccessChain %76 %29 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                Private f32* %324 = OpAccessChain %76 %154 
                                                      OpStore %324 %323 
                                Private f32* %325 = OpAccessChain %9 %29 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFNegate %326 
                                Private f32* %328 = OpAccessChain %9 %154 
                                                      OpStore %328 %327 
                                Uniform f32* %334 = OpAccessChain %18 %333 
                                         f32 %335 = OpLoad %334 
                                       f32_4 %336 = OpCompositeConstruct %335 %335 %335 %335 
                                      bool_4 %338 = OpFOrdNotEqual %332 %336 
                                        bool %339 = OpAny %338 
                                                      OpStore %331 %339 
                                        bool %340 = OpLoad %331 
                                                      OpSelectionMerge %344 None 
                                                      OpBranchConditional %340 %343 %347 
                                             %343 = OpLabel 
                                       f32_4 %345 = OpLoad %76 
                                       f32_3 %346 = OpVectorShuffle %345 %345 3 2 1 
                                                      OpStore %342 %346 
                                                      OpBranch %344 
                                             %347 = OpLabel 
                                       f32_4 %348 = OpLoad %9 
                                       f32_3 %349 = OpVectorShuffle %348 %348 3 1 2 
                                                      OpStore %342 %349 
                                                      OpBranch %344 
                                             %344 = OpLabel 
                                       f32_3 %350 = OpLoad %342 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %9 %352 
                                       f32_4 %353 = OpLoad %9 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                              Uniform f32_4* %355 = OpAccessChain %18 %188 %19 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                         f32 %358 = OpDot %354 %357 
                                Private f32* %359 = OpAccessChain %76 %29 
                                                      OpStore %359 %358 
                                       f32_4 %360 = OpLoad %9 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                              Uniform f32_4* %362 = OpAccessChain %18 %188 %168 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                         f32 %365 = OpDot %361 %364 
                                Private f32* %366 = OpAccessChain %76 %20 
                                                      OpStore %366 %365 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                              Uniform f32_4* %369 = OpAccessChain %18 %188 %167 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                         f32 %372 = OpDot %368 %371 
                                Private f32* %373 = OpAccessChain %76 %239 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %76 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %76 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                         f32 %378 = OpDot %375 %377 
                                Private f32* %379 = OpAccessChain %9 %29 
                                                      OpStore %379 %378 
                                Private f32* %380 = OpAccessChain %9 %29 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpExtInst %1 32 %381 
                                Private f32* %383 = OpAccessChain %9 %29 
                                                      OpStore %383 %382 
                                       f32_4 %385 = OpLoad %9 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 0 0 
                                       f32_4 %387 = OpLoad %76 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFMul %386 %388 
                                                      OpStore vs_TEXCOORD1 %389 
                                Private f32* %390 = OpAccessChain %114 %20 
                                         f32 %391 = OpLoad %390 
                                Uniform f32* %392 = OpAccessChain %18 %168 %29 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %9 %29 
                                                      OpStore %395 %394 
                                       f32_4 %396 = OpLoad %114 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 3 
                                       f32_2 %399 = OpFMul %397 %398 
                                       f32_4 %400 = OpLoad %76 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 1 5 3 
                                                      OpStore %76 %401 
                                Private f32* %402 = OpAccessChain %9 %29 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %403 %293 
                                Private f32* %405 = OpAccessChain %76 %154 
                                                      OpStore %405 %404 
                                       f32_4 %406 = OpLoad %76 
                                       f32_2 %407 = OpVectorShuffle %406 %406 2 2 
                                       f32_4 %408 = OpLoad %76 
                                       f32_2 %409 = OpVectorShuffle %408 %408 0 3 
                                       f32_2 %410 = OpFAdd %407 %409 
                                       f32_4 %411 = OpLoad vs_TEXCOORD5 
                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %412 
                                                      OpStore vs_TEXCOORD6 %332 
                                 Output f32* %414 = OpAccessChain %233 %19 %20 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFNegate %415 
                                 Output f32* %417 = OpAccessChain %233 %19 %20 
                                                      OpStore %417 %416 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 992
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %60 %136 %170 %942 %977 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpMemberDecorate %18 17 Offset 18 
                                                      OpMemberDecorate %18 18 Offset 18 
                                                      OpMemberDecorate %18 19 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate vs_TEXCOORD5 Location 136 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate %337 DescriptorSet 337 
                                                      OpDecorate %337 Binding 337 
                                                      OpDecorate %339 DescriptorSet 339 
                                                      OpDecorate %339 Binding 339 
                                                      OpDecorate %491 DescriptorSet 491 
                                                      OpDecorate %491 Binding 491 
                                                      OpDecorate vs_TEXCOORD4 Location 942 
                                                      OpDecorate %977 Location 977 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %7 %7 %17 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %10 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_4* %38 = OpVariable Private 
                                              %46 = OpTypePointer Private %10 
                               Private f32_3* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypePointer UniformConstant %48 
         UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampler 
                                              %53 = OpTypePointer UniformConstant %52 
                     UniformConstant sampler* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampledImage %48 
                                              %58 = OpTypeVector %6 2 
                                              %59 = OpTypePointer Input %58 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %64 = OpVariable Private 
                                          i32 %66 = OpConstant 19 
                                              %67 = OpTypePointer Uniform %7 
                               Private f32_4* %72 = OpVariable Private 
                                          i32 %73 = OpConstant 5 
                                          u32 %74 = OpConstant 2 
                                              %75 = OpTypePointer Uniform %6 
                                          u32 %78 = OpConstant 0 
                                          i32 %80 = OpConstant 1 
                                          u32 %83 = OpConstant 1 
                                          i32 %85 = OpConstant 2 
                                 Private f32* %89 = OpVariable Private 
                                          i32 %96 = OpConstant 4 
                                Private f32* %104 = OpVariable Private 
                                         u32 %116 = OpConstant 3 
                                         i32 %124 = OpConstant 3 
                                         f32 %132 = OpConstant 3.674022E-40 
                                         f32 %133 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                Private f32* %153 = OpVariable Private 
                                         i32 %162 = OpConstant 17 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %187 = OpVariable Private 
                                         i32 %190 = OpConstant 16 
                                             %195 = OpTypeBool 
                                             %196 = OpTypePointer Private %195 
                               Private bool* %197 = OpVariable Private 
                                         i32 %198 = OpConstant 10 
                              Private f32_4* %212 = OpVariable Private 
                              Private f32_3* %220 = OpVariable Private 
                                         i32 %223 = OpConstant 8 
                              Private f32_3* %232 = OpVariable Private 
                                         i32 %235 = OpConstant 9 
                                             %244 = OpTypeVector %195 3 
                                             %245 = OpTypePointer Private %244 
                             Private bool_3* %246 = OpVariable Private 
                                       f32_4 %247 = OpConstantComposite %132 %132 %132 %132 
                                             %250 = OpTypeVector %195 4 
                                             %253 = OpTypePointer Function %10 
                                             %258 = OpTypePointer Function %6 
                                         f32 %325 = OpConstant 3.674022E-40 
                                         f32 %327 = OpConstant 3.674022E-40 
                                         f32 %333 = OpConstant 3.674022E-40 
                                             %335 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %336 = OpTypePointer UniformConstant %335 
      UniformConstant read_only TextureCube* %337 = OpVariable UniformConstant 
                    UniformConstant sampler* %339 = OpVariable UniformConstant 
                                             %341 = OpTypeSampledImage %335 
                                         f32 %349 = OpConstant 3.674022E-40 
                                         i32 %351 = OpConstant 11 
                               Private bool* %374 = OpVariable Private 
                                         f32 %377 = OpConstant 3.674022E-40 
                                         i32 %382 = OpConstant 14 
                                Private f32* %389 = OpVariable Private 
                              Private f32_3* %402 = OpVariable Private 
                                         i32 %405 = OpConstant 12 
                              Private f32_3* %413 = OpVariable Private 
                                         i32 %416 = OpConstant 13 
                             Private bool_3* %424 = OpVariable Private 
      UniformConstant read_only TextureCube* %491 = OpVariable UniformConstant 
                                         i32 %502 = OpConstant 15 
                                         f32 %563 = OpConstant 3.674022E-40 
                                       f32_3 %564 = OpConstantComposite %563 %563 %563 
                                         i32 %568 = OpConstant 18 
                                         f32 %583 = OpConstant 3.674022E-40 
                                       f32_3 %584 = OpConstantComposite %583 %583 %583 
                                         f32 %591 = OpConstant 3.674022E-40 
                                         f32 %615 = OpConstant 3.674022E-40 
                                Private f32* %642 = OpVariable Private 
                              Private f32_3* %661 = OpVariable Private 
                                         f32 %676 = OpConstant 3.674022E-40 
                                Private f32* %679 = OpVariable Private 
                                Private f32* %684 = OpVariable Private 
                                         f32 %727 = OpConstant 3.674022E-40 
                                         f32 %755 = OpConstant 3.674022E-40 
                                         f32 %757 = OpConstant 3.674022E-40 
                                         f32 %774 = OpConstant 3.674022E-40 
                                         f32 %779 = OpConstant 3.674022E-40 
                                         f32 %797 = OpConstant 3.674022E-40 
                               Private bool* %813 = OpVariable Private 
                                       f32_3 %874 = OpConstantComposite %133 %133 %133 
                                             %941 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %957 = OpConstant 7 
                                         i32 %968 = OpConstant 6 
                                             %976 = OpTypePointer Output %7 
                               Output f32_4* %977 = OpVariable Output 
                                             %989 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %254 = OpVariable Function 
                               Function f32* %259 = OpVariable Function 
                               Function f32* %271 = OpVariable Function 
                               Function f32* %283 = OpVariable Function 
                             Function f32_3* %429 = OpVariable Function 
                               Function f32* %433 = OpVariable Function 
                               Function f32* %445 = OpVariable Function 
                               Function f32* %457 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %14 %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
                                                      OpStore %9 %28 
                                        f32_4 %31 = OpLoad %9 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                          f32 %35 = OpDot %32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                          f32 %37 = OpExtInst %1 32 %36 
                                                      OpStore %30 %37 
                                          f32 %39 = OpLoad %30 
                                        f32_3 %40 = OpCompositeConstruct %39 %39 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %38 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 6 3 
                                                      OpStore %38 %45 
                          read_only Texture2D %51 = OpLoad %50 
                                      sampler %55 = OpLoad %54 
                   read_only Texture2DSampled %57 = OpSampledImage %51 %55 
                                        f32_2 %61 = OpLoad vs_TEXCOORD0 
                                        f32_4 %62 = OpImageSampleImplicitLod %57 %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                                      OpStore %47 %63 
                                        f32_3 %65 = OpLoad %47 
                               Uniform f32_4* %68 = OpAccessChain %20 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                                      OpStore %64 %71 
                                 Uniform f32* %76 = OpAccessChain %20 %73 %22 %74 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %72 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %20 %73 %80 %74 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %84 = OpAccessChain %72 %83 
                                                      OpStore %84 %82 
                                 Uniform f32* %86 = OpAccessChain %20 %73 %85 %74 
                                          f32 %87 = OpLoad %86 
                                 Private f32* %88 = OpAccessChain %72 %74 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %72 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                                      OpStore %89 %94 
                                        f32_3 %95 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %97 = OpAccessChain %20 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpFAdd %95 %100 
                                       f32_4 %102 = OpLoad %72 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %72 %103 
                                       f32_4 %105 = OpLoad %72 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %106 %108 
                                                      OpStore %104 %109 
                                         f32 %110 = OpLoad %104 
                                         f32 %111 = OpExtInst %1 31 %110 
                                                      OpStore %104 %111 
                                         f32 %112 = OpLoad %89 
                                         f32 %113 = OpFNegate %112 
                                         f32 %114 = OpLoad %104 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %104 %115 
                                Uniform f32* %117 = OpAccessChain %20 %96 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpLoad %104 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %121 = OpLoad %89 
                                         f32 %122 = OpFAdd %120 %121 
                                                      OpStore %89 %122 
                                         f32 %123 = OpLoad %89 
                                Uniform f32* %125 = OpAccessChain %20 %124 %74 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFMul %123 %126 
                                Uniform f32* %128 = OpAccessChain %20 %124 %116 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFAdd %127 %129 
                                                      OpStore %89 %130 
                                         f32 %131 = OpLoad %89 
                                         f32 %134 = OpExtInst %1 43 %131 %132 %133 
                                                      OpStore %89 %134 
                                       f32_4 %137 = OpLoad vs_TEXCOORD5 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_4 %139 = OpLoad vs_TEXCOORD5 
                                       f32_2 %140 = OpVectorShuffle %139 %139 3 3 
                                       f32_2 %141 = OpFDiv %138 %140 
                                       f32_4 %142 = OpLoad %72 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %72 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_4 %149 = OpLoad %72 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_4 %151 = OpImageSampleImplicitLod %148 %150 
                                         f32 %152 = OpCompositeExtract %151 0 
                                                      OpStore %104 %152 
                                         f32 %154 = OpLoad %104 
                                         f32 %155 = OpFNegate %154 
                                         f32 %156 = OpFAdd %155 %133 
                                                      OpStore %153 %156 
                                         f32 %157 = OpLoad %89 
                                         f32 %158 = OpLoad %153 
                                         f32 %159 = OpFMul %157 %158 
                                         f32 %160 = OpLoad %104 
                                         f32 %161 = OpFAdd %159 %160 
                                                      OpStore %89 %161 
                                Uniform f32* %163 = OpAccessChain %20 %162 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFNegate %164 
                                         f32 %166 = OpFAdd %165 %133 
                                                      OpStore %104 %166 
                                       f32_4 %167 = OpLoad %38 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFNegate %168 
                                       f32_3 %171 = OpLoad vs_TEXCOORD1 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %153 %172 
                                         f32 %173 = OpLoad %153 
                                         f32 %174 = OpLoad %153 
                                         f32 %175 = OpFAdd %173 %174 
                                                      OpStore %153 %175 
                                       f32_3 %176 = OpLoad vs_TEXCOORD1 
                                         f32 %177 = OpLoad %153 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFMul %176 %179 
                                       f32_4 %181 = OpLoad %38 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFNegate %182 
                                       f32_3 %184 = OpFAdd %180 %183 
                                       f32_4 %185 = OpLoad %72 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %72 %186 
                                         f32 %188 = OpLoad %89 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                              Uniform f32_4* %191 = OpAccessChain %20 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %189 %193 
                                                      OpStore %187 %194 
                                Uniform f32* %199 = OpAccessChain %20 %198 %116 
                                         f32 %200 = OpLoad %199 
                                        bool %201 = OpFOrdLessThan %132 %200 
                                                      OpStore %197 %201 
                                        bool %202 = OpLoad %197 
                                                      OpSelectionMerge %204 None 
                                                      OpBranchConditional %202 %203 %318 
                                             %203 = OpLabel 
                                       f32_4 %205 = OpLoad %72 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %72 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                                      OpStore %89 %209 
                                         f32 %210 = OpLoad %89 
                                         f32 %211 = OpExtInst %1 32 %210 
                                                      OpStore %89 %211 
                                         f32 %213 = OpLoad %89 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_4 %215 = OpLoad %72 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %212 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %212 %219 
                                       f32_3 %221 = OpLoad vs_TEXCOORD2 
                                       f32_3 %222 = OpFNegate %221 
                              Uniform f32_4* %224 = OpAccessChain %20 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpFAdd %222 %226 
                                                      OpStore %220 %227 
                                       f32_3 %228 = OpLoad %220 
                                       f32_4 %229 = OpLoad %212 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFDiv %228 %230 
                                                      OpStore %220 %231 
                                       f32_3 %233 = OpLoad vs_TEXCOORD2 
                                       f32_3 %234 = OpFNegate %233 
                              Uniform f32_4* %236 = OpAccessChain %20 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFAdd %234 %238 
                                                      OpStore %232 %239 
                                       f32_3 %240 = OpLoad %232 
                                       f32_4 %241 = OpLoad %212 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFDiv %240 %242 
                                                      OpStore %232 %243 
                                       f32_4 %248 = OpLoad %212 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 1 2 0 
                                      bool_4 %251 = OpFOrdLessThan %247 %249 
                                      bool_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                                      OpStore %246 %252 
                                       f32_3 %255 = OpLoad %220 
                                                      OpStore %254 %255 
                               Private bool* %256 = OpAccessChain %246 %78 
                                        bool %257 = OpLoad %256 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %257 %260 %264 
                                             %260 = OpLabel 
                                Private f32* %262 = OpAccessChain %220 %78 
                                         f32 %263 = OpLoad %262 
                                                      OpStore %259 %263 
                                                      OpBranch %261 
                                             %264 = OpLabel 
                                Private f32* %265 = OpAccessChain %232 %78 
                                         f32 %266 = OpLoad %265 
                                                      OpStore %259 %266 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                         f32 %267 = OpLoad %259 
                               Function f32* %268 = OpAccessChain %254 %78 
                                                      OpStore %268 %267 
                               Private bool* %269 = OpAccessChain %246 %83 
                                        bool %270 = OpLoad %269 
                                                      OpSelectionMerge %273 None 
                                                      OpBranchConditional %270 %272 %276 
                                             %272 = OpLabel 
                                Private f32* %274 = OpAccessChain %220 %83 
                                         f32 %275 = OpLoad %274 
                                                      OpStore %271 %275 
                                                      OpBranch %273 
                                             %276 = OpLabel 
                                Private f32* %277 = OpAccessChain %232 %83 
                                         f32 %278 = OpLoad %277 
                                                      OpStore %271 %278 
                                                      OpBranch %273 
                                             %273 = OpLabel 
                                         f32 %279 = OpLoad %271 
                               Function f32* %280 = OpAccessChain %254 %83 
                                                      OpStore %280 %279 
                               Private bool* %281 = OpAccessChain %246 %74 
                                        bool %282 = OpLoad %281 
                                                      OpSelectionMerge %285 None 
                                                      OpBranchConditional %282 %284 %288 
                                             %284 = OpLabel 
                                Private f32* %286 = OpAccessChain %220 %74 
                                         f32 %287 = OpLoad %286 
                                                      OpStore %283 %287 
                                                      OpBranch %285 
                                             %288 = OpLabel 
                                Private f32* %289 = OpAccessChain %232 %74 
                                         f32 %290 = OpLoad %289 
                                                      OpStore %283 %290 
                                                      OpBranch %285 
                                             %285 = OpLabel 
                                         f32 %291 = OpLoad %283 
                               Function f32* %292 = OpAccessChain %254 %74 
                                                      OpStore %292 %291 
                                       f32_3 %293 = OpLoad %254 
                                                      OpStore %220 %293 
                                Private f32* %294 = OpAccessChain %220 %83 
                                         f32 %295 = OpLoad %294 
                                Private f32* %296 = OpAccessChain %220 %78 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpExtInst %1 37 %295 %297 
                                                      OpStore %89 %298 
                                Private f32* %299 = OpAccessChain %220 %74 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpLoad %89 
                                         f32 %302 = OpExtInst %1 37 %300 %301 
                                                      OpStore %89 %302 
                                       f32_3 %303 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %304 = OpAccessChain %20 %198 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_3 %307 = OpFNegate %306 
                                       f32_3 %308 = OpFAdd %303 %307 
                                                      OpStore %220 %308 
                                       f32_4 %309 = OpLoad %212 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                         f32 %311 = OpLoad %89 
                                       f32_3 %312 = OpCompositeConstruct %311 %311 %311 
                                       f32_3 %313 = OpFMul %310 %312 
                                       f32_3 %314 = OpLoad %220 
                                       f32_3 %315 = OpFAdd %313 %314 
                                       f32_4 %316 = OpLoad %212 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %212 %317 
                                                      OpBranch %204 
                                             %318 = OpLabel 
                                       f32_4 %319 = OpLoad %72 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_4 %321 = OpLoad %212 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %212 %322 
                                                      OpBranch %204 
                                             %204 = OpLabel 
                                         f32 %323 = OpLoad %104 
                                         f32 %324 = OpFNegate %323 
                                         f32 %326 = OpFMul %324 %325 
                                         f32 %328 = OpFAdd %326 %327 
                                                      OpStore %89 %328 
                                         f32 %329 = OpLoad %89 
                                         f32 %330 = OpLoad %104 
                                         f32 %331 = OpFMul %329 %330 
                                                      OpStore %89 %331 
                                         f32 %332 = OpLoad %89 
                                         f32 %334 = OpFMul %332 %333 
                                                      OpStore %89 %334 
                       read_only TextureCube %338 = OpLoad %337 
                                     sampler %340 = OpLoad %339 
                read_only TextureCubeSampled %342 = OpSampledImage %338 %340 
                                       f32_4 %343 = OpLoad %212 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                         f32 %345 = OpLoad %89 
                                       f32_4 %346 = OpImageSampleExplicitLod %342 %344 Lod %7 
                                                      OpStore %212 %346 
                                Private f32* %347 = OpAccessChain %212 %116 
                                         f32 %348 = OpLoad %347 
                                         f32 %350 = OpFAdd %348 %349 
                                                      OpStore %153 %350 
                                Uniform f32* %352 = OpAccessChain %20 %351 %116 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpLoad %153 
                                         f32 %355 = OpFMul %353 %354 
                                         f32 %356 = OpFAdd %355 %133 
                                                      OpStore %153 %356 
                                         f32 %357 = OpLoad %153 
                                         f32 %358 = OpExtInst %1 30 %357 
                                                      OpStore %153 %358 
                                         f32 %359 = OpLoad %153 
                                Uniform f32* %360 = OpAccessChain %20 %351 %83 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %359 %361 
                                                      OpStore %153 %362 
                                         f32 %363 = OpLoad %153 
                                         f32 %364 = OpExtInst %1 29 %363 
                                                      OpStore %153 %364 
                                         f32 %365 = OpLoad %153 
                                Uniform f32* %366 = OpAccessChain %20 %351 %78 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpFMul %365 %367 
                                                      OpStore %153 %368 
                                       f32_4 %369 = OpLoad %212 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                         f32 %371 = OpLoad %153 
                                       f32_3 %372 = OpCompositeConstruct %371 %371 %371 
                                       f32_3 %373 = OpFMul %370 %372 
                                                      OpStore %220 %373 
                                Uniform f32* %375 = OpAccessChain %20 %235 %116 
                                         f32 %376 = OpLoad %375 
                                        bool %378 = OpFOrdLessThan %376 %377 
                                                      OpStore %374 %378 
                                        bool %379 = OpLoad %374 
                                                      OpSelectionMerge %381 None 
                                                      OpBranchConditional %379 %380 %381 
                                             %380 = OpLabel 
                                Uniform f32* %383 = OpAccessChain %20 %382 %116 
                                         f32 %384 = OpLoad %383 
                                        bool %385 = OpFOrdLessThan %132 %384 
                                                      OpStore %374 %385 
                                        bool %386 = OpLoad %374 
                                                      OpSelectionMerge %388 None 
                                                      OpBranchConditional %386 %387 %388 
                                             %387 = OpLabel 
                                       f32_4 %390 = OpLoad %72 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_4 %392 = OpLoad %72 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                         f32 %394 = OpDot %391 %393 
                                                      OpStore %389 %394 
                                         f32 %395 = OpLoad %389 
                                         f32 %396 = OpExtInst %1 32 %395 
                                                      OpStore %389 %396 
                                         f32 %397 = OpLoad %389 
                                       f32_3 %398 = OpCompositeConstruct %397 %397 %397 
                                       f32_4 %399 = OpLoad %72 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_3 %401 = OpFMul %398 %400 
                                                      OpStore %232 %401 
                                       f32_3 %403 = OpLoad vs_TEXCOORD2 
                                       f32_3 %404 = OpFNegate %403 
                              Uniform f32_4* %406 = OpAccessChain %20 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFAdd %404 %408 
                                                      OpStore %402 %409 
                                       f32_3 %410 = OpLoad %402 
                                       f32_3 %411 = OpLoad %232 
                                       f32_3 %412 = OpFDiv %410 %411 
                                                      OpStore %402 %412 
                                       f32_3 %414 = OpLoad vs_TEXCOORD2 
                                       f32_3 %415 = OpFNegate %414 
                              Uniform f32_4* %417 = OpAccessChain %20 %416 
                                       f32_4 %418 = OpLoad %417 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %415 %419 
                                                      OpStore %413 %420 
                                       f32_3 %421 = OpLoad %413 
                                       f32_3 %422 = OpLoad %232 
                                       f32_3 %423 = OpFDiv %421 %422 
                                                      OpStore %413 %423 
                                       f32_3 %425 = OpLoad %232 
                                       f32_4 %426 = OpVectorShuffle %425 %425 0 1 2 0 
                                      bool_4 %427 = OpFOrdLessThan %247 %426 
                                      bool_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                                      OpStore %424 %428 
                                       f32_3 %430 = OpLoad %402 
                                                      OpStore %429 %430 
                               Private bool* %431 = OpAccessChain %424 %78 
                                        bool %432 = OpLoad %431 
                                                      OpSelectionMerge %435 None 
                                                      OpBranchConditional %432 %434 %438 
                                             %434 = OpLabel 
                                Private f32* %436 = OpAccessChain %402 %78 
                                         f32 %437 = OpLoad %436 
                                                      OpStore %433 %437 
                                                      OpBranch %435 
                                             %438 = OpLabel 
                                Private f32* %439 = OpAccessChain %413 %78 
                                         f32 %440 = OpLoad %439 
                                                      OpStore %433 %440 
                                                      OpBranch %435 
                                             %435 = OpLabel 
                                         f32 %441 = OpLoad %433 
                               Function f32* %442 = OpAccessChain %429 %78 
                                                      OpStore %442 %441 
                               Private bool* %443 = OpAccessChain %424 %83 
                                        bool %444 = OpLoad %443 
                                                      OpSelectionMerge %447 None 
                                                      OpBranchConditional %444 %446 %450 
                                             %446 = OpLabel 
                                Private f32* %448 = OpAccessChain %402 %83 
                                         f32 %449 = OpLoad %448 
                                                      OpStore %445 %449 
                                                      OpBranch %447 
                                             %450 = OpLabel 
                                Private f32* %451 = OpAccessChain %413 %83 
                                         f32 %452 = OpLoad %451 
                                                      OpStore %445 %452 
                                                      OpBranch %447 
                                             %447 = OpLabel 
                                         f32 %453 = OpLoad %445 
                               Function f32* %454 = OpAccessChain %429 %83 
                                                      OpStore %454 %453 
                               Private bool* %455 = OpAccessChain %424 %74 
                                        bool %456 = OpLoad %455 
                                                      OpSelectionMerge %459 None 
                                                      OpBranchConditional %456 %458 %462 
                                             %458 = OpLabel 
                                Private f32* %460 = OpAccessChain %402 %74 
                                         f32 %461 = OpLoad %460 
                                                      OpStore %457 %461 
                                                      OpBranch %459 
                                             %462 = OpLabel 
                                Private f32* %463 = OpAccessChain %413 %74 
                                         f32 %464 = OpLoad %463 
                                                      OpStore %457 %464 
                                                      OpBranch %459 
                                             %459 = OpLabel 
                                         f32 %465 = OpLoad %457 
                               Function f32* %466 = OpAccessChain %429 %74 
                                                      OpStore %466 %465 
                                       f32_3 %467 = OpLoad %429 
                                                      OpStore %402 %467 
                                Private f32* %468 = OpAccessChain %402 %83 
                                         f32 %469 = OpLoad %468 
                                Private f32* %470 = OpAccessChain %402 %78 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpExtInst %1 37 %469 %471 
                                                      OpStore %389 %472 
                                Private f32* %473 = OpAccessChain %402 %74 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpLoad %389 
                                         f32 %476 = OpExtInst %1 37 %474 %475 
                                                      OpStore %389 %476 
                                       f32_3 %477 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %478 = OpAccessChain %20 %382 
                                       f32_4 %479 = OpLoad %478 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpFNegate %480 
                                       f32_3 %482 = OpFAdd %477 %481 
                                                      OpStore %402 %482 
                                       f32_3 %483 = OpLoad %232 
                                         f32 %484 = OpLoad %389 
                                       f32_3 %485 = OpCompositeConstruct %484 %484 %484 
                                       f32_3 %486 = OpFMul %483 %485 
                                       f32_3 %487 = OpLoad %402 
                                       f32_3 %488 = OpFAdd %486 %487 
                                       f32_4 %489 = OpLoad %72 
                                       f32_4 %490 = OpVectorShuffle %489 %488 4 5 6 3 
                                                      OpStore %72 %490 
                                                      OpBranch %388 
                                             %388 = OpLabel 
                       read_only TextureCube %492 = OpLoad %491 
                                     sampler %493 = OpLoad %339 
                read_only TextureCubeSampled %494 = OpSampledImage %492 %493 
                                       f32_4 %495 = OpLoad %72 
                                       f32_3 %496 = OpVectorShuffle %495 %495 0 1 2 
                                         f32 %497 = OpLoad %89 
                                       f32_4 %498 = OpImageSampleExplicitLod %494 %496 Lod %7 
                                                      OpStore %72 %498 
                                Private f32* %499 = OpAccessChain %72 %116 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFAdd %500 %349 
                                                      OpStore %89 %501 
                                Uniform f32* %503 = OpAccessChain %20 %502 %116 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpLoad %89 
                                         f32 %506 = OpFMul %504 %505 
                                         f32 %507 = OpFAdd %506 %133 
                                                      OpStore %89 %507 
                                         f32 %508 = OpLoad %89 
                                         f32 %509 = OpExtInst %1 30 %508 
                                                      OpStore %89 %509 
                                         f32 %510 = OpLoad %89 
                                Uniform f32* %511 = OpAccessChain %20 %502 %83 
                                         f32 %512 = OpLoad %511 
                                         f32 %513 = OpFMul %510 %512 
                                                      OpStore %89 %513 
                                         f32 %514 = OpLoad %89 
                                         f32 %515 = OpExtInst %1 29 %514 
                                                      OpStore %89 %515 
                                         f32 %516 = OpLoad %89 
                                Uniform f32* %517 = OpAccessChain %20 %502 %78 
                                         f32 %518 = OpLoad %517 
                                         f32 %519 = OpFMul %516 %518 
                                                      OpStore %89 %519 
                                       f32_4 %520 = OpLoad %72 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                         f32 %522 = OpLoad %89 
                                       f32_3 %523 = OpCompositeConstruct %522 %522 %522 
                                       f32_3 %524 = OpFMul %521 %523 
                                       f32_4 %525 = OpLoad %72 
                                       f32_4 %526 = OpVectorShuffle %525 %524 4 5 6 3 
                                                      OpStore %72 %526 
                                         f32 %527 = OpLoad %153 
                                       f32_3 %528 = OpCompositeConstruct %527 %527 %527 
                                       f32_4 %529 = OpLoad %212 
                                       f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
                                       f32_3 %531 = OpFMul %528 %530 
                                       f32_4 %532 = OpLoad %72 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpFNegate %533 
                                       f32_3 %535 = OpFAdd %531 %534 
                                       f32_4 %536 = OpLoad %212 
                                       f32_4 %537 = OpVectorShuffle %536 %535 4 5 6 3 
                                                      OpStore %212 %537 
                              Uniform f32_4* %538 = OpAccessChain %20 %235 
                                       f32_4 %539 = OpLoad %538 
                                       f32_3 %540 = OpVectorShuffle %539 %539 3 3 3 
                                       f32_4 %541 = OpLoad %212 
                                       f32_3 %542 = OpVectorShuffle %541 %541 0 1 2 
                                       f32_3 %543 = OpFMul %540 %542 
                                       f32_4 %544 = OpLoad %72 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFAdd %543 %545 
                                                      OpStore %220 %546 
                                                      OpBranch %381 
                                             %381 = OpLabel 
                                       f32_3 %547 = OpLoad vs_TEXCOORD1 
                                       f32_3 %548 = OpLoad vs_TEXCOORD1 
                                         f32 %549 = OpDot %547 %548 
                                                      OpStore %89 %549 
                                         f32 %550 = OpLoad %89 
                                         f32 %551 = OpExtInst %1 32 %550 
                                                      OpStore %89 %551 
                                         f32 %552 = OpLoad %89 
                                       f32_3 %553 = OpCompositeConstruct %552 %552 %552 
                                       f32_3 %554 = OpLoad vs_TEXCOORD1 
                                       f32_3 %555 = OpFMul %553 %554 
                                       f32_4 %556 = OpLoad %72 
                                       f32_4 %557 = OpVectorShuffle %556 %555 4 5 6 3 
                                                      OpStore %72 %557 
                                       f32_3 %558 = OpLoad %47 
                              Uniform f32_4* %559 = OpAccessChain %20 %66 
                                       f32_4 %560 = OpLoad %559 
                                       f32_3 %561 = OpVectorShuffle %560 %560 0 1 2 
                                       f32_3 %562 = OpFMul %558 %561 
                                       f32_3 %565 = OpFAdd %562 %564 
                                       f32_4 %566 = OpLoad %212 
                                       f32_4 %567 = OpVectorShuffle %566 %565 4 5 6 3 
                                                      OpStore %212 %567 
                                Uniform f32* %569 = OpAccessChain %20 %568 
                                         f32 %570 = OpLoad %569 
                                Uniform f32* %571 = OpAccessChain %20 %568 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %20 %568 
                                         f32 %574 = OpLoad %573 
                                       f32_3 %575 = OpCompositeConstruct %570 %572 %574 
                                         f32 %576 = OpCompositeExtract %575 0 
                                         f32 %577 = OpCompositeExtract %575 1 
                                         f32 %578 = OpCompositeExtract %575 2 
                                       f32_3 %579 = OpCompositeConstruct %576 %577 %578 
                                       f32_4 %580 = OpLoad %212 
                                       f32_3 %581 = OpVectorShuffle %580 %580 0 1 2 
                                       f32_3 %582 = OpFMul %579 %581 
                                       f32_3 %585 = OpFAdd %582 %584 
                                       f32_4 %586 = OpLoad %212 
                                       f32_4 %587 = OpVectorShuffle %586 %585 4 5 6 3 
                                                      OpStore %212 %587 
                                Uniform f32* %588 = OpAccessChain %20 %568 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpFNegate %589 
                                         f32 %592 = OpFMul %590 %591 
                                         f32 %593 = OpFAdd %592 %591 
                                                      OpStore %89 %593 
                                         f32 %594 = OpLoad %89 
                                       f32_3 %595 = OpCompositeConstruct %594 %594 %594 
                                       f32_3 %596 = OpLoad %64 
                                       f32_3 %597 = OpFMul %595 %596 
                                                      OpStore %64 %597 
                                       f32_4 %598 = OpLoad %9 
                                       f32_3 %599 = OpVectorShuffle %598 %598 0 1 2 
                                         f32 %600 = OpLoad %30 
                                       f32_3 %601 = OpCompositeConstruct %600 %600 %600 
                                       f32_3 %602 = OpFMul %599 %601 
                              Uniform f32_4* %603 = OpAccessChain %20 %85 
                                       f32_4 %604 = OpLoad %603 
                                       f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
                                       f32_3 %606 = OpFAdd %602 %605 
                                       f32_4 %607 = OpLoad %9 
                                       f32_4 %608 = OpVectorShuffle %607 %606 4 5 6 3 
                                                      OpStore %9 %608 
                                       f32_4 %609 = OpLoad %9 
                                       f32_3 %610 = OpVectorShuffle %609 %609 0 1 2 
                                       f32_4 %611 = OpLoad %9 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                         f32 %613 = OpDot %610 %612 
                                                      OpStore %30 %613 
                                         f32 %614 = OpLoad %30 
                                         f32 %616 = OpExtInst %1 40 %614 %615 
                                                      OpStore %30 %616 
                                         f32 %617 = OpLoad %30 
                                         f32 %618 = OpExtInst %1 32 %617 
                                                      OpStore %30 %618 
                                         f32 %619 = OpLoad %30 
                                       f32_3 %620 = OpCompositeConstruct %619 %619 %619 
                                       f32_4 %621 = OpLoad %9 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                                       f32_3 %623 = OpFMul %620 %622 
                                       f32_4 %624 = OpLoad %9 
                                       f32_4 %625 = OpVectorShuffle %624 %623 4 5 6 3 
                                                      OpStore %9 %625 
                                       f32_4 %626 = OpLoad %72 
                                       f32_3 %627 = OpVectorShuffle %626 %626 0 1 2 
                                       f32_4 %628 = OpLoad %38 
                                       f32_3 %629 = OpVectorShuffle %628 %628 0 1 2 
                                         f32 %630 = OpDot %627 %629 
                                                      OpStore %30 %630 
                                       f32_4 %631 = OpLoad %72 
                                       f32_3 %632 = OpVectorShuffle %631 %631 0 1 2 
                              Uniform f32_4* %633 = OpAccessChain %20 %85 
                                       f32_4 %634 = OpLoad %633 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                         f32 %636 = OpDot %632 %635 
                                Private f32* %637 = OpAccessChain %38 %78 
                                                      OpStore %637 %636 
                                Private f32* %638 = OpAccessChain %38 %78 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpExtInst %1 43 %639 %132 %133 
                                Private f32* %641 = OpAccessChain %38 %78 
                                                      OpStore %641 %640 
                                       f32_4 %643 = OpLoad %72 
                                       f32_3 %644 = OpVectorShuffle %643 %643 0 1 2 
                                       f32_4 %645 = OpLoad %9 
                                       f32_3 %646 = OpVectorShuffle %645 %645 0 1 2 
                                         f32 %647 = OpDot %644 %646 
                                                      OpStore %642 %647 
                                         f32 %648 = OpLoad %642 
                                         f32 %649 = OpExtInst %1 43 %648 %132 %133 
                                                      OpStore %642 %649 
                              Uniform f32_4* %650 = OpAccessChain %20 %85 
                                       f32_4 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 1 2 
                                       f32_4 %653 = OpLoad %9 
                                       f32_3 %654 = OpVectorShuffle %653 %653 0 1 2 
                                         f32 %655 = OpDot %652 %654 
                                Private f32* %656 = OpAccessChain %9 %78 
                                                      OpStore %656 %655 
                                Private f32* %657 = OpAccessChain %9 %78 
                                         f32 %658 = OpLoad %657 
                                         f32 %659 = OpExtInst %1 43 %658 %132 %133 
                                Private f32* %660 = OpAccessChain %9 %78 
                                                      OpStore %660 %659 
                                Private f32* %662 = OpAccessChain %9 %78 
                                         f32 %663 = OpLoad %662 
                                Private f32* %664 = OpAccessChain %9 %78 
                                         f32 %665 = OpLoad %664 
                                         f32 %666 = OpFMul %663 %665 
                                Private f32* %667 = OpAccessChain %661 %78 
                                                      OpStore %667 %666 
                                       f32_3 %668 = OpLoad %661 
                                       f32_2 %669 = OpVectorShuffle %668 %668 0 0 
                                         f32 %670 = OpLoad %104 
                                       f32_2 %671 = OpCompositeConstruct %670 %670 
                                         f32 %672 = OpDot %669 %671 
                                Private f32* %673 = OpAccessChain %661 %78 
                                                      OpStore %673 %672 
                                Private f32* %674 = OpAccessChain %661 %78 
                                         f32 %675 = OpLoad %674 
                                         f32 %677 = OpFAdd %675 %676 
                                Private f32* %678 = OpAccessChain %661 %78 
                                                      OpStore %678 %677 
                                Private f32* %680 = OpAccessChain %38 %78 
                                         f32 %681 = OpLoad %680 
                                         f32 %682 = OpFNegate %681 
                                         f32 %683 = OpFAdd %682 %133 
                                                      OpStore %679 %683 
                                         f32 %685 = OpLoad %679 
                                         f32 %686 = OpLoad %679 
                                         f32 %687 = OpFMul %685 %686 
                                                      OpStore %684 %687 
                                         f32 %688 = OpLoad %684 
                                         f32 %689 = OpLoad %684 
                                         f32 %690 = OpFMul %688 %689 
                                                      OpStore %684 %690 
                                         f32 %691 = OpLoad %679 
                                         f32 %692 = OpLoad %684 
                                         f32 %693 = OpFMul %691 %692 
                                                      OpStore %679 %693 
                                Private f32* %694 = OpAccessChain %661 %78 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpLoad %679 
                                         f32 %697 = OpFMul %695 %696 
                                         f32 %698 = OpFAdd %697 %133 
                                                      OpStore %679 %698 
                                         f32 %699 = OpLoad %30 
                                         f32 %700 = OpExtInst %1 4 %699 
                                         f32 %701 = OpFNegate %700 
                                         f32 %702 = OpFAdd %701 %133 
                                                      OpStore %684 %702 
                                         f32 %703 = OpLoad %684 
                                         f32 %704 = OpLoad %684 
                                         f32 %705 = OpFMul %703 %704 
                                                      OpStore %153 %705 
                                         f32 %706 = OpLoad %153 
                                         f32 %707 = OpLoad %153 
                                         f32 %708 = OpFMul %706 %707 
                                                      OpStore %153 %708 
                                         f32 %709 = OpLoad %684 
                                         f32 %710 = OpLoad %153 
                                         f32 %711 = OpFMul %709 %710 
                                                      OpStore %684 %711 
                                Private f32* %712 = OpAccessChain %661 %78 
                                         f32 %713 = OpLoad %712 
                                         f32 %714 = OpLoad %684 
                                         f32 %715 = OpFMul %713 %714 
                                         f32 %716 = OpFAdd %715 %133 
                                Private f32* %717 = OpAccessChain %661 %78 
                                                      OpStore %717 %716 
                                Private f32* %718 = OpAccessChain %661 %78 
                                         f32 %719 = OpLoad %718 
                                         f32 %720 = OpLoad %679 
                                         f32 %721 = OpFMul %719 %720 
                                Private f32* %722 = OpAccessChain %661 %78 
                                                      OpStore %722 %721 
                                         f32 %723 = OpLoad %104 
                                         f32 %724 = OpLoad %104 
                                         f32 %725 = OpFMul %723 %724 
                                                      OpStore %679 %725 
                                         f32 %726 = OpLoad %679 
                                         f32 %728 = OpExtInst %1 40 %726 %727 
                                                      OpStore %679 %728 
                                         f32 %729 = OpLoad %679 
                                         f32 %730 = OpFNegate %729 
                                         f32 %731 = OpFAdd %730 %133 
                                                      OpStore %104 %731 
                                         f32 %732 = OpLoad %30 
                                         f32 %733 = OpExtInst %1 4 %732 
                                         f32 %734 = OpLoad %104 
                                         f32 %735 = OpFMul %733 %734 
                                         f32 %736 = OpLoad %679 
                                         f32 %737 = OpFAdd %735 %736 
                                                      OpStore %153 %737 
                                Private f32* %738 = OpAccessChain %38 %78 
                                         f32 %739 = OpLoad %738 
                                         f32 %740 = OpLoad %104 
                                         f32 %741 = OpFMul %739 %740 
                                         f32 %742 = OpLoad %679 
                                         f32 %743 = OpFAdd %741 %742 
                                                      OpStore %104 %743 
                                         f32 %744 = OpLoad %30 
                                         f32 %745 = OpExtInst %1 4 %744 
                                         f32 %746 = OpLoad %104 
                                         f32 %747 = OpFMul %745 %746 
                                                      OpStore %30 %747 
                                Private f32* %748 = OpAccessChain %38 %78 
                                         f32 %749 = OpLoad %748 
                                         f32 %750 = OpLoad %153 
                                         f32 %751 = OpFMul %749 %750 
                                         f32 %752 = OpLoad %30 
                                         f32 %753 = OpFAdd %751 %752 
                                                      OpStore %30 %753 
                                         f32 %754 = OpLoad %30 
                                         f32 %756 = OpFAdd %754 %755 
                                                      OpStore %30 %756 
                                         f32 %758 = OpLoad %30 
                                         f32 %759 = OpFDiv %757 %758 
                                                      OpStore %30 %759 
                                         f32 %760 = OpLoad %679 
                                         f32 %761 = OpLoad %679 
                                         f32 %762 = OpFMul %760 %761 
                                                      OpStore %104 %762 
                                         f32 %763 = OpLoad %642 
                                         f32 %764 = OpLoad %104 
                                         f32 %765 = OpFMul %763 %764 
                                         f32 %766 = OpLoad %642 
                                         f32 %767 = OpFNegate %766 
                                         f32 %768 = OpFAdd %765 %767 
                                                      OpStore %153 %768 
                                         f32 %769 = OpLoad %153 
                                         f32 %770 = OpLoad %642 
                                         f32 %771 = OpFMul %769 %770 
                                         f32 %772 = OpFAdd %771 %133 
                                                      OpStore %642 %772 
                                         f32 %773 = OpLoad %104 
                                         f32 %775 = OpFMul %773 %774 
                                                      OpStore %104 %775 
                                         f32 %776 = OpLoad %642 
                                         f32 %777 = OpLoad %642 
                                         f32 %778 = OpFMul %776 %777 
                                         f32 %780 = OpFAdd %778 %779 
                                                      OpStore %642 %780 
                                         f32 %781 = OpLoad %104 
                                         f32 %782 = OpLoad %642 
                                         f32 %783 = OpFDiv %781 %782 
                                                      OpStore %642 %783 
                                         f32 %784 = OpLoad %30 
                                         f32 %785 = OpLoad %642 
                                         f32 %786 = OpFMul %784 %785 
                                Private f32* %787 = OpAccessChain %661 %74 
                                                      OpStore %787 %786 
                                       f32_4 %788 = OpLoad %38 
                                       f32_2 %789 = OpVectorShuffle %788 %788 0 0 
                                       f32_3 %790 = OpLoad %661 
                                       f32_2 %791 = OpVectorShuffle %790 %790 0 2 
                                       f32_2 %792 = OpFMul %789 %791 
                                       f32_3 %793 = OpLoad %661 
                                       f32_3 %794 = OpVectorShuffle %793 %792 3 1 4 
                                                      OpStore %661 %794 
                                Private f32* %795 = OpAccessChain %661 %74 
                                         f32 %796 = OpLoad %795 
                                         f32 %798 = OpFMul %796 %797 
                                                      OpStore %30 %798 
                                         f32 %799 = OpLoad %30 
                                         f32 %800 = OpExtInst %1 40 %799 %132 
                                                      OpStore %30 %800 
                                         f32 %801 = OpLoad %679 
                                         f32 %802 = OpLoad %679 
                                         f32 %803 = OpFMul %801 %802 
                                         f32 %804 = OpFAdd %803 %133 
                                                      OpStore %679 %804 
                                         f32 %805 = OpLoad %679 
                                         f32 %806 = OpFDiv %133 %805 
                                                      OpStore %679 %806 
                                       f32_4 %807 = OpLoad %212 
                                       f32_3 %808 = OpVectorShuffle %807 %807 0 1 2 
                                       f32_4 %809 = OpLoad %212 
                                       f32_3 %810 = OpVectorShuffle %809 %809 0 1 2 
                                         f32 %811 = OpDot %808 %810 
                                Private f32* %812 = OpAccessChain %38 %78 
                                                      OpStore %812 %811 
                                Private f32* %814 = OpAccessChain %38 %78 
                                         f32 %815 = OpLoad %814 
                                        bool %816 = OpFOrdNotEqual %815 %132 
                                                      OpStore %813 %816 
                                        bool %817 = OpLoad %813 
                                         f32 %818 = OpSelect %817 %133 %132 
                                Private f32* %819 = OpAccessChain %38 %78 
                                                      OpStore %819 %818 
                                         f32 %820 = OpLoad %30 
                                Private f32* %821 = OpAccessChain %38 %78 
                                         f32 %822 = OpLoad %821 
                                         f32 %823 = OpFMul %820 %822 
                                                      OpStore %30 %823 
                                         f32 %824 = OpLoad %89 
                                         f32 %825 = OpFNegate %824 
                                Uniform f32* %826 = OpAccessChain %20 %162 
                                         f32 %827 = OpLoad %826 
                                         f32 %828 = OpFAdd %825 %827 
                                Private f32* %829 = OpAccessChain %38 %78 
                                                      OpStore %829 %828 
                                Private f32* %830 = OpAccessChain %38 %78 
                                         f32 %831 = OpLoad %830 
                                         f32 %832 = OpFAdd %831 %133 
                                Private f32* %833 = OpAccessChain %38 %78 
                                                      OpStore %833 %832 
                                Private f32* %834 = OpAccessChain %38 %78 
                                         f32 %835 = OpLoad %834 
                                         f32 %836 = OpExtInst %1 43 %835 %132 %133 
                                Private f32* %837 = OpAccessChain %38 %78 
                                                      OpStore %837 %836 
                                       f32_3 %838 = OpLoad %661 
                                       f32_3 %839 = OpVectorShuffle %838 %838 0 0 0 
                                       f32_3 %840 = OpLoad %187 
                                       f32_3 %841 = OpFMul %839 %840 
                                       f32_4 %842 = OpLoad %72 
                                       f32_4 %843 = OpVectorShuffle %842 %841 4 5 6 3 
                                                      OpStore %72 %843 
                                       f32_3 %844 = OpLoad %187 
                                         f32 %845 = OpLoad %30 
                                       f32_3 %846 = OpCompositeConstruct %845 %845 %845 
                                       f32_3 %847 = OpFMul %844 %846 
                                                      OpStore %187 %847 
                                Private f32* %848 = OpAccessChain %9 %78 
                                         f32 %849 = OpLoad %848 
                                         f32 %850 = OpFNegate %849 
                                         f32 %851 = OpFAdd %850 %133 
                                Private f32* %852 = OpAccessChain %9 %78 
                                                      OpStore %852 %851 
                                Private f32* %853 = OpAccessChain %9 %78 
                                         f32 %854 = OpLoad %853 
                                Private f32* %855 = OpAccessChain %9 %78 
                                         f32 %856 = OpLoad %855 
                                         f32 %857 = OpFMul %854 %856 
                                Private f32* %858 = OpAccessChain %661 %78 
                                                      OpStore %858 %857 
                                Private f32* %859 = OpAccessChain %661 %78 
                                         f32 %860 = OpLoad %859 
                                Private f32* %861 = OpAccessChain %661 %78 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpFMul %860 %862 
                                Private f32* %864 = OpAccessChain %661 %78 
                                                      OpStore %864 %863 
                                Private f32* %865 = OpAccessChain %9 %78 
                                         f32 %866 = OpLoad %865 
                                Private f32* %867 = OpAccessChain %661 %78 
                                         f32 %868 = OpLoad %867 
                                         f32 %869 = OpFMul %866 %868 
                                Private f32* %870 = OpAccessChain %9 %78 
                                                      OpStore %870 %869 
                                       f32_4 %871 = OpLoad %212 
                                       f32_3 %872 = OpVectorShuffle %871 %871 0 1 2 
                                       f32_3 %873 = OpFNegate %872 
                                       f32_3 %875 = OpFAdd %873 %874 
                                                      OpStore %232 %875 
                                       f32_3 %876 = OpLoad %232 
                                       f32_4 %877 = OpLoad %9 
                                       f32_3 %878 = OpVectorShuffle %877 %877 0 0 0 
                                       f32_3 %879 = OpFMul %876 %878 
                                       f32_4 %880 = OpLoad %212 
                                       f32_3 %881 = OpVectorShuffle %880 %880 0 1 2 
                                       f32_3 %882 = OpFAdd %879 %881 
                                       f32_4 %883 = OpLoad %9 
                                       f32_4 %884 = OpVectorShuffle %883 %882 4 5 2 6 
                                                      OpStore %9 %884 
                                       f32_4 %885 = OpLoad %9 
                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 3 
                                       f32_3 %887 = OpLoad %187 
                                       f32_3 %888 = OpFMul %886 %887 
                                       f32_4 %889 = OpLoad %9 
                                       f32_4 %890 = OpVectorShuffle %889 %888 4 5 2 6 
                                                      OpStore %9 %890 
                                       f32_3 %891 = OpLoad %64 
                                       f32_4 %892 = OpLoad %72 
                                       f32_3 %893 = OpVectorShuffle %892 %892 0 1 2 
                                       f32_3 %894 = OpFMul %891 %893 
                                       f32_4 %895 = OpLoad %9 
                                       f32_3 %896 = OpVectorShuffle %895 %895 0 1 3 
                                       f32_3 %897 = OpFAdd %894 %896 
                                       f32_4 %898 = OpLoad %9 
                                       f32_4 %899 = OpVectorShuffle %898 %897 4 5 2 6 
                                                      OpStore %9 %899 
                                       f32_3 %900 = OpLoad %220 
                                         f32 %901 = OpLoad %679 
                                       f32_3 %902 = OpCompositeConstruct %901 %901 %901 
                                       f32_3 %903 = OpFMul %900 %902 
                                                      OpStore %64 %903 
                                       f32_4 %904 = OpLoad %212 
                                       f32_3 %905 = OpVectorShuffle %904 %904 0 1 2 
                                       f32_3 %906 = OpFNegate %905 
                                       f32_4 %907 = OpLoad %38 
                                       f32_3 %908 = OpVectorShuffle %907 %907 0 0 0 
                                       f32_3 %909 = OpFAdd %906 %908 
                                       f32_4 %910 = OpLoad %38 
                                       f32_4 %911 = OpVectorShuffle %910 %909 4 5 2 6 
                                                      OpStore %38 %911 
                                         f32 %912 = OpLoad %684 
                                       f32_3 %913 = OpCompositeConstruct %912 %912 %912 
                                       f32_4 %914 = OpLoad %38 
                                       f32_3 %915 = OpVectorShuffle %914 %914 0 1 3 
                                       f32_3 %916 = OpFMul %913 %915 
                                       f32_4 %917 = OpLoad %212 
                                       f32_3 %918 = OpVectorShuffle %917 %917 0 1 2 
                                       f32_3 %919 = OpFAdd %916 %918 
                                       f32_4 %920 = OpLoad %38 
                                       f32_4 %921 = OpVectorShuffle %920 %919 4 5 6 3 
                                                      OpStore %38 %921 
                                       f32_3 %922 = OpLoad %64 
                                       f32_4 %923 = OpLoad %38 
                                       f32_3 %924 = OpVectorShuffle %923 %923 0 1 2 
                                       f32_3 %925 = OpFMul %922 %924 
                                       f32_4 %926 = OpLoad %9 
                                       f32_3 %927 = OpVectorShuffle %926 %926 0 1 3 
                                       f32_3 %928 = OpFAdd %925 %927 
                                       f32_4 %929 = OpLoad %9 
                                       f32_4 %930 = OpVectorShuffle %929 %928 4 5 6 3 
                                                      OpStore %9 %930 
                                       f32_3 %931 = OpLoad %47 
                              Uniform f32_4* %932 = OpAccessChain %20 %66 
                                       f32_4 %933 = OpLoad %932 
                                       f32_3 %934 = OpVectorShuffle %933 %933 0 1 2 
                                       f32_3 %935 = OpFMul %931 %934 
                                       f32_4 %936 = OpLoad %9 
                                       f32_3 %937 = OpVectorShuffle %936 %936 0 1 2 
                                       f32_3 %938 = OpFAdd %935 %937 
                                       f32_4 %939 = OpLoad %9 
                                       f32_4 %940 = OpVectorShuffle %939 %938 4 5 6 3 
                                                      OpStore %9 %940 
                                         f32 %943 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %944 = OpAccessChain %20 %80 %83 
                                         f32 %945 = OpLoad %944 
                                         f32 %946 = OpFDiv %943 %945 
                                                      OpStore %30 %946 
                                         f32 %947 = OpLoad %30 
                                         f32 %948 = OpFNegate %947 
                                         f32 %949 = OpFAdd %948 %133 
                                                      OpStore %30 %949 
                                         f32 %950 = OpLoad %30 
                                Uniform f32* %951 = OpAccessChain %20 %80 %74 
                                         f32 %952 = OpLoad %951 
                                         f32 %953 = OpFMul %950 %952 
                                                      OpStore %30 %953 
                                         f32 %954 = OpLoad %30 
                                         f32 %955 = OpExtInst %1 40 %954 %132 
                                                      OpStore %30 %955 
                                         f32 %956 = OpLoad %30 
                                Uniform f32* %958 = OpAccessChain %20 %957 %74 
                                         f32 %959 = OpLoad %958 
                                         f32 %960 = OpFMul %956 %959 
                                Uniform f32* %961 = OpAccessChain %20 %957 %116 
                                         f32 %962 = OpLoad %961 
                                         f32 %963 = OpFAdd %960 %962 
                                                      OpStore %30 %963 
                                         f32 %964 = OpLoad %30 
                                         f32 %965 = OpExtInst %1 43 %964 %132 %133 
                                                      OpStore %30 %965 
                                       f32_4 %966 = OpLoad %9 
                                       f32_3 %967 = OpVectorShuffle %966 %966 0 1 2 
                              Uniform f32_4* %969 = OpAccessChain %20 %968 
                                       f32_4 %970 = OpLoad %969 
                                       f32_3 %971 = OpVectorShuffle %970 %970 0 1 2 
                                       f32_3 %972 = OpFNegate %971 
                                       f32_3 %973 = OpFAdd %967 %972 
                                       f32_4 %974 = OpLoad %9 
                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
                                                      OpStore %9 %975 
                                         f32 %978 = OpLoad %30 
                                       f32_3 %979 = OpCompositeConstruct %978 %978 %978 
                                       f32_4 %980 = OpLoad %9 
                                       f32_3 %981 = OpVectorShuffle %980 %980 0 1 2 
                                       f32_3 %982 = OpFMul %979 %981 
                              Uniform f32_4* %983 = OpAccessChain %20 %968 
                                       f32_4 %984 = OpLoad %983 
                                       f32_3 %985 = OpVectorShuffle %984 %984 0 1 2 
                                       f32_3 %986 = OpFAdd %982 %985 
                                       f32_4 %987 = OpLoad %977 
                                       f32_4 %988 = OpVectorShuffle %987 %986 4 5 6 3 
                                                      OpStore %977 %988 
                                 Output f32* %990 = OpAccessChain %977 %116 
                                                      OpStore %990 %133 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(4) uniform  sampler2D _posTex;
UNITY_LOCATION(5) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
float u_xlat12;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    gl_Position = u_xlat2;
    vs_TEXCOORD4 = u_xlat2.z;
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat12 = u_xlat0.y * u_xlat0.y;
    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0.x * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
float u_xlat41;
float u_xlat42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat41 + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat41 = (-u_xlat4.x) + 1.0;
    u_xlat40 = u_xlat40 * u_xlat41 + u_xlat4.x;
    u_xlat41 = (-_Glossiness) + 1.0;
    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat42 = u_xlat42 + u_xlat42;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat40) * _LightColor0.xyz;
    u_xlat6.xyz = vs_TEXCOORD1.xyz;
    u_xlat6.w = 1.0;
    u_xlat7.x = dot(unity_SHAr, u_xlat6);
    u_xlat7.y = dot(unity_SHAg, u_xlat6);
    u_xlat7.z = dot(unity_SHAb, u_xlat6);
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = inversesqrt(u_xlat40);
        u_xlat7.xyz = vec3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat40 = u_xlat40 * u_xlat41;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat40);
    u_xlat42 = u_xlat7.w + -1.0;
    u_xlat42 = unity_SpecCube0_HDR.w * u_xlat42 + 1.0;
    u_xlat42 = log2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat40);
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = unity_SpecCube1_HDR.w * u_xlat40 + 1.0;
        u_xlat40 = log2(u_xlat40);
        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.y;
        u_xlat40 = exp2(u_xlat40);
        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40);
        u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz + (-u_xlat4.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
    }
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat4.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat7.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat40 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat42 = u_xlat27 * u_xlat27;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat27 = u_xlat27 * u_xlat42;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat42 = abs(u_xlat39) * u_xlat41 + u_xlat26;
    u_xlat41 = u_xlat1.x * u_xlat41 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = u_xlat1.x * u_xlat42 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat42 = u_xlat14 * u_xlat41 + (-u_xlat14);
    u_xlat14 = u_xlat42 * u_xlat14 + 1.0;
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat13.z = u_xlat39 * 3.14159274;
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat39 = max(u_xlat13.z, 0.0);
    u_xlat26 = u_xlat26 * u_xlat26 + 1.0;
    u_xlat26 = float(1.0) / u_xlat26;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat5.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat6.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat1.xyw = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat7.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    u_xlat39 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 471
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %194 %234 %239 %243 %249 %250 %393 %431 %465 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpMemberDecorate %16 14 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 194 
                                                      OpMemberDecorate %232 0 BuiltIn 232 
                                                      OpMemberDecorate %232 1 BuiltIn 232 
                                                      OpMemberDecorate %232 2 BuiltIn 232 
                                                      OpDecorate %232 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 239 
                                                      OpDecorate vs_TEXCOORD5 Location 243 
                                                      OpDecorate vs_TEXCOORD0 Location 249 
                                                      OpDecorate %250 Location 250 
                                                      OpDecorate vs_TEXCOORD1 Location 393 
                                                      OpDecorate vs_TEXCOORD3 Location 431 
                                                      OpDecorate vs_TEXCOORD6 Location 465 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 12 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 13 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 11 
                                         i32 %119 = OpConstant 10 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 6 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                                             %193 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %206 = OpConstant 8 
                                             %231 = OpTypeArray %6 %20 
                                             %232 = OpTypeStruct %7 %6 %231 
                                             %233 = OpTypePointer Output %232 
        Output struct {f32_4; f32; f32[1];}* %234 = OpVariable Output 
                                             %236 = OpTypePointer Output %7 
                                             %238 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %240 = OpConstant 2 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %248 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %250 = OpVariable Input 
                                         i32 %253 = OpConstant 14 
                                         f32 %276 = OpConstant 3.674022E-40 
                                       f32_2 %277 = OpConstantComposite %276 %276 
                                         f32 %279 = OpConstant 3.674022E-40 
                                       f32_2 %280 = OpConstantComposite %279 %279 
                                Private f32* %284 = OpVariable Private 
                                         f32 %293 = OpConstant 3.674022E-40 
                                         f32 %294 = OpConstant 3.674022E-40 
                                       f32_2 %295 = OpConstantComposite %293 %294 
                                       f32_2 %297 = OpConstantComposite %56 %56 
                                       f32_3 %318 = OpConstantComposite %56 %56 %56 
                                             %330 = OpTypeBool 
                                             %331 = OpTypePointer Private %330 
                               Private bool* %332 = OpVariable Private 
                                       f32_4 %333 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %334 = OpConstant 9 
                                             %338 = OpTypeVector %330 4 
                                             %342 = OpTypePointer Function %100 
                                         i32 %356 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                Private f32* %396 = OpVariable Private 
                                         i32 %425 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %432 = OpConstant 5 
                                       f32_2 %450 = OpConstantComposite %294 %294 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %343 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %18 %167 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %166 %171 
                                                      OpStore %164 %172 
                              Uniform f32_4* %173 = OpAccessChain %18 %167 %19 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %114 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %164 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %164 %179 
                              Uniform f32_4* %181 = OpAccessChain %18 %167 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %114 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %164 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %114 %187 
                                       f32_4 %188 = OpLoad %114 
                              Uniform f32_4* %190 = OpAccessChain %18 %167 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %164 %192 
                              Uniform f32_4* %195 = OpAccessChain %18 %167 %189 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %158 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %114 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                                      OpStore vs_TEXCOORD2 %203 
                                       f32_4 %204 = OpLoad %164 
                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
                              Uniform f32_4* %207 = OpAccessChain %18 %206 %168 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpFMul %205 %208 
                                                      OpStore %114 %209 
                              Uniform f32_4* %210 = OpAccessChain %18 %206 %19 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %164 
                                       f32_4 %213 = OpVectorShuffle %212 %212 0 0 0 0 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %114 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %114 %216 
                              Uniform f32_4* %217 = OpAccessChain %18 %206 %180 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %164 
                                       f32_4 %220 = OpVectorShuffle %219 %219 2 2 2 2 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %114 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %114 %223 
                              Uniform f32_4* %224 = OpAccessChain %18 %206 %189 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %164 
                                       f32_4 %227 = OpVectorShuffle %226 %226 3 3 3 3 
                                       f32_4 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %114 
                                       f32_4 %230 = OpFAdd %228 %229 
                                                      OpStore %114 %230 
                                       f32_4 %235 = OpLoad %114 
                               Output f32_4* %237 = OpAccessChain %234 %19 
                                                      OpStore %237 %235 
                                Private f32* %241 = OpAccessChain %114 %240 
                                         f32 %242 = OpLoad %241 
                                                      OpStore vs_TEXCOORD4 %242 
                                       f32_4 %244 = OpLoad %114 
                                       f32_2 %245 = OpVectorShuffle %244 %244 2 3 
                                       f32_4 %246 = OpLoad vs_TEXCOORD5 
                                       f32_4 %247 = OpVectorShuffle %246 %245 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %247 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 1 
                              Uniform f32_4* %254 = OpAccessChain %18 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_2 %256 = OpVectorShuffle %255 %255 0 1 
                                       f32_2 %257 = OpFMul %252 %256 
                              Uniform f32_4* %258 = OpAccessChain %18 %253 
                                       f32_4 %259 = OpLoad %258 
                                       f32_2 %260 = OpVectorShuffle %259 %259 2 3 
                                       f32_2 %261 = OpFAdd %257 %260 
                                                      OpStore vs_TEXCOORD0 %261 
                                Private f32* %262 = OpAccessChain %76 %20 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpExtInst %1 8 %263 
                                Private f32* %265 = OpAccessChain %164 %29 
                                                      OpStore %265 %264 
                                Private f32* %266 = OpAccessChain %164 %29 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFNegate %267 
                                         f32 %269 = OpFMul %268 %146 
                                Private f32* %270 = OpAccessChain %76 %29 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFAdd %269 %271 
                                Private f32* %273 = OpAccessChain %164 %20 
                                                      OpStore %273 %272 
                                       f32_4 %274 = OpLoad %164 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %278 = OpFMul %275 %277 
                                       f32_2 %281 = OpFAdd %278 %280 
                                       f32_4 %282 = OpLoad %76 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 2 3 
                                                      OpStore %76 %283 
                                       f32_4 %285 = OpLoad %76 
                                       f32_2 %286 = OpVectorShuffle %285 %285 0 1 
                                       f32_4 %287 = OpLoad %76 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                         f32 %289 = OpDot %286 %288 
                                                      OpStore %284 %289 
                                         f32 %290 = OpLoad %284 
                                       f32_2 %291 = OpCompositeConstruct %290 %290 
                                       f32_2 %292 = OpFNegate %291 
                                       f32_2 %296 = OpFMul %292 %295 
                                       f32_2 %298 = OpFAdd %296 %297 
                                       f32_4 %299 = OpLoad %164 
                                       f32_4 %300 = OpVectorShuffle %299 %298 0 1 4 5 
                                                      OpStore %164 %300 
                                Private f32* %301 = OpAccessChain %164 %240 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 31 %302 
                                                      OpStore %284 %303 
                                       f32_4 %304 = OpLoad %76 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                         f32 %306 = OpLoad %284 
                                       f32_2 %307 = OpCompositeConstruct %306 %306 
                                       f32_2 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %164 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 2 3 
                                                      OpStore %164 %310 
                                       f32_4 %311 = OpLoad %164 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 3 
                                       f32_3 %313 = OpExtInst %1 40 %312 %110 
                                       f32_4 %314 = OpLoad %76 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %76 %315 
                                       f32_4 %316 = OpLoad %76 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %319 = OpExtInst %1 37 %317 %318 
                                       f32_4 %320 = OpLoad %76 
                                       f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                                      OpStore %76 %321 
                                Private f32* %322 = OpAccessChain %76 %29 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFNegate %323 
                                Private f32* %325 = OpAccessChain %76 %154 
                                                      OpStore %325 %324 
                                Private f32* %326 = OpAccessChain %9 %29 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFNegate %327 
                                Private f32* %329 = OpAccessChain %9 %154 
                                                      OpStore %329 %328 
                                Uniform f32* %335 = OpAccessChain %18 %334 
                                         f32 %336 = OpLoad %335 
                                       f32_4 %337 = OpCompositeConstruct %336 %336 %336 %336 
                                      bool_4 %339 = OpFOrdNotEqual %333 %337 
                                        bool %340 = OpAny %339 
                                                      OpStore %332 %340 
                                        bool %341 = OpLoad %332 
                                                      OpSelectionMerge %345 None 
                                                      OpBranchConditional %341 %344 %348 
                                             %344 = OpLabel 
                                       f32_4 %346 = OpLoad %76 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 2 1 
                                                      OpStore %343 %347 
                                                      OpBranch %345 
                                             %348 = OpLabel 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 3 1 2 
                                                      OpStore %343 %350 
                                                      OpBranch %345 
                                             %345 = OpLabel 
                                       f32_3 %351 = OpLoad %343 
                                       f32_4 %352 = OpLoad %9 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %9 %353 
                                       f32_4 %354 = OpLoad %9 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                              Uniform f32_4* %357 = OpAccessChain %18 %356 %19 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                         f32 %360 = OpDot %355 %359 
                                Private f32* %361 = OpAccessChain %76 %29 
                                                      OpStore %361 %360 
                                       f32_4 %362 = OpLoad %9 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                              Uniform f32_4* %364 = OpAccessChain %18 %356 %168 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                         f32 %367 = OpDot %363 %366 
                                Private f32* %368 = OpAccessChain %76 %20 
                                                      OpStore %368 %367 
                                       f32_4 %369 = OpLoad %9 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                              Uniform f32_4* %371 = OpAccessChain %18 %356 %180 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                         f32 %374 = OpDot %370 %373 
                                Private f32* %375 = OpAccessChain %76 %240 
                                                      OpStore %375 %374 
                                       f32_4 %376 = OpLoad %76 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_4 %378 = OpLoad %76 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                         f32 %380 = OpDot %377 %379 
                                Private f32* %381 = OpAccessChain %9 %29 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %9 %29 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpExtInst %1 32 %383 
                                Private f32* %385 = OpAccessChain %9 %29 
                                                      OpStore %385 %384 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 0 0 
                                       f32_4 %388 = OpLoad %76 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_3 %390 = OpFMul %387 %389 
                                       f32_4 %391 = OpLoad %9 
                                       f32_4 %392 = OpVectorShuffle %391 %390 4 5 6 3 
                                                      OpStore %9 %392 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                                      OpStore vs_TEXCOORD1 %395 
                                Private f32* %397 = OpAccessChain %9 %20 
                                         f32 %398 = OpLoad %397 
                                Private f32* %399 = OpAccessChain %9 %20 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFMul %398 %400 
                                                      OpStore %396 %401 
                                Private f32* %402 = OpAccessChain %9 %29 
                                         f32 %403 = OpLoad %402 
                                Private f32* %404 = OpAccessChain %9 %29 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %403 %405 
                                         f32 %407 = OpLoad %396 
                                         f32 %408 = OpFNegate %407 
                                         f32 %409 = OpFAdd %406 %408 
                                                      OpStore %396 %409 
                                       f32_4 %410 = OpLoad %9 
                                       f32_4 %411 = OpVectorShuffle %410 %410 1 2 2 0 
                                       f32_4 %412 = OpLoad %9 
                                       f32_4 %413 = OpVectorShuffle %412 %412 0 1 2 2 
                                       f32_4 %414 = OpFMul %411 %413 
                                                      OpStore %76 %414 
                              Uniform f32_4* %415 = OpAccessChain %18 %180 
                                       f32_4 %416 = OpLoad %415 
                                       f32_4 %417 = OpLoad %76 
                                         f32 %418 = OpDot %416 %417 
                                Private f32* %419 = OpAccessChain %9 %29 
                                                      OpStore %419 %418 
                              Uniform f32_4* %420 = OpAccessChain %18 %189 
                                       f32_4 %421 = OpLoad %420 
                                       f32_4 %422 = OpLoad %76 
                                         f32 %423 = OpDot %421 %422 
                                Private f32* %424 = OpAccessChain %9 %20 
                                                      OpStore %424 %423 
                              Uniform f32_4* %426 = OpAccessChain %18 %425 
                                       f32_4 %427 = OpLoad %426 
                                       f32_4 %428 = OpLoad %76 
                                         f32 %429 = OpDot %427 %428 
                                Private f32* %430 = OpAccessChain %9 %240 
                                                      OpStore %430 %429 
                              Uniform f32_4* %433 = OpAccessChain %18 %432 
                                       f32_4 %434 = OpLoad %433 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                         f32 %436 = OpLoad %396 
                                       f32_3 %437 = OpCompositeConstruct %436 %436 %436 
                                       f32_3 %438 = OpFMul %435 %437 
                                       f32_4 %439 = OpLoad %9 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpFAdd %438 %440 
                                                      OpStore vs_TEXCOORD3 %441 
                                Private f32* %442 = OpAccessChain %114 %20 
                                         f32 %443 = OpLoad %442 
                                Uniform f32* %444 = OpAccessChain %18 %168 %29 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpFMul %443 %445 
                                Private f32* %447 = OpAccessChain %9 %29 
                                                      OpStore %447 %446 
                                       f32_4 %448 = OpLoad %114 
                                       f32_2 %449 = OpVectorShuffle %448 %448 0 3 
                                       f32_2 %451 = OpFMul %449 %450 
                                       f32_4 %452 = OpLoad %76 
                                       f32_4 %453 = OpVectorShuffle %452 %451 4 1 5 3 
                                                      OpStore %76 %453 
                                Private f32* %454 = OpAccessChain %9 %29 
                                         f32 %455 = OpLoad %454 
                                         f32 %456 = OpFMul %455 %294 
                                Private f32* %457 = OpAccessChain %76 %154 
                                                      OpStore %457 %456 
                                       f32_4 %458 = OpLoad %76 
                                       f32_2 %459 = OpVectorShuffle %458 %458 2 2 
                                       f32_4 %460 = OpLoad %76 
                                       f32_2 %461 = OpVectorShuffle %460 %460 0 3 
                                       f32_2 %462 = OpFAdd %459 %461 
                                       f32_4 %463 = OpLoad vs_TEXCOORD5 
                                       f32_4 %464 = OpVectorShuffle %463 %462 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %464 
                                                      OpStore vs_TEXCOORD6 %333 
                                 Output f32* %466 = OpAccessChain %234 %19 %20 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFNegate %467 
                                 Output f32* %469 = OpAccessChain %234 %19 %20 
                                                      OpStore %469 %468 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1034
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %60 %136 %170 %221 %984 %1019 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpMemberDecorate %18 17 Offset 18 
                                                      OpMemberDecorate %18 18 Offset 18 
                                                      OpMemberDecorate %18 19 Offset 18 
                                                      OpMemberDecorate %18 20 Offset 18 
                                                      OpMemberDecorate %18 21 Offset 18 
                                                      OpMemberDecorate %18 22 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate vs_TEXCOORD5 Location 136 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate vs_TEXCOORD3 Location 221 
                                                      OpDecorate %373 DescriptorSet 373 
                                                      OpDecorate %373 Binding 373 
                                                      OpDecorate %375 DescriptorSet 375 
                                                      OpDecorate %375 Binding 375 
                                                      OpDecorate %527 DescriptorSet 527 
                                                      OpDecorate %527 Binding 527 
                                                      OpDecorate vs_TEXCOORD4 Location 984 
                                                      OpDecorate %1019 Location 1019 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %17 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %10 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_4* %38 = OpVariable Private 
                                              %46 = OpTypePointer Private %10 
                               Private f32_3* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypePointer UniformConstant %48 
         UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampler 
                                              %53 = OpTypePointer UniformConstant %52 
                     UniformConstant sampler* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampledImage %48 
                                              %58 = OpTypeVector %6 2 
                                              %59 = OpTypePointer Input %58 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %64 = OpVariable Private 
                                          i32 %66 = OpConstant 22 
                                              %67 = OpTypePointer Uniform %7 
                               Private f32_4* %72 = OpVariable Private 
                                          i32 %73 = OpConstant 8 
                                          u32 %74 = OpConstant 2 
                                              %75 = OpTypePointer Uniform %6 
                                          u32 %78 = OpConstant 0 
                                          i32 %80 = OpConstant 1 
                                          u32 %83 = OpConstant 1 
                                          i32 %85 = OpConstant 2 
                                 Private f32* %89 = OpVariable Private 
                                          i32 %96 = OpConstant 7 
                                Private f32* %104 = OpVariable Private 
                                         u32 %116 = OpConstant 3 
                                         i32 %124 = OpConstant 6 
                                         f32 %132 = OpConstant 3.674022E-40 
                                         f32 %133 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                Private f32* %153 = OpVariable Private 
                                         i32 %162 = OpConstant 20 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %187 = OpVariable Private 
                                         i32 %190 = OpConstant 19 
                              Private f32_4* %195 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                         i32 %201 = OpConstant 3 
                                         i32 %207 = OpConstant 4 
                                         i32 %213 = OpConstant 5 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %228 = OpConstantComposite %132 %132 %132 
                                             %232 = OpTypeBool 
                                             %233 = OpTypePointer Private %232 
                               Private bool* %234 = OpVariable Private 
                                         i32 %235 = OpConstant 13 
                              Private f32_3* %256 = OpVariable Private 
                                         i32 %259 = OpConstant 11 
                              Private f32_3* %268 = OpVariable Private 
                                         i32 %271 = OpConstant 12 
                                             %280 = OpTypeVector %232 3 
                                             %281 = OpTypePointer Private %280 
                             Private bool_3* %282 = OpVariable Private 
                                       f32_4 %283 = OpConstantComposite %132 %132 %132 %132 
                                             %286 = OpTypeVector %232 4 
                                             %289 = OpTypePointer Function %10 
                                             %294 = OpTypePointer Function %6 
                                         f32 %361 = OpConstant 3.674022E-40 
                                         f32 %363 = OpConstant 3.674022E-40 
                                         f32 %369 = OpConstant 3.674022E-40 
                                             %371 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %372 = OpTypePointer UniformConstant %371 
      UniformConstant read_only TextureCube* %373 = OpVariable UniformConstant 
                    UniformConstant sampler* %375 = OpVariable UniformConstant 
                                             %377 = OpTypeSampledImage %371 
                                         f32 %385 = OpConstant 3.674022E-40 
                                         i32 %387 = OpConstant 14 
                               Private bool* %410 = OpVariable Private 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         i32 %418 = OpConstant 17 
                                Private f32* %425 = OpVariable Private 
                              Private f32_3* %438 = OpVariable Private 
                                         i32 %441 = OpConstant 15 
                              Private f32_3* %449 = OpVariable Private 
                                         i32 %452 = OpConstant 16 
                             Private bool_3* %460 = OpVariable Private 
      UniformConstant read_only TextureCube* %527 = OpVariable UniformConstant 
                                         i32 %538 = OpConstant 18 
                                         f32 %599 = OpConstant 3.674022E-40 
                                       f32_3 %600 = OpConstantComposite %599 %599 %599 
                                         i32 %604 = OpConstant 21 
                                         f32 %619 = OpConstant 3.674022E-40 
                                       f32_3 %620 = OpConstantComposite %619 %619 %619 
                                         f32 %627 = OpConstant 3.674022E-40 
                                         f32 %651 = OpConstant 3.674022E-40 
                                Private f32* %678 = OpVariable Private 
                              Private f32_3* %697 = OpVariable Private 
                                         f32 %712 = OpConstant 3.674022E-40 
                                Private f32* %715 = OpVariable Private 
                                Private f32* %720 = OpVariable Private 
                                         f32 %763 = OpConstant 3.674022E-40 
                                         f32 %791 = OpConstant 3.674022E-40 
                                         f32 %793 = OpConstant 3.674022E-40 
                                         f32 %810 = OpConstant 3.674022E-40 
                                         f32 %815 = OpConstant 3.674022E-40 
                                         f32 %833 = OpConstant 3.674022E-40 
                               Private bool* %849 = OpVariable Private 
                                       f32_3 %913 = OpConstantComposite %133 %133 %133 
                                             %983 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %999 = OpConstant 10 
                                        i32 %1010 = OpConstant 9 
                                            %1018 = OpTypePointer Output %7 
                              Output f32_4* %1019 = OpVariable Output 
                                            %1031 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %290 = OpVariable Function 
                               Function f32* %295 = OpVariable Function 
                               Function f32* %307 = OpVariable Function 
                               Function f32* %319 = OpVariable Function 
                             Function f32_3* %465 = OpVariable Function 
                               Function f32* %469 = OpVariable Function 
                               Function f32* %481 = OpVariable Function 
                               Function f32* %493 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %14 %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
                                                      OpStore %9 %28 
                                        f32_4 %31 = OpLoad %9 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                          f32 %35 = OpDot %32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                          f32 %37 = OpExtInst %1 32 %36 
                                                      OpStore %30 %37 
                                          f32 %39 = OpLoad %30 
                                        f32_3 %40 = OpCompositeConstruct %39 %39 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %38 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 6 3 
                                                      OpStore %38 %45 
                          read_only Texture2D %51 = OpLoad %50 
                                      sampler %55 = OpLoad %54 
                   read_only Texture2DSampled %57 = OpSampledImage %51 %55 
                                        f32_2 %61 = OpLoad vs_TEXCOORD0 
                                        f32_4 %62 = OpImageSampleImplicitLod %57 %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                                      OpStore %47 %63 
                                        f32_3 %65 = OpLoad %47 
                               Uniform f32_4* %68 = OpAccessChain %20 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                                      OpStore %64 %71 
                                 Uniform f32* %76 = OpAccessChain %20 %73 %22 %74 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %72 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %20 %73 %80 %74 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %84 = OpAccessChain %72 %83 
                                                      OpStore %84 %82 
                                 Uniform f32* %86 = OpAccessChain %20 %73 %85 %74 
                                          f32 %87 = OpLoad %86 
                                 Private f32* %88 = OpAccessChain %72 %74 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %72 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                                      OpStore %89 %94 
                                        f32_3 %95 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %97 = OpAccessChain %20 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpFAdd %95 %100 
                                       f32_4 %102 = OpLoad %72 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %72 %103 
                                       f32_4 %105 = OpLoad %72 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %106 %108 
                                                      OpStore %104 %109 
                                         f32 %110 = OpLoad %104 
                                         f32 %111 = OpExtInst %1 31 %110 
                                                      OpStore %104 %111 
                                         f32 %112 = OpLoad %89 
                                         f32 %113 = OpFNegate %112 
                                         f32 %114 = OpLoad %104 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %104 %115 
                                Uniform f32* %117 = OpAccessChain %20 %96 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpLoad %104 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %121 = OpLoad %89 
                                         f32 %122 = OpFAdd %120 %121 
                                                      OpStore %89 %122 
                                         f32 %123 = OpLoad %89 
                                Uniform f32* %125 = OpAccessChain %20 %124 %74 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFMul %123 %126 
                                Uniform f32* %128 = OpAccessChain %20 %124 %116 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFAdd %127 %129 
                                                      OpStore %89 %130 
                                         f32 %131 = OpLoad %89 
                                         f32 %134 = OpExtInst %1 43 %131 %132 %133 
                                                      OpStore %89 %134 
                                       f32_4 %137 = OpLoad vs_TEXCOORD5 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_4 %139 = OpLoad vs_TEXCOORD5 
                                       f32_2 %140 = OpVectorShuffle %139 %139 3 3 
                                       f32_2 %141 = OpFDiv %138 %140 
                                       f32_4 %142 = OpLoad %72 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %72 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_4 %149 = OpLoad %72 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_4 %151 = OpImageSampleImplicitLod %148 %150 
                                         f32 %152 = OpCompositeExtract %151 0 
                                                      OpStore %104 %152 
                                         f32 %154 = OpLoad %104 
                                         f32 %155 = OpFNegate %154 
                                         f32 %156 = OpFAdd %155 %133 
                                                      OpStore %153 %156 
                                         f32 %157 = OpLoad %89 
                                         f32 %158 = OpLoad %153 
                                         f32 %159 = OpFMul %157 %158 
                                         f32 %160 = OpLoad %104 
                                         f32 %161 = OpFAdd %159 %160 
                                                      OpStore %89 %161 
                                Uniform f32* %163 = OpAccessChain %20 %162 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFNegate %164 
                                         f32 %166 = OpFAdd %165 %133 
                                                      OpStore %104 %166 
                                       f32_4 %167 = OpLoad %38 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFNegate %168 
                                       f32_3 %171 = OpLoad vs_TEXCOORD1 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %153 %172 
                                         f32 %173 = OpLoad %153 
                                         f32 %174 = OpLoad %153 
                                         f32 %175 = OpFAdd %173 %174 
                                                      OpStore %153 %175 
                                       f32_3 %176 = OpLoad vs_TEXCOORD1 
                                         f32 %177 = OpLoad %153 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFMul %176 %179 
                                       f32_4 %181 = OpLoad %38 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFNegate %182 
                                       f32_3 %184 = OpFAdd %180 %183 
                                       f32_4 %185 = OpLoad %72 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %72 %186 
                                         f32 %188 = OpLoad %89 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                              Uniform f32_4* %191 = OpAccessChain %20 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %189 %193 
                                                      OpStore %187 %194 
                                       f32_3 %196 = OpLoad vs_TEXCOORD1 
                                       f32_4 %197 = OpLoad %195 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %195 %198 
                                Private f32* %199 = OpAccessChain %195 %116 
                                                      OpStore %199 %133 
                              Uniform f32_4* %202 = OpAccessChain %20 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpLoad %195 
                                         f32 %205 = OpDot %203 %204 
                                Private f32* %206 = OpAccessChain %200 %78 
                                                      OpStore %206 %205 
                              Uniform f32_4* %208 = OpAccessChain %20 %207 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %195 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %200 %83 
                                                      OpStore %212 %211 
                              Uniform f32_4* %214 = OpAccessChain %20 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %195 
                                         f32 %217 = OpDot %215 %216 
                                Private f32* %218 = OpAccessChain %200 %74 
                                                      OpStore %218 %217 
                                       f32_4 %219 = OpLoad %200 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %222 = OpLoad vs_TEXCOORD3 
                                       f32_3 %223 = OpFAdd %220 %222 
                                       f32_4 %224 = OpLoad %195 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %195 %225 
                                       f32_4 %226 = OpLoad %195 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %229 = OpExtInst %1 40 %227 %228 
                                       f32_4 %230 = OpLoad %195 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %195 %231 
                                Uniform f32* %236 = OpAccessChain %20 %235 %116 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdLessThan %132 %237 
                                                      OpStore %234 %238 
                                        bool %239 = OpLoad %234 
                                                      OpSelectionMerge %241 None 
                                                      OpBranchConditional %239 %240 %354 
                                             %240 = OpLabel 
                                       f32_4 %242 = OpLoad %72 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_4 %244 = OpLoad %72 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                         f32 %246 = OpDot %243 %245 
                                                      OpStore %89 %246 
                                         f32 %247 = OpLoad %89 
                                         f32 %248 = OpExtInst %1 32 %247 
                                                      OpStore %89 %248 
                                         f32 %249 = OpLoad %89 
                                       f32_3 %250 = OpCompositeConstruct %249 %249 %249 
                                       f32_4 %251 = OpLoad %72 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_4 %254 = OpLoad %200 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %200 %255 
                                       f32_3 %257 = OpLoad vs_TEXCOORD2 
                                       f32_3 %258 = OpFNegate %257 
                              Uniform f32_4* %260 = OpAccessChain %20 %259 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %258 %262 
                                                      OpStore %256 %263 
                                       f32_3 %264 = OpLoad %256 
                                       f32_4 %265 = OpLoad %200 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFDiv %264 %266 
                                                      OpStore %256 %267 
                                       f32_3 %269 = OpLoad vs_TEXCOORD2 
                                       f32_3 %270 = OpFNegate %269 
                              Uniform f32_4* %272 = OpAccessChain %20 %271 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpFAdd %270 %274 
                                                      OpStore %268 %275 
                                       f32_3 %276 = OpLoad %268 
                                       f32_4 %277 = OpLoad %200 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFDiv %276 %278 
                                                      OpStore %268 %279 
                                       f32_4 %284 = OpLoad %200 
                                       f32_4 %285 = OpVectorShuffle %284 %284 0 1 2 0 
                                      bool_4 %287 = OpFOrdLessThan %283 %285 
                                      bool_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                                      OpStore %282 %288 
                                       f32_3 %291 = OpLoad %256 
                                                      OpStore %290 %291 
                               Private bool* %292 = OpAccessChain %282 %78 
                                        bool %293 = OpLoad %292 
                                                      OpSelectionMerge %297 None 
                                                      OpBranchConditional %293 %296 %300 
                                             %296 = OpLabel 
                                Private f32* %298 = OpAccessChain %256 %78 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %295 %299 
                                                      OpBranch %297 
                                             %300 = OpLabel 
                                Private f32* %301 = OpAccessChain %268 %78 
                                         f32 %302 = OpLoad %301 
                                                      OpStore %295 %302 
                                                      OpBranch %297 
                                             %297 = OpLabel 
                                         f32 %303 = OpLoad %295 
                               Function f32* %304 = OpAccessChain %290 %78 
                                                      OpStore %304 %303 
                               Private bool* %305 = OpAccessChain %282 %83 
                                        bool %306 = OpLoad %305 
                                                      OpSelectionMerge %309 None 
                                                      OpBranchConditional %306 %308 %312 
                                             %308 = OpLabel 
                                Private f32* %310 = OpAccessChain %256 %83 
                                         f32 %311 = OpLoad %310 
                                                      OpStore %307 %311 
                                                      OpBranch %309 
                                             %312 = OpLabel 
                                Private f32* %313 = OpAccessChain %268 %83 
                                         f32 %314 = OpLoad %313 
                                                      OpStore %307 %314 
                                                      OpBranch %309 
                                             %309 = OpLabel 
                                         f32 %315 = OpLoad %307 
                               Function f32* %316 = OpAccessChain %290 %83 
                                                      OpStore %316 %315 
                               Private bool* %317 = OpAccessChain %282 %74 
                                        bool %318 = OpLoad %317 
                                                      OpSelectionMerge %321 None 
                                                      OpBranchConditional %318 %320 %324 
                                             %320 = OpLabel 
                                Private f32* %322 = OpAccessChain %256 %74 
                                         f32 %323 = OpLoad %322 
                                                      OpStore %319 %323 
                                                      OpBranch %321 
                                             %324 = OpLabel 
                                Private f32* %325 = OpAccessChain %268 %74 
                                         f32 %326 = OpLoad %325 
                                                      OpStore %319 %326 
                                                      OpBranch %321 
                                             %321 = OpLabel 
                                         f32 %327 = OpLoad %319 
                               Function f32* %328 = OpAccessChain %290 %74 
                                                      OpStore %328 %327 
                                       f32_3 %329 = OpLoad %290 
                                                      OpStore %256 %329 
                                Private f32* %330 = OpAccessChain %256 %83 
                                         f32 %331 = OpLoad %330 
                                Private f32* %332 = OpAccessChain %256 %78 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpExtInst %1 37 %331 %333 
                                                      OpStore %89 %334 
                                Private f32* %335 = OpAccessChain %256 %74 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpLoad %89 
                                         f32 %338 = OpExtInst %1 37 %336 %337 
                                                      OpStore %89 %338 
                                       f32_3 %339 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %340 = OpAccessChain %20 %235 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFNegate %342 
                                       f32_3 %344 = OpFAdd %339 %343 
                                                      OpStore %256 %344 
                                       f32_4 %345 = OpLoad %200 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                         f32 %347 = OpLoad %89 
                                       f32_3 %348 = OpCompositeConstruct %347 %347 %347 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_3 %350 = OpLoad %256 
                                       f32_3 %351 = OpFAdd %349 %350 
                                       f32_4 %352 = OpLoad %200 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %200 %353 
                                                      OpBranch %241 
                                             %354 = OpLabel 
                                       f32_4 %355 = OpLoad %72 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_4 %357 = OpLoad %200 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %200 %358 
                                                      OpBranch %241 
                                             %241 = OpLabel 
                                         f32 %359 = OpLoad %104 
                                         f32 %360 = OpFNegate %359 
                                         f32 %362 = OpFMul %360 %361 
                                         f32 %364 = OpFAdd %362 %363 
                                                      OpStore %89 %364 
                                         f32 %365 = OpLoad %89 
                                         f32 %366 = OpLoad %104 
                                         f32 %367 = OpFMul %365 %366 
                                                      OpStore %89 %367 
                                         f32 %368 = OpLoad %89 
                                         f32 %370 = OpFMul %368 %369 
                                                      OpStore %89 %370 
                       read_only TextureCube %374 = OpLoad %373 
                                     sampler %376 = OpLoad %375 
                read_only TextureCubeSampled %378 = OpSampledImage %374 %376 
                                       f32_4 %379 = OpLoad %200 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                         f32 %381 = OpLoad %89 
                                       f32_4 %382 = OpImageSampleExplicitLod %378 %380 Lod %7 
                                                      OpStore %200 %382 
                                Private f32* %383 = OpAccessChain %200 %116 
                                         f32 %384 = OpLoad %383 
                                         f32 %386 = OpFAdd %384 %385 
                                                      OpStore %153 %386 
                                Uniform f32* %388 = OpAccessChain %20 %387 %116 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpLoad %153 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %392 = OpFAdd %391 %133 
                                                      OpStore %153 %392 
                                         f32 %393 = OpLoad %153 
                                         f32 %394 = OpExtInst %1 30 %393 
                                                      OpStore %153 %394 
                                         f32 %395 = OpLoad %153 
                                Uniform f32* %396 = OpAccessChain %20 %387 %83 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %395 %397 
                                                      OpStore %153 %398 
                                         f32 %399 = OpLoad %153 
                                         f32 %400 = OpExtInst %1 29 %399 
                                                      OpStore %153 %400 
                                         f32 %401 = OpLoad %153 
                                Uniform f32* %402 = OpAccessChain %20 %387 %78 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                                      OpStore %153 %404 
                                       f32_4 %405 = OpLoad %200 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                         f32 %407 = OpLoad %153 
                                       f32_3 %408 = OpCompositeConstruct %407 %407 %407 
                                       f32_3 %409 = OpFMul %406 %408 
                                                      OpStore %256 %409 
                                Uniform f32* %411 = OpAccessChain %20 %271 %116 
                                         f32 %412 = OpLoad %411 
                                        bool %414 = OpFOrdLessThan %412 %413 
                                                      OpStore %410 %414 
                                        bool %415 = OpLoad %410 
                                                      OpSelectionMerge %417 None 
                                                      OpBranchConditional %415 %416 %417 
                                             %416 = OpLabel 
                                Uniform f32* %419 = OpAccessChain %20 %418 %116 
                                         f32 %420 = OpLoad %419 
                                        bool %421 = OpFOrdLessThan %132 %420 
                                                      OpStore %410 %421 
                                        bool %422 = OpLoad %410 
                                                      OpSelectionMerge %424 None 
                                                      OpBranchConditional %422 %423 %424 
                                             %423 = OpLabel 
                                       f32_4 %426 = OpLoad %72 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_4 %428 = OpLoad %72 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                         f32 %430 = OpDot %427 %429 
                                                      OpStore %425 %430 
                                         f32 %431 = OpLoad %425 
                                         f32 %432 = OpExtInst %1 32 %431 
                                                      OpStore %425 %432 
                                         f32 %433 = OpLoad %425 
                                       f32_3 %434 = OpCompositeConstruct %433 %433 %433 
                                       f32_4 %435 = OpLoad %72 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpFMul %434 %436 
                                                      OpStore %268 %437 
                                       f32_3 %439 = OpLoad vs_TEXCOORD2 
                                       f32_3 %440 = OpFNegate %439 
                              Uniform f32_4* %442 = OpAccessChain %20 %441 
                                       f32_4 %443 = OpLoad %442 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_3 %445 = OpFAdd %440 %444 
                                                      OpStore %438 %445 
                                       f32_3 %446 = OpLoad %438 
                                       f32_3 %447 = OpLoad %268 
                                       f32_3 %448 = OpFDiv %446 %447 
                                                      OpStore %438 %448 
                                       f32_3 %450 = OpLoad vs_TEXCOORD2 
                                       f32_3 %451 = OpFNegate %450 
                              Uniform f32_4* %453 = OpAccessChain %20 %452 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_3 %456 = OpFAdd %451 %455 
                                                      OpStore %449 %456 
                                       f32_3 %457 = OpLoad %449 
                                       f32_3 %458 = OpLoad %268 
                                       f32_3 %459 = OpFDiv %457 %458 
                                                      OpStore %449 %459 
                                       f32_3 %461 = OpLoad %268 
                                       f32_4 %462 = OpVectorShuffle %461 %461 0 1 2 0 
                                      bool_4 %463 = OpFOrdLessThan %283 %462 
                                      bool_3 %464 = OpVectorShuffle %463 %463 0 1 2 
                                                      OpStore %460 %464 
                                       f32_3 %466 = OpLoad %438 
                                                      OpStore %465 %466 
                               Private bool* %467 = OpAccessChain %460 %78 
                                        bool %468 = OpLoad %467 
                                                      OpSelectionMerge %471 None 
                                                      OpBranchConditional %468 %470 %474 
                                             %470 = OpLabel 
                                Private f32* %472 = OpAccessChain %438 %78 
                                         f32 %473 = OpLoad %472 
                                                      OpStore %469 %473 
                                                      OpBranch %471 
                                             %474 = OpLabel 
                                Private f32* %475 = OpAccessChain %449 %78 
                                         f32 %476 = OpLoad %475 
                                                      OpStore %469 %476 
                                                      OpBranch %471 
                                             %471 = OpLabel 
                                         f32 %477 = OpLoad %469 
                               Function f32* %478 = OpAccessChain %465 %78 
                                                      OpStore %478 %477 
                               Private bool* %479 = OpAccessChain %460 %83 
                                        bool %480 = OpLoad %479 
                                                      OpSelectionMerge %483 None 
                                                      OpBranchConditional %480 %482 %486 
                                             %482 = OpLabel 
                                Private f32* %484 = OpAccessChain %438 %83 
                                         f32 %485 = OpLoad %484 
                                                      OpStore %481 %485 
                                                      OpBranch %483 
                                             %486 = OpLabel 
                                Private f32* %487 = OpAccessChain %449 %83 
                                         f32 %488 = OpLoad %487 
                                                      OpStore %481 %488 
                                                      OpBranch %483 
                                             %483 = OpLabel 
                                         f32 %489 = OpLoad %481 
                               Function f32* %490 = OpAccessChain %465 %83 
                                                      OpStore %490 %489 
                               Private bool* %491 = OpAccessChain %460 %74 
                                        bool %492 = OpLoad %491 
                                                      OpSelectionMerge %495 None 
                                                      OpBranchConditional %492 %494 %498 
                                             %494 = OpLabel 
                                Private f32* %496 = OpAccessChain %438 %74 
                                         f32 %497 = OpLoad %496 
                                                      OpStore %493 %497 
                                                      OpBranch %495 
                                             %498 = OpLabel 
                                Private f32* %499 = OpAccessChain %449 %74 
                                         f32 %500 = OpLoad %499 
                                                      OpStore %493 %500 
                                                      OpBranch %495 
                                             %495 = OpLabel 
                                         f32 %501 = OpLoad %493 
                               Function f32* %502 = OpAccessChain %465 %74 
                                                      OpStore %502 %501 
                                       f32_3 %503 = OpLoad %465 
                                                      OpStore %438 %503 
                                Private f32* %504 = OpAccessChain %438 %83 
                                         f32 %505 = OpLoad %504 
                                Private f32* %506 = OpAccessChain %438 %78 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpExtInst %1 37 %505 %507 
                                                      OpStore %425 %508 
                                Private f32* %509 = OpAccessChain %438 %74 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpLoad %425 
                                         f32 %512 = OpExtInst %1 37 %510 %511 
                                                      OpStore %425 %512 
                                       f32_3 %513 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %514 = OpAccessChain %20 %418 
                                       f32_4 %515 = OpLoad %514 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFNegate %516 
                                       f32_3 %518 = OpFAdd %513 %517 
                                                      OpStore %438 %518 
                                       f32_3 %519 = OpLoad %268 
                                         f32 %520 = OpLoad %425 
                                       f32_3 %521 = OpCompositeConstruct %520 %520 %520 
                                       f32_3 %522 = OpFMul %519 %521 
                                       f32_3 %523 = OpLoad %438 
                                       f32_3 %524 = OpFAdd %522 %523 
                                       f32_4 %525 = OpLoad %72 
                                       f32_4 %526 = OpVectorShuffle %525 %524 4 5 6 3 
                                                      OpStore %72 %526 
                                                      OpBranch %424 
                                             %424 = OpLabel 
                       read_only TextureCube %528 = OpLoad %527 
                                     sampler %529 = OpLoad %375 
                read_only TextureCubeSampled %530 = OpSampledImage %528 %529 
                                       f32_4 %531 = OpLoad %72 
                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
                                         f32 %533 = OpLoad %89 
                                       f32_4 %534 = OpImageSampleExplicitLod %530 %532 Lod %7 
                                                      OpStore %72 %534 
                                Private f32* %535 = OpAccessChain %72 %116 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFAdd %536 %385 
                                                      OpStore %89 %537 
                                Uniform f32* %539 = OpAccessChain %20 %538 %116 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpLoad %89 
                                         f32 %542 = OpFMul %540 %541 
                                         f32 %543 = OpFAdd %542 %133 
                                                      OpStore %89 %543 
                                         f32 %544 = OpLoad %89 
                                         f32 %545 = OpExtInst %1 30 %544 
                                                      OpStore %89 %545 
                                         f32 %546 = OpLoad %89 
                                Uniform f32* %547 = OpAccessChain %20 %538 %83 
                                         f32 %548 = OpLoad %547 
                                         f32 %549 = OpFMul %546 %548 
                                                      OpStore %89 %549 
                                         f32 %550 = OpLoad %89 
                                         f32 %551 = OpExtInst %1 29 %550 
                                                      OpStore %89 %551 
                                         f32 %552 = OpLoad %89 
                                Uniform f32* %553 = OpAccessChain %20 %538 %78 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpFMul %552 %554 
                                                      OpStore %89 %555 
                                       f32_4 %556 = OpLoad %72 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpLoad %89 
                                       f32_3 %559 = OpCompositeConstruct %558 %558 %558 
                                       f32_3 %560 = OpFMul %557 %559 
                                       f32_4 %561 = OpLoad %72 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 5 6 3 
                                                      OpStore %72 %562 
                                         f32 %563 = OpLoad %153 
                                       f32_3 %564 = OpCompositeConstruct %563 %563 %563 
                                       f32_4 %565 = OpLoad %200 
                                       f32_3 %566 = OpVectorShuffle %565 %565 0 1 2 
                                       f32_3 %567 = OpFMul %564 %566 
                                       f32_4 %568 = OpLoad %72 
                                       f32_3 %569 = OpVectorShuffle %568 %568 0 1 2 
                                       f32_3 %570 = OpFNegate %569 
                                       f32_3 %571 = OpFAdd %567 %570 
                                       f32_4 %572 = OpLoad %200 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %200 %573 
                              Uniform f32_4* %574 = OpAccessChain %20 %271 
                                       f32_4 %575 = OpLoad %574 
                                       f32_3 %576 = OpVectorShuffle %575 %575 3 3 3 
                                       f32_4 %577 = OpLoad %200 
                                       f32_3 %578 = OpVectorShuffle %577 %577 0 1 2 
                                       f32_3 %579 = OpFMul %576 %578 
                                       f32_4 %580 = OpLoad %72 
                                       f32_3 %581 = OpVectorShuffle %580 %580 0 1 2 
                                       f32_3 %582 = OpFAdd %579 %581 
                                                      OpStore %256 %582 
                                                      OpBranch %417 
                                             %417 = OpLabel 
                                       f32_3 %583 = OpLoad vs_TEXCOORD1 
                                       f32_3 %584 = OpLoad vs_TEXCOORD1 
                                         f32 %585 = OpDot %583 %584 
                                                      OpStore %89 %585 
                                         f32 %586 = OpLoad %89 
                                         f32 %587 = OpExtInst %1 32 %586 
                                                      OpStore %89 %587 
                                         f32 %588 = OpLoad %89 
                                       f32_3 %589 = OpCompositeConstruct %588 %588 %588 
                                       f32_3 %590 = OpLoad vs_TEXCOORD1 
                                       f32_3 %591 = OpFMul %589 %590 
                                       f32_4 %592 = OpLoad %72 
                                       f32_4 %593 = OpVectorShuffle %592 %591 4 5 6 3 
                                                      OpStore %72 %593 
                                       f32_3 %594 = OpLoad %47 
                              Uniform f32_4* %595 = OpAccessChain %20 %66 
                                       f32_4 %596 = OpLoad %595 
                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
                                       f32_3 %598 = OpFMul %594 %597 
                                       f32_3 %601 = OpFAdd %598 %600 
                                       f32_4 %602 = OpLoad %200 
                                       f32_4 %603 = OpVectorShuffle %602 %601 4 5 6 3 
                                                      OpStore %200 %603 
                                Uniform f32* %605 = OpAccessChain %20 %604 
                                         f32 %606 = OpLoad %605 
                                Uniform f32* %607 = OpAccessChain %20 %604 
                                         f32 %608 = OpLoad %607 
                                Uniform f32* %609 = OpAccessChain %20 %604 
                                         f32 %610 = OpLoad %609 
                                       f32_3 %611 = OpCompositeConstruct %606 %608 %610 
                                         f32 %612 = OpCompositeExtract %611 0 
                                         f32 %613 = OpCompositeExtract %611 1 
                                         f32 %614 = OpCompositeExtract %611 2 
                                       f32_3 %615 = OpCompositeConstruct %612 %613 %614 
                                       f32_4 %616 = OpLoad %200 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                                       f32_3 %618 = OpFMul %615 %617 
                                       f32_3 %621 = OpFAdd %618 %620 
                                       f32_4 %622 = OpLoad %200 
                                       f32_4 %623 = OpVectorShuffle %622 %621 4 5 6 3 
                                                      OpStore %200 %623 
                                Uniform f32* %624 = OpAccessChain %20 %604 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpFNegate %625 
                                         f32 %628 = OpFMul %626 %627 
                                         f32 %629 = OpFAdd %628 %627 
                                                      OpStore %89 %629 
                                         f32 %630 = OpLoad %89 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpLoad %64 
                                       f32_3 %633 = OpFMul %631 %632 
                                                      OpStore %64 %633 
                                       f32_4 %634 = OpLoad %9 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                         f32 %636 = OpLoad %30 
                                       f32_3 %637 = OpCompositeConstruct %636 %636 %636 
                                       f32_3 %638 = OpFMul %635 %637 
                              Uniform f32_4* %639 = OpAccessChain %20 %85 
                                       f32_4 %640 = OpLoad %639 
                                       f32_3 %641 = OpVectorShuffle %640 %640 0 1 2 
                                       f32_3 %642 = OpFAdd %638 %641 
                                       f32_4 %643 = OpLoad %9 
                                       f32_4 %644 = OpVectorShuffle %643 %642 4 5 6 3 
                                                      OpStore %9 %644 
                                       f32_4 %645 = OpLoad %9 
                                       f32_3 %646 = OpVectorShuffle %645 %645 0 1 2 
                                       f32_4 %647 = OpLoad %9 
                                       f32_3 %648 = OpVectorShuffle %647 %647 0 1 2 
                                         f32 %649 = OpDot %646 %648 
                                                      OpStore %30 %649 
                                         f32 %650 = OpLoad %30 
                                         f32 %652 = OpExtInst %1 40 %650 %651 
                                                      OpStore %30 %652 
                                         f32 %653 = OpLoad %30 
                                         f32 %654 = OpExtInst %1 32 %653 
                                                      OpStore %30 %654 
                                         f32 %655 = OpLoad %30 
                                       f32_3 %656 = OpCompositeConstruct %655 %655 %655 
                                       f32_4 %657 = OpLoad %9 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                       f32_3 %659 = OpFMul %656 %658 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %659 4 5 6 3 
                                                      OpStore %9 %661 
                                       f32_4 %662 = OpLoad %72 
                                       f32_3 %663 = OpVectorShuffle %662 %662 0 1 2 
                                       f32_4 %664 = OpLoad %38 
                                       f32_3 %665 = OpVectorShuffle %664 %664 0 1 2 
                                         f32 %666 = OpDot %663 %665 
                                                      OpStore %30 %666 
                                       f32_4 %667 = OpLoad %72 
                                       f32_3 %668 = OpVectorShuffle %667 %667 0 1 2 
                              Uniform f32_4* %669 = OpAccessChain %20 %85 
                                       f32_4 %670 = OpLoad %669 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                         f32 %672 = OpDot %668 %671 
                                Private f32* %673 = OpAccessChain %38 %78 
                                                      OpStore %673 %672 
                                Private f32* %674 = OpAccessChain %38 %78 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpExtInst %1 43 %675 %132 %133 
                                Private f32* %677 = OpAccessChain %38 %78 
                                                      OpStore %677 %676 
                                       f32_4 %679 = OpLoad %72 
                                       f32_3 %680 = OpVectorShuffle %679 %679 0 1 2 
                                       f32_4 %681 = OpLoad %9 
                                       f32_3 %682 = OpVectorShuffle %681 %681 0 1 2 
                                         f32 %683 = OpDot %680 %682 
                                                      OpStore %678 %683 
                                         f32 %684 = OpLoad %678 
                                         f32 %685 = OpExtInst %1 43 %684 %132 %133 
                                                      OpStore %678 %685 
                              Uniform f32_4* %686 = OpAccessChain %20 %85 
                                       f32_4 %687 = OpLoad %686 
                                       f32_3 %688 = OpVectorShuffle %687 %687 0 1 2 
                                       f32_4 %689 = OpLoad %9 
                                       f32_3 %690 = OpVectorShuffle %689 %689 0 1 2 
                                         f32 %691 = OpDot %688 %690 
                                Private f32* %692 = OpAccessChain %9 %78 
                                                      OpStore %692 %691 
                                Private f32* %693 = OpAccessChain %9 %78 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpExtInst %1 43 %694 %132 %133 
                                Private f32* %696 = OpAccessChain %9 %78 
                                                      OpStore %696 %695 
                                Private f32* %698 = OpAccessChain %9 %78 
                                         f32 %699 = OpLoad %698 
                                Private f32* %700 = OpAccessChain %9 %78 
                                         f32 %701 = OpLoad %700 
                                         f32 %702 = OpFMul %699 %701 
                                Private f32* %703 = OpAccessChain %697 %78 
                                                      OpStore %703 %702 
                                       f32_3 %704 = OpLoad %697 
                                       f32_2 %705 = OpVectorShuffle %704 %704 0 0 
                                         f32 %706 = OpLoad %104 
                                       f32_2 %707 = OpCompositeConstruct %706 %706 
                                         f32 %708 = OpDot %705 %707 
                                Private f32* %709 = OpAccessChain %697 %78 
                                                      OpStore %709 %708 
                                Private f32* %710 = OpAccessChain %697 %78 
                                         f32 %711 = OpLoad %710 
                                         f32 %713 = OpFAdd %711 %712 
                                Private f32* %714 = OpAccessChain %697 %78 
                                                      OpStore %714 %713 
                                Private f32* %716 = OpAccessChain %38 %78 
                                         f32 %717 = OpLoad %716 
                                         f32 %718 = OpFNegate %717 
                                         f32 %719 = OpFAdd %718 %133 
                                                      OpStore %715 %719 
                                         f32 %721 = OpLoad %715 
                                         f32 %722 = OpLoad %715 
                                         f32 %723 = OpFMul %721 %722 
                                                      OpStore %720 %723 
                                         f32 %724 = OpLoad %720 
                                         f32 %725 = OpLoad %720 
                                         f32 %726 = OpFMul %724 %725 
                                                      OpStore %720 %726 
                                         f32 %727 = OpLoad %715 
                                         f32 %728 = OpLoad %720 
                                         f32 %729 = OpFMul %727 %728 
                                                      OpStore %715 %729 
                                Private f32* %730 = OpAccessChain %697 %78 
                                         f32 %731 = OpLoad %730 
                                         f32 %732 = OpLoad %715 
                                         f32 %733 = OpFMul %731 %732 
                                         f32 %734 = OpFAdd %733 %133 
                                                      OpStore %715 %734 
                                         f32 %735 = OpLoad %30 
                                         f32 %736 = OpExtInst %1 4 %735 
                                         f32 %737 = OpFNegate %736 
                                         f32 %738 = OpFAdd %737 %133 
                                                      OpStore %720 %738 
                                         f32 %739 = OpLoad %720 
                                         f32 %740 = OpLoad %720 
                                         f32 %741 = OpFMul %739 %740 
                                                      OpStore %153 %741 
                                         f32 %742 = OpLoad %153 
                                         f32 %743 = OpLoad %153 
                                         f32 %744 = OpFMul %742 %743 
                                                      OpStore %153 %744 
                                         f32 %745 = OpLoad %720 
                                         f32 %746 = OpLoad %153 
                                         f32 %747 = OpFMul %745 %746 
                                                      OpStore %720 %747 
                                Private f32* %748 = OpAccessChain %697 %78 
                                         f32 %749 = OpLoad %748 
                                         f32 %750 = OpLoad %720 
                                         f32 %751 = OpFMul %749 %750 
                                         f32 %752 = OpFAdd %751 %133 
                                Private f32* %753 = OpAccessChain %697 %78 
                                                      OpStore %753 %752 
                                Private f32* %754 = OpAccessChain %697 %78 
                                         f32 %755 = OpLoad %754 
                                         f32 %756 = OpLoad %715 
                                         f32 %757 = OpFMul %755 %756 
                                Private f32* %758 = OpAccessChain %697 %78 
                                                      OpStore %758 %757 
                                         f32 %759 = OpLoad %104 
                                         f32 %760 = OpLoad %104 
                                         f32 %761 = OpFMul %759 %760 
                                                      OpStore %715 %761 
                                         f32 %762 = OpLoad %715 
                                         f32 %764 = OpExtInst %1 40 %762 %763 
                                                      OpStore %715 %764 
                                         f32 %765 = OpLoad %715 
                                         f32 %766 = OpFNegate %765 
                                         f32 %767 = OpFAdd %766 %133 
                                                      OpStore %104 %767 
                                         f32 %768 = OpLoad %30 
                                         f32 %769 = OpExtInst %1 4 %768 
                                         f32 %770 = OpLoad %104 
                                         f32 %771 = OpFMul %769 %770 
                                         f32 %772 = OpLoad %715 
                                         f32 %773 = OpFAdd %771 %772 
                                                      OpStore %153 %773 
                                Private f32* %774 = OpAccessChain %38 %78 
                                         f32 %775 = OpLoad %774 
                                         f32 %776 = OpLoad %104 
                                         f32 %777 = OpFMul %775 %776 
                                         f32 %778 = OpLoad %715 
                                         f32 %779 = OpFAdd %777 %778 
                                                      OpStore %104 %779 
                                         f32 %780 = OpLoad %30 
                                         f32 %781 = OpExtInst %1 4 %780 
                                         f32 %782 = OpLoad %104 
                                         f32 %783 = OpFMul %781 %782 
                                                      OpStore %30 %783 
                                Private f32* %784 = OpAccessChain %38 %78 
                                         f32 %785 = OpLoad %784 
                                         f32 %786 = OpLoad %153 
                                         f32 %787 = OpFMul %785 %786 
                                         f32 %788 = OpLoad %30 
                                         f32 %789 = OpFAdd %787 %788 
                                                      OpStore %30 %789 
                                         f32 %790 = OpLoad %30 
                                         f32 %792 = OpFAdd %790 %791 
                                                      OpStore %30 %792 
                                         f32 %794 = OpLoad %30 
                                         f32 %795 = OpFDiv %793 %794 
                                                      OpStore %30 %795 
                                         f32 %796 = OpLoad %715 
                                         f32 %797 = OpLoad %715 
                                         f32 %798 = OpFMul %796 %797 
                                                      OpStore %104 %798 
                                         f32 %799 = OpLoad %678 
                                         f32 %800 = OpLoad %104 
                                         f32 %801 = OpFMul %799 %800 
                                         f32 %802 = OpLoad %678 
                                         f32 %803 = OpFNegate %802 
                                         f32 %804 = OpFAdd %801 %803 
                                                      OpStore %153 %804 
                                         f32 %805 = OpLoad %153 
                                         f32 %806 = OpLoad %678 
                                         f32 %807 = OpFMul %805 %806 
                                         f32 %808 = OpFAdd %807 %133 
                                                      OpStore %678 %808 
                                         f32 %809 = OpLoad %104 
                                         f32 %811 = OpFMul %809 %810 
                                                      OpStore %104 %811 
                                         f32 %812 = OpLoad %678 
                                         f32 %813 = OpLoad %678 
                                         f32 %814 = OpFMul %812 %813 
                                         f32 %816 = OpFAdd %814 %815 
                                                      OpStore %678 %816 
                                         f32 %817 = OpLoad %104 
                                         f32 %818 = OpLoad %678 
                                         f32 %819 = OpFDiv %817 %818 
                                                      OpStore %678 %819 
                                         f32 %820 = OpLoad %30 
                                         f32 %821 = OpLoad %678 
                                         f32 %822 = OpFMul %820 %821 
                                Private f32* %823 = OpAccessChain %697 %74 
                                                      OpStore %823 %822 
                                       f32_4 %824 = OpLoad %38 
                                       f32_2 %825 = OpVectorShuffle %824 %824 0 0 
                                       f32_3 %826 = OpLoad %697 
                                       f32_2 %827 = OpVectorShuffle %826 %826 0 2 
                                       f32_2 %828 = OpFMul %825 %827 
                                       f32_3 %829 = OpLoad %697 
                                       f32_3 %830 = OpVectorShuffle %829 %828 3 1 4 
                                                      OpStore %697 %830 
                                Private f32* %831 = OpAccessChain %697 %74 
                                         f32 %832 = OpLoad %831 
                                         f32 %834 = OpFMul %832 %833 
                                                      OpStore %30 %834 
                                         f32 %835 = OpLoad %30 
                                         f32 %836 = OpExtInst %1 40 %835 %132 
                                                      OpStore %30 %836 
                                         f32 %837 = OpLoad %715 
                                         f32 %838 = OpLoad %715 
                                         f32 %839 = OpFMul %837 %838 
                                         f32 %840 = OpFAdd %839 %133 
                                                      OpStore %715 %840 
                                         f32 %841 = OpLoad %715 
                                         f32 %842 = OpFDiv %133 %841 
                                                      OpStore %715 %842 
                                       f32_4 %843 = OpLoad %200 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 2 
                                       f32_4 %845 = OpLoad %200 
                                       f32_3 %846 = OpVectorShuffle %845 %845 0 1 2 
                                         f32 %847 = OpDot %844 %846 
                                Private f32* %848 = OpAccessChain %38 %78 
                                                      OpStore %848 %847 
                                Private f32* %850 = OpAccessChain %38 %78 
                                         f32 %851 = OpLoad %850 
                                        bool %852 = OpFOrdNotEqual %851 %132 
                                                      OpStore %849 %852 
                                        bool %853 = OpLoad %849 
                                         f32 %854 = OpSelect %853 %133 %132 
                                Private f32* %855 = OpAccessChain %38 %78 
                                                      OpStore %855 %854 
                                         f32 %856 = OpLoad %30 
                                Private f32* %857 = OpAccessChain %38 %78 
                                         f32 %858 = OpLoad %857 
                                         f32 %859 = OpFMul %856 %858 
                                                      OpStore %30 %859 
                                         f32 %860 = OpLoad %89 
                                         f32 %861 = OpFNegate %860 
                                Uniform f32* %862 = OpAccessChain %20 %162 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFAdd %861 %863 
                                Private f32* %865 = OpAccessChain %38 %78 
                                                      OpStore %865 %864 
                                Private f32* %866 = OpAccessChain %38 %78 
                                         f32 %867 = OpLoad %866 
                                         f32 %868 = OpFAdd %867 %133 
                                Private f32* %869 = OpAccessChain %38 %78 
                                                      OpStore %869 %868 
                                Private f32* %870 = OpAccessChain %38 %78 
                                         f32 %871 = OpLoad %870 
                                         f32 %872 = OpExtInst %1 43 %871 %132 %133 
                                Private f32* %873 = OpAccessChain %38 %78 
                                                      OpStore %873 %872 
                                       f32_3 %874 = OpLoad %187 
                                       f32_3 %875 = OpLoad %697 
                                       f32_3 %876 = OpVectorShuffle %875 %875 0 0 0 
                                       f32_3 %877 = OpFMul %874 %876 
                                       f32_4 %878 = OpLoad %195 
                                       f32_3 %879 = OpVectorShuffle %878 %878 0 1 2 
                                       f32_3 %880 = OpFAdd %877 %879 
                                       f32_4 %881 = OpLoad %72 
                                       f32_4 %882 = OpVectorShuffle %881 %880 4 5 6 3 
                                                      OpStore %72 %882 
                                       f32_3 %883 = OpLoad %187 
                                         f32 %884 = OpLoad %30 
                                       f32_3 %885 = OpCompositeConstruct %884 %884 %884 
                                       f32_3 %886 = OpFMul %883 %885 
                                                      OpStore %187 %886 
                                Private f32* %887 = OpAccessChain %9 %78 
                                         f32 %888 = OpLoad %887 
                                         f32 %889 = OpFNegate %888 
                                         f32 %890 = OpFAdd %889 %133 
                                Private f32* %891 = OpAccessChain %9 %78 
                                                      OpStore %891 %890 
                                Private f32* %892 = OpAccessChain %9 %78 
                                         f32 %893 = OpLoad %892 
                                Private f32* %894 = OpAccessChain %9 %78 
                                         f32 %895 = OpLoad %894 
                                         f32 %896 = OpFMul %893 %895 
                                Private f32* %897 = OpAccessChain %697 %78 
                                                      OpStore %897 %896 
                                Private f32* %898 = OpAccessChain %697 %78 
                                         f32 %899 = OpLoad %898 
                                Private f32* %900 = OpAccessChain %697 %78 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFMul %899 %901 
                                Private f32* %903 = OpAccessChain %697 %78 
                                                      OpStore %903 %902 
                                Private f32* %904 = OpAccessChain %9 %78 
                                         f32 %905 = OpLoad %904 
                                Private f32* %906 = OpAccessChain %697 %78 
                                         f32 %907 = OpLoad %906 
                                         f32 %908 = OpFMul %905 %907 
                                Private f32* %909 = OpAccessChain %9 %78 
                                                      OpStore %909 %908 
                                       f32_4 %910 = OpLoad %200 
                                       f32_3 %911 = OpVectorShuffle %910 %910 0 1 2 
                                       f32_3 %912 = OpFNegate %911 
                                       f32_3 %914 = OpFAdd %912 %913 
                                       f32_4 %915 = OpLoad %195 
                                       f32_4 %916 = OpVectorShuffle %915 %914 4 5 6 3 
                                                      OpStore %195 %916 
                                       f32_4 %917 = OpLoad %195 
                                       f32_3 %918 = OpVectorShuffle %917 %917 0 1 2 
                                       f32_4 %919 = OpLoad %9 
                                       f32_3 %920 = OpVectorShuffle %919 %919 0 0 0 
                                       f32_3 %921 = OpFMul %918 %920 
                                       f32_4 %922 = OpLoad %200 
                                       f32_3 %923 = OpVectorShuffle %922 %922 0 1 2 
                                       f32_3 %924 = OpFAdd %921 %923 
                                       f32_4 %925 = OpLoad %9 
                                       f32_4 %926 = OpVectorShuffle %925 %924 4 5 2 6 
                                                      OpStore %9 %926 
                                       f32_4 %927 = OpLoad %9 
                                       f32_3 %928 = OpVectorShuffle %927 %927 0 1 3 
                                       f32_3 %929 = OpLoad %187 
                                       f32_3 %930 = OpFMul %928 %929 
                                       f32_4 %931 = OpLoad %9 
                                       f32_4 %932 = OpVectorShuffle %931 %930 4 5 2 6 
                                                      OpStore %9 %932 
                                       f32_3 %933 = OpLoad %64 
                                       f32_4 %934 = OpLoad %72 
                                       f32_3 %935 = OpVectorShuffle %934 %934 0 1 2 
                                       f32_3 %936 = OpFMul %933 %935 
                                       f32_4 %937 = OpLoad %9 
                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 3 
                                       f32_3 %939 = OpFAdd %936 %938 
                                       f32_4 %940 = OpLoad %9 
                                       f32_4 %941 = OpVectorShuffle %940 %939 4 5 2 6 
                                                      OpStore %9 %941 
                                       f32_3 %942 = OpLoad %256 
                                         f32 %943 = OpLoad %715 
                                       f32_3 %944 = OpCompositeConstruct %943 %943 %943 
                                       f32_3 %945 = OpFMul %942 %944 
                                                      OpStore %64 %945 
                                       f32_4 %946 = OpLoad %200 
                                       f32_3 %947 = OpVectorShuffle %946 %946 0 1 2 
                                       f32_3 %948 = OpFNegate %947 
                                       f32_4 %949 = OpLoad %38 
                                       f32_3 %950 = OpVectorShuffle %949 %949 0 0 0 
                                       f32_3 %951 = OpFAdd %948 %950 
                                       f32_4 %952 = OpLoad %38 
                                       f32_4 %953 = OpVectorShuffle %952 %951 4 5 2 6 
                                                      OpStore %38 %953 
                                         f32 %954 = OpLoad %720 
                                       f32_3 %955 = OpCompositeConstruct %954 %954 %954 
                                       f32_4 %956 = OpLoad %38 
                                       f32_3 %957 = OpVectorShuffle %956 %956 0 1 3 
                                       f32_3 %958 = OpFMul %955 %957 
                                       f32_4 %959 = OpLoad %200 
                                       f32_3 %960 = OpVectorShuffle %959 %959 0 1 2 
                                       f32_3 %961 = OpFAdd %958 %960 
                                       f32_4 %962 = OpLoad %38 
                                       f32_4 %963 = OpVectorShuffle %962 %961 4 5 6 3 
                                                      OpStore %38 %963 
                                       f32_3 %964 = OpLoad %64 
                                       f32_4 %965 = OpLoad %38 
                                       f32_3 %966 = OpVectorShuffle %965 %965 0 1 2 
                                       f32_3 %967 = OpFMul %964 %966 
                                       f32_4 %968 = OpLoad %9 
                                       f32_3 %969 = OpVectorShuffle %968 %968 0 1 3 
                                       f32_3 %970 = OpFAdd %967 %969 
                                       f32_4 %971 = OpLoad %9 
                                       f32_4 %972 = OpVectorShuffle %971 %970 4 5 6 3 
                                                      OpStore %9 %972 
                                       f32_3 %973 = OpLoad %47 
                              Uniform f32_4* %974 = OpAccessChain %20 %66 
                                       f32_4 %975 = OpLoad %974 
                                       f32_3 %976 = OpVectorShuffle %975 %975 0 1 2 
                                       f32_3 %977 = OpFMul %973 %976 
                                       f32_4 %978 = OpLoad %9 
                                       f32_3 %979 = OpVectorShuffle %978 %978 0 1 2 
                                       f32_3 %980 = OpFAdd %977 %979 
                                       f32_4 %981 = OpLoad %9 
                                       f32_4 %982 = OpVectorShuffle %981 %980 4 5 6 3 
                                                      OpStore %9 %982 
                                         f32 %985 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %986 = OpAccessChain %20 %80 %83 
                                         f32 %987 = OpLoad %986 
                                         f32 %988 = OpFDiv %985 %987 
                                                      OpStore %30 %988 
                                         f32 %989 = OpLoad %30 
                                         f32 %990 = OpFNegate %989 
                                         f32 %991 = OpFAdd %990 %133 
                                                      OpStore %30 %991 
                                         f32 %992 = OpLoad %30 
                                Uniform f32* %993 = OpAccessChain %20 %80 %74 
                                         f32 %994 = OpLoad %993 
                                         f32 %995 = OpFMul %992 %994 
                                                      OpStore %30 %995 
                                         f32 %996 = OpLoad %30 
                                         f32 %997 = OpExtInst %1 40 %996 %132 
                                                      OpStore %30 %997 
                                         f32 %998 = OpLoad %30 
                               Uniform f32* %1000 = OpAccessChain %20 %999 %74 
                                        f32 %1001 = OpLoad %1000 
                                        f32 %1002 = OpFMul %998 %1001 
                               Uniform f32* %1003 = OpAccessChain %20 %999 %116 
                                        f32 %1004 = OpLoad %1003 
                                        f32 %1005 = OpFAdd %1002 %1004 
                                                      OpStore %30 %1005 
                                        f32 %1006 = OpLoad %30 
                                        f32 %1007 = OpExtInst %1 43 %1006 %132 %133 
                                                      OpStore %30 %1007 
                                      f32_4 %1008 = OpLoad %9 
                                      f32_3 %1009 = OpVectorShuffle %1008 %1008 0 1 2 
                             Uniform f32_4* %1011 = OpAccessChain %20 %1010 
                                      f32_4 %1012 = OpLoad %1011 
                                      f32_3 %1013 = OpVectorShuffle %1012 %1012 0 1 2 
                                      f32_3 %1014 = OpFNegate %1013 
                                      f32_3 %1015 = OpFAdd %1009 %1014 
                                      f32_4 %1016 = OpLoad %9 
                                      f32_4 %1017 = OpVectorShuffle %1016 %1015 4 5 6 3 
                                                      OpStore %9 %1017 
                                        f32 %1020 = OpLoad %30 
                                      f32_3 %1021 = OpCompositeConstruct %1020 %1020 %1020 
                                      f32_4 %1022 = OpLoad %9 
                                      f32_3 %1023 = OpVectorShuffle %1022 %1022 0 1 2 
                                      f32_3 %1024 = OpFMul %1021 %1023 
                             Uniform f32_4* %1025 = OpAccessChain %20 %1010 
                                      f32_4 %1026 = OpLoad %1025 
                                      f32_3 %1027 = OpVectorShuffle %1026 %1026 0 1 2 
                                      f32_3 %1028 = OpFAdd %1024 %1027 
                                      f32_4 %1029 = OpLoad %1019 
                                      f32_4 %1030 = OpVectorShuffle %1029 %1028 4 5 6 3 
                                                      OpStore %1019 %1030 
                                Output f32* %1032 = OpAccessChain %1019 %116 
                                                      OpStore %1032 %133 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    gl_Position = u_xlat2;
    vs_TEXCOORD4 = u_xlat2.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bvec3 u_xlatb8;
vec3 u_xlat9;
bvec3 u_xlatb10;
vec3 u_xlat11;
float u_xlat12;
float u_xlat22;
float u_xlat23;
float u_xlat33;
float u_xlat34;
float u_xlat35;
bool u_xlatb35;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat34 = (-_Glossiness) + 1.0;
    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb35){
        u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat35 = inversesqrt(u_xlat35);
        u_xlat5.xyz = vec3(u_xlat35) * u_xlat4.xyz;
        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat6;
            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
            u_xlat6 = hlslcc_movcTemp;
        }
        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
        u_xlat35 = min(u_xlat6.z, u_xlat35);
        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
    } else {
        u_xlat5.xyz = u_xlat4.xyz;
    }
    u_xlat35 = (-u_xlat34) * 0.699999988 + 1.70000005;
    u_xlat35 = u_xlat34 * u_xlat35;
    u_xlat35 = u_xlat35 * 6.0;
    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat35);
    u_xlat36 = u_xlat5.w + -1.0;
    u_xlat36 = unity_SpecCube0_HDR.w * u_xlat36 + 1.0;
    u_xlat36 = log2(u_xlat36);
    u_xlat36 = u_xlat36 * unity_SpecCube0_HDR.y;
    u_xlat36 = exp2(u_xlat36);
    u_xlat36 = u_xlat36 * unity_SpecCube0_HDR.x;
    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat36);
    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb37){
        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb37){
            u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat37 = inversesqrt(u_xlat37);
            u_xlat7.xyz = vec3(u_xlat37) * u_xlat4.xyz;
            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat8;
                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
                u_xlat8 = hlslcc_movcTemp;
            }
            u_xlat37 = min(u_xlat8.y, u_xlat8.x);
            u_xlat37 = min(u_xlat8.z, u_xlat37);
            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat7.xyz * vec3(u_xlat37) + u_xlat8.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat35);
        u_xlat35 = u_xlat4.w + -1.0;
        u_xlat35 = unity_SpecCube1_HDR.w * u_xlat35 + 1.0;
        u_xlat35 = log2(u_xlat35);
        u_xlat35 = u_xlat35 * unity_SpecCube1_HDR.y;
        u_xlat35 = exp2(u_xlat35);
        u_xlat35 = u_xlat35 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
        u_xlat5.xyz = vec3(u_xlat36) * u_xlat5.xyz + (-u_xlat4.xyz);
        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat4.xyz;
    }
    u_xlat35 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * vs_TEXCOORD1.xyz;
    u_xlat5.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat35 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat11.x = u_xlat0.x * u_xlat0.x;
    u_xlat11.x = dot(u_xlat11.xx, vec2(u_xlat34));
    u_xlat11.x = u_xlat11.x + -0.5;
    u_xlat22 = (-u_xlat1.x) + 1.0;
    u_xlat23 = u_xlat22 * u_xlat22;
    u_xlat23 = u_xlat23 * u_xlat23;
    u_xlat22 = u_xlat22 * u_xlat23;
    u_xlat22 = u_xlat11.x * u_xlat22 + 1.0;
    u_xlat23 = -abs(u_xlat33) + 1.0;
    u_xlat36 = u_xlat23 * u_xlat23;
    u_xlat36 = u_xlat36 * u_xlat36;
    u_xlat23 = u_xlat23 * u_xlat36;
    u_xlat11.x = u_xlat11.x * u_xlat23 + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat22;
    u_xlat22 = u_xlat34 * u_xlat34;
    u_xlat22 = max(u_xlat22, 0.00200000009);
    u_xlat34 = (-u_xlat22) + 1.0;
    u_xlat36 = abs(u_xlat33) * u_xlat34 + u_xlat22;
    u_xlat34 = u_xlat1.x * u_xlat34 + u_xlat22;
    u_xlat33 = abs(u_xlat33) * u_xlat34;
    u_xlat33 = u_xlat1.x * u_xlat36 + u_xlat33;
    u_xlat33 = u_xlat33 + 9.99999975e-06;
    u_xlat33 = 0.5 / u_xlat33;
    u_xlat34 = u_xlat22 * u_xlat22;
    u_xlat36 = u_xlat12 * u_xlat34 + (-u_xlat12);
    u_xlat12 = u_xlat36 * u_xlat12 + 1.0;
    u_xlat34 = u_xlat34 * 0.318309873;
    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;
    u_xlat12 = u_xlat34 / u_xlat12;
    u_xlat33 = u_xlat33 * u_xlat12;
    u_xlat11.z = u_xlat33 * 3.14159274;
    u_xlat11.xz = u_xlat1.xx * u_xlat11.xz;
    u_xlat33 = max(u_xlat11.z, 0.0);
    u_xlat22 = u_xlat22 * u_xlat22 + 1.0;
    u_xlat22 = float(1.0) / u_xlat22;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat1.x;
    u_xlat1.x = (-u_xlat35) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
    u_xlat7.xyz = vec3(u_xlat33) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat11.x = u_xlat0.x * u_xlat0.x;
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat0.x = u_xlat0.x * u_xlat11.x;
    u_xlat8.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat7.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat22);
    u_xlat1.xyw = (-u_xlat5.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat23) * u_xlat1.xyw + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    u_xlat33 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %232 %237 %242 %243 %378 %384 %385 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %230 0 BuiltIn 230 
                                                      OpMemberDecorate %230 1 BuiltIn 230 
                                                      OpMemberDecorate %230 2 BuiltIn 230 
                                                      OpDecorate %230 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 237 
                                                      OpDecorate vs_TEXCOORD0 Location 242 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate vs_TEXCOORD1 Location 378 
                                                      OpDecorate vs_TEXCOORD5 Location 384 
                                                      OpDecorate vs_TEXCOORD6 Location 385 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 7 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 8 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 6 
                                         i32 %119 = OpConstant 5 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 1 
                                             %168 = OpTypePointer Uniform %7 
                                         i32 %179 = OpConstant 2 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %229 = OpTypeArray %6 %20 
                                             %230 = OpTypeStruct %7 %6 %229 
                                             %231 = OpTypePointer Output %230 
        Output struct {f32_4; f32; f32[1];}* %232 = OpVariable Output 
                                             %234 = OpTypePointer Output %7 
                                             %236 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %238 = OpConstant 2 
                                             %241 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %243 = OpVariable Input 
                                         i32 %246 = OpConstant 9 
                                         f32 %269 = OpConstant 3.674022E-40 
                                       f32_2 %270 = OpConstantComposite %269 %269 
                                         f32 %272 = OpConstant 3.674022E-40 
                                       f32_2 %273 = OpConstantComposite %272 %272 
                                Private f32* %277 = OpVariable Private 
                                         f32 %286 = OpConstant 3.674022E-40 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_2 %288 = OpConstantComposite %286 %287 
                                       f32_2 %290 = OpConstantComposite %56 %56 
                                       f32_3 %311 = OpConstantComposite %56 %56 %56 
                                             %323 = OpTypeBool 
                                             %324 = OpTypePointer Private %323 
                               Private bool* %325 = OpVariable Private 
                                       f32_4 %326 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %327 = OpConstant 4 
                                             %331 = OpTypeVector %323 4 
                                             %335 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %336 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %169 = OpAccessChain %18 %167 %167 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpFMul %166 %170 
                                                      OpStore %164 %171 
                              Uniform f32_4* %172 = OpAccessChain %18 %167 %19 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpLoad %114 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %164 
                                       f32_4 %178 = OpFAdd %176 %177 
                                                      OpStore %164 %178 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %205 = OpAccessChain %18 %188 %167 
                                       f32_4 %206 = OpLoad %205 
                                       f32_4 %207 = OpFMul %204 %206 
                                                      OpStore %114 %207 
                              Uniform f32_4* %208 = OpAccessChain %18 %188 %19 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %164 
                                       f32_4 %211 = OpVectorShuffle %210 %210 0 0 0 0 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %114 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %114 %214 
                              Uniform f32_4* %215 = OpAccessChain %18 %188 %179 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %164 
                                       f32_4 %218 = OpVectorShuffle %217 %217 2 2 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %114 
                                       f32_4 %221 = OpFAdd %219 %220 
                                                      OpStore %114 %221 
                              Uniform f32_4* %222 = OpAccessChain %18 %188 %188 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %164 
                                       f32_4 %225 = OpVectorShuffle %224 %224 3 3 3 3 
                                       f32_4 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %114 
                                       f32_4 %228 = OpFAdd %226 %227 
                                                      OpStore %114 %228 
                                       f32_4 %233 = OpLoad %114 
                               Output f32_4* %235 = OpAccessChain %232 %19 
                                                      OpStore %235 %233 
                                Private f32* %239 = OpAccessChain %114 %238 
                                         f32 %240 = OpLoad %239 
                                                      OpStore vs_TEXCOORD4 %240 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                              Uniform f32_4* %247 = OpAccessChain %18 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                                       f32_2 %250 = OpFMul %245 %249 
                              Uniform f32_4* %251 = OpAccessChain %18 %246 
                                       f32_4 %252 = OpLoad %251 
                                       f32_2 %253 = OpVectorShuffle %252 %252 2 3 
                                       f32_2 %254 = OpFAdd %250 %253 
                                                      OpStore vs_TEXCOORD0 %254 
                                Private f32* %255 = OpAccessChain %76 %20 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpExtInst %1 8 %256 
                                Private f32* %258 = OpAccessChain %114 %29 
                                                      OpStore %258 %257 
                                Private f32* %259 = OpAccessChain %114 %29 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFNegate %260 
                                         f32 %262 = OpFMul %261 %146 
                                Private f32* %263 = OpAccessChain %76 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %114 %20 
                                                      OpStore %266 %265 
                                       f32_4 %267 = OpLoad %114 
                                       f32_2 %268 = OpVectorShuffle %267 %267 0 1 
                                       f32_2 %271 = OpFMul %268 %270 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %76 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %76 %276 
                                       f32_4 %278 = OpLoad %76 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_4 %280 = OpLoad %76 
                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
                                         f32 %282 = OpDot %279 %281 
                                                      OpStore %277 %282 
                                         f32 %283 = OpLoad %277 
                                       f32_2 %284 = OpCompositeConstruct %283 %283 
                                       f32_2 %285 = OpFNegate %284 
                                       f32_2 %289 = OpFMul %285 %288 
                                       f32_2 %291 = OpFAdd %289 %290 
                                       f32_4 %292 = OpLoad %114 
                                       f32_4 %293 = OpVectorShuffle %292 %291 0 1 4 5 
                                                      OpStore %114 %293 
                                Private f32* %294 = OpAccessChain %114 %238 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 31 %295 
                                                      OpStore %277 %296 
                                       f32_4 %297 = OpLoad %76 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 1 
                                         f32 %299 = OpLoad %277 
                                       f32_2 %300 = OpCompositeConstruct %299 %299 
                                       f32_2 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %114 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 2 3 
                                                      OpStore %114 %303 
                                       f32_4 %304 = OpLoad %114 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 3 
                                       f32_3 %306 = OpExtInst %1 40 %305 %110 
                                       f32_4 %307 = OpLoad %76 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %76 %308 
                                       f32_4 %309 = OpLoad %76 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %312 = OpExtInst %1 37 %310 %311 
                                       f32_4 %313 = OpLoad %76 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %76 %314 
                                Private f32* %315 = OpAccessChain %76 %29 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFNegate %316 
                                Private f32* %318 = OpAccessChain %76 %154 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %9 %29 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                Private f32* %322 = OpAccessChain %9 %154 
                                                      OpStore %322 %321 
                                Uniform f32* %328 = OpAccessChain %18 %327 
                                         f32 %329 = OpLoad %328 
                                       f32_4 %330 = OpCompositeConstruct %329 %329 %329 %329 
                                      bool_4 %332 = OpFOrdNotEqual %326 %330 
                                        bool %333 = OpAny %332 
                                                      OpStore %325 %333 
                                        bool %334 = OpLoad %325 
                                                      OpSelectionMerge %338 None 
                                                      OpBranchConditional %334 %337 %341 
                                             %337 = OpLabel 
                                       f32_4 %339 = OpLoad %76 
                                       f32_3 %340 = OpVectorShuffle %339 %339 3 2 1 
                                                      OpStore %336 %340 
                                                      OpBranch %338 
                                             %341 = OpLabel 
                                       f32_4 %342 = OpLoad %9 
                                       f32_3 %343 = OpVectorShuffle %342 %342 3 1 2 
                                                      OpStore %336 %343 
                                                      OpBranch %338 
                                             %338 = OpLabel 
                                       f32_3 %344 = OpLoad %336 
                                       f32_4 %345 = OpLoad %9 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %9 %346 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                              Uniform f32_4* %349 = OpAccessChain %18 %179 %19 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                         f32 %352 = OpDot %348 %351 
                                Private f32* %353 = OpAccessChain %76 %29 
                                                      OpStore %353 %352 
                                       f32_4 %354 = OpLoad %9 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                              Uniform f32_4* %356 = OpAccessChain %18 %179 %167 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                         f32 %359 = OpDot %355 %358 
                                Private f32* %360 = OpAccessChain %76 %20 
                                                      OpStore %360 %359 
                                       f32_4 %361 = OpLoad %9 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                              Uniform f32_4* %363 = OpAccessChain %18 %179 %179 
                                       f32_4 %364 = OpLoad %363 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                         f32 %366 = OpDot %362 %365 
                                Private f32* %367 = OpAccessChain %76 %238 
                                                      OpStore %367 %366 
                                       f32_4 %368 = OpLoad %76 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_4 %370 = OpLoad %76 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                         f32 %372 = OpDot %369 %371 
                                Private f32* %373 = OpAccessChain %9 %29 
                                                      OpStore %373 %372 
                                Private f32* %374 = OpAccessChain %9 %29 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpExtInst %1 32 %375 
                                Private f32* %377 = OpAccessChain %9 %29 
                                                      OpStore %377 %376 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_4 %381 = OpLoad %76 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFMul %380 %382 
                                                      OpStore vs_TEXCOORD1 %383 
                                                      OpStore vs_TEXCOORD5 %326 
                                                      OpStore vs_TEXCOORD6 %326 
                                 Output f32* %386 = OpAccessChain %232 %19 %20 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFNegate %387 
                                 Output f32* %389 = OpAccessChain %232 %19 %20 
                                                      OpStore %389 %388 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 910
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %57 %81 %859 %895 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate vs_TEXCOORD0 Location 57 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %247 DescriptorSet 247 
                                                      OpDecorate %247 Binding 247 
                                                      OpDecorate %249 DescriptorSet 249 
                                                      OpDecorate %249 Binding 249 
                                                      OpDecorate %402 DescriptorSet 402 
                                                      OpDecorate %402 Binding 402 
                                                      OpDecorate vs_TEXCOORD4 Location 859 
                                                      OpDecorate %895 Location 895 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                                              %43 = OpTypePointer Private %10 
                               Private f32_3* %44 = OpVariable Private 
                                              %45 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %46 = OpTypePointer UniformConstant %45 
         UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
                                              %49 = OpTypeSampler 
                                              %50 = OpTypePointer UniformConstant %49 
                     UniformConstant sampler* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampledImage %45 
                                              %55 = OpTypeVector %6 2 
                                              %56 = OpTypePointer Input %55 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %61 = OpVariable Private 
                                          i32 %63 = OpConstant 16 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
                                          i32 %70 = OpConstant 14 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %77 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_4* %87 = OpVariable Private 
                                              %99 = OpTypeBool 
                                             %100 = OpTypePointer Private %99 
                               Private bool* %101 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 7 
                                             %104 = OpTypeInt 32 0 
                                         u32 %105 = OpConstant 3 
                              Private f32_4* %119 = OpVariable Private 
                              Private f32_3* %127 = OpVariable Private 
                                         i32 %130 = OpConstant 5 
                              Private f32_3* %139 = OpVariable Private 
                                         i32 %142 = OpConstant 6 
                                             %151 = OpTypeVector %99 3 
                                             %152 = OpTypePointer Private %151 
                             Private bool_3* %153 = OpVariable Private 
                                       f32_4 %154 = OpConstantComposite %102 %102 %102 %102 
                                             %157 = OpTypeVector %99 4 
                                             %160 = OpTypePointer Function %10 
                                         u32 %163 = OpConstant 0 
                                             %166 = OpTypePointer Function %6 
                                         u32 %177 = OpConstant 1 
                                         u32 %190 = OpConstant 2 
                                         f32 %235 = OpConstant 3.674022E-40 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                             %245 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %246 = OpTypePointer UniformConstant %245 
      UniformConstant read_only TextureCube* %247 = OpVariable UniformConstant 
                    UniformConstant sampler* %249 = OpVariable UniformConstant 
                                             %251 = OpTypeSampledImage %245 
                                Private f32* %257 = OpVariable Private 
                                         f32 %260 = OpConstant 3.674022E-40 
                                         i32 %262 = OpConstant 8 
                               Private bool* %285 = OpVariable Private 
                                         f32 %288 = OpConstant 3.674022E-40 
                                         i32 %293 = OpConstant 11 
                                Private f32* %300 = OpVariable Private 
                              Private f32_3* %313 = OpVariable Private 
                                         i32 %316 = OpConstant 9 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %327 = OpConstant 10 
                             Private bool_3* %335 = OpVariable Private 
      UniformConstant read_only TextureCube* %402 = OpVariable UniformConstant 
                                         i32 %413 = OpConstant 12 
                                         f32 %474 = OpConstant 3.674022E-40 
                                       f32_3 %475 = OpConstantComposite %474 %474 %474 
                                         i32 %479 = OpConstant 15 
                                         f32 %494 = OpConstant 3.674022E-40 
                                       f32_3 %495 = OpConstantComposite %494 %494 %494 
                                         f32 %502 = OpConstant 3.674022E-40 
                                         i32 %514 = OpConstant 2 
                                         f32 %527 = OpConstant 3.674022E-40 
                                Private f32* %554 = OpVariable Private 
                              Private f32_3* %573 = OpVariable Private 
                                         f32 %588 = OpConstant 3.674022E-40 
                                Private f32* %591 = OpVariable Private 
                                Private f32* %596 = OpVariable Private 
                                         f32 %639 = OpConstant 3.674022E-40 
                                         f32 %667 = OpConstant 3.674022E-40 
                                         f32 %669 = OpConstant 3.674022E-40 
                                         f32 %686 = OpConstant 3.674022E-40 
                                         f32 %691 = OpConstant 3.674022E-40 
                                         f32 %709 = OpConstant 3.674022E-40 
                               Private bool* %725 = OpVariable Private 
                                         i32 %752 = OpConstant 13 
                                       f32_3 %791 = OpConstantComposite %75 %75 %75 
                                             %858 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %861 = OpConstant 1 
                                         i32 %875 = OpConstant 4 
                                         i32 %886 = OpConstant 3 
                                             %894 = OpTypePointer Output %7 
                               Output f32_4* %895 = OpVariable Output 
                                             %907 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %161 = OpVariable Function 
                               Function f32* %167 = OpVariable Function 
                               Function f32* %180 = OpVariable Function 
                               Function f32* %193 = OpVariable Function 
                             Function f32_3* %340 = OpVariable Function 
                               Function f32* %344 = OpVariable Function 
                               Function f32* %356 = OpVariable Function 
                               Function f32* %368 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %48 = OpLoad %47 
                                      sampler %52 = OpLoad %51 
                   read_only Texture2DSampled %54 = OpSampledImage %48 %52 
                                        f32_2 %58 = OpLoad vs_TEXCOORD0 
                                        f32_4 %59 = OpImageSampleImplicitLod %54 %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                                      OpStore %44 %60 
                                        f32_3 %62 = OpLoad %44 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %61 %68 
                                 Uniform f32* %72 = OpAccessChain %17 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFAdd %74 %75 
                                                      OpStore %69 %76 
                                        f32_4 %78 = OpLoad %35 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad vs_TEXCOORD1 
                                          f32 %83 = OpDot %80 %82 
                                                      OpStore %77 %83 
                                          f32 %84 = OpLoad %77 
                                          f32 %85 = OpLoad %77 
                                          f32 %86 = OpFAdd %84 %85 
                                                      OpStore %77 %86 
                                        f32_3 %88 = OpLoad vs_TEXCOORD1 
                                          f32 %89 = OpLoad %77 
                                        f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                        f32_3 %91 = OpFNegate %90 
                                        f32_3 %92 = OpFMul %88 %91 
                                        f32_4 %93 = OpLoad %35 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFNegate %94 
                                        f32_3 %96 = OpFAdd %92 %95 
                                        f32_4 %97 = OpLoad %87 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %87 %98 
                                Uniform f32* %106 = OpAccessChain %17 %103 %105 
                                         f32 %107 = OpLoad %106 
                                        bool %108 = OpFOrdLessThan %102 %107 
                                                      OpStore %101 %108 
                                        bool %109 = OpLoad %101 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %228 
                                             %110 = OpLabel 
                                       f32_4 %112 = OpLoad %87 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_4 %114 = OpLoad %87 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                         f32 %116 = OpDot %113 %115 
                                                      OpStore %77 %116 
                                         f32 %117 = OpLoad %77 
                                         f32 %118 = OpExtInst %1 32 %117 
                                                      OpStore %77 %118 
                                         f32 %120 = OpLoad %77 
                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
                                       f32_4 %122 = OpLoad %87 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %119 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %119 %126 
                                       f32_3 %128 = OpLoad vs_TEXCOORD2 
                                       f32_3 %129 = OpFNegate %128 
                              Uniform f32_4* %131 = OpAccessChain %17 %130 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFAdd %129 %133 
                                                      OpStore %127 %134 
                                       f32_3 %135 = OpLoad %127 
                                       f32_4 %136 = OpLoad %119 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFDiv %135 %137 
                                                      OpStore %127 %138 
                                       f32_3 %140 = OpLoad vs_TEXCOORD2 
                                       f32_3 %141 = OpFNegate %140 
                              Uniform f32_4* %143 = OpAccessChain %17 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFAdd %141 %145 
                                                      OpStore %139 %146 
                                       f32_3 %147 = OpLoad %139 
                                       f32_4 %148 = OpLoad %119 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFDiv %147 %149 
                                                      OpStore %139 %150 
                                       f32_4 %155 = OpLoad %119 
                                       f32_4 %156 = OpVectorShuffle %155 %155 0 1 2 0 
                                      bool_4 %158 = OpFOrdLessThan %154 %156 
                                      bool_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                                      OpStore %153 %159 
                                       f32_3 %162 = OpLoad %127 
                                                      OpStore %161 %162 
                               Private bool* %164 = OpAccessChain %153 %163 
                                        bool %165 = OpLoad %164 
                                                      OpSelectionMerge %169 None 
                                                      OpBranchConditional %165 %168 %172 
                                             %168 = OpLabel 
                                Private f32* %170 = OpAccessChain %127 %163 
                                         f32 %171 = OpLoad %170 
                                                      OpStore %167 %171 
                                                      OpBranch %169 
                                             %172 = OpLabel 
                                Private f32* %173 = OpAccessChain %139 %163 
                                         f32 %174 = OpLoad %173 
                                                      OpStore %167 %174 
                                                      OpBranch %169 
                                             %169 = OpLabel 
                                         f32 %175 = OpLoad %167 
                               Function f32* %176 = OpAccessChain %161 %163 
                                                      OpStore %176 %175 
                               Private bool* %178 = OpAccessChain %153 %177 
                                        bool %179 = OpLoad %178 
                                                      OpSelectionMerge %182 None 
                                                      OpBranchConditional %179 %181 %185 
                                             %181 = OpLabel 
                                Private f32* %183 = OpAccessChain %127 %177 
                                         f32 %184 = OpLoad %183 
                                                      OpStore %180 %184 
                                                      OpBranch %182 
                                             %185 = OpLabel 
                                Private f32* %186 = OpAccessChain %139 %177 
                                         f32 %187 = OpLoad %186 
                                                      OpStore %180 %187 
                                                      OpBranch %182 
                                             %182 = OpLabel 
                                         f32 %188 = OpLoad %180 
                               Function f32* %189 = OpAccessChain %161 %177 
                                                      OpStore %189 %188 
                               Private bool* %191 = OpAccessChain %153 %190 
                                        bool %192 = OpLoad %191 
                                                      OpSelectionMerge %195 None 
                                                      OpBranchConditional %192 %194 %198 
                                             %194 = OpLabel 
                                Private f32* %196 = OpAccessChain %127 %190 
                                         f32 %197 = OpLoad %196 
                                                      OpStore %193 %197 
                                                      OpBranch %195 
                                             %198 = OpLabel 
                                Private f32* %199 = OpAccessChain %139 %190 
                                         f32 %200 = OpLoad %199 
                                                      OpStore %193 %200 
                                                      OpBranch %195 
                                             %195 = OpLabel 
                                         f32 %201 = OpLoad %193 
                               Function f32* %202 = OpAccessChain %161 %190 
                                                      OpStore %202 %201 
                                       f32_3 %203 = OpLoad %161 
                                                      OpStore %127 %203 
                                Private f32* %204 = OpAccessChain %127 %177 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %127 %163 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpExtInst %1 37 %205 %207 
                                                      OpStore %77 %208 
                                Private f32* %209 = OpAccessChain %127 %190 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpLoad %77 
                                         f32 %212 = OpExtInst %1 37 %210 %211 
                                                      OpStore %77 %212 
                                       f32_3 %213 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %214 = OpAccessChain %17 %103 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_3 %218 = OpFAdd %213 %217 
                                                      OpStore %127 %218 
                                       f32_4 %219 = OpLoad %119 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpLoad %77 
                                       f32_3 %222 = OpCompositeConstruct %221 %221 %221 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_3 %224 = OpLoad %127 
                                       f32_3 %225 = OpFAdd %223 %224 
                                       f32_4 %226 = OpLoad %119 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                                      OpStore %119 %227 
                                                      OpBranch %111 
                                             %228 = OpLabel 
                                       f32_4 %229 = OpLoad %87 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_4 %231 = OpLoad %119 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %119 %232 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                         f32 %233 = OpLoad %69 
                                         f32 %234 = OpFNegate %233 
                                         f32 %236 = OpFMul %234 %235 
                                         f32 %238 = OpFAdd %236 %237 
                                                      OpStore %77 %238 
                                         f32 %239 = OpLoad %69 
                                         f32 %240 = OpLoad %77 
                                         f32 %241 = OpFMul %239 %240 
                                                      OpStore %77 %241 
                                         f32 %242 = OpLoad %77 
                                         f32 %244 = OpFMul %242 %243 
                                                      OpStore %77 %244 
                       read_only TextureCube %248 = OpLoad %247 
                                     sampler %250 = OpLoad %249 
                read_only TextureCubeSampled %252 = OpSampledImage %248 %250 
                                       f32_4 %253 = OpLoad %119 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                         f32 %255 = OpLoad %77 
                                       f32_4 %256 = OpImageSampleExplicitLod %252 %254 Lod %7 
                                                      OpStore %119 %256 
                                Private f32* %258 = OpAccessChain %119 %105 
                                         f32 %259 = OpLoad %258 
                                         f32 %261 = OpFAdd %259 %260 
                                                      OpStore %257 %261 
                                Uniform f32* %263 = OpAccessChain %17 %262 %105 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpLoad %257 
                                         f32 %266 = OpFMul %264 %265 
                                         f32 %267 = OpFAdd %266 %75 
                                                      OpStore %257 %267 
                                         f32 %268 = OpLoad %257 
                                         f32 %269 = OpExtInst %1 30 %268 
                                                      OpStore %257 %269 
                                         f32 %270 = OpLoad %257 
                                Uniform f32* %271 = OpAccessChain %17 %262 %177 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFMul %270 %272 
                                                      OpStore %257 %273 
                                         f32 %274 = OpLoad %257 
                                         f32 %275 = OpExtInst %1 29 %274 
                                                      OpStore %257 %275 
                                         f32 %276 = OpLoad %257 
                                Uniform f32* %277 = OpAccessChain %17 %262 %163 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFMul %276 %278 
                                                      OpStore %257 %279 
                                       f32_4 %280 = OpLoad %119 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                         f32 %282 = OpLoad %257 
                                       f32_3 %283 = OpCompositeConstruct %282 %282 %282 
                                       f32_3 %284 = OpFMul %281 %283 
                                                      OpStore %127 %284 
                                Uniform f32* %286 = OpAccessChain %17 %142 %105 
                                         f32 %287 = OpLoad %286 
                                        bool %289 = OpFOrdLessThan %287 %288 
                                                      OpStore %285 %289 
                                        bool %290 = OpLoad %285 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                Uniform f32* %294 = OpAccessChain %17 %293 %105 
                                         f32 %295 = OpLoad %294 
                                        bool %296 = OpFOrdLessThan %102 %295 
                                                      OpStore %285 %296 
                                        bool %297 = OpLoad %285 
                                                      OpSelectionMerge %299 None 
                                                      OpBranchConditional %297 %298 %299 
                                             %298 = OpLabel 
                                       f32_4 %301 = OpLoad %87 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %87 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                         f32 %305 = OpDot %302 %304 
                                                      OpStore %300 %305 
                                         f32 %306 = OpLoad %300 
                                         f32 %307 = OpExtInst %1 32 %306 
                                                      OpStore %300 %307 
                                         f32 %308 = OpLoad %300 
                                       f32_3 %309 = OpCompositeConstruct %308 %308 %308 
                                       f32_4 %310 = OpLoad %87 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFMul %309 %311 
                                                      OpStore %139 %312 
                                       f32_3 %314 = OpLoad vs_TEXCOORD2 
                                       f32_3 %315 = OpFNegate %314 
                              Uniform f32_4* %317 = OpAccessChain %17 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %315 %319 
                                                      OpStore %313 %320 
                                       f32_3 %321 = OpLoad %313 
                                       f32_3 %322 = OpLoad %139 
                                       f32_3 %323 = OpFDiv %321 %322 
                                                      OpStore %313 %323 
                                       f32_3 %325 = OpLoad vs_TEXCOORD2 
                                       f32_3 %326 = OpFNegate %325 
                              Uniform f32_4* %328 = OpAccessChain %17 %327 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFAdd %326 %330 
                                                      OpStore %324 %331 
                                       f32_3 %332 = OpLoad %324 
                                       f32_3 %333 = OpLoad %139 
                                       f32_3 %334 = OpFDiv %332 %333 
                                                      OpStore %324 %334 
                                       f32_3 %336 = OpLoad %139 
                                       f32_4 %337 = OpVectorShuffle %336 %336 0 1 2 0 
                                      bool_4 %338 = OpFOrdLessThan %154 %337 
                                      bool_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                                      OpStore %335 %339 
                                       f32_3 %341 = OpLoad %313 
                                                      OpStore %340 %341 
                               Private bool* %342 = OpAccessChain %335 %163 
                                        bool %343 = OpLoad %342 
                                                      OpSelectionMerge %346 None 
                                                      OpBranchConditional %343 %345 %349 
                                             %345 = OpLabel 
                                Private f32* %347 = OpAccessChain %313 %163 
                                         f32 %348 = OpLoad %347 
                                                      OpStore %344 %348 
                                                      OpBranch %346 
                                             %349 = OpLabel 
                                Private f32* %350 = OpAccessChain %324 %163 
                                         f32 %351 = OpLoad %350 
                                                      OpStore %344 %351 
                                                      OpBranch %346 
                                             %346 = OpLabel 
                                         f32 %352 = OpLoad %344 
                               Function f32* %353 = OpAccessChain %340 %163 
                                                      OpStore %353 %352 
                               Private bool* %354 = OpAccessChain %335 %177 
                                        bool %355 = OpLoad %354 
                                                      OpSelectionMerge %358 None 
                                                      OpBranchConditional %355 %357 %361 
                                             %357 = OpLabel 
                                Private f32* %359 = OpAccessChain %313 %177 
                                         f32 %360 = OpLoad %359 
                                                      OpStore %356 %360 
                                                      OpBranch %358 
                                             %361 = OpLabel 
                                Private f32* %362 = OpAccessChain %324 %177 
                                         f32 %363 = OpLoad %362 
                                                      OpStore %356 %363 
                                                      OpBranch %358 
                                             %358 = OpLabel 
                                         f32 %364 = OpLoad %356 
                               Function f32* %365 = OpAccessChain %340 %177 
                                                      OpStore %365 %364 
                               Private bool* %366 = OpAccessChain %335 %190 
                                        bool %367 = OpLoad %366 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %367 %369 %373 
                                             %369 = OpLabel 
                                Private f32* %371 = OpAccessChain %313 %190 
                                         f32 %372 = OpLoad %371 
                                                      OpStore %368 %372 
                                                      OpBranch %370 
                                             %373 = OpLabel 
                                Private f32* %374 = OpAccessChain %324 %190 
                                         f32 %375 = OpLoad %374 
                                                      OpStore %368 %375 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %376 = OpLoad %368 
                               Function f32* %377 = OpAccessChain %340 %190 
                                                      OpStore %377 %376 
                                       f32_3 %378 = OpLoad %340 
                                                      OpStore %313 %378 
                                Private f32* %379 = OpAccessChain %313 %177 
                                         f32 %380 = OpLoad %379 
                                Private f32* %381 = OpAccessChain %313 %163 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpExtInst %1 37 %380 %382 
                                                      OpStore %300 %383 
                                Private f32* %384 = OpAccessChain %313 %190 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpLoad %300 
                                         f32 %387 = OpExtInst %1 37 %385 %386 
                                                      OpStore %300 %387 
                                       f32_3 %388 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %389 = OpAccessChain %17 %293 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFNegate %391 
                                       f32_3 %393 = OpFAdd %388 %392 
                                                      OpStore %313 %393 
                                       f32_3 %394 = OpLoad %139 
                                         f32 %395 = OpLoad %300 
                                       f32_3 %396 = OpCompositeConstruct %395 %395 %395 
                                       f32_3 %397 = OpFMul %394 %396 
                                       f32_3 %398 = OpLoad %313 
                                       f32_3 %399 = OpFAdd %397 %398 
                                       f32_4 %400 = OpLoad %87 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %87 %401 
                                                      OpBranch %299 
                                             %299 = OpLabel 
                       read_only TextureCube %403 = OpLoad %402 
                                     sampler %404 = OpLoad %249 
                read_only TextureCubeSampled %405 = OpSampledImage %403 %404 
                                       f32_4 %406 = OpLoad %87 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                         f32 %408 = OpLoad %77 
                                       f32_4 %409 = OpImageSampleExplicitLod %405 %407 Lod %7 
                                                      OpStore %87 %409 
                                Private f32* %410 = OpAccessChain %87 %105 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFAdd %411 %260 
                                                      OpStore %77 %412 
                                Uniform f32* %414 = OpAccessChain %17 %413 %105 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpLoad %77 
                                         f32 %417 = OpFMul %415 %416 
                                         f32 %418 = OpFAdd %417 %75 
                                                      OpStore %77 %418 
                                         f32 %419 = OpLoad %77 
                                         f32 %420 = OpExtInst %1 30 %419 
                                                      OpStore %77 %420 
                                         f32 %421 = OpLoad %77 
                                Uniform f32* %422 = OpAccessChain %17 %413 %177 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFMul %421 %423 
                                                      OpStore %77 %424 
                                         f32 %425 = OpLoad %77 
                                         f32 %426 = OpExtInst %1 29 %425 
                                                      OpStore %77 %426 
                                         f32 %427 = OpLoad %77 
                                Uniform f32* %428 = OpAccessChain %17 %413 %163 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                                      OpStore %77 %430 
                                       f32_4 %431 = OpLoad %87 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                         f32 %433 = OpLoad %77 
                                       f32_3 %434 = OpCompositeConstruct %433 %433 %433 
                                       f32_3 %435 = OpFMul %432 %434 
                                       f32_4 %436 = OpLoad %87 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %87 %437 
                                         f32 %438 = OpLoad %257 
                                       f32_3 %439 = OpCompositeConstruct %438 %438 %438 
                                       f32_4 %440 = OpLoad %119 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %439 %441 
                                       f32_4 %443 = OpLoad %87 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_3 %445 = OpFNegate %444 
                                       f32_3 %446 = OpFAdd %442 %445 
                                       f32_4 %447 = OpLoad %119 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %119 %448 
                              Uniform f32_4* %449 = OpAccessChain %17 %142 
                                       f32_4 %450 = OpLoad %449 
                                       f32_3 %451 = OpVectorShuffle %450 %450 3 3 3 
                                       f32_4 %452 = OpLoad %119 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                       f32_3 %454 = OpFMul %451 %453 
                                       f32_4 %455 = OpLoad %87 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpFAdd %454 %456 
                                                      OpStore %127 %457 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                       f32_3 %458 = OpLoad vs_TEXCOORD1 
                                       f32_3 %459 = OpLoad vs_TEXCOORD1 
                                         f32 %460 = OpDot %458 %459 
                                                      OpStore %77 %460 
                                         f32 %461 = OpLoad %77 
                                         f32 %462 = OpExtInst %1 32 %461 
                                                      OpStore %77 %462 
                                         f32 %463 = OpLoad %77 
                                       f32_3 %464 = OpCompositeConstruct %463 %463 %463 
                                       f32_3 %465 = OpLoad vs_TEXCOORD1 
                                       f32_3 %466 = OpFMul %464 %465 
                                       f32_4 %467 = OpLoad %87 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %87 %468 
                                       f32_3 %469 = OpLoad %44 
                              Uniform f32_4* %470 = OpAccessChain %17 %63 
                                       f32_4 %471 = OpLoad %470 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFMul %469 %472 
                                       f32_3 %476 = OpFAdd %473 %475 
                                       f32_4 %477 = OpLoad %119 
                                       f32_4 %478 = OpVectorShuffle %477 %476 4 5 6 3 
                                                      OpStore %119 %478 
                                Uniform f32* %480 = OpAccessChain %17 %479 
                                         f32 %481 = OpLoad %480 
                                Uniform f32* %482 = OpAccessChain %17 %479 
                                         f32 %483 = OpLoad %482 
                                Uniform f32* %484 = OpAccessChain %17 %479 
                                         f32 %485 = OpLoad %484 
                                       f32_3 %486 = OpCompositeConstruct %481 %483 %485 
                                         f32 %487 = OpCompositeExtract %486 0 
                                         f32 %488 = OpCompositeExtract %486 1 
                                         f32 %489 = OpCompositeExtract %486 2 
                                       f32_3 %490 = OpCompositeConstruct %487 %488 %489 
                                       f32_4 %491 = OpLoad %119 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFMul %490 %492 
                                       f32_3 %496 = OpFAdd %493 %495 
                                       f32_4 %497 = OpLoad %119 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
                                                      OpStore %119 %498 
                                Uniform f32* %499 = OpAccessChain %17 %479 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFNegate %500 
                                         f32 %503 = OpFMul %501 %502 
                                         f32 %504 = OpFAdd %503 %502 
                                                      OpStore %77 %504 
                                         f32 %505 = OpLoad %77 
                                       f32_3 %506 = OpCompositeConstruct %505 %505 %505 
                                       f32_3 %507 = OpLoad %61 
                                       f32_3 %508 = OpFMul %506 %507 
                                                      OpStore %61 %508 
                                       f32_4 %509 = OpLoad %9 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                         f32 %511 = OpLoad %27 
                                       f32_3 %512 = OpCompositeConstruct %511 %511 %511 
                                       f32_3 %513 = OpFMul %510 %512 
                              Uniform f32_4* %515 = OpAccessChain %17 %514 
                                       f32_4 %516 = OpLoad %515 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpFAdd %513 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %9 %520 
                                       f32_4 %521 = OpLoad %9 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_4 %523 = OpLoad %9 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                         f32 %525 = OpDot %522 %524 
                                                      OpStore %27 %525 
                                         f32 %526 = OpLoad %27 
                                         f32 %528 = OpExtInst %1 40 %526 %527 
                                                      OpStore %27 %528 
                                         f32 %529 = OpLoad %27 
                                         f32 %530 = OpExtInst %1 32 %529 
                                                      OpStore %27 %530 
                                         f32 %531 = OpLoad %27 
                                       f32_3 %532 = OpCompositeConstruct %531 %531 %531 
                                       f32_4 %533 = OpLoad %9 
                                       f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                       f32_3 %535 = OpFMul %532 %534 
                                       f32_4 %536 = OpLoad %9 
                                       f32_4 %537 = OpVectorShuffle %536 %535 4 5 6 3 
                                                      OpStore %9 %537 
                                       f32_4 %538 = OpLoad %87 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_4 %540 = OpLoad %35 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                         f32 %542 = OpDot %539 %541 
                                                      OpStore %27 %542 
                                       f32_4 %543 = OpLoad %87 
                                       f32_3 %544 = OpVectorShuffle %543 %543 0 1 2 
                              Uniform f32_4* %545 = OpAccessChain %17 %514 
                                       f32_4 %546 = OpLoad %545 
                                       f32_3 %547 = OpVectorShuffle %546 %546 0 1 2 
                                         f32 %548 = OpDot %544 %547 
                                Private f32* %549 = OpAccessChain %35 %163 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %35 %163 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpExtInst %1 43 %551 %102 %75 
                                Private f32* %553 = OpAccessChain %35 %163 
                                                      OpStore %553 %552 
                                       f32_4 %555 = OpLoad %87 
                                       f32_3 %556 = OpVectorShuffle %555 %555 0 1 2 
                                       f32_4 %557 = OpLoad %9 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                         f32 %559 = OpDot %556 %558 
                                                      OpStore %554 %559 
                                         f32 %560 = OpLoad %554 
                                         f32 %561 = OpExtInst %1 43 %560 %102 %75 
                                                      OpStore %554 %561 
                              Uniform f32_4* %562 = OpAccessChain %17 %514 
                                       f32_4 %563 = OpLoad %562 
                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
                                       f32_4 %565 = OpLoad %9 
                                       f32_3 %566 = OpVectorShuffle %565 %565 0 1 2 
                                         f32 %567 = OpDot %564 %566 
                                Private f32* %568 = OpAccessChain %9 %163 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %9 %163 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpExtInst %1 43 %570 %102 %75 
                                Private f32* %572 = OpAccessChain %9 %163 
                                                      OpStore %572 %571 
                                Private f32* %574 = OpAccessChain %9 %163 
                                         f32 %575 = OpLoad %574 
                                Private f32* %576 = OpAccessChain %9 %163 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpFMul %575 %577 
                                Private f32* %579 = OpAccessChain %573 %163 
                                                      OpStore %579 %578 
                                       f32_3 %580 = OpLoad %573 
                                       f32_2 %581 = OpVectorShuffle %580 %580 0 0 
                                         f32 %582 = OpLoad %69 
                                       f32_2 %583 = OpCompositeConstruct %582 %582 
                                         f32 %584 = OpDot %581 %583 
                                Private f32* %585 = OpAccessChain %573 %163 
                                                      OpStore %585 %584 
                                Private f32* %586 = OpAccessChain %573 %163 
                                         f32 %587 = OpLoad %586 
                                         f32 %589 = OpFAdd %587 %588 
                                Private f32* %590 = OpAccessChain %573 %163 
                                                      OpStore %590 %589 
                                Private f32* %592 = OpAccessChain %35 %163 
                                         f32 %593 = OpLoad %592 
                                         f32 %594 = OpFNegate %593 
                                         f32 %595 = OpFAdd %594 %75 
                                                      OpStore %591 %595 
                                         f32 %597 = OpLoad %591 
                                         f32 %598 = OpLoad %591 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %596 %599 
                                         f32 %600 = OpLoad %596 
                                         f32 %601 = OpLoad %596 
                                         f32 %602 = OpFMul %600 %601 
                                                      OpStore %596 %602 
                                         f32 %603 = OpLoad %591 
                                         f32 %604 = OpLoad %596 
                                         f32 %605 = OpFMul %603 %604 
                                                      OpStore %591 %605 
                                Private f32* %606 = OpAccessChain %573 %163 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpLoad %591 
                                         f32 %609 = OpFMul %607 %608 
                                         f32 %610 = OpFAdd %609 %75 
                                                      OpStore %591 %610 
                                         f32 %611 = OpLoad %27 
                                         f32 %612 = OpExtInst %1 4 %611 
                                         f32 %613 = OpFNegate %612 
                                         f32 %614 = OpFAdd %613 %75 
                                                      OpStore %596 %614 
                                         f32 %615 = OpLoad %596 
                                         f32 %616 = OpLoad %596 
                                         f32 %617 = OpFMul %615 %616 
                                                      OpStore %257 %617 
                                         f32 %618 = OpLoad %257 
                                         f32 %619 = OpLoad %257 
                                         f32 %620 = OpFMul %618 %619 
                                                      OpStore %257 %620 
                                         f32 %621 = OpLoad %596 
                                         f32 %622 = OpLoad %257 
                                         f32 %623 = OpFMul %621 %622 
                                                      OpStore %596 %623 
                                Private f32* %624 = OpAccessChain %573 %163 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpLoad %596 
                                         f32 %627 = OpFMul %625 %626 
                                         f32 %628 = OpFAdd %627 %75 
                                Private f32* %629 = OpAccessChain %573 %163 
                                                      OpStore %629 %628 
                                Private f32* %630 = OpAccessChain %573 %163 
                                         f32 %631 = OpLoad %630 
                                         f32 %632 = OpLoad %591 
                                         f32 %633 = OpFMul %631 %632 
                                Private f32* %634 = OpAccessChain %573 %163 
                                                      OpStore %634 %633 
                                         f32 %635 = OpLoad %69 
                                         f32 %636 = OpLoad %69 
                                         f32 %637 = OpFMul %635 %636 
                                                      OpStore %591 %637 
                                         f32 %638 = OpLoad %591 
                                         f32 %640 = OpExtInst %1 40 %638 %639 
                                                      OpStore %591 %640 
                                         f32 %641 = OpLoad %591 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFAdd %642 %75 
                                                      OpStore %69 %643 
                                         f32 %644 = OpLoad %27 
                                         f32 %645 = OpExtInst %1 4 %644 
                                         f32 %646 = OpLoad %69 
                                         f32 %647 = OpFMul %645 %646 
                                         f32 %648 = OpLoad %591 
                                         f32 %649 = OpFAdd %647 %648 
                                                      OpStore %257 %649 
                                Private f32* %650 = OpAccessChain %35 %163 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpLoad %69 
                                         f32 %653 = OpFMul %651 %652 
                                         f32 %654 = OpLoad %591 
                                         f32 %655 = OpFAdd %653 %654 
                                                      OpStore %69 %655 
                                         f32 %656 = OpLoad %27 
                                         f32 %657 = OpExtInst %1 4 %656 
                                         f32 %658 = OpLoad %69 
                                         f32 %659 = OpFMul %657 %658 
                                                      OpStore %27 %659 
                                Private f32* %660 = OpAccessChain %35 %163 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %257 
                                         f32 %663 = OpFMul %661 %662 
                                         f32 %664 = OpLoad %27 
                                         f32 %665 = OpFAdd %663 %664 
                                                      OpStore %27 %665 
                                         f32 %666 = OpLoad %27 
                                         f32 %668 = OpFAdd %666 %667 
                                                      OpStore %27 %668 
                                         f32 %670 = OpLoad %27 
                                         f32 %671 = OpFDiv %669 %670 
                                                      OpStore %27 %671 
                                         f32 %672 = OpLoad %591 
                                         f32 %673 = OpLoad %591 
                                         f32 %674 = OpFMul %672 %673 
                                                      OpStore %69 %674 
                                         f32 %675 = OpLoad %554 
                                         f32 %676 = OpLoad %69 
                                         f32 %677 = OpFMul %675 %676 
                                         f32 %678 = OpLoad %554 
                                         f32 %679 = OpFNegate %678 
                                         f32 %680 = OpFAdd %677 %679 
                                                      OpStore %257 %680 
                                         f32 %681 = OpLoad %257 
                                         f32 %682 = OpLoad %554 
                                         f32 %683 = OpFMul %681 %682 
                                         f32 %684 = OpFAdd %683 %75 
                                                      OpStore %554 %684 
                                         f32 %685 = OpLoad %69 
                                         f32 %687 = OpFMul %685 %686 
                                                      OpStore %69 %687 
                                         f32 %688 = OpLoad %554 
                                         f32 %689 = OpLoad %554 
                                         f32 %690 = OpFMul %688 %689 
                                         f32 %692 = OpFAdd %690 %691 
                                                      OpStore %554 %692 
                                         f32 %693 = OpLoad %69 
                                         f32 %694 = OpLoad %554 
                                         f32 %695 = OpFDiv %693 %694 
                                                      OpStore %554 %695 
                                         f32 %696 = OpLoad %27 
                                         f32 %697 = OpLoad %554 
                                         f32 %698 = OpFMul %696 %697 
                                Private f32* %699 = OpAccessChain %573 %190 
                                                      OpStore %699 %698 
                                       f32_4 %700 = OpLoad %35 
                                       f32_2 %701 = OpVectorShuffle %700 %700 0 0 
                                       f32_3 %702 = OpLoad %573 
                                       f32_2 %703 = OpVectorShuffle %702 %702 0 2 
                                       f32_2 %704 = OpFMul %701 %703 
                                       f32_3 %705 = OpLoad %573 
                                       f32_3 %706 = OpVectorShuffle %705 %704 3 1 4 
                                                      OpStore %573 %706 
                                Private f32* %707 = OpAccessChain %573 %190 
                                         f32 %708 = OpLoad %707 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %27 %710 
                                         f32 %711 = OpLoad %27 
                                         f32 %712 = OpExtInst %1 40 %711 %102 
                                                      OpStore %27 %712 
                                         f32 %713 = OpLoad %591 
                                         f32 %714 = OpLoad %591 
                                         f32 %715 = OpFMul %713 %714 
                                         f32 %716 = OpFAdd %715 %75 
                                                      OpStore %591 %716 
                                         f32 %717 = OpLoad %591 
                                         f32 %718 = OpFDiv %75 %717 
                                                      OpStore %591 %718 
                                       f32_4 %719 = OpLoad %119 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 1 2 
                                       f32_4 %721 = OpLoad %119 
                                       f32_3 %722 = OpVectorShuffle %721 %721 0 1 2 
                                         f32 %723 = OpDot %720 %722 
                                Private f32* %724 = OpAccessChain %35 %163 
                                                      OpStore %724 %723 
                                Private f32* %726 = OpAccessChain %35 %163 
                                         f32 %727 = OpLoad %726 
                                        bool %728 = OpFOrdNotEqual %727 %102 
                                                      OpStore %725 %728 
                                        bool %729 = OpLoad %725 
                                         f32 %730 = OpSelect %729 %75 %102 
                                Private f32* %731 = OpAccessChain %35 %163 
                                                      OpStore %731 %730 
                                         f32 %732 = OpLoad %27 
                                Private f32* %733 = OpAccessChain %35 %163 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpFMul %732 %734 
                                                      OpStore %27 %735 
                                         f32 %736 = OpLoad %77 
                                         f32 %737 = OpFNegate %736 
                                Uniform f32* %738 = OpAccessChain %17 %70 
                                         f32 %739 = OpLoad %738 
                                         f32 %740 = OpFAdd %737 %739 
                                Private f32* %741 = OpAccessChain %35 %163 
                                                      OpStore %741 %740 
                                Private f32* %742 = OpAccessChain %35 %163 
                                         f32 %743 = OpLoad %742 
                                         f32 %744 = OpFAdd %743 %75 
                                Private f32* %745 = OpAccessChain %35 %163 
                                                      OpStore %745 %744 
                                Private f32* %746 = OpAccessChain %35 %163 
                                         f32 %747 = OpLoad %746 
                                         f32 %748 = OpExtInst %1 43 %747 %102 %75 
                                Private f32* %749 = OpAccessChain %35 %163 
                                                      OpStore %749 %748 
                                       f32_3 %750 = OpLoad %573 
                                       f32_3 %751 = OpVectorShuffle %750 %750 0 0 0 
                              Uniform f32_4* %753 = OpAccessChain %17 %752 
                                       f32_4 %754 = OpLoad %753 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %751 %755 
                                       f32_4 %757 = OpLoad %87 
                                       f32_4 %758 = OpVectorShuffle %757 %756 4 5 6 3 
                                                      OpStore %87 %758 
                                         f32 %759 = OpLoad %27 
                                       f32_3 %760 = OpCompositeConstruct %759 %759 %759 
                              Uniform f32_4* %761 = OpAccessChain %17 %752 
                                       f32_4 %762 = OpLoad %761 
                                       f32_3 %763 = OpVectorShuffle %762 %762 0 1 2 
                                       f32_3 %764 = OpFMul %760 %763 
                                                      OpStore %139 %764 
                                Private f32* %765 = OpAccessChain %9 %163 
                                         f32 %766 = OpLoad %765 
                                         f32 %767 = OpFNegate %766 
                                         f32 %768 = OpFAdd %767 %75 
                                Private f32* %769 = OpAccessChain %9 %163 
                                                      OpStore %769 %768 
                                Private f32* %770 = OpAccessChain %9 %163 
                                         f32 %771 = OpLoad %770 
                                Private f32* %772 = OpAccessChain %9 %163 
                                         f32 %773 = OpLoad %772 
                                         f32 %774 = OpFMul %771 %773 
                                Private f32* %775 = OpAccessChain %573 %163 
                                                      OpStore %775 %774 
                                Private f32* %776 = OpAccessChain %573 %163 
                                         f32 %777 = OpLoad %776 
                                Private f32* %778 = OpAccessChain %573 %163 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFMul %777 %779 
                                Private f32* %781 = OpAccessChain %573 %163 
                                                      OpStore %781 %780 
                                Private f32* %782 = OpAccessChain %9 %163 
                                         f32 %783 = OpLoad %782 
                                Private f32* %784 = OpAccessChain %573 %163 
                                         f32 %785 = OpLoad %784 
                                         f32 %786 = OpFMul %783 %785 
                                Private f32* %787 = OpAccessChain %9 %163 
                                                      OpStore %787 %786 
                                       f32_4 %788 = OpLoad %119 
                                       f32_3 %789 = OpVectorShuffle %788 %788 0 1 2 
                                       f32_3 %790 = OpFNegate %789 
                                       f32_3 %792 = OpFAdd %790 %791 
                                                      OpStore %313 %792 
                                       f32_3 %793 = OpLoad %313 
                                       f32_4 %794 = OpLoad %9 
                                       f32_3 %795 = OpVectorShuffle %794 %794 0 0 0 
                                       f32_3 %796 = OpFMul %793 %795 
                                       f32_4 %797 = OpLoad %119 
                                       f32_3 %798 = OpVectorShuffle %797 %797 0 1 2 
                                       f32_3 %799 = OpFAdd %796 %798 
                                       f32_4 %800 = OpLoad %9 
                                       f32_4 %801 = OpVectorShuffle %800 %799 4 5 2 6 
                                                      OpStore %9 %801 
                                       f32_4 %802 = OpLoad %9 
                                       f32_3 %803 = OpVectorShuffle %802 %802 0 1 3 
                                       f32_3 %804 = OpLoad %139 
                                       f32_3 %805 = OpFMul %803 %804 
                                       f32_4 %806 = OpLoad %9 
                                       f32_4 %807 = OpVectorShuffle %806 %805 4 5 2 6 
                                                      OpStore %9 %807 
                                       f32_3 %808 = OpLoad %61 
                                       f32_4 %809 = OpLoad %87 
                                       f32_3 %810 = OpVectorShuffle %809 %809 0 1 2 
                                       f32_3 %811 = OpFMul %808 %810 
                                       f32_4 %812 = OpLoad %9 
                                       f32_3 %813 = OpVectorShuffle %812 %812 0 1 3 
                                       f32_3 %814 = OpFAdd %811 %813 
                                       f32_4 %815 = OpLoad %9 
                                       f32_4 %816 = OpVectorShuffle %815 %814 4 5 2 6 
                                                      OpStore %9 %816 
                                       f32_3 %817 = OpLoad %127 
                                         f32 %818 = OpLoad %591 
                                       f32_3 %819 = OpCompositeConstruct %818 %818 %818 
                                       f32_3 %820 = OpFMul %817 %819 
                                                      OpStore %61 %820 
                                       f32_4 %821 = OpLoad %119 
                                       f32_3 %822 = OpVectorShuffle %821 %821 0 1 2 
                                       f32_3 %823 = OpFNegate %822 
                                       f32_4 %824 = OpLoad %35 
                                       f32_3 %825 = OpVectorShuffle %824 %824 0 0 0 
                                       f32_3 %826 = OpFAdd %823 %825 
                                       f32_4 %827 = OpLoad %35 
                                       f32_4 %828 = OpVectorShuffle %827 %826 4 5 2 6 
                                                      OpStore %35 %828 
                                         f32 %829 = OpLoad %596 
                                       f32_3 %830 = OpCompositeConstruct %829 %829 %829 
                                       f32_4 %831 = OpLoad %35 
                                       f32_3 %832 = OpVectorShuffle %831 %831 0 1 3 
                                       f32_3 %833 = OpFMul %830 %832 
                                       f32_4 %834 = OpLoad %119 
                                       f32_3 %835 = OpVectorShuffle %834 %834 0 1 2 
                                       f32_3 %836 = OpFAdd %833 %835 
                                       f32_4 %837 = OpLoad %35 
                                       f32_4 %838 = OpVectorShuffle %837 %836 4 5 6 3 
                                                      OpStore %35 %838 
                                       f32_3 %839 = OpLoad %61 
                                       f32_4 %840 = OpLoad %35 
                                       f32_3 %841 = OpVectorShuffle %840 %840 0 1 2 
                                       f32_3 %842 = OpFMul %839 %841 
                                       f32_4 %843 = OpLoad %9 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 3 
                                       f32_3 %845 = OpFAdd %842 %844 
                                       f32_4 %846 = OpLoad %9 
                                       f32_4 %847 = OpVectorShuffle %846 %845 4 5 6 3 
                                                      OpStore %9 %847 
                                       f32_3 %848 = OpLoad %44 
                              Uniform f32_4* %849 = OpAccessChain %17 %63 
                                       f32_4 %850 = OpLoad %849 
                                       f32_3 %851 = OpVectorShuffle %850 %850 0 1 2 
                                       f32_3 %852 = OpFMul %848 %851 
                                       f32_4 %853 = OpLoad %9 
                                       f32_3 %854 = OpVectorShuffle %853 %853 0 1 2 
                                       f32_3 %855 = OpFAdd %852 %854 
                                       f32_4 %856 = OpLoad %9 
                                       f32_4 %857 = OpVectorShuffle %856 %855 4 5 6 3 
                                                      OpStore %9 %857 
                                         f32 %860 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %862 = OpAccessChain %17 %861 %177 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFDiv %860 %863 
                                                      OpStore %27 %864 
                                         f32 %865 = OpLoad %27 
                                         f32 %866 = OpFNegate %865 
                                         f32 %867 = OpFAdd %866 %75 
                                                      OpStore %27 %867 
                                         f32 %868 = OpLoad %27 
                                Uniform f32* %869 = OpAccessChain %17 %861 %190 
                                         f32 %870 = OpLoad %869 
                                         f32 %871 = OpFMul %868 %870 
                                                      OpStore %27 %871 
                                         f32 %872 = OpLoad %27 
                                         f32 %873 = OpExtInst %1 40 %872 %102 
                                                      OpStore %27 %873 
                                         f32 %874 = OpLoad %27 
                                Uniform f32* %876 = OpAccessChain %17 %875 %190 
                                         f32 %877 = OpLoad %876 
                                         f32 %878 = OpFMul %874 %877 
                                Uniform f32* %879 = OpAccessChain %17 %875 %105 
                                         f32 %880 = OpLoad %879 
                                         f32 %881 = OpFAdd %878 %880 
                                                      OpStore %27 %881 
                                         f32 %882 = OpLoad %27 
                                         f32 %883 = OpExtInst %1 43 %882 %102 %75 
                                                      OpStore %27 %883 
                                       f32_4 %884 = OpLoad %9 
                                       f32_3 %885 = OpVectorShuffle %884 %884 0 1 2 
                              Uniform f32_4* %887 = OpAccessChain %17 %886 
                                       f32_4 %888 = OpLoad %887 
                                       f32_3 %889 = OpVectorShuffle %888 %888 0 1 2 
                                       f32_3 %890 = OpFNegate %889 
                                       f32_3 %891 = OpFAdd %885 %890 
                                       f32_4 %892 = OpLoad %9 
                                       f32_4 %893 = OpVectorShuffle %892 %891 4 5 6 3 
                                                      OpStore %9 %893 
                                         f32 %896 = OpLoad %27 
                                       f32_3 %897 = OpCompositeConstruct %896 %896 %896 
                                       f32_4 %898 = OpLoad %9 
                                       f32_3 %899 = OpVectorShuffle %898 %898 0 1 2 
                                       f32_3 %900 = OpFMul %897 %899 
                              Uniform f32_4* %901 = OpAccessChain %17 %886 
                                       f32_4 %902 = OpLoad %901 
                                       f32_3 %903 = OpVectorShuffle %902 %902 0 1 2 
                                       f32_3 %904 = OpFAdd %900 %903 
                                       f32_4 %905 = OpLoad %895 
                                       f32_4 %906 = OpVectorShuffle %905 %904 4 5 6 3 
                                                      OpStore %895 %906 
                                 Output f32* %908 = OpAccessChain %895 %105 
                                                      OpStore %908 %75 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat11;
float u_xlat15;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5 = float(_numOfFrames);
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat5;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat0.x = u_xlat5 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    gl_Position = u_xlat3;
    vs_TEXCOORD4 = u_xlat3.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat11)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat11 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat11);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat1 = (-u_xlat2.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat0.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat0.xxxx + u_xlat4;
    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat2 * u_xlat1;
    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * u_xlat0.y;
    u_xlat15 = u_xlat0.x * u_xlat0.x + (-u_xlat15);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat2);
    u_xlat0.y = dot(unity_SHBg, u_xlat2);
    u_xlat0.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat37 = (-_Glossiness) + 1.0;
    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz;
    u_xlat5.w = 1.0;
    u_xlat6.x = dot(unity_SHAr, u_xlat5);
    u_xlat6.y = dot(unity_SHAg, u_xlat5);
    u_xlat6.z = dot(unity_SHAb, u_xlat5);
    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb38){
        u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat38 = inversesqrt(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat38) * u_xlat4.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
        u_xlat38 = min(u_xlat7.z, u_xlat38);
        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat38 = (-u_xlat37) * 0.699999988 + 1.70000005;
    u_xlat38 = u_xlat37 * u_xlat38;
    u_xlat38 = u_xlat38 * 6.0;
    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat38);
    u_xlat39 = u_xlat6.w + -1.0;
    u_xlat39 = unity_SpecCube0_HDR.w * u_xlat39 + 1.0;
    u_xlat39 = log2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.y;
    u_xlat39 = exp2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat39);
    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = inversesqrt(u_xlat40);
            u_xlat8.xyz = vec3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat38);
        u_xlat38 = u_xlat4.w + -1.0;
        u_xlat38 = unity_SpecCube1_HDR.w * u_xlat38 + 1.0;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.y;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz + (-u_xlat4.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
    }
    u_xlat38 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat4.xyz = vec3(u_xlat38) * vs_TEXCOORD1.xyz;
    u_xlat6.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat38 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat38) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat37));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat39 = u_xlat25 * u_xlat25;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat25 = u_xlat25 * u_xlat39;
    u_xlat12.x = u_xlat12.x * u_xlat25 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat37 * u_xlat37;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat37 = (-u_xlat24) + 1.0;
    u_xlat39 = abs(u_xlat36) * u_xlat37 + u_xlat24;
    u_xlat37 = u_xlat1.x * u_xlat37 + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat37;
    u_xlat36 = u_xlat1.x * u_xlat39 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat37 = u_xlat24 * u_xlat24;
    u_xlat39 = u_xlat13 * u_xlat37 + (-u_xlat13);
    u_xlat13 = u_xlat39 * u_xlat13 + 1.0;
    u_xlat37 = u_xlat37 * 0.318309873;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat13 = u_xlat37 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat12.z = u_xlat36 * 3.14159274;
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat36 = max(u_xlat12.z, 0.0);
    u_xlat24 = u_xlat24 * u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat36 * u_xlat1.x;
    u_xlat1.x = (-u_xlat38) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat5.xyz;
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat8.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat24);
    u_xlat1.xyw = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyw + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    u_xlat36 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 572
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %69 %160 %237 %242 %247 %248 %392 %395 %559 %565 %566 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpMemberDecorate %18 17 Offset 18 
                                                      OpMemberDecorate %18 18 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %69 Location 69 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %160 Location 160 
                                                      OpMemberDecorate %235 0 BuiltIn 235 
                                                      OpMemberDecorate %235 1 BuiltIn 235 
                                                      OpMemberDecorate %235 2 BuiltIn 235 
                                                      OpDecorate %235 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 242 
                                                      OpDecorate vs_TEXCOORD0 Location 247 
                                                      OpDecorate %248 Location 248 
                                                      OpDecorate vs_TEXCOORD1 Location 392 
                                                      OpDecorate vs_TEXCOORD2 Location 395 
                                                      OpDecorate vs_TEXCOORD3 Location 559 
                                                      OpDecorate vs_TEXCOORD5 Location 565 
                                                      OpDecorate vs_TEXCOORD6 Location 566 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeInt 32 1 
                                              %18 = OpTypeStruct %7 %7 %7 %7 %7 %12 %7 %7 %7 %7 %14 %15 %16 %6 %6 %6 %6 %17 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %20 = OpVariable Uniform 
                                          i32 %21 = OpConstant 0 
                                          u32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %6 
                                          i32 %27 = OpConstant 16 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                 Private f32* %38 = OpVariable Private 
                                          i32 %39 = OpConstant 17 
                                              %40 = OpTypePointer Uniform %17 
                                          f32 %58 = OpConstant 3.674022E-40 
                                              %68 = OpTypePointer Input %7 
                                 Input f32_4* %69 = OpVariable Input 
                                              %70 = OpTypePointer Input %6 
                               Private f32_4* %78 = OpVariable Private 
                                              %79 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %80 = OpTypePointer UniformConstant %79 
         UniformConstant read_only Texture2D* %81 = OpVariable UniformConstant 
                                              %83 = OpTypeSampler 
                                              %84 = OpTypePointer UniformConstant %83 
                     UniformConstant sampler* %85 = OpVariable UniformConstant 
                                              %87 = OpTypeSampledImage %79 
                                              %89 = OpTypeVector %6 2 
                                          f32 %92 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %94 = OpVariable UniformConstant 
                     UniformConstant sampler* %96 = OpVariable UniformConstant 
                                             %102 = OpTypeVector %6 3 
                                         f32 %108 = OpConstant 3.674022E-40 
                                       f32_3 %109 = OpConstantComposite %108 %108 %108 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_3 %112 = OpConstantComposite %111 %111 %111 
                              Private f32_4* %116 = OpVariable Private 
                                         i32 %117 = OpConstant 15 
                                         i32 %121 = OpConstant 14 
                                         f32 %147 = OpConstant 3.674022E-40 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %147 %148 
                                         u32 %156 = OpConstant 3 
                                Input f32_4* %160 = OpVariable Input 
                              Private f32_4* %166 = OpVariable Private 
                                         i32 %169 = OpConstant 10 
                                         i32 %170 = OpConstant 1 
                                             %171 = OpTypePointer Uniform %7 
                                         i32 %182 = OpConstant 2 
                                         i32 %191 = OpConstant 3 
                              Private f32_4* %206 = OpVariable Private 
                                         i32 %209 = OpConstant 12 
                                             %234 = OpTypeArray %6 %22 
                                             %235 = OpTypeStruct %7 %6 %234 
                                             %236 = OpTypePointer Output %235 
        Output struct {f32_4; f32; f32[1];}* %237 = OpVariable Output 
                                             %239 = OpTypePointer Output %7 
                                             %241 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %243 = OpConstant 2 
                                             %246 = OpTypePointer Output %89 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %248 = OpVariable Input 
                                         i32 %251 = OpConstant 18 
                                         f32 %274 = OpConstant 3.674022E-40 
                                       f32_2 %275 = OpConstantComposite %274 %274 
                                         f32 %277 = OpConstant 3.674022E-40 
                                       f32_2 %278 = OpConstantComposite %277 %277 
                                Private f32* %282 = OpVariable Private 
                                         f32 %291 = OpConstant 3.674022E-40 
                                         f32 %292 = OpConstant 3.674022E-40 
                                       f32_2 %293 = OpConstantComposite %291 %292 
                                       f32_2 %295 = OpConstantComposite %58 %58 
                                       f32_3 %316 = OpConstantComposite %58 %58 %58 
                                             %328 = OpTypeBool 
                                             %329 = OpTypePointer Private %328 
                               Private bool* %330 = OpVariable Private 
                                       f32_4 %331 = OpConstantComposite %92 %92 %92 %92 
                                         i32 %332 = OpConstant 13 
                                             %336 = OpTypeVector %328 4 
                                             %340 = OpTypePointer Function %102 
                                         i32 %354 = OpConstant 11 
                                             %391 = OpTypePointer Output %102 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         f32 %446 = OpConstant 3.674022E-40 
                                       f32_4 %447 = OpConstantComposite %446 %446 %446 %446 
                                         i32 %452 = OpConstant 4 
                                       f32_4 %456 = OpConstantComposite %58 %58 %58 %58 
                                         i32 %470 = OpConstant 5 
                                Private f32* %510 = OpVariable Private 
                                         i32 %529 = OpConstant 6 
                                         i32 %535 = OpConstant 7 
                                         i32 %541 = OpConstant 8 
                                         i32 %547 = OpConstant 9 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %341 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %20 %21 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                 Uniform f32* %28 = OpAccessChain %20 %27 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %26 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 10 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                 Uniform i32* %41 = OpAccessChain %20 %39 
                                          i32 %42 = OpLoad %41 
                                          f32 %43 = OpConvertSToF %42 
                                                      OpStore %38 %43 
                                          f32 %44 = OpLoad %38 
                                 Private f32* %45 = OpAccessChain %9 %31 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Private f32* %48 = OpAccessChain %9 %31 
                                                      OpStore %48 %47 
                                 Private f32* %49 = OpAccessChain %9 %31 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpExtInst %1 9 %50 
                                 Private f32* %52 = OpAccessChain %9 %31 
                                                      OpStore %52 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpLoad %38 
                                          f32 %56 = OpFDiv %54 %55 
                                 Private f32* %57 = OpAccessChain %9 %31 
                                                      OpStore %57 %56 
                                          f32 %59 = OpLoad %38 
                                          f32 %60 = OpFDiv %58 %59 
                                                      OpStore %38 %60 
                                          f32 %61 = OpLoad %38 
                                 Private f32* %62 = OpAccessChain %9 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %9 %31 
                                          f32 %67 = OpLoad %66 
                                   Input f32* %71 = OpAccessChain %69 %22 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %67 %72 
                                 Private f32* %74 = OpAccessChain %9 %22 
                                                      OpStore %74 %73 
                                   Input f32* %75 = OpAccessChain %69 %31 
                                          f32 %76 = OpLoad %75 
                                 Private f32* %77 = OpAccessChain %9 %31 
                                                      OpStore %77 %76 
                          read_only Texture2D %82 = OpLoad %81 
                                      sampler %86 = OpLoad %85 
                   read_only Texture2DSampled %88 = OpSampledImage %82 %86 
                                        f32_4 %90 = OpLoad %9 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                                        f32_4 %93 = OpImageSampleExplicitLod %88 %91 Lod %7 
                                                      OpStore %78 %93 
                          read_only Texture2D %95 = OpLoad %94 
                                      sampler %97 = OpLoad %96 
                   read_only Texture2DSampled %98 = OpSampledImage %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_4 %101 = OpImageSampleExplicitLod %98 %100 Lod %7 
                                       f32_3 %103 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %9 %105 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 2 1 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                Uniform f32* %118 = OpAccessChain %20 %117 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFNegate %119 
                                Uniform f32* %122 = OpAccessChain %20 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                Private f32* %125 = OpAccessChain %116 %31 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %78 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_4 %128 = OpLoad %116 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 0 0 
                                       f32_3 %130 = OpFMul %127 %129 
                                Uniform f32* %131 = OpAccessChain %20 %117 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %20 %117 
                                         f32 %134 = OpLoad %133 
                                Uniform f32* %135 = OpAccessChain %20 %117 
                                         f32 %136 = OpLoad %135 
                                       f32_3 %137 = OpCompositeConstruct %132 %134 %136 
                                         f32 %138 = OpCompositeExtract %137 0 
                                         f32 %139 = OpCompositeExtract %137 1 
                                         f32 %140 = OpCompositeExtract %137 2 
                                       f32_3 %141 = OpCompositeConstruct %138 %139 %140 
                                       f32_3 %142 = OpFAdd %130 %141 
                                       f32_4 %143 = OpLoad %116 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %116 %144 
                                       f32_4 %145 = OpLoad %78 
                                       f32_2 %146 = OpVectorShuffle %145 %145 3 3 
                                       f32_2 %150 = OpFMul %146 %149 
                                       f32_4 %151 = OpLoad %78 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 2 3 
                                                      OpStore %78 %152 
                                Private f32* %153 = OpAccessChain %116 %31 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                Private f32* %157 = OpAccessChain %116 %156 
                                                      OpStore %157 %155 
                                       f32_4 %158 = OpLoad %116 
                                       f32_3 %159 = OpVectorShuffle %158 %158 3 2 1 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %116 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %116 %165 
                                       f32_4 %167 = OpLoad %116 
                                       f32_4 %168 = OpVectorShuffle %167 %167 1 1 1 1 
                              Uniform f32_4* %172 = OpAccessChain %20 %169 %170 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpFMul %168 %173 
                                                      OpStore %166 %174 
                              Uniform f32_4* %175 = OpAccessChain %20 %169 %21 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpLoad %116 
                                       f32_4 %178 = OpVectorShuffle %177 %177 0 0 0 0 
                                       f32_4 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %166 
                                       f32_4 %181 = OpFAdd %179 %180 
                                                      OpStore %166 %181 
                              Uniform f32_4* %183 = OpAccessChain %20 %169 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpLoad %116 
                                       f32_4 %186 = OpVectorShuffle %185 %185 2 2 2 2 
                                       f32_4 %187 = OpFMul %184 %186 
                                       f32_4 %188 = OpLoad %166 
                                       f32_4 %189 = OpFAdd %187 %188 
                                                      OpStore %116 %189 
                                       f32_4 %190 = OpLoad %116 
                              Uniform f32_4* %192 = OpAccessChain %20 %169 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpFAdd %190 %193 
                                                      OpStore %166 %194 
                              Uniform f32_4* %195 = OpAccessChain %20 %169 %191 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %160 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %116 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %116 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %116 %205 
                                       f32_4 %207 = OpLoad %166 
                                       f32_4 %208 = OpVectorShuffle %207 %207 1 1 1 1 
                              Uniform f32_4* %210 = OpAccessChain %20 %209 %170 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpFMul %208 %211 
                                                      OpStore %206 %212 
                              Uniform f32_4* %213 = OpAccessChain %20 %209 %21 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %166 
                                       f32_4 %216 = OpVectorShuffle %215 %215 0 0 0 0 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %206 
                                       f32_4 %219 = OpFAdd %217 %218 
                                                      OpStore %206 %219 
                              Uniform f32_4* %220 = OpAccessChain %20 %209 %182 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpLoad %166 
                                       f32_4 %223 = OpVectorShuffle %222 %222 2 2 2 2 
                                       f32_4 %224 = OpFMul %221 %223 
                                       f32_4 %225 = OpLoad %206 
                                       f32_4 %226 = OpFAdd %224 %225 
                                                      OpStore %206 %226 
                              Uniform f32_4* %227 = OpAccessChain %20 %209 %191 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %166 
                                       f32_4 %230 = OpVectorShuffle %229 %229 3 3 3 3 
                                       f32_4 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %206 
                                       f32_4 %233 = OpFAdd %231 %232 
                                                      OpStore %166 %233 
                                       f32_4 %238 = OpLoad %166 
                               Output f32_4* %240 = OpAccessChain %237 %21 
                                                      OpStore %240 %238 
                                Private f32* %244 = OpAccessChain %166 %243 
                                         f32 %245 = OpLoad %244 
                                                      OpStore vs_TEXCOORD4 %245 
                                       f32_4 %249 = OpLoad %248 
                                       f32_2 %250 = OpVectorShuffle %249 %249 0 1 
                              Uniform f32_4* %252 = OpAccessChain %20 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFMul %250 %254 
                              Uniform f32_4* %256 = OpAccessChain %20 %251 
                                       f32_4 %257 = OpLoad %256 
                                       f32_2 %258 = OpVectorShuffle %257 %257 2 3 
                                       f32_2 %259 = OpFAdd %255 %258 
                                                      OpStore vs_TEXCOORD0 %259 
                                Private f32* %260 = OpAccessChain %78 %22 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpExtInst %1 8 %261 
                                Private f32* %263 = OpAccessChain %166 %31 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %166 %31 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFMul %266 %148 
                                Private f32* %268 = OpAccessChain %78 %31 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFAdd %267 %269 
                                Private f32* %271 = OpAccessChain %166 %22 
                                                      OpStore %271 %270 
                                       f32_4 %272 = OpLoad %166 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_2 %276 = OpFMul %273 %275 
                                       f32_2 %279 = OpFAdd %276 %278 
                                       f32_4 %280 = OpLoad %78 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 2 3 
                                                      OpStore %78 %281 
                                       f32_4 %283 = OpLoad %78 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_4 %285 = OpLoad %78 
                                       f32_2 %286 = OpVectorShuffle %285 %285 0 1 
                                         f32 %287 = OpDot %284 %286 
                                                      OpStore %282 %287 
                                         f32 %288 = OpLoad %282 
                                       f32_2 %289 = OpCompositeConstruct %288 %288 
                                       f32_2 %290 = OpFNegate %289 
                                       f32_2 %294 = OpFMul %290 %293 
                                       f32_2 %296 = OpFAdd %294 %295 
                                       f32_4 %297 = OpLoad %166 
                                       f32_4 %298 = OpVectorShuffle %297 %296 0 1 4 5 
                                                      OpStore %166 %298 
                                Private f32* %299 = OpAccessChain %166 %243 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpExtInst %1 31 %300 
                                                      OpStore %282 %301 
                                       f32_4 %302 = OpLoad %78 
                                       f32_2 %303 = OpVectorShuffle %302 %302 0 1 
                                         f32 %304 = OpLoad %282 
                                       f32_2 %305 = OpCompositeConstruct %304 %304 
                                       f32_2 %306 = OpFMul %303 %305 
                                       f32_4 %307 = OpLoad %166 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 2 3 
                                                      OpStore %166 %308 
                                       f32_4 %309 = OpLoad %166 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 3 
                                       f32_3 %311 = OpExtInst %1 40 %310 %112 
                                       f32_4 %312 = OpLoad %78 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %78 %313 
                                       f32_4 %314 = OpLoad %78 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %317 = OpExtInst %1 37 %315 %316 
                                       f32_4 %318 = OpLoad %78 
                                       f32_4 %319 = OpVectorShuffle %318 %317 4 5 6 3 
                                                      OpStore %78 %319 
                                Private f32* %320 = OpAccessChain %78 %31 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFNegate %321 
                                Private f32* %323 = OpAccessChain %78 %156 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %9 %31 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                Private f32* %327 = OpAccessChain %9 %156 
                                                      OpStore %327 %326 
                                Uniform f32* %333 = OpAccessChain %20 %332 
                                         f32 %334 = OpLoad %333 
                                       f32_4 %335 = OpCompositeConstruct %334 %334 %334 %334 
                                      bool_4 %337 = OpFOrdNotEqual %331 %335 
                                        bool %338 = OpAny %337 
                                                      OpStore %330 %338 
                                        bool %339 = OpLoad %330 
                                                      OpSelectionMerge %343 None 
                                                      OpBranchConditional %339 %342 %346 
                                             %342 = OpLabel 
                                       f32_4 %344 = OpLoad %78 
                                       f32_3 %345 = OpVectorShuffle %344 %344 3 2 1 
                                                      OpStore %341 %345 
                                                      OpBranch %343 
                                             %346 = OpLabel 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 3 1 2 
                                                      OpStore %341 %348 
                                                      OpBranch %343 
                                             %343 = OpLabel 
                                       f32_3 %349 = OpLoad %341 
                                       f32_4 %350 = OpLoad %9 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %9 %351 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                              Uniform f32_4* %355 = OpAccessChain %20 %354 %21 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                         f32 %358 = OpDot %353 %357 
                                Private f32* %359 = OpAccessChain %78 %31 
                                                      OpStore %359 %358 
                                       f32_4 %360 = OpLoad %9 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                              Uniform f32_4* %362 = OpAccessChain %20 %354 %170 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                         f32 %365 = OpDot %361 %364 
                                Private f32* %366 = OpAccessChain %78 %22 
                                                      OpStore %366 %365 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                              Uniform f32_4* %369 = OpAccessChain %20 %354 %182 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                         f32 %372 = OpDot %368 %371 
                                Private f32* %373 = OpAccessChain %78 %243 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %78 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %78 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                         f32 %378 = OpDot %375 %377 
                                Private f32* %379 = OpAccessChain %9 %31 
                                                      OpStore %379 %378 
                                Private f32* %380 = OpAccessChain %9 %31 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpExtInst %1 32 %381 
                                Private f32* %383 = OpAccessChain %9 %31 
                                                      OpStore %383 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 0 0 
                                       f32_4 %386 = OpLoad %78 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %9 %390 
                                       f32_4 %393 = OpLoad %9 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                                      OpStore vs_TEXCOORD1 %394 
                                       f32_4 %396 = OpLoad %116 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                                      OpStore vs_TEXCOORD2 %397 
                                       f32_4 %398 = OpLoad %116 
                                       f32_4 %399 = OpVectorShuffle %398 %398 0 0 0 0 
                                       f32_4 %400 = OpFNegate %399 
                              Uniform f32_4* %401 = OpAccessChain %20 %170 
                                       f32_4 %402 = OpLoad %401 
                                       f32_4 %403 = OpFAdd %400 %402 
                                                      OpStore %78 %403 
                                       f32_4 %404 = OpLoad %116 
                                       f32_4 %405 = OpVectorShuffle %404 %404 1 1 1 1 
                                       f32_4 %406 = OpFNegate %405 
                              Uniform f32_4* %407 = OpAccessChain %20 %182 
                                       f32_4 %408 = OpLoad %407 
                                       f32_4 %409 = OpFAdd %406 %408 
                                                      OpStore %166 %409 
                                       f32_4 %410 = OpLoad %116 
                                       f32_4 %411 = OpVectorShuffle %410 %410 2 2 2 2 
                                       f32_4 %412 = OpFNegate %411 
                              Uniform f32_4* %413 = OpAccessChain %20 %191 
                                       f32_4 %414 = OpLoad %413 
                                       f32_4 %415 = OpFAdd %412 %414 
                                                      OpStore %116 %415 
                                       f32_4 %416 = OpLoad %9 
                                       f32_4 %417 = OpVectorShuffle %416 %416 1 1 1 1 
                                       f32_4 %418 = OpLoad %166 
                                       f32_4 %419 = OpFMul %417 %418 
                                                      OpStore %206 %419 
                                       f32_4 %420 = OpLoad %166 
                                       f32_4 %421 = OpLoad %166 
                                       f32_4 %422 = OpFMul %420 %421 
                                                      OpStore %166 %422 
                                       f32_4 %423 = OpLoad %78 
                                       f32_4 %424 = OpLoad %78 
                                       f32_4 %425 = OpFMul %423 %424 
                                       f32_4 %426 = OpLoad %166 
                                       f32_4 %427 = OpFAdd %425 %426 
                                                      OpStore %166 %427 
                                       f32_4 %428 = OpLoad %78 
                                       f32_4 %429 = OpLoad %9 
                                       f32_4 %430 = OpVectorShuffle %429 %429 0 0 0 0 
                                       f32_4 %431 = OpFMul %428 %430 
                                       f32_4 %432 = OpLoad %206 
                                       f32_4 %433 = OpFAdd %431 %432 
                                                      OpStore %78 %433 
                                       f32_4 %434 = OpLoad %116 
                                       f32_4 %435 = OpLoad %9 
                                       f32_4 %436 = OpVectorShuffle %435 %435 2 2 2 2 
                                       f32_4 %437 = OpFMul %434 %436 
                                       f32_4 %438 = OpLoad %78 
                                       f32_4 %439 = OpFAdd %437 %438 
                                                      OpStore %78 %439 
                                       f32_4 %440 = OpLoad %116 
                                       f32_4 %441 = OpLoad %116 
                                       f32_4 %442 = OpFMul %440 %441 
                                       f32_4 %443 = OpLoad %166 
                                       f32_4 %444 = OpFAdd %442 %443 
                                                      OpStore %116 %444 
                                       f32_4 %445 = OpLoad %116 
                                       f32_4 %448 = OpExtInst %1 40 %445 %447 
                                                      OpStore %116 %448 
                                       f32_4 %449 = OpLoad %116 
                                       f32_4 %450 = OpExtInst %1 32 %449 
                                                      OpStore %166 %450 
                                       f32_4 %451 = OpLoad %116 
                              Uniform f32_4* %453 = OpAccessChain %20 %452 
                                       f32_4 %454 = OpLoad %453 
                                       f32_4 %455 = OpFMul %451 %454 
                                       f32_4 %457 = OpFAdd %455 %456 
                                                      OpStore %116 %457 
                                       f32_4 %458 = OpLoad %116 
                                       f32_4 %459 = OpFDiv %456 %458 
                                                      OpStore %116 %459 
                                       f32_4 %460 = OpLoad %78 
                                       f32_4 %461 = OpLoad %166 
                                       f32_4 %462 = OpFMul %460 %461 
                                                      OpStore %78 %462 
                                       f32_4 %463 = OpLoad %78 
                                       f32_4 %464 = OpExtInst %1 40 %463 %331 
                                                      OpStore %78 %464 
                                       f32_4 %465 = OpLoad %116 
                                       f32_4 %466 = OpLoad %78 
                                       f32_4 %467 = OpFMul %465 %466 
                                                      OpStore %78 %467 
                                       f32_4 %468 = OpLoad %78 
                                       f32_3 %469 = OpVectorShuffle %468 %468 1 1 1 
                              Uniform f32_4* %471 = OpAccessChain %20 %470 %170 
                                       f32_4 %472 = OpLoad %471 
                                       f32_3 %473 = OpVectorShuffle %472 %472 0 1 2 
                                       f32_3 %474 = OpFMul %469 %473 
                                       f32_4 %475 = OpLoad %116 
                                       f32_4 %476 = OpVectorShuffle %475 %474 4 5 6 3 
                                                      OpStore %116 %476 
                              Uniform f32_4* %477 = OpAccessChain %20 %470 %21 
                                       f32_4 %478 = OpLoad %477 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_4 %480 = OpLoad %78 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 0 0 
                                       f32_3 %482 = OpFMul %479 %481 
                                       f32_4 %483 = OpLoad %116 
                                       f32_3 %484 = OpVectorShuffle %483 %483 0 1 2 
                                       f32_3 %485 = OpFAdd %482 %484 
                                       f32_4 %486 = OpLoad %116 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %116 %487 
                              Uniform f32_4* %488 = OpAccessChain %20 %470 %182 
                                       f32_4 %489 = OpLoad %488 
                                       f32_3 %490 = OpVectorShuffle %489 %489 0 1 2 
                                       f32_4 %491 = OpLoad %78 
                                       f32_3 %492 = OpVectorShuffle %491 %491 2 2 2 
                                       f32_3 %493 = OpFMul %490 %492 
                                       f32_4 %494 = OpLoad %116 
                                       f32_3 %495 = OpVectorShuffle %494 %494 0 1 2 
                                       f32_3 %496 = OpFAdd %493 %495 
                                       f32_4 %497 = OpLoad %78 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
                                                      OpStore %78 %498 
                              Uniform f32_4* %499 = OpAccessChain %20 %470 %191 
                                       f32_4 %500 = OpLoad %499 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 1 2 
                                       f32_4 %502 = OpLoad %78 
                                       f32_3 %503 = OpVectorShuffle %502 %502 3 3 3 
                                       f32_3 %504 = OpFMul %501 %503 
                                       f32_4 %505 = OpLoad %78 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
                                       f32_3 %507 = OpFAdd %504 %506 
                                       f32_4 %508 = OpLoad %78 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
                                                      OpStore %78 %509 
                                Private f32* %511 = OpAccessChain %9 %22 
                                         f32 %512 = OpLoad %511 
                                Private f32* %513 = OpAccessChain %9 %22 
                                         f32 %514 = OpLoad %513 
                                         f32 %515 = OpFMul %512 %514 
                                                      OpStore %510 %515 
                                Private f32* %516 = OpAccessChain %9 %31 
                                         f32 %517 = OpLoad %516 
                                Private f32* %518 = OpAccessChain %9 %31 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpFMul %517 %519 
                                         f32 %521 = OpLoad %510 
                                         f32 %522 = OpFNegate %521 
                                         f32 %523 = OpFAdd %520 %522 
                                                      OpStore %510 %523 
                                       f32_4 %524 = OpLoad %9 
                                       f32_4 %525 = OpVectorShuffle %524 %524 1 2 2 0 
                                       f32_4 %526 = OpLoad %9 
                                       f32_4 %527 = OpVectorShuffle %526 %526 0 1 2 2 
                                       f32_4 %528 = OpFMul %525 %527 
                                                      OpStore %116 %528 
                              Uniform f32_4* %530 = OpAccessChain %20 %529 
                                       f32_4 %531 = OpLoad %530 
                                       f32_4 %532 = OpLoad %116 
                                         f32 %533 = OpDot %531 %532 
                                Private f32* %534 = OpAccessChain %9 %31 
                                                      OpStore %534 %533 
                              Uniform f32_4* %536 = OpAccessChain %20 %535 
                                       f32_4 %537 = OpLoad %536 
                                       f32_4 %538 = OpLoad %116 
                                         f32 %539 = OpDot %537 %538 
                                Private f32* %540 = OpAccessChain %9 %22 
                                                      OpStore %540 %539 
                              Uniform f32_4* %542 = OpAccessChain %20 %541 
                                       f32_4 %543 = OpLoad %542 
                                       f32_4 %544 = OpLoad %116 
                                         f32 %545 = OpDot %543 %544 
                                Private f32* %546 = OpAccessChain %9 %243 
                                                      OpStore %546 %545 
                              Uniform f32_4* %548 = OpAccessChain %20 %547 
                                       f32_4 %549 = OpLoad %548 
                                       f32_3 %550 = OpVectorShuffle %549 %549 0 1 2 
                                         f32 %551 = OpLoad %510 
                                       f32_3 %552 = OpCompositeConstruct %551 %551 %551 
                                       f32_3 %553 = OpFMul %550 %552 
                                       f32_4 %554 = OpLoad %9 
                                       f32_3 %555 = OpVectorShuffle %554 %554 0 1 2 
                                       f32_3 %556 = OpFAdd %553 %555 
                                       f32_4 %557 = OpLoad %9 
                                       f32_4 %558 = OpVectorShuffle %557 %556 4 5 6 3 
                                                      OpStore %9 %558 
                                       f32_4 %560 = OpLoad %9 
                                       f32_3 %561 = OpVectorShuffle %560 %560 0 1 2 
                                       f32_4 %562 = OpLoad %78 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                       f32_3 %564 = OpFAdd %561 %563 
                                                      OpStore vs_TEXCOORD3 %564 
                                                      OpStore vs_TEXCOORD5 %331 
                                                      OpStore vs_TEXCOORD6 %331 
                                 Output f32* %567 = OpAccessChain %237 %21 %22 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFNegate %568 
                                 Output f32* %570 = OpAccessChain %237 %21 %22 
                                                      OpStore %570 %569 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 952
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %57 %81 %130 %901 %937 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpMemberDecorate %15 18 Offset 15 
                                                      OpMemberDecorate %15 19 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate vs_TEXCOORD0 Location 57 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate vs_TEXCOORD3 Location 130 
                                                      OpDecorate %283 DescriptorSet 283 
                                                      OpDecorate %283 Binding 283 
                                                      OpDecorate %285 DescriptorSet 285 
                                                      OpDecorate %285 Binding 285 
                                                      OpDecorate %438 DescriptorSet 438 
                                                      OpDecorate %438 Binding 438 
                                                      OpDecorate vs_TEXCOORD4 Location 901 
                                                      OpDecorate %937 Location 937 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                                              %43 = OpTypePointer Private %10 
                               Private f32_3* %44 = OpVariable Private 
                                              %45 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %46 = OpTypePointer UniformConstant %45 
         UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
                                              %49 = OpTypeSampler 
                                              %50 = OpTypePointer UniformConstant %49 
                     UniformConstant sampler* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampledImage %45 
                                              %55 = OpTypeVector %6 2 
                                              %56 = OpTypePointer Input %55 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %61 = OpVariable Private 
                                          i32 %63 = OpConstant 19 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
                                          i32 %70 = OpConstant 17 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %77 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_4* %87 = OpVariable Private 
                               Private f32_4* %99 = OpVariable Private 
                                             %103 = OpTypeInt 32 0 
                                         u32 %104 = OpConstant 3 
                              Private f32_4* %106 = OpVariable Private 
                                         i32 %107 = OpConstant 3 
                                         u32 %112 = OpConstant 0 
                                         i32 %114 = OpConstant 4 
                                         u32 %119 = OpConstant 1 
                                         i32 %121 = OpConstant 5 
                                         u32 %126 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                         f32 %137 = OpConstant 3.674022E-40 
                                       f32_3 %138 = OpConstantComposite %137 %137 %137 
                                             %142 = OpTypeBool 
                                             %143 = OpTypePointer Private %142 
                               Private bool* %144 = OpVariable Private 
                                         i32 %145 = OpConstant 10 
                              Private f32_3* %166 = OpVariable Private 
                                         i32 %169 = OpConstant 8 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %181 = OpConstant 9 
                                             %190 = OpTypeVector %142 3 
                                             %191 = OpTypePointer Private %190 
                             Private bool_3* %192 = OpVariable Private 
                                       f32_4 %193 = OpConstantComposite %137 %137 %137 %137 
                                             %196 = OpTypeVector %142 4 
                                             %199 = OpTypePointer Function %10 
                                             %204 = OpTypePointer Function %6 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %273 = OpConstant 3.674022E-40 
                                         f32 %279 = OpConstant 3.674022E-40 
                                             %281 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %282 = OpTypePointer UniformConstant %281 
      UniformConstant read_only TextureCube* %283 = OpVariable UniformConstant 
                    UniformConstant sampler* %285 = OpVariable UniformConstant 
                                             %287 = OpTypeSampledImage %281 
                                Private f32* %293 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         i32 %298 = OpConstant 11 
                               Private bool* %321 = OpVariable Private 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         i32 %329 = OpConstant 14 
                                Private f32* %336 = OpVariable Private 
                              Private f32_3* %349 = OpVariable Private 
                                         i32 %352 = OpConstant 12 
                              Private f32_3* %360 = OpVariable Private 
                                         i32 %363 = OpConstant 13 
                             Private bool_3* %371 = OpVariable Private 
      UniformConstant read_only TextureCube* %438 = OpVariable UniformConstant 
                                         i32 %449 = OpConstant 15 
                                         f32 %510 = OpConstant 3.674022E-40 
                                       f32_3 %511 = OpConstantComposite %510 %510 %510 
                                         i32 %515 = OpConstant 18 
                                         f32 %530 = OpConstant 3.674022E-40 
                                       f32_3 %531 = OpConstantComposite %530 %530 %530 
                                         f32 %538 = OpConstant 3.674022E-40 
                                         i32 %550 = OpConstant 2 
                                         f32 %563 = OpConstant 3.674022E-40 
                                Private f32* %590 = OpVariable Private 
                              Private f32_3* %609 = OpVariable Private 
                                         f32 %624 = OpConstant 3.674022E-40 
                                Private f32* %627 = OpVariable Private 
                                Private f32* %632 = OpVariable Private 
                                         f32 %675 = OpConstant 3.674022E-40 
                                         f32 %703 = OpConstant 3.674022E-40 
                                         f32 %705 = OpConstant 3.674022E-40 
                                         f32 %722 = OpConstant 3.674022E-40 
                                         f32 %727 = OpConstant 3.674022E-40 
                                         f32 %745 = OpConstant 3.674022E-40 
                               Private bool* %761 = OpVariable Private 
                                         i32 %786 = OpConstant 16 
                                       f32_3 %832 = OpConstantComposite %75 %75 %75 
                                             %900 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %903 = OpConstant 1 
                                         i32 %917 = OpConstant 7 
                                         i32 %928 = OpConstant 6 
                                             %936 = OpTypePointer Output %7 
                               Output f32_4* %937 = OpVariable Output 
                                             %949 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %200 = OpVariable Function 
                               Function f32* %205 = OpVariable Function 
                               Function f32* %217 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                             Function f32_3* %376 = OpVariable Function 
                               Function f32* %380 = OpVariable Function 
                               Function f32* %392 = OpVariable Function 
                               Function f32* %404 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %48 = OpLoad %47 
                                      sampler %52 = OpLoad %51 
                   read_only Texture2DSampled %54 = OpSampledImage %48 %52 
                                        f32_2 %58 = OpLoad vs_TEXCOORD0 
                                        f32_4 %59 = OpImageSampleImplicitLod %54 %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                                      OpStore %44 %60 
                                        f32_3 %62 = OpLoad %44 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %61 %68 
                                 Uniform f32* %72 = OpAccessChain %17 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFAdd %74 %75 
                                                      OpStore %69 %76 
                                        f32_4 %78 = OpLoad %35 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %82 = OpLoad vs_TEXCOORD1 
                                          f32 %83 = OpDot %80 %82 
                                                      OpStore %77 %83 
                                          f32 %84 = OpLoad %77 
                                          f32 %85 = OpLoad %77 
                                          f32 %86 = OpFAdd %84 %85 
                                                      OpStore %77 %86 
                                        f32_3 %88 = OpLoad vs_TEXCOORD1 
                                          f32 %89 = OpLoad %77 
                                        f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                        f32_3 %91 = OpFNegate %90 
                                        f32_3 %92 = OpFMul %88 %91 
                                        f32_4 %93 = OpLoad %35 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFNegate %94 
                                        f32_3 %96 = OpFAdd %92 %95 
                                        f32_4 %97 = OpLoad %87 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %87 %98 
                                       f32_3 %100 = OpLoad vs_TEXCOORD1 
                                       f32_4 %101 = OpLoad %99 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 6 3 
                                                      OpStore %99 %102 
                                Private f32* %105 = OpAccessChain %99 %104 
                                                      OpStore %105 %75 
                              Uniform f32_4* %108 = OpAccessChain %17 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %99 
                                         f32 %111 = OpDot %109 %110 
                                Private f32* %113 = OpAccessChain %106 %112 
                                                      OpStore %113 %111 
                              Uniform f32_4* %115 = OpAccessChain %17 %114 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %99 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %120 = OpAccessChain %106 %119 
                                                      OpStore %120 %118 
                              Uniform f32_4* %122 = OpAccessChain %17 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %99 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %127 = OpAccessChain %106 %126 
                                                      OpStore %127 %125 
                                       f32_4 %128 = OpLoad %106 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %131 = OpLoad vs_TEXCOORD3 
                                       f32_3 %132 = OpFAdd %129 %131 
                                       f32_4 %133 = OpLoad %99 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %99 %134 
                                       f32_4 %135 = OpLoad %99 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %139 = OpExtInst %1 40 %136 %138 
                                       f32_4 %140 = OpLoad %99 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %99 %141 
                                Uniform f32* %146 = OpAccessChain %17 %145 %104 
                                         f32 %147 = OpLoad %146 
                                        bool %148 = OpFOrdLessThan %137 %147 
                                                      OpStore %144 %148 
                                        bool %149 = OpLoad %144 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %264 
                                             %150 = OpLabel 
                                       f32_4 %152 = OpLoad %87 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %87 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %153 %155 
                                                      OpStore %77 %156 
                                         f32 %157 = OpLoad %77 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %77 %158 
                                         f32 %159 = OpLoad %77 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_4 %161 = OpLoad %87 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %106 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %106 %165 
                                       f32_3 %167 = OpLoad vs_TEXCOORD2 
                                       f32_3 %168 = OpFNegate %167 
                              Uniform f32_4* %170 = OpAccessChain %17 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %168 %172 
                                                      OpStore %166 %173 
                                       f32_3 %174 = OpLoad %166 
                                       f32_4 %175 = OpLoad %106 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFDiv %174 %176 
                                                      OpStore %166 %177 
                                       f32_3 %179 = OpLoad vs_TEXCOORD2 
                                       f32_3 %180 = OpFNegate %179 
                              Uniform f32_4* %182 = OpAccessChain %17 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %180 %184 
                                                      OpStore %178 %185 
                                       f32_3 %186 = OpLoad %178 
                                       f32_4 %187 = OpLoad %106 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFDiv %186 %188 
                                                      OpStore %178 %189 
                                       f32_4 %194 = OpLoad %106 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 1 2 0 
                                      bool_4 %197 = OpFOrdLessThan %193 %195 
                                      bool_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                                      OpStore %192 %198 
                                       f32_3 %201 = OpLoad %166 
                                                      OpStore %200 %201 
                               Private bool* %202 = OpAccessChain %192 %112 
                                        bool %203 = OpLoad %202 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %203 %206 %210 
                                             %206 = OpLabel 
                                Private f32* %208 = OpAccessChain %166 %112 
                                         f32 %209 = OpLoad %208 
                                                      OpStore %205 %209 
                                                      OpBranch %207 
                                             %210 = OpLabel 
                                Private f32* %211 = OpAccessChain %178 %112 
                                         f32 %212 = OpLoad %211 
                                                      OpStore %205 %212 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                         f32 %213 = OpLoad %205 
                               Function f32* %214 = OpAccessChain %200 %112 
                                                      OpStore %214 %213 
                               Private bool* %215 = OpAccessChain %192 %119 
                                        bool %216 = OpLoad %215 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %216 %218 %222 
                                             %218 = OpLabel 
                                Private f32* %220 = OpAccessChain %166 %119 
                                         f32 %221 = OpLoad %220 
                                                      OpStore %217 %221 
                                                      OpBranch %219 
                                             %222 = OpLabel 
                                Private f32* %223 = OpAccessChain %178 %119 
                                         f32 %224 = OpLoad %223 
                                                      OpStore %217 %224 
                                                      OpBranch %219 
                                             %219 = OpLabel 
                                         f32 %225 = OpLoad %217 
                               Function f32* %226 = OpAccessChain %200 %119 
                                                      OpStore %226 %225 
                               Private bool* %227 = OpAccessChain %192 %126 
                                        bool %228 = OpLoad %227 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %228 %230 %234 
                                             %230 = OpLabel 
                                Private f32* %232 = OpAccessChain %166 %126 
                                         f32 %233 = OpLoad %232 
                                                      OpStore %229 %233 
                                                      OpBranch %231 
                                             %234 = OpLabel 
                                Private f32* %235 = OpAccessChain %178 %126 
                                         f32 %236 = OpLoad %235 
                                                      OpStore %229 %236 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                         f32 %237 = OpLoad %229 
                               Function f32* %238 = OpAccessChain %200 %126 
                                                      OpStore %238 %237 
                                       f32_3 %239 = OpLoad %200 
                                                      OpStore %166 %239 
                                Private f32* %240 = OpAccessChain %166 %119 
                                         f32 %241 = OpLoad %240 
                                Private f32* %242 = OpAccessChain %166 %112 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpExtInst %1 37 %241 %243 
                                                      OpStore %77 %244 
                                Private f32* %245 = OpAccessChain %166 %126 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpLoad %77 
                                         f32 %248 = OpExtInst %1 37 %246 %247 
                                                      OpStore %77 %248 
                                       f32_3 %249 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %250 = OpAccessChain %17 %145 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFNegate %252 
                                       f32_3 %254 = OpFAdd %249 %253 
                                                      OpStore %166 %254 
                                       f32_4 %255 = OpLoad %106 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpLoad %77 
                                       f32_3 %258 = OpCompositeConstruct %257 %257 %257 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %166 
                                       f32_3 %261 = OpFAdd %259 %260 
                                       f32_4 %262 = OpLoad %106 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %106 %263 
                                                      OpBranch %151 
                                             %264 = OpLabel 
                                       f32_4 %265 = OpLoad %87 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %106 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %106 %268 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                         f32 %269 = OpLoad %69 
                                         f32 %270 = OpFNegate %269 
                                         f32 %272 = OpFMul %270 %271 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %77 %274 
                                         f32 %275 = OpLoad %69 
                                         f32 %276 = OpLoad %77 
                                         f32 %277 = OpFMul %275 %276 
                                                      OpStore %77 %277 
                                         f32 %278 = OpLoad %77 
                                         f32 %280 = OpFMul %278 %279 
                                                      OpStore %77 %280 
                       read_only TextureCube %284 = OpLoad %283 
                                     sampler %286 = OpLoad %285 
                read_only TextureCubeSampled %288 = OpSampledImage %284 %286 
                                       f32_4 %289 = OpLoad %106 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                         f32 %291 = OpLoad %77 
                                       f32_4 %292 = OpImageSampleExplicitLod %288 %290 Lod %7 
                                                      OpStore %106 %292 
                                Private f32* %294 = OpAccessChain %106 %104 
                                         f32 %295 = OpLoad %294 
                                         f32 %297 = OpFAdd %295 %296 
                                                      OpStore %293 %297 
                                Uniform f32* %299 = OpAccessChain %17 %298 %104 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpLoad %293 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpFAdd %302 %75 
                                                      OpStore %293 %303 
                                         f32 %304 = OpLoad %293 
                                         f32 %305 = OpExtInst %1 30 %304 
                                                      OpStore %293 %305 
                                         f32 %306 = OpLoad %293 
                                Uniform f32* %307 = OpAccessChain %17 %298 %119 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                                      OpStore %293 %309 
                                         f32 %310 = OpLoad %293 
                                         f32 %311 = OpExtInst %1 29 %310 
                                                      OpStore %293 %311 
                                         f32 %312 = OpLoad %293 
                                Uniform f32* %313 = OpAccessChain %17 %298 %112 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                                      OpStore %293 %315 
                                       f32_4 %316 = OpLoad %106 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                         f32 %318 = OpLoad %293 
                                       f32_3 %319 = OpCompositeConstruct %318 %318 %318 
                                       f32_3 %320 = OpFMul %317 %319 
                                                      OpStore %166 %320 
                                Uniform f32* %322 = OpAccessChain %17 %181 %104 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdLessThan %323 %324 
                                                      OpStore %321 %325 
                                        bool %326 = OpLoad %321 
                                                      OpSelectionMerge %328 None 
                                                      OpBranchConditional %326 %327 %328 
                                             %327 = OpLabel 
                                Uniform f32* %330 = OpAccessChain %17 %329 %104 
                                         f32 %331 = OpLoad %330 
                                        bool %332 = OpFOrdLessThan %137 %331 
                                                      OpStore %321 %332 
                                        bool %333 = OpLoad %321 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %335 
                                             %334 = OpLabel 
                                       f32_4 %337 = OpLoad %87 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_4 %339 = OpLoad %87 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                         f32 %341 = OpDot %338 %340 
                                                      OpStore %336 %341 
                                         f32 %342 = OpLoad %336 
                                         f32 %343 = OpExtInst %1 32 %342 
                                                      OpStore %336 %343 
                                         f32 %344 = OpLoad %336 
                                       f32_3 %345 = OpCompositeConstruct %344 %344 %344 
                                       f32_4 %346 = OpLoad %87 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFMul %345 %347 
                                                      OpStore %178 %348 
                                       f32_3 %350 = OpLoad vs_TEXCOORD2 
                                       f32_3 %351 = OpFNegate %350 
                              Uniform f32_4* %353 = OpAccessChain %17 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %351 %355 
                                                      OpStore %349 %356 
                                       f32_3 %357 = OpLoad %349 
                                       f32_3 %358 = OpLoad %178 
                                       f32_3 %359 = OpFDiv %357 %358 
                                                      OpStore %349 %359 
                                       f32_3 %361 = OpLoad vs_TEXCOORD2 
                                       f32_3 %362 = OpFNegate %361 
                              Uniform f32_4* %364 = OpAccessChain %17 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %362 %366 
                                                      OpStore %360 %367 
                                       f32_3 %368 = OpLoad %360 
                                       f32_3 %369 = OpLoad %178 
                                       f32_3 %370 = OpFDiv %368 %369 
                                                      OpStore %360 %370 
                                       f32_3 %372 = OpLoad %178 
                                       f32_4 %373 = OpVectorShuffle %372 %372 0 1 2 0 
                                      bool_4 %374 = OpFOrdLessThan %193 %373 
                                      bool_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                                      OpStore %371 %375 
                                       f32_3 %377 = OpLoad %349 
                                                      OpStore %376 %377 
                               Private bool* %378 = OpAccessChain %371 %112 
                                        bool %379 = OpLoad %378 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %379 %381 %385 
                                             %381 = OpLabel 
                                Private f32* %383 = OpAccessChain %349 %112 
                                         f32 %384 = OpLoad %383 
                                                      OpStore %380 %384 
                                                      OpBranch %382 
                                             %385 = OpLabel 
                                Private f32* %386 = OpAccessChain %360 %112 
                                         f32 %387 = OpLoad %386 
                                                      OpStore %380 %387 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                         f32 %388 = OpLoad %380 
                               Function f32* %389 = OpAccessChain %376 %112 
                                                      OpStore %389 %388 
                               Private bool* %390 = OpAccessChain %371 %119 
                                        bool %391 = OpLoad %390 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %391 %393 %397 
                                             %393 = OpLabel 
                                Private f32* %395 = OpAccessChain %349 %119 
                                         f32 %396 = OpLoad %395 
                                                      OpStore %392 %396 
                                                      OpBranch %394 
                                             %397 = OpLabel 
                                Private f32* %398 = OpAccessChain %360 %119 
                                         f32 %399 = OpLoad %398 
                                                      OpStore %392 %399 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %400 = OpLoad %392 
                               Function f32* %401 = OpAccessChain %376 %119 
                                                      OpStore %401 %400 
                               Private bool* %402 = OpAccessChain %371 %126 
                                        bool %403 = OpLoad %402 
                                                      OpSelectionMerge %406 None 
                                                      OpBranchConditional %403 %405 %409 
                                             %405 = OpLabel 
                                Private f32* %407 = OpAccessChain %349 %126 
                                         f32 %408 = OpLoad %407 
                                                      OpStore %404 %408 
                                                      OpBranch %406 
                                             %409 = OpLabel 
                                Private f32* %410 = OpAccessChain %360 %126 
                                         f32 %411 = OpLoad %410 
                                                      OpStore %404 %411 
                                                      OpBranch %406 
                                             %406 = OpLabel 
                                         f32 %412 = OpLoad %404 
                               Function f32* %413 = OpAccessChain %376 %126 
                                                      OpStore %413 %412 
                                       f32_3 %414 = OpLoad %376 
                                                      OpStore %349 %414 
                                Private f32* %415 = OpAccessChain %349 %119 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %349 %112 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpExtInst %1 37 %416 %418 
                                                      OpStore %336 %419 
                                Private f32* %420 = OpAccessChain %349 %126 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpLoad %336 
                                         f32 %423 = OpExtInst %1 37 %421 %422 
                                                      OpStore %336 %423 
                                       f32_3 %424 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %425 = OpAccessChain %17 %329 
                                       f32_4 %426 = OpLoad %425 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_3 %428 = OpFNegate %427 
                                       f32_3 %429 = OpFAdd %424 %428 
                                                      OpStore %349 %429 
                                       f32_3 %430 = OpLoad %178 
                                         f32 %431 = OpLoad %336 
                                       f32_3 %432 = OpCompositeConstruct %431 %431 %431 
                                       f32_3 %433 = OpFMul %430 %432 
                                       f32_3 %434 = OpLoad %349 
                                       f32_3 %435 = OpFAdd %433 %434 
                                       f32_4 %436 = OpLoad %87 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %87 %437 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                       read_only TextureCube %439 = OpLoad %438 
                                     sampler %440 = OpLoad %285 
                read_only TextureCubeSampled %441 = OpSampledImage %439 %440 
                                       f32_4 %442 = OpLoad %87 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                         f32 %444 = OpLoad %77 
                                       f32_4 %445 = OpImageSampleExplicitLod %441 %443 Lod %7 
                                                      OpStore %87 %445 
                                Private f32* %446 = OpAccessChain %87 %104 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFAdd %447 %296 
                                                      OpStore %77 %448 
                                Uniform f32* %450 = OpAccessChain %17 %449 %104 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpLoad %77 
                                         f32 %453 = OpFMul %451 %452 
                                         f32 %454 = OpFAdd %453 %75 
                                                      OpStore %77 %454 
                                         f32 %455 = OpLoad %77 
                                         f32 %456 = OpExtInst %1 30 %455 
                                                      OpStore %77 %456 
                                         f32 %457 = OpLoad %77 
                                Uniform f32* %458 = OpAccessChain %17 %449 %119 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFMul %457 %459 
                                                      OpStore %77 %460 
                                         f32 %461 = OpLoad %77 
                                         f32 %462 = OpExtInst %1 29 %461 
                                                      OpStore %77 %462 
                                         f32 %463 = OpLoad %77 
                                Uniform f32* %464 = OpAccessChain %17 %449 %112 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                                      OpStore %77 %466 
                                       f32_4 %467 = OpLoad %87 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                         f32 %469 = OpLoad %77 
                                       f32_3 %470 = OpCompositeConstruct %469 %469 %469 
                                       f32_3 %471 = OpFMul %468 %470 
                                       f32_4 %472 = OpLoad %87 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %87 %473 
                                         f32 %474 = OpLoad %293 
                                       f32_3 %475 = OpCompositeConstruct %474 %474 %474 
                                       f32_4 %476 = OpLoad %106 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %87 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpFNegate %480 
                                       f32_3 %482 = OpFAdd %478 %481 
                                       f32_4 %483 = OpLoad %106 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %106 %484 
                              Uniform f32_4* %485 = OpAccessChain %17 %181 
                                       f32_4 %486 = OpLoad %485 
                                       f32_3 %487 = OpVectorShuffle %486 %486 3 3 3 
                                       f32_4 %488 = OpLoad %106 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 2 
                                       f32_3 %490 = OpFMul %487 %489 
                                       f32_4 %491 = OpLoad %87 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFAdd %490 %492 
                                                      OpStore %166 %493 
                                                      OpBranch %328 
                                             %328 = OpLabel 
                                       f32_3 %494 = OpLoad vs_TEXCOORD1 
                                       f32_3 %495 = OpLoad vs_TEXCOORD1 
                                         f32 %496 = OpDot %494 %495 
                                                      OpStore %77 %496 
                                         f32 %497 = OpLoad %77 
                                         f32 %498 = OpExtInst %1 32 %497 
                                                      OpStore %77 %498 
                                         f32 %499 = OpLoad %77 
                                       f32_3 %500 = OpCompositeConstruct %499 %499 %499 
                                       f32_3 %501 = OpLoad vs_TEXCOORD1 
                                       f32_3 %502 = OpFMul %500 %501 
                                       f32_4 %503 = OpLoad %87 
                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 6 3 
                                                      OpStore %87 %504 
                                       f32_3 %505 = OpLoad %44 
                              Uniform f32_4* %506 = OpAccessChain %17 %63 
                                       f32_4 %507 = OpLoad %506 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFMul %505 %508 
                                       f32_3 %512 = OpFAdd %509 %511 
                                       f32_4 %513 = OpLoad %106 
                                       f32_4 %514 = OpVectorShuffle %513 %512 4 5 6 3 
                                                      OpStore %106 %514 
                                Uniform f32* %516 = OpAccessChain %17 %515 
                                         f32 %517 = OpLoad %516 
                                Uniform f32* %518 = OpAccessChain %17 %515 
                                         f32 %519 = OpLoad %518 
                                Uniform f32* %520 = OpAccessChain %17 %515 
                                         f32 %521 = OpLoad %520 
                                       f32_3 %522 = OpCompositeConstruct %517 %519 %521 
                                         f32 %523 = OpCompositeExtract %522 0 
                                         f32 %524 = OpCompositeExtract %522 1 
                                         f32 %525 = OpCompositeExtract %522 2 
                                       f32_3 %526 = OpCompositeConstruct %523 %524 %525 
                                       f32_4 %527 = OpLoad %106 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFMul %526 %528 
                                       f32_3 %532 = OpFAdd %529 %531 
                                       f32_4 %533 = OpLoad %106 
                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
                                                      OpStore %106 %534 
                                Uniform f32* %535 = OpAccessChain %17 %515 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFNegate %536 
                                         f32 %539 = OpFMul %537 %538 
                                         f32 %540 = OpFAdd %539 %538 
                                                      OpStore %77 %540 
                                         f32 %541 = OpLoad %77 
                                       f32_3 %542 = OpCompositeConstruct %541 %541 %541 
                                       f32_3 %543 = OpLoad %61 
                                       f32_3 %544 = OpFMul %542 %543 
                                                      OpStore %61 %544 
                                       f32_4 %545 = OpLoad %9 
                                       f32_3 %546 = OpVectorShuffle %545 %545 0 1 2 
                                         f32 %547 = OpLoad %27 
                                       f32_3 %548 = OpCompositeConstruct %547 %547 %547 
                                       f32_3 %549 = OpFMul %546 %548 
                              Uniform f32_4* %551 = OpAccessChain %17 %550 
                                       f32_4 %552 = OpLoad %551 
                                       f32_3 %553 = OpVectorShuffle %552 %552 0 1 2 
                                       f32_3 %554 = OpFAdd %549 %553 
                                       f32_4 %555 = OpLoad %9 
                                       f32_4 %556 = OpVectorShuffle %555 %554 4 5 6 3 
                                                      OpStore %9 %556 
                                       f32_4 %557 = OpLoad %9 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                       f32_4 %559 = OpLoad %9 
                                       f32_3 %560 = OpVectorShuffle %559 %559 0 1 2 
                                         f32 %561 = OpDot %558 %560 
                                                      OpStore %27 %561 
                                         f32 %562 = OpLoad %27 
                                         f32 %564 = OpExtInst %1 40 %562 %563 
                                                      OpStore %27 %564 
                                         f32 %565 = OpLoad %27 
                                         f32 %566 = OpExtInst %1 32 %565 
                                                      OpStore %27 %566 
                                         f32 %567 = OpLoad %27 
                                       f32_3 %568 = OpCompositeConstruct %567 %567 %567 
                                       f32_4 %569 = OpLoad %9 
                                       f32_3 %570 = OpVectorShuffle %569 %569 0 1 2 
                                       f32_3 %571 = OpFMul %568 %570 
                                       f32_4 %572 = OpLoad %9 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %9 %573 
                                       f32_4 %574 = OpLoad %87 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                                       f32_4 %576 = OpLoad %35 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 1 2 
                                         f32 %578 = OpDot %575 %577 
                                                      OpStore %27 %578 
                                       f32_4 %579 = OpLoad %87 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                              Uniform f32_4* %581 = OpAccessChain %17 %550 
                                       f32_4 %582 = OpLoad %581 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                         f32 %584 = OpDot %580 %583 
                                Private f32* %585 = OpAccessChain %35 %112 
                                                      OpStore %585 %584 
                                Private f32* %586 = OpAccessChain %35 %112 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpExtInst %1 43 %587 %137 %75 
                                Private f32* %589 = OpAccessChain %35 %112 
                                                      OpStore %589 %588 
                                       f32_4 %591 = OpLoad %87 
                                       f32_3 %592 = OpVectorShuffle %591 %591 0 1 2 
                                       f32_4 %593 = OpLoad %9 
                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
                                         f32 %595 = OpDot %592 %594 
                                                      OpStore %590 %595 
                                         f32 %596 = OpLoad %590 
                                         f32 %597 = OpExtInst %1 43 %596 %137 %75 
                                                      OpStore %590 %597 
                              Uniform f32_4* %598 = OpAccessChain %17 %550 
                                       f32_4 %599 = OpLoad %598 
                                       f32_3 %600 = OpVectorShuffle %599 %599 0 1 2 
                                       f32_4 %601 = OpLoad %9 
                                       f32_3 %602 = OpVectorShuffle %601 %601 0 1 2 
                                         f32 %603 = OpDot %600 %602 
                                Private f32* %604 = OpAccessChain %9 %112 
                                                      OpStore %604 %603 
                                Private f32* %605 = OpAccessChain %9 %112 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpExtInst %1 43 %606 %137 %75 
                                Private f32* %608 = OpAccessChain %9 %112 
                                                      OpStore %608 %607 
                                Private f32* %610 = OpAccessChain %9 %112 
                                         f32 %611 = OpLoad %610 
                                Private f32* %612 = OpAccessChain %9 %112 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpFMul %611 %613 
                                Private f32* %615 = OpAccessChain %609 %112 
                                                      OpStore %615 %614 
                                       f32_3 %616 = OpLoad %609 
                                       f32_2 %617 = OpVectorShuffle %616 %616 0 0 
                                         f32 %618 = OpLoad %69 
                                       f32_2 %619 = OpCompositeConstruct %618 %618 
                                         f32 %620 = OpDot %617 %619 
                                Private f32* %621 = OpAccessChain %609 %112 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %609 %112 
                                         f32 %623 = OpLoad %622 
                                         f32 %625 = OpFAdd %623 %624 
                                Private f32* %626 = OpAccessChain %609 %112 
                                                      OpStore %626 %625 
                                Private f32* %628 = OpAccessChain %35 %112 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFNegate %629 
                                         f32 %631 = OpFAdd %630 %75 
                                                      OpStore %627 %631 
                                         f32 %633 = OpLoad %627 
                                         f32 %634 = OpLoad %627 
                                         f32 %635 = OpFMul %633 %634 
                                                      OpStore %632 %635 
                                         f32 %636 = OpLoad %632 
                                         f32 %637 = OpLoad %632 
                                         f32 %638 = OpFMul %636 %637 
                                                      OpStore %632 %638 
                                         f32 %639 = OpLoad %627 
                                         f32 %640 = OpLoad %632 
                                         f32 %641 = OpFMul %639 %640 
                                                      OpStore %627 %641 
                                Private f32* %642 = OpAccessChain %609 %112 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpLoad %627 
                                         f32 %645 = OpFMul %643 %644 
                                         f32 %646 = OpFAdd %645 %75 
                                                      OpStore %627 %646 
                                         f32 %647 = OpLoad %27 
                                         f32 %648 = OpExtInst %1 4 %647 
                                         f32 %649 = OpFNegate %648 
                                         f32 %650 = OpFAdd %649 %75 
                                                      OpStore %632 %650 
                                         f32 %651 = OpLoad %632 
                                         f32 %652 = OpLoad %632 
                                         f32 %653 = OpFMul %651 %652 
                                                      OpStore %293 %653 
                                         f32 %654 = OpLoad %293 
                                         f32 %655 = OpLoad %293 
                                         f32 %656 = OpFMul %654 %655 
                                                      OpStore %293 %656 
                                         f32 %657 = OpLoad %632 
                                         f32 %658 = OpLoad %293 
                                         f32 %659 = OpFMul %657 %658 
                                                      OpStore %632 %659 
                                Private f32* %660 = OpAccessChain %609 %112 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %632 
                                         f32 %663 = OpFMul %661 %662 
                                         f32 %664 = OpFAdd %663 %75 
                                Private f32* %665 = OpAccessChain %609 %112 
                                                      OpStore %665 %664 
                                Private f32* %666 = OpAccessChain %609 %112 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpLoad %627 
                                         f32 %669 = OpFMul %667 %668 
                                Private f32* %670 = OpAccessChain %609 %112 
                                                      OpStore %670 %669 
                                         f32 %671 = OpLoad %69 
                                         f32 %672 = OpLoad %69 
                                         f32 %673 = OpFMul %671 %672 
                                                      OpStore %627 %673 
                                         f32 %674 = OpLoad %627 
                                         f32 %676 = OpExtInst %1 40 %674 %675 
                                                      OpStore %627 %676 
                                         f32 %677 = OpLoad %627 
                                         f32 %678 = OpFNegate %677 
                                         f32 %679 = OpFAdd %678 %75 
                                                      OpStore %69 %679 
                                         f32 %680 = OpLoad %27 
                                         f32 %681 = OpExtInst %1 4 %680 
                                         f32 %682 = OpLoad %69 
                                         f32 %683 = OpFMul %681 %682 
                                         f32 %684 = OpLoad %627 
                                         f32 %685 = OpFAdd %683 %684 
                                                      OpStore %293 %685 
                                Private f32* %686 = OpAccessChain %35 %112 
                                         f32 %687 = OpLoad %686 
                                         f32 %688 = OpLoad %69 
                                         f32 %689 = OpFMul %687 %688 
                                         f32 %690 = OpLoad %627 
                                         f32 %691 = OpFAdd %689 %690 
                                                      OpStore %69 %691 
                                         f32 %692 = OpLoad %27 
                                         f32 %693 = OpExtInst %1 4 %692 
                                         f32 %694 = OpLoad %69 
                                         f32 %695 = OpFMul %693 %694 
                                                      OpStore %27 %695 
                                Private f32* %696 = OpAccessChain %35 %112 
                                         f32 %697 = OpLoad %696 
                                         f32 %698 = OpLoad %293 
                                         f32 %699 = OpFMul %697 %698 
                                         f32 %700 = OpLoad %27 
                                         f32 %701 = OpFAdd %699 %700 
                                                      OpStore %27 %701 
                                         f32 %702 = OpLoad %27 
                                         f32 %704 = OpFAdd %702 %703 
                                                      OpStore %27 %704 
                                         f32 %706 = OpLoad %27 
                                         f32 %707 = OpFDiv %705 %706 
                                                      OpStore %27 %707 
                                         f32 %708 = OpLoad %627 
                                         f32 %709 = OpLoad %627 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %69 %710 
                                         f32 %711 = OpLoad %590 
                                         f32 %712 = OpLoad %69 
                                         f32 %713 = OpFMul %711 %712 
                                         f32 %714 = OpLoad %590 
                                         f32 %715 = OpFNegate %714 
                                         f32 %716 = OpFAdd %713 %715 
                                                      OpStore %293 %716 
                                         f32 %717 = OpLoad %293 
                                         f32 %718 = OpLoad %590 
                                         f32 %719 = OpFMul %717 %718 
                                         f32 %720 = OpFAdd %719 %75 
                                                      OpStore %590 %720 
                                         f32 %721 = OpLoad %69 
                                         f32 %723 = OpFMul %721 %722 
                                                      OpStore %69 %723 
                                         f32 %724 = OpLoad %590 
                                         f32 %725 = OpLoad %590 
                                         f32 %726 = OpFMul %724 %725 
                                         f32 %728 = OpFAdd %726 %727 
                                                      OpStore %590 %728 
                                         f32 %729 = OpLoad %69 
                                         f32 %730 = OpLoad %590 
                                         f32 %731 = OpFDiv %729 %730 
                                                      OpStore %590 %731 
                                         f32 %732 = OpLoad %27 
                                         f32 %733 = OpLoad %590 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %609 %126 
                                                      OpStore %735 %734 
                                       f32_4 %736 = OpLoad %35 
                                       f32_2 %737 = OpVectorShuffle %736 %736 0 0 
                                       f32_3 %738 = OpLoad %609 
                                       f32_2 %739 = OpVectorShuffle %738 %738 0 2 
                                       f32_2 %740 = OpFMul %737 %739 
                                       f32_3 %741 = OpLoad %609 
                                       f32_3 %742 = OpVectorShuffle %741 %740 3 1 4 
                                                      OpStore %609 %742 
                                Private f32* %743 = OpAccessChain %609 %126 
                                         f32 %744 = OpLoad %743 
                                         f32 %746 = OpFMul %744 %745 
                                                      OpStore %27 %746 
                                         f32 %747 = OpLoad %27 
                                         f32 %748 = OpExtInst %1 40 %747 %137 
                                                      OpStore %27 %748 
                                         f32 %749 = OpLoad %627 
                                         f32 %750 = OpLoad %627 
                                         f32 %751 = OpFMul %749 %750 
                                         f32 %752 = OpFAdd %751 %75 
                                                      OpStore %627 %752 
                                         f32 %753 = OpLoad %627 
                                         f32 %754 = OpFDiv %75 %753 
                                                      OpStore %627 %754 
                                       f32_4 %755 = OpLoad %106 
                                       f32_3 %756 = OpVectorShuffle %755 %755 0 1 2 
                                       f32_4 %757 = OpLoad %106 
                                       f32_3 %758 = OpVectorShuffle %757 %757 0 1 2 
                                         f32 %759 = OpDot %756 %758 
                                Private f32* %760 = OpAccessChain %35 %112 
                                                      OpStore %760 %759 
                                Private f32* %762 = OpAccessChain %35 %112 
                                         f32 %763 = OpLoad %762 
                                        bool %764 = OpFOrdNotEqual %763 %137 
                                                      OpStore %761 %764 
                                        bool %765 = OpLoad %761 
                                         f32 %766 = OpSelect %765 %75 %137 
                                Private f32* %767 = OpAccessChain %35 %112 
                                                      OpStore %767 %766 
                                         f32 %768 = OpLoad %27 
                                Private f32* %769 = OpAccessChain %35 %112 
                                         f32 %770 = OpLoad %769 
                                         f32 %771 = OpFMul %768 %770 
                                                      OpStore %27 %771 
                                         f32 %772 = OpLoad %77 
                                         f32 %773 = OpFNegate %772 
                                Uniform f32* %774 = OpAccessChain %17 %70 
                                         f32 %775 = OpLoad %774 
                                         f32 %776 = OpFAdd %773 %775 
                                Private f32* %777 = OpAccessChain %35 %112 
                                                      OpStore %777 %776 
                                Private f32* %778 = OpAccessChain %35 %112 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFAdd %779 %75 
                                Private f32* %781 = OpAccessChain %35 %112 
                                                      OpStore %781 %780 
                                Private f32* %782 = OpAccessChain %35 %112 
                                         f32 %783 = OpLoad %782 
                                         f32 %784 = OpExtInst %1 43 %783 %137 %75 
                                Private f32* %785 = OpAccessChain %35 %112 
                                                      OpStore %785 %784 
                              Uniform f32_4* %787 = OpAccessChain %17 %786 
                                       f32_4 %788 = OpLoad %787 
                                       f32_3 %789 = OpVectorShuffle %788 %788 0 1 2 
                                       f32_3 %790 = OpLoad %609 
                                       f32_3 %791 = OpVectorShuffle %790 %790 0 0 0 
                                       f32_3 %792 = OpFMul %789 %791 
                                       f32_4 %793 = OpLoad %99 
                                       f32_3 %794 = OpVectorShuffle %793 %793 0 1 2 
                                       f32_3 %795 = OpFAdd %792 %794 
                                       f32_4 %796 = OpLoad %87 
                                       f32_4 %797 = OpVectorShuffle %796 %795 4 5 6 3 
                                                      OpStore %87 %797 
                                         f32 %798 = OpLoad %27 
                                       f32_3 %799 = OpCompositeConstruct %798 %798 %798 
                              Uniform f32_4* %800 = OpAccessChain %17 %786 
                                       f32_4 %801 = OpLoad %800 
                                       f32_3 %802 = OpVectorShuffle %801 %801 0 1 2 
                                       f32_3 %803 = OpFMul %799 %802 
                                       f32_4 %804 = OpLoad %99 
                                       f32_4 %805 = OpVectorShuffle %804 %803 4 5 6 3 
                                                      OpStore %99 %805 
                                Private f32* %806 = OpAccessChain %9 %112 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFNegate %807 
                                         f32 %809 = OpFAdd %808 %75 
                                Private f32* %810 = OpAccessChain %9 %112 
                                                      OpStore %810 %809 
                                Private f32* %811 = OpAccessChain %9 %112 
                                         f32 %812 = OpLoad %811 
                                Private f32* %813 = OpAccessChain %9 %112 
                                         f32 %814 = OpLoad %813 
                                         f32 %815 = OpFMul %812 %814 
                                Private f32* %816 = OpAccessChain %609 %112 
                                                      OpStore %816 %815 
                                Private f32* %817 = OpAccessChain %609 %112 
                                         f32 %818 = OpLoad %817 
                                Private f32* %819 = OpAccessChain %609 %112 
                                         f32 %820 = OpLoad %819 
                                         f32 %821 = OpFMul %818 %820 
                                Private f32* %822 = OpAccessChain %609 %112 
                                                      OpStore %822 %821 
                                Private f32* %823 = OpAccessChain %9 %112 
                                         f32 %824 = OpLoad %823 
                                Private f32* %825 = OpAccessChain %609 %112 
                                         f32 %826 = OpLoad %825 
                                         f32 %827 = OpFMul %824 %826 
                                Private f32* %828 = OpAccessChain %9 %112 
                                                      OpStore %828 %827 
                                       f32_4 %829 = OpLoad %106 
                                       f32_3 %830 = OpVectorShuffle %829 %829 0 1 2 
                                       f32_3 %831 = OpFNegate %830 
                                       f32_3 %833 = OpFAdd %831 %832 
                                                      OpStore %178 %833 
                                       f32_3 %834 = OpLoad %178 
                                       f32_4 %835 = OpLoad %9 
                                       f32_3 %836 = OpVectorShuffle %835 %835 0 0 0 
                                       f32_3 %837 = OpFMul %834 %836 
                                       f32_4 %838 = OpLoad %106 
                                       f32_3 %839 = OpVectorShuffle %838 %838 0 1 2 
                                       f32_3 %840 = OpFAdd %837 %839 
                                       f32_4 %841 = OpLoad %9 
                                       f32_4 %842 = OpVectorShuffle %841 %840 4 5 2 6 
                                                      OpStore %9 %842 
                                       f32_4 %843 = OpLoad %9 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 3 
                                       f32_4 %845 = OpLoad %99 
                                       f32_3 %846 = OpVectorShuffle %845 %845 0 1 2 
                                       f32_3 %847 = OpFMul %844 %846 
                                       f32_4 %848 = OpLoad %9 
                                       f32_4 %849 = OpVectorShuffle %848 %847 4 5 2 6 
                                                      OpStore %9 %849 
                                       f32_3 %850 = OpLoad %61 
                                       f32_4 %851 = OpLoad %87 
                                       f32_3 %852 = OpVectorShuffle %851 %851 0 1 2 
                                       f32_3 %853 = OpFMul %850 %852 
                                       f32_4 %854 = OpLoad %9 
                                       f32_3 %855 = OpVectorShuffle %854 %854 0 1 3 
                                       f32_3 %856 = OpFAdd %853 %855 
                                       f32_4 %857 = OpLoad %9 
                                       f32_4 %858 = OpVectorShuffle %857 %856 4 5 2 6 
                                                      OpStore %9 %858 
                                       f32_3 %859 = OpLoad %166 
                                         f32 %860 = OpLoad %627 
                                       f32_3 %861 = OpCompositeConstruct %860 %860 %860 
                                       f32_3 %862 = OpFMul %859 %861 
                                                      OpStore %61 %862 
                                       f32_4 %863 = OpLoad %106 
                                       f32_3 %864 = OpVectorShuffle %863 %863 0 1 2 
                                       f32_3 %865 = OpFNegate %864 
                                       f32_4 %866 = OpLoad %35 
                                       f32_3 %867 = OpVectorShuffle %866 %866 0 0 0 
                                       f32_3 %868 = OpFAdd %865 %867 
                                       f32_4 %869 = OpLoad %35 
                                       f32_4 %870 = OpVectorShuffle %869 %868 4 5 2 6 
                                                      OpStore %35 %870 
                                         f32 %871 = OpLoad %632 
                                       f32_3 %872 = OpCompositeConstruct %871 %871 %871 
                                       f32_4 %873 = OpLoad %35 
                                       f32_3 %874 = OpVectorShuffle %873 %873 0 1 3 
                                       f32_3 %875 = OpFMul %872 %874 
                                       f32_4 %876 = OpLoad %106 
                                       f32_3 %877 = OpVectorShuffle %876 %876 0 1 2 
                                       f32_3 %878 = OpFAdd %875 %877 
                                       f32_4 %879 = OpLoad %35 
                                       f32_4 %880 = OpVectorShuffle %879 %878 4 5 6 3 
                                                      OpStore %35 %880 
                                       f32_3 %881 = OpLoad %61 
                                       f32_4 %882 = OpLoad %35 
                                       f32_3 %883 = OpVectorShuffle %882 %882 0 1 2 
                                       f32_3 %884 = OpFMul %881 %883 
                                       f32_4 %885 = OpLoad %9 
                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 3 
                                       f32_3 %887 = OpFAdd %884 %886 
                                       f32_4 %888 = OpLoad %9 
                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 6 3 
                                                      OpStore %9 %889 
                                       f32_3 %890 = OpLoad %44 
                              Uniform f32_4* %891 = OpAccessChain %17 %63 
                                       f32_4 %892 = OpLoad %891 
                                       f32_3 %893 = OpVectorShuffle %892 %892 0 1 2 
                                       f32_3 %894 = OpFMul %890 %893 
                                       f32_4 %895 = OpLoad %9 
                                       f32_3 %896 = OpVectorShuffle %895 %895 0 1 2 
                                       f32_3 %897 = OpFAdd %894 %896 
                                       f32_4 %898 = OpLoad %9 
                                       f32_4 %899 = OpVectorShuffle %898 %897 4 5 6 3 
                                                      OpStore %9 %899 
                                         f32 %902 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %904 = OpAccessChain %17 %903 %119 
                                         f32 %905 = OpLoad %904 
                                         f32 %906 = OpFDiv %902 %905 
                                                      OpStore %27 %906 
                                         f32 %907 = OpLoad %27 
                                         f32 %908 = OpFNegate %907 
                                         f32 %909 = OpFAdd %908 %75 
                                                      OpStore %27 %909 
                                         f32 %910 = OpLoad %27 
                                Uniform f32* %911 = OpAccessChain %17 %903 %126 
                                         f32 %912 = OpLoad %911 
                                         f32 %913 = OpFMul %910 %912 
                                                      OpStore %27 %913 
                                         f32 %914 = OpLoad %27 
                                         f32 %915 = OpExtInst %1 40 %914 %137 
                                                      OpStore %27 %915 
                                         f32 %916 = OpLoad %27 
                                Uniform f32* %918 = OpAccessChain %17 %917 %126 
                                         f32 %919 = OpLoad %918 
                                         f32 %920 = OpFMul %916 %919 
                                Uniform f32* %921 = OpAccessChain %17 %917 %104 
                                         f32 %922 = OpLoad %921 
                                         f32 %923 = OpFAdd %920 %922 
                                                      OpStore %27 %923 
                                         f32 %924 = OpLoad %27 
                                         f32 %925 = OpExtInst %1 43 %924 %137 %75 
                                                      OpStore %27 %925 
                                       f32_4 %926 = OpLoad %9 
                                       f32_3 %927 = OpVectorShuffle %926 %926 0 1 2 
                              Uniform f32_4* %929 = OpAccessChain %17 %928 
                                       f32_4 %930 = OpLoad %929 
                                       f32_3 %931 = OpVectorShuffle %930 %930 0 1 2 
                                       f32_3 %932 = OpFNegate %931 
                                       f32_3 %933 = OpFAdd %927 %932 
                                       f32_4 %934 = OpLoad %9 
                                       f32_4 %935 = OpVectorShuffle %934 %933 4 5 6 3 
                                                      OpStore %9 %935 
                                         f32 %938 = OpLoad %27 
                                       f32_3 %939 = OpCompositeConstruct %938 %938 %938 
                                       f32_4 %940 = OpLoad %9 
                                       f32_3 %941 = OpVectorShuffle %940 %940 0 1 2 
                                       f32_3 %942 = OpFMul %939 %941 
                              Uniform f32_4* %943 = OpAccessChain %17 %928 
                                       f32_4 %944 = OpLoad %943 
                                       f32_3 %945 = OpVectorShuffle %944 %944 0 1 2 
                                       f32_3 %946 = OpFAdd %942 %945 
                                       f32_4 %947 = OpLoad %937 
                                       f32_4 %948 = OpVectorShuffle %947 %946 4 5 6 3 
                                                      OpStore %937 %948 
                                 Output f32* %950 = OpAccessChain %937 %104 
                                                      OpStore %950 %75 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(4) uniform  sampler2D _posTex;
UNITY_LOCATION(5) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    gl_Position = u_xlat2;
    vs_TEXCOORD4 = u_xlat2.z;
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0.x * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat37 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat38 = (-u_xlat37) + u_xlat38;
    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat38 + u_xlat37;
    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat38 = (-u_xlat4.x) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat38 + u_xlat4.x;
    u_xlat38 = (-_Glossiness) + 1.0;
    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat39 = u_xlat39 + u_xlat39;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat37) * _LightColor0.xyz;
    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat37 = inversesqrt(u_xlat37);
        u_xlat6.xyz = vec3(u_xlat37) * u_xlat4.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat37 = min(u_xlat7.y, u_xlat7.x);
        u_xlat37 = min(u_xlat7.z, u_xlat37);
        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat37 = (-u_xlat38) * 0.699999988 + 1.70000005;
    u_xlat37 = u_xlat37 * u_xlat38;
    u_xlat37 = u_xlat37 * 6.0;
    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat37);
    u_xlat39 = u_xlat6.w + -1.0;
    u_xlat39 = unity_SpecCube0_HDR.w * u_xlat39 + 1.0;
    u_xlat39 = log2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.y;
    u_xlat39 = exp2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat39);
    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = inversesqrt(u_xlat40);
            u_xlat8.xyz = vec3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat37);
        u_xlat37 = u_xlat4.w + -1.0;
        u_xlat37 = unity_SpecCube1_HDR.w * u_xlat37 + 1.0;
        u_xlat37 = log2(u_xlat37);
        u_xlat37 = u_xlat37 * unity_SpecCube1_HDR.y;
        u_xlat37 = exp2(u_xlat37);
        u_xlat37 = u_xlat37 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat37);
        u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz + (-u_xlat4.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
    }
    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat4.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
    u_xlat6.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat37 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat37) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat38));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat39 = u_xlat25 * u_xlat25;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat25 = u_xlat25 * u_xlat39;
    u_xlat12.x = u_xlat12.x * u_xlat25 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat38 * u_xlat38;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat38 = (-u_xlat24) + 1.0;
    u_xlat39 = abs(u_xlat36) * u_xlat38 + u_xlat24;
    u_xlat38 = u_xlat1.x * u_xlat38 + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat38;
    u_xlat36 = u_xlat1.x * u_xlat39 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat38 = u_xlat24 * u_xlat24;
    u_xlat39 = u_xlat13 * u_xlat38 + (-u_xlat13);
    u_xlat13 = u_xlat39 * u_xlat13 + 1.0;
    u_xlat38 = u_xlat38 * 0.318309873;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat13 = u_xlat38 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat12.z = u_xlat36 * 3.14159274;
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat36 = max(u_xlat12.z, 0.0);
    u_xlat24 = u_xlat24 * u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat36 * u_xlat1.x;
    u_xlat1.x = (-u_xlat37) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat8.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat24);
    u_xlat1.xyw = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyw + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    u_xlat36 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 419
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %233 %238 %242 %248 %249 %384 %413 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %231 0 BuiltIn 231 
                                                      OpMemberDecorate %231 1 BuiltIn 231 
                                                      OpMemberDecorate %231 2 BuiltIn 231 
                                                      OpDecorate %231 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 238 
                                                      OpDecorate vs_TEXCOORD5 Location 242 
                                                      OpDecorate vs_TEXCOORD0 Location 248 
                                                      OpDecorate %249 Location 249 
                                                      OpDecorate vs_TEXCOORD1 Location 384 
                                                      OpDecorate vs_TEXCOORD6 Location 413 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 8 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 9 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 7 
                                         i32 %119 = OpConstant 6 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 2 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %205 = OpConstant 4 
                                             %230 = OpTypeArray %6 %20 
                                             %231 = OpTypeStruct %7 %6 %230 
                                             %232 = OpTypePointer Output %231 
        Output struct {f32_4; f32; f32[1];}* %233 = OpVariable Output 
                                             %235 = OpTypePointer Output %7 
                                             %237 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %239 = OpConstant 2 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %247 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %249 = OpVariable Input 
                                         i32 %252 = OpConstant 10 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_2 %276 = OpConstantComposite %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_2 %279 = OpConstantComposite %278 %278 
                                Private f32* %283 = OpVariable Private 
                                         f32 %292 = OpConstant 3.674022E-40 
                                         f32 %293 = OpConstant 3.674022E-40 
                                       f32_2 %294 = OpConstantComposite %292 %293 
                                       f32_2 %296 = OpConstantComposite %56 %56 
                                       f32_3 %317 = OpConstantComposite %56 %56 %56 
                                             %329 = OpTypeBool 
                                             %330 = OpTypePointer Private %329 
                               Private bool* %331 = OpVariable Private 
                                       f32_4 %332 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %333 = OpConstant 5 
                                             %337 = OpTypeVector %329 4 
                                             %341 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                       f32_2 %398 = OpConstantComposite %293 %293 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %342 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %18 %167 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %166 %171 
                                                      OpStore %164 %172 
                              Uniform f32_4* %173 = OpAccessChain %18 %167 %19 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %114 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %164 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %164 %179 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %167 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %18 %205 %168 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpFMul %204 %207 
                                                      OpStore %114 %208 
                              Uniform f32_4* %209 = OpAccessChain %18 %205 %19 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %164 
                                       f32_4 %212 = OpVectorShuffle %211 %211 0 0 0 0 
                                       f32_4 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %114 
                                       f32_4 %215 = OpFAdd %213 %214 
                                                      OpStore %114 %215 
                              Uniform f32_4* %216 = OpAccessChain %18 %205 %167 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %164 
                                       f32_4 %219 = OpVectorShuffle %218 %218 2 2 2 2 
                                       f32_4 %220 = OpFMul %217 %219 
                                       f32_4 %221 = OpLoad %114 
                                       f32_4 %222 = OpFAdd %220 %221 
                                                      OpStore %114 %222 
                              Uniform f32_4* %223 = OpAccessChain %18 %205 %188 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %164 
                                       f32_4 %226 = OpVectorShuffle %225 %225 3 3 3 3 
                                       f32_4 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %114 
                                       f32_4 %229 = OpFAdd %227 %228 
                                                      OpStore %114 %229 
                                       f32_4 %234 = OpLoad %114 
                               Output f32_4* %236 = OpAccessChain %233 %19 
                                                      OpStore %236 %234 
                                Private f32* %240 = OpAccessChain %114 %239 
                                         f32 %241 = OpLoad %240 
                                                      OpStore vs_TEXCOORD4 %241 
                                       f32_4 %243 = OpLoad %114 
                                       f32_2 %244 = OpVectorShuffle %243 %243 2 3 
                                       f32_4 %245 = OpLoad vs_TEXCOORD5 
                                       f32_4 %246 = OpVectorShuffle %245 %244 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %246 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 1 
                              Uniform f32_4* %253 = OpAccessChain %18 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_2 %256 = OpFMul %251 %255 
                              Uniform f32_4* %257 = OpAccessChain %18 %252 
                                       f32_4 %258 = OpLoad %257 
                                       f32_2 %259 = OpVectorShuffle %258 %258 2 3 
                                       f32_2 %260 = OpFAdd %256 %259 
                                                      OpStore vs_TEXCOORD0 %260 
                                Private f32* %261 = OpAccessChain %76 %20 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpExtInst %1 8 %262 
                                Private f32* %264 = OpAccessChain %164 %29 
                                                      OpStore %264 %263 
                                Private f32* %265 = OpAccessChain %164 %29 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFNegate %266 
                                         f32 %268 = OpFMul %267 %146 
                                Private f32* %269 = OpAccessChain %76 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFAdd %268 %270 
                                Private f32* %272 = OpAccessChain %164 %20 
                                                      OpStore %272 %271 
                                       f32_4 %273 = OpLoad %164 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_2 %277 = OpFMul %274 %276 
                                       f32_2 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %76 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 2 3 
                                                      OpStore %76 %282 
                                       f32_4 %284 = OpLoad %76 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 1 
                                       f32_4 %286 = OpLoad %76 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                         f32 %288 = OpDot %285 %287 
                                                      OpStore %283 %288 
                                         f32 %289 = OpLoad %283 
                                       f32_2 %290 = OpCompositeConstruct %289 %289 
                                       f32_2 %291 = OpFNegate %290 
                                       f32_2 %295 = OpFMul %291 %294 
                                       f32_2 %297 = OpFAdd %295 %296 
                                       f32_4 %298 = OpLoad %164 
                                       f32_4 %299 = OpVectorShuffle %298 %297 0 1 4 5 
                                                      OpStore %164 %299 
                                Private f32* %300 = OpAccessChain %164 %239 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpExtInst %1 31 %301 
                                                      OpStore %283 %302 
                                       f32_4 %303 = OpLoad %76 
                                       f32_2 %304 = OpVectorShuffle %303 %303 0 1 
                                         f32 %305 = OpLoad %283 
                                       f32_2 %306 = OpCompositeConstruct %305 %305 
                                       f32_2 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %164 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 2 3 
                                                      OpStore %164 %309 
                                       f32_4 %310 = OpLoad %164 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 3 
                                       f32_3 %312 = OpExtInst %1 40 %311 %110 
                                       f32_4 %313 = OpLoad %76 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %76 %314 
                                       f32_4 %315 = OpLoad %76 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %318 = OpExtInst %1 37 %316 %317 
                                       f32_4 %319 = OpLoad %76 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %76 %320 
                                Private f32* %321 = OpAccessChain %76 %29 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                Private f32* %324 = OpAccessChain %76 %154 
                                                      OpStore %324 %323 
                                Private f32* %325 = OpAccessChain %9 %29 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFNegate %326 
                                Private f32* %328 = OpAccessChain %9 %154 
                                                      OpStore %328 %327 
                                Uniform f32* %334 = OpAccessChain %18 %333 
                                         f32 %335 = OpLoad %334 
                                       f32_4 %336 = OpCompositeConstruct %335 %335 %335 %335 
                                      bool_4 %338 = OpFOrdNotEqual %332 %336 
                                        bool %339 = OpAny %338 
                                                      OpStore %331 %339 
                                        bool %340 = OpLoad %331 
                                                      OpSelectionMerge %344 None 
                                                      OpBranchConditional %340 %343 %347 
                                             %343 = OpLabel 
                                       f32_4 %345 = OpLoad %76 
                                       f32_3 %346 = OpVectorShuffle %345 %345 3 2 1 
                                                      OpStore %342 %346 
                                                      OpBranch %344 
                                             %347 = OpLabel 
                                       f32_4 %348 = OpLoad %9 
                                       f32_3 %349 = OpVectorShuffle %348 %348 3 1 2 
                                                      OpStore %342 %349 
                                                      OpBranch %344 
                                             %344 = OpLabel 
                                       f32_3 %350 = OpLoad %342 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %9 %352 
                                       f32_4 %353 = OpLoad %9 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                              Uniform f32_4* %355 = OpAccessChain %18 %188 %19 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                         f32 %358 = OpDot %354 %357 
                                Private f32* %359 = OpAccessChain %76 %29 
                                                      OpStore %359 %358 
                                       f32_4 %360 = OpLoad %9 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                              Uniform f32_4* %362 = OpAccessChain %18 %188 %168 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                         f32 %365 = OpDot %361 %364 
                                Private f32* %366 = OpAccessChain %76 %20 
                                                      OpStore %366 %365 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                              Uniform f32_4* %369 = OpAccessChain %18 %188 %167 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                         f32 %372 = OpDot %368 %371 
                                Private f32* %373 = OpAccessChain %76 %239 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %76 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %76 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                         f32 %378 = OpDot %375 %377 
                                Private f32* %379 = OpAccessChain %9 %29 
                                                      OpStore %379 %378 
                                Private f32* %380 = OpAccessChain %9 %29 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpExtInst %1 32 %381 
                                Private f32* %383 = OpAccessChain %9 %29 
                                                      OpStore %383 %382 
                                       f32_4 %385 = OpLoad %9 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 0 0 
                                       f32_4 %387 = OpLoad %76 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFMul %386 %388 
                                                      OpStore vs_TEXCOORD1 %389 
                                Private f32* %390 = OpAccessChain %114 %20 
                                         f32 %391 = OpLoad %390 
                                Uniform f32* %392 = OpAccessChain %18 %168 %29 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %9 %29 
                                                      OpStore %395 %394 
                                       f32_4 %396 = OpLoad %114 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 3 
                                       f32_2 %399 = OpFMul %397 %398 
                                       f32_4 %400 = OpLoad %76 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 1 5 3 
                                                      OpStore %76 %401 
                                Private f32* %402 = OpAccessChain %9 %29 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %403 %293 
                                Private f32* %405 = OpAccessChain %76 %154 
                                                      OpStore %405 %404 
                                       f32_4 %406 = OpLoad %76 
                                       f32_2 %407 = OpVectorShuffle %406 %406 2 2 
                                       f32_4 %408 = OpLoad %76 
                                       f32_2 %409 = OpVectorShuffle %408 %408 0 3 
                                       f32_2 %410 = OpFAdd %407 %409 
                                       f32_4 %411 = OpLoad vs_TEXCOORD5 
                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %412 
                                                      OpStore vs_TEXCOORD6 %332 
                                 Output f32* %414 = OpAccessChain %233 %19 %20 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFNegate %415 
                                 Output f32* %417 = OpAccessChain %233 %19 %20 
                                                      OpStore %417 %416 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 992
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %60 %136 %170 %942 %977 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpMemberDecorate %18 17 Offset 18 
                                                      OpMemberDecorate %18 18 Offset 18 
                                                      OpMemberDecorate %18 19 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate vs_TEXCOORD5 Location 136 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate %337 DescriptorSet 337 
                                                      OpDecorate %337 Binding 337 
                                                      OpDecorate %339 DescriptorSet 339 
                                                      OpDecorate %339 Binding 339 
                                                      OpDecorate %491 DescriptorSet 491 
                                                      OpDecorate %491 Binding 491 
                                                      OpDecorate vs_TEXCOORD4 Location 942 
                                                      OpDecorate %977 Location 977 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %7 %7 %17 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %10 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_4* %38 = OpVariable Private 
                                              %46 = OpTypePointer Private %10 
                               Private f32_3* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypePointer UniformConstant %48 
         UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampler 
                                              %53 = OpTypePointer UniformConstant %52 
                     UniformConstant sampler* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampledImage %48 
                                              %58 = OpTypeVector %6 2 
                                              %59 = OpTypePointer Input %58 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %64 = OpVariable Private 
                                          i32 %66 = OpConstant 19 
                                              %67 = OpTypePointer Uniform %7 
                               Private f32_4* %72 = OpVariable Private 
                                          i32 %73 = OpConstant 5 
                                          u32 %74 = OpConstant 2 
                                              %75 = OpTypePointer Uniform %6 
                                          u32 %78 = OpConstant 0 
                                          i32 %80 = OpConstant 1 
                                          u32 %83 = OpConstant 1 
                                          i32 %85 = OpConstant 2 
                                 Private f32* %89 = OpVariable Private 
                                          i32 %96 = OpConstant 4 
                                Private f32* %104 = OpVariable Private 
                                         u32 %116 = OpConstant 3 
                                         i32 %124 = OpConstant 3 
                                         f32 %132 = OpConstant 3.674022E-40 
                                         f32 %133 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                Private f32* %153 = OpVariable Private 
                                         i32 %162 = OpConstant 17 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %187 = OpVariable Private 
                                         i32 %190 = OpConstant 16 
                                             %195 = OpTypeBool 
                                             %196 = OpTypePointer Private %195 
                               Private bool* %197 = OpVariable Private 
                                         i32 %198 = OpConstant 10 
                              Private f32_4* %212 = OpVariable Private 
                              Private f32_3* %220 = OpVariable Private 
                                         i32 %223 = OpConstant 8 
                              Private f32_3* %232 = OpVariable Private 
                                         i32 %235 = OpConstant 9 
                                             %244 = OpTypeVector %195 3 
                                             %245 = OpTypePointer Private %244 
                             Private bool_3* %246 = OpVariable Private 
                                       f32_4 %247 = OpConstantComposite %132 %132 %132 %132 
                                             %250 = OpTypeVector %195 4 
                                             %253 = OpTypePointer Function %10 
                                             %258 = OpTypePointer Function %6 
                                         f32 %325 = OpConstant 3.674022E-40 
                                         f32 %327 = OpConstant 3.674022E-40 
                                         f32 %333 = OpConstant 3.674022E-40 
                                             %335 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %336 = OpTypePointer UniformConstant %335 
      UniformConstant read_only TextureCube* %337 = OpVariable UniformConstant 
                    UniformConstant sampler* %339 = OpVariable UniformConstant 
                                             %341 = OpTypeSampledImage %335 
                                         f32 %349 = OpConstant 3.674022E-40 
                                         i32 %351 = OpConstant 11 
                               Private bool* %374 = OpVariable Private 
                                         f32 %377 = OpConstant 3.674022E-40 
                                         i32 %382 = OpConstant 14 
                                Private f32* %389 = OpVariable Private 
                              Private f32_3* %402 = OpVariable Private 
                                         i32 %405 = OpConstant 12 
                              Private f32_3* %413 = OpVariable Private 
                                         i32 %416 = OpConstant 13 
                             Private bool_3* %424 = OpVariable Private 
      UniformConstant read_only TextureCube* %491 = OpVariable UniformConstant 
                                         i32 %502 = OpConstant 15 
                                         f32 %563 = OpConstant 3.674022E-40 
                                       f32_3 %564 = OpConstantComposite %563 %563 %563 
                                         i32 %568 = OpConstant 18 
                                         f32 %583 = OpConstant 3.674022E-40 
                                       f32_3 %584 = OpConstantComposite %583 %583 %583 
                                         f32 %591 = OpConstant 3.674022E-40 
                                         f32 %615 = OpConstant 3.674022E-40 
                                Private f32* %642 = OpVariable Private 
                              Private f32_3* %661 = OpVariable Private 
                                         f32 %676 = OpConstant 3.674022E-40 
                                Private f32* %679 = OpVariable Private 
                                Private f32* %684 = OpVariable Private 
                                         f32 %727 = OpConstant 3.674022E-40 
                                         f32 %755 = OpConstant 3.674022E-40 
                                         f32 %757 = OpConstant 3.674022E-40 
                                         f32 %774 = OpConstant 3.674022E-40 
                                         f32 %779 = OpConstant 3.674022E-40 
                                         f32 %797 = OpConstant 3.674022E-40 
                               Private bool* %813 = OpVariable Private 
                                       f32_3 %874 = OpConstantComposite %133 %133 %133 
                                             %941 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %957 = OpConstant 7 
                                         i32 %968 = OpConstant 6 
                                             %976 = OpTypePointer Output %7 
                               Output f32_4* %977 = OpVariable Output 
                                             %989 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %254 = OpVariable Function 
                               Function f32* %259 = OpVariable Function 
                               Function f32* %271 = OpVariable Function 
                               Function f32* %283 = OpVariable Function 
                             Function f32_3* %429 = OpVariable Function 
                               Function f32* %433 = OpVariable Function 
                               Function f32* %445 = OpVariable Function 
                               Function f32* %457 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %14 %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
                                                      OpStore %9 %28 
                                        f32_4 %31 = OpLoad %9 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                          f32 %35 = OpDot %32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                          f32 %37 = OpExtInst %1 32 %36 
                                                      OpStore %30 %37 
                                          f32 %39 = OpLoad %30 
                                        f32_3 %40 = OpCompositeConstruct %39 %39 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %38 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 6 3 
                                                      OpStore %38 %45 
                          read_only Texture2D %51 = OpLoad %50 
                                      sampler %55 = OpLoad %54 
                   read_only Texture2DSampled %57 = OpSampledImage %51 %55 
                                        f32_2 %61 = OpLoad vs_TEXCOORD0 
                                        f32_4 %62 = OpImageSampleImplicitLod %57 %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                                      OpStore %47 %63 
                                        f32_3 %65 = OpLoad %47 
                               Uniform f32_4* %68 = OpAccessChain %20 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                                      OpStore %64 %71 
                                 Uniform f32* %76 = OpAccessChain %20 %73 %22 %74 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %72 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %20 %73 %80 %74 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %84 = OpAccessChain %72 %83 
                                                      OpStore %84 %82 
                                 Uniform f32* %86 = OpAccessChain %20 %73 %85 %74 
                                          f32 %87 = OpLoad %86 
                                 Private f32* %88 = OpAccessChain %72 %74 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %72 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                                      OpStore %89 %94 
                                        f32_3 %95 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %97 = OpAccessChain %20 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpFAdd %95 %100 
                                       f32_4 %102 = OpLoad %72 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %72 %103 
                                       f32_4 %105 = OpLoad %72 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %106 %108 
                                                      OpStore %104 %109 
                                         f32 %110 = OpLoad %104 
                                         f32 %111 = OpExtInst %1 31 %110 
                                                      OpStore %104 %111 
                                         f32 %112 = OpLoad %89 
                                         f32 %113 = OpFNegate %112 
                                         f32 %114 = OpLoad %104 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %104 %115 
                                Uniform f32* %117 = OpAccessChain %20 %96 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpLoad %104 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %121 = OpLoad %89 
                                         f32 %122 = OpFAdd %120 %121 
                                                      OpStore %89 %122 
                                         f32 %123 = OpLoad %89 
                                Uniform f32* %125 = OpAccessChain %20 %124 %74 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFMul %123 %126 
                                Uniform f32* %128 = OpAccessChain %20 %124 %116 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFAdd %127 %129 
                                                      OpStore %89 %130 
                                         f32 %131 = OpLoad %89 
                                         f32 %134 = OpExtInst %1 43 %131 %132 %133 
                                                      OpStore %89 %134 
                                       f32_4 %137 = OpLoad vs_TEXCOORD5 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_4 %139 = OpLoad vs_TEXCOORD5 
                                       f32_2 %140 = OpVectorShuffle %139 %139 3 3 
                                       f32_2 %141 = OpFDiv %138 %140 
                                       f32_4 %142 = OpLoad %72 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %72 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_4 %149 = OpLoad %72 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_4 %151 = OpImageSampleImplicitLod %148 %150 
                                         f32 %152 = OpCompositeExtract %151 0 
                                                      OpStore %104 %152 
                                         f32 %154 = OpLoad %104 
                                         f32 %155 = OpFNegate %154 
                                         f32 %156 = OpFAdd %155 %133 
                                                      OpStore %153 %156 
                                         f32 %157 = OpLoad %89 
                                         f32 %158 = OpLoad %153 
                                         f32 %159 = OpFMul %157 %158 
                                         f32 %160 = OpLoad %104 
                                         f32 %161 = OpFAdd %159 %160 
                                                      OpStore %89 %161 
                                Uniform f32* %163 = OpAccessChain %20 %162 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFNegate %164 
                                         f32 %166 = OpFAdd %165 %133 
                                                      OpStore %104 %166 
                                       f32_4 %167 = OpLoad %38 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFNegate %168 
                                       f32_3 %171 = OpLoad vs_TEXCOORD1 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %153 %172 
                                         f32 %173 = OpLoad %153 
                                         f32 %174 = OpLoad %153 
                                         f32 %175 = OpFAdd %173 %174 
                                                      OpStore %153 %175 
                                       f32_3 %176 = OpLoad vs_TEXCOORD1 
                                         f32 %177 = OpLoad %153 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFMul %176 %179 
                                       f32_4 %181 = OpLoad %38 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFNegate %182 
                                       f32_3 %184 = OpFAdd %180 %183 
                                       f32_4 %185 = OpLoad %72 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %72 %186 
                                         f32 %188 = OpLoad %89 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                              Uniform f32_4* %191 = OpAccessChain %20 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %189 %193 
                                                      OpStore %187 %194 
                                Uniform f32* %199 = OpAccessChain %20 %198 %116 
                                         f32 %200 = OpLoad %199 
                                        bool %201 = OpFOrdLessThan %132 %200 
                                                      OpStore %197 %201 
                                        bool %202 = OpLoad %197 
                                                      OpSelectionMerge %204 None 
                                                      OpBranchConditional %202 %203 %318 
                                             %203 = OpLabel 
                                       f32_4 %205 = OpLoad %72 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %72 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                                      OpStore %89 %209 
                                         f32 %210 = OpLoad %89 
                                         f32 %211 = OpExtInst %1 32 %210 
                                                      OpStore %89 %211 
                                         f32 %213 = OpLoad %89 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_4 %215 = OpLoad %72 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %212 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %212 %219 
                                       f32_3 %221 = OpLoad vs_TEXCOORD2 
                                       f32_3 %222 = OpFNegate %221 
                              Uniform f32_4* %224 = OpAccessChain %20 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpFAdd %222 %226 
                                                      OpStore %220 %227 
                                       f32_3 %228 = OpLoad %220 
                                       f32_4 %229 = OpLoad %212 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFDiv %228 %230 
                                                      OpStore %220 %231 
                                       f32_3 %233 = OpLoad vs_TEXCOORD2 
                                       f32_3 %234 = OpFNegate %233 
                              Uniform f32_4* %236 = OpAccessChain %20 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFAdd %234 %238 
                                                      OpStore %232 %239 
                                       f32_3 %240 = OpLoad %232 
                                       f32_4 %241 = OpLoad %212 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFDiv %240 %242 
                                                      OpStore %232 %243 
                                       f32_4 %248 = OpLoad %212 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 1 2 0 
                                      bool_4 %251 = OpFOrdLessThan %247 %249 
                                      bool_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                                      OpStore %246 %252 
                                       f32_3 %255 = OpLoad %220 
                                                      OpStore %254 %255 
                               Private bool* %256 = OpAccessChain %246 %78 
                                        bool %257 = OpLoad %256 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %257 %260 %264 
                                             %260 = OpLabel 
                                Private f32* %262 = OpAccessChain %220 %78 
                                         f32 %263 = OpLoad %262 
                                                      OpStore %259 %263 
                                                      OpBranch %261 
                                             %264 = OpLabel 
                                Private f32* %265 = OpAccessChain %232 %78 
                                         f32 %266 = OpLoad %265 
                                                      OpStore %259 %266 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                         f32 %267 = OpLoad %259 
                               Function f32* %268 = OpAccessChain %254 %78 
                                                      OpStore %268 %267 
                               Private bool* %269 = OpAccessChain %246 %83 
                                        bool %270 = OpLoad %269 
                                                      OpSelectionMerge %273 None 
                                                      OpBranchConditional %270 %272 %276 
                                             %272 = OpLabel 
                                Private f32* %274 = OpAccessChain %220 %83 
                                         f32 %275 = OpLoad %274 
                                                      OpStore %271 %275 
                                                      OpBranch %273 
                                             %276 = OpLabel 
                                Private f32* %277 = OpAccessChain %232 %83 
                                         f32 %278 = OpLoad %277 
                                                      OpStore %271 %278 
                                                      OpBranch %273 
                                             %273 = OpLabel 
                                         f32 %279 = OpLoad %271 
                               Function f32* %280 = OpAccessChain %254 %83 
                                                      OpStore %280 %279 
                               Private bool* %281 = OpAccessChain %246 %74 
                                        bool %282 = OpLoad %281 
                                                      OpSelectionMerge %285 None 
                                                      OpBranchConditional %282 %284 %288 
                                             %284 = OpLabel 
                                Private f32* %286 = OpAccessChain %220 %74 
                                         f32 %287 = OpLoad %286 
                                                      OpStore %283 %287 
                                                      OpBranch %285 
                                             %288 = OpLabel 
                                Private f32* %289 = OpAccessChain %232 %74 
                                         f32 %290 = OpLoad %289 
                                                      OpStore %283 %290 
                                                      OpBranch %285 
                                             %285 = OpLabel 
                                         f32 %291 = OpLoad %283 
                               Function f32* %292 = OpAccessChain %254 %74 
                                                      OpStore %292 %291 
                                       f32_3 %293 = OpLoad %254 
                                                      OpStore %220 %293 
                                Private f32* %294 = OpAccessChain %220 %83 
                                         f32 %295 = OpLoad %294 
                                Private f32* %296 = OpAccessChain %220 %78 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpExtInst %1 37 %295 %297 
                                                      OpStore %89 %298 
                                Private f32* %299 = OpAccessChain %220 %74 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpLoad %89 
                                         f32 %302 = OpExtInst %1 37 %300 %301 
                                                      OpStore %89 %302 
                                       f32_3 %303 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %304 = OpAccessChain %20 %198 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_3 %307 = OpFNegate %306 
                                       f32_3 %308 = OpFAdd %303 %307 
                                                      OpStore %220 %308 
                                       f32_4 %309 = OpLoad %212 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                         f32 %311 = OpLoad %89 
                                       f32_3 %312 = OpCompositeConstruct %311 %311 %311 
                                       f32_3 %313 = OpFMul %310 %312 
                                       f32_3 %314 = OpLoad %220 
                                       f32_3 %315 = OpFAdd %313 %314 
                                       f32_4 %316 = OpLoad %212 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %212 %317 
                                                      OpBranch %204 
                                             %318 = OpLabel 
                                       f32_4 %319 = OpLoad %72 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_4 %321 = OpLoad %212 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %212 %322 
                                                      OpBranch %204 
                                             %204 = OpLabel 
                                         f32 %323 = OpLoad %104 
                                         f32 %324 = OpFNegate %323 
                                         f32 %326 = OpFMul %324 %325 
                                         f32 %328 = OpFAdd %326 %327 
                                                      OpStore %89 %328 
                                         f32 %329 = OpLoad %89 
                                         f32 %330 = OpLoad %104 
                                         f32 %331 = OpFMul %329 %330 
                                                      OpStore %89 %331 
                                         f32 %332 = OpLoad %89 
                                         f32 %334 = OpFMul %332 %333 
                                                      OpStore %89 %334 
                       read_only TextureCube %338 = OpLoad %337 
                                     sampler %340 = OpLoad %339 
                read_only TextureCubeSampled %342 = OpSampledImage %338 %340 
                                       f32_4 %343 = OpLoad %212 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                         f32 %345 = OpLoad %89 
                                       f32_4 %346 = OpImageSampleExplicitLod %342 %344 Lod %7 
                                                      OpStore %212 %346 
                                Private f32* %347 = OpAccessChain %212 %116 
                                         f32 %348 = OpLoad %347 
                                         f32 %350 = OpFAdd %348 %349 
                                                      OpStore %153 %350 
                                Uniform f32* %352 = OpAccessChain %20 %351 %116 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpLoad %153 
                                         f32 %355 = OpFMul %353 %354 
                                         f32 %356 = OpFAdd %355 %133 
                                                      OpStore %153 %356 
                                         f32 %357 = OpLoad %153 
                                         f32 %358 = OpExtInst %1 30 %357 
                                                      OpStore %153 %358 
                                         f32 %359 = OpLoad %153 
                                Uniform f32* %360 = OpAccessChain %20 %351 %83 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %359 %361 
                                                      OpStore %153 %362 
                                         f32 %363 = OpLoad %153 
                                         f32 %364 = OpExtInst %1 29 %363 
                                                      OpStore %153 %364 
                                         f32 %365 = OpLoad %153 
                                Uniform f32* %366 = OpAccessChain %20 %351 %78 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpFMul %365 %367 
                                                      OpStore %153 %368 
                                       f32_4 %369 = OpLoad %212 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                         f32 %371 = OpLoad %153 
                                       f32_3 %372 = OpCompositeConstruct %371 %371 %371 
                                       f32_3 %373 = OpFMul %370 %372 
                                                      OpStore %220 %373 
                                Uniform f32* %375 = OpAccessChain %20 %235 %116 
                                         f32 %376 = OpLoad %375 
                                        bool %378 = OpFOrdLessThan %376 %377 
                                                      OpStore %374 %378 
                                        bool %379 = OpLoad %374 
                                                      OpSelectionMerge %381 None 
                                                      OpBranchConditional %379 %380 %381 
                                             %380 = OpLabel 
                                Uniform f32* %383 = OpAccessChain %20 %382 %116 
                                         f32 %384 = OpLoad %383 
                                        bool %385 = OpFOrdLessThan %132 %384 
                                                      OpStore %374 %385 
                                        bool %386 = OpLoad %374 
                                                      OpSelectionMerge %388 None 
                                                      OpBranchConditional %386 %387 %388 
                                             %387 = OpLabel 
                                       f32_4 %390 = OpLoad %72 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_4 %392 = OpLoad %72 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                         f32 %394 = OpDot %391 %393 
                                                      OpStore %389 %394 
                                         f32 %395 = OpLoad %389 
                                         f32 %396 = OpExtInst %1 32 %395 
                                                      OpStore %389 %396 
                                         f32 %397 = OpLoad %389 
                                       f32_3 %398 = OpCompositeConstruct %397 %397 %397 
                                       f32_4 %399 = OpLoad %72 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_3 %401 = OpFMul %398 %400 
                                                      OpStore %232 %401 
                                       f32_3 %403 = OpLoad vs_TEXCOORD2 
                                       f32_3 %404 = OpFNegate %403 
                              Uniform f32_4* %406 = OpAccessChain %20 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFAdd %404 %408 
                                                      OpStore %402 %409 
                                       f32_3 %410 = OpLoad %402 
                                       f32_3 %411 = OpLoad %232 
                                       f32_3 %412 = OpFDiv %410 %411 
                                                      OpStore %402 %412 
                                       f32_3 %414 = OpLoad vs_TEXCOORD2 
                                       f32_3 %415 = OpFNegate %414 
                              Uniform f32_4* %417 = OpAccessChain %20 %416 
                                       f32_4 %418 = OpLoad %417 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %415 %419 
                                                      OpStore %413 %420 
                                       f32_3 %421 = OpLoad %413 
                                       f32_3 %422 = OpLoad %232 
                                       f32_3 %423 = OpFDiv %421 %422 
                                                      OpStore %413 %423 
                                       f32_3 %425 = OpLoad %232 
                                       f32_4 %426 = OpVectorShuffle %425 %425 0 1 2 0 
                                      bool_4 %427 = OpFOrdLessThan %247 %426 
                                      bool_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                                      OpStore %424 %428 
                                       f32_3 %430 = OpLoad %402 
                                                      OpStore %429 %430 
                               Private bool* %431 = OpAccessChain %424 %78 
                                        bool %432 = OpLoad %431 
                                                      OpSelectionMerge %435 None 
                                                      OpBranchConditional %432 %434 %438 
                                             %434 = OpLabel 
                                Private f32* %436 = OpAccessChain %402 %78 
                                         f32 %437 = OpLoad %436 
                                                      OpStore %433 %437 
                                                      OpBranch %435 
                                             %438 = OpLabel 
                                Private f32* %439 = OpAccessChain %413 %78 
                                         f32 %440 = OpLoad %439 
                                                      OpStore %433 %440 
                                                      OpBranch %435 
                                             %435 = OpLabel 
                                         f32 %441 = OpLoad %433 
                               Function f32* %442 = OpAccessChain %429 %78 
                                                      OpStore %442 %441 
                               Private bool* %443 = OpAccessChain %424 %83 
                                        bool %444 = OpLoad %443 
                                                      OpSelectionMerge %447 None 
                                                      OpBranchConditional %444 %446 %450 
                                             %446 = OpLabel 
                                Private f32* %448 = OpAccessChain %402 %83 
                                         f32 %449 = OpLoad %448 
                                                      OpStore %445 %449 
                                                      OpBranch %447 
                                             %450 = OpLabel 
                                Private f32* %451 = OpAccessChain %413 %83 
                                         f32 %452 = OpLoad %451 
                                                      OpStore %445 %452 
                                                      OpBranch %447 
                                             %447 = OpLabel 
                                         f32 %453 = OpLoad %445 
                               Function f32* %454 = OpAccessChain %429 %83 
                                                      OpStore %454 %453 
                               Private bool* %455 = OpAccessChain %424 %74 
                                        bool %456 = OpLoad %455 
                                                      OpSelectionMerge %459 None 
                                                      OpBranchConditional %456 %458 %462 
                                             %458 = OpLabel 
                                Private f32* %460 = OpAccessChain %402 %74 
                                         f32 %461 = OpLoad %460 
                                                      OpStore %457 %461 
                                                      OpBranch %459 
                                             %462 = OpLabel 
                                Private f32* %463 = OpAccessChain %413 %74 
                                         f32 %464 = OpLoad %463 
                                                      OpStore %457 %464 
                                                      OpBranch %459 
                                             %459 = OpLabel 
                                         f32 %465 = OpLoad %457 
                               Function f32* %466 = OpAccessChain %429 %74 
                                                      OpStore %466 %465 
                                       f32_3 %467 = OpLoad %429 
                                                      OpStore %402 %467 
                                Private f32* %468 = OpAccessChain %402 %83 
                                         f32 %469 = OpLoad %468 
                                Private f32* %470 = OpAccessChain %402 %78 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpExtInst %1 37 %469 %471 
                                                      OpStore %389 %472 
                                Private f32* %473 = OpAccessChain %402 %74 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpLoad %389 
                                         f32 %476 = OpExtInst %1 37 %474 %475 
                                                      OpStore %389 %476 
                                       f32_3 %477 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %478 = OpAccessChain %20 %382 
                                       f32_4 %479 = OpLoad %478 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpFNegate %480 
                                       f32_3 %482 = OpFAdd %477 %481 
                                                      OpStore %402 %482 
                                       f32_3 %483 = OpLoad %232 
                                         f32 %484 = OpLoad %389 
                                       f32_3 %485 = OpCompositeConstruct %484 %484 %484 
                                       f32_3 %486 = OpFMul %483 %485 
                                       f32_3 %487 = OpLoad %402 
                                       f32_3 %488 = OpFAdd %486 %487 
                                       f32_4 %489 = OpLoad %72 
                                       f32_4 %490 = OpVectorShuffle %489 %488 4 5 6 3 
                                                      OpStore %72 %490 
                                                      OpBranch %388 
                                             %388 = OpLabel 
                       read_only TextureCube %492 = OpLoad %491 
                                     sampler %493 = OpLoad %339 
                read_only TextureCubeSampled %494 = OpSampledImage %492 %493 
                                       f32_4 %495 = OpLoad %72 
                                       f32_3 %496 = OpVectorShuffle %495 %495 0 1 2 
                                         f32 %497 = OpLoad %89 
                                       f32_4 %498 = OpImageSampleExplicitLod %494 %496 Lod %7 
                                                      OpStore %72 %498 
                                Private f32* %499 = OpAccessChain %72 %116 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFAdd %500 %349 
                                                      OpStore %89 %501 
                                Uniform f32* %503 = OpAccessChain %20 %502 %116 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpLoad %89 
                                         f32 %506 = OpFMul %504 %505 
                                         f32 %507 = OpFAdd %506 %133 
                                                      OpStore %89 %507 
                                         f32 %508 = OpLoad %89 
                                         f32 %509 = OpExtInst %1 30 %508 
                                                      OpStore %89 %509 
                                         f32 %510 = OpLoad %89 
                                Uniform f32* %511 = OpAccessChain %20 %502 %83 
                                         f32 %512 = OpLoad %511 
                                         f32 %513 = OpFMul %510 %512 
                                                      OpStore %89 %513 
                                         f32 %514 = OpLoad %89 
                                         f32 %515 = OpExtInst %1 29 %514 
                                                      OpStore %89 %515 
                                         f32 %516 = OpLoad %89 
                                Uniform f32* %517 = OpAccessChain %20 %502 %78 
                                         f32 %518 = OpLoad %517 
                                         f32 %519 = OpFMul %516 %518 
                                                      OpStore %89 %519 
                                       f32_4 %520 = OpLoad %72 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                         f32 %522 = OpLoad %89 
                                       f32_3 %523 = OpCompositeConstruct %522 %522 %522 
                                       f32_3 %524 = OpFMul %521 %523 
                                       f32_4 %525 = OpLoad %72 
                                       f32_4 %526 = OpVectorShuffle %525 %524 4 5 6 3 
                                                      OpStore %72 %526 
                                         f32 %527 = OpLoad %153 
                                       f32_3 %528 = OpCompositeConstruct %527 %527 %527 
                                       f32_4 %529 = OpLoad %212 
                                       f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
                                       f32_3 %531 = OpFMul %528 %530 
                                       f32_4 %532 = OpLoad %72 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpFNegate %533 
                                       f32_3 %535 = OpFAdd %531 %534 
                                       f32_4 %536 = OpLoad %212 
                                       f32_4 %537 = OpVectorShuffle %536 %535 4 5 6 3 
                                                      OpStore %212 %537 
                              Uniform f32_4* %538 = OpAccessChain %20 %235 
                                       f32_4 %539 = OpLoad %538 
                                       f32_3 %540 = OpVectorShuffle %539 %539 3 3 3 
                                       f32_4 %541 = OpLoad %212 
                                       f32_3 %542 = OpVectorShuffle %541 %541 0 1 2 
                                       f32_3 %543 = OpFMul %540 %542 
                                       f32_4 %544 = OpLoad %72 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFAdd %543 %545 
                                                      OpStore %220 %546 
                                                      OpBranch %381 
                                             %381 = OpLabel 
                                       f32_3 %547 = OpLoad vs_TEXCOORD1 
                                       f32_3 %548 = OpLoad vs_TEXCOORD1 
                                         f32 %549 = OpDot %547 %548 
                                                      OpStore %89 %549 
                                         f32 %550 = OpLoad %89 
                                         f32 %551 = OpExtInst %1 32 %550 
                                                      OpStore %89 %551 
                                         f32 %552 = OpLoad %89 
                                       f32_3 %553 = OpCompositeConstruct %552 %552 %552 
                                       f32_3 %554 = OpLoad vs_TEXCOORD1 
                                       f32_3 %555 = OpFMul %553 %554 
                                       f32_4 %556 = OpLoad %72 
                                       f32_4 %557 = OpVectorShuffle %556 %555 4 5 6 3 
                                                      OpStore %72 %557 
                                       f32_3 %558 = OpLoad %47 
                              Uniform f32_4* %559 = OpAccessChain %20 %66 
                                       f32_4 %560 = OpLoad %559 
                                       f32_3 %561 = OpVectorShuffle %560 %560 0 1 2 
                                       f32_3 %562 = OpFMul %558 %561 
                                       f32_3 %565 = OpFAdd %562 %564 
                                       f32_4 %566 = OpLoad %212 
                                       f32_4 %567 = OpVectorShuffle %566 %565 4 5 6 3 
                                                      OpStore %212 %567 
                                Uniform f32* %569 = OpAccessChain %20 %568 
                                         f32 %570 = OpLoad %569 
                                Uniform f32* %571 = OpAccessChain %20 %568 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %20 %568 
                                         f32 %574 = OpLoad %573 
                                       f32_3 %575 = OpCompositeConstruct %570 %572 %574 
                                         f32 %576 = OpCompositeExtract %575 0 
                                         f32 %577 = OpCompositeExtract %575 1 
                                         f32 %578 = OpCompositeExtract %575 2 
                                       f32_3 %579 = OpCompositeConstruct %576 %577 %578 
                                       f32_4 %580 = OpLoad %212 
                                       f32_3 %581 = OpVectorShuffle %580 %580 0 1 2 
                                       f32_3 %582 = OpFMul %579 %581 
                                       f32_3 %585 = OpFAdd %582 %584 
                                       f32_4 %586 = OpLoad %212 
                                       f32_4 %587 = OpVectorShuffle %586 %585 4 5 6 3 
                                                      OpStore %212 %587 
                                Uniform f32* %588 = OpAccessChain %20 %568 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpFNegate %589 
                                         f32 %592 = OpFMul %590 %591 
                                         f32 %593 = OpFAdd %592 %591 
                                                      OpStore %89 %593 
                                         f32 %594 = OpLoad %89 
                                       f32_3 %595 = OpCompositeConstruct %594 %594 %594 
                                       f32_3 %596 = OpLoad %64 
                                       f32_3 %597 = OpFMul %595 %596 
                                                      OpStore %64 %597 
                                       f32_4 %598 = OpLoad %9 
                                       f32_3 %599 = OpVectorShuffle %598 %598 0 1 2 
                                         f32 %600 = OpLoad %30 
                                       f32_3 %601 = OpCompositeConstruct %600 %600 %600 
                                       f32_3 %602 = OpFMul %599 %601 
                              Uniform f32_4* %603 = OpAccessChain %20 %85 
                                       f32_4 %604 = OpLoad %603 
                                       f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
                                       f32_3 %606 = OpFAdd %602 %605 
                                       f32_4 %607 = OpLoad %9 
                                       f32_4 %608 = OpVectorShuffle %607 %606 4 5 6 3 
                                                      OpStore %9 %608 
                                       f32_4 %609 = OpLoad %9 
                                       f32_3 %610 = OpVectorShuffle %609 %609 0 1 2 
                                       f32_4 %611 = OpLoad %9 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                         f32 %613 = OpDot %610 %612 
                                                      OpStore %30 %613 
                                         f32 %614 = OpLoad %30 
                                         f32 %616 = OpExtInst %1 40 %614 %615 
                                                      OpStore %30 %616 
                                         f32 %617 = OpLoad %30 
                                         f32 %618 = OpExtInst %1 32 %617 
                                                      OpStore %30 %618 
                                         f32 %619 = OpLoad %30 
                                       f32_3 %620 = OpCompositeConstruct %619 %619 %619 
                                       f32_4 %621 = OpLoad %9 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                                       f32_3 %623 = OpFMul %620 %622 
                                       f32_4 %624 = OpLoad %9 
                                       f32_4 %625 = OpVectorShuffle %624 %623 4 5 6 3 
                                                      OpStore %9 %625 
                                       f32_4 %626 = OpLoad %72 
                                       f32_3 %627 = OpVectorShuffle %626 %626 0 1 2 
                                       f32_4 %628 = OpLoad %38 
                                       f32_3 %629 = OpVectorShuffle %628 %628 0 1 2 
                                         f32 %630 = OpDot %627 %629 
                                                      OpStore %30 %630 
                                       f32_4 %631 = OpLoad %72 
                                       f32_3 %632 = OpVectorShuffle %631 %631 0 1 2 
                              Uniform f32_4* %633 = OpAccessChain %20 %85 
                                       f32_4 %634 = OpLoad %633 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                         f32 %636 = OpDot %632 %635 
                                Private f32* %637 = OpAccessChain %38 %78 
                                                      OpStore %637 %636 
                                Private f32* %638 = OpAccessChain %38 %78 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpExtInst %1 43 %639 %132 %133 
                                Private f32* %641 = OpAccessChain %38 %78 
                                                      OpStore %641 %640 
                                       f32_4 %643 = OpLoad %72 
                                       f32_3 %644 = OpVectorShuffle %643 %643 0 1 2 
                                       f32_4 %645 = OpLoad %9 
                                       f32_3 %646 = OpVectorShuffle %645 %645 0 1 2 
                                         f32 %647 = OpDot %644 %646 
                                                      OpStore %642 %647 
                                         f32 %648 = OpLoad %642 
                                         f32 %649 = OpExtInst %1 43 %648 %132 %133 
                                                      OpStore %642 %649 
                              Uniform f32_4* %650 = OpAccessChain %20 %85 
                                       f32_4 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 1 2 
                                       f32_4 %653 = OpLoad %9 
                                       f32_3 %654 = OpVectorShuffle %653 %653 0 1 2 
                                         f32 %655 = OpDot %652 %654 
                                Private f32* %656 = OpAccessChain %9 %78 
                                                      OpStore %656 %655 
                                Private f32* %657 = OpAccessChain %9 %78 
                                         f32 %658 = OpLoad %657 
                                         f32 %659 = OpExtInst %1 43 %658 %132 %133 
                                Private f32* %660 = OpAccessChain %9 %78 
                                                      OpStore %660 %659 
                                Private f32* %662 = OpAccessChain %9 %78 
                                         f32 %663 = OpLoad %662 
                                Private f32* %664 = OpAccessChain %9 %78 
                                         f32 %665 = OpLoad %664 
                                         f32 %666 = OpFMul %663 %665 
                                Private f32* %667 = OpAccessChain %661 %78 
                                                      OpStore %667 %666 
                                       f32_3 %668 = OpLoad %661 
                                       f32_2 %669 = OpVectorShuffle %668 %668 0 0 
                                         f32 %670 = OpLoad %104 
                                       f32_2 %671 = OpCompositeConstruct %670 %670 
                                         f32 %672 = OpDot %669 %671 
                                Private f32* %673 = OpAccessChain %661 %78 
                                                      OpStore %673 %672 
                                Private f32* %674 = OpAccessChain %661 %78 
                                         f32 %675 = OpLoad %674 
                                         f32 %677 = OpFAdd %675 %676 
                                Private f32* %678 = OpAccessChain %661 %78 
                                                      OpStore %678 %677 
                                Private f32* %680 = OpAccessChain %38 %78 
                                         f32 %681 = OpLoad %680 
                                         f32 %682 = OpFNegate %681 
                                         f32 %683 = OpFAdd %682 %133 
                                                      OpStore %679 %683 
                                         f32 %685 = OpLoad %679 
                                         f32 %686 = OpLoad %679 
                                         f32 %687 = OpFMul %685 %686 
                                                      OpStore %684 %687 
                                         f32 %688 = OpLoad %684 
                                         f32 %689 = OpLoad %684 
                                         f32 %690 = OpFMul %688 %689 
                                                      OpStore %684 %690 
                                         f32 %691 = OpLoad %679 
                                         f32 %692 = OpLoad %684 
                                         f32 %693 = OpFMul %691 %692 
                                                      OpStore %679 %693 
                                Private f32* %694 = OpAccessChain %661 %78 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpLoad %679 
                                         f32 %697 = OpFMul %695 %696 
                                         f32 %698 = OpFAdd %697 %133 
                                                      OpStore %679 %698 
                                         f32 %699 = OpLoad %30 
                                         f32 %700 = OpExtInst %1 4 %699 
                                         f32 %701 = OpFNegate %700 
                                         f32 %702 = OpFAdd %701 %133 
                                                      OpStore %684 %702 
                                         f32 %703 = OpLoad %684 
                                         f32 %704 = OpLoad %684 
                                         f32 %705 = OpFMul %703 %704 
                                                      OpStore %153 %705 
                                         f32 %706 = OpLoad %153 
                                         f32 %707 = OpLoad %153 
                                         f32 %708 = OpFMul %706 %707 
                                                      OpStore %153 %708 
                                         f32 %709 = OpLoad %684 
                                         f32 %710 = OpLoad %153 
                                         f32 %711 = OpFMul %709 %710 
                                                      OpStore %684 %711 
                                Private f32* %712 = OpAccessChain %661 %78 
                                         f32 %713 = OpLoad %712 
                                         f32 %714 = OpLoad %684 
                                         f32 %715 = OpFMul %713 %714 
                                         f32 %716 = OpFAdd %715 %133 
                                Private f32* %717 = OpAccessChain %661 %78 
                                                      OpStore %717 %716 
                                Private f32* %718 = OpAccessChain %661 %78 
                                         f32 %719 = OpLoad %718 
                                         f32 %720 = OpLoad %679 
                                         f32 %721 = OpFMul %719 %720 
                                Private f32* %722 = OpAccessChain %661 %78 
                                                      OpStore %722 %721 
                                         f32 %723 = OpLoad %104 
                                         f32 %724 = OpLoad %104 
                                         f32 %725 = OpFMul %723 %724 
                                                      OpStore %679 %725 
                                         f32 %726 = OpLoad %679 
                                         f32 %728 = OpExtInst %1 40 %726 %727 
                                                      OpStore %679 %728 
                                         f32 %729 = OpLoad %679 
                                         f32 %730 = OpFNegate %729 
                                         f32 %731 = OpFAdd %730 %133 
                                                      OpStore %104 %731 
                                         f32 %732 = OpLoad %30 
                                         f32 %733 = OpExtInst %1 4 %732 
                                         f32 %734 = OpLoad %104 
                                         f32 %735 = OpFMul %733 %734 
                                         f32 %736 = OpLoad %679 
                                         f32 %737 = OpFAdd %735 %736 
                                                      OpStore %153 %737 
                                Private f32* %738 = OpAccessChain %38 %78 
                                         f32 %739 = OpLoad %738 
                                         f32 %740 = OpLoad %104 
                                         f32 %741 = OpFMul %739 %740 
                                         f32 %742 = OpLoad %679 
                                         f32 %743 = OpFAdd %741 %742 
                                                      OpStore %104 %743 
                                         f32 %744 = OpLoad %30 
                                         f32 %745 = OpExtInst %1 4 %744 
                                         f32 %746 = OpLoad %104 
                                         f32 %747 = OpFMul %745 %746 
                                                      OpStore %30 %747 
                                Private f32* %748 = OpAccessChain %38 %78 
                                         f32 %749 = OpLoad %748 
                                         f32 %750 = OpLoad %153 
                                         f32 %751 = OpFMul %749 %750 
                                         f32 %752 = OpLoad %30 
                                         f32 %753 = OpFAdd %751 %752 
                                                      OpStore %30 %753 
                                         f32 %754 = OpLoad %30 
                                         f32 %756 = OpFAdd %754 %755 
                                                      OpStore %30 %756 
                                         f32 %758 = OpLoad %30 
                                         f32 %759 = OpFDiv %757 %758 
                                                      OpStore %30 %759 
                                         f32 %760 = OpLoad %679 
                                         f32 %761 = OpLoad %679 
                                         f32 %762 = OpFMul %760 %761 
                                                      OpStore %104 %762 
                                         f32 %763 = OpLoad %642 
                                         f32 %764 = OpLoad %104 
                                         f32 %765 = OpFMul %763 %764 
                                         f32 %766 = OpLoad %642 
                                         f32 %767 = OpFNegate %766 
                                         f32 %768 = OpFAdd %765 %767 
                                                      OpStore %153 %768 
                                         f32 %769 = OpLoad %153 
                                         f32 %770 = OpLoad %642 
                                         f32 %771 = OpFMul %769 %770 
                                         f32 %772 = OpFAdd %771 %133 
                                                      OpStore %642 %772 
                                         f32 %773 = OpLoad %104 
                                         f32 %775 = OpFMul %773 %774 
                                                      OpStore %104 %775 
                                         f32 %776 = OpLoad %642 
                                         f32 %777 = OpLoad %642 
                                         f32 %778 = OpFMul %776 %777 
                                         f32 %780 = OpFAdd %778 %779 
                                                      OpStore %642 %780 
                                         f32 %781 = OpLoad %104 
                                         f32 %782 = OpLoad %642 
                                         f32 %783 = OpFDiv %781 %782 
                                                      OpStore %642 %783 
                                         f32 %784 = OpLoad %30 
                                         f32 %785 = OpLoad %642 
                                         f32 %786 = OpFMul %784 %785 
                                Private f32* %787 = OpAccessChain %661 %74 
                                                      OpStore %787 %786 
                                       f32_4 %788 = OpLoad %38 
                                       f32_2 %789 = OpVectorShuffle %788 %788 0 0 
                                       f32_3 %790 = OpLoad %661 
                                       f32_2 %791 = OpVectorShuffle %790 %790 0 2 
                                       f32_2 %792 = OpFMul %789 %791 
                                       f32_3 %793 = OpLoad %661 
                                       f32_3 %794 = OpVectorShuffle %793 %792 3 1 4 
                                                      OpStore %661 %794 
                                Private f32* %795 = OpAccessChain %661 %74 
                                         f32 %796 = OpLoad %795 
                                         f32 %798 = OpFMul %796 %797 
                                                      OpStore %30 %798 
                                         f32 %799 = OpLoad %30 
                                         f32 %800 = OpExtInst %1 40 %799 %132 
                                                      OpStore %30 %800 
                                         f32 %801 = OpLoad %679 
                                         f32 %802 = OpLoad %679 
                                         f32 %803 = OpFMul %801 %802 
                                         f32 %804 = OpFAdd %803 %133 
                                                      OpStore %679 %804 
                                         f32 %805 = OpLoad %679 
                                         f32 %806 = OpFDiv %133 %805 
                                                      OpStore %679 %806 
                                       f32_4 %807 = OpLoad %212 
                                       f32_3 %808 = OpVectorShuffle %807 %807 0 1 2 
                                       f32_4 %809 = OpLoad %212 
                                       f32_3 %810 = OpVectorShuffle %809 %809 0 1 2 
                                         f32 %811 = OpDot %808 %810 
                                Private f32* %812 = OpAccessChain %38 %78 
                                                      OpStore %812 %811 
                                Private f32* %814 = OpAccessChain %38 %78 
                                         f32 %815 = OpLoad %814 
                                        bool %816 = OpFOrdNotEqual %815 %132 
                                                      OpStore %813 %816 
                                        bool %817 = OpLoad %813 
                                         f32 %818 = OpSelect %817 %133 %132 
                                Private f32* %819 = OpAccessChain %38 %78 
                                                      OpStore %819 %818 
                                         f32 %820 = OpLoad %30 
                                Private f32* %821 = OpAccessChain %38 %78 
                                         f32 %822 = OpLoad %821 
                                         f32 %823 = OpFMul %820 %822 
                                                      OpStore %30 %823 
                                         f32 %824 = OpLoad %89 
                                         f32 %825 = OpFNegate %824 
                                Uniform f32* %826 = OpAccessChain %20 %162 
                                         f32 %827 = OpLoad %826 
                                         f32 %828 = OpFAdd %825 %827 
                                Private f32* %829 = OpAccessChain %38 %78 
                                                      OpStore %829 %828 
                                Private f32* %830 = OpAccessChain %38 %78 
                                         f32 %831 = OpLoad %830 
                                         f32 %832 = OpFAdd %831 %133 
                                Private f32* %833 = OpAccessChain %38 %78 
                                                      OpStore %833 %832 
                                Private f32* %834 = OpAccessChain %38 %78 
                                         f32 %835 = OpLoad %834 
                                         f32 %836 = OpExtInst %1 43 %835 %132 %133 
                                Private f32* %837 = OpAccessChain %38 %78 
                                                      OpStore %837 %836 
                                       f32_3 %838 = OpLoad %661 
                                       f32_3 %839 = OpVectorShuffle %838 %838 0 0 0 
                                       f32_3 %840 = OpLoad %187 
                                       f32_3 %841 = OpFMul %839 %840 
                                       f32_4 %842 = OpLoad %72 
                                       f32_4 %843 = OpVectorShuffle %842 %841 4 5 6 3 
                                                      OpStore %72 %843 
                                       f32_3 %844 = OpLoad %187 
                                         f32 %845 = OpLoad %30 
                                       f32_3 %846 = OpCompositeConstruct %845 %845 %845 
                                       f32_3 %847 = OpFMul %844 %846 
                                                      OpStore %187 %847 
                                Private f32* %848 = OpAccessChain %9 %78 
                                         f32 %849 = OpLoad %848 
                                         f32 %850 = OpFNegate %849 
                                         f32 %851 = OpFAdd %850 %133 
                                Private f32* %852 = OpAccessChain %9 %78 
                                                      OpStore %852 %851 
                                Private f32* %853 = OpAccessChain %9 %78 
                                         f32 %854 = OpLoad %853 
                                Private f32* %855 = OpAccessChain %9 %78 
                                         f32 %856 = OpLoad %855 
                                         f32 %857 = OpFMul %854 %856 
                                Private f32* %858 = OpAccessChain %661 %78 
                                                      OpStore %858 %857 
                                Private f32* %859 = OpAccessChain %661 %78 
                                         f32 %860 = OpLoad %859 
                                Private f32* %861 = OpAccessChain %661 %78 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpFMul %860 %862 
                                Private f32* %864 = OpAccessChain %661 %78 
                                                      OpStore %864 %863 
                                Private f32* %865 = OpAccessChain %9 %78 
                                         f32 %866 = OpLoad %865 
                                Private f32* %867 = OpAccessChain %661 %78 
                                         f32 %868 = OpLoad %867 
                                         f32 %869 = OpFMul %866 %868 
                                Private f32* %870 = OpAccessChain %9 %78 
                                                      OpStore %870 %869 
                                       f32_4 %871 = OpLoad %212 
                                       f32_3 %872 = OpVectorShuffle %871 %871 0 1 2 
                                       f32_3 %873 = OpFNegate %872 
                                       f32_3 %875 = OpFAdd %873 %874 
                                                      OpStore %232 %875 
                                       f32_3 %876 = OpLoad %232 
                                       f32_4 %877 = OpLoad %9 
                                       f32_3 %878 = OpVectorShuffle %877 %877 0 0 0 
                                       f32_3 %879 = OpFMul %876 %878 
                                       f32_4 %880 = OpLoad %212 
                                       f32_3 %881 = OpVectorShuffle %880 %880 0 1 2 
                                       f32_3 %882 = OpFAdd %879 %881 
                                       f32_4 %883 = OpLoad %9 
                                       f32_4 %884 = OpVectorShuffle %883 %882 4 5 2 6 
                                                      OpStore %9 %884 
                                       f32_4 %885 = OpLoad %9 
                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 3 
                                       f32_3 %887 = OpLoad %187 
                                       f32_3 %888 = OpFMul %886 %887 
                                       f32_4 %889 = OpLoad %9 
                                       f32_4 %890 = OpVectorShuffle %889 %888 4 5 2 6 
                                                      OpStore %9 %890 
                                       f32_3 %891 = OpLoad %64 
                                       f32_4 %892 = OpLoad %72 
                                       f32_3 %893 = OpVectorShuffle %892 %892 0 1 2 
                                       f32_3 %894 = OpFMul %891 %893 
                                       f32_4 %895 = OpLoad %9 
                                       f32_3 %896 = OpVectorShuffle %895 %895 0 1 3 
                                       f32_3 %897 = OpFAdd %894 %896 
                                       f32_4 %898 = OpLoad %9 
                                       f32_4 %899 = OpVectorShuffle %898 %897 4 5 2 6 
                                                      OpStore %9 %899 
                                       f32_3 %900 = OpLoad %220 
                                         f32 %901 = OpLoad %679 
                                       f32_3 %902 = OpCompositeConstruct %901 %901 %901 
                                       f32_3 %903 = OpFMul %900 %902 
                                                      OpStore %64 %903 
                                       f32_4 %904 = OpLoad %212 
                                       f32_3 %905 = OpVectorShuffle %904 %904 0 1 2 
                                       f32_3 %906 = OpFNegate %905 
                                       f32_4 %907 = OpLoad %38 
                                       f32_3 %908 = OpVectorShuffle %907 %907 0 0 0 
                                       f32_3 %909 = OpFAdd %906 %908 
                                       f32_4 %910 = OpLoad %38 
                                       f32_4 %911 = OpVectorShuffle %910 %909 4 5 2 6 
                                                      OpStore %38 %911 
                                         f32 %912 = OpLoad %684 
                                       f32_3 %913 = OpCompositeConstruct %912 %912 %912 
                                       f32_4 %914 = OpLoad %38 
                                       f32_3 %915 = OpVectorShuffle %914 %914 0 1 3 
                                       f32_3 %916 = OpFMul %913 %915 
                                       f32_4 %917 = OpLoad %212 
                                       f32_3 %918 = OpVectorShuffle %917 %917 0 1 2 
                                       f32_3 %919 = OpFAdd %916 %918 
                                       f32_4 %920 = OpLoad %38 
                                       f32_4 %921 = OpVectorShuffle %920 %919 4 5 6 3 
                                                      OpStore %38 %921 
                                       f32_3 %922 = OpLoad %64 
                                       f32_4 %923 = OpLoad %38 
                                       f32_3 %924 = OpVectorShuffle %923 %923 0 1 2 
                                       f32_3 %925 = OpFMul %922 %924 
                                       f32_4 %926 = OpLoad %9 
                                       f32_3 %927 = OpVectorShuffle %926 %926 0 1 3 
                                       f32_3 %928 = OpFAdd %925 %927 
                                       f32_4 %929 = OpLoad %9 
                                       f32_4 %930 = OpVectorShuffle %929 %928 4 5 6 3 
                                                      OpStore %9 %930 
                                       f32_3 %931 = OpLoad %47 
                              Uniform f32_4* %932 = OpAccessChain %20 %66 
                                       f32_4 %933 = OpLoad %932 
                                       f32_3 %934 = OpVectorShuffle %933 %933 0 1 2 
                                       f32_3 %935 = OpFMul %931 %934 
                                       f32_4 %936 = OpLoad %9 
                                       f32_3 %937 = OpVectorShuffle %936 %936 0 1 2 
                                       f32_3 %938 = OpFAdd %935 %937 
                                       f32_4 %939 = OpLoad %9 
                                       f32_4 %940 = OpVectorShuffle %939 %938 4 5 6 3 
                                                      OpStore %9 %940 
                                         f32 %943 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %944 = OpAccessChain %20 %80 %83 
                                         f32 %945 = OpLoad %944 
                                         f32 %946 = OpFDiv %943 %945 
                                                      OpStore %30 %946 
                                         f32 %947 = OpLoad %30 
                                         f32 %948 = OpFNegate %947 
                                         f32 %949 = OpFAdd %948 %133 
                                                      OpStore %30 %949 
                                         f32 %950 = OpLoad %30 
                                Uniform f32* %951 = OpAccessChain %20 %80 %74 
                                         f32 %952 = OpLoad %951 
                                         f32 %953 = OpFMul %950 %952 
                                                      OpStore %30 %953 
                                         f32 %954 = OpLoad %30 
                                         f32 %955 = OpExtInst %1 40 %954 %132 
                                                      OpStore %30 %955 
                                         f32 %956 = OpLoad %30 
                                Uniform f32* %958 = OpAccessChain %20 %957 %74 
                                         f32 %959 = OpLoad %958 
                                         f32 %960 = OpFMul %956 %959 
                                Uniform f32* %961 = OpAccessChain %20 %957 %116 
                                         f32 %962 = OpLoad %961 
                                         f32 %963 = OpFAdd %960 %962 
                                                      OpStore %30 %963 
                                         f32 %964 = OpLoad %30 
                                         f32 %965 = OpExtInst %1 43 %964 %132 %133 
                                                      OpStore %30 %965 
                                       f32_4 %966 = OpLoad %9 
                                       f32_3 %967 = OpVectorShuffle %966 %966 0 1 2 
                              Uniform f32_4* %969 = OpAccessChain %20 %968 
                                       f32_4 %970 = OpLoad %969 
                                       f32_3 %971 = OpVectorShuffle %970 %970 0 1 2 
                                       f32_3 %972 = OpFNegate %971 
                                       f32_3 %973 = OpFAdd %967 %972 
                                       f32_4 %974 = OpLoad %9 
                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
                                                      OpStore %9 %975 
                                         f32 %978 = OpLoad %30 
                                       f32_3 %979 = OpCompositeConstruct %978 %978 %978 
                                       f32_4 %980 = OpLoad %9 
                                       f32_3 %981 = OpVectorShuffle %980 %980 0 1 2 
                                       f32_3 %982 = OpFMul %979 %981 
                              Uniform f32_4* %983 = OpAccessChain %20 %968 
                                       f32_4 %984 = OpLoad %983 
                                       f32_3 %985 = OpVectorShuffle %984 %984 0 1 2 
                                       f32_3 %986 = OpFAdd %982 %985 
                                       f32_4 %987 = OpLoad %977 
                                       f32_4 %988 = OpVectorShuffle %987 %986 4 5 6 3 
                                                      OpStore %977 %988 
                                 Output f32* %990 = OpAccessChain %977 %116 
                                                      OpStore %990 %133 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(4) uniform  sampler2D _posTex;
UNITY_LOCATION(5) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat13;
float u_xlat18;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat6 = float(_numOfFrames);
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat6;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat0.x = u_xlat6 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    gl_Position = u_xlat3;
    vs_TEXCOORD4 = u_xlat3.z;
    vs_TEXCOORD5.zw = u_xlat3.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4.x = floor(u_xlat1.y);
    u_xlat4.y = (-u_xlat4.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat4.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat13 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat4.zw = (-vec2(u_xlat13)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat13 = sqrt(u_xlat4.z);
    u_xlat4.xy = u_xlat1.xy * vec2(u_xlat13);
    u_xlat1.xyz = max(u_xlat4.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    u_xlat1 = (-u_xlat2.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat0.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat1 * u_xlat1 + u_xlat4;
    u_xlat1 = u_xlat1 * u_xlat0.xxxx + u_xlat5;
    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat2 * u_xlat1;
    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat18 = u_xlat0.y * u_xlat0.y;
    u_xlat18 = u_xlat0.x * u_xlat0.x + (-u_xlat18);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat2);
    u_xlat0.y = dot(unity_SHBg, u_xlat2);
    u_xlat0.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0.x * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
float u_xlat41;
float u_xlat42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat41 + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat41 = (-u_xlat4.x) + 1.0;
    u_xlat40 = u_xlat40 * u_xlat41 + u_xlat4.x;
    u_xlat41 = (-_Glossiness) + 1.0;
    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat42 = u_xlat42 + u_xlat42;
    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat40) * _LightColor0.xyz;
    u_xlat6.xyz = vs_TEXCOORD1.xyz;
    u_xlat6.w = 1.0;
    u_xlat7.x = dot(unity_SHAr, u_xlat6);
    u_xlat7.y = dot(unity_SHAg, u_xlat6);
    u_xlat7.z = dot(unity_SHAb, u_xlat6);
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = inversesqrt(u_xlat40);
        u_xlat7.xyz = vec3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat40 = u_xlat40 * u_xlat41;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat40);
    u_xlat42 = u_xlat7.w + -1.0;
    u_xlat42 = unity_SpecCube0_HDR.w * u_xlat42 + 1.0;
    u_xlat42 = log2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        }
        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat40);
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = unity_SpecCube1_HDR.w * u_xlat40 + 1.0;
        u_xlat40 = log2(u_xlat40);
        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.y;
        u_xlat40 = exp2(u_xlat40);
        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40);
        u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz + (-u_xlat4.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
    }
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat4.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat7.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat40 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat42 = u_xlat27 * u_xlat27;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat27 = u_xlat27 * u_xlat42;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat42 = abs(u_xlat39) * u_xlat41 + u_xlat26;
    u_xlat41 = u_xlat1.x * u_xlat41 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = u_xlat1.x * u_xlat42 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat42 = u_xlat14 * u_xlat41 + (-u_xlat14);
    u_xlat14 = u_xlat42 * u_xlat14 + 1.0;
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat13.z = u_xlat39 * 3.14159274;
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat39 = max(u_xlat13.z, 0.0);
    u_xlat26 = u_xlat26 * u_xlat26 + 1.0;
    u_xlat26 = float(1.0) / u_xlat26;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat5.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat6.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat1.xyw = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat7.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat2.xyz * _Color.xyz + u_xlat0.xyz;
    u_xlat39 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 601
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %69 %160 %237 %242 %246 %252 %253 %397 %400 %566 %595 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpMemberDecorate %18 17 Offset 18 
                                                      OpMemberDecorate %18 18 Offset 18 
                                                      OpMemberDecorate %18 19 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %69 Location 69 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %160 Location 160 
                                                      OpMemberDecorate %235 0 BuiltIn 235 
                                                      OpMemberDecorate %235 1 BuiltIn 235 
                                                      OpMemberDecorate %235 2 BuiltIn 235 
                                                      OpDecorate %235 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 242 
                                                      OpDecorate vs_TEXCOORD5 Location 246 
                                                      OpDecorate vs_TEXCOORD0 Location 252 
                                                      OpDecorate %253 Location 253 
                                                      OpDecorate vs_TEXCOORD1 Location 397 
                                                      OpDecorate vs_TEXCOORD2 Location 400 
                                                      OpDecorate vs_TEXCOORD3 Location 566 
                                                      OpDecorate vs_TEXCOORD6 Location 595 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeInt 32 1 
                                              %18 = OpTypeStruct %7 %7 %7 %7 %7 %7 %12 %7 %7 %7 %7 %14 %15 %16 %6 %6 %6 %6 %17 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %20 = OpVariable Uniform 
                                          i32 %21 = OpConstant 0 
                                          u32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %6 
                                          i32 %27 = OpConstant 17 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                 Private f32* %38 = OpVariable Private 
                                          i32 %39 = OpConstant 18 
                                              %40 = OpTypePointer Uniform %17 
                                          f32 %58 = OpConstant 3.674022E-40 
                                              %68 = OpTypePointer Input %7 
                                 Input f32_4* %69 = OpVariable Input 
                                              %70 = OpTypePointer Input %6 
                               Private f32_4* %78 = OpVariable Private 
                                              %79 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %80 = OpTypePointer UniformConstant %79 
         UniformConstant read_only Texture2D* %81 = OpVariable UniformConstant 
                                              %83 = OpTypeSampler 
                                              %84 = OpTypePointer UniformConstant %83 
                     UniformConstant sampler* %85 = OpVariable UniformConstant 
                                              %87 = OpTypeSampledImage %79 
                                              %89 = OpTypeVector %6 2 
                                          f32 %92 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %94 = OpVariable UniformConstant 
                     UniformConstant sampler* %96 = OpVariable UniformConstant 
                                             %102 = OpTypeVector %6 3 
                                         f32 %108 = OpConstant 3.674022E-40 
                                       f32_3 %109 = OpConstantComposite %108 %108 %108 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_3 %112 = OpConstantComposite %111 %111 %111 
                              Private f32_4* %116 = OpVariable Private 
                                         i32 %117 = OpConstant 16 
                                         i32 %121 = OpConstant 15 
                                         f32 %147 = OpConstant 3.674022E-40 
                                         f32 %148 = OpConstant 3.674022E-40 
                                       f32_2 %149 = OpConstantComposite %147 %148 
                                         u32 %156 = OpConstant 3 
                                Input f32_4* %160 = OpVariable Input 
                              Private f32_4* %166 = OpVariable Private 
                                         i32 %169 = OpConstant 11 
                                         i32 %170 = OpConstant 1 
                                             %171 = OpTypePointer Uniform %7 
                                         i32 %182 = OpConstant 2 
                                         i32 %191 = OpConstant 3 
                              Private f32_4* %206 = OpVariable Private 
                                         i32 %209 = OpConstant 13 
                                             %234 = OpTypeArray %6 %22 
                                             %235 = OpTypeStruct %7 %6 %234 
                                             %236 = OpTypePointer Output %235 
        Output struct {f32_4; f32; f32[1];}* %237 = OpVariable Output 
                                             %239 = OpTypePointer Output %7 
                                             %241 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %243 = OpConstant 2 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %251 = OpTypePointer Output %89 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %253 = OpVariable Input 
                                         i32 %256 = OpConstant 19 
                                         f32 %279 = OpConstant 3.674022E-40 
                                       f32_2 %280 = OpConstantComposite %279 %279 
                                         f32 %282 = OpConstant 3.674022E-40 
                                       f32_2 %283 = OpConstantComposite %282 %282 
                                Private f32* %287 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         f32 %297 = OpConstant 3.674022E-40 
                                       f32_2 %298 = OpConstantComposite %296 %297 
                                       f32_2 %300 = OpConstantComposite %58 %58 
                                       f32_3 %321 = OpConstantComposite %58 %58 %58 
                                             %333 = OpTypeBool 
                                             %334 = OpTypePointer Private %333 
                               Private bool* %335 = OpVariable Private 
                                       f32_4 %336 = OpConstantComposite %92 %92 %92 %92 
                                         i32 %337 = OpConstant 14 
                                             %341 = OpTypeVector %333 4 
                                             %345 = OpTypePointer Function %102 
                                         i32 %359 = OpConstant 12 
                                             %396 = OpTypePointer Output %102 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %418 = OpConstant 4 
                              Private f32_4* %422 = OpVariable Private 
                                         f32 %453 = OpConstant 3.674022E-40 
                                       f32_4 %454 = OpConstantComposite %453 %453 %453 %453 
                                         i32 %459 = OpConstant 5 
                                       f32_4 %463 = OpConstantComposite %58 %58 %58 %58 
                                         i32 %477 = OpConstant 6 
                                Private f32* %517 = OpVariable Private 
                                         i32 %536 = OpConstant 7 
                                         i32 %542 = OpConstant 8 
                                         i32 %548 = OpConstant 9 
                                         i32 %554 = OpConstant 10 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                       f32_2 %580 = OpConstantComposite %297 %297 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %346 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %20 %21 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                 Uniform f32* %28 = OpAccessChain %20 %27 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %26 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 10 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                 Uniform i32* %41 = OpAccessChain %20 %39 
                                          i32 %42 = OpLoad %41 
                                          f32 %43 = OpConvertSToF %42 
                                                      OpStore %38 %43 
                                          f32 %44 = OpLoad %38 
                                 Private f32* %45 = OpAccessChain %9 %31 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Private f32* %48 = OpAccessChain %9 %31 
                                                      OpStore %48 %47 
                                 Private f32* %49 = OpAccessChain %9 %31 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpExtInst %1 9 %50 
                                 Private f32* %52 = OpAccessChain %9 %31 
                                                      OpStore %52 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpLoad %38 
                                          f32 %56 = OpFDiv %54 %55 
                                 Private f32* %57 = OpAccessChain %9 %31 
                                                      OpStore %57 %56 
                                          f32 %59 = OpLoad %38 
                                          f32 %60 = OpFDiv %58 %59 
                                                      OpStore %38 %60 
                                          f32 %61 = OpLoad %38 
                                 Private f32* %62 = OpAccessChain %9 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %9 %31 
                                          f32 %67 = OpLoad %66 
                                   Input f32* %71 = OpAccessChain %69 %22 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %67 %72 
                                 Private f32* %74 = OpAccessChain %9 %22 
                                                      OpStore %74 %73 
                                   Input f32* %75 = OpAccessChain %69 %31 
                                          f32 %76 = OpLoad %75 
                                 Private f32* %77 = OpAccessChain %9 %31 
                                                      OpStore %77 %76 
                          read_only Texture2D %82 = OpLoad %81 
                                      sampler %86 = OpLoad %85 
                   read_only Texture2DSampled %88 = OpSampledImage %82 %86 
                                        f32_4 %90 = OpLoad %9 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                                        f32_4 %93 = OpImageSampleExplicitLod %88 %91 Lod %7 
                                                      OpStore %78 %93 
                          read_only Texture2D %95 = OpLoad %94 
                                      sampler %97 = OpLoad %96 
                   read_only Texture2DSampled %98 = OpSampledImage %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_4 %101 = OpImageSampleExplicitLod %98 %100 Lod %7 
                                       f32_3 %103 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %9 %105 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 2 1 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                Uniform f32* %118 = OpAccessChain %20 %117 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFNegate %119 
                                Uniform f32* %122 = OpAccessChain %20 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                Private f32* %125 = OpAccessChain %116 %31 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %78 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_4 %128 = OpLoad %116 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 0 0 
                                       f32_3 %130 = OpFMul %127 %129 
                                Uniform f32* %131 = OpAccessChain %20 %117 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %20 %117 
                                         f32 %134 = OpLoad %133 
                                Uniform f32* %135 = OpAccessChain %20 %117 
                                         f32 %136 = OpLoad %135 
                                       f32_3 %137 = OpCompositeConstruct %132 %134 %136 
                                         f32 %138 = OpCompositeExtract %137 0 
                                         f32 %139 = OpCompositeExtract %137 1 
                                         f32 %140 = OpCompositeExtract %137 2 
                                       f32_3 %141 = OpCompositeConstruct %138 %139 %140 
                                       f32_3 %142 = OpFAdd %130 %141 
                                       f32_4 %143 = OpLoad %116 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %116 %144 
                                       f32_4 %145 = OpLoad %78 
                                       f32_2 %146 = OpVectorShuffle %145 %145 3 3 
                                       f32_2 %150 = OpFMul %146 %149 
                                       f32_4 %151 = OpLoad %78 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 2 3 
                                                      OpStore %78 %152 
                                Private f32* %153 = OpAccessChain %116 %31 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                Private f32* %157 = OpAccessChain %116 %156 
                                                      OpStore %157 %155 
                                       f32_4 %158 = OpLoad %116 
                                       f32_3 %159 = OpVectorShuffle %158 %158 3 2 1 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %116 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %116 %165 
                                       f32_4 %167 = OpLoad %116 
                                       f32_4 %168 = OpVectorShuffle %167 %167 1 1 1 1 
                              Uniform f32_4* %172 = OpAccessChain %20 %169 %170 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpFMul %168 %173 
                                                      OpStore %166 %174 
                              Uniform f32_4* %175 = OpAccessChain %20 %169 %21 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpLoad %116 
                                       f32_4 %178 = OpVectorShuffle %177 %177 0 0 0 0 
                                       f32_4 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %166 
                                       f32_4 %181 = OpFAdd %179 %180 
                                                      OpStore %166 %181 
                              Uniform f32_4* %183 = OpAccessChain %20 %169 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpLoad %116 
                                       f32_4 %186 = OpVectorShuffle %185 %185 2 2 2 2 
                                       f32_4 %187 = OpFMul %184 %186 
                                       f32_4 %188 = OpLoad %166 
                                       f32_4 %189 = OpFAdd %187 %188 
                                                      OpStore %116 %189 
                                       f32_4 %190 = OpLoad %116 
                              Uniform f32_4* %192 = OpAccessChain %20 %169 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpFAdd %190 %193 
                                                      OpStore %166 %194 
                              Uniform f32_4* %195 = OpAccessChain %20 %169 %191 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %160 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %116 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %116 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %116 %205 
                                       f32_4 %207 = OpLoad %166 
                                       f32_4 %208 = OpVectorShuffle %207 %207 1 1 1 1 
                              Uniform f32_4* %210 = OpAccessChain %20 %209 %170 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpFMul %208 %211 
                                                      OpStore %206 %212 
                              Uniform f32_4* %213 = OpAccessChain %20 %209 %21 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %166 
                                       f32_4 %216 = OpVectorShuffle %215 %215 0 0 0 0 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %206 
                                       f32_4 %219 = OpFAdd %217 %218 
                                                      OpStore %206 %219 
                              Uniform f32_4* %220 = OpAccessChain %20 %209 %182 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpLoad %166 
                                       f32_4 %223 = OpVectorShuffle %222 %222 2 2 2 2 
                                       f32_4 %224 = OpFMul %221 %223 
                                       f32_4 %225 = OpLoad %206 
                                       f32_4 %226 = OpFAdd %224 %225 
                                                      OpStore %206 %226 
                              Uniform f32_4* %227 = OpAccessChain %20 %209 %191 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %166 
                                       f32_4 %230 = OpVectorShuffle %229 %229 3 3 3 3 
                                       f32_4 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %206 
                                       f32_4 %233 = OpFAdd %231 %232 
                                                      OpStore %166 %233 
                                       f32_4 %238 = OpLoad %166 
                               Output f32_4* %240 = OpAccessChain %237 %21 
                                                      OpStore %240 %238 
                                Private f32* %244 = OpAccessChain %166 %243 
                                         f32 %245 = OpLoad %244 
                                                      OpStore vs_TEXCOORD4 %245 
                                       f32_4 %247 = OpLoad %166 
                                       f32_2 %248 = OpVectorShuffle %247 %247 2 3 
                                       f32_4 %249 = OpLoad vs_TEXCOORD5 
                                       f32_4 %250 = OpVectorShuffle %249 %248 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %250 
                                       f32_4 %254 = OpLoad %253 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                              Uniform f32_4* %257 = OpAccessChain %20 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpFMul %255 %259 
                              Uniform f32_4* %261 = OpAccessChain %20 %256 
                                       f32_4 %262 = OpLoad %261 
                                       f32_2 %263 = OpVectorShuffle %262 %262 2 3 
                                       f32_2 %264 = OpFAdd %260 %263 
                                                      OpStore vs_TEXCOORD0 %264 
                                Private f32* %265 = OpAccessChain %78 %22 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpExtInst %1 8 %266 
                                Private f32* %268 = OpAccessChain %206 %31 
                                                      OpStore %268 %267 
                                Private f32* %269 = OpAccessChain %206 %31 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFNegate %270 
                                         f32 %272 = OpFMul %271 %148 
                                Private f32* %273 = OpAccessChain %78 %31 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFAdd %272 %274 
                                Private f32* %276 = OpAccessChain %206 %22 
                                                      OpStore %276 %275 
                                       f32_4 %277 = OpLoad %206 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                       f32_2 %281 = OpFMul %278 %280 
                                       f32_2 %284 = OpFAdd %281 %283 
                                       f32_4 %285 = OpLoad %78 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 2 3 
                                                      OpStore %78 %286 
                                       f32_4 %288 = OpLoad %78 
                                       f32_2 %289 = OpVectorShuffle %288 %288 0 1 
                                       f32_4 %290 = OpLoad %78 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 1 
                                         f32 %292 = OpDot %289 %291 
                                                      OpStore %287 %292 
                                         f32 %293 = OpLoad %287 
                                       f32_2 %294 = OpCompositeConstruct %293 %293 
                                       f32_2 %295 = OpFNegate %294 
                                       f32_2 %299 = OpFMul %295 %298 
                                       f32_2 %301 = OpFAdd %299 %300 
                                       f32_4 %302 = OpLoad %206 
                                       f32_4 %303 = OpVectorShuffle %302 %301 0 1 4 5 
                                                      OpStore %206 %303 
                                Private f32* %304 = OpAccessChain %206 %243 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpExtInst %1 31 %305 
                                                      OpStore %287 %306 
                                       f32_4 %307 = OpLoad %78 
                                       f32_2 %308 = OpVectorShuffle %307 %307 0 1 
                                         f32 %309 = OpLoad %287 
                                       f32_2 %310 = OpCompositeConstruct %309 %309 
                                       f32_2 %311 = OpFMul %308 %310 
                                       f32_4 %312 = OpLoad %206 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 2 3 
                                                      OpStore %206 %313 
                                       f32_4 %314 = OpLoad %206 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 3 
                                       f32_3 %316 = OpExtInst %1 40 %315 %112 
                                       f32_4 %317 = OpLoad %78 
                                       f32_4 %318 = OpVectorShuffle %317 %316 4 5 6 3 
                                                      OpStore %78 %318 
                                       f32_4 %319 = OpLoad %78 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %322 = OpExtInst %1 37 %320 %321 
                                       f32_4 %323 = OpLoad %78 
                                       f32_4 %324 = OpVectorShuffle %323 %322 4 5 6 3 
                                                      OpStore %78 %324 
                                Private f32* %325 = OpAccessChain %78 %31 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFNegate %326 
                                Private f32* %328 = OpAccessChain %78 %156 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %9 %31 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFNegate %330 
                                Private f32* %332 = OpAccessChain %9 %156 
                                                      OpStore %332 %331 
                                Uniform f32* %338 = OpAccessChain %20 %337 
                                         f32 %339 = OpLoad %338 
                                       f32_4 %340 = OpCompositeConstruct %339 %339 %339 %339 
                                      bool_4 %342 = OpFOrdNotEqual %336 %340 
                                        bool %343 = OpAny %342 
                                                      OpStore %335 %343 
                                        bool %344 = OpLoad %335 
                                                      OpSelectionMerge %348 None 
                                                      OpBranchConditional %344 %347 %351 
                                             %347 = OpLabel 
                                       f32_4 %349 = OpLoad %78 
                                       f32_3 %350 = OpVectorShuffle %349 %349 3 2 1 
                                                      OpStore %346 %350 
                                                      OpBranch %348 
                                             %351 = OpLabel 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 3 1 2 
                                                      OpStore %346 %353 
                                                      OpBranch %348 
                                             %348 = OpLabel 
                                       f32_3 %354 = OpLoad %346 
                                       f32_4 %355 = OpLoad %9 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                                      OpStore %9 %356 
                                       f32_4 %357 = OpLoad %9 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                              Uniform f32_4* %360 = OpAccessChain %20 %359 %21 
                                       f32_4 %361 = OpLoad %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                         f32 %363 = OpDot %358 %362 
                                Private f32* %364 = OpAccessChain %78 %31 
                                                      OpStore %364 %363 
                                       f32_4 %365 = OpLoad %9 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                              Uniform f32_4* %367 = OpAccessChain %20 %359 %170 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                         f32 %370 = OpDot %366 %369 
                                Private f32* %371 = OpAccessChain %78 %22 
                                                      OpStore %371 %370 
                                       f32_4 %372 = OpLoad %9 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                              Uniform f32_4* %374 = OpAccessChain %20 %359 %182 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                         f32 %377 = OpDot %373 %376 
                                Private f32* %378 = OpAccessChain %78 %243 
                                                      OpStore %378 %377 
                                       f32_4 %379 = OpLoad %78 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_4 %381 = OpLoad %78 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                         f32 %383 = OpDot %380 %382 
                                Private f32* %384 = OpAccessChain %9 %31 
                                                      OpStore %384 %383 
                                Private f32* %385 = OpAccessChain %9 %31 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpExtInst %1 32 %386 
                                Private f32* %388 = OpAccessChain %9 %31 
                                                      OpStore %388 %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 0 0 
                                       f32_4 %391 = OpLoad %78 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_3 %393 = OpFMul %390 %392 
                                       f32_4 %394 = OpLoad %9 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %9 %395 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                                      OpStore vs_TEXCOORD1 %399 
                                       f32_4 %401 = OpLoad %116 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                                      OpStore vs_TEXCOORD2 %402 
                                       f32_4 %403 = OpLoad %116 
                                       f32_4 %404 = OpVectorShuffle %403 %403 0 0 0 0 
                                       f32_4 %405 = OpFNegate %404 
                              Uniform f32_4* %406 = OpAccessChain %20 %182 
                                       f32_4 %407 = OpLoad %406 
                                       f32_4 %408 = OpFAdd %405 %407 
                                                      OpStore %78 %408 
                                       f32_4 %409 = OpLoad %116 
                                       f32_4 %410 = OpVectorShuffle %409 %409 1 1 1 1 
                                       f32_4 %411 = OpFNegate %410 
                              Uniform f32_4* %412 = OpAccessChain %20 %191 
                                       f32_4 %413 = OpLoad %412 
                                       f32_4 %414 = OpFAdd %411 %413 
                                                      OpStore %206 %414 
                                       f32_4 %415 = OpLoad %116 
                                       f32_4 %416 = OpVectorShuffle %415 %415 2 2 2 2 
                                       f32_4 %417 = OpFNegate %416 
                              Uniform f32_4* %419 = OpAccessChain %20 %418 
                                       f32_4 %420 = OpLoad %419 
                                       f32_4 %421 = OpFAdd %417 %420 
                                                      OpStore %116 %421 
                                       f32_4 %423 = OpLoad %9 
                                       f32_4 %424 = OpVectorShuffle %423 %423 1 1 1 1 
                                       f32_4 %425 = OpLoad %206 
                                       f32_4 %426 = OpFMul %424 %425 
                                                      OpStore %422 %426 
                                       f32_4 %427 = OpLoad %206 
                                       f32_4 %428 = OpLoad %206 
                                       f32_4 %429 = OpFMul %427 %428 
                                                      OpStore %206 %429 
                                       f32_4 %430 = OpLoad %78 
                                       f32_4 %431 = OpLoad %78 
                                       f32_4 %432 = OpFMul %430 %431 
                                       f32_4 %433 = OpLoad %206 
                                       f32_4 %434 = OpFAdd %432 %433 
                                                      OpStore %206 %434 
                                       f32_4 %435 = OpLoad %78 
                                       f32_4 %436 = OpLoad %9 
                                       f32_4 %437 = OpVectorShuffle %436 %436 0 0 0 0 
                                       f32_4 %438 = OpFMul %435 %437 
                                       f32_4 %439 = OpLoad %422 
                                       f32_4 %440 = OpFAdd %438 %439 
                                                      OpStore %78 %440 
                                       f32_4 %441 = OpLoad %116 
                                       f32_4 %442 = OpLoad %9 
                                       f32_4 %443 = OpVectorShuffle %442 %442 2 2 2 2 
                                       f32_4 %444 = OpFMul %441 %443 
                                       f32_4 %445 = OpLoad %78 
                                       f32_4 %446 = OpFAdd %444 %445 
                                                      OpStore %78 %446 
                                       f32_4 %447 = OpLoad %116 
                                       f32_4 %448 = OpLoad %116 
                                       f32_4 %449 = OpFMul %447 %448 
                                       f32_4 %450 = OpLoad %206 
                                       f32_4 %451 = OpFAdd %449 %450 
                                                      OpStore %116 %451 
                                       f32_4 %452 = OpLoad %116 
                                       f32_4 %455 = OpExtInst %1 40 %452 %454 
                                                      OpStore %116 %455 
                                       f32_4 %456 = OpLoad %116 
                                       f32_4 %457 = OpExtInst %1 32 %456 
                                                      OpStore %206 %457 
                                       f32_4 %458 = OpLoad %116 
                              Uniform f32_4* %460 = OpAccessChain %20 %459 
                                       f32_4 %461 = OpLoad %460 
                                       f32_4 %462 = OpFMul %458 %461 
                                       f32_4 %464 = OpFAdd %462 %463 
                                                      OpStore %116 %464 
                                       f32_4 %465 = OpLoad %116 
                                       f32_4 %466 = OpFDiv %463 %465 
                                                      OpStore %116 %466 
                                       f32_4 %467 = OpLoad %78 
                                       f32_4 %468 = OpLoad %206 
                                       f32_4 %469 = OpFMul %467 %468 
                                                      OpStore %78 %469 
                                       f32_4 %470 = OpLoad %78 
                                       f32_4 %471 = OpExtInst %1 40 %470 %336 
                                                      OpStore %78 %471 
                                       f32_4 %472 = OpLoad %116 
                                       f32_4 %473 = OpLoad %78 
                                       f32_4 %474 = OpFMul %472 %473 
                                                      OpStore %78 %474 
                                       f32_4 %475 = OpLoad %78 
                                       f32_3 %476 = OpVectorShuffle %475 %475 1 1 1 
                              Uniform f32_4* %478 = OpAccessChain %20 %477 %170 
                                       f32_4 %479 = OpLoad %478 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpFMul %476 %480 
                                       f32_4 %482 = OpLoad %116 
                                       f32_4 %483 = OpVectorShuffle %482 %481 4 5 6 3 
                                                      OpStore %116 %483 
                              Uniform f32_4* %484 = OpAccessChain %20 %477 %21 
                                       f32_4 %485 = OpLoad %484 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 1 2 
                                       f32_4 %487 = OpLoad %78 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 0 0 
                                       f32_3 %489 = OpFMul %486 %488 
                                       f32_4 %490 = OpLoad %116 
                                       f32_3 %491 = OpVectorShuffle %490 %490 0 1 2 
                                       f32_3 %492 = OpFAdd %489 %491 
                                       f32_4 %493 = OpLoad %116 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 5 6 3 
                                                      OpStore %116 %494 
                              Uniform f32_4* %495 = OpAccessChain %20 %477 %182 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 0 1 2 
                                       f32_4 %498 = OpLoad %78 
                                       f32_3 %499 = OpVectorShuffle %498 %498 2 2 2 
                                       f32_3 %500 = OpFMul %497 %499 
                                       f32_4 %501 = OpLoad %116 
                                       f32_3 %502 = OpVectorShuffle %501 %501 0 1 2 
                                       f32_3 %503 = OpFAdd %500 %502 
                                       f32_4 %504 = OpLoad %78 
                                       f32_4 %505 = OpVectorShuffle %504 %503 4 5 6 3 
                                                      OpStore %78 %505 
                              Uniform f32_4* %506 = OpAccessChain %20 %477 %191 
                                       f32_4 %507 = OpLoad %506 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_4 %509 = OpLoad %78 
                                       f32_3 %510 = OpVectorShuffle %509 %509 3 3 3 
                                       f32_3 %511 = OpFMul %508 %510 
                                       f32_4 %512 = OpLoad %78 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                       f32_3 %514 = OpFAdd %511 %513 
                                       f32_4 %515 = OpLoad %78 
                                       f32_4 %516 = OpVectorShuffle %515 %514 4 5 6 3 
                                                      OpStore %78 %516 
                                Private f32* %518 = OpAccessChain %9 %22 
                                         f32 %519 = OpLoad %518 
                                Private f32* %520 = OpAccessChain %9 %22 
                                         f32 %521 = OpLoad %520 
                                         f32 %522 = OpFMul %519 %521 
                                                      OpStore %517 %522 
                                Private f32* %523 = OpAccessChain %9 %31 
                                         f32 %524 = OpLoad %523 
                                Private f32* %525 = OpAccessChain %9 %31 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFMul %524 %526 
                                         f32 %528 = OpLoad %517 
                                         f32 %529 = OpFNegate %528 
                                         f32 %530 = OpFAdd %527 %529 
                                                      OpStore %517 %530 
                                       f32_4 %531 = OpLoad %9 
                                       f32_4 %532 = OpVectorShuffle %531 %531 1 2 2 0 
                                       f32_4 %533 = OpLoad %9 
                                       f32_4 %534 = OpVectorShuffle %533 %533 0 1 2 2 
                                       f32_4 %535 = OpFMul %532 %534 
                                                      OpStore %116 %535 
                              Uniform f32_4* %537 = OpAccessChain %20 %536 
                                       f32_4 %538 = OpLoad %537 
                                       f32_4 %539 = OpLoad %116 
                                         f32 %540 = OpDot %538 %539 
                                Private f32* %541 = OpAccessChain %9 %31 
                                                      OpStore %541 %540 
                              Uniform f32_4* %543 = OpAccessChain %20 %542 
                                       f32_4 %544 = OpLoad %543 
                                       f32_4 %545 = OpLoad %116 
                                         f32 %546 = OpDot %544 %545 
                                Private f32* %547 = OpAccessChain %9 %22 
                                                      OpStore %547 %546 
                              Uniform f32_4* %549 = OpAccessChain %20 %548 
                                       f32_4 %550 = OpLoad %549 
                                       f32_4 %551 = OpLoad %116 
                                         f32 %552 = OpDot %550 %551 
                                Private f32* %553 = OpAccessChain %9 %243 
                                                      OpStore %553 %552 
                              Uniform f32_4* %555 = OpAccessChain %20 %554 
                                       f32_4 %556 = OpLoad %555 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpLoad %517 
                                       f32_3 %559 = OpCompositeConstruct %558 %558 %558 
                                       f32_3 %560 = OpFMul %557 %559 
                                       f32_4 %561 = OpLoad %9 
                                       f32_3 %562 = OpVectorShuffle %561 %561 0 1 2 
                                       f32_3 %563 = OpFAdd %560 %562 
                                       f32_4 %564 = OpLoad %9 
                                       f32_4 %565 = OpVectorShuffle %564 %563 4 5 6 3 
                                                      OpStore %9 %565 
                                       f32_4 %567 = OpLoad %9 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 1 2 
                                       f32_4 %569 = OpLoad %78 
                                       f32_3 %570 = OpVectorShuffle %569 %569 0 1 2 
                                       f32_3 %571 = OpFAdd %568 %570 
                                                      OpStore vs_TEXCOORD3 %571 
                                Private f32* %572 = OpAccessChain %166 %22 
                                         f32 %573 = OpLoad %572 
                                Uniform f32* %574 = OpAccessChain %20 %170 %31 
                                         f32 %575 = OpLoad %574 
                                         f32 %576 = OpFMul %573 %575 
                                Private f32* %577 = OpAccessChain %9 %31 
                                                      OpStore %577 %576 
                                       f32_4 %578 = OpLoad %166 
                                       f32_2 %579 = OpVectorShuffle %578 %578 0 3 
                                       f32_2 %581 = OpFMul %579 %580 
                                       f32_4 %582 = OpLoad %78 
                                       f32_4 %583 = OpVectorShuffle %582 %581 4 1 5 3 
                                                      OpStore %78 %583 
                                Private f32* %584 = OpAccessChain %9 %31 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %585 %297 
                                Private f32* %587 = OpAccessChain %78 %156 
                                                      OpStore %587 %586 
                                       f32_4 %588 = OpLoad %78 
                                       f32_2 %589 = OpVectorShuffle %588 %588 2 2 
                                       f32_4 %590 = OpLoad %78 
                                       f32_2 %591 = OpVectorShuffle %590 %590 0 3 
                                       f32_2 %592 = OpFAdd %589 %591 
                                       f32_4 %593 = OpLoad vs_TEXCOORD5 
                                       f32_4 %594 = OpVectorShuffle %593 %592 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %594 
                                                      OpStore vs_TEXCOORD6 %336 
                                 Output f32* %596 = OpAccessChain %237 %21 %22 
                                         f32 %597 = OpLoad %596 
                                         f32 %598 = OpFNegate %597 
                                 Output f32* %599 = OpAccessChain %237 %21 %22 
                                                      OpStore %599 %598 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1034
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %60 %136 %170 %221 %984 %1019 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpMemberDecorate %18 11 Offset 18 
                                                      OpMemberDecorate %18 12 Offset 18 
                                                      OpMemberDecorate %18 13 Offset 18 
                                                      OpMemberDecorate %18 14 Offset 18 
                                                      OpMemberDecorate %18 15 Offset 18 
                                                      OpMemberDecorate %18 16 Offset 18 
                                                      OpMemberDecorate %18 17 Offset 18 
                                                      OpMemberDecorate %18 18 Offset 18 
                                                      OpMemberDecorate %18 19 Offset 18 
                                                      OpMemberDecorate %18 20 Offset 18 
                                                      OpMemberDecorate %18 21 Offset 18 
                                                      OpMemberDecorate %18 22 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate vs_TEXCOORD5 Location 136 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate vs_TEXCOORD3 Location 221 
                                                      OpDecorate %373 DescriptorSet 373 
                                                      OpDecorate %373 Binding 373 
                                                      OpDecorate %375 DescriptorSet 375 
                                                      OpDecorate %375 Binding 375 
                                                      OpDecorate %527 DescriptorSet 527 
                                                      OpDecorate %527 Binding 527 
                                                      OpDecorate vs_TEXCOORD4 Location 984 
                                                      OpDecorate %1019 Location 1019 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %17 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %10 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_4* %38 = OpVariable Private 
                                              %46 = OpTypePointer Private %10 
                               Private f32_3* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypePointer UniformConstant %48 
         UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampler 
                                              %53 = OpTypePointer UniformConstant %52 
                     UniformConstant sampler* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampledImage %48 
                                              %58 = OpTypeVector %6 2 
                                              %59 = OpTypePointer Input %58 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %64 = OpVariable Private 
                                          i32 %66 = OpConstant 22 
                                              %67 = OpTypePointer Uniform %7 
                               Private f32_4* %72 = OpVariable Private 
                                          i32 %73 = OpConstant 8 
                                          u32 %74 = OpConstant 2 
                                              %75 = OpTypePointer Uniform %6 
                                          u32 %78 = OpConstant 0 
                                          i32 %80 = OpConstant 1 
                                          u32 %83 = OpConstant 1 
                                          i32 %85 = OpConstant 2 
                                 Private f32* %89 = OpVariable Private 
                                          i32 %96 = OpConstant 7 
                                Private f32* %104 = OpVariable Private 
                                         u32 %116 = OpConstant 3 
                                         i32 %124 = OpConstant 6 
                                         f32 %132 = OpConstant 3.674022E-40 
                                         f32 %133 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                Private f32* %153 = OpVariable Private 
                                         i32 %162 = OpConstant 20 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %187 = OpVariable Private 
                                         i32 %190 = OpConstant 19 
                              Private f32_4* %195 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                         i32 %201 = OpConstant 3 
                                         i32 %207 = OpConstant 4 
                                         i32 %213 = OpConstant 5 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %228 = OpConstantComposite %132 %132 %132 
                                             %232 = OpTypeBool 
                                             %233 = OpTypePointer Private %232 
                               Private bool* %234 = OpVariable Private 
                                         i32 %235 = OpConstant 13 
                              Private f32_3* %256 = OpVariable Private 
                                         i32 %259 = OpConstant 11 
                              Private f32_3* %268 = OpVariable Private 
                                         i32 %271 = OpConstant 12 
                                             %280 = OpTypeVector %232 3 
                                             %281 = OpTypePointer Private %280 
                             Private bool_3* %282 = OpVariable Private 
                                       f32_4 %283 = OpConstantComposite %132 %132 %132 %132 
                                             %286 = OpTypeVector %232 4 
                                             %289 = OpTypePointer Function %10 
                                             %294 = OpTypePointer Function %6 
                                         f32 %361 = OpConstant 3.674022E-40 
                                         f32 %363 = OpConstant 3.674022E-40 
                                         f32 %369 = OpConstant 3.674022E-40 
                                             %371 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %372 = OpTypePointer UniformConstant %371 
      UniformConstant read_only TextureCube* %373 = OpVariable UniformConstant 
                    UniformConstant sampler* %375 = OpVariable UniformConstant 
                                             %377 = OpTypeSampledImage %371 
                                         f32 %385 = OpConstant 3.674022E-40 
                                         i32 %387 = OpConstant 14 
                               Private bool* %410 = OpVariable Private 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         i32 %418 = OpConstant 17 
                                Private f32* %425 = OpVariable Private 
                              Private f32_3* %438 = OpVariable Private 
                                         i32 %441 = OpConstant 15 
                              Private f32_3* %449 = OpVariable Private 
                                         i32 %452 = OpConstant 16 
                             Private bool_3* %460 = OpVariable Private 
      UniformConstant read_only TextureCube* %527 = OpVariable UniformConstant 
                                         i32 %538 = OpConstant 18 
                                         f32 %599 = OpConstant 3.674022E-40 
                                       f32_3 %600 = OpConstantComposite %599 %599 %599 
                                         i32 %604 = OpConstant 21 
                                         f32 %619 = OpConstant 3.674022E-40 
                                       f32_3 %620 = OpConstantComposite %619 %619 %619 
                                         f32 %627 = OpConstant 3.674022E-40 
                                         f32 %651 = OpConstant 3.674022E-40 
                                Private f32* %678 = OpVariable Private 
                              Private f32_3* %697 = OpVariable Private 
                                         f32 %712 = OpConstant 3.674022E-40 
                                Private f32* %715 = OpVariable Private 
                                Private f32* %720 = OpVariable Private 
                                         f32 %763 = OpConstant 3.674022E-40 
                                         f32 %791 = OpConstant 3.674022E-40 
                                         f32 %793 = OpConstant 3.674022E-40 
                                         f32 %810 = OpConstant 3.674022E-40 
                                         f32 %815 = OpConstant 3.674022E-40 
                                         f32 %833 = OpConstant 3.674022E-40 
                               Private bool* %849 = OpVariable Private 
                                       f32_3 %913 = OpConstantComposite %133 %133 %133 
                                             %983 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %999 = OpConstant 10 
                                        i32 %1010 = OpConstant 9 
                                            %1018 = OpTypePointer Output %7 
                              Output f32_4* %1019 = OpVariable Output 
                                            %1031 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %290 = OpVariable Function 
                               Function f32* %295 = OpVariable Function 
                               Function f32* %307 = OpVariable Function 
                               Function f32* %319 = OpVariable Function 
                             Function f32_3* %465 = OpVariable Function 
                               Function f32* %469 = OpVariable Function 
                               Function f32* %481 = OpVariable Function 
                               Function f32* %493 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %14 %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
                                                      OpStore %9 %28 
                                        f32_4 %31 = OpLoad %9 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                          f32 %35 = OpDot %32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                          f32 %37 = OpExtInst %1 32 %36 
                                                      OpStore %30 %37 
                                          f32 %39 = OpLoad %30 
                                        f32_3 %40 = OpCompositeConstruct %39 %39 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %38 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 6 3 
                                                      OpStore %38 %45 
                          read_only Texture2D %51 = OpLoad %50 
                                      sampler %55 = OpLoad %54 
                   read_only Texture2DSampled %57 = OpSampledImage %51 %55 
                                        f32_2 %61 = OpLoad vs_TEXCOORD0 
                                        f32_4 %62 = OpImageSampleImplicitLod %57 %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                                      OpStore %47 %63 
                                        f32_3 %65 = OpLoad %47 
                               Uniform f32_4* %68 = OpAccessChain %20 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                                      OpStore %64 %71 
                                 Uniform f32* %76 = OpAccessChain %20 %73 %22 %74 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %79 = OpAccessChain %72 %78 
                                                      OpStore %79 %77 
                                 Uniform f32* %81 = OpAccessChain %20 %73 %80 %74 
                                          f32 %82 = OpLoad %81 
                                 Private f32* %84 = OpAccessChain %72 %83 
                                                      OpStore %84 %82 
                                 Uniform f32* %86 = OpAccessChain %20 %73 %85 %74 
                                          f32 %87 = OpLoad %86 
                                 Private f32* %88 = OpAccessChain %72 %74 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %72 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                                      OpStore %89 %94 
                                        f32_3 %95 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %97 = OpAccessChain %20 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFNegate %99 
                                       f32_3 %101 = OpFAdd %95 %100 
                                       f32_4 %102 = OpLoad %72 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %72 %103 
                                       f32_4 %105 = OpLoad %72 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %106 %108 
                                                      OpStore %104 %109 
                                         f32 %110 = OpLoad %104 
                                         f32 %111 = OpExtInst %1 31 %110 
                                                      OpStore %104 %111 
                                         f32 %112 = OpLoad %89 
                                         f32 %113 = OpFNegate %112 
                                         f32 %114 = OpLoad %104 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %104 %115 
                                Uniform f32* %117 = OpAccessChain %20 %96 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpLoad %104 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %121 = OpLoad %89 
                                         f32 %122 = OpFAdd %120 %121 
                                                      OpStore %89 %122 
                                         f32 %123 = OpLoad %89 
                                Uniform f32* %125 = OpAccessChain %20 %124 %74 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFMul %123 %126 
                                Uniform f32* %128 = OpAccessChain %20 %124 %116 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFAdd %127 %129 
                                                      OpStore %89 %130 
                                         f32 %131 = OpLoad %89 
                                         f32 %134 = OpExtInst %1 43 %131 %132 %133 
                                                      OpStore %89 %134 
                                       f32_4 %137 = OpLoad vs_TEXCOORD5 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_4 %139 = OpLoad vs_TEXCOORD5 
                                       f32_2 %140 = OpVectorShuffle %139 %139 3 3 
                                       f32_2 %141 = OpFDiv %138 %140 
                                       f32_4 %142 = OpLoad %72 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore %72 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_4 %149 = OpLoad %72 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_4 %151 = OpImageSampleImplicitLod %148 %150 
                                         f32 %152 = OpCompositeExtract %151 0 
                                                      OpStore %104 %152 
                                         f32 %154 = OpLoad %104 
                                         f32 %155 = OpFNegate %154 
                                         f32 %156 = OpFAdd %155 %133 
                                                      OpStore %153 %156 
                                         f32 %157 = OpLoad %89 
                                         f32 %158 = OpLoad %153 
                                         f32 %159 = OpFMul %157 %158 
                                         f32 %160 = OpLoad %104 
                                         f32 %161 = OpFAdd %159 %160 
                                                      OpStore %89 %161 
                                Uniform f32* %163 = OpAccessChain %20 %162 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFNegate %164 
                                         f32 %166 = OpFAdd %165 %133 
                                                      OpStore %104 %166 
                                       f32_4 %167 = OpLoad %38 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFNegate %168 
                                       f32_3 %171 = OpLoad vs_TEXCOORD1 
                                         f32 %172 = OpDot %169 %171 
                                                      OpStore %153 %172 
                                         f32 %173 = OpLoad %153 
                                         f32 %174 = OpLoad %153 
                                         f32 %175 = OpFAdd %173 %174 
                                                      OpStore %153 %175 
                                       f32_3 %176 = OpLoad vs_TEXCOORD1 
                                         f32 %177 = OpLoad %153 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFMul %176 %179 
                                       f32_4 %181 = OpLoad %38 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFNegate %182 
                                       f32_3 %184 = OpFAdd %180 %183 
                                       f32_4 %185 = OpLoad %72 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %72 %186 
                                         f32 %188 = OpLoad %89 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                              Uniform f32_4* %191 = OpAccessChain %20 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %189 %193 
                                                      OpStore %187 %194 
                                       f32_3 %196 = OpLoad vs_TEXCOORD1 
                                       f32_4 %197 = OpLoad %195 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %195 %198 
                                Private f32* %199 = OpAccessChain %195 %116 
                                                      OpStore %199 %133 
                              Uniform f32_4* %202 = OpAccessChain %20 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpLoad %195 
                                         f32 %205 = OpDot %203 %204 
                                Private f32* %206 = OpAccessChain %200 %78 
                                                      OpStore %206 %205 
                              Uniform f32_4* %208 = OpAccessChain %20 %207 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %195 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %200 %83 
                                                      OpStore %212 %211 
                              Uniform f32_4* %214 = OpAccessChain %20 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %195 
                                         f32 %217 = OpDot %215 %216 
                                Private f32* %218 = OpAccessChain %200 %74 
                                                      OpStore %218 %217 
                                       f32_4 %219 = OpLoad %200 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %222 = OpLoad vs_TEXCOORD3 
                                       f32_3 %223 = OpFAdd %220 %222 
                                       f32_4 %224 = OpLoad %195 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %195 %225 
                                       f32_4 %226 = OpLoad %195 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %229 = OpExtInst %1 40 %227 %228 
                                       f32_4 %230 = OpLoad %195 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %195 %231 
                                Uniform f32* %236 = OpAccessChain %20 %235 %116 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdLessThan %132 %237 
                                                      OpStore %234 %238 
                                        bool %239 = OpLoad %234 
                                                      OpSelectionMerge %241 None 
                                                      OpBranchConditional %239 %240 %354 
                                             %240 = OpLabel 
                                       f32_4 %242 = OpLoad %72 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_4 %244 = OpLoad %72 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                         f32 %246 = OpDot %243 %245 
                                                      OpStore %89 %246 
                                         f32 %247 = OpLoad %89 
                                         f32 %248 = OpExtInst %1 32 %247 
                                                      OpStore %89 %248 
                                         f32 %249 = OpLoad %89 
                                       f32_3 %250 = OpCompositeConstruct %249 %249 %249 
                                       f32_4 %251 = OpLoad %72 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_4 %254 = OpLoad %200 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %200 %255 
                                       f32_3 %257 = OpLoad vs_TEXCOORD2 
                                       f32_3 %258 = OpFNegate %257 
                              Uniform f32_4* %260 = OpAccessChain %20 %259 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %258 %262 
                                                      OpStore %256 %263 
                                       f32_3 %264 = OpLoad %256 
                                       f32_4 %265 = OpLoad %200 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFDiv %264 %266 
                                                      OpStore %256 %267 
                                       f32_3 %269 = OpLoad vs_TEXCOORD2 
                                       f32_3 %270 = OpFNegate %269 
                              Uniform f32_4* %272 = OpAccessChain %20 %271 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpFAdd %270 %274 
                                                      OpStore %268 %275 
                                       f32_3 %276 = OpLoad %268 
                                       f32_4 %277 = OpLoad %200 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFDiv %276 %278 
                                                      OpStore %268 %279 
                                       f32_4 %284 = OpLoad %200 
                                       f32_4 %285 = OpVectorShuffle %284 %284 0 1 2 0 
                                      bool_4 %287 = OpFOrdLessThan %283 %285 
                                      bool_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                                      OpStore %282 %288 
                                       f32_3 %291 = OpLoad %256 
                                                      OpStore %290 %291 
                               Private bool* %292 = OpAccessChain %282 %78 
                                        bool %293 = OpLoad %292 
                                                      OpSelectionMerge %297 None 
                                                      OpBranchConditional %293 %296 %300 
                                             %296 = OpLabel 
                                Private f32* %298 = OpAccessChain %256 %78 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %295 %299 
                                                      OpBranch %297 
                                             %300 = OpLabel 
                                Private f32* %301 = OpAccessChain %268 %78 
                                         f32 %302 = OpLoad %301 
                                                      OpStore %295 %302 
                                                      OpBranch %297 
                                             %297 = OpLabel 
                                         f32 %303 = OpLoad %295 
                               Function f32* %304 = OpAccessChain %290 %78 
                                                      OpStore %304 %303 
                               Private bool* %305 = OpAccessChain %282 %83 
                                        bool %306 = OpLoad %305 
                                                      OpSelectionMerge %309 None 
                                                      OpBranchConditional %306 %308 %312 
                                             %308 = OpLabel 
                                Private f32* %310 = OpAccessChain %256 %83 
                                         f32 %311 = OpLoad %310 
                                                      OpStore %307 %311 
                                                      OpBranch %309 
                                             %312 = OpLabel 
                                Private f32* %313 = OpAccessChain %268 %83 
                                         f32 %314 = OpLoad %313 
                                                      OpStore %307 %314 
                                                      OpBranch %309 
                                             %309 = OpLabel 
                                         f32 %315 = OpLoad %307 
                               Function f32* %316 = OpAccessChain %290 %83 
                                                      OpStore %316 %315 
                               Private bool* %317 = OpAccessChain %282 %74 
                                        bool %318 = OpLoad %317 
                                                      OpSelectionMerge %321 None 
                                                      OpBranchConditional %318 %320 %324 
                                             %320 = OpLabel 
                                Private f32* %322 = OpAccessChain %256 %74 
                                         f32 %323 = OpLoad %322 
                                                      OpStore %319 %323 
                                                      OpBranch %321 
                                             %324 = OpLabel 
                                Private f32* %325 = OpAccessChain %268 %74 
                                         f32 %326 = OpLoad %325 
                                                      OpStore %319 %326 
                                                      OpBranch %321 
                                             %321 = OpLabel 
                                         f32 %327 = OpLoad %319 
                               Function f32* %328 = OpAccessChain %290 %74 
                                                      OpStore %328 %327 
                                       f32_3 %329 = OpLoad %290 
                                                      OpStore %256 %329 
                                Private f32* %330 = OpAccessChain %256 %83 
                                         f32 %331 = OpLoad %330 
                                Private f32* %332 = OpAccessChain %256 %78 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpExtInst %1 37 %331 %333 
                                                      OpStore %89 %334 
                                Private f32* %335 = OpAccessChain %256 %74 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpLoad %89 
                                         f32 %338 = OpExtInst %1 37 %336 %337 
                                                      OpStore %89 %338 
                                       f32_3 %339 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %340 = OpAccessChain %20 %235 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFNegate %342 
                                       f32_3 %344 = OpFAdd %339 %343 
                                                      OpStore %256 %344 
                                       f32_4 %345 = OpLoad %200 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                         f32 %347 = OpLoad %89 
                                       f32_3 %348 = OpCompositeConstruct %347 %347 %347 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_3 %350 = OpLoad %256 
                                       f32_3 %351 = OpFAdd %349 %350 
                                       f32_4 %352 = OpLoad %200 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %200 %353 
                                                      OpBranch %241 
                                             %354 = OpLabel 
                                       f32_4 %355 = OpLoad %72 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_4 %357 = OpLoad %200 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %200 %358 
                                                      OpBranch %241 
                                             %241 = OpLabel 
                                         f32 %359 = OpLoad %104 
                                         f32 %360 = OpFNegate %359 
                                         f32 %362 = OpFMul %360 %361 
                                         f32 %364 = OpFAdd %362 %363 
                                                      OpStore %89 %364 
                                         f32 %365 = OpLoad %89 
                                         f32 %366 = OpLoad %104 
                                         f32 %367 = OpFMul %365 %366 
                                                      OpStore %89 %367 
                                         f32 %368 = OpLoad %89 
                                         f32 %370 = OpFMul %368 %369 
                                                      OpStore %89 %370 
                       read_only TextureCube %374 = OpLoad %373 
                                     sampler %376 = OpLoad %375 
                read_only TextureCubeSampled %378 = OpSampledImage %374 %376 
                                       f32_4 %379 = OpLoad %200 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                         f32 %381 = OpLoad %89 
                                       f32_4 %382 = OpImageSampleExplicitLod %378 %380 Lod %7 
                                                      OpStore %200 %382 
                                Private f32* %383 = OpAccessChain %200 %116 
                                         f32 %384 = OpLoad %383 
                                         f32 %386 = OpFAdd %384 %385 
                                                      OpStore %153 %386 
                                Uniform f32* %388 = OpAccessChain %20 %387 %116 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpLoad %153 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %392 = OpFAdd %391 %133 
                                                      OpStore %153 %392 
                                         f32 %393 = OpLoad %153 
                                         f32 %394 = OpExtInst %1 30 %393 
                                                      OpStore %153 %394 
                                         f32 %395 = OpLoad %153 
                                Uniform f32* %396 = OpAccessChain %20 %387 %83 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %395 %397 
                                                      OpStore %153 %398 
                                         f32 %399 = OpLoad %153 
                                         f32 %400 = OpExtInst %1 29 %399 
                                                      OpStore %153 %400 
                                         f32 %401 = OpLoad %153 
                                Uniform f32* %402 = OpAccessChain %20 %387 %78 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                                      OpStore %153 %404 
                                       f32_4 %405 = OpLoad %200 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                         f32 %407 = OpLoad %153 
                                       f32_3 %408 = OpCompositeConstruct %407 %407 %407 
                                       f32_3 %409 = OpFMul %406 %408 
                                                      OpStore %256 %409 
                                Uniform f32* %411 = OpAccessChain %20 %271 %116 
                                         f32 %412 = OpLoad %411 
                                        bool %414 = OpFOrdLessThan %412 %413 
                                                      OpStore %410 %414 
                                        bool %415 = OpLoad %410 
                                                      OpSelectionMerge %417 None 
                                                      OpBranchConditional %415 %416 %417 
                                             %416 = OpLabel 
                                Uniform f32* %419 = OpAccessChain %20 %418 %116 
                                         f32 %420 = OpLoad %419 
                                        bool %421 = OpFOrdLessThan %132 %420 
                                                      OpStore %410 %421 
                                        bool %422 = OpLoad %410 
                                                      OpSelectionMerge %424 None 
                                                      OpBranchConditional %422 %423 %424 
                                             %423 = OpLabel 
                                       f32_4 %426 = OpLoad %72 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_4 %428 = OpLoad %72 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                         f32 %430 = OpDot %427 %429 
                                                      OpStore %425 %430 
                                         f32 %431 = OpLoad %425 
                                         f32 %432 = OpExtInst %1 32 %431 
                                                      OpStore %425 %432 
                                         f32 %433 = OpLoad %425 
                                       f32_3 %434 = OpCompositeConstruct %433 %433 %433 
                                       f32_4 %435 = OpLoad %72 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpFMul %434 %436 
                                                      OpStore %268 %437 
                                       f32_3 %439 = OpLoad vs_TEXCOORD2 
                                       f32_3 %440 = OpFNegate %439 
                              Uniform f32_4* %442 = OpAccessChain %20 %441 
                                       f32_4 %443 = OpLoad %442 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_3 %445 = OpFAdd %440 %444 
                                                      OpStore %438 %445 
                                       f32_3 %446 = OpLoad %438 
                                       f32_3 %447 = OpLoad %268 
                                       f32_3 %448 = OpFDiv %446 %447 
                                                      OpStore %438 %448 
                                       f32_3 %450 = OpLoad vs_TEXCOORD2 
                                       f32_3 %451 = OpFNegate %450 
                              Uniform f32_4* %453 = OpAccessChain %20 %452 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_3 %456 = OpFAdd %451 %455 
                                                      OpStore %449 %456 
                                       f32_3 %457 = OpLoad %449 
                                       f32_3 %458 = OpLoad %268 
                                       f32_3 %459 = OpFDiv %457 %458 
                                                      OpStore %449 %459 
                                       f32_3 %461 = OpLoad %268 
                                       f32_4 %462 = OpVectorShuffle %461 %461 0 1 2 0 
                                      bool_4 %463 = OpFOrdLessThan %283 %462 
                                      bool_3 %464 = OpVectorShuffle %463 %463 0 1 2 
                                                      OpStore %460 %464 
                                       f32_3 %466 = OpLoad %438 
                                                      OpStore %465 %466 
                               Private bool* %467 = OpAccessChain %460 %78 
                                        bool %468 = OpLoad %467 
                                                      OpSelectionMerge %471 None 
                                                      OpBranchConditional %468 %470 %474 
                                             %470 = OpLabel 
                                Private f32* %472 = OpAccessChain %438 %78 
                                         f32 %473 = OpLoad %472 
                                                      OpStore %469 %473 
                                                      OpBranch %471 
                                             %474 = OpLabel 
                                Private f32* %475 = OpAccessChain %449 %78 
                                         f32 %476 = OpLoad %475 
                                                      OpStore %469 %476 
                                                      OpBranch %471 
                                             %471 = OpLabel 
                                         f32 %477 = OpLoad %469 
                               Function f32* %478 = OpAccessChain %465 %78 
                                                      OpStore %478 %477 
                               Private bool* %479 = OpAccessChain %460 %83 
                                        bool %480 = OpLoad %479 
                                                      OpSelectionMerge %483 None 
                                                      OpBranchConditional %480 %482 %486 
                                             %482 = OpLabel 
                                Private f32* %484 = OpAccessChain %438 %83 
                                         f32 %485 = OpLoad %484 
                                                      OpStore %481 %485 
                                                      OpBranch %483 
                                             %486 = OpLabel 
                                Private f32* %487 = OpAccessChain %449 %83 
                                         f32 %488 = OpLoad %487 
                                                      OpStore %481 %488 
                                                      OpBranch %483 
                                             %483 = OpLabel 
                                         f32 %489 = OpLoad %481 
                               Function f32* %490 = OpAccessChain %465 %83 
                                                      OpStore %490 %489 
                               Private bool* %491 = OpAccessChain %460 %74 
                                        bool %492 = OpLoad %491 
                                                      OpSelectionMerge %495 None 
                                                      OpBranchConditional %492 %494 %498 
                                             %494 = OpLabel 
                                Private f32* %496 = OpAccessChain %438 %74 
                                         f32 %497 = OpLoad %496 
                                                      OpStore %493 %497 
                                                      OpBranch %495 
                                             %498 = OpLabel 
                                Private f32* %499 = OpAccessChain %449 %74 
                                         f32 %500 = OpLoad %499 
                                                      OpStore %493 %500 
                                                      OpBranch %495 
                                             %495 = OpLabel 
                                         f32 %501 = OpLoad %493 
                               Function f32* %502 = OpAccessChain %465 %74 
                                                      OpStore %502 %501 
                                       f32_3 %503 = OpLoad %465 
                                                      OpStore %438 %503 
                                Private f32* %504 = OpAccessChain %438 %83 
                                         f32 %505 = OpLoad %504 
                                Private f32* %506 = OpAccessChain %438 %78 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpExtInst %1 37 %505 %507 
                                                      OpStore %425 %508 
                                Private f32* %509 = OpAccessChain %438 %74 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpLoad %425 
                                         f32 %512 = OpExtInst %1 37 %510 %511 
                                                      OpStore %425 %512 
                                       f32_3 %513 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %514 = OpAccessChain %20 %418 
                                       f32_4 %515 = OpLoad %514 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFNegate %516 
                                       f32_3 %518 = OpFAdd %513 %517 
                                                      OpStore %438 %518 
                                       f32_3 %519 = OpLoad %268 
                                         f32 %520 = OpLoad %425 
                                       f32_3 %521 = OpCompositeConstruct %520 %520 %520 
                                       f32_3 %522 = OpFMul %519 %521 
                                       f32_3 %523 = OpLoad %438 
                                       f32_3 %524 = OpFAdd %522 %523 
                                       f32_4 %525 = OpLoad %72 
                                       f32_4 %526 = OpVectorShuffle %525 %524 4 5 6 3 
                                                      OpStore %72 %526 
                                                      OpBranch %424 
                                             %424 = OpLabel 
                       read_only TextureCube %528 = OpLoad %527 
                                     sampler %529 = OpLoad %375 
                read_only TextureCubeSampled %530 = OpSampledImage %528 %529 
                                       f32_4 %531 = OpLoad %72 
                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
                                         f32 %533 = OpLoad %89 
                                       f32_4 %534 = OpImageSampleExplicitLod %530 %532 Lod %7 
                                                      OpStore %72 %534 
                                Private f32* %535 = OpAccessChain %72 %116 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFAdd %536 %385 
                                                      OpStore %89 %537 
                                Uniform f32* %539 = OpAccessChain %20 %538 %116 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpLoad %89 
                                         f32 %542 = OpFMul %540 %541 
                                         f32 %543 = OpFAdd %542 %133 
                                                      OpStore %89 %543 
                                         f32 %544 = OpLoad %89 
                                         f32 %545 = OpExtInst %1 30 %544 
                                                      OpStore %89 %545 
                                         f32 %546 = OpLoad %89 
                                Uniform f32* %547 = OpAccessChain %20 %538 %83 
                                         f32 %548 = OpLoad %547 
                                         f32 %549 = OpFMul %546 %548 
                                                      OpStore %89 %549 
                                         f32 %550 = OpLoad %89 
                                         f32 %551 = OpExtInst %1 29 %550 
                                                      OpStore %89 %551 
                                         f32 %552 = OpLoad %89 
                                Uniform f32* %553 = OpAccessChain %20 %538 %78 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpFMul %552 %554 
                                                      OpStore %89 %555 
                                       f32_4 %556 = OpLoad %72 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpLoad %89 
                                       f32_3 %559 = OpCompositeConstruct %558 %558 %558 
                                       f32_3 %560 = OpFMul %557 %559 
                                       f32_4 %561 = OpLoad %72 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 5 6 3 
                                                      OpStore %72 %562 
                                         f32 %563 = OpLoad %153 
                                       f32_3 %564 = OpCompositeConstruct %563 %563 %563 
                                       f32_4 %565 = OpLoad %200 
                                       f32_3 %566 = OpVectorShuffle %565 %565 0 1 2 
                                       f32_3 %567 = OpFMul %564 %566 
                                       f32_4 %568 = OpLoad %72 
                                       f32_3 %569 = OpVectorShuffle %568 %568 0 1 2 
                                       f32_3 %570 = OpFNegate %569 
                                       f32_3 %571 = OpFAdd %567 %570 
                                       f32_4 %572 = OpLoad %200 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %200 %573 
                              Uniform f32_4* %574 = OpAccessChain %20 %271 
                                       f32_4 %575 = OpLoad %574 
                                       f32_3 %576 = OpVectorShuffle %575 %575 3 3 3 
                                       f32_4 %577 = OpLoad %200 
                                       f32_3 %578 = OpVectorShuffle %577 %577 0 1 2 
                                       f32_3 %579 = OpFMul %576 %578 
                                       f32_4 %580 = OpLoad %72 
                                       f32_3 %581 = OpVectorShuffle %580 %580 0 1 2 
                                       f32_3 %582 = OpFAdd %579 %581 
                                                      OpStore %256 %582 
                                                      OpBranch %417 
                                             %417 = OpLabel 
                                       f32_3 %583 = OpLoad vs_TEXCOORD1 
                                       f32_3 %584 = OpLoad vs_TEXCOORD1 
                                         f32 %585 = OpDot %583 %584 
                                                      OpStore %89 %585 
                                         f32 %586 = OpLoad %89 
                                         f32 %587 = OpExtInst %1 32 %586 
                                                      OpStore %89 %587 
                                         f32 %588 = OpLoad %89 
                                       f32_3 %589 = OpCompositeConstruct %588 %588 %588 
                                       f32_3 %590 = OpLoad vs_TEXCOORD1 
                                       f32_3 %591 = OpFMul %589 %590 
                                       f32_4 %592 = OpLoad %72 
                                       f32_4 %593 = OpVectorShuffle %592 %591 4 5 6 3 
                                                      OpStore %72 %593 
                                       f32_3 %594 = OpLoad %47 
                              Uniform f32_4* %595 = OpAccessChain %20 %66 
                                       f32_4 %596 = OpLoad %595 
                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
                                       f32_3 %598 = OpFMul %594 %597 
                                       f32_3 %601 = OpFAdd %598 %600 
                                       f32_4 %602 = OpLoad %200 
                                       f32_4 %603 = OpVectorShuffle %602 %601 4 5 6 3 
                                                      OpStore %200 %603 
                                Uniform f32* %605 = OpAccessChain %20 %604 
                                         f32 %606 = OpLoad %605 
                                Uniform f32* %607 = OpAccessChain %20 %604 
                                         f32 %608 = OpLoad %607 
                                Uniform f32* %609 = OpAccessChain %20 %604 
                                         f32 %610 = OpLoad %609 
                                       f32_3 %611 = OpCompositeConstruct %606 %608 %610 
                                         f32 %612 = OpCompositeExtract %611 0 
                                         f32 %613 = OpCompositeExtract %611 1 
                                         f32 %614 = OpCompositeExtract %611 2 
                                       f32_3 %615 = OpCompositeConstruct %612 %613 %614 
                                       f32_4 %616 = OpLoad %200 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                                       f32_3 %618 = OpFMul %615 %617 
                                       f32_3 %621 = OpFAdd %618 %620 
                                       f32_4 %622 = OpLoad %200 
                                       f32_4 %623 = OpVectorShuffle %622 %621 4 5 6 3 
                                                      OpStore %200 %623 
                                Uniform f32* %624 = OpAccessChain %20 %604 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpFNegate %625 
                                         f32 %628 = OpFMul %626 %627 
                                         f32 %629 = OpFAdd %628 %627 
                                                      OpStore %89 %629 
                                         f32 %630 = OpLoad %89 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpLoad %64 
                                       f32_3 %633 = OpFMul %631 %632 
                                                      OpStore %64 %633 
                                       f32_4 %634 = OpLoad %9 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                         f32 %636 = OpLoad %30 
                                       f32_3 %637 = OpCompositeConstruct %636 %636 %636 
                                       f32_3 %638 = OpFMul %635 %637 
                              Uniform f32_4* %639 = OpAccessChain %20 %85 
                                       f32_4 %640 = OpLoad %639 
                                       f32_3 %641 = OpVectorShuffle %640 %640 0 1 2 
                                       f32_3 %642 = OpFAdd %638 %641 
                                       f32_4 %643 = OpLoad %9 
                                       f32_4 %644 = OpVectorShuffle %643 %642 4 5 6 3 
                                                      OpStore %9 %644 
                                       f32_4 %645 = OpLoad %9 
                                       f32_3 %646 = OpVectorShuffle %645 %645 0 1 2 
                                       f32_4 %647 = OpLoad %9 
                                       f32_3 %648 = OpVectorShuffle %647 %647 0 1 2 
                                         f32 %649 = OpDot %646 %648 
                                                      OpStore %30 %649 
                                         f32 %650 = OpLoad %30 
                                         f32 %652 = OpExtInst %1 40 %650 %651 
                                                      OpStore %30 %652 
                                         f32 %653 = OpLoad %30 
                                         f32 %654 = OpExtInst %1 32 %653 
                                                      OpStore %30 %654 
                                         f32 %655 = OpLoad %30 
                                       f32_3 %656 = OpCompositeConstruct %655 %655 %655 
                                       f32_4 %657 = OpLoad %9 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                       f32_3 %659 = OpFMul %656 %658 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %659 4 5 6 3 
                                                      OpStore %9 %661 
                                       f32_4 %662 = OpLoad %72 
                                       f32_3 %663 = OpVectorShuffle %662 %662 0 1 2 
                                       f32_4 %664 = OpLoad %38 
                                       f32_3 %665 = OpVectorShuffle %664 %664 0 1 2 
                                         f32 %666 = OpDot %663 %665 
                                                      OpStore %30 %666 
                                       f32_4 %667 = OpLoad %72 
                                       f32_3 %668 = OpVectorShuffle %667 %667 0 1 2 
                              Uniform f32_4* %669 = OpAccessChain %20 %85 
                                       f32_4 %670 = OpLoad %669 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                         f32 %672 = OpDot %668 %671 
                                Private f32* %673 = OpAccessChain %38 %78 
                                                      OpStore %673 %672 
                                Private f32* %674 = OpAccessChain %38 %78 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpExtInst %1 43 %675 %132 %133 
                                Private f32* %677 = OpAccessChain %38 %78 
                                                      OpStore %677 %676 
                                       f32_4 %679 = OpLoad %72 
                                       f32_3 %680 = OpVectorShuffle %679 %679 0 1 2 
                                       f32_4 %681 = OpLoad %9 
                                       f32_3 %682 = OpVectorShuffle %681 %681 0 1 2 
                                         f32 %683 = OpDot %680 %682 
                                                      OpStore %678 %683 
                                         f32 %684 = OpLoad %678 
                                         f32 %685 = OpExtInst %1 43 %684 %132 %133 
                                                      OpStore %678 %685 
                              Uniform f32_4* %686 = OpAccessChain %20 %85 
                                       f32_4 %687 = OpLoad %686 
                                       f32_3 %688 = OpVectorShuffle %687 %687 0 1 2 
                                       f32_4 %689 = OpLoad %9 
                                       f32_3 %690 = OpVectorShuffle %689 %689 0 1 2 
                                         f32 %691 = OpDot %688 %690 
                                Private f32* %692 = OpAccessChain %9 %78 
                                                      OpStore %692 %691 
                                Private f32* %693 = OpAccessChain %9 %78 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpExtInst %1 43 %694 %132 %133 
                                Private f32* %696 = OpAccessChain %9 %78 
                                                      OpStore %696 %695 
                                Private f32* %698 = OpAccessChain %9 %78 
                                         f32 %699 = OpLoad %698 
                                Private f32* %700 = OpAccessChain %9 %78 
                                         f32 %701 = OpLoad %700 
                                         f32 %702 = OpFMul %699 %701 
                                Private f32* %703 = OpAccessChain %697 %78 
                                                      OpStore %703 %702 
                                       f32_3 %704 = OpLoad %697 
                                       f32_2 %705 = OpVectorShuffle %704 %704 0 0 
                                         f32 %706 = OpLoad %104 
                                       f32_2 %707 = OpCompositeConstruct %706 %706 
                                         f32 %708 = OpDot %705 %707 
                                Private f32* %709 = OpAccessChain %697 %78 
                                                      OpStore %709 %708 
                                Private f32* %710 = OpAccessChain %697 %78 
                                         f32 %711 = OpLoad %710 
                                         f32 %713 = OpFAdd %711 %712 
                                Private f32* %714 = OpAccessChain %697 %78 
                                                      OpStore %714 %713 
                                Private f32* %716 = OpAccessChain %38 %78 
                                         f32 %717 = OpLoad %716 
                                         f32 %718 = OpFNegate %717 
                                         f32 %719 = OpFAdd %718 %133 
                                                      OpStore %715 %719 
                                         f32 %721 = OpLoad %715 
                                         f32 %722 = OpLoad %715 
                                         f32 %723 = OpFMul %721 %722 
                                                      OpStore %720 %723 
                                         f32 %724 = OpLoad %720 
                                         f32 %725 = OpLoad %720 
                                         f32 %726 = OpFMul %724 %725 
                                                      OpStore %720 %726 
                                         f32 %727 = OpLoad %715 
                                         f32 %728 = OpLoad %720 
                                         f32 %729 = OpFMul %727 %728 
                                                      OpStore %715 %729 
                                Private f32* %730 = OpAccessChain %697 %78 
                                         f32 %731 = OpLoad %730 
                                         f32 %732 = OpLoad %715 
                                         f32 %733 = OpFMul %731 %732 
                                         f32 %734 = OpFAdd %733 %133 
                                                      OpStore %715 %734 
                                         f32 %735 = OpLoad %30 
                                         f32 %736 = OpExtInst %1 4 %735 
                                         f32 %737 = OpFNegate %736 
                                         f32 %738 = OpFAdd %737 %133 
                                                      OpStore %720 %738 
                                         f32 %739 = OpLoad %720 
                                         f32 %740 = OpLoad %720 
                                         f32 %741 = OpFMul %739 %740 
                                                      OpStore %153 %741 
                                         f32 %742 = OpLoad %153 
                                         f32 %743 = OpLoad %153 
                                         f32 %744 = OpFMul %742 %743 
                                                      OpStore %153 %744 
                                         f32 %745 = OpLoad %720 
                                         f32 %746 = OpLoad %153 
                                         f32 %747 = OpFMul %745 %746 
                                                      OpStore %720 %747 
                                Private f32* %748 = OpAccessChain %697 %78 
                                         f32 %749 = OpLoad %748 
                                         f32 %750 = OpLoad %720 
                                         f32 %751 = OpFMul %749 %750 
                                         f32 %752 = OpFAdd %751 %133 
                                Private f32* %753 = OpAccessChain %697 %78 
                                                      OpStore %753 %752 
                                Private f32* %754 = OpAccessChain %697 %78 
                                         f32 %755 = OpLoad %754 
                                         f32 %756 = OpLoad %715 
                                         f32 %757 = OpFMul %755 %756 
                                Private f32* %758 = OpAccessChain %697 %78 
                                                      OpStore %758 %757 
                                         f32 %759 = OpLoad %104 
                                         f32 %760 = OpLoad %104 
                                         f32 %761 = OpFMul %759 %760 
                                                      OpStore %715 %761 
                                         f32 %762 = OpLoad %715 
                                         f32 %764 = OpExtInst %1 40 %762 %763 
                                                      OpStore %715 %764 
                                         f32 %765 = OpLoad %715 
                                         f32 %766 = OpFNegate %765 
                                         f32 %767 = OpFAdd %766 %133 
                                                      OpStore %104 %767 
                                         f32 %768 = OpLoad %30 
                                         f32 %769 = OpExtInst %1 4 %768 
                                         f32 %770 = OpLoad %104 
                                         f32 %771 = OpFMul %769 %770 
                                         f32 %772 = OpLoad %715 
                                         f32 %773 = OpFAdd %771 %772 
                                                      OpStore %153 %773 
                                Private f32* %774 = OpAccessChain %38 %78 
                                         f32 %775 = OpLoad %774 
                                         f32 %776 = OpLoad %104 
                                         f32 %777 = OpFMul %775 %776 
                                         f32 %778 = OpLoad %715 
                                         f32 %779 = OpFAdd %777 %778 
                                                      OpStore %104 %779 
                                         f32 %780 = OpLoad %30 
                                         f32 %781 = OpExtInst %1 4 %780 
                                         f32 %782 = OpLoad %104 
                                         f32 %783 = OpFMul %781 %782 
                                                      OpStore %30 %783 
                                Private f32* %784 = OpAccessChain %38 %78 
                                         f32 %785 = OpLoad %784 
                                         f32 %786 = OpLoad %153 
                                         f32 %787 = OpFMul %785 %786 
                                         f32 %788 = OpLoad %30 
                                         f32 %789 = OpFAdd %787 %788 
                                                      OpStore %30 %789 
                                         f32 %790 = OpLoad %30 
                                         f32 %792 = OpFAdd %790 %791 
                                                      OpStore %30 %792 
                                         f32 %794 = OpLoad %30 
                                         f32 %795 = OpFDiv %793 %794 
                                                      OpStore %30 %795 
                                         f32 %796 = OpLoad %715 
                                         f32 %797 = OpLoad %715 
                                         f32 %798 = OpFMul %796 %797 
                                                      OpStore %104 %798 
                                         f32 %799 = OpLoad %678 
                                         f32 %800 = OpLoad %104 
                                         f32 %801 = OpFMul %799 %800 
                                         f32 %802 = OpLoad %678 
                                         f32 %803 = OpFNegate %802 
                                         f32 %804 = OpFAdd %801 %803 
                                                      OpStore %153 %804 
                                         f32 %805 = OpLoad %153 
                                         f32 %806 = OpLoad %678 
                                         f32 %807 = OpFMul %805 %806 
                                         f32 %808 = OpFAdd %807 %133 
                                                      OpStore %678 %808 
                                         f32 %809 = OpLoad %104 
                                         f32 %811 = OpFMul %809 %810 
                                                      OpStore %104 %811 
                                         f32 %812 = OpLoad %678 
                                         f32 %813 = OpLoad %678 
                                         f32 %814 = OpFMul %812 %813 
                                         f32 %816 = OpFAdd %814 %815 
                                                      OpStore %678 %816 
                                         f32 %817 = OpLoad %104 
                                         f32 %818 = OpLoad %678 
                                         f32 %819 = OpFDiv %817 %818 
                                                      OpStore %678 %819 
                                         f32 %820 = OpLoad %30 
                                         f32 %821 = OpLoad %678 
                                         f32 %822 = OpFMul %820 %821 
                                Private f32* %823 = OpAccessChain %697 %74 
                                                      OpStore %823 %822 
                                       f32_4 %824 = OpLoad %38 
                                       f32_2 %825 = OpVectorShuffle %824 %824 0 0 
                                       f32_3 %826 = OpLoad %697 
                                       f32_2 %827 = OpVectorShuffle %826 %826 0 2 
                                       f32_2 %828 = OpFMul %825 %827 
                                       f32_3 %829 = OpLoad %697 
                                       f32_3 %830 = OpVectorShuffle %829 %828 3 1 4 
                                                      OpStore %697 %830 
                                Private f32* %831 = OpAccessChain %697 %74 
                                         f32 %832 = OpLoad %831 
                                         f32 %834 = OpFMul %832 %833 
                                                      OpStore %30 %834 
                                         f32 %835 = OpLoad %30 
                                         f32 %836 = OpExtInst %1 40 %835 %132 
                                                      OpStore %30 %836 
                                         f32 %837 = OpLoad %715 
                                         f32 %838 = OpLoad %715 
                                         f32 %839 = OpFMul %837 %838 
                                         f32 %840 = OpFAdd %839 %133 
                                                      OpStore %715 %840 
                                         f32 %841 = OpLoad %715 
                                         f32 %842 = OpFDiv %133 %841 
                                                      OpStore %715 %842 
                                       f32_4 %843 = OpLoad %200 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 2 
                                       f32_4 %845 = OpLoad %200 
                                       f32_3 %846 = OpVectorShuffle %845 %845 0 1 2 
                                         f32 %847 = OpDot %844 %846 
                                Private f32* %848 = OpAccessChain %38 %78 
                                                      OpStore %848 %847 
                                Private f32* %850 = OpAccessChain %38 %78 
                                         f32 %851 = OpLoad %850 
                                        bool %852 = OpFOrdNotEqual %851 %132 
                                                      OpStore %849 %852 
                                        bool %853 = OpLoad %849 
                                         f32 %854 = OpSelect %853 %133 %132 
                                Private f32* %855 = OpAccessChain %38 %78 
                                                      OpStore %855 %854 
                                         f32 %856 = OpLoad %30 
                                Private f32* %857 = OpAccessChain %38 %78 
                                         f32 %858 = OpLoad %857 
                                         f32 %859 = OpFMul %856 %858 
                                                      OpStore %30 %859 
                                         f32 %860 = OpLoad %89 
                                         f32 %861 = OpFNegate %860 
                                Uniform f32* %862 = OpAccessChain %20 %162 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFAdd %861 %863 
                                Private f32* %865 = OpAccessChain %38 %78 
                                                      OpStore %865 %864 
                                Private f32* %866 = OpAccessChain %38 %78 
                                         f32 %867 = OpLoad %866 
                                         f32 %868 = OpFAdd %867 %133 
                                Private f32* %869 = OpAccessChain %38 %78 
                                                      OpStore %869 %868 
                                Private f32* %870 = OpAccessChain %38 %78 
                                         f32 %871 = OpLoad %870 
                                         f32 %872 = OpExtInst %1 43 %871 %132 %133 
                                Private f32* %873 = OpAccessChain %38 %78 
                                                      OpStore %873 %872 
                                       f32_3 %874 = OpLoad %187 
                                       f32_3 %875 = OpLoad %697 
                                       f32_3 %876 = OpVectorShuffle %875 %875 0 0 0 
                                       f32_3 %877 = OpFMul %874 %876 
                                       f32_4 %878 = OpLoad %195 
                                       f32_3 %879 = OpVectorShuffle %878 %878 0 1 2 
                                       f32_3 %880 = OpFAdd %877 %879 
                                       f32_4 %881 = OpLoad %72 
                                       f32_4 %882 = OpVectorShuffle %881 %880 4 5 6 3 
                                                      OpStore %72 %882 
                                       f32_3 %883 = OpLoad %187 
                                         f32 %884 = OpLoad %30 
                                       f32_3 %885 = OpCompositeConstruct %884 %884 %884 
                                       f32_3 %886 = OpFMul %883 %885 
                                                      OpStore %187 %886 
                                Private f32* %887 = OpAccessChain %9 %78 
                                         f32 %888 = OpLoad %887 
                                         f32 %889 = OpFNegate %888 
                                         f32 %890 = OpFAdd %889 %133 
                                Private f32* %891 = OpAccessChain %9 %78 
                                                      OpStore %891 %890 
                                Private f32* %892 = OpAccessChain %9 %78 
                                         f32 %893 = OpLoad %892 
                                Private f32* %894 = OpAccessChain %9 %78 
                                         f32 %895 = OpLoad %894 
                                         f32 %896 = OpFMul %893 %895 
                                Private f32* %897 = OpAccessChain %697 %78 
                                                      OpStore %897 %896 
                                Private f32* %898 = OpAccessChain %697 %78 
                                         f32 %899 = OpLoad %898 
                                Private f32* %900 = OpAccessChain %697 %78 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFMul %899 %901 
                                Private f32* %903 = OpAccessChain %697 %78 
                                                      OpStore %903 %902 
                                Private f32* %904 = OpAccessChain %9 %78 
                                         f32 %905 = OpLoad %904 
                                Private f32* %906 = OpAccessChain %697 %78 
                                         f32 %907 = OpLoad %906 
                                         f32 %908 = OpFMul %905 %907 
                                Private f32* %909 = OpAccessChain %9 %78 
                                                      OpStore %909 %908 
                                       f32_4 %910 = OpLoad %200 
                                       f32_3 %911 = OpVectorShuffle %910 %910 0 1 2 
                                       f32_3 %912 = OpFNegate %911 
                                       f32_3 %914 = OpFAdd %912 %913 
                                       f32_4 %915 = OpLoad %195 
                                       f32_4 %916 = OpVectorShuffle %915 %914 4 5 6 3 
                                                      OpStore %195 %916 
                                       f32_4 %917 = OpLoad %195 
                                       f32_3 %918 = OpVectorShuffle %917 %917 0 1 2 
                                       f32_4 %919 = OpLoad %9 
                                       f32_3 %920 = OpVectorShuffle %919 %919 0 0 0 
                                       f32_3 %921 = OpFMul %918 %920 
                                       f32_4 %922 = OpLoad %200 
                                       f32_3 %923 = OpVectorShuffle %922 %922 0 1 2 
                                       f32_3 %924 = OpFAdd %921 %923 
                                       f32_4 %925 = OpLoad %9 
                                       f32_4 %926 = OpVectorShuffle %925 %924 4 5 2 6 
                                                      OpStore %9 %926 
                                       f32_4 %927 = OpLoad %9 
                                       f32_3 %928 = OpVectorShuffle %927 %927 0 1 3 
                                       f32_3 %929 = OpLoad %187 
                                       f32_3 %930 = OpFMul %928 %929 
                                       f32_4 %931 = OpLoad %9 
                                       f32_4 %932 = OpVectorShuffle %931 %930 4 5 2 6 
                                                      OpStore %9 %932 
                                       f32_3 %933 = OpLoad %64 
                                       f32_4 %934 = OpLoad %72 
                                       f32_3 %935 = OpVectorShuffle %934 %934 0 1 2 
                                       f32_3 %936 = OpFMul %933 %935 
                                       f32_4 %937 = OpLoad %9 
                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 3 
                                       f32_3 %939 = OpFAdd %936 %938 
                                       f32_4 %940 = OpLoad %9 
                                       f32_4 %941 = OpVectorShuffle %940 %939 4 5 2 6 
                                                      OpStore %9 %941 
                                       f32_3 %942 = OpLoad %256 
                                         f32 %943 = OpLoad %715 
                                       f32_3 %944 = OpCompositeConstruct %943 %943 %943 
                                       f32_3 %945 = OpFMul %942 %944 
                                                      OpStore %64 %945 
                                       f32_4 %946 = OpLoad %200 
                                       f32_3 %947 = OpVectorShuffle %946 %946 0 1 2 
                                       f32_3 %948 = OpFNegate %947 
                                       f32_4 %949 = OpLoad %38 
                                       f32_3 %950 = OpVectorShuffle %949 %949 0 0 0 
                                       f32_3 %951 = OpFAdd %948 %950 
                                       f32_4 %952 = OpLoad %38 
                                       f32_4 %953 = OpVectorShuffle %952 %951 4 5 2 6 
                                                      OpStore %38 %953 
                                         f32 %954 = OpLoad %720 
                                       f32_3 %955 = OpCompositeConstruct %954 %954 %954 
                                       f32_4 %956 = OpLoad %38 
                                       f32_3 %957 = OpVectorShuffle %956 %956 0 1 3 
                                       f32_3 %958 = OpFMul %955 %957 
                                       f32_4 %959 = OpLoad %200 
                                       f32_3 %960 = OpVectorShuffle %959 %959 0 1 2 
                                       f32_3 %961 = OpFAdd %958 %960 
                                       f32_4 %962 = OpLoad %38 
                                       f32_4 %963 = OpVectorShuffle %962 %961 4 5 6 3 
                                                      OpStore %38 %963 
                                       f32_3 %964 = OpLoad %64 
                                       f32_4 %965 = OpLoad %38 
                                       f32_3 %966 = OpVectorShuffle %965 %965 0 1 2 
                                       f32_3 %967 = OpFMul %964 %966 
                                       f32_4 %968 = OpLoad %9 
                                       f32_3 %969 = OpVectorShuffle %968 %968 0 1 3 
                                       f32_3 %970 = OpFAdd %967 %969 
                                       f32_4 %971 = OpLoad %9 
                                       f32_4 %972 = OpVectorShuffle %971 %970 4 5 6 3 
                                                      OpStore %9 %972 
                                       f32_3 %973 = OpLoad %47 
                              Uniform f32_4* %974 = OpAccessChain %20 %66 
                                       f32_4 %975 = OpLoad %974 
                                       f32_3 %976 = OpVectorShuffle %975 %975 0 1 2 
                                       f32_3 %977 = OpFMul %973 %976 
                                       f32_4 %978 = OpLoad %9 
                                       f32_3 %979 = OpVectorShuffle %978 %978 0 1 2 
                                       f32_3 %980 = OpFAdd %977 %979 
                                       f32_4 %981 = OpLoad %9 
                                       f32_4 %982 = OpVectorShuffle %981 %980 4 5 6 3 
                                                      OpStore %9 %982 
                                         f32 %985 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %986 = OpAccessChain %20 %80 %83 
                                         f32 %987 = OpLoad %986 
                                         f32 %988 = OpFDiv %985 %987 
                                                      OpStore %30 %988 
                                         f32 %989 = OpLoad %30 
                                         f32 %990 = OpFNegate %989 
                                         f32 %991 = OpFAdd %990 %133 
                                                      OpStore %30 %991 
                                         f32 %992 = OpLoad %30 
                                Uniform f32* %993 = OpAccessChain %20 %80 %74 
                                         f32 %994 = OpLoad %993 
                                         f32 %995 = OpFMul %992 %994 
                                                      OpStore %30 %995 
                                         f32 %996 = OpLoad %30 
                                         f32 %997 = OpExtInst %1 40 %996 %132 
                                                      OpStore %30 %997 
                                         f32 %998 = OpLoad %30 
                               Uniform f32* %1000 = OpAccessChain %20 %999 %74 
                                        f32 %1001 = OpLoad %1000 
                                        f32 %1002 = OpFMul %998 %1001 
                               Uniform f32* %1003 = OpAccessChain %20 %999 %116 
                                        f32 %1004 = OpLoad %1003 
                                        f32 %1005 = OpFAdd %1002 %1004 
                                                      OpStore %30 %1005 
                                        f32 %1006 = OpLoad %30 
                                        f32 %1007 = OpExtInst %1 43 %1006 %132 %133 
                                                      OpStore %30 %1007 
                                      f32_4 %1008 = OpLoad %9 
                                      f32_3 %1009 = OpVectorShuffle %1008 %1008 0 1 2 
                             Uniform f32_4* %1011 = OpAccessChain %20 %1010 
                                      f32_4 %1012 = OpLoad %1011 
                                      f32_3 %1013 = OpVectorShuffle %1012 %1012 0 1 2 
                                      f32_3 %1014 = OpFNegate %1013 
                                      f32_3 %1015 = OpFAdd %1009 %1014 
                                      f32_4 %1016 = OpLoad %9 
                                      f32_4 %1017 = OpVectorShuffle %1016 %1015 4 5 6 3 
                                                      OpStore %9 %1017 
                                        f32 %1020 = OpLoad %30 
                                      f32_3 %1021 = OpCompositeConstruct %1020 %1020 %1020 
                                      f32_4 %1022 = OpLoad %9 
                                      f32_3 %1023 = OpVectorShuffle %1022 %1022 0 1 2 
                                      f32_3 %1024 = OpFMul %1021 %1023 
                             Uniform f32_4* %1025 = OpAccessChain %20 %1010 
                                      f32_4 %1026 = OpLoad %1025 
                                      f32_3 %1027 = OpVectorShuffle %1026 %1026 0 1 2 
                                      f32_3 %1028 = OpFAdd %1024 %1027 
                                      f32_4 %1029 = OpLoad %1019 
                                      f32_4 %1030 = OpVectorShuffle %1029 %1028 4 5 6 3 
                                                      OpStore %1019 %1030 
                                Output f32* %1032 = OpAccessChain %1019 %116 
                                                      OpStore %1032 %133 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" }
  Blend One One, One One
  ZWrite Off
  GpuProgramID 129970
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(2) uniform  sampler2D _posTex;
UNITY_LOCATION(3) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat11;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5 = float(_numOfFrames);
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat5;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat0.x = u_xlat5 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat11)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat11 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat11);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat6 = (-_Glossiness) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat6;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat7.x = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat18 * u_xlat7.x + (-u_xlat18);
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat7.x = u_xlat7.x * 0.318309873;
    u_xlat18 = u_xlat7.x / u_xlat18;
    u_xlat7.x = (-u_xlat12) + 1.0;
    u_xlat13 = abs(u_xlat0.x) * u_xlat7.x + u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4 = texture(_LightTexture0, vec2(u_xlat18));
    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat12 = (-u_xlat19) + 1.0;
    u_xlat18 = u_xlat19 * u_xlat19;
    u_xlat6 = dot(vec2(u_xlat18), vec2(u_xlat6));
    u_xlat6 = u_xlat6 + -0.5;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat7.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat5.xyz;
    u_xlat12 = u_xlat0.x * u_xlat0.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x + 1.0;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat6 = u_xlat6 * u_xlat12 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat7.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 436
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %68 %159 %216 %227 %228 %365 %371 %419 %429 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %68 Location 68 
                                                      OpDecorate %80 DescriptorSet 80 
                                                      OpDecorate %80 Binding 80 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %95 DescriptorSet 95 
                                                      OpDecorate %95 Binding 95 
                                                      OpDecorate %159 Location 159 
                                                      OpMemberDecorate %214 0 BuiltIn 214 
                                                      OpMemberDecorate %214 1 BuiltIn 214 
                                                      OpMemberDecorate %214 2 BuiltIn 214 
                                                      OpDecorate %214 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 227 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate vs_TEXCOORD1 Location 365 
                                                      OpDecorate vs_TEXCOORD2 Location 371 
                                                      OpDecorate vs_TEXCOORD3 Location 419 
                                                      OpDecorate vs_TEXCOORD4 Location 429 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeArray %7 %11 
                                              %16 = OpTypeInt 32 1 
                                              %17 = OpTypeStruct %7 %12 %13 %14 %15 %6 %6 %6 %6 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %19 = OpVariable Uniform 
                                          i32 %20 = OpConstant 0 
                                          u32 %21 = OpConstant 1 
                                              %22 = OpTypePointer Uniform %6 
                                          i32 %26 = OpConstant 8 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %37 = OpVariable Private 
                                          i32 %38 = OpConstant 9 
                                              %39 = OpTypePointer Uniform %16 
                                          f32 %57 = OpConstant 3.674022E-40 
                                              %67 = OpTypePointer Input %7 
                                 Input f32_4* %68 = OpVariable Input 
                                              %69 = OpTypePointer Input %6 
                               Private f32_4* %77 = OpVariable Private 
                                              %78 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %79 = OpTypePointer UniformConstant %78 
         UniformConstant read_only Texture2D* %80 = OpVariable UniformConstant 
                                              %82 = OpTypeSampler 
                                              %83 = OpTypePointer UniformConstant %82 
                     UniformConstant sampler* %84 = OpVariable UniformConstant 
                                              %86 = OpTypeSampledImage %78 
                                              %88 = OpTypeVector %6 2 
                                          f32 %91 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %93 = OpVariable UniformConstant 
                     UniformConstant sampler* %95 = OpVariable UniformConstant 
                                             %101 = OpTypeVector %6 3 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_3 %108 = OpConstantComposite %107 %107 %107 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_3 %111 = OpConstantComposite %110 %110 %110 
                              Private f32_4* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 7 
                                         i32 %120 = OpConstant 6 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_2 %148 = OpConstantComposite %146 %147 
                                         u32 %155 = OpConstant 3 
                                Input f32_4* %159 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                              Private f32_4* %193 = OpVariable Private 
                                             %213 = OpTypeArray %6 %21 
                                             %214 = OpTypeStruct %7 %6 %213 
                                             %215 = OpTypePointer Output %214 
        Output struct {f32_4; f32; f32[1];}* %216 = OpVariable Output 
                                             %224 = OpTypePointer Output %7 
                                             %226 = OpTypePointer Output %88 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %228 = OpVariable Input 
                                         i32 %231 = OpConstant 10 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_2 %255 = OpConstantComposite %254 %254 
                                         f32 %257 = OpConstant 3.674022E-40 
                                       f32_2 %258 = OpConstantComposite %257 %257 
                                Private f32* %262 = OpVariable Private 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %272 = OpConstant 3.674022E-40 
                                       f32_2 %273 = OpConstantComposite %271 %272 
                                       f32_2 %275 = OpConstantComposite %57 %57 
                                         u32 %279 = OpConstant 2 
                                       f32_3 %297 = OpConstantComposite %57 %57 %57 
                                             %309 = OpTypeBool 
                                             %310 = OpTypePointer Private %309 
                               Private bool* %311 = OpVariable Private 
                                       f32_4 %312 = OpConstantComposite %91 %91 %91 %91 
                                         i32 %313 = OpConstant 5 
                                             %317 = OpTypeVector %309 4 
                                             %321 = OpTypePointer Function %101 
                                             %364 = OpTypePointer Output %101 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %390 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                             %430 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %322 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %19 %20 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpFNegate %24 
                                 Uniform f32* %27 = OpAccessChain %19 %26 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFMul %25 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %9 %30 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 10 %34 
                                 Private f32* %36 = OpAccessChain %9 %30 
                                                      OpStore %36 %35 
                                 Uniform i32* %40 = OpAccessChain %19 %38 
                                          i32 %41 = OpLoad %40 
                                          f32 %42 = OpConvertSToF %41 
                                                      OpStore %37 %42 
                                          f32 %43 = OpLoad %37 
                                 Private f32* %44 = OpAccessChain %9 %30 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Private f32* %47 = OpAccessChain %9 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 9 %49 
                                 Private f32* %51 = OpAccessChain %9 %30 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %9 %30 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %37 
                                          f32 %55 = OpFDiv %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %30 
                                                      OpStore %56 %55 
                                          f32 %58 = OpLoad %37 
                                          f32 %59 = OpFDiv %57 %58 
                                                      OpStore %37 %59 
                                          f32 %60 = OpLoad %37 
                                 Private f32* %61 = OpAccessChain %9 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %30 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %30 
                                          f32 %66 = OpLoad %65 
                                   Input f32* %70 = OpAccessChain %68 %21 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %66 %71 
                                 Private f32* %73 = OpAccessChain %9 %21 
                                                      OpStore %73 %72 
                                   Input f32* %74 = OpAccessChain %68 %30 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %30 
                                                      OpStore %76 %75 
                          read_only Texture2D %81 = OpLoad %80 
                                      sampler %85 = OpLoad %84 
                   read_only Texture2DSampled %87 = OpSampledImage %81 %85 
                                        f32_4 %89 = OpLoad %9 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                        f32_4 %92 = OpImageSampleExplicitLod %87 %90 Lod %7 
                                                      OpStore %77 %92 
                          read_only Texture2D %94 = OpLoad %93 
                                      sampler %96 = OpLoad %95 
                   read_only Texture2DSampled %97 = OpSampledImage %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_4 %100 = OpImageSampleExplicitLod %97 %99 Lod %7 
                                       f32_3 %102 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %9 %104 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 2 1 
                                       f32_3 %109 = OpFMul %106 %108 
                                       f32_3 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 6 3 
                                                      OpStore %9 %114 
                                Uniform f32* %117 = OpAccessChain %19 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Uniform f32* %121 = OpAccessChain %19 %120 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %119 %122 
                                Private f32* %124 = OpAccessChain %115 %30 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %115 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_3 %129 = OpFMul %126 %128 
                                Uniform f32* %130 = OpAccessChain %19 %116 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %132 = OpAccessChain %19 %116 
                                         f32 %133 = OpLoad %132 
                                Uniform f32* %134 = OpAccessChain %19 %116 
                                         f32 %135 = OpLoad %134 
                                       f32_3 %136 = OpCompositeConstruct %131 %133 %135 
                                         f32 %137 = OpCompositeExtract %136 0 
                                         f32 %138 = OpCompositeExtract %136 1 
                                         f32 %139 = OpCompositeExtract %136 2 
                                       f32_3 %140 = OpCompositeConstruct %137 %138 %139 
                                       f32_3 %141 = OpFAdd %129 %140 
                                       f32_4 %142 = OpLoad %115 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %115 %143 
                                       f32_4 %144 = OpLoad %77 
                                       f32_2 %145 = OpVectorShuffle %144 %144 3 3 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_4 %150 = OpLoad %77 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %77 %151 
                                Private f32* %152 = OpAccessChain %115 %30 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                Private f32* %156 = OpAccessChain %115 %155 
                                                      OpStore %156 %154 
                                       f32_4 %157 = OpLoad %115 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 2 1 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %158 %161 
                                       f32_4 %163 = OpLoad %115 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %115 %164 
                                       f32_4 %166 = OpLoad %115 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %19 %168 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %167 %171 
                                                      OpStore %165 %172 
                              Uniform f32_4* %173 = OpAccessChain %19 %168 %20 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %115 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %165 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %165 %179 
                              Uniform f32_4* %181 = OpAccessChain %19 %168 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %115 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %165 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %115 %187 
                                       f32_4 %188 = OpLoad %115 
                              Uniform f32_4* %190 = OpAccessChain %19 %168 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %165 %192 
                                       f32_4 %194 = OpLoad %165 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %19 %189 %168 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFMul %195 %197 
                                                      OpStore %193 %198 
                              Uniform f32_4* %199 = OpAccessChain %19 %189 %20 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %165 
                                       f32_4 %202 = OpVectorShuffle %201 %201 0 0 0 0 
                                       f32_4 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %193 
                                       f32_4 %205 = OpFAdd %203 %204 
                                                      OpStore %193 %205 
                              Uniform f32_4* %206 = OpAccessChain %19 %189 %180 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %165 
                                       f32_4 %209 = OpVectorShuffle %208 %208 2 2 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %193 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %193 %212 
                              Uniform f32_4* %217 = OpAccessChain %19 %189 %189 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %165 
                                       f32_4 %220 = OpVectorShuffle %219 %219 3 3 3 3 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %193 
                                       f32_4 %223 = OpFAdd %221 %222 
                               Output f32_4* %225 = OpAccessChain %216 %20 
                                                      OpStore %225 %223 
                                       f32_4 %229 = OpLoad %228 
                                       f32_2 %230 = OpVectorShuffle %229 %229 0 1 
                              Uniform f32_4* %232 = OpAccessChain %19 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_2 %234 = OpVectorShuffle %233 %233 0 1 
                                       f32_2 %235 = OpFMul %230 %234 
                              Uniform f32_4* %236 = OpAccessChain %19 %231 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 2 3 
                                       f32_2 %239 = OpFAdd %235 %238 
                                                      OpStore vs_TEXCOORD0 %239 
                                Private f32* %240 = OpAccessChain %77 %21 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 8 %241 
                                Private f32* %243 = OpAccessChain %165 %30 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %165 %30 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFNegate %245 
                                         f32 %247 = OpFMul %246 %147 
                                Private f32* %248 = OpAccessChain %77 %30 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %247 %249 
                                Private f32* %251 = OpAccessChain %165 %21 
                                                      OpStore %251 %250 
                                       f32_4 %252 = OpLoad %165 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %256 = OpFMul %253 %255 
                                       f32_2 %259 = OpFAdd %256 %258 
                                       f32_4 %260 = OpLoad %77 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 2 3 
                                                      OpStore %77 %261 
                                       f32_4 %263 = OpLoad %77 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                       f32_4 %265 = OpLoad %77 
                                       f32_2 %266 = OpVectorShuffle %265 %265 0 1 
                                         f32 %267 = OpDot %264 %266 
                                                      OpStore %262 %267 
                                         f32 %268 = OpLoad %262 
                                       f32_2 %269 = OpCompositeConstruct %268 %268 
                                       f32_2 %270 = OpFNegate %269 
                                       f32_2 %274 = OpFMul %270 %273 
                                       f32_2 %276 = OpFAdd %274 %275 
                                       f32_4 %277 = OpLoad %165 
                                       f32_4 %278 = OpVectorShuffle %277 %276 0 1 4 5 
                                                      OpStore %165 %278 
                                Private f32* %280 = OpAccessChain %165 %279 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 31 %281 
                                                      OpStore %262 %282 
                                       f32_4 %283 = OpLoad %77 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                         f32 %285 = OpLoad %262 
                                       f32_2 %286 = OpCompositeConstruct %285 %285 
                                       f32_2 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %165 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 2 3 
                                                      OpStore %165 %289 
                                       f32_4 %290 = OpLoad %165 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 3 
                                       f32_3 %292 = OpExtInst %1 40 %291 %111 
                                       f32_4 %293 = OpLoad %77 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %77 %294 
                                       f32_4 %295 = OpLoad %77 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %298 = OpExtInst %1 37 %296 %297 
                                       f32_4 %299 = OpLoad %77 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %77 %300 
                                Private f32* %301 = OpAccessChain %77 %30 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFNegate %302 
                                Private f32* %304 = OpAccessChain %77 %155 
                                                      OpStore %304 %303 
                                Private f32* %305 = OpAccessChain %9 %30 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpFNegate %306 
                                Private f32* %308 = OpAccessChain %9 %155 
                                                      OpStore %308 %307 
                                Uniform f32* %314 = OpAccessChain %19 %313 
                                         f32 %315 = OpLoad %314 
                                       f32_4 %316 = OpCompositeConstruct %315 %315 %315 %315 
                                      bool_4 %318 = OpFOrdNotEqual %312 %316 
                                        bool %319 = OpAny %318 
                                                      OpStore %311 %319 
                                        bool %320 = OpLoad %311 
                                                      OpSelectionMerge %324 None 
                                                      OpBranchConditional %320 %323 %327 
                                             %323 = OpLabel 
                                       f32_4 %325 = OpLoad %77 
                                       f32_3 %326 = OpVectorShuffle %325 %325 3 2 1 
                                                      OpStore %322 %326 
                                                      OpBranch %324 
                                             %327 = OpLabel 
                                       f32_4 %328 = OpLoad %9 
                                       f32_3 %329 = OpVectorShuffle %328 %328 3 1 2 
                                                      OpStore %322 %329 
                                                      OpBranch %324 
                                             %324 = OpLabel 
                                       f32_3 %330 = OpLoad %322 
                                       f32_4 %331 = OpLoad %9 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
                                                      OpStore %9 %332 
                                       f32_4 %333 = OpLoad %9 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                              Uniform f32_4* %335 = OpAccessChain %19 %180 %20 
                                       f32_4 %336 = OpLoad %335 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                         f32 %338 = OpDot %334 %337 
                                Private f32* %339 = OpAccessChain %77 %30 
                                                      OpStore %339 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                              Uniform f32_4* %342 = OpAccessChain %19 %180 %168 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                         f32 %345 = OpDot %341 %344 
                                Private f32* %346 = OpAccessChain %77 %21 
                                                      OpStore %346 %345 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                              Uniform f32_4* %349 = OpAccessChain %19 %180 %180 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                         f32 %352 = OpDot %348 %351 
                                Private f32* %353 = OpAccessChain %77 %279 
                                                      OpStore %353 %352 
                                       f32_4 %354 = OpLoad %77 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %77 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                         f32 %358 = OpDot %355 %357 
                                Private f32* %359 = OpAccessChain %9 %30 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %9 %30 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpExtInst %1 32 %361 
                                Private f32* %363 = OpAccessChain %9 %30 
                                                      OpStore %363 %362 
                                       f32_4 %366 = OpLoad %9 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 0 0 
                                       f32_4 %368 = OpLoad %77 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFMul %367 %369 
                                                      OpStore vs_TEXCOORD1 %370 
                              Uniform f32_4* %372 = OpAccessChain %19 %168 %189 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_4 %375 = OpLoad %159 
                                       f32_3 %376 = OpVectorShuffle %375 %375 3 3 3 
                                       f32_3 %377 = OpFMul %374 %376 
                                       f32_4 %378 = OpLoad %115 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore vs_TEXCOORD2 %380 
                              Uniform f32_4* %381 = OpAccessChain %19 %168 %189 
                                       f32_4 %382 = OpLoad %381 
                                       f32_4 %383 = OpLoad %159 
                                       f32_4 %384 = OpVectorShuffle %383 %383 3 3 3 3 
                                       f32_4 %385 = OpFMul %382 %384 
                                       f32_4 %386 = OpLoad %115 
                                       f32_4 %387 = OpFAdd %385 %386 
                                                      OpStore %9 %387 
                                       f32_4 %388 = OpLoad %9 
                                       f32_3 %389 = OpVectorShuffle %388 %388 1 1 1 
                              Uniform f32_4* %391 = OpAccessChain %19 %390 %168 
                                       f32_4 %392 = OpLoad %391 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFMul %389 %393 
                                       f32_4 %395 = OpLoad %77 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %77 %396 
                              Uniform f32_4* %397 = OpAccessChain %19 %390 %20 
                                       f32_4 %398 = OpLoad %397 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_4 %400 = OpLoad %9 
                                       f32_3 %401 = OpVectorShuffle %400 %400 0 0 0 
                                       f32_3 %402 = OpFMul %399 %401 
                                       f32_4 %403 = OpLoad %77 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_3 %405 = OpFAdd %402 %404 
                                       f32_4 %406 = OpLoad %77 
                                       f32_4 %407 = OpVectorShuffle %406 %405 4 5 6 3 
                                                      OpStore %77 %407 
                              Uniform f32_4* %408 = OpAccessChain %19 %390 %180 
                                       f32_4 %409 = OpLoad %408 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_4 %411 = OpLoad %9 
                                       f32_3 %412 = OpVectorShuffle %411 %411 2 2 2 
                                       f32_3 %413 = OpFMul %410 %412 
                                       f32_4 %414 = OpLoad %77 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_3 %416 = OpFAdd %413 %415 
                                       f32_4 %417 = OpLoad %9 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
                                                      OpStore %9 %418 
                              Uniform f32_4* %420 = OpAccessChain %19 %390 %189 
                                       f32_4 %421 = OpLoad %420 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
                                       f32_4 %423 = OpLoad %9 
                                       f32_3 %424 = OpVectorShuffle %423 %423 3 3 3 
                                       f32_3 %425 = OpFMul %422 %424 
                                       f32_4 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_3 %428 = OpFAdd %425 %427 
                                                      OpStore vs_TEXCOORD3 %428 
                                                      OpStore vs_TEXCOORD4 %312 
                                 Output f32* %431 = OpAccessChain %216 %20 %21 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFNegate %432 
                                 Output f32* %434 = OpAccessChain %216 %20 %21 
                                                      OpStore %434 %433 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 434
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %75 %223 %422 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate vs_TEXCOORD1 Location 75 
                                                      OpDecorate %213 DescriptorSet 213 
                                                      OpDecorate %213 Binding 213 
                                                      OpDecorate %217 DescriptorSet 217 
                                                      OpDecorate %217 Binding 217 
                                                      OpDecorate vs_TEXCOORD0 Location 223 
                                                      OpDecorate %304 DescriptorSet 304 
                                                      OpDecorate %304 Binding 304 
                                                      OpDecorate %306 DescriptorSet 306 
                                                      OpDecorate %306 Binding 306 
                                                      OpDecorate %422 Location 422 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %17 %6 %6 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 1 
                                              %42 = OpTypePointer Uniform %14 
                               Private f32_3* %52 = OpVariable Private 
                                          f32 %67 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_3* %81 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %93 = OpVariable Private 
                                         u32 %102 = OpConstant 0 
                                Private f32* %112 = OpVariable Private 
                                         i32 %113 = OpConstant 4 
                                             %114 = OpTypePointer Uniform %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %124 = OpConstant 3.674022E-40 
                              Private f32_3* %126 = OpVariable Private 
                                Private f32* %131 = OpVariable Private 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %150 = OpConstant 3.674022E-40 
                                         f32 %194 = OpConstant 3.674022E-40 
                                         f32 %196 = OpConstant 3.674022E-40 
                                         f32 %207 = OpConstant 3.674022E-40 
                                             %211 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %212 = OpTypePointer UniformConstant %211 
        UniformConstant read_only Texture2D* %213 = OpVariable UniformConstant 
                                             %215 = OpTypeSampler 
                                             %216 = OpTypePointer UniformConstant %215 
                    UniformConstant sampler* %217 = OpVariable UniformConstant 
                                             %219 = OpTypeSampledImage %211 
                                             %221 = OpTypeVector %6 2 
                                             %222 = OpTypePointer Input %221 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %228 = OpConstant 6 
                                         f32 %233 = OpConstant 3.674022E-40 
                                       f32_3 %234 = OpConstantComposite %233 %233 %233 
                                         i32 %241 = OpConstant 5 
                                         f32 %255 = OpConstant 3.674022E-40 
                                       f32_3 %256 = OpConstantComposite %255 %255 %255 
                                             %261 = OpTypeBool 
                                             %262 = OpTypePointer Private %261 
                               Private bool* %263 = OpVariable Private 
                              Private f32_3* %271 = OpVariable Private 
                                         i32 %274 = OpConstant 3 
                                         i32 %287 = OpConstant 2 
        UniformConstant read_only Texture2D* %304 = OpVariable UniformConstant 
                    UniformConstant sampler* %306 = OpVariable UniformConstant 
                              Private f32_3* %319 = OpVariable Private 
                                         f32 %336 = OpConstant 3.674022E-40 
                                       f32_3 %349 = OpConstantComposite %91 %91 %91 
                                         f32 %414 = OpConstant 3.674022E-40 
                                             %421 = OpTypePointer Output %14 
                               Output f32_4* %422 = OpVariable Output 
                                         u32 %430 = OpConstant 3 
                                             %431 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                          f32 %34 = OpLoad %28 
                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFMul %35 %36 
                                                      OpStore %9 %37 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_4* %43 = OpAccessChain %20 %41 
                                        f32_4 %44 = OpLoad %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                        f32_3 %46 = OpFAdd %40 %45 
                                                      OpStore %38 %46 
                                        f32_3 %47 = OpLoad %38 
                                        f32_3 %48 = OpLoad %38 
                                          f32 %49 = OpDot %47 %48 
                                                      OpStore %28 %49 
                                          f32 %50 = OpLoad %28 
                                          f32 %51 = OpExtInst %1 32 %50 
                                                      OpStore %28 %51 
                                        f32_3 %53 = OpLoad %38 
                                          f32 %54 = OpLoad %28 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpFMul %53 %55 
                                        f32_3 %57 = OpLoad %9 
                                        f32_3 %58 = OpFAdd %56 %57 
                                                      OpStore %52 %58 
                                          f32 %59 = OpLoad %28 
                                        f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                        f32_3 %61 = OpLoad %38 
                                        f32_3 %62 = OpFMul %60 %61 
                                                      OpStore %38 %62 
                                        f32_3 %63 = OpLoad %52 
                                        f32_3 %64 = OpLoad %52 
                                          f32 %65 = OpDot %63 %64 
                                                      OpStore %28 %65 
                                          f32 %66 = OpLoad %28 
                                          f32 %68 = OpExtInst %1 40 %66 %67 
                                                      OpStore %28 %68 
                                          f32 %69 = OpLoad %28 
                                          f32 %70 = OpExtInst %1 32 %69 
                                                      OpStore %28 %70 
                                          f32 %71 = OpLoad %28 
                                        f32_3 %72 = OpCompositeConstruct %71 %71 %71 
                                        f32_3 %73 = OpLoad %52 
                                        f32_3 %74 = OpFMul %72 %73 
                                                      OpStore %52 %74 
                                        f32_3 %76 = OpLoad vs_TEXCOORD1 
                                        f32_3 %77 = OpLoad vs_TEXCOORD1 
                                          f32 %78 = OpDot %76 %77 
                                                      OpStore %28 %78 
                                          f32 %79 = OpLoad %28 
                                          f32 %80 = OpExtInst %1 32 %79 
                                                      OpStore %28 %80 
                                          f32 %82 = OpLoad %28 
                                        f32_3 %83 = OpCompositeConstruct %82 %82 %82 
                                        f32_3 %84 = OpLoad vs_TEXCOORD1 
                                        f32_3 %85 = OpFMul %83 %84 
                                                      OpStore %81 %85 
                                        f32_3 %86 = OpLoad %81 
                                        f32_3 %87 = OpLoad %52 
                                          f32 %88 = OpDot %86 %87 
                                                      OpStore %28 %88 
                                          f32 %89 = OpLoad %28 
                                          f32 %92 = OpExtInst %1 43 %89 %90 %91 
                                                      OpStore %28 %92 
                                        f32_3 %94 = OpLoad %38 
                                        f32_3 %95 = OpLoad %52 
                                          f32 %96 = OpDot %94 %95 
                                                      OpStore %93 %96 
                                          f32 %97 = OpLoad %93 
                                          f32 %98 = OpExtInst %1 43 %97 %90 %91 
                                                      OpStore %93 %98 
                                        f32_3 %99 = OpLoad %81 
                                       f32_3 %100 = OpLoad %38 
                                         f32 %101 = OpDot %99 %100 
                                Private f32* %103 = OpAccessChain %38 %102 
                                                      OpStore %103 %101 
                                Private f32* %104 = OpAccessChain %38 %102 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpExtInst %1 43 %105 %90 %91 
                                Private f32* %107 = OpAccessChain %38 %102 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %81 
                                       f32_3 %109 = OpLoad %9 
                                         f32 %110 = OpDot %108 %109 
                                Private f32* %111 = OpAccessChain %9 %102 
                                                      OpStore %111 %110 
                                Uniform f32* %115 = OpAccessChain %20 %113 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFNegate %116 
                                         f32 %118 = OpFAdd %117 %91 
                                                      OpStore %112 %118 
                                         f32 %120 = OpLoad %112 
                                         f32 %121 = OpLoad %112 
                                         f32 %122 = OpFMul %120 %121 
                                                      OpStore %119 %122 
                                         f32 %123 = OpLoad %119 
                                         f32 %125 = OpExtInst %1 40 %123 %124 
                                                      OpStore %119 %125 
                                         f32 %127 = OpLoad %119 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpFMul %127 %128 
                                Private f32* %130 = OpAccessChain %126 %102 
                                                      OpStore %130 %129 
                                         f32 %132 = OpLoad %28 
                                Private f32* %133 = OpAccessChain %126 %102 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFMul %132 %134 
                                         f32 %136 = OpLoad %28 
                                         f32 %137 = OpFNegate %136 
                                         f32 %138 = OpFAdd %135 %137 
                                                      OpStore %131 %138 
                                         f32 %139 = OpLoad %131 
                                         f32 %140 = OpLoad %28 
                                         f32 %141 = OpFMul %139 %140 
                                         f32 %142 = OpFAdd %141 %91 
                                                      OpStore %28 %142 
                                         f32 %143 = OpLoad %28 
                                         f32 %144 = OpLoad %28 
                                         f32 %145 = OpFMul %143 %144 
                                         f32 %147 = OpFAdd %145 %146 
                                                      OpStore %28 %147 
                                Private f32* %148 = OpAccessChain %126 %102 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpFMul %149 %150 
                                Private f32* %152 = OpAccessChain %126 %102 
                                                      OpStore %152 %151 
                                Private f32* %153 = OpAccessChain %126 %102 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpLoad %28 
                                         f32 %156 = OpFDiv %154 %155 
                                                      OpStore %28 %156 
                                         f32 %157 = OpLoad %119 
                                         f32 %158 = OpFNegate %157 
                                         f32 %159 = OpFAdd %158 %91 
                                Private f32* %160 = OpAccessChain %126 %102 
                                                      OpStore %160 %159 
                                Private f32* %161 = OpAccessChain %9 %102 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpExtInst %1 4 %162 
                                Private f32* %164 = OpAccessChain %126 %102 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                         f32 %167 = OpLoad %119 
                                         f32 %168 = OpFAdd %166 %167 
                                                      OpStore %131 %168 
                                Private f32* %169 = OpAccessChain %38 %102 
                                         f32 %170 = OpLoad %169 
                                Private f32* %171 = OpAccessChain %126 %102 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %170 %172 
                                         f32 %174 = OpLoad %119 
                                         f32 %175 = OpFAdd %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                Private f32* %177 = OpAccessChain %9 %102 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpExtInst %1 4 %178 
                                         f32 %180 = OpFMul %176 %179 
                                                      OpStore %119 %180 
                                Private f32* %181 = OpAccessChain %9 %102 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpExtInst %1 4 %182 
                                         f32 %184 = OpFNegate %183 
                                         f32 %185 = OpFAdd %184 %91 
                                Private f32* %186 = OpAccessChain %9 %102 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %38 %102 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpLoad %131 
                                         f32 %190 = OpFMul %188 %189 
                                         f32 %191 = OpLoad %119 
                                         f32 %192 = OpFAdd %190 %191 
                                                      OpStore %119 %192 
                                         f32 %193 = OpLoad %119 
                                         f32 %195 = OpFAdd %193 %194 
                                                      OpStore %119 %195 
                                         f32 %197 = OpLoad %119 
                                         f32 %198 = OpFDiv %196 %197 
                                                      OpStore %119 %198 
                                         f32 %199 = OpLoad %28 
                                         f32 %200 = OpLoad %119 
                                         f32 %201 = OpFMul %199 %200 
                                                      OpStore %119 %201 
                                Private f32* %202 = OpAccessChain %38 %102 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpLoad %119 
                                         f32 %205 = OpFMul %203 %204 
                                                      OpStore %119 %205 
                                         f32 %206 = OpLoad %119 
                                         f32 %208 = OpFMul %206 %207 
                                                      OpStore %119 %208 
                                         f32 %209 = OpLoad %119 
                                         f32 %210 = OpExtInst %1 40 %209 %90 
                                                      OpStore %119 %210 
                         read_only Texture2D %214 = OpLoad %213 
                                     sampler %218 = OpLoad %217 
                  read_only Texture2DSampled %220 = OpSampledImage %214 %218 
                                       f32_2 %224 = OpLoad vs_TEXCOORD0 
                                       f32_4 %225 = OpImageSampleImplicitLod %220 %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                                      OpStore %52 %226 
                                       f32_3 %227 = OpLoad %52 
                              Uniform f32_4* %229 = OpAccessChain %20 %228 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFMul %227 %231 
                                       f32_3 %235 = OpFAdd %232 %234 
                                                      OpStore %81 %235 
                                       f32_3 %236 = OpLoad %52 
                              Uniform f32_4* %237 = OpAccessChain %20 %228 
                                       f32_4 %238 = OpLoad %237 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFMul %236 %239 
                                                      OpStore %52 %240 
                                Uniform f32* %242 = OpAccessChain %20 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %20 %241 
                                         f32 %245 = OpLoad %244 
                                Uniform f32* %246 = OpAccessChain %20 %241 
                                         f32 %247 = OpLoad %246 
                                       f32_3 %248 = OpCompositeConstruct %243 %245 %247 
                                         f32 %249 = OpCompositeExtract %248 0 
                                         f32 %250 = OpCompositeExtract %248 1 
                                         f32 %251 = OpCompositeExtract %248 2 
                                       f32_3 %252 = OpCompositeConstruct %249 %250 %251 
                                       f32_3 %253 = OpLoad %81 
                                       f32_3 %254 = OpFMul %252 %253 
                                       f32_3 %257 = OpFAdd %254 %256 
                                                      OpStore %81 %257 
                                       f32_3 %258 = OpLoad %81 
                                       f32_3 %259 = OpLoad %81 
                                         f32 %260 = OpDot %258 %259 
                                                      OpStore %28 %260 
                                         f32 %264 = OpLoad %28 
                                        bool %265 = OpFOrdNotEqual %264 %90 
                                                      OpStore %263 %265 
                                        bool %266 = OpLoad %263 
                                         f32 %267 = OpSelect %266 %91 %90 
                                                      OpStore %28 %267 
                                         f32 %268 = OpLoad %28 
                                         f32 %269 = OpLoad %119 
                                         f32 %270 = OpFMul %268 %269 
                                                      OpStore %119 %270 
                                       f32_3 %272 = OpLoad vs_TEXCOORD2 
                                       f32_3 %273 = OpVectorShuffle %272 %272 1 1 1 
                              Uniform f32_4* %275 = OpAccessChain %20 %274 %41 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFMul %273 %277 
                                                      OpStore %271 %278 
                              Uniform f32_4* %279 = OpAccessChain %20 %274 %22 
                                       f32_4 %280 = OpLoad %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpLoad vs_TEXCOORD2 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_3 %285 = OpLoad %271 
                                       f32_3 %286 = OpFAdd %284 %285 
                                                      OpStore %271 %286 
                              Uniform f32_4* %288 = OpAccessChain %20 %274 %287 
                                       f32_4 %289 = OpLoad %288 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpLoad vs_TEXCOORD2 
                                       f32_3 %292 = OpVectorShuffle %291 %291 2 2 2 
                                       f32_3 %293 = OpFMul %290 %292 
                                       f32_3 %294 = OpLoad %271 
                                       f32_3 %295 = OpFAdd %293 %294 
                                                      OpStore %271 %295 
                                       f32_3 %296 = OpLoad %271 
                              Uniform f32_4* %297 = OpAccessChain %20 %274 %274 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFAdd %296 %299 
                                                      OpStore %271 %300 
                                       f32_3 %301 = OpLoad %271 
                                       f32_3 %302 = OpLoad %271 
                                         f32 %303 = OpDot %301 %302 
                                                      OpStore %28 %303 
                         read_only Texture2D %305 = OpLoad %304 
                                     sampler %307 = OpLoad %306 
                  read_only Texture2DSampled %308 = OpSampledImage %305 %307 
                                         f32 %309 = OpLoad %28 
                                       f32_2 %310 = OpCompositeConstruct %309 %309 
                                       f32_4 %311 = OpImageSampleImplicitLod %308 %310 
                                         f32 %312 = OpCompositeExtract %311 0 
                                                      OpStore %28 %312 
                                         f32 %313 = OpLoad %28 
                                       f32_3 %314 = OpCompositeConstruct %313 %313 %313 
                              Uniform f32_4* %315 = OpAccessChain %20 %287 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFMul %314 %317 
                                                      OpStore %271 %318 
                                         f32 %320 = OpLoad %119 
                                       f32_3 %321 = OpCompositeConstruct %320 %320 %320 
                                       f32_3 %322 = OpLoad %271 
                                       f32_3 %323 = OpFMul %321 %322 
                                                      OpStore %319 %323 
                                         f32 %324 = OpLoad %93 
                                         f32 %325 = OpFNegate %324 
                                         f32 %326 = OpFAdd %325 %91 
                                                      OpStore %119 %326 
                                         f32 %327 = OpLoad %93 
                                         f32 %328 = OpLoad %93 
                                         f32 %329 = OpFMul %327 %328 
                                                      OpStore %28 %329 
                                         f32 %330 = OpLoad %28 
                                       f32_2 %331 = OpCompositeConstruct %330 %330 
                                         f32 %332 = OpLoad %112 
                                       f32_2 %333 = OpCompositeConstruct %332 %332 
                                         f32 %334 = OpDot %331 %333 
                                                      OpStore %112 %334 
                                         f32 %335 = OpLoad %112 
                                         f32 %337 = OpFAdd %335 %336 
                                                      OpStore %112 %337 
                                         f32 %338 = OpLoad %119 
                                         f32 %339 = OpLoad %119 
                                         f32 %340 = OpFMul %338 %339 
                                                      OpStore %28 %340 
                                         f32 %341 = OpLoad %28 
                                         f32 %342 = OpLoad %28 
                                         f32 %343 = OpFMul %341 %342 
                                                      OpStore %28 %343 
                                         f32 %344 = OpLoad %119 
                                         f32 %345 = OpLoad %28 
                                         f32 %346 = OpFMul %344 %345 
                                                      OpStore %119 %346 
                                       f32_3 %347 = OpLoad %81 
                                       f32_3 %348 = OpFNegate %347 
                                       f32_3 %350 = OpFAdd %348 %349 
                                                      OpStore %126 %350 
                                       f32_3 %351 = OpLoad %126 
                                         f32 %352 = OpLoad %119 
                                       f32_3 %353 = OpCompositeConstruct %352 %352 %352 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_3 %355 = OpLoad %81 
                                       f32_3 %356 = OpFAdd %354 %355 
                                                      OpStore %126 %356 
                                       f32_3 %357 = OpLoad %126 
                                       f32_3 %358 = OpLoad %319 
                                       f32_3 %359 = OpFMul %357 %358 
                                                      OpStore %126 %359 
                                Private f32* %360 = OpAccessChain %9 %102 
                                         f32 %361 = OpLoad %360 
                                Private f32* %362 = OpAccessChain %9 %102 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %361 %363 
                                                      OpStore %119 %364 
                                         f32 %365 = OpLoad %119 
                                         f32 %366 = OpLoad %119 
                                         f32 %367 = OpFMul %365 %366 
                                                      OpStore %119 %367 
                                Private f32* %368 = OpAccessChain %9 %102 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpLoad %119 
                                         f32 %371 = OpFMul %369 %370 
                                Private f32* %372 = OpAccessChain %9 %102 
                                                      OpStore %372 %371 
                                         f32 %373 = OpLoad %112 
                                Private f32* %374 = OpAccessChain %9 %102 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFMul %373 %375 
                                         f32 %377 = OpFAdd %376 %91 
                                Private f32* %378 = OpAccessChain %9 %102 
                                                      OpStore %378 %377 
                                Private f32* %379 = OpAccessChain %38 %102 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %381 %91 
                                                      OpStore %119 %382 
                                         f32 %383 = OpLoad %119 
                                         f32 %384 = OpLoad %119 
                                         f32 %385 = OpFMul %383 %384 
                                                      OpStore %28 %385 
                                         f32 %386 = OpLoad %28 
                                         f32 %387 = OpLoad %28 
                                         f32 %388 = OpFMul %386 %387 
                                                      OpStore %28 %388 
                                         f32 %389 = OpLoad %119 
                                         f32 %390 = OpLoad %28 
                                         f32 %391 = OpFMul %389 %390 
                                                      OpStore %119 %391 
                                         f32 %392 = OpLoad %112 
                                         f32 %393 = OpLoad %119 
                                         f32 %394 = OpFMul %392 %393 
                                         f32 %395 = OpFAdd %394 %91 
                                                      OpStore %112 %395 
                                Private f32* %396 = OpAccessChain %9 %102 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpLoad %112 
                                         f32 %399 = OpFMul %397 %398 
                                Private f32* %400 = OpAccessChain %9 %102 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %38 %102 
                                         f32 %402 = OpLoad %401 
                                Private f32* %403 = OpAccessChain %9 %102 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFMul %402 %404 
                                Private f32* %406 = OpAccessChain %9 %102 
                                                      OpStore %406 %405 
                                       f32_3 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 0 0 
                                       f32_3 %409 = OpLoad %271 
                                       f32_3 %410 = OpFMul %408 %409 
                                                      OpStore %9 %410 
                                Uniform f32* %411 = OpAccessChain %20 %241 
                                         f32 %412 = OpLoad %411 
                                         f32 %413 = OpFNegate %412 
                                         f32 %415 = OpFMul %413 %414 
                                         f32 %416 = OpFAdd %415 %414 
                                                      OpStore %28 %416 
                                         f32 %417 = OpLoad %28 
                                       f32_3 %418 = OpCompositeConstruct %417 %417 %417 
                                       f32_3 %419 = OpLoad %52 
                                       f32_3 %420 = OpFMul %418 %419 
                                                      OpStore %52 %420 
                                       f32_3 %423 = OpLoad %52 
                                       f32_3 %424 = OpLoad %9 
                                       f32_3 %425 = OpFMul %423 %424 
                                       f32_3 %426 = OpLoad %126 
                                       f32_3 %427 = OpFAdd %425 %426 
                                       f32_4 %428 = OpLoad %422 
                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
                                                      OpStore %422 %429 
                                 Output f32* %432 = OpAccessChain %422 %430 
                                                      OpStore %432 %91 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(1) uniform  sampler2D _posTex;
UNITY_LOCATION(2) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
float u_xlat17;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 0.00100000005);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = (-_Glossiness) + 1.0;
    u_xlat11 = u_xlat6 * u_xlat6;
    u_xlat11 = max(u_xlat11, 0.00200000009);
    u_xlat16 = u_xlat11 * u_xlat11;
    u_xlat17 = u_xlat15 * u_xlat16 + (-u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15 + 1.0;
    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat15 = u_xlat16 / u_xlat15;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat10 = (-u_xlat11) + 1.0;
    u_xlat16 = abs(u_xlat0.x) * u_xlat10 + u_xlat11;
    u_xlat10 = u_xlat5 * u_xlat10 + u_xlat11;
    u_xlat10 = u_xlat10 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat10 = u_xlat5 * u_xlat16 + u_xlat10;
    u_xlat10 = u_xlat10 + 9.99999975e-06;
    u_xlat10 = 0.5 / u_xlat10;
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat10 = u_xlat10 * 3.14159274;
    u_xlat10 = u_xlat5 * u_xlat10;
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb15 = u_xlat15!=0.0;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat4.xyz = vec3(u_xlat10) * _LightColor0.xyz;
    u_xlat10 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(vec2(u_xlat15), vec2(u_xlat6));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat1.x = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat1.x;
    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat10 = u_xlat0.x * u_xlat0.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat0.x = u_xlat0.x * u_xlat10;
    u_xlat0.x = u_xlat15 * u_xlat0.x + 1.0;
    u_xlat10 = (-u_xlat5) + 1.0;
    u_xlat16 = u_xlat10 * u_xlat10;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat10 * u_xlat16;
    u_xlat10 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10;
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat15 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 386
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %225 %236 %237 %373 %379 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %223 0 BuiltIn 223 
                                                      OpMemberDecorate %223 1 BuiltIn 223 
                                                      OpMemberDecorate %223 2 BuiltIn 223 
                                                      OpDecorate %223 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 236 
                                                      OpDecorate %237 Location 237 
                                                      OpDecorate vs_TEXCOORD1 Location 373 
                                                      OpDecorate vs_TEXCOORD4 Location 379 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 7 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 8 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 6 
                                         i32 %119 = OpConstant 5 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 1 
                                             %168 = OpTypePointer Uniform %7 
                                         i32 %179 = OpConstant 2 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %222 = OpTypeArray %6 %20 
                                             %223 = OpTypeStruct %7 %6 %222 
                                             %224 = OpTypePointer Output %223 
        Output struct {f32_4; f32; f32[1];}* %225 = OpVariable Output 
                                             %233 = OpTypePointer Output %7 
                                             %235 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %237 = OpVariable Input 
                                         i32 %240 = OpConstant 9 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_2 %264 = OpConstantComposite %263 %263 
                                         f32 %266 = OpConstant 3.674022E-40 
                                       f32_2 %267 = OpConstantComposite %266 %266 
                                Private f32* %271 = OpVariable Private 
                                         f32 %280 = OpConstant 3.674022E-40 
                                         f32 %281 = OpConstant 3.674022E-40 
                                       f32_2 %282 = OpConstantComposite %280 %281 
                                       f32_2 %284 = OpConstantComposite %56 %56 
                                         u32 %288 = OpConstant 2 
                                       f32_3 %306 = OpConstantComposite %56 %56 %56 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                       f32_4 %321 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %322 = OpConstant 4 
                                             %326 = OpTypeVector %318 4 
                                             %330 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                             %380 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %331 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %169 = OpAccessChain %18 %167 %167 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpFMul %166 %170 
                                                      OpStore %164 %171 
                              Uniform f32_4* %172 = OpAccessChain %18 %167 %19 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpLoad %114 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %164 
                                       f32_4 %178 = OpFAdd %176 %177 
                                                      OpStore %164 %178 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %205 = OpAccessChain %18 %188 %167 
                                       f32_4 %206 = OpLoad %205 
                                       f32_4 %207 = OpFMul %204 %206 
                                                      OpStore %114 %207 
                              Uniform f32_4* %208 = OpAccessChain %18 %188 %19 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %164 
                                       f32_4 %211 = OpVectorShuffle %210 %210 0 0 0 0 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %114 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %114 %214 
                              Uniform f32_4* %215 = OpAccessChain %18 %188 %179 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %164 
                                       f32_4 %218 = OpVectorShuffle %217 %217 2 2 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %114 
                                       f32_4 %221 = OpFAdd %219 %220 
                                                      OpStore %114 %221 
                              Uniform f32_4* %226 = OpAccessChain %18 %188 %188 
                                       f32_4 %227 = OpLoad %226 
                                       f32_4 %228 = OpLoad %164 
                                       f32_4 %229 = OpVectorShuffle %228 %228 3 3 3 3 
                                       f32_4 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %114 
                                       f32_4 %232 = OpFAdd %230 %231 
                               Output f32_4* %234 = OpAccessChain %225 %19 
                                                      OpStore %234 %232 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                              Uniform f32_4* %241 = OpAccessChain %18 %240 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                              Uniform f32_4* %245 = OpAccessChain %18 %240 
                                       f32_4 %246 = OpLoad %245 
                                       f32_2 %247 = OpVectorShuffle %246 %246 2 3 
                                       f32_2 %248 = OpFAdd %244 %247 
                                                      OpStore vs_TEXCOORD0 %248 
                                Private f32* %249 = OpAccessChain %76 %20 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpExtInst %1 8 %250 
                                Private f32* %252 = OpAccessChain %114 %29 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %114 %29 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFNegate %254 
                                         f32 %256 = OpFMul %255 %146 
                                Private f32* %257 = OpAccessChain %76 %29 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %114 %20 
                                                      OpStore %260 %259 
                                       f32_4 %261 = OpLoad %114 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_2 %265 = OpFMul %262 %264 
                                       f32_2 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %76 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %76 %270 
                                       f32_4 %272 = OpLoad %76 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_4 %274 = OpLoad %76 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                         f32 %276 = OpDot %273 %275 
                                                      OpStore %271 %276 
                                         f32 %277 = OpLoad %271 
                                       f32_2 %278 = OpCompositeConstruct %277 %277 
                                       f32_2 %279 = OpFNegate %278 
                                       f32_2 %283 = OpFMul %279 %282 
                                       f32_2 %285 = OpFAdd %283 %284 
                                       f32_4 %286 = OpLoad %114 
                                       f32_4 %287 = OpVectorShuffle %286 %285 0 1 4 5 
                                                      OpStore %114 %287 
                                Private f32* %289 = OpAccessChain %114 %288 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpExtInst %1 31 %290 
                                                      OpStore %271 %291 
                                       f32_4 %292 = OpLoad %76 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                         f32 %294 = OpLoad %271 
                                       f32_2 %295 = OpCompositeConstruct %294 %294 
                                       f32_2 %296 = OpFMul %293 %295 
                                       f32_4 %297 = OpLoad %114 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %114 %298 
                                       f32_4 %299 = OpLoad %114 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 3 
                                       f32_3 %301 = OpExtInst %1 40 %300 %110 
                                       f32_4 %302 = OpLoad %76 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %76 %303 
                                       f32_4 %304 = OpLoad %76 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %307 = OpExtInst %1 37 %305 %306 
                                       f32_4 %308 = OpLoad %76 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %76 %309 
                                Private f32* %310 = OpAccessChain %76 %29 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                Private f32* %313 = OpAccessChain %76 %154 
                                                      OpStore %313 %312 
                                Private f32* %314 = OpAccessChain %9 %29 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFNegate %315 
                                Private f32* %317 = OpAccessChain %9 %154 
                                                      OpStore %317 %316 
                                Uniform f32* %323 = OpAccessChain %18 %322 
                                         f32 %324 = OpLoad %323 
                                       f32_4 %325 = OpCompositeConstruct %324 %324 %324 %324 
                                      bool_4 %327 = OpFOrdNotEqual %321 %325 
                                        bool %328 = OpAny %327 
                                                      OpStore %320 %328 
                                        bool %329 = OpLoad %320 
                                                      OpSelectionMerge %333 None 
                                                      OpBranchConditional %329 %332 %336 
                                             %332 = OpLabel 
                                       f32_4 %334 = OpLoad %76 
                                       f32_3 %335 = OpVectorShuffle %334 %334 3 2 1 
                                                      OpStore %331 %335 
                                                      OpBranch %333 
                                             %336 = OpLabel 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 3 1 2 
                                                      OpStore %331 %338 
                                                      OpBranch %333 
                                             %333 = OpLabel 
                                       f32_3 %339 = OpLoad %331 
                                       f32_4 %340 = OpLoad %9 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %9 %341 
                                       f32_4 %342 = OpLoad %9 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                              Uniform f32_4* %344 = OpAccessChain %18 %179 %19 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                         f32 %347 = OpDot %343 %346 
                                Private f32* %348 = OpAccessChain %76 %29 
                                                      OpStore %348 %347 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                              Uniform f32_4* %351 = OpAccessChain %18 %179 %167 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %354 = OpDot %350 %353 
                                Private f32* %355 = OpAccessChain %76 %20 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                              Uniform f32_4* %358 = OpAccessChain %18 %179 %179 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                         f32 %361 = OpDot %357 %360 
                                Private f32* %362 = OpAccessChain %76 %288 
                                                      OpStore %362 %361 
                                       f32_4 %363 = OpLoad %76 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_4 %365 = OpLoad %76 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                         f32 %367 = OpDot %364 %366 
                                Private f32* %368 = OpAccessChain %9 %29 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %9 %29 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpExtInst %1 32 %370 
                                Private f32* %372 = OpAccessChain %9 %29 
                                                      OpStore %372 %371 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_4 %376 = OpLoad %76 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                                      OpStore vs_TEXCOORD1 %378 
                                                      OpStore vs_TEXCOORD4 %321 
                                 Output f32* %381 = OpAccessChain %225 %19 %20 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFNegate %382 
                                 Output f32* %384 = OpAccessChain %225 %19 %20 
                                                      OpStore %384 %383 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 376
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %58 %201 %364 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 58 
                                                      OpDecorate %191 DescriptorSet 191 
                                                      OpDecorate %191 Binding 191 
                                                      OpDecorate %195 DescriptorSet 195 
                                                      OpDecorate %195 Binding 195 
                                                      OpDecorate vs_TEXCOORD0 Location 201 
                                                      OpDecorate %364 Location 364 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %7 %14 %14 %6 %6 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %7 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                               Private f32_3* %31 = OpVariable Private 
                                          i32 %36 = OpConstant 1 
                                              %37 = OpTypePointer Uniform %14 
                                          f32 %50 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_3* %64 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %81 = OpTypeInt 32 0 
                                          u32 %82 = OpConstant 0 
                                 Private f32* %88 = OpVariable Private 
                                          i32 %89 = OpConstant 3 
                                              %90 = OpTypePointer Uniform %6 
                                 Private f32* %95 = OpVariable Private 
                                         f32 %100 = OpConstant 3.674022E-40 
                                Private f32* %102 = OpVariable Private 
                                Private f32* %106 = OpVariable Private 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         f32 %123 = OpConstant 3.674022E-40 
                                Private f32* %132 = OpVariable Private 
                                Private f32* %140 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                                         f32 %175 = OpConstant 3.674022E-40 
                                         f32 %185 = OpConstant 3.674022E-40 
                                             %189 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %190 = OpTypePointer UniformConstant %189 
        UniformConstant read_only Texture2D* %191 = OpVariable UniformConstant 
                                             %193 = OpTypeSampler 
                                             %194 = OpTypePointer UniformConstant %193 
                    UniformConstant sampler* %195 = OpVariable UniformConstant 
                                             %197 = OpTypeSampledImage %189 
                                             %199 = OpTypeVector %6 2 
                                             %200 = OpTypePointer Input %199 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %207 = OpConstant 5 
                                         f32 %212 = OpConstant 3.674022E-40 
                                       f32_3 %213 = OpConstantComposite %212 %212 %212 
                                         i32 %220 = OpConstant 4 
                                         f32 %234 = OpConstant 3.674022E-40 
                                       f32_3 %235 = OpConstantComposite %234 %234 %234 
                                             %240 = OpTypeBool 
                                             %241 = OpTypePointer Private %240 
                               Private bool* %242 = OpVariable Private 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %253 = OpConstant 2 
                                         f32 %273 = OpConstant 3.674022E-40 
                                       f32_3 %291 = OpConstantComposite %74 %74 %74 
                                         f32 %356 = OpConstant 3.674022E-40 
                                             %363 = OpTypePointer Output %14 
                               Output f32_4* %364 = OpVariable Output 
                                         u32 %372 = OpConstant 3 
                                             %373 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %13 %22 
                                                      OpStore %9 %23 
                                        f32_3 %26 = OpLoad %9 
                                        f32_3 %27 = OpLoad %9 
                                          f32 %28 = OpDot %26 %27 
                                                      OpStore %25 %28 
                                          f32 %29 = OpLoad %25 
                                          f32 %30 = OpExtInst %1 32 %29 
                                                      OpStore %25 %30 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpLoad %25 
                                        f32_3 %34 = OpCompositeConstruct %33 %33 %33 
                                        f32_3 %35 = OpFMul %32 %34 
                               Uniform f32_4* %38 = OpAccessChain %17 %36 
                                        f32_4 %39 = OpLoad %38 
                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                        f32_3 %41 = OpFAdd %35 %40 
                                                      OpStore %31 %41 
                                          f32 %42 = OpLoad %25 
                                        f32_3 %43 = OpCompositeConstruct %42 %42 %42 
                                        f32_3 %44 = OpLoad %9 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %9 %45 
                                        f32_3 %46 = OpLoad %31 
                                        f32_3 %47 = OpLoad %31 
                                          f32 %48 = OpDot %46 %47 
                                                      OpStore %25 %48 
                                          f32 %49 = OpLoad %25 
                                          f32 %51 = OpExtInst %1 40 %49 %50 
                                                      OpStore %25 %51 
                                          f32 %52 = OpLoad %25 
                                          f32 %53 = OpExtInst %1 32 %52 
                                                      OpStore %25 %53 
                                          f32 %54 = OpLoad %25 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpLoad %31 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %31 %57 
                                        f32_3 %59 = OpLoad vs_TEXCOORD1 
                                        f32_3 %60 = OpLoad vs_TEXCOORD1 
                                          f32 %61 = OpDot %59 %60 
                                                      OpStore %25 %61 
                                          f32 %62 = OpLoad %25 
                                          f32 %63 = OpExtInst %1 32 %62 
                                                      OpStore %25 %63 
                                          f32 %65 = OpLoad %25 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_3 %67 = OpLoad vs_TEXCOORD1 
                                        f32_3 %68 = OpFMul %66 %67 
                                                      OpStore %64 %68 
                                        f32_3 %69 = OpLoad %64 
                                        f32_3 %70 = OpLoad %31 
                                          f32 %71 = OpDot %69 %70 
                                                      OpStore %25 %71 
                                          f32 %72 = OpLoad %25 
                                          f32 %75 = OpExtInst %1 43 %72 %73 %74 
                                                      OpStore %25 %75 
                               Uniform f32_4* %76 = OpAccessChain %17 %36 
                                        f32_4 %77 = OpLoad %76 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpLoad %31 
                                          f32 %80 = OpDot %78 %79 
                                 Private f32* %83 = OpAccessChain %31 %82 
                                                      OpStore %83 %80 
                                 Private f32* %84 = OpAccessChain %31 %82 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpExtInst %1 43 %85 %73 %74 
                                 Private f32* %87 = OpAccessChain %31 %82 
                                                      OpStore %87 %86 
                                 Uniform f32* %91 = OpAccessChain %17 %89 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFNegate %92 
                                          f32 %94 = OpFAdd %93 %74 
                                                      OpStore %88 %94 
                                          f32 %96 = OpLoad %88 
                                          f32 %97 = OpLoad %88 
                                          f32 %98 = OpFMul %96 %97 
                                                      OpStore %95 %98 
                                          f32 %99 = OpLoad %95 
                                         f32 %101 = OpExtInst %1 40 %99 %100 
                                                      OpStore %95 %101 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpLoad %95 
                                         f32 %105 = OpFMul %103 %104 
                                                      OpStore %102 %105 
                                         f32 %107 = OpLoad %25 
                                         f32 %108 = OpLoad %102 
                                         f32 %109 = OpFMul %107 %108 
                                         f32 %110 = OpLoad %25 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %106 %112 
                                         f32 %113 = OpLoad %106 
                                         f32 %114 = OpLoad %25 
                                         f32 %115 = OpFMul %113 %114 
                                         f32 %116 = OpFAdd %115 %74 
                                                      OpStore %25 %116 
                                         f32 %117 = OpLoad %25 
                                         f32 %118 = OpLoad %25 
                                         f32 %119 = OpFMul %117 %118 
                                         f32 %121 = OpFAdd %119 %120 
                                                      OpStore %25 %121 
                                         f32 %122 = OpLoad %102 
                                         f32 %124 = OpFMul %122 %123 
                                                      OpStore %102 %124 
                                         f32 %125 = OpLoad %102 
                                         f32 %126 = OpLoad %25 
                                         f32 %127 = OpFDiv %125 %126 
                                                      OpStore %25 %127 
                                       f32_3 %128 = OpLoad %64 
                                       f32_3 %129 = OpLoad %9 
                                         f32 %130 = OpDot %128 %129 
                                Private f32* %131 = OpAccessChain %9 %82 
                                                      OpStore %131 %130 
                                       f32_3 %133 = OpLoad %64 
                              Uniform f32_4* %134 = OpAccessChain %17 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 43 %138 %73 %74 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %95 
                                         f32 %142 = OpFNegate %141 
                                         f32 %143 = OpFAdd %142 %74 
                                                      OpStore %140 %143 
                                Private f32* %144 = OpAccessChain %9 %82 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpExtInst %1 4 %145 
                                         f32 %147 = OpLoad %140 
                                         f32 %148 = OpFMul %146 %147 
                                         f32 %149 = OpLoad %95 
                                         f32 %150 = OpFAdd %148 %149 
                                                      OpStore %102 %150 
                                         f32 %151 = OpLoad %132 
                                         f32 %152 = OpLoad %140 
                                         f32 %153 = OpFMul %151 %152 
                                         f32 %154 = OpLoad %95 
                                         f32 %155 = OpFAdd %153 %154 
                                                      OpStore %140 %155 
                                         f32 %156 = OpLoad %140 
                                Private f32* %157 = OpAccessChain %9 %82 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpExtInst %1 4 %158 
                                         f32 %160 = OpFMul %156 %159 
                                                      OpStore %140 %160 
                                Private f32* %161 = OpAccessChain %9 %82 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpExtInst %1 4 %162 
                                         f32 %164 = OpFNegate %163 
                                         f32 %165 = OpFAdd %164 %74 
                                Private f32* %166 = OpAccessChain %9 %82 
                                                      OpStore %166 %165 
                                         f32 %167 = OpLoad %132 
                                         f32 %168 = OpLoad %102 
                                         f32 %169 = OpFMul %167 %168 
                                         f32 %170 = OpLoad %140 
                                         f32 %171 = OpFAdd %169 %170 
                                                      OpStore %140 %171 
                                         f32 %172 = OpLoad %140 
                                         f32 %174 = OpFAdd %172 %173 
                                                      OpStore %140 %174 
                                         f32 %176 = OpLoad %140 
                                         f32 %177 = OpFDiv %175 %176 
                                                      OpStore %140 %177 
                                         f32 %178 = OpLoad %25 
                                         f32 %179 = OpLoad %140 
                                         f32 %180 = OpFMul %178 %179 
                                                      OpStore %140 %180 
                                         f32 %181 = OpLoad %132 
                                         f32 %182 = OpLoad %140 
                                         f32 %183 = OpFMul %181 %182 
                                                      OpStore %140 %183 
                                         f32 %184 = OpLoad %140 
                                         f32 %186 = OpFMul %184 %185 
                                                      OpStore %140 %186 
                                         f32 %187 = OpLoad %140 
                                         f32 %188 = OpExtInst %1 40 %187 %73 
                                                      OpStore %140 %188 
                         read_only Texture2D %192 = OpLoad %191 
                                     sampler %196 = OpLoad %195 
                  read_only Texture2DSampled %198 = OpSampledImage %192 %196 
                                       f32_2 %202 = OpLoad vs_TEXCOORD0 
                                       f32_4 %203 = OpImageSampleImplicitLod %198 %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                                      OpStore %64 %204 
                                       f32_3 %206 = OpLoad %64 
                              Uniform f32_4* %208 = OpAccessChain %17 %207 
                                       f32_4 %209 = OpLoad %208 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %211 = OpFMul %206 %210 
                                       f32_3 %214 = OpFAdd %211 %213 
                                                      OpStore %205 %214 
                                       f32_3 %215 = OpLoad %64 
                              Uniform f32_4* %216 = OpAccessChain %17 %207 
                                       f32_4 %217 = OpLoad %216 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_3 %219 = OpFMul %215 %218 
                                                      OpStore %64 %219 
                                Uniform f32* %221 = OpAccessChain %17 %220 
                                         f32 %222 = OpLoad %221 
                                Uniform f32* %223 = OpAccessChain %17 %220 
                                         f32 %224 = OpLoad %223 
                                Uniform f32* %225 = OpAccessChain %17 %220 
                                         f32 %226 = OpLoad %225 
                                       f32_3 %227 = OpCompositeConstruct %222 %224 %226 
                                         f32 %228 = OpCompositeExtract %227 0 
                                         f32 %229 = OpCompositeExtract %227 1 
                                         f32 %230 = OpCompositeExtract %227 2 
                                       f32_3 %231 = OpCompositeConstruct %228 %229 %230 
                                       f32_3 %232 = OpLoad %205 
                                       f32_3 %233 = OpFMul %231 %232 
                                       f32_3 %236 = OpFAdd %233 %235 
                                                      OpStore %205 %236 
                                       f32_3 %237 = OpLoad %205 
                                       f32_3 %238 = OpLoad %205 
                                         f32 %239 = OpDot %237 %238 
                                                      OpStore %25 %239 
                                         f32 %243 = OpLoad %25 
                                        bool %244 = OpFOrdNotEqual %243 %73 
                                                      OpStore %242 %244 
                                        bool %245 = OpLoad %242 
                                         f32 %246 = OpSelect %245 %74 %73 
                                                      OpStore %25 %246 
                                         f32 %247 = OpLoad %25 
                                         f32 %248 = OpLoad %140 
                                         f32 %249 = OpFMul %247 %248 
                                                      OpStore %140 %249 
                                         f32 %251 = OpLoad %140 
                                       f32_3 %252 = OpCompositeConstruct %251 %251 %251 
                              Uniform f32_4* %254 = OpAccessChain %17 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFMul %252 %256 
                                                      OpStore %250 %257 
                                Private f32* %258 = OpAccessChain %31 %82 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFNegate %259 
                                         f32 %261 = OpFAdd %260 %74 
                                                      OpStore %140 %261 
                                Private f32* %262 = OpAccessChain %31 %82 
                                         f32 %263 = OpLoad %262 
                                Private f32* %264 = OpAccessChain %31 %82 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %263 %265 
                                                      OpStore %25 %266 
                                         f32 %267 = OpLoad %25 
                                       f32_2 %268 = OpCompositeConstruct %267 %267 
                                         f32 %269 = OpLoad %88 
                                       f32_2 %270 = OpCompositeConstruct %269 %269 
                                         f32 %271 = OpDot %268 %270 
                                                      OpStore %25 %271 
                                         f32 %272 = OpLoad %25 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %25 %274 
                                         f32 %275 = OpLoad %140 
                                         f32 %276 = OpLoad %140 
                                         f32 %277 = OpFMul %275 %276 
                                Private f32* %278 = OpAccessChain %31 %82 
                                                      OpStore %278 %277 
                                Private f32* %279 = OpAccessChain %31 %82 
                                         f32 %280 = OpLoad %279 
                                Private f32* %281 = OpAccessChain %31 %82 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %280 %282 
                                Private f32* %284 = OpAccessChain %31 %82 
                                                      OpStore %284 %283 
                                         f32 %285 = OpLoad %140 
                                Private f32* %286 = OpAccessChain %31 %82 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpFMul %285 %287 
                                                      OpStore %140 %288 
                                       f32_3 %289 = OpLoad %205 
                                       f32_3 %290 = OpFNegate %289 
                                       f32_3 %292 = OpFAdd %290 %291 
                                                      OpStore %31 %292 
                                       f32_3 %293 = OpLoad %31 
                                         f32 %294 = OpLoad %140 
                                       f32_3 %295 = OpCompositeConstruct %294 %294 %294 
                                       f32_3 %296 = OpFMul %293 %295 
                                       f32_3 %297 = OpLoad %205 
                                       f32_3 %298 = OpFAdd %296 %297 
                                                      OpStore %31 %298 
                                       f32_3 %299 = OpLoad %31 
                                       f32_3 %300 = OpLoad %250 
                                       f32_3 %301 = OpFMul %299 %300 
                                                      OpStore %31 %301 
                                Private f32* %302 = OpAccessChain %9 %82 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %9 %82 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                                      OpStore %140 %306 
                                         f32 %307 = OpLoad %140 
                                         f32 %308 = OpLoad %140 
                                         f32 %309 = OpFMul %307 %308 
                                                      OpStore %140 %309 
                                Private f32* %310 = OpAccessChain %9 %82 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpLoad %140 
                                         f32 %313 = OpFMul %311 %312 
                                Private f32* %314 = OpAccessChain %9 %82 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %25 
                                Private f32* %316 = OpAccessChain %9 %82 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                         f32 %319 = OpFAdd %318 %74 
                                Private f32* %320 = OpAccessChain %9 %82 
                                                      OpStore %320 %319 
                                         f32 %321 = OpLoad %132 
                                         f32 %322 = OpFNegate %321 
                                         f32 %323 = OpFAdd %322 %74 
                                                      OpStore %140 %323 
                                         f32 %324 = OpLoad %140 
                                         f32 %325 = OpLoad %140 
                                         f32 %326 = OpFMul %324 %325 
                                                      OpStore %102 %326 
                                         f32 %327 = OpLoad %102 
                                         f32 %328 = OpLoad %102 
                                         f32 %329 = OpFMul %327 %328 
                                                      OpStore %102 %329 
                                         f32 %330 = OpLoad %140 
                                         f32 %331 = OpLoad %102 
                                         f32 %332 = OpFMul %330 %331 
                                                      OpStore %140 %332 
                                         f32 %333 = OpLoad %25 
                                         f32 %334 = OpLoad %140 
                                         f32 %335 = OpFMul %333 %334 
                                         f32 %336 = OpFAdd %335 %74 
                                                      OpStore %140 %336 
                                Private f32* %337 = OpAccessChain %9 %82 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpLoad %140 
                                         f32 %340 = OpFMul %338 %339 
                                Private f32* %341 = OpAccessChain %9 %82 
                                                      OpStore %341 %340 
                                         f32 %342 = OpLoad %132 
                                Private f32* %343 = OpAccessChain %9 %82 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFMul %342 %344 
                                Private f32* %346 = OpAccessChain %9 %82 
                                                      OpStore %346 %345 
                                       f32_3 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 0 0 
                              Uniform f32_4* %349 = OpAccessChain %17 %253 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %348 %351 
                                                      OpStore %9 %352 
                                Uniform f32* %353 = OpAccessChain %17 %220 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpFNegate %354 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %358 = OpFAdd %357 %356 
                                                      OpStore %25 %358 
                                         f32 %359 = OpLoad %25 
                                       f32_3 %360 = OpCompositeConstruct %359 %359 %359 
                                       f32_3 %361 = OpLoad %64 
                                       f32_3 %362 = OpFMul %360 %361 
                                                      OpStore %64 %362 
                                       f32_3 %365 = OpLoad %64 
                                       f32_3 %366 = OpLoad %9 
                                       f32_3 %367 = OpFMul %365 %366 
                                       f32_3 %368 = OpLoad %31 
                                       f32_3 %369 = OpFAdd %367 %368 
                                       f32_4 %370 = OpLoad %364 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %364 %371 
                                 Output f32* %374 = OpAccessChain %364 %372 
                                                      OpStore %374 %74 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat11;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5 = float(_numOfFrames);
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat5;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat0.x = u_xlat5 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat11)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat11 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat11);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
bool u_xlatb13;
float u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb18 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat8.x = u_xlat13 * u_xlat13;
    u_xlat14 = u_xlat18 * u_xlat8.x + (-u_xlat18);
    u_xlat18 = u_xlat14 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat8.x = u_xlat8.x * 0.318309873;
    u_xlat18 = u_xlat8.x / u_xlat18;
    u_xlat8.x = (-u_xlat13) + 1.0;
    u_xlat14 = abs(u_xlat1.x) * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat13 * abs(u_xlat1.x);
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
    u_xlat13 = u_xlat13 + 9.99999975e-06;
    u_xlat13 = 0.5 / u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat19 * u_xlat19;
    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
    u_xlat7 = u_xlat7 + -0.5;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 423
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %68 %159 %216 %227 %228 %365 %371 %408 %416 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %68 Location 68 
                                                      OpDecorate %80 DescriptorSet 80 
                                                      OpDecorate %80 Binding 80 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %95 DescriptorSet 95 
                                                      OpDecorate %95 Binding 95 
                                                      OpDecorate %159 Location 159 
                                                      OpMemberDecorate %214 0 BuiltIn 214 
                                                      OpMemberDecorate %214 1 BuiltIn 214 
                                                      OpMemberDecorate %214 2 BuiltIn 214 
                                                      OpDecorate %214 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 227 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate vs_TEXCOORD1 Location 365 
                                                      OpDecorate vs_TEXCOORD2 Location 371 
                                                      OpDecorate vs_TEXCOORD3 Location 408 
                                                      OpDecorate vs_TEXCOORD4 Location 416 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeArray %7 %11 
                                              %16 = OpTypeInt 32 1 
                                              %17 = OpTypeStruct %7 %12 %13 %14 %15 %6 %6 %6 %6 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %19 = OpVariable Uniform 
                                          i32 %20 = OpConstant 0 
                                          u32 %21 = OpConstant 1 
                                              %22 = OpTypePointer Uniform %6 
                                          i32 %26 = OpConstant 8 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %37 = OpVariable Private 
                                          i32 %38 = OpConstant 9 
                                              %39 = OpTypePointer Uniform %16 
                                          f32 %57 = OpConstant 3.674022E-40 
                                              %67 = OpTypePointer Input %7 
                                 Input f32_4* %68 = OpVariable Input 
                                              %69 = OpTypePointer Input %6 
                               Private f32_4* %77 = OpVariable Private 
                                              %78 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %79 = OpTypePointer UniformConstant %78 
         UniformConstant read_only Texture2D* %80 = OpVariable UniformConstant 
                                              %82 = OpTypeSampler 
                                              %83 = OpTypePointer UniformConstant %82 
                     UniformConstant sampler* %84 = OpVariable UniformConstant 
                                              %86 = OpTypeSampledImage %78 
                                              %88 = OpTypeVector %6 2 
                                          f32 %91 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %93 = OpVariable UniformConstant 
                     UniformConstant sampler* %95 = OpVariable UniformConstant 
                                             %101 = OpTypeVector %6 3 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_3 %108 = OpConstantComposite %107 %107 %107 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_3 %111 = OpConstantComposite %110 %110 %110 
                              Private f32_4* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 7 
                                         i32 %120 = OpConstant 6 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_2 %148 = OpConstantComposite %146 %147 
                                         u32 %155 = OpConstant 3 
                                Input f32_4* %159 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                              Private f32_4* %193 = OpVariable Private 
                                             %213 = OpTypeArray %6 %21 
                                             %214 = OpTypeStruct %7 %6 %213 
                                             %215 = OpTypePointer Output %214 
        Output struct {f32_4; f32; f32[1];}* %216 = OpVariable Output 
                                             %224 = OpTypePointer Output %7 
                                             %226 = OpTypePointer Output %88 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %228 = OpVariable Input 
                                         i32 %231 = OpConstant 10 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_2 %255 = OpConstantComposite %254 %254 
                                         f32 %257 = OpConstant 3.674022E-40 
                                       f32_2 %258 = OpConstantComposite %257 %257 
                                Private f32* %262 = OpVariable Private 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %272 = OpConstant 3.674022E-40 
                                       f32_2 %273 = OpConstantComposite %271 %272 
                                       f32_2 %275 = OpConstantComposite %57 %57 
                                         u32 %279 = OpConstant 2 
                                       f32_3 %297 = OpConstantComposite %57 %57 %57 
                                             %309 = OpTypeBool 
                                             %310 = OpTypePointer Private %309 
                               Private bool* %311 = OpVariable Private 
                                       f32_4 %312 = OpConstantComposite %91 %91 %91 %91 
                                         i32 %313 = OpConstant 5 
                                             %317 = OpTypeVector %309 4 
                                             %321 = OpTypePointer Function %101 
                                             %364 = OpTypePointer Output %101 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %390 = OpConstant 4 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                             %417 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %322 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %19 %20 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpFNegate %24 
                                 Uniform f32* %27 = OpAccessChain %19 %26 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFMul %25 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %9 %30 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 10 %34 
                                 Private f32* %36 = OpAccessChain %9 %30 
                                                      OpStore %36 %35 
                                 Uniform i32* %40 = OpAccessChain %19 %38 
                                          i32 %41 = OpLoad %40 
                                          f32 %42 = OpConvertSToF %41 
                                                      OpStore %37 %42 
                                          f32 %43 = OpLoad %37 
                                 Private f32* %44 = OpAccessChain %9 %30 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Private f32* %47 = OpAccessChain %9 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 9 %49 
                                 Private f32* %51 = OpAccessChain %9 %30 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %9 %30 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %37 
                                          f32 %55 = OpFDiv %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %30 
                                                      OpStore %56 %55 
                                          f32 %58 = OpLoad %37 
                                          f32 %59 = OpFDiv %57 %58 
                                                      OpStore %37 %59 
                                          f32 %60 = OpLoad %37 
                                 Private f32* %61 = OpAccessChain %9 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %30 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %30 
                                          f32 %66 = OpLoad %65 
                                   Input f32* %70 = OpAccessChain %68 %21 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %66 %71 
                                 Private f32* %73 = OpAccessChain %9 %21 
                                                      OpStore %73 %72 
                                   Input f32* %74 = OpAccessChain %68 %30 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %30 
                                                      OpStore %76 %75 
                          read_only Texture2D %81 = OpLoad %80 
                                      sampler %85 = OpLoad %84 
                   read_only Texture2DSampled %87 = OpSampledImage %81 %85 
                                        f32_4 %89 = OpLoad %9 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                        f32_4 %92 = OpImageSampleExplicitLod %87 %90 Lod %7 
                                                      OpStore %77 %92 
                          read_only Texture2D %94 = OpLoad %93 
                                      sampler %96 = OpLoad %95 
                   read_only Texture2DSampled %97 = OpSampledImage %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_4 %100 = OpImageSampleExplicitLod %97 %99 Lod %7 
                                       f32_3 %102 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %9 %104 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 2 1 
                                       f32_3 %109 = OpFMul %106 %108 
                                       f32_3 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 6 3 
                                                      OpStore %9 %114 
                                Uniform f32* %117 = OpAccessChain %19 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Uniform f32* %121 = OpAccessChain %19 %120 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %119 %122 
                                Private f32* %124 = OpAccessChain %115 %30 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %115 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_3 %129 = OpFMul %126 %128 
                                Uniform f32* %130 = OpAccessChain %19 %116 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %132 = OpAccessChain %19 %116 
                                         f32 %133 = OpLoad %132 
                                Uniform f32* %134 = OpAccessChain %19 %116 
                                         f32 %135 = OpLoad %134 
                                       f32_3 %136 = OpCompositeConstruct %131 %133 %135 
                                         f32 %137 = OpCompositeExtract %136 0 
                                         f32 %138 = OpCompositeExtract %136 1 
                                         f32 %139 = OpCompositeExtract %136 2 
                                       f32_3 %140 = OpCompositeConstruct %137 %138 %139 
                                       f32_3 %141 = OpFAdd %129 %140 
                                       f32_4 %142 = OpLoad %115 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %115 %143 
                                       f32_4 %144 = OpLoad %77 
                                       f32_2 %145 = OpVectorShuffle %144 %144 3 3 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_4 %150 = OpLoad %77 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %77 %151 
                                Private f32* %152 = OpAccessChain %115 %30 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                Private f32* %156 = OpAccessChain %115 %155 
                                                      OpStore %156 %154 
                                       f32_4 %157 = OpLoad %115 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 2 1 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %158 %161 
                                       f32_4 %163 = OpLoad %115 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %115 %164 
                                       f32_4 %166 = OpLoad %115 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %19 %168 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %167 %171 
                                                      OpStore %165 %172 
                              Uniform f32_4* %173 = OpAccessChain %19 %168 %20 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %115 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %165 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %165 %179 
                              Uniform f32_4* %181 = OpAccessChain %19 %168 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %115 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %165 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %115 %187 
                                       f32_4 %188 = OpLoad %115 
                              Uniform f32_4* %190 = OpAccessChain %19 %168 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %165 %192 
                                       f32_4 %194 = OpLoad %165 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %19 %189 %168 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFMul %195 %197 
                                                      OpStore %193 %198 
                              Uniform f32_4* %199 = OpAccessChain %19 %189 %20 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %165 
                                       f32_4 %202 = OpVectorShuffle %201 %201 0 0 0 0 
                                       f32_4 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %193 
                                       f32_4 %205 = OpFAdd %203 %204 
                                                      OpStore %193 %205 
                              Uniform f32_4* %206 = OpAccessChain %19 %189 %180 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %165 
                                       f32_4 %209 = OpVectorShuffle %208 %208 2 2 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %193 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %193 %212 
                              Uniform f32_4* %217 = OpAccessChain %19 %189 %189 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %165 
                                       f32_4 %220 = OpVectorShuffle %219 %219 3 3 3 3 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %193 
                                       f32_4 %223 = OpFAdd %221 %222 
                               Output f32_4* %225 = OpAccessChain %216 %20 
                                                      OpStore %225 %223 
                                       f32_4 %229 = OpLoad %228 
                                       f32_2 %230 = OpVectorShuffle %229 %229 0 1 
                              Uniform f32_4* %232 = OpAccessChain %19 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_2 %234 = OpVectorShuffle %233 %233 0 1 
                                       f32_2 %235 = OpFMul %230 %234 
                              Uniform f32_4* %236 = OpAccessChain %19 %231 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 2 3 
                                       f32_2 %239 = OpFAdd %235 %238 
                                                      OpStore vs_TEXCOORD0 %239 
                                Private f32* %240 = OpAccessChain %77 %21 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 8 %241 
                                Private f32* %243 = OpAccessChain %165 %30 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %165 %30 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFNegate %245 
                                         f32 %247 = OpFMul %246 %147 
                                Private f32* %248 = OpAccessChain %77 %30 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %247 %249 
                                Private f32* %251 = OpAccessChain %165 %21 
                                                      OpStore %251 %250 
                                       f32_4 %252 = OpLoad %165 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %256 = OpFMul %253 %255 
                                       f32_2 %259 = OpFAdd %256 %258 
                                       f32_4 %260 = OpLoad %77 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 2 3 
                                                      OpStore %77 %261 
                                       f32_4 %263 = OpLoad %77 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                       f32_4 %265 = OpLoad %77 
                                       f32_2 %266 = OpVectorShuffle %265 %265 0 1 
                                         f32 %267 = OpDot %264 %266 
                                                      OpStore %262 %267 
                                         f32 %268 = OpLoad %262 
                                       f32_2 %269 = OpCompositeConstruct %268 %268 
                                       f32_2 %270 = OpFNegate %269 
                                       f32_2 %274 = OpFMul %270 %273 
                                       f32_2 %276 = OpFAdd %274 %275 
                                       f32_4 %277 = OpLoad %165 
                                       f32_4 %278 = OpVectorShuffle %277 %276 0 1 4 5 
                                                      OpStore %165 %278 
                                Private f32* %280 = OpAccessChain %165 %279 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 31 %281 
                                                      OpStore %262 %282 
                                       f32_4 %283 = OpLoad %77 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                         f32 %285 = OpLoad %262 
                                       f32_2 %286 = OpCompositeConstruct %285 %285 
                                       f32_2 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %165 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 2 3 
                                                      OpStore %165 %289 
                                       f32_4 %290 = OpLoad %165 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 3 
                                       f32_3 %292 = OpExtInst %1 40 %291 %111 
                                       f32_4 %293 = OpLoad %77 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %77 %294 
                                       f32_4 %295 = OpLoad %77 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %298 = OpExtInst %1 37 %296 %297 
                                       f32_4 %299 = OpLoad %77 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %77 %300 
                                Private f32* %301 = OpAccessChain %77 %30 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFNegate %302 
                                Private f32* %304 = OpAccessChain %77 %155 
                                                      OpStore %304 %303 
                                Private f32* %305 = OpAccessChain %9 %30 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpFNegate %306 
                                Private f32* %308 = OpAccessChain %9 %155 
                                                      OpStore %308 %307 
                                Uniform f32* %314 = OpAccessChain %19 %313 
                                         f32 %315 = OpLoad %314 
                                       f32_4 %316 = OpCompositeConstruct %315 %315 %315 %315 
                                      bool_4 %318 = OpFOrdNotEqual %312 %316 
                                        bool %319 = OpAny %318 
                                                      OpStore %311 %319 
                                        bool %320 = OpLoad %311 
                                                      OpSelectionMerge %324 None 
                                                      OpBranchConditional %320 %323 %327 
                                             %323 = OpLabel 
                                       f32_4 %325 = OpLoad %77 
                                       f32_3 %326 = OpVectorShuffle %325 %325 3 2 1 
                                                      OpStore %322 %326 
                                                      OpBranch %324 
                                             %327 = OpLabel 
                                       f32_4 %328 = OpLoad %9 
                                       f32_3 %329 = OpVectorShuffle %328 %328 3 1 2 
                                                      OpStore %322 %329 
                                                      OpBranch %324 
                                             %324 = OpLabel 
                                       f32_3 %330 = OpLoad %322 
                                       f32_4 %331 = OpLoad %9 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
                                                      OpStore %9 %332 
                                       f32_4 %333 = OpLoad %9 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                              Uniform f32_4* %335 = OpAccessChain %19 %180 %20 
                                       f32_4 %336 = OpLoad %335 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                         f32 %338 = OpDot %334 %337 
                                Private f32* %339 = OpAccessChain %77 %30 
                                                      OpStore %339 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                              Uniform f32_4* %342 = OpAccessChain %19 %180 %168 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                         f32 %345 = OpDot %341 %344 
                                Private f32* %346 = OpAccessChain %77 %21 
                                                      OpStore %346 %345 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                              Uniform f32_4* %349 = OpAccessChain %19 %180 %180 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                         f32 %352 = OpDot %348 %351 
                                Private f32* %353 = OpAccessChain %77 %279 
                                                      OpStore %353 %352 
                                       f32_4 %354 = OpLoad %77 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %77 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                         f32 %358 = OpDot %355 %357 
                                Private f32* %359 = OpAccessChain %9 %30 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %9 %30 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpExtInst %1 32 %361 
                                Private f32* %363 = OpAccessChain %9 %30 
                                                      OpStore %363 %362 
                                       f32_4 %366 = OpLoad %9 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 0 0 
                                       f32_4 %368 = OpLoad %77 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFMul %367 %369 
                                                      OpStore vs_TEXCOORD1 %370 
                              Uniform f32_4* %372 = OpAccessChain %19 %168 %189 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_4 %375 = OpLoad %159 
                                       f32_3 %376 = OpVectorShuffle %375 %375 3 3 3 
                                       f32_3 %377 = OpFMul %374 %376 
                                       f32_4 %378 = OpLoad %115 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore vs_TEXCOORD2 %380 
                              Uniform f32_4* %381 = OpAccessChain %19 %168 %189 
                                       f32_4 %382 = OpLoad %381 
                                       f32_4 %383 = OpLoad %159 
                                       f32_4 %384 = OpVectorShuffle %383 %383 3 3 3 3 
                                       f32_4 %385 = OpFMul %382 %384 
                                       f32_4 %386 = OpLoad %115 
                                       f32_4 %387 = OpFAdd %385 %386 
                                                      OpStore %9 %387 
                                       f32_4 %388 = OpLoad %9 
                                       f32_4 %389 = OpVectorShuffle %388 %388 1 1 1 1 
                              Uniform f32_4* %391 = OpAccessChain %19 %390 %168 
                                       f32_4 %392 = OpLoad %391 
                                       f32_4 %393 = OpFMul %389 %392 
                                                      OpStore %77 %393 
                              Uniform f32_4* %394 = OpAccessChain %19 %390 %20 
                                       f32_4 %395 = OpLoad %394 
                                       f32_4 %396 = OpLoad %9 
                                       f32_4 %397 = OpVectorShuffle %396 %396 0 0 0 0 
                                       f32_4 %398 = OpFMul %395 %397 
                                       f32_4 %399 = OpLoad %77 
                                       f32_4 %400 = OpFAdd %398 %399 
                                                      OpStore %77 %400 
                              Uniform f32_4* %401 = OpAccessChain %19 %390 %180 
                                       f32_4 %402 = OpLoad %401 
                                       f32_4 %403 = OpLoad %9 
                                       f32_4 %404 = OpVectorShuffle %403 %403 2 2 2 2 
                                       f32_4 %405 = OpFMul %402 %404 
                                       f32_4 %406 = OpLoad %77 
                                       f32_4 %407 = OpFAdd %405 %406 
                                                      OpStore %77 %407 
                              Uniform f32_4* %409 = OpAccessChain %19 %390 %189 
                                       f32_4 %410 = OpLoad %409 
                                       f32_4 %411 = OpLoad %9 
                                       f32_4 %412 = OpVectorShuffle %411 %411 3 3 3 3 
                                       f32_4 %413 = OpFMul %410 %412 
                                       f32_4 %414 = OpLoad %77 
                                       f32_4 %415 = OpFAdd %413 %414 
                                                      OpStore vs_TEXCOORD3 %415 
                                                      OpStore vs_TEXCOORD4 %312 
                                 Output f32* %418 = OpAccessChain %216 %20 %21 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFNegate %419 
                                 Output f32* %421 = OpAccessChain %216 %20 %21 
                                                      OpStore %421 %420 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 481
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %177 %315 %469 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %73 DescriptorSet 73 
                                                      OpDecorate %73 Binding 73 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate vs_TEXCOORD1 Location 177 
                                                      OpDecorate %309 DescriptorSet 309 
                                                      OpDecorate %309 Binding 309 
                                                      OpDecorate %311 DescriptorSet 311 
                                                      OpDecorate %311 Binding 311 
                                                      OpDecorate vs_TEXCOORD0 Location 315 
                                                      OpDecorate %469 Location 469 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %17 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 3 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                              %48 = OpTypePointer Private %10 
                               Private f32_3* %49 = OpVariable Private 
                                              %50 = OpTypeVector %6 2 
                                          f32 %60 = OpConstant 3.674022E-40 
                                        f32_2 %61 = OpConstantComposite %60 %60 
                                              %65 = OpTypePointer Private %6 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %68 = OpTypePointer UniformConstant %67 
         UniformConstant read_only Texture2D* %69 = OpVariable UniformConstant 
                                              %71 = OpTypeSampler 
                                              %72 = OpTypePointer UniformConstant %71 
                     UniformConstant sampler* %73 = OpVariable UniformConstant 
                                              %75 = OpTypeSampledImage %67 
                                          u32 %80 = OpConstant 3 
                                              %82 = OpTypeBool 
                                              %83 = OpTypePointer Private %82 
                                Private bool* %84 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          u32 %86 = OpConstant 2 
                                          u32 %95 = OpConstant 0 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                     UniformConstant sampler* %99 = OpVariable UniformConstant 
                                Private f32* %107 = OpVariable Private 
                                         f32 %109 = OpConstant 3.674022E-40 
                                             %129 = OpTypePointer Uniform %10 
                              Private f32_3* %142 = OpVariable Private 
                              Private f32_3* %154 = OpVariable Private 
                                         f32 %169 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %183 = OpVariable Private 
                                Private f32* %193 = OpVariable Private 
                                Private f32* %211 = OpVariable Private 
                                         i32 %212 = OpConstant 4 
                                             %213 = OpTypePointer Uniform %6 
                                Private f32* %218 = OpVariable Private 
                                         f32 %223 = OpConstant 3.674022E-40 
                              Private f32_3* %225 = OpVariable Private 
                                Private f32* %230 = OpVariable Private 
                                         f32 %245 = OpConstant 3.674022E-40 
                                         f32 %249 = OpConstant 3.674022E-40 
                                         f32 %293 = OpConstant 3.674022E-40 
                                         f32 %305 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %309 = OpVariable UniformConstant 
                    UniformConstant sampler* %311 = OpVariable UniformConstant 
                                             %314 = OpTypePointer Input %50 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %320 = OpConstant 6 
                                         f32 %325 = OpConstant 3.674022E-40 
                                       f32_3 %326 = OpConstantComposite %325 %325 %325 
                                         i32 %333 = OpConstant 5 
                                         f32 %347 = OpConstant 3.674022E-40 
                                       f32_3 %348 = OpConstantComposite %347 %347 %347 
                               Private bool* %353 = OpVariable Private 
                                         f32 %378 = OpConstant 3.674022E-40 
                              Private f32_3* %389 = OpVariable Private 
                                       f32_3 %392 = OpConstantComposite %109 %109 %109 
                                         f32 %461 = OpConstant 3.674022E-40 
                                             %468 = OpTypePointer Output %7 
                               Output f32_4* %469 = OpVariable Output 
                                             %478 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %14 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpLoad vs_TEXCOORD2 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %20 %22 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %20 %22 %22 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFAdd %44 %46 
                                                      OpStore %9 %47 
                                        f32_4 %51 = OpLoad %9 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpLoad %9 
                                        f32_2 %54 = OpVectorShuffle %53 %53 3 3 
                                        f32_2 %55 = OpFDiv %52 %54 
                                        f32_3 %56 = OpLoad %49 
                                        f32_3 %57 = OpVectorShuffle %56 %55 3 4 2 
                                                      OpStore %49 %57 
                                        f32_3 %58 = OpLoad %49 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_2 %62 = OpFAdd %59 %61 
                                        f32_3 %63 = OpLoad %49 
                                        f32_3 %64 = OpVectorShuffle %63 %62 3 4 2 
                                                      OpStore %49 %64 
                          read_only Texture2D %70 = OpLoad %69 
                                      sampler %74 = OpLoad %73 
                   read_only Texture2DSampled %76 = OpSampledImage %70 %74 
                                        f32_3 %77 = OpLoad %49 
                                        f32_2 %78 = OpVectorShuffle %77 %77 0 1 
                                        f32_4 %79 = OpImageSampleImplicitLod %76 %78 
                                          f32 %81 = OpCompositeExtract %79 3 
                                                      OpStore %66 %81 
                                 Private f32* %87 = OpAccessChain %9 %86 
                                          f32 %88 = OpLoad %87 
                                         bool %89 = OpFOrdLessThan %85 %88 
                                                      OpStore %84 %89 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                 Private f32* %96 = OpAccessChain %9 %95 
                                                      OpStore %96 %94 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %100 = OpLoad %99 
                  read_only Texture2DSampled %101 = OpSampledImage %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 0 
                                       f32_4 %104 = OpImageSampleImplicitLod %101 %103 
                                         f32 %105 = OpCompositeExtract %104 0 
                                Private f32* %106 = OpAccessChain %9 %95 
                                                      OpStore %106 %105 
                                        bool %108 = OpLoad %84 
                                         f32 %110 = OpSelect %108 %109 %85 
                                                      OpStore %107 %110 
                                         f32 %111 = OpLoad %66 
                                         f32 %112 = OpLoad %107 
                                         f32 %113 = OpFMul %111 %112 
                                                      OpStore %107 %113 
                                Private f32* %114 = OpAccessChain %9 %95 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpLoad %107 
                                         f32 %117 = OpFMul %115 %116 
                                Private f32* %118 = OpAccessChain %9 %95 
                                                      OpStore %118 %117 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                              Uniform f32_4* %121 = OpAccessChain %20 %36 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %120 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %9 %126 
                                       f32_3 %127 = OpLoad vs_TEXCOORD2 
                                       f32_3 %128 = OpFNegate %127 
                              Uniform f32_3* %130 = OpAccessChain %20 %28 
                                       f32_3 %131 = OpLoad %130 
                                       f32_3 %132 = OpFAdd %128 %131 
                                                      OpStore %49 %132 
                                       f32_3 %133 = OpLoad %49 
                                       f32_3 %134 = OpLoad %49 
                                         f32 %135 = OpDot %133 %134 
                                                      OpStore %66 %135 
                                         f32 %136 = OpLoad %66 
                                         f32 %137 = OpExtInst %1 32 %136 
                                                      OpStore %66 %137 
                                         f32 %138 = OpLoad %66 
                                       f32_3 %139 = OpCompositeConstruct %138 %138 %138 
                                       f32_3 %140 = OpLoad %49 
                                       f32_3 %141 = OpFMul %139 %140 
                                                      OpStore %49 %141 
                                       f32_3 %143 = OpLoad vs_TEXCOORD2 
                                       f32_3 %144 = OpFNegate %143 
                              Uniform f32_4* %145 = OpAccessChain %20 %23 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %144 %147 
                                                      OpStore %142 %148 
                                       f32_3 %149 = OpLoad %142 
                                       f32_3 %150 = OpLoad %142 
                                         f32 %151 = OpDot %149 %150 
                                                      OpStore %66 %151 
                                         f32 %152 = OpLoad %66 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %66 %153 
                                       f32_3 %155 = OpLoad %142 
                                         f32 %156 = OpLoad %66 
                                       f32_3 %157 = OpCompositeConstruct %156 %156 %156 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_3 %159 = OpLoad %49 
                                       f32_3 %160 = OpFAdd %158 %159 
                                                      OpStore %154 %160 
                                         f32 %161 = OpLoad %66 
                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
                                       f32_3 %163 = OpLoad %142 
                                       f32_3 %164 = OpFMul %162 %163 
                                                      OpStore %142 %164 
                                       f32_3 %165 = OpLoad %154 
                                       f32_3 %166 = OpLoad %154 
                                         f32 %167 = OpDot %165 %166 
                                                      OpStore %66 %167 
                                         f32 %168 = OpLoad %66 
                                         f32 %170 = OpExtInst %1 40 %168 %169 
                                                      OpStore %66 %170 
                                         f32 %171 = OpLoad %66 
                                         f32 %172 = OpExtInst %1 32 %171 
                                                      OpStore %66 %172 
                                         f32 %173 = OpLoad %66 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpLoad %154 
                                       f32_3 %176 = OpFMul %174 %175 
                                                      OpStore %154 %176 
                                       f32_3 %178 = OpLoad vs_TEXCOORD1 
                                       f32_3 %179 = OpLoad vs_TEXCOORD1 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %66 %180 
                                         f32 %181 = OpLoad %66 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %66 %182 
                                         f32 %184 = OpLoad %66 
                                       f32_3 %185 = OpCompositeConstruct %184 %184 %184 
                                       f32_3 %186 = OpLoad vs_TEXCOORD1 
                                       f32_3 %187 = OpFMul %185 %186 
                                                      OpStore %183 %187 
                                       f32_3 %188 = OpLoad %183 
                                       f32_3 %189 = OpLoad %154 
                                         f32 %190 = OpDot %188 %189 
                                                      OpStore %66 %190 
                                         f32 %191 = OpLoad %66 
                                         f32 %192 = OpExtInst %1 43 %191 %85 %109 
                                                      OpStore %66 %192 
                                       f32_3 %194 = OpLoad %142 
                                       f32_3 %195 = OpLoad %154 
                                         f32 %196 = OpDot %194 %195 
                                                      OpStore %193 %196 
                                         f32 %197 = OpLoad %193 
                                         f32 %198 = OpExtInst %1 43 %197 %85 %109 
                                                      OpStore %193 %198 
                                       f32_3 %199 = OpLoad %183 
                                       f32_3 %200 = OpLoad %142 
                                         f32 %201 = OpDot %199 %200 
                                Private f32* %202 = OpAccessChain %142 %95 
                                                      OpStore %202 %201 
                                Private f32* %203 = OpAccessChain %142 %95 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpExtInst %1 43 %204 %85 %109 
                                Private f32* %206 = OpAccessChain %142 %95 
                                                      OpStore %206 %205 
                                       f32_3 %207 = OpLoad %183 
                                       f32_3 %208 = OpLoad %49 
                                         f32 %209 = OpDot %207 %208 
                                Private f32* %210 = OpAccessChain %49 %95 
                                                      OpStore %210 %209 
                                Uniform f32* %214 = OpAccessChain %20 %212 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFNegate %215 
                                         f32 %217 = OpFAdd %216 %109 
                                                      OpStore %211 %217 
                                         f32 %219 = OpLoad %211 
                                         f32 %220 = OpLoad %211 
                                         f32 %221 = OpFMul %219 %220 
                                                      OpStore %218 %221 
                                         f32 %222 = OpLoad %218 
                                         f32 %224 = OpExtInst %1 40 %222 %223 
                                                      OpStore %218 %224 
                                         f32 %226 = OpLoad %218 
                                         f32 %227 = OpLoad %218 
                                         f32 %228 = OpFMul %226 %227 
                                Private f32* %229 = OpAccessChain %225 %95 
                                                      OpStore %229 %228 
                                         f32 %231 = OpLoad %66 
                                Private f32* %232 = OpAccessChain %225 %95 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFMul %231 %233 
                                         f32 %235 = OpLoad %66 
                                         f32 %236 = OpFNegate %235 
                                         f32 %237 = OpFAdd %234 %236 
                                                      OpStore %230 %237 
                                         f32 %238 = OpLoad %230 
                                         f32 %239 = OpLoad %66 
                                         f32 %240 = OpFMul %238 %239 
                                         f32 %241 = OpFAdd %240 %109 
                                                      OpStore %66 %241 
                                         f32 %242 = OpLoad %66 
                                         f32 %243 = OpLoad %66 
                                         f32 %244 = OpFMul %242 %243 
                                         f32 %246 = OpFAdd %244 %245 
                                                      OpStore %66 %246 
                                Private f32* %247 = OpAccessChain %225 %95 
                                         f32 %248 = OpLoad %247 
                                         f32 %250 = OpFMul %248 %249 
                                Private f32* %251 = OpAccessChain %225 %95 
                                                      OpStore %251 %250 
                                Private f32* %252 = OpAccessChain %225 %95 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpLoad %66 
                                         f32 %255 = OpFDiv %253 %254 
                                                      OpStore %66 %255 
                                         f32 %256 = OpLoad %218 
                                         f32 %257 = OpFNegate %256 
                                         f32 %258 = OpFAdd %257 %109 
                                Private f32* %259 = OpAccessChain %225 %95 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %49 %95 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpExtInst %1 4 %261 
                                Private f32* %263 = OpAccessChain %225 %95 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFMul %262 %264 
                                         f32 %266 = OpLoad %218 
                                         f32 %267 = OpFAdd %265 %266 
                                                      OpStore %230 %267 
                                Private f32* %268 = OpAccessChain %142 %95 
                                         f32 %269 = OpLoad %268 
                                Private f32* %270 = OpAccessChain %225 %95 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFMul %269 %271 
                                         f32 %273 = OpLoad %218 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %218 %274 
                                         f32 %275 = OpLoad %218 
                                Private f32* %276 = OpAccessChain %49 %95 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpExtInst %1 4 %277 
                                         f32 %279 = OpFMul %275 %278 
                                                      OpStore %218 %279 
                                Private f32* %280 = OpAccessChain %49 %95 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 4 %281 
                                         f32 %283 = OpFNegate %282 
                                         f32 %284 = OpFAdd %283 %109 
                                Private f32* %285 = OpAccessChain %49 %95 
                                                      OpStore %285 %284 
                                Private f32* %286 = OpAccessChain %142 %95 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpLoad %230 
                                         f32 %289 = OpFMul %287 %288 
                                         f32 %290 = OpLoad %218 
                                         f32 %291 = OpFAdd %289 %290 
                                                      OpStore %218 %291 
                                         f32 %292 = OpLoad %218 
                                         f32 %294 = OpFAdd %292 %293 
                                                      OpStore %218 %294 
                                         f32 %295 = OpLoad %218 
                                         f32 %296 = OpFDiv %60 %295 
                                                      OpStore %218 %296 
                                         f32 %297 = OpLoad %66 
                                         f32 %298 = OpLoad %218 
                                         f32 %299 = OpFMul %297 %298 
                                                      OpStore %66 %299 
                                Private f32* %300 = OpAccessChain %142 %95 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpLoad %66 
                                         f32 %303 = OpFMul %301 %302 
                                                      OpStore %66 %303 
                                         f32 %304 = OpLoad %66 
                                         f32 %306 = OpFMul %304 %305 
                                                      OpStore %66 %306 
                                         f32 %307 = OpLoad %66 
                                         f32 %308 = OpExtInst %1 40 %307 %85 
                                                      OpStore %66 %308 
                         read_only Texture2D %310 = OpLoad %309 
                                     sampler %312 = OpLoad %311 
                  read_only Texture2DSampled %313 = OpSampledImage %310 %312 
                                       f32_2 %316 = OpLoad vs_TEXCOORD0 
                                       f32_4 %317 = OpImageSampleImplicitLod %313 %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                                      OpStore %225 %318 
                                       f32_3 %319 = OpLoad %225 
                              Uniform f32_4* %321 = OpAccessChain %20 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpFMul %319 %323 
                                       f32_3 %327 = OpFAdd %324 %326 
                                                      OpStore %154 %327 
                                       f32_3 %328 = OpLoad %225 
                              Uniform f32_4* %329 = OpAccessChain %20 %320 
                                       f32_4 %330 = OpLoad %329 
                                       f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
                                       f32_3 %332 = OpFMul %328 %331 
                                                      OpStore %225 %332 
                                Uniform f32* %334 = OpAccessChain %20 %333 
                                         f32 %335 = OpLoad %334 
                                Uniform f32* %336 = OpAccessChain %20 %333 
                                         f32 %337 = OpLoad %336 
                                Uniform f32* %338 = OpAccessChain %20 %333 
                                         f32 %339 = OpLoad %338 
                                       f32_3 %340 = OpCompositeConstruct %335 %337 %339 
                                         f32 %341 = OpCompositeExtract %340 0 
                                         f32 %342 = OpCompositeExtract %340 1 
                                         f32 %343 = OpCompositeExtract %340 2 
                                       f32_3 %344 = OpCompositeConstruct %341 %342 %343 
                                       f32_3 %345 = OpLoad %154 
                                       f32_3 %346 = OpFMul %344 %345 
                                       f32_3 %349 = OpFAdd %346 %348 
                                                      OpStore %154 %349 
                                       f32_3 %350 = OpLoad %154 
                                       f32_3 %351 = OpLoad %154 
                                         f32 %352 = OpDot %350 %351 
                                                      OpStore %218 %352 
                                         f32 %354 = OpLoad %218 
                                        bool %355 = OpFOrdNotEqual %354 %85 
                                                      OpStore %353 %355 
                                        bool %356 = OpLoad %353 
                                         f32 %357 = OpSelect %356 %109 %85 
                                                      OpStore %218 %357 
                                         f32 %358 = OpLoad %66 
                                         f32 %359 = OpLoad %218 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %66 %360 
                                       f32_4 %361 = OpLoad %9 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                         f32 %363 = OpLoad %66 
                                       f32_3 %364 = OpCompositeConstruct %363 %363 %363 
                                       f32_3 %365 = OpFMul %362 %364 
                                                      OpStore %183 %365 
                                         f32 %366 = OpLoad %193 
                                         f32 %367 = OpFNegate %366 
                                         f32 %368 = OpFAdd %367 %109 
                                                      OpStore %66 %368 
                                         f32 %369 = OpLoad %193 
                                         f32 %370 = OpLoad %193 
                                         f32 %371 = OpFMul %369 %370 
                                                      OpStore %218 %371 
                                         f32 %372 = OpLoad %218 
                                       f32_2 %373 = OpCompositeConstruct %372 %372 
                                         f32 %374 = OpLoad %211 
                                       f32_2 %375 = OpCompositeConstruct %374 %374 
                                         f32 %376 = OpDot %373 %375 
                                                      OpStore %211 %376 
                                         f32 %377 = OpLoad %211 
                                         f32 %379 = OpFAdd %377 %378 
                                                      OpStore %211 %379 
                                         f32 %380 = OpLoad %66 
                                         f32 %381 = OpLoad %66 
                                         f32 %382 = OpFMul %380 %381 
                                                      OpStore %218 %382 
                                         f32 %383 = OpLoad %218 
                                         f32 %384 = OpLoad %218 
                                         f32 %385 = OpFMul %383 %384 
                                                      OpStore %218 %385 
                                         f32 %386 = OpLoad %66 
                                         f32 %387 = OpLoad %218 
                                         f32 %388 = OpFMul %386 %387 
                                                      OpStore %66 %388 
                                       f32_3 %390 = OpLoad %154 
                                       f32_3 %391 = OpFNegate %390 
                                       f32_3 %393 = OpFAdd %391 %392 
                                                      OpStore %389 %393 
                                       f32_3 %394 = OpLoad %389 
                                         f32 %395 = OpLoad %66 
                                       f32_3 %396 = OpCompositeConstruct %395 %395 %395 
                                       f32_3 %397 = OpFMul %394 %396 
                                       f32_3 %398 = OpLoad %154 
                                       f32_3 %399 = OpFAdd %397 %398 
                                                      OpStore %154 %399 
                                       f32_3 %400 = OpLoad %154 
                                       f32_3 %401 = OpLoad %183 
                                       f32_3 %402 = OpFMul %400 %401 
                                                      OpStore %154 %402 
                                Private f32* %403 = OpAccessChain %49 %95 
                                         f32 %404 = OpLoad %403 
                                Private f32* %405 = OpAccessChain %49 %95 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFMul %404 %406 
                                                      OpStore %66 %407 
                                         f32 %408 = OpLoad %66 
                                         f32 %409 = OpLoad %66 
                                         f32 %410 = OpFMul %408 %409 
                                                      OpStore %66 %410 
                                Private f32* %411 = OpAccessChain %49 %95 
                                         f32 %412 = OpLoad %411 
                                         f32 %413 = OpLoad %66 
                                         f32 %414 = OpFMul %412 %413 
                                                      OpStore %66 %414 
                                         f32 %415 = OpLoad %211 
                                         f32 %416 = OpLoad %66 
                                         f32 %417 = OpFMul %415 %416 
                                         f32 %418 = OpFAdd %417 %109 
                                                      OpStore %66 %418 
                                Private f32* %419 = OpAccessChain %142 %95 
                                         f32 %420 = OpLoad %419 
                                         f32 %421 = OpFNegate %420 
                                         f32 %422 = OpFAdd %421 %109 
                                Private f32* %423 = OpAccessChain %49 %95 
                                                      OpStore %423 %422 
                                Private f32* %424 = OpAccessChain %49 %95 
                                         f32 %425 = OpLoad %424 
                                Private f32* %426 = OpAccessChain %49 %95 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpFMul %425 %427 
                                                      OpStore %218 %428 
                                         f32 %429 = OpLoad %218 
                                         f32 %430 = OpLoad %218 
                                         f32 %431 = OpFMul %429 %430 
                                                      OpStore %218 %431 
                                Private f32* %432 = OpAccessChain %49 %95 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpLoad %218 
                                         f32 %435 = OpFMul %433 %434 
                                Private f32* %436 = OpAccessChain %49 %95 
                                                      OpStore %436 %435 
                                         f32 %437 = OpLoad %211 
                                Private f32* %438 = OpAccessChain %49 %95 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpFMul %437 %439 
                                         f32 %441 = OpFAdd %440 %109 
                                Private f32* %442 = OpAccessChain %49 %95 
                                                      OpStore %442 %441 
                                         f32 %443 = OpLoad %66 
                                Private f32* %444 = OpAccessChain %49 %95 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpFMul %443 %445 
                                                      OpStore %66 %446 
                                Private f32* %447 = OpAccessChain %142 %95 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpLoad %66 
                                         f32 %450 = OpFMul %448 %449 
                                                      OpStore %66 %450 
                                         f32 %451 = OpLoad %66 
                                       f32_3 %452 = OpCompositeConstruct %451 %451 %451 
                                       f32_4 %453 = OpLoad %9 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                                       f32_3 %455 = OpFMul %452 %454 
                                       f32_4 %456 = OpLoad %9 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 6 3 
                                                      OpStore %9 %457 
                                Uniform f32* %458 = OpAccessChain %20 %333 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFNegate %459 
                                         f32 %462 = OpFMul %460 %461 
                                         f32 %463 = OpFAdd %462 %461 
                                                      OpStore %66 %463 
                                         f32 %464 = OpLoad %66 
                                       f32_3 %465 = OpCompositeConstruct %464 %464 %464 
                                       f32_3 %466 = OpLoad %225 
                                       f32_3 %467 = OpFMul %465 %466 
                                                      OpStore %49 %467 
                                       f32_3 %470 = OpLoad %49 
                                       f32_4 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFMul %470 %472 
                                       f32_3 %474 = OpLoad %154 
                                       f32_3 %475 = OpFAdd %473 %474 
                                       f32_4 %476 = OpLoad %469 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 6 3 
                                                      OpStore %469 %477 
                                 Output f32* %479 = OpAccessChain %469 %80 
                                                      OpStore %479 %109 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat11;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5 = float(_numOfFrames);
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat5;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat0.x = u_xlat5 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat11)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat11 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat11);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
bool u_xlatb13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat8.x = u_xlat13 * u_xlat13;
    u_xlat14 = u_xlat18 * u_xlat8.x + (-u_xlat18);
    u_xlat18 = u_xlat14 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat8.x = u_xlat8.x * 0.318309873;
    u_xlat18 = u_xlat8.x / u_xlat18;
    u_xlat8.x = (-u_xlat13) + 1.0;
    u_xlat14 = abs(u_xlat1.x) * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat13 * abs(u_xlat1.x);
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
    u_xlat13 = u_xlat13 + 9.99999975e-06;
    u_xlat13 = 0.5 / u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat19 * u_xlat19;
    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
    u_xlat7 = u_xlat7 + -0.5;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 436
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %68 %159 %216 %227 %228 %365 %371 %419 %429 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %68 Location 68 
                                                      OpDecorate %80 DescriptorSet 80 
                                                      OpDecorate %80 Binding 80 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %95 DescriptorSet 95 
                                                      OpDecorate %95 Binding 95 
                                                      OpDecorate %159 Location 159 
                                                      OpMemberDecorate %214 0 BuiltIn 214 
                                                      OpMemberDecorate %214 1 BuiltIn 214 
                                                      OpMemberDecorate %214 2 BuiltIn 214 
                                                      OpDecorate %214 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 227 
                                                      OpDecorate %228 Location 228 
                                                      OpDecorate vs_TEXCOORD1 Location 365 
                                                      OpDecorate vs_TEXCOORD2 Location 371 
                                                      OpDecorate vs_TEXCOORD3 Location 419 
                                                      OpDecorate vs_TEXCOORD4 Location 429 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeArray %7 %11 
                                              %16 = OpTypeInt 32 1 
                                              %17 = OpTypeStruct %7 %12 %13 %14 %15 %6 %6 %6 %6 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %19 = OpVariable Uniform 
                                          i32 %20 = OpConstant 0 
                                          u32 %21 = OpConstant 1 
                                              %22 = OpTypePointer Uniform %6 
                                          i32 %26 = OpConstant 8 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %37 = OpVariable Private 
                                          i32 %38 = OpConstant 9 
                                              %39 = OpTypePointer Uniform %16 
                                          f32 %57 = OpConstant 3.674022E-40 
                                              %67 = OpTypePointer Input %7 
                                 Input f32_4* %68 = OpVariable Input 
                                              %69 = OpTypePointer Input %6 
                               Private f32_4* %77 = OpVariable Private 
                                              %78 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %79 = OpTypePointer UniformConstant %78 
         UniformConstant read_only Texture2D* %80 = OpVariable UniformConstant 
                                              %82 = OpTypeSampler 
                                              %83 = OpTypePointer UniformConstant %82 
                     UniformConstant sampler* %84 = OpVariable UniformConstant 
                                              %86 = OpTypeSampledImage %78 
                                              %88 = OpTypeVector %6 2 
                                          f32 %91 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %93 = OpVariable UniformConstant 
                     UniformConstant sampler* %95 = OpVariable UniformConstant 
                                             %101 = OpTypeVector %6 3 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_3 %108 = OpConstantComposite %107 %107 %107 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_3 %111 = OpConstantComposite %110 %110 %110 
                              Private f32_4* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 7 
                                         i32 %120 = OpConstant 6 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_2 %148 = OpConstantComposite %146 %147 
                                         u32 %155 = OpConstant 3 
                                Input f32_4* %159 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                              Private f32_4* %193 = OpVariable Private 
                                             %213 = OpTypeArray %6 %21 
                                             %214 = OpTypeStruct %7 %6 %213 
                                             %215 = OpTypePointer Output %214 
        Output struct {f32_4; f32; f32[1];}* %216 = OpVariable Output 
                                             %224 = OpTypePointer Output %7 
                                             %226 = OpTypePointer Output %88 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %228 = OpVariable Input 
                                         i32 %231 = OpConstant 10 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_2 %255 = OpConstantComposite %254 %254 
                                         f32 %257 = OpConstant 3.674022E-40 
                                       f32_2 %258 = OpConstantComposite %257 %257 
                                Private f32* %262 = OpVariable Private 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %272 = OpConstant 3.674022E-40 
                                       f32_2 %273 = OpConstantComposite %271 %272 
                                       f32_2 %275 = OpConstantComposite %57 %57 
                                         u32 %279 = OpConstant 2 
                                       f32_3 %297 = OpConstantComposite %57 %57 %57 
                                             %309 = OpTypeBool 
                                             %310 = OpTypePointer Private %309 
                               Private bool* %311 = OpVariable Private 
                                       f32_4 %312 = OpConstantComposite %91 %91 %91 %91 
                                         i32 %313 = OpConstant 5 
                                             %317 = OpTypeVector %309 4 
                                             %321 = OpTypePointer Function %101 
                                             %364 = OpTypePointer Output %101 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %390 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                             %430 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %322 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %19 %20 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpFNegate %24 
                                 Uniform f32* %27 = OpAccessChain %19 %26 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFMul %25 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %9 %30 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 10 %34 
                                 Private f32* %36 = OpAccessChain %9 %30 
                                                      OpStore %36 %35 
                                 Uniform i32* %40 = OpAccessChain %19 %38 
                                          i32 %41 = OpLoad %40 
                                          f32 %42 = OpConvertSToF %41 
                                                      OpStore %37 %42 
                                          f32 %43 = OpLoad %37 
                                 Private f32* %44 = OpAccessChain %9 %30 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Private f32* %47 = OpAccessChain %9 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 9 %49 
                                 Private f32* %51 = OpAccessChain %9 %30 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %9 %30 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %37 
                                          f32 %55 = OpFDiv %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %30 
                                                      OpStore %56 %55 
                                          f32 %58 = OpLoad %37 
                                          f32 %59 = OpFDiv %57 %58 
                                                      OpStore %37 %59 
                                          f32 %60 = OpLoad %37 
                                 Private f32* %61 = OpAccessChain %9 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %30 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %30 
                                          f32 %66 = OpLoad %65 
                                   Input f32* %70 = OpAccessChain %68 %21 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %66 %71 
                                 Private f32* %73 = OpAccessChain %9 %21 
                                                      OpStore %73 %72 
                                   Input f32* %74 = OpAccessChain %68 %30 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %30 
                                                      OpStore %76 %75 
                          read_only Texture2D %81 = OpLoad %80 
                                      sampler %85 = OpLoad %84 
                   read_only Texture2DSampled %87 = OpSampledImage %81 %85 
                                        f32_4 %89 = OpLoad %9 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                        f32_4 %92 = OpImageSampleExplicitLod %87 %90 Lod %7 
                                                      OpStore %77 %92 
                          read_only Texture2D %94 = OpLoad %93 
                                      sampler %96 = OpLoad %95 
                   read_only Texture2DSampled %97 = OpSampledImage %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_4 %100 = OpImageSampleExplicitLod %97 %99 Lod %7 
                                       f32_3 %102 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %9 %104 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 2 1 
                                       f32_3 %109 = OpFMul %106 %108 
                                       f32_3 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 6 3 
                                                      OpStore %9 %114 
                                Uniform f32* %117 = OpAccessChain %19 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Uniform f32* %121 = OpAccessChain %19 %120 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %119 %122 
                                Private f32* %124 = OpAccessChain %115 %30 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %115 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_3 %129 = OpFMul %126 %128 
                                Uniform f32* %130 = OpAccessChain %19 %116 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %132 = OpAccessChain %19 %116 
                                         f32 %133 = OpLoad %132 
                                Uniform f32* %134 = OpAccessChain %19 %116 
                                         f32 %135 = OpLoad %134 
                                       f32_3 %136 = OpCompositeConstruct %131 %133 %135 
                                         f32 %137 = OpCompositeExtract %136 0 
                                         f32 %138 = OpCompositeExtract %136 1 
                                         f32 %139 = OpCompositeExtract %136 2 
                                       f32_3 %140 = OpCompositeConstruct %137 %138 %139 
                                       f32_3 %141 = OpFAdd %129 %140 
                                       f32_4 %142 = OpLoad %115 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %115 %143 
                                       f32_4 %144 = OpLoad %77 
                                       f32_2 %145 = OpVectorShuffle %144 %144 3 3 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_4 %150 = OpLoad %77 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %77 %151 
                                Private f32* %152 = OpAccessChain %115 %30 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                Private f32* %156 = OpAccessChain %115 %155 
                                                      OpStore %156 %154 
                                       f32_4 %157 = OpLoad %115 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 2 1 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %158 %161 
                                       f32_4 %163 = OpLoad %115 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %115 %164 
                                       f32_4 %166 = OpLoad %115 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %19 %168 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %167 %171 
                                                      OpStore %165 %172 
                              Uniform f32_4* %173 = OpAccessChain %19 %168 %20 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %115 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %165 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %165 %179 
                              Uniform f32_4* %181 = OpAccessChain %19 %168 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %115 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %165 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %115 %187 
                                       f32_4 %188 = OpLoad %115 
                              Uniform f32_4* %190 = OpAccessChain %19 %168 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %165 %192 
                                       f32_4 %194 = OpLoad %165 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %19 %189 %168 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFMul %195 %197 
                                                      OpStore %193 %198 
                              Uniform f32_4* %199 = OpAccessChain %19 %189 %20 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %165 
                                       f32_4 %202 = OpVectorShuffle %201 %201 0 0 0 0 
                                       f32_4 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %193 
                                       f32_4 %205 = OpFAdd %203 %204 
                                                      OpStore %193 %205 
                              Uniform f32_4* %206 = OpAccessChain %19 %189 %180 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %165 
                                       f32_4 %209 = OpVectorShuffle %208 %208 2 2 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %193 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %193 %212 
                              Uniform f32_4* %217 = OpAccessChain %19 %189 %189 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %165 
                                       f32_4 %220 = OpVectorShuffle %219 %219 3 3 3 3 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %193 
                                       f32_4 %223 = OpFAdd %221 %222 
                               Output f32_4* %225 = OpAccessChain %216 %20 
                                                      OpStore %225 %223 
                                       f32_4 %229 = OpLoad %228 
                                       f32_2 %230 = OpVectorShuffle %229 %229 0 1 
                              Uniform f32_4* %232 = OpAccessChain %19 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_2 %234 = OpVectorShuffle %233 %233 0 1 
                                       f32_2 %235 = OpFMul %230 %234 
                              Uniform f32_4* %236 = OpAccessChain %19 %231 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 2 3 
                                       f32_2 %239 = OpFAdd %235 %238 
                                                      OpStore vs_TEXCOORD0 %239 
                                Private f32* %240 = OpAccessChain %77 %21 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 8 %241 
                                Private f32* %243 = OpAccessChain %165 %30 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %165 %30 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFNegate %245 
                                         f32 %247 = OpFMul %246 %147 
                                Private f32* %248 = OpAccessChain %77 %30 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %247 %249 
                                Private f32* %251 = OpAccessChain %165 %21 
                                                      OpStore %251 %250 
                                       f32_4 %252 = OpLoad %165 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %256 = OpFMul %253 %255 
                                       f32_2 %259 = OpFAdd %256 %258 
                                       f32_4 %260 = OpLoad %77 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 2 3 
                                                      OpStore %77 %261 
                                       f32_4 %263 = OpLoad %77 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                       f32_4 %265 = OpLoad %77 
                                       f32_2 %266 = OpVectorShuffle %265 %265 0 1 
                                         f32 %267 = OpDot %264 %266 
                                                      OpStore %262 %267 
                                         f32 %268 = OpLoad %262 
                                       f32_2 %269 = OpCompositeConstruct %268 %268 
                                       f32_2 %270 = OpFNegate %269 
                                       f32_2 %274 = OpFMul %270 %273 
                                       f32_2 %276 = OpFAdd %274 %275 
                                       f32_4 %277 = OpLoad %165 
                                       f32_4 %278 = OpVectorShuffle %277 %276 0 1 4 5 
                                                      OpStore %165 %278 
                                Private f32* %280 = OpAccessChain %165 %279 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 31 %281 
                                                      OpStore %262 %282 
                                       f32_4 %283 = OpLoad %77 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                         f32 %285 = OpLoad %262 
                                       f32_2 %286 = OpCompositeConstruct %285 %285 
                                       f32_2 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %165 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 2 3 
                                                      OpStore %165 %289 
                                       f32_4 %290 = OpLoad %165 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 3 
                                       f32_3 %292 = OpExtInst %1 40 %291 %111 
                                       f32_4 %293 = OpLoad %77 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %77 %294 
                                       f32_4 %295 = OpLoad %77 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %298 = OpExtInst %1 37 %296 %297 
                                       f32_4 %299 = OpLoad %77 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %77 %300 
                                Private f32* %301 = OpAccessChain %77 %30 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFNegate %302 
                                Private f32* %304 = OpAccessChain %77 %155 
                                                      OpStore %304 %303 
                                Private f32* %305 = OpAccessChain %9 %30 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpFNegate %306 
                                Private f32* %308 = OpAccessChain %9 %155 
                                                      OpStore %308 %307 
                                Uniform f32* %314 = OpAccessChain %19 %313 
                                         f32 %315 = OpLoad %314 
                                       f32_4 %316 = OpCompositeConstruct %315 %315 %315 %315 
                                      bool_4 %318 = OpFOrdNotEqual %312 %316 
                                        bool %319 = OpAny %318 
                                                      OpStore %311 %319 
                                        bool %320 = OpLoad %311 
                                                      OpSelectionMerge %324 None 
                                                      OpBranchConditional %320 %323 %327 
                                             %323 = OpLabel 
                                       f32_4 %325 = OpLoad %77 
                                       f32_3 %326 = OpVectorShuffle %325 %325 3 2 1 
                                                      OpStore %322 %326 
                                                      OpBranch %324 
                                             %327 = OpLabel 
                                       f32_4 %328 = OpLoad %9 
                                       f32_3 %329 = OpVectorShuffle %328 %328 3 1 2 
                                                      OpStore %322 %329 
                                                      OpBranch %324 
                                             %324 = OpLabel 
                                       f32_3 %330 = OpLoad %322 
                                       f32_4 %331 = OpLoad %9 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
                                                      OpStore %9 %332 
                                       f32_4 %333 = OpLoad %9 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                              Uniform f32_4* %335 = OpAccessChain %19 %180 %20 
                                       f32_4 %336 = OpLoad %335 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                         f32 %338 = OpDot %334 %337 
                                Private f32* %339 = OpAccessChain %77 %30 
                                                      OpStore %339 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                              Uniform f32_4* %342 = OpAccessChain %19 %180 %168 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                         f32 %345 = OpDot %341 %344 
                                Private f32* %346 = OpAccessChain %77 %21 
                                                      OpStore %346 %345 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                              Uniform f32_4* %349 = OpAccessChain %19 %180 %180 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                         f32 %352 = OpDot %348 %351 
                                Private f32* %353 = OpAccessChain %77 %279 
                                                      OpStore %353 %352 
                                       f32_4 %354 = OpLoad %77 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %77 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                         f32 %358 = OpDot %355 %357 
                                Private f32* %359 = OpAccessChain %9 %30 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %9 %30 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpExtInst %1 32 %361 
                                Private f32* %363 = OpAccessChain %9 %30 
                                                      OpStore %363 %362 
                                       f32_4 %366 = OpLoad %9 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 0 0 
                                       f32_4 %368 = OpLoad %77 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFMul %367 %369 
                                                      OpStore vs_TEXCOORD1 %370 
                              Uniform f32_4* %372 = OpAccessChain %19 %168 %189 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_4 %375 = OpLoad %159 
                                       f32_3 %376 = OpVectorShuffle %375 %375 3 3 3 
                                       f32_3 %377 = OpFMul %374 %376 
                                       f32_4 %378 = OpLoad %115 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFAdd %377 %379 
                                                      OpStore vs_TEXCOORD2 %380 
                              Uniform f32_4* %381 = OpAccessChain %19 %168 %189 
                                       f32_4 %382 = OpLoad %381 
                                       f32_4 %383 = OpLoad %159 
                                       f32_4 %384 = OpVectorShuffle %383 %383 3 3 3 3 
                                       f32_4 %385 = OpFMul %382 %384 
                                       f32_4 %386 = OpLoad %115 
                                       f32_4 %387 = OpFAdd %385 %386 
                                                      OpStore %9 %387 
                                       f32_4 %388 = OpLoad %9 
                                       f32_3 %389 = OpVectorShuffle %388 %388 1 1 1 
                              Uniform f32_4* %391 = OpAccessChain %19 %390 %168 
                                       f32_4 %392 = OpLoad %391 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFMul %389 %393 
                                       f32_4 %395 = OpLoad %77 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %77 %396 
                              Uniform f32_4* %397 = OpAccessChain %19 %390 %20 
                                       f32_4 %398 = OpLoad %397 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_4 %400 = OpLoad %9 
                                       f32_3 %401 = OpVectorShuffle %400 %400 0 0 0 
                                       f32_3 %402 = OpFMul %399 %401 
                                       f32_4 %403 = OpLoad %77 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_3 %405 = OpFAdd %402 %404 
                                       f32_4 %406 = OpLoad %77 
                                       f32_4 %407 = OpVectorShuffle %406 %405 4 5 6 3 
                                                      OpStore %77 %407 
                              Uniform f32_4* %408 = OpAccessChain %19 %390 %180 
                                       f32_4 %409 = OpLoad %408 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_4 %411 = OpLoad %9 
                                       f32_3 %412 = OpVectorShuffle %411 %411 2 2 2 
                                       f32_3 %413 = OpFMul %410 %412 
                                       f32_4 %414 = OpLoad %77 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_3 %416 = OpFAdd %413 %415 
                                       f32_4 %417 = OpLoad %9 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
                                                      OpStore %9 %418 
                              Uniform f32_4* %420 = OpAccessChain %19 %390 %189 
                                       f32_4 %421 = OpLoad %420 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
                                       f32_4 %423 = OpLoad %9 
                                       f32_3 %424 = OpVectorShuffle %423 %423 3 3 3 
                                       f32_3 %425 = OpFMul %422 %424 
                                       f32_4 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_3 %428 = OpFAdd %425 %427 
                                                      OpStore vs_TEXCOORD3 %428 
                                                      OpStore vs_TEXCOORD4 %312 
                                 Output f32* %431 = OpAccessChain %216 %20 %21 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFNegate %432 
                                 Output f32* %434 = OpAccessChain %216 %20 %21 
                                                      OpStore %434 %433 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 453
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %149 %290 %442 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %76 DescriptorSet 76 
                                                      OpDecorate %76 Binding 76 
                                                      OpDecorate %78 DescriptorSet 78 
                                                      OpDecorate %78 Binding 78 
                                                      OpDecorate vs_TEXCOORD1 Location 149 
                                                      OpDecorate %284 DescriptorSet 284 
                                                      OpDecorate %284 Binding 284 
                                                      OpDecorate %286 DescriptorSet 286 
                                                      OpDecorate %286 Binding 286 
                                                      OpDecorate vs_TEXCOORD0 Location 290 
                                                      OpDecorate %442 Location 442 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %17 %6 %6 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 3 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %14 
                                          i32 %29 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                                              %52 = OpTypePointer Private %6 
                                 Private f32* %53 = OpVariable Private 
                                              %57 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                              %58 = OpTypePointer UniformConstant %57 
       UniformConstant read_only TextureCube* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeSampler 
                                              %62 = OpTypePointer UniformConstant %61 
                     UniformConstant sampler* %63 = OpVariable UniformConstant 
                                              %65 = OpTypeSampledImage %57 
                                          u32 %69 = OpConstant 3 
                                          u32 %71 = OpConstant 0 
                                 Private f32* %73 = OpVariable Private 
                                              %74 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %75 = OpTypePointer UniformConstant %74 
         UniformConstant read_only Texture2D* %76 = OpVariable UniformConstant 
                     UniformConstant sampler* %78 = OpVariable UniformConstant 
                                              %80 = OpTypeSampledImage %74 
                                              %83 = OpTypeVector %6 2 
                               Private f32_3* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                              Private f32_3* %114 = OpVariable Private 
                              Private f32_3* %126 = OpVariable Private 
                                         f32 %141 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %155 = OpVariable Private 
                                         f32 %164 = OpConstant 3.674022E-40 
                                         f32 %165 = OpConstant 3.674022E-40 
                                Private f32* %167 = OpVariable Private 
                                Private f32* %185 = OpVariable Private 
                                         i32 %186 = OpConstant 4 
                                             %187 = OpTypePointer Uniform %6 
                                Private f32* %192 = OpVariable Private 
                                         f32 %197 = OpConstant 3.674022E-40 
                              Private f32_3* %199 = OpVariable Private 
                                Private f32* %204 = OpVariable Private 
                                         f32 %219 = OpConstant 3.674022E-40 
                                         f32 %223 = OpConstant 3.674022E-40 
                                         f32 %267 = OpConstant 3.674022E-40 
                                         f32 %269 = OpConstant 3.674022E-40 
                                         f32 %280 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %284 = OpVariable UniformConstant 
                    UniformConstant sampler* %286 = OpVariable UniformConstant 
                                             %289 = OpTypePointer Input %83 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %295 = OpConstant 6 
                                         f32 %300 = OpConstant 3.674022E-40 
                                       f32_3 %301 = OpConstantComposite %300 %300 %300 
                                         i32 %308 = OpConstant 5 
                                         f32 %322 = OpConstant 3.674022E-40 
                                       f32_3 %323 = OpConstantComposite %322 %322 %322 
                                             %328 = OpTypeBool 
                                             %329 = OpTypePointer Private %328 
                               Private bool* %330 = OpVariable Private 
                                         f32 %354 = OpConstant 3.674022E-40 
                              Private f32_3* %365 = OpVariable Private 
                                       f32_3 %368 = OpConstantComposite %165 %165 %165 
                                         f32 %434 = OpConstant 3.674022E-40 
                                             %441 = OpTypePointer Output %14 
                               Output f32_4* %442 = OpVariable Output 
                                             %450 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_3 %33 = OpLoad vs_TEXCOORD2 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpFMul %32 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %20 %22 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpLoad vs_TEXCOORD2 
                                        f32_3 %43 = OpVectorShuffle %42 %42 2 2 2 
                                        f32_3 %44 = OpFMul %41 %43 
                                        f32_3 %45 = OpLoad %9 
                                        f32_3 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_3 %47 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %20 %22 %22 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFAdd %47 %50 
                                                      OpStore %9 %51 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpLoad %9 
                                          f32 %56 = OpDot %54 %55 
                                                      OpStore %53 %56 
                        read_only TextureCube %60 = OpLoad %59 
                                      sampler %64 = OpLoad %63 
                 read_only TextureCubeSampled %66 = OpSampledImage %60 %64 
                                        f32_3 %67 = OpLoad %9 
                                        f32_4 %68 = OpImageSampleImplicitLod %66 %67 
                                          f32 %70 = OpCompositeExtract %68 3 
                                 Private f32* %72 = OpAccessChain %9 %71 
                                                      OpStore %72 %70 
                          read_only Texture2D %77 = OpLoad %76 
                                      sampler %79 = OpLoad %78 
                   read_only Texture2DSampled %81 = OpSampledImage %77 %79 
                                          f32 %82 = OpLoad %53 
                                        f32_2 %84 = OpCompositeConstruct %82 %82 
                                        f32_4 %85 = OpImageSampleImplicitLod %81 %84 
                                          f32 %86 = OpCompositeExtract %85 0 
                                                      OpStore %73 %86 
                                 Private f32* %87 = OpAccessChain %9 %71 
                                          f32 %88 = OpLoad %87 
                                          f32 %89 = OpLoad %73 
                                          f32 %90 = OpFMul %88 %89 
                                 Private f32* %91 = OpAccessChain %9 %71 
                                                      OpStore %91 %90 
                                        f32_3 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                               Uniform f32_4* %94 = OpAccessChain %20 %38 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFMul %93 %96 
                                                      OpStore %9 %97 
                                        f32_3 %99 = OpLoad vs_TEXCOORD2 
                                       f32_3 %100 = OpFNegate %99 
                              Uniform f32_3* %102 = OpAccessChain %20 %29 
                                       f32_3 %103 = OpLoad %102 
                                       f32_3 %104 = OpFAdd %100 %103 
                                                      OpStore %98 %104 
                                       f32_3 %105 = OpLoad %98 
                                       f32_3 %106 = OpLoad %98 
                                         f32 %107 = OpDot %105 %106 
                                                      OpStore %53 %107 
                                         f32 %108 = OpLoad %53 
                                         f32 %109 = OpExtInst %1 32 %108 
                                                      OpStore %53 %109 
                                         f32 %110 = OpLoad %53 
                                       f32_3 %111 = OpCompositeConstruct %110 %110 %110 
                                       f32_3 %112 = OpLoad %98 
                                       f32_3 %113 = OpFMul %111 %112 
                                                      OpStore %98 %113 
                                       f32_3 %115 = OpLoad vs_TEXCOORD2 
                                       f32_3 %116 = OpFNegate %115 
                              Uniform f32_4* %117 = OpAccessChain %20 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %116 %119 
                                                      OpStore %114 %120 
                                       f32_3 %121 = OpLoad %114 
                                       f32_3 %122 = OpLoad %114 
                                         f32 %123 = OpDot %121 %122 
                                                      OpStore %53 %123 
                                         f32 %124 = OpLoad %53 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %53 %125 
                                       f32_3 %127 = OpLoad %114 
                                         f32 %128 = OpLoad %53 
                                       f32_3 %129 = OpCompositeConstruct %128 %128 %128 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_3 %131 = OpLoad %98 
                                       f32_3 %132 = OpFAdd %130 %131 
                                                      OpStore %126 %132 
                                         f32 %133 = OpLoad %53 
                                       f32_3 %134 = OpCompositeConstruct %133 %133 %133 
                                       f32_3 %135 = OpLoad %114 
                                       f32_3 %136 = OpFMul %134 %135 
                                                      OpStore %114 %136 
                                       f32_3 %137 = OpLoad %126 
                                       f32_3 %138 = OpLoad %126 
                                         f32 %139 = OpDot %137 %138 
                                                      OpStore %53 %139 
                                         f32 %140 = OpLoad %53 
                                         f32 %142 = OpExtInst %1 40 %140 %141 
                                                      OpStore %53 %142 
                                         f32 %143 = OpLoad %53 
                                         f32 %144 = OpExtInst %1 32 %143 
                                                      OpStore %53 %144 
                                         f32 %145 = OpLoad %53 
                                       f32_3 %146 = OpCompositeConstruct %145 %145 %145 
                                       f32_3 %147 = OpLoad %126 
                                       f32_3 %148 = OpFMul %146 %147 
                                                      OpStore %126 %148 
                                       f32_3 %150 = OpLoad vs_TEXCOORD1 
                                       f32_3 %151 = OpLoad vs_TEXCOORD1 
                                         f32 %152 = OpDot %150 %151 
                                                      OpStore %53 %152 
                                         f32 %153 = OpLoad %53 
                                         f32 %154 = OpExtInst %1 32 %153 
                                                      OpStore %53 %154 
                                         f32 %156 = OpLoad %53 
                                       f32_3 %157 = OpCompositeConstruct %156 %156 %156 
                                       f32_3 %158 = OpLoad vs_TEXCOORD1 
                                       f32_3 %159 = OpFMul %157 %158 
                                                      OpStore %155 %159 
                                       f32_3 %160 = OpLoad %155 
                                       f32_3 %161 = OpLoad %126 
                                         f32 %162 = OpDot %160 %161 
                                                      OpStore %53 %162 
                                         f32 %163 = OpLoad %53 
                                         f32 %166 = OpExtInst %1 43 %163 %164 %165 
                                                      OpStore %53 %166 
                                       f32_3 %168 = OpLoad %114 
                                       f32_3 %169 = OpLoad %126 
                                         f32 %170 = OpDot %168 %169 
                                                      OpStore %167 %170 
                                         f32 %171 = OpLoad %167 
                                         f32 %172 = OpExtInst %1 43 %171 %164 %165 
                                                      OpStore %167 %172 
                                       f32_3 %173 = OpLoad %155 
                                       f32_3 %174 = OpLoad %114 
                                         f32 %175 = OpDot %173 %174 
                                Private f32* %176 = OpAccessChain %114 %71 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %114 %71 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpExtInst %1 43 %178 %164 %165 
                                Private f32* %180 = OpAccessChain %114 %71 
                                                      OpStore %180 %179 
                                       f32_3 %181 = OpLoad %155 
                                       f32_3 %182 = OpLoad %98 
                                         f32 %183 = OpDot %181 %182 
                                Private f32* %184 = OpAccessChain %98 %71 
                                                      OpStore %184 %183 
                                Uniform f32* %188 = OpAccessChain %20 %186 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                         f32 %191 = OpFAdd %190 %165 
                                                      OpStore %185 %191 
                                         f32 %193 = OpLoad %185 
                                         f32 %194 = OpLoad %185 
                                         f32 %195 = OpFMul %193 %194 
                                                      OpStore %192 %195 
                                         f32 %196 = OpLoad %192 
                                         f32 %198 = OpExtInst %1 40 %196 %197 
                                                      OpStore %192 %198 
                                         f32 %200 = OpLoad %192 
                                         f32 %201 = OpLoad %192 
                                         f32 %202 = OpFMul %200 %201 
                                Private f32* %203 = OpAccessChain %199 %71 
                                                      OpStore %203 %202 
                                         f32 %205 = OpLoad %53 
                                Private f32* %206 = OpAccessChain %199 %71 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                         f32 %209 = OpLoad %53 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %208 %210 
                                                      OpStore %204 %211 
                                         f32 %212 = OpLoad %204 
                                         f32 %213 = OpLoad %53 
                                         f32 %214 = OpFMul %212 %213 
                                         f32 %215 = OpFAdd %214 %165 
                                                      OpStore %53 %215 
                                         f32 %216 = OpLoad %53 
                                         f32 %217 = OpLoad %53 
                                         f32 %218 = OpFMul %216 %217 
                                         f32 %220 = OpFAdd %218 %219 
                                                      OpStore %53 %220 
                                Private f32* %221 = OpAccessChain %199 %71 
                                         f32 %222 = OpLoad %221 
                                         f32 %224 = OpFMul %222 %223 
                                Private f32* %225 = OpAccessChain %199 %71 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %199 %71 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpLoad %53 
                                         f32 %229 = OpFDiv %227 %228 
                                                      OpStore %53 %229 
                                         f32 %230 = OpLoad %192 
                                         f32 %231 = OpFNegate %230 
                                         f32 %232 = OpFAdd %231 %165 
                                Private f32* %233 = OpAccessChain %199 %71 
                                                      OpStore %233 %232 
                                Private f32* %234 = OpAccessChain %98 %71 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpExtInst %1 4 %235 
                                Private f32* %237 = OpAccessChain %199 %71 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                         f32 %240 = OpLoad %192 
                                         f32 %241 = OpFAdd %239 %240 
                                                      OpStore %204 %241 
                                Private f32* %242 = OpAccessChain %114 %71 
                                         f32 %243 = OpLoad %242 
                                Private f32* %244 = OpAccessChain %199 %71 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                         f32 %247 = OpLoad %192 
                                         f32 %248 = OpFAdd %246 %247 
                                                      OpStore %192 %248 
                                         f32 %249 = OpLoad %192 
                                Private f32* %250 = OpAccessChain %98 %71 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpExtInst %1 4 %251 
                                         f32 %253 = OpFMul %249 %252 
                                                      OpStore %192 %253 
                                Private f32* %254 = OpAccessChain %98 %71 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpExtInst %1 4 %255 
                                         f32 %257 = OpFNegate %256 
                                         f32 %258 = OpFAdd %257 %165 
                                Private f32* %259 = OpAccessChain %98 %71 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %114 %71 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpLoad %204 
                                         f32 %263 = OpFMul %261 %262 
                                         f32 %264 = OpLoad %192 
                                         f32 %265 = OpFAdd %263 %264 
                                                      OpStore %192 %265 
                                         f32 %266 = OpLoad %192 
                                         f32 %268 = OpFAdd %266 %267 
                                                      OpStore %192 %268 
                                         f32 %270 = OpLoad %192 
                                         f32 %271 = OpFDiv %269 %270 
                                                      OpStore %192 %271 
                                         f32 %272 = OpLoad %53 
                                         f32 %273 = OpLoad %192 
                                         f32 %274 = OpFMul %272 %273 
                                                      OpStore %53 %274 
                                Private f32* %275 = OpAccessChain %114 %71 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpLoad %53 
                                         f32 %278 = OpFMul %276 %277 
                                                      OpStore %53 %278 
                                         f32 %279 = OpLoad %53 
                                         f32 %281 = OpFMul %279 %280 
                                                      OpStore %53 %281 
                                         f32 %282 = OpLoad %53 
                                         f32 %283 = OpExtInst %1 40 %282 %164 
                                                      OpStore %53 %283 
                         read_only Texture2D %285 = OpLoad %284 
                                     sampler %287 = OpLoad %286 
                  read_only Texture2DSampled %288 = OpSampledImage %285 %287 
                                       f32_2 %291 = OpLoad vs_TEXCOORD0 
                                       f32_4 %292 = OpImageSampleImplicitLod %288 %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                                      OpStore %199 %293 
                                       f32_3 %294 = OpLoad %199 
                              Uniform f32_4* %296 = OpAccessChain %20 %295 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFMul %294 %298 
                                       f32_3 %302 = OpFAdd %299 %301 
                                                      OpStore %126 %302 
                                       f32_3 %303 = OpLoad %199 
                              Uniform f32_4* %304 = OpAccessChain %20 %295 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_3 %307 = OpFMul %303 %306 
                                                      OpStore %199 %307 
                                Uniform f32* %309 = OpAccessChain %20 %308 
                                         f32 %310 = OpLoad %309 
                                Uniform f32* %311 = OpAccessChain %20 %308 
                                         f32 %312 = OpLoad %311 
                                Uniform f32* %313 = OpAccessChain %20 %308 
                                         f32 %314 = OpLoad %313 
                                       f32_3 %315 = OpCompositeConstruct %310 %312 %314 
                                         f32 %316 = OpCompositeExtract %315 0 
                                         f32 %317 = OpCompositeExtract %315 1 
                                         f32 %318 = OpCompositeExtract %315 2 
                                       f32_3 %319 = OpCompositeConstruct %316 %317 %318 
                                       f32_3 %320 = OpLoad %126 
                                       f32_3 %321 = OpFMul %319 %320 
                                       f32_3 %324 = OpFAdd %321 %323 
                                                      OpStore %126 %324 
                                       f32_3 %325 = OpLoad %126 
                                       f32_3 %326 = OpLoad %126 
                                         f32 %327 = OpDot %325 %326 
                                                      OpStore %192 %327 
                                         f32 %331 = OpLoad %192 
                                        bool %332 = OpFOrdNotEqual %331 %164 
                                                      OpStore %330 %332 
                                        bool %333 = OpLoad %330 
                                         f32 %334 = OpSelect %333 %165 %164 
                                                      OpStore %192 %334 
                                         f32 %335 = OpLoad %53 
                                         f32 %336 = OpLoad %192 
                                         f32 %337 = OpFMul %335 %336 
                                                      OpStore %53 %337 
                                       f32_3 %338 = OpLoad %9 
                                         f32 %339 = OpLoad %53 
                                       f32_3 %340 = OpCompositeConstruct %339 %339 %339 
                                       f32_3 %341 = OpFMul %338 %340 
                                                      OpStore %155 %341 
                                         f32 %342 = OpLoad %167 
                                         f32 %343 = OpFNegate %342 
                                         f32 %344 = OpFAdd %343 %165 
                                                      OpStore %53 %344 
                                         f32 %345 = OpLoad %167 
                                         f32 %346 = OpLoad %167 
                                         f32 %347 = OpFMul %345 %346 
                                                      OpStore %192 %347 
                                         f32 %348 = OpLoad %192 
                                       f32_2 %349 = OpCompositeConstruct %348 %348 
                                         f32 %350 = OpLoad %185 
                                       f32_2 %351 = OpCompositeConstruct %350 %350 
                                         f32 %352 = OpDot %349 %351 
                                                      OpStore %185 %352 
                                         f32 %353 = OpLoad %185 
                                         f32 %355 = OpFAdd %353 %354 
                                                      OpStore %185 %355 
                                         f32 %356 = OpLoad %53 
                                         f32 %357 = OpLoad %53 
                                         f32 %358 = OpFMul %356 %357 
                                                      OpStore %192 %358 
                                         f32 %359 = OpLoad %192 
                                         f32 %360 = OpLoad %192 
                                         f32 %361 = OpFMul %359 %360 
                                                      OpStore %192 %361 
                                         f32 %362 = OpLoad %53 
                                         f32 %363 = OpLoad %192 
                                         f32 %364 = OpFMul %362 %363 
                                                      OpStore %53 %364 
                                       f32_3 %366 = OpLoad %126 
                                       f32_3 %367 = OpFNegate %366 
                                       f32_3 %369 = OpFAdd %367 %368 
                                                      OpStore %365 %369 
                                       f32_3 %370 = OpLoad %365 
                                         f32 %371 = OpLoad %53 
                                       f32_3 %372 = OpCompositeConstruct %371 %371 %371 
                                       f32_3 %373 = OpFMul %370 %372 
                                       f32_3 %374 = OpLoad %126 
                                       f32_3 %375 = OpFAdd %373 %374 
                                                      OpStore %126 %375 
                                       f32_3 %376 = OpLoad %126 
                                       f32_3 %377 = OpLoad %155 
                                       f32_3 %378 = OpFMul %376 %377 
                                                      OpStore %126 %378 
                                Private f32* %379 = OpAccessChain %98 %71 
                                         f32 %380 = OpLoad %379 
                                Private f32* %381 = OpAccessChain %98 %71 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFMul %380 %382 
                                                      OpStore %53 %383 
                                         f32 %384 = OpLoad %53 
                                         f32 %385 = OpLoad %53 
                                         f32 %386 = OpFMul %384 %385 
                                                      OpStore %53 %386 
                                Private f32* %387 = OpAccessChain %98 %71 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpLoad %53 
                                         f32 %390 = OpFMul %388 %389 
                                                      OpStore %53 %390 
                                         f32 %391 = OpLoad %185 
                                         f32 %392 = OpLoad %53 
                                         f32 %393 = OpFMul %391 %392 
                                         f32 %394 = OpFAdd %393 %165 
                                                      OpStore %53 %394 
                                Private f32* %395 = OpAccessChain %114 %71 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFNegate %396 
                                         f32 %398 = OpFAdd %397 %165 
                                Private f32* %399 = OpAccessChain %98 %71 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %98 %71 
                                         f32 %401 = OpLoad %400 
                                Private f32* %402 = OpAccessChain %98 %71 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                                      OpStore %192 %404 
                                         f32 %405 = OpLoad %192 
                                         f32 %406 = OpLoad %192 
                                         f32 %407 = OpFMul %405 %406 
                                                      OpStore %192 %407 
                                Private f32* %408 = OpAccessChain %98 %71 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %192 
                                         f32 %411 = OpFMul %409 %410 
                                Private f32* %412 = OpAccessChain %98 %71 
                                                      OpStore %412 %411 
                                         f32 %413 = OpLoad %185 
                                Private f32* %414 = OpAccessChain %98 %71 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFMul %413 %415 
                                         f32 %417 = OpFAdd %416 %165 
                                Private f32* %418 = OpAccessChain %98 %71 
                                                      OpStore %418 %417 
                                         f32 %419 = OpLoad %53 
                                Private f32* %420 = OpAccessChain %98 %71 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFMul %419 %421 
                                                      OpStore %53 %422 
                                Private f32* %423 = OpAccessChain %114 %71 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpLoad %53 
                                         f32 %426 = OpFMul %424 %425 
                                                      OpStore %53 %426 
                                         f32 %427 = OpLoad %53 
                                       f32_3 %428 = OpCompositeConstruct %427 %427 %427 
                                       f32_3 %429 = OpLoad %9 
                                       f32_3 %430 = OpFMul %428 %429 
                                                      OpStore %9 %430 
                                Uniform f32* %431 = OpAccessChain %20 %308 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFNegate %432 
                                         f32 %435 = OpFMul %433 %434 
                                         f32 %436 = OpFAdd %435 %434 
                                                      OpStore %53 %436 
                                         f32 %437 = OpLoad %53 
                                       f32_3 %438 = OpCompositeConstruct %437 %437 %437 
                                       f32_3 %439 = OpLoad %199 
                                       f32_3 %440 = OpFMul %438 %439 
                                                      OpStore %98 %440 
                                       f32_3 %443 = OpLoad %98 
                                       f32_3 %444 = OpLoad %9 
                                       f32_3 %445 = OpFMul %443 %444 
                                       f32_3 %446 = OpLoad %126 
                                       f32_3 %447 = OpFAdd %445 %446 
                                       f32_4 %448 = OpLoad %442 
                                       f32_4 %449 = OpVectorShuffle %448 %447 4 5 6 3 
                                                      OpStore %442 %449 
                                 Output f32* %451 = OpAccessChain %442 %69 
                                                      OpStore %451 %165 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(2) uniform  sampler2D _posTex;
UNITY_LOCATION(3) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5 = float(_numOfFrames);
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat5;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat0.x = u_xlat5 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat11.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat11.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat11.xy;
    u_xlat11.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.zz + u_xlat11.xy;
    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat3.ww + u_xlat11.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-u_xlat11.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat11.x = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * u_xlat11.xx;
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat12;
vec2 u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13.x = u_xlat7 * u_xlat7;
    u_xlat13.x = max(u_xlat13.x, 0.00200000009);
    u_xlat19 = u_xlat13.x * u_xlat13.x;
    u_xlat20 = u_xlat18 * u_xlat19 + (-u_xlat18);
    u_xlat18 = u_xlat20 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat19 = u_xlat19 * 0.318309873;
    u_xlat18 = u_xlat19 / u_xlat18;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat12 = (-u_xlat13.x) + 1.0;
    u_xlat19 = abs(u_xlat0.x) * u_xlat12 + u_xlat13.x;
    u_xlat12 = u_xlat6 * u_xlat12 + u_xlat13.x;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat19 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat6 * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat13.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat13.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat13.xy;
    u_xlat13.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat13.xy;
    u_xlat13.xy = u_xlat13.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4 = texture(_LightTexture0, u_xlat13.xy);
    u_xlat4.xyz = u_xlat4.www * _LightColor0.xyz;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = dot(vec2(u_xlat18), vec2(u_xlat7));
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
    u_xlat12 = u_xlat0.x * u_xlat0.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat18 * u_xlat0.x + 1.0;
    u_xlat12 = (-u_xlat6) + 1.0;
    u_xlat19 = u_xlat12 * u_xlat12;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat12 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 430
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %68 %159 %216 %234 %270 %279 %280 %417 %423 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %68 Location 68 
                                                      OpDecorate %80 DescriptorSet 80 
                                                      OpDecorate %80 Binding 80 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %95 DescriptorSet 95 
                                                      OpDecorate %95 Binding 95 
                                                      OpDecorate %159 Location 159 
                                                      OpMemberDecorate %214 0 BuiltIn 214 
                                                      OpMemberDecorate %214 1 BuiltIn 214 
                                                      OpMemberDecorate %214 2 BuiltIn 214 
                                                      OpDecorate %214 Block 
                                                      OpDecorate vs_TEXCOORD2 Location 234 
                                                      OpDecorate vs_TEXCOORD3 Location 270 
                                                      OpDecorate vs_TEXCOORD0 Location 279 
                                                      OpDecorate %280 Location 280 
                                                      OpDecorate vs_TEXCOORD1 Location 417 
                                                      OpDecorate vs_TEXCOORD4 Location 423 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeArray %7 %11 
                                              %16 = OpTypeInt 32 1 
                                              %17 = OpTypeStruct %7 %12 %13 %14 %15 %6 %6 %6 %6 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %19 = OpVariable Uniform 
                                          i32 %20 = OpConstant 0 
                                          u32 %21 = OpConstant 1 
                                              %22 = OpTypePointer Uniform %6 
                                          i32 %26 = OpConstant 8 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %37 = OpVariable Private 
                                          i32 %38 = OpConstant 9 
                                              %39 = OpTypePointer Uniform %16 
                                          f32 %57 = OpConstant 3.674022E-40 
                                              %67 = OpTypePointer Input %7 
                                 Input f32_4* %68 = OpVariable Input 
                                              %69 = OpTypePointer Input %6 
                               Private f32_4* %77 = OpVariable Private 
                                              %78 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %79 = OpTypePointer UniformConstant %78 
         UniformConstant read_only Texture2D* %80 = OpVariable UniformConstant 
                                              %82 = OpTypeSampler 
                                              %83 = OpTypePointer UniformConstant %82 
                     UniformConstant sampler* %84 = OpVariable UniformConstant 
                                              %86 = OpTypeSampledImage %78 
                                              %88 = OpTypeVector %6 2 
                                          f32 %91 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %93 = OpVariable UniformConstant 
                     UniformConstant sampler* %95 = OpVariable UniformConstant 
                                             %101 = OpTypeVector %6 3 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_3 %108 = OpConstantComposite %107 %107 %107 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_3 %111 = OpConstantComposite %110 %110 %110 
                              Private f32_4* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 7 
                                         i32 %120 = OpConstant 6 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_2 %148 = OpConstantComposite %146 %147 
                                         u32 %155 = OpConstant 3 
                                Input f32_4* %159 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                              Private f32_4* %193 = OpVariable Private 
                                             %213 = OpTypeArray %6 %21 
                                             %214 = OpTypeStruct %7 %6 %213 
                                             %215 = OpTypePointer Output %214 
        Output struct {f32_4; f32; f32[1];}* %216 = OpVariable Output 
                                             %224 = OpTypePointer Output %7 
                                             %233 = OpTypePointer Output %101 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %244 = OpTypePointer Private %88 
                              Private f32_2* %245 = OpVariable Private 
                                         i32 %248 = OpConstant 4 
                                             %269 = OpTypePointer Output %88 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %280 = OpVariable Input 
                                         i32 %283 = OpConstant 10 
                                         f32 %306 = OpConstant 3.674022E-40 
                                       f32_2 %307 = OpConstantComposite %306 %306 
                                         f32 %309 = OpConstant 3.674022E-40 
                                       f32_2 %310 = OpConstantComposite %309 %309 
                                         f32 %323 = OpConstant 3.674022E-40 
                                         f32 %324 = OpConstant 3.674022E-40 
                                       f32_2 %325 = OpConstantComposite %323 %324 
                                       f32_2 %327 = OpConstantComposite %57 %57 
                                         u32 %331 = OpConstant 2 
                                       f32_3 %350 = OpConstantComposite %57 %57 %57 
                                             %362 = OpTypeBool 
                                             %363 = OpTypePointer Private %362 
                               Private bool* %364 = OpVariable Private 
                                       f32_4 %365 = OpConstantComposite %91 %91 %91 %91 
                                         i32 %366 = OpConstant 5 
                                             %370 = OpTypeVector %362 4 
                                             %374 = OpTypePointer Function %101 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                             %424 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %375 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %19 %20 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpFNegate %24 
                                 Uniform f32* %27 = OpAccessChain %19 %26 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFMul %25 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %9 %30 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 10 %34 
                                 Private f32* %36 = OpAccessChain %9 %30 
                                                      OpStore %36 %35 
                                 Uniform i32* %40 = OpAccessChain %19 %38 
                                          i32 %41 = OpLoad %40 
                                          f32 %42 = OpConvertSToF %41 
                                                      OpStore %37 %42 
                                          f32 %43 = OpLoad %37 
                                 Private f32* %44 = OpAccessChain %9 %30 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Private f32* %47 = OpAccessChain %9 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 9 %49 
                                 Private f32* %51 = OpAccessChain %9 %30 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %9 %30 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %37 
                                          f32 %55 = OpFDiv %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %30 
                                                      OpStore %56 %55 
                                          f32 %58 = OpLoad %37 
                                          f32 %59 = OpFDiv %57 %58 
                                                      OpStore %37 %59 
                                          f32 %60 = OpLoad %37 
                                 Private f32* %61 = OpAccessChain %9 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %30 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %30 
                                          f32 %66 = OpLoad %65 
                                   Input f32* %70 = OpAccessChain %68 %21 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %66 %71 
                                 Private f32* %73 = OpAccessChain %9 %21 
                                                      OpStore %73 %72 
                                   Input f32* %74 = OpAccessChain %68 %30 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %30 
                                                      OpStore %76 %75 
                          read_only Texture2D %81 = OpLoad %80 
                                      sampler %85 = OpLoad %84 
                   read_only Texture2DSampled %87 = OpSampledImage %81 %85 
                                        f32_4 %89 = OpLoad %9 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                        f32_4 %92 = OpImageSampleExplicitLod %87 %90 Lod %7 
                                                      OpStore %77 %92 
                          read_only Texture2D %94 = OpLoad %93 
                                      sampler %96 = OpLoad %95 
                   read_only Texture2DSampled %97 = OpSampledImage %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_4 %100 = OpImageSampleExplicitLod %97 %99 Lod %7 
                                       f32_3 %102 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %9 %104 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 2 1 
                                       f32_3 %109 = OpFMul %106 %108 
                                       f32_3 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 6 3 
                                                      OpStore %9 %114 
                                Uniform f32* %117 = OpAccessChain %19 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Uniform f32* %121 = OpAccessChain %19 %120 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %119 %122 
                                Private f32* %124 = OpAccessChain %115 %30 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %115 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_3 %129 = OpFMul %126 %128 
                                Uniform f32* %130 = OpAccessChain %19 %116 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %132 = OpAccessChain %19 %116 
                                         f32 %133 = OpLoad %132 
                                Uniform f32* %134 = OpAccessChain %19 %116 
                                         f32 %135 = OpLoad %134 
                                       f32_3 %136 = OpCompositeConstruct %131 %133 %135 
                                         f32 %137 = OpCompositeExtract %136 0 
                                         f32 %138 = OpCompositeExtract %136 1 
                                         f32 %139 = OpCompositeExtract %136 2 
                                       f32_3 %140 = OpCompositeConstruct %137 %138 %139 
                                       f32_3 %141 = OpFAdd %129 %140 
                                       f32_4 %142 = OpLoad %115 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %115 %143 
                                       f32_4 %144 = OpLoad %77 
                                       f32_2 %145 = OpVectorShuffle %144 %144 3 3 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_4 %150 = OpLoad %77 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %77 %151 
                                Private f32* %152 = OpAccessChain %115 %30 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                Private f32* %156 = OpAccessChain %115 %155 
                                                      OpStore %156 %154 
                                       f32_4 %157 = OpLoad %115 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 2 1 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %158 %161 
                                       f32_4 %163 = OpLoad %115 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %115 %164 
                                       f32_4 %166 = OpLoad %115 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %19 %168 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %167 %171 
                                                      OpStore %165 %172 
                              Uniform f32_4* %173 = OpAccessChain %19 %168 %20 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %115 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %165 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %165 %179 
                              Uniform f32_4* %181 = OpAccessChain %19 %168 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %115 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %165 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %115 %187 
                                       f32_4 %188 = OpLoad %115 
                              Uniform f32_4* %190 = OpAccessChain %19 %168 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %165 %192 
                                       f32_4 %194 = OpLoad %165 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %19 %189 %168 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFMul %195 %197 
                                                      OpStore %193 %198 
                              Uniform f32_4* %199 = OpAccessChain %19 %189 %20 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %165 
                                       f32_4 %202 = OpVectorShuffle %201 %201 0 0 0 0 
                                       f32_4 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %193 
                                       f32_4 %205 = OpFAdd %203 %204 
                                                      OpStore %193 %205 
                              Uniform f32_4* %206 = OpAccessChain %19 %189 %180 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %165 
                                       f32_4 %209 = OpVectorShuffle %208 %208 2 2 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %193 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %193 %212 
                              Uniform f32_4* %217 = OpAccessChain %19 %189 %189 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %165 
                                       f32_4 %220 = OpVectorShuffle %219 %219 3 3 3 3 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %193 
                                       f32_4 %223 = OpFAdd %221 %222 
                               Output f32_4* %225 = OpAccessChain %216 %20 
                                                      OpStore %225 %223 
                              Uniform f32_4* %226 = OpAccessChain %19 %168 %189 
                                       f32_4 %227 = OpLoad %226 
                                       f32_4 %228 = OpLoad %159 
                                       f32_4 %229 = OpVectorShuffle %228 %228 3 3 3 3 
                                       f32_4 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %115 
                                       f32_4 %232 = OpFAdd %230 %231 
                                                      OpStore %165 %232 
                              Uniform f32_4* %235 = OpAccessChain %19 %168 %189 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_4 %238 = OpLoad %159 
                                       f32_3 %239 = OpVectorShuffle %238 %238 3 3 3 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %115 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFAdd %240 %242 
                                                      OpStore vs_TEXCOORD2 %243 
                                       f32_4 %246 = OpLoad %165 
                                       f32_2 %247 = OpVectorShuffle %246 %246 1 1 
                              Uniform f32_4* %249 = OpAccessChain %19 %248 %168 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 1 
                                       f32_2 %252 = OpFMul %247 %251 
                                                      OpStore %245 %252 
                              Uniform f32_4* %253 = OpAccessChain %19 %248 %20 
                                       f32_4 %254 = OpLoad %253 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_4 %256 = OpLoad %165 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 0 
                                       f32_2 %258 = OpFMul %255 %257 
                                       f32_2 %259 = OpLoad %245 
                                       f32_2 %260 = OpFAdd %258 %259 
                                                      OpStore %245 %260 
                              Uniform f32_4* %261 = OpAccessChain %19 %248 %180 
                                       f32_4 %262 = OpLoad %261 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_4 %264 = OpLoad %165 
                                       f32_2 %265 = OpVectorShuffle %264 %264 2 2 
                                       f32_2 %266 = OpFMul %263 %265 
                                       f32_2 %267 = OpLoad %245 
                                       f32_2 %268 = OpFAdd %266 %267 
                                                      OpStore %245 %268 
                              Uniform f32_4* %271 = OpAccessChain %19 %248 %189 
                                       f32_4 %272 = OpLoad %271 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_4 %274 = OpLoad %165 
                                       f32_2 %275 = OpVectorShuffle %274 %274 3 3 
                                       f32_2 %276 = OpFMul %273 %275 
                                       f32_2 %277 = OpLoad %245 
                                       f32_2 %278 = OpFAdd %276 %277 
                                                      OpStore vs_TEXCOORD3 %278 
                                       f32_4 %281 = OpLoad %280 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                              Uniform f32_4* %284 = OpAccessChain %19 %283 
                                       f32_4 %285 = OpLoad %284 
                                       f32_2 %286 = OpVectorShuffle %285 %285 0 1 
                                       f32_2 %287 = OpFMul %282 %286 
                              Uniform f32_4* %288 = OpAccessChain %19 %283 
                                       f32_4 %289 = OpLoad %288 
                                       f32_2 %290 = OpVectorShuffle %289 %289 2 3 
                                       f32_2 %291 = OpFAdd %287 %290 
                                                      OpStore vs_TEXCOORD0 %291 
                                Private f32* %292 = OpAccessChain %77 %21 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 8 %293 
                                Private f32* %295 = OpAccessChain %115 %30 
                                                      OpStore %295 %294 
                                Private f32* %296 = OpAccessChain %115 %30 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFMul %298 %147 
                                Private f32* %300 = OpAccessChain %77 %30 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %115 %21 
                                                      OpStore %303 %302 
                                       f32_4 %304 = OpLoad %115 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                       f32_2 %308 = OpFMul %305 %307 
                                       f32_2 %311 = OpFAdd %308 %310 
                                       f32_4 %312 = OpLoad %77 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 2 3 
                                                      OpStore %77 %313 
                                       f32_4 %314 = OpLoad %77 
                                       f32_2 %315 = OpVectorShuffle %314 %314 0 1 
                                       f32_4 %316 = OpLoad %77 
                                       f32_2 %317 = OpVectorShuffle %316 %316 0 1 
                                         f32 %318 = OpDot %315 %317 
                                Private f32* %319 = OpAccessChain %245 %30 
                                                      OpStore %319 %318 
                                       f32_2 %320 = OpLoad %245 
                                       f32_2 %321 = OpVectorShuffle %320 %320 0 0 
                                       f32_2 %322 = OpFNegate %321 
                                       f32_2 %326 = OpFMul %322 %325 
                                       f32_2 %328 = OpFAdd %326 %327 
                                       f32_4 %329 = OpLoad %115 
                                       f32_4 %330 = OpVectorShuffle %329 %328 0 1 4 5 
                                                      OpStore %115 %330 
                                Private f32* %332 = OpAccessChain %115 %331 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpExtInst %1 31 %333 
                                Private f32* %335 = OpAccessChain %245 %30 
                                                      OpStore %335 %334 
                                       f32_4 %336 = OpLoad %77 
                                       f32_2 %337 = OpVectorShuffle %336 %336 0 1 
                                       f32_2 %338 = OpLoad %245 
                                       f32_2 %339 = OpVectorShuffle %338 %338 0 0 
                                       f32_2 %340 = OpFMul %337 %339 
                                       f32_4 %341 = OpLoad %115 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 2 3 
                                                      OpStore %115 %342 
                                       f32_4 %343 = OpLoad %115 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 3 
                                       f32_3 %345 = OpExtInst %1 40 %344 %111 
                                       f32_4 %346 = OpLoad %77 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %77 %347 
                                       f32_4 %348 = OpLoad %77 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %351 = OpExtInst %1 37 %349 %350 
                                       f32_4 %352 = OpLoad %77 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %77 %353 
                                Private f32* %354 = OpAccessChain %77 %30 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFNegate %355 
                                Private f32* %357 = OpAccessChain %77 %155 
                                                      OpStore %357 %356 
                                Private f32* %358 = OpAccessChain %9 %30 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFNegate %359 
                                Private f32* %361 = OpAccessChain %9 %155 
                                                      OpStore %361 %360 
                                Uniform f32* %367 = OpAccessChain %19 %366 
                                         f32 %368 = OpLoad %367 
                                       f32_4 %369 = OpCompositeConstruct %368 %368 %368 %368 
                                      bool_4 %371 = OpFOrdNotEqual %365 %369 
                                        bool %372 = OpAny %371 
                                                      OpStore %364 %372 
                                        bool %373 = OpLoad %364 
                                                      OpSelectionMerge %377 None 
                                                      OpBranchConditional %373 %376 %380 
                                             %376 = OpLabel 
                                       f32_4 %378 = OpLoad %77 
                                       f32_3 %379 = OpVectorShuffle %378 %378 3 2 1 
                                                      OpStore %375 %379 
                                                      OpBranch %377 
                                             %380 = OpLabel 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 3 1 2 
                                                      OpStore %375 %382 
                                                      OpBranch %377 
                                             %377 = OpLabel 
                                       f32_3 %383 = OpLoad %375 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                              Uniform f32_4* %388 = OpAccessChain %19 %180 %20 
                                       f32_4 %389 = OpLoad %388 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                         f32 %391 = OpDot %387 %390 
                                Private f32* %392 = OpAccessChain %77 %30 
                                                      OpStore %392 %391 
                                       f32_4 %393 = OpLoad %9 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                              Uniform f32_4* %395 = OpAccessChain %19 %180 %168 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                         f32 %398 = OpDot %394 %397 
                                Private f32* %399 = OpAccessChain %77 %21 
                                                      OpStore %399 %398 
                                       f32_4 %400 = OpLoad %9 
                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
                              Uniform f32_4* %402 = OpAccessChain %19 %180 %180 
                                       f32_4 %403 = OpLoad %402 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                         f32 %405 = OpDot %401 %404 
                                Private f32* %406 = OpAccessChain %77 %331 
                                                      OpStore %406 %405 
                                       f32_4 %407 = OpLoad %77 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_4 %409 = OpLoad %77 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                         f32 %411 = OpDot %408 %410 
                                Private f32* %412 = OpAccessChain %9 %30 
                                                      OpStore %412 %411 
                                Private f32* %413 = OpAccessChain %9 %30 
                                         f32 %414 = OpLoad %413 
                                         f32 %415 = OpExtInst %1 32 %414 
                                Private f32* %416 = OpAccessChain %9 %30 
                                                      OpStore %416 %415 
                                       f32_4 %418 = OpLoad %9 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 0 0 
                                       f32_4 %420 = OpLoad %77 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_3 %422 = OpFMul %419 %421 
                                                      OpStore vs_TEXCOORD1 %422 
                                                      OpStore vs_TEXCOORD4 %365 
                                 Output f32* %425 = OpAccessChain %216 %20 %21 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFNegate %426 
                                 Output f32* %428 = OpAccessChain %216 %20 %21 
                                                      OpStore %428 %427 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 426
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %61 %212 %415 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate vs_TEXCOORD1 Location 61 
                                                      OpDecorate %203 DescriptorSet 203 
                                                      OpDecorate %203 Binding 203 
                                                      OpDecorate %207 DescriptorSet 207 
                                                      OpDecorate %207 Binding 207 
                                                      OpDecorate vs_TEXCOORD0 Location 212 
                                                      OpDecorate %290 DescriptorSet 290 
                                                      OpDecorate %290 Binding 290 
                                                      OpDecorate %292 DescriptorSet 292 
                                                      OpDecorate %292 Binding 292 
                                                      OpDecorate %415 Location 415 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %17 %6 %6 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %34 = OpVariable Private 
                                          i32 %39 = OpConstant 1 
                                              %40 = OpTypePointer Uniform %14 
                                          f32 %53 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_3* %67 = OpVariable Private 
                                          f32 %76 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                                          u32 %84 = OpConstant 0 
                                 Private f32* %90 = OpVariable Private 
                                          i32 %91 = OpConstant 4 
                                              %92 = OpTypePointer Uniform %6 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Private %97 
                               Private f32_2* %99 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                                Private f32* %109 = OpVariable Private 
                                Private f32* %115 = OpVariable Private 
                                         f32 %129 = OpConstant 3.674022E-40 
                                         f32 %132 = OpConstant 3.674022E-40 
                                Private f32* %141 = OpVariable Private 
                                Private f32* %149 = OpVariable Private 
                                         f32 %185 = OpConstant 3.674022E-40 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %197 = OpConstant 3.674022E-40 
                                             %201 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %202 = OpTypePointer UniformConstant %201 
        UniformConstant read_only Texture2D* %203 = OpVariable UniformConstant 
                                             %205 = OpTypeSampler 
                                             %206 = OpTypePointer UniformConstant %205 
                    UniformConstant sampler* %207 = OpVariable UniformConstant 
                                             %209 = OpTypeSampledImage %201 
                                             %211 = OpTypePointer Input %97 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                              Private f32_3* %216 = OpVariable Private 
                                         i32 %218 = OpConstant 6 
                                         f32 %223 = OpConstant 3.674022E-40 
                                       f32_3 %224 = OpConstantComposite %223 %223 %223 
                                         i32 %231 = OpConstant 5 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                             %251 = OpTypeBool 
                                             %252 = OpTypePointer Private %251 
                               Private bool* %253 = OpVariable Private 
                                         i32 %263 = OpConstant 3 
                                         i32 %276 = OpConstant 2 
        UniformConstant read_only Texture2D* %290 = OpVariable UniformConstant 
                    UniformConstant sampler* %292 = OpVariable UniformConstant 
                                         u32 %297 = OpConstant 3 
                              Private f32_3* %299 = OpVariable Private 
                              Private f32_3* %306 = OpVariable Private 
                                         f32 %326 = OpConstant 3.674022E-40 
                                       f32_3 %344 = OpConstantComposite %77 %77 %77 
                                         f32 %407 = OpConstant 3.674022E-40 
                                             %414 = OpTypePointer Output %14 
                               Output f32_4* %415 = OpVariable Output 
                                             %423 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                        f32_3 %35 = OpLoad %9 
                                          f32 %36 = OpLoad %28 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_3 %38 = OpFMul %35 %37 
                               Uniform f32_4* %41 = OpAccessChain %20 %39 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_3 %44 = OpFAdd %38 %43 
                                                      OpStore %34 %44 
                                          f32 %45 = OpLoad %28 
                                        f32_3 %46 = OpCompositeConstruct %45 %45 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFMul %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %34 
                                        f32_3 %50 = OpLoad %34 
                                          f32 %51 = OpDot %49 %50 
                                                      OpStore %28 %51 
                                          f32 %52 = OpLoad %28 
                                          f32 %54 = OpExtInst %1 40 %52 %53 
                                                      OpStore %28 %54 
                                          f32 %55 = OpLoad %28 
                                          f32 %56 = OpExtInst %1 32 %55 
                                                      OpStore %28 %56 
                                          f32 %57 = OpLoad %28 
                                        f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                                        f32_3 %59 = OpLoad %34 
                                        f32_3 %60 = OpFMul %58 %59 
                                                      OpStore %34 %60 
                                        f32_3 %62 = OpLoad vs_TEXCOORD1 
                                        f32_3 %63 = OpLoad vs_TEXCOORD1 
                                          f32 %64 = OpDot %62 %63 
                                                      OpStore %28 %64 
                                          f32 %65 = OpLoad %28 
                                          f32 %66 = OpExtInst %1 32 %65 
                                                      OpStore %28 %66 
                                          f32 %68 = OpLoad %28 
                                        f32_3 %69 = OpCompositeConstruct %68 %68 %68 
                                        f32_3 %70 = OpLoad vs_TEXCOORD1 
                                        f32_3 %71 = OpFMul %69 %70 
                                                      OpStore %67 %71 
                                        f32_3 %72 = OpLoad %67 
                                        f32_3 %73 = OpLoad %34 
                                          f32 %74 = OpDot %72 %73 
                                                      OpStore %28 %74 
                                          f32 %75 = OpLoad %28 
                                          f32 %78 = OpExtInst %1 43 %75 %76 %77 
                                                      OpStore %28 %78 
                               Uniform f32_4* %79 = OpAccessChain %20 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpLoad %34 
                                          f32 %83 = OpDot %81 %82 
                                 Private f32* %85 = OpAccessChain %34 %84 
                                                      OpStore %85 %83 
                                 Private f32* %86 = OpAccessChain %34 %84 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpExtInst %1 43 %87 %76 %77 
                                 Private f32* %89 = OpAccessChain %34 %84 
                                                      OpStore %89 %88 
                                 Uniform f32* %93 = OpAccessChain %20 %91 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFNegate %94 
                                          f32 %96 = OpFAdd %95 %77 
                                                      OpStore %90 %96 
                                         f32 %100 = OpLoad %90 
                                         f32 %101 = OpLoad %90 
                                         f32 %102 = OpFMul %100 %101 
                                Private f32* %103 = OpAccessChain %99 %84 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %99 %84 
                                         f32 %105 = OpLoad %104 
                                         f32 %107 = OpExtInst %1 40 %105 %106 
                                Private f32* %108 = OpAccessChain %99 %84 
                                                      OpStore %108 %107 
                                Private f32* %110 = OpAccessChain %99 %84 
                                         f32 %111 = OpLoad %110 
                                Private f32* %112 = OpAccessChain %99 %84 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFMul %111 %113 
                                                      OpStore %109 %114 
                                         f32 %116 = OpLoad %28 
                                         f32 %117 = OpLoad %109 
                                         f32 %118 = OpFMul %116 %117 
                                         f32 %119 = OpLoad %28 
                                         f32 %120 = OpFNegate %119 
                                         f32 %121 = OpFAdd %118 %120 
                                                      OpStore %115 %121 
                                         f32 %122 = OpLoad %115 
                                         f32 %123 = OpLoad %28 
                                         f32 %124 = OpFMul %122 %123 
                                         f32 %125 = OpFAdd %124 %77 
                                                      OpStore %28 %125 
                                         f32 %126 = OpLoad %28 
                                         f32 %127 = OpLoad %28 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %130 = OpFAdd %128 %129 
                                                      OpStore %28 %130 
                                         f32 %131 = OpLoad %109 
                                         f32 %133 = OpFMul %131 %132 
                                                      OpStore %109 %133 
                                         f32 %134 = OpLoad %109 
                                         f32 %135 = OpLoad %28 
                                         f32 %136 = OpFDiv %134 %135 
                                                      OpStore %28 %136 
                                       f32_3 %137 = OpLoad %67 
                                       f32_3 %138 = OpLoad %9 
                                         f32 %139 = OpDot %137 %138 
                                Private f32* %140 = OpAccessChain %9 %84 
                                                      OpStore %140 %139 
                                       f32_3 %142 = OpLoad %67 
                              Uniform f32_4* %143 = OpAccessChain %20 %39 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                         f32 %146 = OpDot %142 %145 
                                                      OpStore %141 %146 
                                         f32 %147 = OpLoad %141 
                                         f32 %148 = OpExtInst %1 43 %147 %76 %77 
                                                      OpStore %141 %148 
                                Private f32* %150 = OpAccessChain %99 %84 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                         f32 %153 = OpFAdd %152 %77 
                                                      OpStore %149 %153 
                                Private f32* %154 = OpAccessChain %9 %84 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpExtInst %1 4 %155 
                                         f32 %157 = OpLoad %149 
                                         f32 %158 = OpFMul %156 %157 
                                Private f32* %159 = OpAccessChain %99 %84 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                                      OpStore %109 %161 
                                         f32 %162 = OpLoad %141 
                                         f32 %163 = OpLoad %149 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %165 = OpAccessChain %99 %84 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFAdd %164 %166 
                                                      OpStore %149 %167 
                                         f32 %168 = OpLoad %149 
                                Private f32* %169 = OpAccessChain %9 %84 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 4 %170 
                                         f32 %172 = OpFMul %168 %171 
                                                      OpStore %149 %172 
                                Private f32* %173 = OpAccessChain %9 %84 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpExtInst %1 4 %174 
                                         f32 %176 = OpFNegate %175 
                                         f32 %177 = OpFAdd %176 %77 
                                Private f32* %178 = OpAccessChain %9 %84 
                                                      OpStore %178 %177 
                                         f32 %179 = OpLoad %141 
                                         f32 %180 = OpLoad %109 
                                         f32 %181 = OpFMul %179 %180 
                                         f32 %182 = OpLoad %149 
                                         f32 %183 = OpFAdd %181 %182 
                                                      OpStore %149 %183 
                                         f32 %184 = OpLoad %149 
                                         f32 %186 = OpFAdd %184 %185 
                                                      OpStore %149 %186 
                                         f32 %188 = OpLoad %149 
                                         f32 %189 = OpFDiv %187 %188 
                                                      OpStore %149 %189 
                                         f32 %190 = OpLoad %28 
                                         f32 %191 = OpLoad %149 
                                         f32 %192 = OpFMul %190 %191 
                                                      OpStore %149 %192 
                                         f32 %193 = OpLoad %141 
                                         f32 %194 = OpLoad %149 
                                         f32 %195 = OpFMul %193 %194 
                                                      OpStore %149 %195 
                                         f32 %196 = OpLoad %149 
                                         f32 %198 = OpFMul %196 %197 
                                                      OpStore %149 %198 
                                         f32 %199 = OpLoad %149 
                                         f32 %200 = OpExtInst %1 40 %199 %76 
                                                      OpStore %149 %200 
                         read_only Texture2D %204 = OpLoad %203 
                                     sampler %208 = OpLoad %207 
                  read_only Texture2DSampled %210 = OpSampledImage %204 %208 
                                       f32_2 %213 = OpLoad vs_TEXCOORD0 
                                       f32_4 %214 = OpImageSampleImplicitLod %210 %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                                      OpStore %67 %215 
                                       f32_3 %217 = OpLoad %67 
                              Uniform f32_4* %219 = OpAccessChain %20 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFMul %217 %221 
                                       f32_3 %225 = OpFAdd %222 %224 
                                                      OpStore %216 %225 
                                       f32_3 %226 = OpLoad %67 
                              Uniform f32_4* %227 = OpAccessChain %20 %218 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %226 %229 
                                                      OpStore %67 %230 
                                Uniform f32* %232 = OpAccessChain %20 %231 
                                         f32 %233 = OpLoad %232 
                                Uniform f32* %234 = OpAccessChain %20 %231 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %20 %231 
                                         f32 %237 = OpLoad %236 
                                       f32_3 %238 = OpCompositeConstruct %233 %235 %237 
                                         f32 %239 = OpCompositeExtract %238 0 
                                         f32 %240 = OpCompositeExtract %238 1 
                                         f32 %241 = OpCompositeExtract %238 2 
                                       f32_3 %242 = OpCompositeConstruct %239 %240 %241 
                                       f32_3 %243 = OpLoad %216 
                                       f32_3 %244 = OpFMul %242 %243 
                                       f32_3 %247 = OpFAdd %244 %246 
                                                      OpStore %216 %247 
                                       f32_3 %248 = OpLoad %216 
                                       f32_3 %249 = OpLoad %216 
                                         f32 %250 = OpDot %248 %249 
                                                      OpStore %28 %250 
                                         f32 %254 = OpLoad %28 
                                        bool %255 = OpFOrdNotEqual %254 %76 
                                                      OpStore %253 %255 
                                        bool %256 = OpLoad %253 
                                         f32 %257 = OpSelect %256 %77 %76 
                                                      OpStore %28 %257 
                                         f32 %258 = OpLoad %28 
                                         f32 %259 = OpLoad %149 
                                         f32 %260 = OpFMul %258 %259 
                                                      OpStore %149 %260 
                                       f32_3 %261 = OpLoad vs_TEXCOORD2 
                                       f32_2 %262 = OpVectorShuffle %261 %261 1 1 
                              Uniform f32_4* %264 = OpAccessChain %20 %263 %39 
                                       f32_4 %265 = OpLoad %264 
                                       f32_2 %266 = OpVectorShuffle %265 %265 0 1 
                                       f32_2 %267 = OpFMul %262 %266 
                                                      OpStore %99 %267 
                              Uniform f32_4* %268 = OpAccessChain %20 %263 %22 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                       f32_3 %271 = OpLoad vs_TEXCOORD2 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 0 
                                       f32_2 %273 = OpFMul %270 %272 
                                       f32_2 %274 = OpLoad %99 
                                       f32_2 %275 = OpFAdd %273 %274 
                                                      OpStore %99 %275 
                              Uniform f32_4* %277 = OpAccessChain %20 %263 %276 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_3 %280 = OpLoad vs_TEXCOORD2 
                                       f32_2 %281 = OpVectorShuffle %280 %280 2 2 
                                       f32_2 %282 = OpFMul %279 %281 
                                       f32_2 %283 = OpLoad %99 
                                       f32_2 %284 = OpFAdd %282 %283 
                                                      OpStore %99 %284 
                                       f32_2 %285 = OpLoad %99 
                              Uniform f32_4* %286 = OpAccessChain %20 %263 %263 
                                       f32_4 %287 = OpLoad %286 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpFAdd %285 %288 
                                                      OpStore %99 %289 
                         read_only Texture2D %291 = OpLoad %290 
                                     sampler %293 = OpLoad %292 
                  read_only Texture2DSampled %294 = OpSampledImage %291 %293 
                                       f32_2 %295 = OpLoad %99 
                                       f32_4 %296 = OpImageSampleImplicitLod %294 %295 
                                         f32 %298 = OpCompositeExtract %296 3 
                                                      OpStore %28 %298 
                                         f32 %300 = OpLoad %28 
                                       f32_3 %301 = OpCompositeConstruct %300 %300 %300 
                              Uniform f32_4* %302 = OpAccessChain %20 %276 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %305 = OpFMul %301 %304 
                                                      OpStore %299 %305 
                                         f32 %307 = OpLoad %149 
                                       f32_3 %308 = OpCompositeConstruct %307 %307 %307 
                                       f32_3 %309 = OpLoad %299 
                                       f32_3 %310 = OpFMul %308 %309 
                                                      OpStore %306 %310 
                                Private f32* %311 = OpAccessChain %34 %84 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFNegate %312 
                                         f32 %314 = OpFAdd %313 %77 
                                                      OpStore %149 %314 
                                Private f32* %315 = OpAccessChain %34 %84 
                                         f32 %316 = OpLoad %315 
                                Private f32* %317 = OpAccessChain %34 %84 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFMul %316 %318 
                                                      OpStore %28 %319 
                                         f32 %320 = OpLoad %28 
                                       f32_2 %321 = OpCompositeConstruct %320 %320 
                                         f32 %322 = OpLoad %90 
                                       f32_2 %323 = OpCompositeConstruct %322 %322 
                                         f32 %324 = OpDot %321 %323 
                                                      OpStore %28 %324 
                                         f32 %325 = OpLoad %28 
                                         f32 %327 = OpFAdd %325 %326 
                                                      OpStore %28 %327 
                                         f32 %328 = OpLoad %149 
                                         f32 %329 = OpLoad %149 
                                         f32 %330 = OpFMul %328 %329 
                                Private f32* %331 = OpAccessChain %34 %84 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %34 %84 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %34 %84 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFMul %333 %335 
                                Private f32* %337 = OpAccessChain %34 %84 
                                                      OpStore %337 %336 
                                         f32 %338 = OpLoad %149 
                                Private f32* %339 = OpAccessChain %34 %84 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %338 %340 
                                                      OpStore %149 %341 
                                       f32_3 %342 = OpLoad %216 
                                       f32_3 %343 = OpFNegate %342 
                                       f32_3 %345 = OpFAdd %343 %344 
                                                      OpStore %34 %345 
                                       f32_3 %346 = OpLoad %34 
                                         f32 %347 = OpLoad %149 
                                       f32_3 %348 = OpCompositeConstruct %347 %347 %347 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_3 %350 = OpLoad %216 
                                       f32_3 %351 = OpFAdd %349 %350 
                                                      OpStore %34 %351 
                                       f32_3 %352 = OpLoad %34 
                                       f32_3 %353 = OpLoad %306 
                                       f32_3 %354 = OpFMul %352 %353 
                                                      OpStore %34 %354 
                                Private f32* %355 = OpAccessChain %9 %84 
                                         f32 %356 = OpLoad %355 
                                Private f32* %357 = OpAccessChain %9 %84 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFMul %356 %358 
                                                      OpStore %149 %359 
                                         f32 %360 = OpLoad %149 
                                         f32 %361 = OpLoad %149 
                                         f32 %362 = OpFMul %360 %361 
                                                      OpStore %149 %362 
                                Private f32* %363 = OpAccessChain %9 %84 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpLoad %149 
                                         f32 %366 = OpFMul %364 %365 
                                Private f32* %367 = OpAccessChain %9 %84 
                                                      OpStore %367 %366 
                                         f32 %368 = OpLoad %28 
                                Private f32* %369 = OpAccessChain %9 %84 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpFMul %368 %370 
                                         f32 %372 = OpFAdd %371 %77 
                                Private f32* %373 = OpAccessChain %9 %84 
                                                      OpStore %373 %372 
                                         f32 %374 = OpLoad %141 
                                         f32 %375 = OpFNegate %374 
                                         f32 %376 = OpFAdd %375 %77 
                                                      OpStore %149 %376 
                                         f32 %377 = OpLoad %149 
                                         f32 %378 = OpLoad %149 
                                         f32 %379 = OpFMul %377 %378 
                                                      OpStore %109 %379 
                                         f32 %380 = OpLoad %109 
                                         f32 %381 = OpLoad %109 
                                         f32 %382 = OpFMul %380 %381 
                                                      OpStore %109 %382 
                                         f32 %383 = OpLoad %149 
                                         f32 %384 = OpLoad %109 
                                         f32 %385 = OpFMul %383 %384 
                                                      OpStore %149 %385 
                                         f32 %386 = OpLoad %28 
                                         f32 %387 = OpLoad %149 
                                         f32 %388 = OpFMul %386 %387 
                                         f32 %389 = OpFAdd %388 %77 
                                                      OpStore %149 %389 
                                Private f32* %390 = OpAccessChain %9 %84 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpLoad %149 
                                         f32 %393 = OpFMul %391 %392 
                                Private f32* %394 = OpAccessChain %9 %84 
                                                      OpStore %394 %393 
                                         f32 %395 = OpLoad %141 
                                Private f32* %396 = OpAccessChain %9 %84 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %395 %397 
                                Private f32* %399 = OpAccessChain %9 %84 
                                                      OpStore %399 %398 
                                       f32_3 %400 = OpLoad %9 
                                       f32_3 %401 = OpVectorShuffle %400 %400 0 0 0 
                                       f32_3 %402 = OpLoad %299 
                                       f32_3 %403 = OpFMul %401 %402 
                                                      OpStore %9 %403 
                                Uniform f32* %404 = OpAccessChain %20 %231 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFNegate %405 
                                         f32 %408 = OpFMul %406 %407 
                                         f32 %409 = OpFAdd %408 %407 
                                                      OpStore %28 %409 
                                         f32 %410 = OpLoad %28 
                                       f32_3 %411 = OpCompositeConstruct %410 %410 %410 
                                       f32_3 %412 = OpLoad %67 
                                       f32_3 %413 = OpFMul %411 %412 
                                                      OpStore %67 %413 
                                       f32_3 %416 = OpLoad %67 
                                       f32_3 %417 = OpLoad %9 
                                       f32_3 %418 = OpFMul %416 %417 
                                       f32_3 %419 = OpLoad %34 
                                       f32_3 %420 = OpFAdd %418 %419 
                                       f32_4 %421 = OpLoad %415 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %415 %422 
                                 Output f32* %424 = OpAccessChain %415 %297 
                                                      OpStore %424 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(2) uniform  sampler2D _posTex;
UNITY_LOCATION(3) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat11;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5 = float(_numOfFrames);
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat5;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat0.x = u_xlat5 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    gl_Position = u_xlat3;
    vs_TEXCOORD5 = u_xlat3.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat11)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat11 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat11);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat6 = (-_Glossiness) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat6;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat7.x = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat18 * u_xlat7.x + (-u_xlat18);
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat7.x = u_xlat7.x * 0.318309873;
    u_xlat18 = u_xlat7.x / u_xlat18;
    u_xlat7.x = (-u_xlat12) + 1.0;
    u_xlat13 = abs(u_xlat0.x) * u_xlat7.x + u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4 = texture(_LightTexture0, vec2(u_xlat18));
    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat12 = (-u_xlat19) + 1.0;
    u_xlat18 = u_xlat19 * u_xlat19;
    u_xlat6 = dot(vec2(u_xlat18), vec2(u_xlat6));
    u_xlat6 = u_xlat6 + -0.5;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat7.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat5.xyz;
    u_xlat12 = u_xlat0.x * u_xlat0.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x + 1.0;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat6 = u_xlat6 * u_xlat12 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat18 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 440
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %68 %159 %223 %228 %233 %234 %370 %376 %424 %434 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %68 Location 68 
                                                      OpDecorate %80 DescriptorSet 80 
                                                      OpDecorate %80 Binding 80 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %95 DescriptorSet 95 
                                                      OpDecorate %95 Binding 95 
                                                      OpDecorate %159 Location 159 
                                                      OpMemberDecorate %221 0 BuiltIn 221 
                                                      OpMemberDecorate %221 1 BuiltIn 221 
                                                      OpMemberDecorate %221 2 BuiltIn 221 
                                                      OpDecorate %221 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 228 
                                                      OpDecorate vs_TEXCOORD0 Location 233 
                                                      OpDecorate %234 Location 234 
                                                      OpDecorate vs_TEXCOORD1 Location 370 
                                                      OpDecorate vs_TEXCOORD2 Location 376 
                                                      OpDecorate vs_TEXCOORD3 Location 424 
                                                      OpDecorate vs_TEXCOORD4 Location 434 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeArray %7 %11 
                                              %16 = OpTypeInt 32 1 
                                              %17 = OpTypeStruct %7 %12 %13 %14 %15 %6 %6 %6 %6 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %19 = OpVariable Uniform 
                                          i32 %20 = OpConstant 0 
                                          u32 %21 = OpConstant 1 
                                              %22 = OpTypePointer Uniform %6 
                                          i32 %26 = OpConstant 8 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %37 = OpVariable Private 
                                          i32 %38 = OpConstant 9 
                                              %39 = OpTypePointer Uniform %16 
                                          f32 %57 = OpConstant 3.674022E-40 
                                              %67 = OpTypePointer Input %7 
                                 Input f32_4* %68 = OpVariable Input 
                                              %69 = OpTypePointer Input %6 
                               Private f32_4* %77 = OpVariable Private 
                                              %78 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %79 = OpTypePointer UniformConstant %78 
         UniformConstant read_only Texture2D* %80 = OpVariable UniformConstant 
                                              %82 = OpTypeSampler 
                                              %83 = OpTypePointer UniformConstant %82 
                     UniformConstant sampler* %84 = OpVariable UniformConstant 
                                              %86 = OpTypeSampledImage %78 
                                              %88 = OpTypeVector %6 2 
                                          f32 %91 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %93 = OpVariable UniformConstant 
                     UniformConstant sampler* %95 = OpVariable UniformConstant 
                                             %101 = OpTypeVector %6 3 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_3 %108 = OpConstantComposite %107 %107 %107 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_3 %111 = OpConstantComposite %110 %110 %110 
                              Private f32_4* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 7 
                                         i32 %120 = OpConstant 6 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_2 %148 = OpConstantComposite %146 %147 
                                         u32 %155 = OpConstant 3 
                                Input f32_4* %159 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                              Private f32_4* %193 = OpVariable Private 
                                             %220 = OpTypeArray %6 %21 
                                             %221 = OpTypeStruct %7 %6 %220 
                                             %222 = OpTypePointer Output %221 
        Output struct {f32_4; f32; f32[1];}* %223 = OpVariable Output 
                                             %225 = OpTypePointer Output %7 
                                             %227 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %229 = OpConstant 2 
                                             %232 = OpTypePointer Output %88 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %234 = OpVariable Input 
                                         i32 %237 = OpConstant 10 
                                         f32 %260 = OpConstant 3.674022E-40 
                                       f32_2 %261 = OpConstantComposite %260 %260 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_2 %264 = OpConstantComposite %263 %263 
                                Private f32* %268 = OpVariable Private 
                                         f32 %277 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_2 %279 = OpConstantComposite %277 %278 
                                       f32_2 %281 = OpConstantComposite %57 %57 
                                       f32_3 %302 = OpConstantComposite %57 %57 %57 
                                             %314 = OpTypeBool 
                                             %315 = OpTypePointer Private %314 
                               Private bool* %316 = OpVariable Private 
                                       f32_4 %317 = OpConstantComposite %91 %91 %91 %91 
                                         i32 %318 = OpConstant 5 
                                             %322 = OpTypeVector %314 4 
                                             %326 = OpTypePointer Function %101 
                                             %369 = OpTypePointer Output %101 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %395 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %327 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %19 %20 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpFNegate %24 
                                 Uniform f32* %27 = OpAccessChain %19 %26 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFMul %25 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %9 %30 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 10 %34 
                                 Private f32* %36 = OpAccessChain %9 %30 
                                                      OpStore %36 %35 
                                 Uniform i32* %40 = OpAccessChain %19 %38 
                                          i32 %41 = OpLoad %40 
                                          f32 %42 = OpConvertSToF %41 
                                                      OpStore %37 %42 
                                          f32 %43 = OpLoad %37 
                                 Private f32* %44 = OpAccessChain %9 %30 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Private f32* %47 = OpAccessChain %9 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 9 %49 
                                 Private f32* %51 = OpAccessChain %9 %30 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %9 %30 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %37 
                                          f32 %55 = OpFDiv %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %30 
                                                      OpStore %56 %55 
                                          f32 %58 = OpLoad %37 
                                          f32 %59 = OpFDiv %57 %58 
                                                      OpStore %37 %59 
                                          f32 %60 = OpLoad %37 
                                 Private f32* %61 = OpAccessChain %9 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %30 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %30 
                                          f32 %66 = OpLoad %65 
                                   Input f32* %70 = OpAccessChain %68 %21 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %66 %71 
                                 Private f32* %73 = OpAccessChain %9 %21 
                                                      OpStore %73 %72 
                                   Input f32* %74 = OpAccessChain %68 %30 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %30 
                                                      OpStore %76 %75 
                          read_only Texture2D %81 = OpLoad %80 
                                      sampler %85 = OpLoad %84 
                   read_only Texture2DSampled %87 = OpSampledImage %81 %85 
                                        f32_4 %89 = OpLoad %9 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                        f32_4 %92 = OpImageSampleExplicitLod %87 %90 Lod %7 
                                                      OpStore %77 %92 
                          read_only Texture2D %94 = OpLoad %93 
                                      sampler %96 = OpLoad %95 
                   read_only Texture2DSampled %97 = OpSampledImage %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_4 %100 = OpImageSampleExplicitLod %97 %99 Lod %7 
                                       f32_3 %102 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %9 %104 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 2 1 
                                       f32_3 %109 = OpFMul %106 %108 
                                       f32_3 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 6 3 
                                                      OpStore %9 %114 
                                Uniform f32* %117 = OpAccessChain %19 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Uniform f32* %121 = OpAccessChain %19 %120 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %119 %122 
                                Private f32* %124 = OpAccessChain %115 %30 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %115 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_3 %129 = OpFMul %126 %128 
                                Uniform f32* %130 = OpAccessChain %19 %116 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %132 = OpAccessChain %19 %116 
                                         f32 %133 = OpLoad %132 
                                Uniform f32* %134 = OpAccessChain %19 %116 
                                         f32 %135 = OpLoad %134 
                                       f32_3 %136 = OpCompositeConstruct %131 %133 %135 
                                         f32 %137 = OpCompositeExtract %136 0 
                                         f32 %138 = OpCompositeExtract %136 1 
                                         f32 %139 = OpCompositeExtract %136 2 
                                       f32_3 %140 = OpCompositeConstruct %137 %138 %139 
                                       f32_3 %141 = OpFAdd %129 %140 
                                       f32_4 %142 = OpLoad %115 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %115 %143 
                                       f32_4 %144 = OpLoad %77 
                                       f32_2 %145 = OpVectorShuffle %144 %144 3 3 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_4 %150 = OpLoad %77 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %77 %151 
                                Private f32* %152 = OpAccessChain %115 %30 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                Private f32* %156 = OpAccessChain %115 %155 
                                                      OpStore %156 %154 
                                       f32_4 %157 = OpLoad %115 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 2 1 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %158 %161 
                                       f32_4 %163 = OpLoad %115 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %115 %164 
                                       f32_4 %166 = OpLoad %115 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %19 %168 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %167 %171 
                                                      OpStore %165 %172 
                              Uniform f32_4* %173 = OpAccessChain %19 %168 %20 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %115 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %165 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %165 %179 
                              Uniform f32_4* %181 = OpAccessChain %19 %168 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %115 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %165 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %115 %187 
                                       f32_4 %188 = OpLoad %115 
                              Uniform f32_4* %190 = OpAccessChain %19 %168 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %165 %192 
                                       f32_4 %194 = OpLoad %165 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %19 %189 %168 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFMul %195 %197 
                                                      OpStore %193 %198 
                              Uniform f32_4* %199 = OpAccessChain %19 %189 %20 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %165 
                                       f32_4 %202 = OpVectorShuffle %201 %201 0 0 0 0 
                                       f32_4 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %193 
                                       f32_4 %205 = OpFAdd %203 %204 
                                                      OpStore %193 %205 
                              Uniform f32_4* %206 = OpAccessChain %19 %189 %180 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %165 
                                       f32_4 %209 = OpVectorShuffle %208 %208 2 2 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %193 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %193 %212 
                              Uniform f32_4* %213 = OpAccessChain %19 %189 %189 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %165 
                                       f32_4 %216 = OpVectorShuffle %215 %215 3 3 3 3 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %193 
                                       f32_4 %219 = OpFAdd %217 %218 
                                                      OpStore %165 %219 
                                       f32_4 %224 = OpLoad %165 
                               Output f32_4* %226 = OpAccessChain %223 %20 
                                                      OpStore %226 %224 
                                Private f32* %230 = OpAccessChain %165 %229 
                                         f32 %231 = OpLoad %230 
                                                      OpStore vs_TEXCOORD5 %231 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                              Uniform f32_4* %238 = OpAccessChain %19 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %241 = OpFMul %236 %240 
                              Uniform f32_4* %242 = OpAccessChain %19 %237 
                                       f32_4 %243 = OpLoad %242 
                                       f32_2 %244 = OpVectorShuffle %243 %243 2 3 
                                       f32_2 %245 = OpFAdd %241 %244 
                                                      OpStore vs_TEXCOORD0 %245 
                                Private f32* %246 = OpAccessChain %77 %21 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpExtInst %1 8 %247 
                                Private f32* %249 = OpAccessChain %165 %30 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %165 %30 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFNegate %251 
                                         f32 %253 = OpFMul %252 %147 
                                Private f32* %254 = OpAccessChain %77 %30 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFAdd %253 %255 
                                Private f32* %257 = OpAccessChain %165 %21 
                                                      OpStore %257 %256 
                                       f32_4 %258 = OpLoad %165 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %262 = OpFMul %259 %261 
                                       f32_2 %265 = OpFAdd %262 %264 
                                       f32_4 %266 = OpLoad %77 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 2 3 
                                                      OpStore %77 %267 
                                       f32_4 %269 = OpLoad %77 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                       f32_4 %271 = OpLoad %77 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %268 %273 
                                         f32 %274 = OpLoad %268 
                                       f32_2 %275 = OpCompositeConstruct %274 %274 
                                       f32_2 %276 = OpFNegate %275 
                                       f32_2 %280 = OpFMul %276 %279 
                                       f32_2 %282 = OpFAdd %280 %281 
                                       f32_4 %283 = OpLoad %165 
                                       f32_4 %284 = OpVectorShuffle %283 %282 0 1 4 5 
                                                      OpStore %165 %284 
                                Private f32* %285 = OpAccessChain %165 %229 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpExtInst %1 31 %286 
                                                      OpStore %268 %287 
                                       f32_4 %288 = OpLoad %77 
                                       f32_2 %289 = OpVectorShuffle %288 %288 0 1 
                                         f32 %290 = OpLoad %268 
                                       f32_2 %291 = OpCompositeConstruct %290 %290 
                                       f32_2 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %165 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 2 3 
                                                      OpStore %165 %294 
                                       f32_4 %295 = OpLoad %165 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 3 
                                       f32_3 %297 = OpExtInst %1 40 %296 %111 
                                       f32_4 %298 = OpLoad %77 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %77 %299 
                                       f32_4 %300 = OpLoad %77 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %303 = OpExtInst %1 37 %301 %302 
                                       f32_4 %304 = OpLoad %77 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %77 %305 
                                Private f32* %306 = OpAccessChain %77 %30 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFNegate %307 
                                Private f32* %309 = OpAccessChain %77 %155 
                                                      OpStore %309 %308 
                                Private f32* %310 = OpAccessChain %9 %30 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                Private f32* %313 = OpAccessChain %9 %155 
                                                      OpStore %313 %312 
                                Uniform f32* %319 = OpAccessChain %19 %318 
                                         f32 %320 = OpLoad %319 
                                       f32_4 %321 = OpCompositeConstruct %320 %320 %320 %320 
                                      bool_4 %323 = OpFOrdNotEqual %317 %321 
                                        bool %324 = OpAny %323 
                                                      OpStore %316 %324 
                                        bool %325 = OpLoad %316 
                                                      OpSelectionMerge %329 None 
                                                      OpBranchConditional %325 %328 %332 
                                             %328 = OpLabel 
                                       f32_4 %330 = OpLoad %77 
                                       f32_3 %331 = OpVectorShuffle %330 %330 3 2 1 
                                                      OpStore %327 %331 
                                                      OpBranch %329 
                                             %332 = OpLabel 
                                       f32_4 %333 = OpLoad %9 
                                       f32_3 %334 = OpVectorShuffle %333 %333 3 1 2 
                                                      OpStore %327 %334 
                                                      OpBranch %329 
                                             %329 = OpLabel 
                                       f32_3 %335 = OpLoad %327 
                                       f32_4 %336 = OpLoad %9 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
                                                      OpStore %9 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                              Uniform f32_4* %340 = OpAccessChain %19 %180 %20 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                         f32 %343 = OpDot %339 %342 
                                Private f32* %344 = OpAccessChain %77 %30 
                                                      OpStore %344 %343 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                              Uniform f32_4* %347 = OpAccessChain %19 %180 %168 
                                       f32_4 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                         f32 %350 = OpDot %346 %349 
                                Private f32* %351 = OpAccessChain %77 %21 
                                                      OpStore %351 %350 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                              Uniform f32_4* %354 = OpAccessChain %19 %180 %180 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                         f32 %357 = OpDot %353 %356 
                                Private f32* %358 = OpAccessChain %77 %229 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %77 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_4 %361 = OpLoad %77 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                         f32 %363 = OpDot %360 %362 
                                Private f32* %364 = OpAccessChain %9 %30 
                                                      OpStore %364 %363 
                                Private f32* %365 = OpAccessChain %9 %30 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpExtInst %1 32 %366 
                                Private f32* %368 = OpAccessChain %9 %30 
                                                      OpStore %368 %367 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 0 0 
                                       f32_4 %373 = OpLoad %77 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                                      OpStore vs_TEXCOORD1 %375 
                              Uniform f32_4* %377 = OpAccessChain %19 %168 %189 
                                       f32_4 %378 = OpLoad %377 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_4 %380 = OpLoad %159 
                                       f32_3 %381 = OpVectorShuffle %380 %380 3 3 3 
                                       f32_3 %382 = OpFMul %379 %381 
                                       f32_4 %383 = OpLoad %115 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_3 %385 = OpFAdd %382 %384 
                                                      OpStore vs_TEXCOORD2 %385 
                              Uniform f32_4* %386 = OpAccessChain %19 %168 %189 
                                       f32_4 %387 = OpLoad %386 
                                       f32_4 %388 = OpLoad %159 
                                       f32_4 %389 = OpVectorShuffle %388 %388 3 3 3 3 
                                       f32_4 %390 = OpFMul %387 %389 
                                       f32_4 %391 = OpLoad %115 
                                       f32_4 %392 = OpFAdd %390 %391 
                                                      OpStore %9 %392 
                                       f32_4 %393 = OpLoad %9 
                                       f32_3 %394 = OpVectorShuffle %393 %393 1 1 1 
                              Uniform f32_4* %396 = OpAccessChain %19 %395 %168 
                                       f32_4 %397 = OpLoad %396 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                       f32_3 %399 = OpFMul %394 %398 
                                       f32_4 %400 = OpLoad %77 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %77 %401 
                              Uniform f32_4* %402 = OpAccessChain %19 %395 %20 
                                       f32_4 %403 = OpLoad %402 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_4 %405 = OpLoad %9 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 0 0 
                                       f32_3 %407 = OpFMul %404 %406 
                                       f32_4 %408 = OpLoad %77 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                       f32_3 %410 = OpFAdd %407 %409 
                                       f32_4 %411 = OpLoad %77 
                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
                                                      OpStore %77 %412 
                              Uniform f32_4* %413 = OpAccessChain %19 %395 %180 
                                       f32_4 %414 = OpLoad %413 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_4 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 2 2 2 
                                       f32_3 %418 = OpFMul %415 %417 
                                       f32_4 %419 = OpLoad %77 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
                                       f32_3 %421 = OpFAdd %418 %420 
                                       f32_4 %422 = OpLoad %9 
                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 6 3 
                                                      OpStore %9 %423 
                              Uniform f32_4* %425 = OpAccessChain %19 %395 %189 
                                       f32_4 %426 = OpLoad %425 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_4 %428 = OpLoad %9 
                                       f32_3 %429 = OpVectorShuffle %428 %428 3 3 3 
                                       f32_3 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %9 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpFAdd %430 %432 
                                                      OpStore vs_TEXCOORD3 %433 
                                                      OpStore vs_TEXCOORD4 %317 
                                 Output f32* %435 = OpAccessChain %223 %20 %21 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFNegate %436 
                                 Output f32* %438 = OpAccessChain %223 %20 %21 
                                                      OpStore %438 %437 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 466
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %75 %223 %429 %456 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate vs_TEXCOORD1 Location 75 
                                                      OpDecorate %213 DescriptorSet 213 
                                                      OpDecorate %213 Binding 213 
                                                      OpDecorate %217 DescriptorSet 217 
                                                      OpDecorate %217 Binding 217 
                                                      OpDecorate vs_TEXCOORD0 Location 223 
                                                      OpDecorate %305 DescriptorSet 305 
                                                      OpDecorate %305 Binding 305 
                                                      OpDecorate %307 DescriptorSet 307 
                                                      OpDecorate %307 Binding 307 
                                                      OpDecorate vs_TEXCOORD5 Location 429 
                                                      OpDecorate %456 Location 456 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %14 %14 %17 %6 %6 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 2 
                                              %42 = OpTypePointer Uniform %14 
                               Private f32_3* %52 = OpVariable Private 
                                          f32 %67 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_3* %81 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                                 Private f32* %93 = OpVariable Private 
                                         u32 %102 = OpConstant 0 
                                Private f32* %112 = OpVariable Private 
                                         i32 %113 = OpConstant 6 
                                             %114 = OpTypePointer Uniform %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %124 = OpConstant 3.674022E-40 
                              Private f32_3* %126 = OpVariable Private 
                                Private f32* %131 = OpVariable Private 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %150 = OpConstant 3.674022E-40 
                                         f32 %194 = OpConstant 3.674022E-40 
                                         f32 %196 = OpConstant 3.674022E-40 
                                         f32 %207 = OpConstant 3.674022E-40 
                                             %211 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %212 = OpTypePointer UniformConstant %211 
        UniformConstant read_only Texture2D* %213 = OpVariable UniformConstant 
                                             %215 = OpTypeSampler 
                                             %216 = OpTypePointer UniformConstant %215 
                    UniformConstant sampler* %217 = OpVariable UniformConstant 
                                             %219 = OpTypeSampledImage %211 
                                             %221 = OpTypeVector %6 2 
                                             %222 = OpTypePointer Input %221 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %228 = OpConstant 8 
                                         f32 %233 = OpConstant 3.674022E-40 
                                       f32_3 %234 = OpConstantComposite %233 %233 %233 
                                         i32 %241 = OpConstant 7 
                                         f32 %255 = OpConstant 3.674022E-40 
                                       f32_3 %256 = OpConstantComposite %255 %255 %255 
                                             %261 = OpTypeBool 
                                             %262 = OpTypePointer Private %261 
                               Private bool* %263 = OpVariable Private 
                              Private f32_3* %271 = OpVariable Private 
                                         i32 %274 = OpConstant 5 
                                         i32 %275 = OpConstant 1 
                                         i32 %297 = OpConstant 3 
        UniformConstant read_only Texture2D* %305 = OpVariable UniformConstant 
                    UniformConstant sampler* %307 = OpVariable UniformConstant 
                                         i32 %316 = OpConstant 4 
                              Private f32_3* %321 = OpVariable Private 
                                         f32 %338 = OpConstant 3.674022E-40 
                                       f32_3 %351 = OpConstantComposite %91 %91 %91 
                                         f32 %416 = OpConstant 3.674022E-40 
                                             %428 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %431 = OpConstant 1 
                                         u32 %439 = OpConstant 2 
                                         u32 %449 = OpConstant 3 
                                             %455 = OpTypePointer Output %14 
                               Output f32_4* %456 = OpVariable Output 
                                             %463 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                          f32 %34 = OpLoad %28 
                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFMul %35 %36 
                                                      OpStore %9 %37 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_4* %43 = OpAccessChain %20 %41 
                                        f32_4 %44 = OpLoad %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                        f32_3 %46 = OpFAdd %40 %45 
                                                      OpStore %38 %46 
                                        f32_3 %47 = OpLoad %38 
                                        f32_3 %48 = OpLoad %38 
                                          f32 %49 = OpDot %47 %48 
                                                      OpStore %28 %49 
                                          f32 %50 = OpLoad %28 
                                          f32 %51 = OpExtInst %1 32 %50 
                                                      OpStore %28 %51 
                                        f32_3 %53 = OpLoad %38 
                                          f32 %54 = OpLoad %28 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpFMul %53 %55 
                                        f32_3 %57 = OpLoad %9 
                                        f32_3 %58 = OpFAdd %56 %57 
                                                      OpStore %52 %58 
                                          f32 %59 = OpLoad %28 
                                        f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                        f32_3 %61 = OpLoad %38 
                                        f32_3 %62 = OpFMul %60 %61 
                                                      OpStore %38 %62 
                                        f32_3 %63 = OpLoad %52 
                                        f32_3 %64 = OpLoad %52 
                                          f32 %65 = OpDot %63 %64 
                                                      OpStore %28 %65 
                                          f32 %66 = OpLoad %28 
                                          f32 %68 = OpExtInst %1 40 %66 %67 
                                                      OpStore %28 %68 
                                          f32 %69 = OpLoad %28 
                                          f32 %70 = OpExtInst %1 32 %69 
                                                      OpStore %28 %70 
                                          f32 %71 = OpLoad %28 
                                        f32_3 %72 = OpCompositeConstruct %71 %71 %71 
                                        f32_3 %73 = OpLoad %52 
                                        f32_3 %74 = OpFMul %72 %73 
                                                      OpStore %52 %74 
                                        f32_3 %76 = OpLoad vs_TEXCOORD1 
                                        f32_3 %77 = OpLoad vs_TEXCOORD1 
                                          f32 %78 = OpDot %76 %77 
                                                      OpStore %28 %78 
                                          f32 %79 = OpLoad %28 
                                          f32 %80 = OpExtInst %1 32 %79 
                                                      OpStore %28 %80 
                                          f32 %82 = OpLoad %28 
                                        f32_3 %83 = OpCompositeConstruct %82 %82 %82 
                                        f32_3 %84 = OpLoad vs_TEXCOORD1 
                                        f32_3 %85 = OpFMul %83 %84 
                                                      OpStore %81 %85 
                                        f32_3 %86 = OpLoad %81 
                                        f32_3 %87 = OpLoad %52 
                                          f32 %88 = OpDot %86 %87 
                                                      OpStore %28 %88 
                                          f32 %89 = OpLoad %28 
                                          f32 %92 = OpExtInst %1 43 %89 %90 %91 
                                                      OpStore %28 %92 
                                        f32_3 %94 = OpLoad %38 
                                        f32_3 %95 = OpLoad %52 
                                          f32 %96 = OpDot %94 %95 
                                                      OpStore %93 %96 
                                          f32 %97 = OpLoad %93 
                                          f32 %98 = OpExtInst %1 43 %97 %90 %91 
                                                      OpStore %93 %98 
                                        f32_3 %99 = OpLoad %81 
                                       f32_3 %100 = OpLoad %38 
                                         f32 %101 = OpDot %99 %100 
                                Private f32* %103 = OpAccessChain %38 %102 
                                                      OpStore %103 %101 
                                Private f32* %104 = OpAccessChain %38 %102 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpExtInst %1 43 %105 %90 %91 
                                Private f32* %107 = OpAccessChain %38 %102 
                                                      OpStore %107 %106 
                                       f32_3 %108 = OpLoad %81 
                                       f32_3 %109 = OpLoad %9 
                                         f32 %110 = OpDot %108 %109 
                                Private f32* %111 = OpAccessChain %9 %102 
                                                      OpStore %111 %110 
                                Uniform f32* %115 = OpAccessChain %20 %113 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFNegate %116 
                                         f32 %118 = OpFAdd %117 %91 
                                                      OpStore %112 %118 
                                         f32 %120 = OpLoad %112 
                                         f32 %121 = OpLoad %112 
                                         f32 %122 = OpFMul %120 %121 
                                                      OpStore %119 %122 
                                         f32 %123 = OpLoad %119 
                                         f32 %125 = OpExtInst %1 40 %123 %124 
                                                      OpStore %119 %125 
                                         f32 %127 = OpLoad %119 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpFMul %127 %128 
                                Private f32* %130 = OpAccessChain %126 %102 
                                                      OpStore %130 %129 
                                         f32 %132 = OpLoad %28 
                                Private f32* %133 = OpAccessChain %126 %102 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFMul %132 %134 
                                         f32 %136 = OpLoad %28 
                                         f32 %137 = OpFNegate %136 
                                         f32 %138 = OpFAdd %135 %137 
                                                      OpStore %131 %138 
                                         f32 %139 = OpLoad %131 
                                         f32 %140 = OpLoad %28 
                                         f32 %141 = OpFMul %139 %140 
                                         f32 %142 = OpFAdd %141 %91 
                                                      OpStore %28 %142 
                                         f32 %143 = OpLoad %28 
                                         f32 %144 = OpLoad %28 
                                         f32 %145 = OpFMul %143 %144 
                                         f32 %147 = OpFAdd %145 %146 
                                                      OpStore %28 %147 
                                Private f32* %148 = OpAccessChain %126 %102 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpFMul %149 %150 
                                Private f32* %152 = OpAccessChain %126 %102 
                                                      OpStore %152 %151 
                                Private f32* %153 = OpAccessChain %126 %102 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpLoad %28 
                                         f32 %156 = OpFDiv %154 %155 
                                                      OpStore %28 %156 
                                         f32 %157 = OpLoad %119 
                                         f32 %158 = OpFNegate %157 
                                         f32 %159 = OpFAdd %158 %91 
                                Private f32* %160 = OpAccessChain %126 %102 
                                                      OpStore %160 %159 
                                Private f32* %161 = OpAccessChain %9 %102 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpExtInst %1 4 %162 
                                Private f32* %164 = OpAccessChain %126 %102 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                         f32 %167 = OpLoad %119 
                                         f32 %168 = OpFAdd %166 %167 
                                                      OpStore %131 %168 
                                Private f32* %169 = OpAccessChain %38 %102 
                                         f32 %170 = OpLoad %169 
                                Private f32* %171 = OpAccessChain %126 %102 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %170 %172 
                                         f32 %174 = OpLoad %119 
                                         f32 %175 = OpFAdd %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                Private f32* %177 = OpAccessChain %9 %102 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpExtInst %1 4 %178 
                                         f32 %180 = OpFMul %176 %179 
                                                      OpStore %119 %180 
                                Private f32* %181 = OpAccessChain %9 %102 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpExtInst %1 4 %182 
                                         f32 %184 = OpFNegate %183 
                                         f32 %185 = OpFAdd %184 %91 
                                Private f32* %186 = OpAccessChain %9 %102 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %38 %102 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpLoad %131 
                                         f32 %190 = OpFMul %188 %189 
                                         f32 %191 = OpLoad %119 
                                         f32 %192 = OpFAdd %190 %191 
                                                      OpStore %119 %192 
                                         f32 %193 = OpLoad %119 
                                         f32 %195 = OpFAdd %193 %194 
                                                      OpStore %119 %195 
                                         f32 %197 = OpLoad %119 
                                         f32 %198 = OpFDiv %196 %197 
                                                      OpStore %119 %198 
                                         f32 %199 = OpLoad %28 
                                         f32 %200 = OpLoad %119 
                                         f32 %201 = OpFMul %199 %200 
                                                      OpStore %119 %201 
                                Private f32* %202 = OpAccessChain %38 %102 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpLoad %119 
                                         f32 %205 = OpFMul %203 %204 
                                                      OpStore %119 %205 
                                         f32 %206 = OpLoad %119 
                                         f32 %208 = OpFMul %206 %207 
                                                      OpStore %119 %208 
                                         f32 %209 = OpLoad %119 
                                         f32 %210 = OpExtInst %1 40 %209 %90 
                                                      OpStore %119 %210 
                         read_only Texture2D %214 = OpLoad %213 
                                     sampler %218 = OpLoad %217 
                  read_only Texture2DSampled %220 = OpSampledImage %214 %218 
                                       f32_2 %224 = OpLoad vs_TEXCOORD0 
                                       f32_4 %225 = OpImageSampleImplicitLod %220 %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                                      OpStore %52 %226 
                                       f32_3 %227 = OpLoad %52 
                              Uniform f32_4* %229 = OpAccessChain %20 %228 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFMul %227 %231 
                                       f32_3 %235 = OpFAdd %232 %234 
                                                      OpStore %81 %235 
                                       f32_3 %236 = OpLoad %52 
                              Uniform f32_4* %237 = OpAccessChain %20 %228 
                                       f32_4 %238 = OpLoad %237 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFMul %236 %239 
                                                      OpStore %52 %240 
                                Uniform f32* %242 = OpAccessChain %20 %241 
                                         f32 %243 = OpLoad %242 
                                Uniform f32* %244 = OpAccessChain %20 %241 
                                         f32 %245 = OpLoad %244 
                                Uniform f32* %246 = OpAccessChain %20 %241 
                                         f32 %247 = OpLoad %246 
                                       f32_3 %248 = OpCompositeConstruct %243 %245 %247 
                                         f32 %249 = OpCompositeExtract %248 0 
                                         f32 %250 = OpCompositeExtract %248 1 
                                         f32 %251 = OpCompositeExtract %248 2 
                                       f32_3 %252 = OpCompositeConstruct %249 %250 %251 
                                       f32_3 %253 = OpLoad %81 
                                       f32_3 %254 = OpFMul %252 %253 
                                       f32_3 %257 = OpFAdd %254 %256 
                                                      OpStore %81 %257 
                                       f32_3 %258 = OpLoad %81 
                                       f32_3 %259 = OpLoad %81 
                                         f32 %260 = OpDot %258 %259 
                                                      OpStore %28 %260 
                                         f32 %264 = OpLoad %28 
                                        bool %265 = OpFOrdNotEqual %264 %90 
                                                      OpStore %263 %265 
                                        bool %266 = OpLoad %263 
                                         f32 %267 = OpSelect %266 %91 %90 
                                                      OpStore %28 %267 
                                         f32 %268 = OpLoad %28 
                                         f32 %269 = OpLoad %119 
                                         f32 %270 = OpFMul %268 %269 
                                                      OpStore %119 %270 
                                       f32_3 %272 = OpLoad vs_TEXCOORD2 
                                       f32_3 %273 = OpVectorShuffle %272 %272 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %20 %274 %275 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %273 %278 
                                                      OpStore %271 %279 
                              Uniform f32_4* %280 = OpAccessChain %20 %274 %22 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpLoad vs_TEXCOORD2 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
                                       f32_3 %285 = OpFMul %282 %284 
                                       f32_3 %286 = OpLoad %271 
                                       f32_3 %287 = OpFAdd %285 %286 
                                                      OpStore %271 %287 
                              Uniform f32_4* %288 = OpAccessChain %20 %274 %41 
                                       f32_4 %289 = OpLoad %288 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpLoad vs_TEXCOORD2 
                                       f32_3 %292 = OpVectorShuffle %291 %291 2 2 2 
                                       f32_3 %293 = OpFMul %290 %292 
                                       f32_3 %294 = OpLoad %271 
                                       f32_3 %295 = OpFAdd %293 %294 
                                                      OpStore %271 %295 
                                       f32_3 %296 = OpLoad %271 
                              Uniform f32_4* %298 = OpAccessChain %20 %274 %297 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFAdd %296 %300 
                                                      OpStore %271 %301 
                                       f32_3 %302 = OpLoad %271 
                                       f32_3 %303 = OpLoad %271 
                                         f32 %304 = OpDot %302 %303 
                                                      OpStore %28 %304 
                         read_only Texture2D %306 = OpLoad %305 
                                     sampler %308 = OpLoad %307 
                  read_only Texture2DSampled %309 = OpSampledImage %306 %308 
                                         f32 %310 = OpLoad %28 
                                       f32_2 %311 = OpCompositeConstruct %310 %310 
                                       f32_4 %312 = OpImageSampleImplicitLod %309 %311 
                                         f32 %313 = OpCompositeExtract %312 0 
                                                      OpStore %28 %313 
                                         f32 %314 = OpLoad %28 
                                       f32_3 %315 = OpCompositeConstruct %314 %314 %314 
                              Uniform f32_4* %317 = OpAccessChain %20 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFMul %315 %319 
                                                      OpStore %271 %320 
                                         f32 %322 = OpLoad %119 
                                       f32_3 %323 = OpCompositeConstruct %322 %322 %322 
                                       f32_3 %324 = OpLoad %271 
                                       f32_3 %325 = OpFMul %323 %324 
                                                      OpStore %321 %325 
                                         f32 %326 = OpLoad %93 
                                         f32 %327 = OpFNegate %326 
                                         f32 %328 = OpFAdd %327 %91 
                                                      OpStore %119 %328 
                                         f32 %329 = OpLoad %93 
                                         f32 %330 = OpLoad %93 
                                         f32 %331 = OpFMul %329 %330 
                                                      OpStore %28 %331 
                                         f32 %332 = OpLoad %28 
                                       f32_2 %333 = OpCompositeConstruct %332 %332 
                                         f32 %334 = OpLoad %112 
                                       f32_2 %335 = OpCompositeConstruct %334 %334 
                                         f32 %336 = OpDot %333 %335 
                                                      OpStore %112 %336 
                                         f32 %337 = OpLoad %112 
                                         f32 %339 = OpFAdd %337 %338 
                                                      OpStore %112 %339 
                                         f32 %340 = OpLoad %119 
                                         f32 %341 = OpLoad %119 
                                         f32 %342 = OpFMul %340 %341 
                                                      OpStore %28 %342 
                                         f32 %343 = OpLoad %28 
                                         f32 %344 = OpLoad %28 
                                         f32 %345 = OpFMul %343 %344 
                                                      OpStore %28 %345 
                                         f32 %346 = OpLoad %119 
                                         f32 %347 = OpLoad %28 
                                         f32 %348 = OpFMul %346 %347 
                                                      OpStore %119 %348 
                                       f32_3 %349 = OpLoad %81 
                                       f32_3 %350 = OpFNegate %349 
                                       f32_3 %352 = OpFAdd %350 %351 
                                                      OpStore %126 %352 
                                       f32_3 %353 = OpLoad %126 
                                         f32 %354 = OpLoad %119 
                                       f32_3 %355 = OpCompositeConstruct %354 %354 %354 
                                       f32_3 %356 = OpFMul %353 %355 
                                       f32_3 %357 = OpLoad %81 
                                       f32_3 %358 = OpFAdd %356 %357 
                                                      OpStore %126 %358 
                                       f32_3 %359 = OpLoad %126 
                                       f32_3 %360 = OpLoad %321 
                                       f32_3 %361 = OpFMul %359 %360 
                                                      OpStore %126 %361 
                                Private f32* %362 = OpAccessChain %9 %102 
                                         f32 %363 = OpLoad %362 
                                Private f32* %364 = OpAccessChain %9 %102 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFMul %363 %365 
                                                      OpStore %119 %366 
                                         f32 %367 = OpLoad %119 
                                         f32 %368 = OpLoad %119 
                                         f32 %369 = OpFMul %367 %368 
                                                      OpStore %119 %369 
                                Private f32* %370 = OpAccessChain %9 %102 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpLoad %119 
                                         f32 %373 = OpFMul %371 %372 
                                Private f32* %374 = OpAccessChain %9 %102 
                                                      OpStore %374 %373 
                                         f32 %375 = OpLoad %112 
                                Private f32* %376 = OpAccessChain %9 %102 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpFMul %375 %377 
                                         f32 %379 = OpFAdd %378 %91 
                                Private f32* %380 = OpAccessChain %9 %102 
                                                      OpStore %380 %379 
                                Private f32* %381 = OpAccessChain %38 %102 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFNegate %382 
                                         f32 %384 = OpFAdd %383 %91 
                                                      OpStore %119 %384 
                                         f32 %385 = OpLoad %119 
                                         f32 %386 = OpLoad %119 
                                         f32 %387 = OpFMul %385 %386 
                                                      OpStore %28 %387 
                                         f32 %388 = OpLoad %28 
                                         f32 %389 = OpLoad %28 
                                         f32 %390 = OpFMul %388 %389 
                                                      OpStore %28 %390 
                                         f32 %391 = OpLoad %119 
                                         f32 %392 = OpLoad %28 
                                         f32 %393 = OpFMul %391 %392 
                                                      OpStore %119 %393 
                                         f32 %394 = OpLoad %112 
                                         f32 %395 = OpLoad %119 
                                         f32 %396 = OpFMul %394 %395 
                                         f32 %397 = OpFAdd %396 %91 
                                                      OpStore %112 %397 
                                Private f32* %398 = OpAccessChain %9 %102 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpLoad %112 
                                         f32 %401 = OpFMul %399 %400 
                                Private f32* %402 = OpAccessChain %9 %102 
                                                      OpStore %402 %401 
                                Private f32* %403 = OpAccessChain %38 %102 
                                         f32 %404 = OpLoad %403 
                                Private f32* %405 = OpAccessChain %9 %102 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFMul %404 %406 
                                Private f32* %408 = OpAccessChain %9 %102 
                                                      OpStore %408 %407 
                                       f32_3 %409 = OpLoad %9 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 0 0 
                                       f32_3 %411 = OpLoad %271 
                                       f32_3 %412 = OpFMul %410 %411 
                                                      OpStore %9 %412 
                                Uniform f32* %413 = OpAccessChain %20 %241 
                                         f32 %414 = OpLoad %413 
                                         f32 %415 = OpFNegate %414 
                                         f32 %417 = OpFMul %415 %416 
                                         f32 %418 = OpFAdd %417 %416 
                                                      OpStore %28 %418 
                                         f32 %419 = OpLoad %28 
                                       f32_3 %420 = OpCompositeConstruct %419 %419 %419 
                                       f32_3 %421 = OpLoad %52 
                                       f32_3 %422 = OpFMul %420 %421 
                                                      OpStore %52 %422 
                                       f32_3 %423 = OpLoad %52 
                                       f32_3 %424 = OpLoad %9 
                                       f32_3 %425 = OpFMul %423 %424 
                                       f32_3 %426 = OpLoad %126 
                                       f32_3 %427 = OpFAdd %425 %426 
                                                      OpStore %9 %427 
                                         f32 %430 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %432 = OpAccessChain %20 %275 %431 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpFDiv %430 %433 
                                                      OpStore %28 %434 
                                         f32 %435 = OpLoad %28 
                                         f32 %436 = OpFNegate %435 
                                         f32 %437 = OpFAdd %436 %91 
                                                      OpStore %28 %437 
                                         f32 %438 = OpLoad %28 
                                Uniform f32* %440 = OpAccessChain %20 %275 %439 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %438 %441 
                                                      OpStore %28 %442 
                                         f32 %443 = OpLoad %28 
                                         f32 %444 = OpExtInst %1 40 %443 %90 
                                                      OpStore %28 %444 
                                         f32 %445 = OpLoad %28 
                                Uniform f32* %446 = OpAccessChain %20 %297 %439 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Uniform f32* %450 = OpAccessChain %20 %297 %449 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %448 %451 
                                                      OpStore %28 %452 
                                         f32 %453 = OpLoad %28 
                                         f32 %454 = OpExtInst %1 43 %453 %90 %91 
                                                      OpStore %28 %454 
                                       f32_3 %457 = OpLoad %9 
                                         f32 %458 = OpLoad %28 
                                       f32_3 %459 = OpCompositeConstruct %458 %458 %458 
                                       f32_3 %460 = OpFMul %457 %459 
                                       f32_4 %461 = OpLoad %456 
                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 6 3 
                                                      OpStore %456 %462 
                                 Output f32* %464 = OpAccessChain %456 %449 
                                                      OpStore %464 %91 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(1) uniform  sampler2D _posTex;
UNITY_LOCATION(2) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    gl_Position = u_xlat2;
    vs_TEXCOORD5 = u_xlat2.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
float u_xlat17;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 0.00100000005);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = (-_Glossiness) + 1.0;
    u_xlat11 = u_xlat6 * u_xlat6;
    u_xlat11 = max(u_xlat11, 0.00200000009);
    u_xlat16 = u_xlat11 * u_xlat11;
    u_xlat17 = u_xlat15 * u_xlat16 + (-u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15 + 1.0;
    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat15 = u_xlat16 / u_xlat15;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat10 = (-u_xlat11) + 1.0;
    u_xlat16 = abs(u_xlat0.x) * u_xlat10 + u_xlat11;
    u_xlat10 = u_xlat5 * u_xlat10 + u_xlat11;
    u_xlat10 = u_xlat10 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat10 = u_xlat5 * u_xlat16 + u_xlat10;
    u_xlat10 = u_xlat10 + 9.99999975e-06;
    u_xlat10 = 0.5 / u_xlat10;
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat10 = u_xlat10 * 3.14159274;
    u_xlat10 = u_xlat5 * u_xlat10;
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb15 = u_xlat15!=0.0;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat4.xyz = vec3(u_xlat10) * _LightColor0.xyz;
    u_xlat10 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(vec2(u_xlat15), vec2(u_xlat6));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat1.x = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat1.x;
    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat10 = u_xlat0.x * u_xlat0.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat0.x = u_xlat0.x * u_xlat10;
    u_xlat0.x = u_xlat15 * u_xlat0.x + 1.0;
    u_xlat10 = (-u_xlat5) + 1.0;
    u_xlat16 = u_xlat10 * u_xlat10;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat10 * u_xlat16;
    u_xlat10 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10;
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat15 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat15 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 390
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %232 %237 %242 %243 %378 %384 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %230 0 BuiltIn 230 
                                                      OpMemberDecorate %230 1 BuiltIn 230 
                                                      OpMemberDecorate %230 2 BuiltIn 230 
                                                      OpDecorate %230 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 237 
                                                      OpDecorate vs_TEXCOORD0 Location 242 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate vs_TEXCOORD1 Location 378 
                                                      OpDecorate vs_TEXCOORD4 Location 384 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 7 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 8 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 6 
                                         i32 %119 = OpConstant 5 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 1 
                                             %168 = OpTypePointer Uniform %7 
                                         i32 %179 = OpConstant 2 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %229 = OpTypeArray %6 %20 
                                             %230 = OpTypeStruct %7 %6 %229 
                                             %231 = OpTypePointer Output %230 
        Output struct {f32_4; f32; f32[1];}* %232 = OpVariable Output 
                                             %234 = OpTypePointer Output %7 
                                             %236 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %238 = OpConstant 2 
                                             %241 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %243 = OpVariable Input 
                                         i32 %246 = OpConstant 9 
                                         f32 %269 = OpConstant 3.674022E-40 
                                       f32_2 %270 = OpConstantComposite %269 %269 
                                         f32 %272 = OpConstant 3.674022E-40 
                                       f32_2 %273 = OpConstantComposite %272 %272 
                                Private f32* %277 = OpVariable Private 
                                         f32 %286 = OpConstant 3.674022E-40 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_2 %288 = OpConstantComposite %286 %287 
                                       f32_2 %290 = OpConstantComposite %56 %56 
                                       f32_3 %311 = OpConstantComposite %56 %56 %56 
                                             %323 = OpTypeBool 
                                             %324 = OpTypePointer Private %323 
                               Private bool* %325 = OpVariable Private 
                                       f32_4 %326 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %327 = OpConstant 4 
                                             %331 = OpTypeVector %323 4 
                                             %335 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %336 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %169 = OpAccessChain %18 %167 %167 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpFMul %166 %170 
                                                      OpStore %164 %171 
                              Uniform f32_4* %172 = OpAccessChain %18 %167 %19 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpLoad %114 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %164 
                                       f32_4 %178 = OpFAdd %176 %177 
                                                      OpStore %164 %178 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %205 = OpAccessChain %18 %188 %167 
                                       f32_4 %206 = OpLoad %205 
                                       f32_4 %207 = OpFMul %204 %206 
                                                      OpStore %114 %207 
                              Uniform f32_4* %208 = OpAccessChain %18 %188 %19 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %164 
                                       f32_4 %211 = OpVectorShuffle %210 %210 0 0 0 0 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %114 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %114 %214 
                              Uniform f32_4* %215 = OpAccessChain %18 %188 %179 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %164 
                                       f32_4 %218 = OpVectorShuffle %217 %217 2 2 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %114 
                                       f32_4 %221 = OpFAdd %219 %220 
                                                      OpStore %114 %221 
                              Uniform f32_4* %222 = OpAccessChain %18 %188 %188 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %164 
                                       f32_4 %225 = OpVectorShuffle %224 %224 3 3 3 3 
                                       f32_4 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %114 
                                       f32_4 %228 = OpFAdd %226 %227 
                                                      OpStore %114 %228 
                                       f32_4 %233 = OpLoad %114 
                               Output f32_4* %235 = OpAccessChain %232 %19 
                                                      OpStore %235 %233 
                                Private f32* %239 = OpAccessChain %114 %238 
                                         f32 %240 = OpLoad %239 
                                                      OpStore vs_TEXCOORD5 %240 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                              Uniform f32_4* %247 = OpAccessChain %18 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                                       f32_2 %250 = OpFMul %245 %249 
                              Uniform f32_4* %251 = OpAccessChain %18 %246 
                                       f32_4 %252 = OpLoad %251 
                                       f32_2 %253 = OpVectorShuffle %252 %252 2 3 
                                       f32_2 %254 = OpFAdd %250 %253 
                                                      OpStore vs_TEXCOORD0 %254 
                                Private f32* %255 = OpAccessChain %76 %20 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpExtInst %1 8 %256 
                                Private f32* %258 = OpAccessChain %114 %29 
                                                      OpStore %258 %257 
                                Private f32* %259 = OpAccessChain %114 %29 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFNegate %260 
                                         f32 %262 = OpFMul %261 %146 
                                Private f32* %263 = OpAccessChain %76 %29 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %114 %20 
                                                      OpStore %266 %265 
                                       f32_4 %267 = OpLoad %114 
                                       f32_2 %268 = OpVectorShuffle %267 %267 0 1 
                                       f32_2 %271 = OpFMul %268 %270 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %76 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %76 %276 
                                       f32_4 %278 = OpLoad %76 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_4 %280 = OpLoad %76 
                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
                                         f32 %282 = OpDot %279 %281 
                                                      OpStore %277 %282 
                                         f32 %283 = OpLoad %277 
                                       f32_2 %284 = OpCompositeConstruct %283 %283 
                                       f32_2 %285 = OpFNegate %284 
                                       f32_2 %289 = OpFMul %285 %288 
                                       f32_2 %291 = OpFAdd %289 %290 
                                       f32_4 %292 = OpLoad %114 
                                       f32_4 %293 = OpVectorShuffle %292 %291 0 1 4 5 
                                                      OpStore %114 %293 
                                Private f32* %294 = OpAccessChain %114 %238 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 31 %295 
                                                      OpStore %277 %296 
                                       f32_4 %297 = OpLoad %76 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 1 
                                         f32 %299 = OpLoad %277 
                                       f32_2 %300 = OpCompositeConstruct %299 %299 
                                       f32_2 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %114 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 2 3 
                                                      OpStore %114 %303 
                                       f32_4 %304 = OpLoad %114 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 3 
                                       f32_3 %306 = OpExtInst %1 40 %305 %110 
                                       f32_4 %307 = OpLoad %76 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %76 %308 
                                       f32_4 %309 = OpLoad %76 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %312 = OpExtInst %1 37 %310 %311 
                                       f32_4 %313 = OpLoad %76 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %76 %314 
                                Private f32* %315 = OpAccessChain %76 %29 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFNegate %316 
                                Private f32* %318 = OpAccessChain %76 %154 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %9 %29 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                Private f32* %322 = OpAccessChain %9 %154 
                                                      OpStore %322 %321 
                                Uniform f32* %328 = OpAccessChain %18 %327 
                                         f32 %329 = OpLoad %328 
                                       f32_4 %330 = OpCompositeConstruct %329 %329 %329 %329 
                                      bool_4 %332 = OpFOrdNotEqual %326 %330 
                                        bool %333 = OpAny %332 
                                                      OpStore %325 %333 
                                        bool %334 = OpLoad %325 
                                                      OpSelectionMerge %338 None 
                                                      OpBranchConditional %334 %337 %341 
                                             %337 = OpLabel 
                                       f32_4 %339 = OpLoad %76 
                                       f32_3 %340 = OpVectorShuffle %339 %339 3 2 1 
                                                      OpStore %336 %340 
                                                      OpBranch %338 
                                             %341 = OpLabel 
                                       f32_4 %342 = OpLoad %9 
                                       f32_3 %343 = OpVectorShuffle %342 %342 3 1 2 
                                                      OpStore %336 %343 
                                                      OpBranch %338 
                                             %338 = OpLabel 
                                       f32_3 %344 = OpLoad %336 
                                       f32_4 %345 = OpLoad %9 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %9 %346 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                              Uniform f32_4* %349 = OpAccessChain %18 %179 %19 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                         f32 %352 = OpDot %348 %351 
                                Private f32* %353 = OpAccessChain %76 %29 
                                                      OpStore %353 %352 
                                       f32_4 %354 = OpLoad %9 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                              Uniform f32_4* %356 = OpAccessChain %18 %179 %167 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                         f32 %359 = OpDot %355 %358 
                                Private f32* %360 = OpAccessChain %76 %20 
                                                      OpStore %360 %359 
                                       f32_4 %361 = OpLoad %9 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                              Uniform f32_4* %363 = OpAccessChain %18 %179 %179 
                                       f32_4 %364 = OpLoad %363 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                         f32 %366 = OpDot %362 %365 
                                Private f32* %367 = OpAccessChain %76 %238 
                                                      OpStore %367 %366 
                                       f32_4 %368 = OpLoad %76 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_4 %370 = OpLoad %76 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                         f32 %372 = OpDot %369 %371 
                                Private f32* %373 = OpAccessChain %9 %29 
                                                      OpStore %373 %372 
                                Private f32* %374 = OpAccessChain %9 %29 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpExtInst %1 32 %375 
                                Private f32* %377 = OpAccessChain %9 %29 
                                                      OpStore %377 %376 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_4 %381 = OpLoad %76 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFMul %380 %382 
                                                      OpStore vs_TEXCOORD1 %383 
                                                      OpStore vs_TEXCOORD4 %326 
                                 Output f32* %385 = OpAccessChain %232 %19 %20 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFNegate %386 
                                 Output f32* %388 = OpAccessChain %232 %19 %20 
                                                      OpStore %388 %387 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 408
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %58 %201 %369 %398 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 58 
                                                      OpDecorate %191 DescriptorSet 191 
                                                      OpDecorate %191 Binding 191 
                                                      OpDecorate %195 DescriptorSet 195 
                                                      OpDecorate %195 Binding 195 
                                                      OpDecorate vs_TEXCOORD0 Location 201 
                                                      OpDecorate vs_TEXCOORD5 Location 369 
                                                      OpDecorate %398 Location 398 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %7 %14 %14 %14 %14 %6 %6 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %7 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                               Private f32_3* %31 = OpVariable Private 
                                          i32 %36 = OpConstant 2 
                                              %37 = OpTypePointer Uniform %14 
                                          f32 %50 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_3* %64 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %81 = OpTypeInt 32 0 
                                          u32 %82 = OpConstant 0 
                                 Private f32* %88 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                              %90 = OpTypePointer Uniform %6 
                                 Private f32* %95 = OpVariable Private 
                                         f32 %100 = OpConstant 3.674022E-40 
                                Private f32* %102 = OpVariable Private 
                                Private f32* %106 = OpVariable Private 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         f32 %123 = OpConstant 3.674022E-40 
                                Private f32* %132 = OpVariable Private 
                                Private f32* %140 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                                         f32 %175 = OpConstant 3.674022E-40 
                                         f32 %185 = OpConstant 3.674022E-40 
                                             %189 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %190 = OpTypePointer UniformConstant %189 
        UniformConstant read_only Texture2D* %191 = OpVariable UniformConstant 
                                             %193 = OpTypeSampler 
                                             %194 = OpTypePointer UniformConstant %193 
                    UniformConstant sampler* %195 = OpVariable UniformConstant 
                                             %197 = OpTypeSampledImage %189 
                                             %199 = OpTypeVector %6 2 
                                             %200 = OpTypePointer Input %199 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %207 = OpConstant 7 
                                         f32 %212 = OpConstant 3.674022E-40 
                                       f32_3 %213 = OpConstantComposite %212 %212 %212 
                                         i32 %220 = OpConstant 6 
                                         f32 %234 = OpConstant 3.674022E-40 
                                       f32_3 %235 = OpConstantComposite %234 %234 %234 
                                             %240 = OpTypeBool 
                                             %241 = OpTypePointer Private %240 
                               Private bool* %242 = OpVariable Private 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %253 = OpConstant 4 
                                         f32 %273 = OpConstant 3.674022E-40 
                                       f32_3 %291 = OpConstantComposite %74 %74 %74 
                                         f32 %356 = OpConstant 3.674022E-40 
                                             %368 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         i32 %371 = OpConstant 1 
                                         u32 %372 = OpConstant 1 
                                         u32 %380 = OpConstant 2 
                                         i32 %387 = OpConstant 3 
                                         u32 %391 = OpConstant 3 
                                             %397 = OpTypePointer Output %14 
                               Output f32_4* %398 = OpVariable Output 
                                             %405 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %13 %22 
                                                      OpStore %9 %23 
                                        f32_3 %26 = OpLoad %9 
                                        f32_3 %27 = OpLoad %9 
                                          f32 %28 = OpDot %26 %27 
                                                      OpStore %25 %28 
                                          f32 %29 = OpLoad %25 
                                          f32 %30 = OpExtInst %1 32 %29 
                                                      OpStore %25 %30 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpLoad %25 
                                        f32_3 %34 = OpCompositeConstruct %33 %33 %33 
                                        f32_3 %35 = OpFMul %32 %34 
                               Uniform f32_4* %38 = OpAccessChain %17 %36 
                                        f32_4 %39 = OpLoad %38 
                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                        f32_3 %41 = OpFAdd %35 %40 
                                                      OpStore %31 %41 
                                          f32 %42 = OpLoad %25 
                                        f32_3 %43 = OpCompositeConstruct %42 %42 %42 
                                        f32_3 %44 = OpLoad %9 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %9 %45 
                                        f32_3 %46 = OpLoad %31 
                                        f32_3 %47 = OpLoad %31 
                                          f32 %48 = OpDot %46 %47 
                                                      OpStore %25 %48 
                                          f32 %49 = OpLoad %25 
                                          f32 %51 = OpExtInst %1 40 %49 %50 
                                                      OpStore %25 %51 
                                          f32 %52 = OpLoad %25 
                                          f32 %53 = OpExtInst %1 32 %52 
                                                      OpStore %25 %53 
                                          f32 %54 = OpLoad %25 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpLoad %31 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %31 %57 
                                        f32_3 %59 = OpLoad vs_TEXCOORD1 
                                        f32_3 %60 = OpLoad vs_TEXCOORD1 
                                          f32 %61 = OpDot %59 %60 
                                                      OpStore %25 %61 
                                          f32 %62 = OpLoad %25 
                                          f32 %63 = OpExtInst %1 32 %62 
                                                      OpStore %25 %63 
                                          f32 %65 = OpLoad %25 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_3 %67 = OpLoad vs_TEXCOORD1 
                                        f32_3 %68 = OpFMul %66 %67 
                                                      OpStore %64 %68 
                                        f32_3 %69 = OpLoad %64 
                                        f32_3 %70 = OpLoad %31 
                                          f32 %71 = OpDot %69 %70 
                                                      OpStore %25 %71 
                                          f32 %72 = OpLoad %25 
                                          f32 %75 = OpExtInst %1 43 %72 %73 %74 
                                                      OpStore %25 %75 
                               Uniform f32_4* %76 = OpAccessChain %17 %36 
                                        f32_4 %77 = OpLoad %76 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpLoad %31 
                                          f32 %80 = OpDot %78 %79 
                                 Private f32* %83 = OpAccessChain %31 %82 
                                                      OpStore %83 %80 
                                 Private f32* %84 = OpAccessChain %31 %82 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpExtInst %1 43 %85 %73 %74 
                                 Private f32* %87 = OpAccessChain %31 %82 
                                                      OpStore %87 %86 
                                 Uniform f32* %91 = OpAccessChain %17 %89 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFNegate %92 
                                          f32 %94 = OpFAdd %93 %74 
                                                      OpStore %88 %94 
                                          f32 %96 = OpLoad %88 
                                          f32 %97 = OpLoad %88 
                                          f32 %98 = OpFMul %96 %97 
                                                      OpStore %95 %98 
                                          f32 %99 = OpLoad %95 
                                         f32 %101 = OpExtInst %1 40 %99 %100 
                                                      OpStore %95 %101 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpLoad %95 
                                         f32 %105 = OpFMul %103 %104 
                                                      OpStore %102 %105 
                                         f32 %107 = OpLoad %25 
                                         f32 %108 = OpLoad %102 
                                         f32 %109 = OpFMul %107 %108 
                                         f32 %110 = OpLoad %25 
                                         f32 %111 = OpFNegate %110 
                                         f32 %112 = OpFAdd %109 %111 
                                                      OpStore %106 %112 
                                         f32 %113 = OpLoad %106 
                                         f32 %114 = OpLoad %25 
                                         f32 %115 = OpFMul %113 %114 
                                         f32 %116 = OpFAdd %115 %74 
                                                      OpStore %25 %116 
                                         f32 %117 = OpLoad %25 
                                         f32 %118 = OpLoad %25 
                                         f32 %119 = OpFMul %117 %118 
                                         f32 %121 = OpFAdd %119 %120 
                                                      OpStore %25 %121 
                                         f32 %122 = OpLoad %102 
                                         f32 %124 = OpFMul %122 %123 
                                                      OpStore %102 %124 
                                         f32 %125 = OpLoad %102 
                                         f32 %126 = OpLoad %25 
                                         f32 %127 = OpFDiv %125 %126 
                                                      OpStore %25 %127 
                                       f32_3 %128 = OpLoad %64 
                                       f32_3 %129 = OpLoad %9 
                                         f32 %130 = OpDot %128 %129 
                                Private f32* %131 = OpAccessChain %9 %82 
                                                      OpStore %131 %130 
                                       f32_3 %133 = OpLoad %64 
                              Uniform f32_4* %134 = OpAccessChain %17 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 43 %138 %73 %74 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %95 
                                         f32 %142 = OpFNegate %141 
                                         f32 %143 = OpFAdd %142 %74 
                                                      OpStore %140 %143 
                                Private f32* %144 = OpAccessChain %9 %82 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpExtInst %1 4 %145 
                                         f32 %147 = OpLoad %140 
                                         f32 %148 = OpFMul %146 %147 
                                         f32 %149 = OpLoad %95 
                                         f32 %150 = OpFAdd %148 %149 
                                                      OpStore %102 %150 
                                         f32 %151 = OpLoad %132 
                                         f32 %152 = OpLoad %140 
                                         f32 %153 = OpFMul %151 %152 
                                         f32 %154 = OpLoad %95 
                                         f32 %155 = OpFAdd %153 %154 
                                                      OpStore %140 %155 
                                         f32 %156 = OpLoad %140 
                                Private f32* %157 = OpAccessChain %9 %82 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpExtInst %1 4 %158 
                                         f32 %160 = OpFMul %156 %159 
                                                      OpStore %140 %160 
                                Private f32* %161 = OpAccessChain %9 %82 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpExtInst %1 4 %162 
                                         f32 %164 = OpFNegate %163 
                                         f32 %165 = OpFAdd %164 %74 
                                Private f32* %166 = OpAccessChain %9 %82 
                                                      OpStore %166 %165 
                                         f32 %167 = OpLoad %132 
                                         f32 %168 = OpLoad %102 
                                         f32 %169 = OpFMul %167 %168 
                                         f32 %170 = OpLoad %140 
                                         f32 %171 = OpFAdd %169 %170 
                                                      OpStore %140 %171 
                                         f32 %172 = OpLoad %140 
                                         f32 %174 = OpFAdd %172 %173 
                                                      OpStore %140 %174 
                                         f32 %176 = OpLoad %140 
                                         f32 %177 = OpFDiv %175 %176 
                                                      OpStore %140 %177 
                                         f32 %178 = OpLoad %25 
                                         f32 %179 = OpLoad %140 
                                         f32 %180 = OpFMul %178 %179 
                                                      OpStore %140 %180 
                                         f32 %181 = OpLoad %132 
                                         f32 %182 = OpLoad %140 
                                         f32 %183 = OpFMul %181 %182 
                                                      OpStore %140 %183 
                                         f32 %184 = OpLoad %140 
                                         f32 %186 = OpFMul %184 %185 
                                                      OpStore %140 %186 
                                         f32 %187 = OpLoad %140 
                                         f32 %188 = OpExtInst %1 40 %187 %73 
                                                      OpStore %140 %188 
                         read_only Texture2D %192 = OpLoad %191 
                                     sampler %196 = OpLoad %195 
                  read_only Texture2DSampled %198 = OpSampledImage %192 %196 
                                       f32_2 %202 = OpLoad vs_TEXCOORD0 
                                       f32_4 %203 = OpImageSampleImplicitLod %198 %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                                      OpStore %64 %204 
                                       f32_3 %206 = OpLoad %64 
                              Uniform f32_4* %208 = OpAccessChain %17 %207 
                                       f32_4 %209 = OpLoad %208 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %211 = OpFMul %206 %210 
                                       f32_3 %214 = OpFAdd %211 %213 
                                                      OpStore %205 %214 
                                       f32_3 %215 = OpLoad %64 
                              Uniform f32_4* %216 = OpAccessChain %17 %207 
                                       f32_4 %217 = OpLoad %216 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_3 %219 = OpFMul %215 %218 
                                                      OpStore %64 %219 
                                Uniform f32* %221 = OpAccessChain %17 %220 
                                         f32 %222 = OpLoad %221 
                                Uniform f32* %223 = OpAccessChain %17 %220 
                                         f32 %224 = OpLoad %223 
                                Uniform f32* %225 = OpAccessChain %17 %220 
                                         f32 %226 = OpLoad %225 
                                       f32_3 %227 = OpCompositeConstruct %222 %224 %226 
                                         f32 %228 = OpCompositeExtract %227 0 
                                         f32 %229 = OpCompositeExtract %227 1 
                                         f32 %230 = OpCompositeExtract %227 2 
                                       f32_3 %231 = OpCompositeConstruct %228 %229 %230 
                                       f32_3 %232 = OpLoad %205 
                                       f32_3 %233 = OpFMul %231 %232 
                                       f32_3 %236 = OpFAdd %233 %235 
                                                      OpStore %205 %236 
                                       f32_3 %237 = OpLoad %205 
                                       f32_3 %238 = OpLoad %205 
                                         f32 %239 = OpDot %237 %238 
                                                      OpStore %25 %239 
                                         f32 %243 = OpLoad %25 
                                        bool %244 = OpFOrdNotEqual %243 %73 
                                                      OpStore %242 %244 
                                        bool %245 = OpLoad %242 
                                         f32 %246 = OpSelect %245 %74 %73 
                                                      OpStore %25 %246 
                                         f32 %247 = OpLoad %25 
                                         f32 %248 = OpLoad %140 
                                         f32 %249 = OpFMul %247 %248 
                                                      OpStore %140 %249 
                                         f32 %251 = OpLoad %140 
                                       f32_3 %252 = OpCompositeConstruct %251 %251 %251 
                              Uniform f32_4* %254 = OpAccessChain %17 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFMul %252 %256 
                                                      OpStore %250 %257 
                                Private f32* %258 = OpAccessChain %31 %82 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFNegate %259 
                                         f32 %261 = OpFAdd %260 %74 
                                                      OpStore %140 %261 
                                Private f32* %262 = OpAccessChain %31 %82 
                                         f32 %263 = OpLoad %262 
                                Private f32* %264 = OpAccessChain %31 %82 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %263 %265 
                                                      OpStore %25 %266 
                                         f32 %267 = OpLoad %25 
                                       f32_2 %268 = OpCompositeConstruct %267 %267 
                                         f32 %269 = OpLoad %88 
                                       f32_2 %270 = OpCompositeConstruct %269 %269 
                                         f32 %271 = OpDot %268 %270 
                                                      OpStore %25 %271 
                                         f32 %272 = OpLoad %25 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %25 %274 
                                         f32 %275 = OpLoad %140 
                                         f32 %276 = OpLoad %140 
                                         f32 %277 = OpFMul %275 %276 
                                Private f32* %278 = OpAccessChain %31 %82 
                                                      OpStore %278 %277 
                                Private f32* %279 = OpAccessChain %31 %82 
                                         f32 %280 = OpLoad %279 
                                Private f32* %281 = OpAccessChain %31 %82 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %280 %282 
                                Private f32* %284 = OpAccessChain %31 %82 
                                                      OpStore %284 %283 
                                         f32 %285 = OpLoad %140 
                                Private f32* %286 = OpAccessChain %31 %82 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpFMul %285 %287 
                                                      OpStore %140 %288 
                                       f32_3 %289 = OpLoad %205 
                                       f32_3 %290 = OpFNegate %289 
                                       f32_3 %292 = OpFAdd %290 %291 
                                                      OpStore %31 %292 
                                       f32_3 %293 = OpLoad %31 
                                         f32 %294 = OpLoad %140 
                                       f32_3 %295 = OpCompositeConstruct %294 %294 %294 
                                       f32_3 %296 = OpFMul %293 %295 
                                       f32_3 %297 = OpLoad %205 
                                       f32_3 %298 = OpFAdd %296 %297 
                                                      OpStore %31 %298 
                                       f32_3 %299 = OpLoad %31 
                                       f32_3 %300 = OpLoad %250 
                                       f32_3 %301 = OpFMul %299 %300 
                                                      OpStore %31 %301 
                                Private f32* %302 = OpAccessChain %9 %82 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %9 %82 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                                      OpStore %140 %306 
                                         f32 %307 = OpLoad %140 
                                         f32 %308 = OpLoad %140 
                                         f32 %309 = OpFMul %307 %308 
                                                      OpStore %140 %309 
                                Private f32* %310 = OpAccessChain %9 %82 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpLoad %140 
                                         f32 %313 = OpFMul %311 %312 
                                Private f32* %314 = OpAccessChain %9 %82 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %25 
                                Private f32* %316 = OpAccessChain %9 %82 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                         f32 %319 = OpFAdd %318 %74 
                                Private f32* %320 = OpAccessChain %9 %82 
                                                      OpStore %320 %319 
                                         f32 %321 = OpLoad %132 
                                         f32 %322 = OpFNegate %321 
                                         f32 %323 = OpFAdd %322 %74 
                                                      OpStore %140 %323 
                                         f32 %324 = OpLoad %140 
                                         f32 %325 = OpLoad %140 
                                         f32 %326 = OpFMul %324 %325 
                                                      OpStore %102 %326 
                                         f32 %327 = OpLoad %102 
                                         f32 %328 = OpLoad %102 
                                         f32 %329 = OpFMul %327 %328 
                                                      OpStore %102 %329 
                                         f32 %330 = OpLoad %140 
                                         f32 %331 = OpLoad %102 
                                         f32 %332 = OpFMul %330 %331 
                                                      OpStore %140 %332 
                                         f32 %333 = OpLoad %25 
                                         f32 %334 = OpLoad %140 
                                         f32 %335 = OpFMul %333 %334 
                                         f32 %336 = OpFAdd %335 %74 
                                                      OpStore %140 %336 
                                Private f32* %337 = OpAccessChain %9 %82 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpLoad %140 
                                         f32 %340 = OpFMul %338 %339 
                                Private f32* %341 = OpAccessChain %9 %82 
                                                      OpStore %341 %340 
                                         f32 %342 = OpLoad %132 
                                Private f32* %343 = OpAccessChain %9 %82 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFMul %342 %344 
                                Private f32* %346 = OpAccessChain %9 %82 
                                                      OpStore %346 %345 
                                       f32_3 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 0 0 
                              Uniform f32_4* %349 = OpAccessChain %17 %253 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %348 %351 
                                                      OpStore %9 %352 
                                Uniform f32* %353 = OpAccessChain %17 %220 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpFNegate %354 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %358 = OpFAdd %357 %356 
                                                      OpStore %25 %358 
                                         f32 %359 = OpLoad %25 
                                       f32_3 %360 = OpCompositeConstruct %359 %359 %359 
                                       f32_3 %361 = OpLoad %64 
                                       f32_3 %362 = OpFMul %360 %361 
                                                      OpStore %64 %362 
                                       f32_3 %363 = OpLoad %64 
                                       f32_3 %364 = OpLoad %9 
                                       f32_3 %365 = OpFMul %363 %364 
                                       f32_3 %366 = OpLoad %31 
                                       f32_3 %367 = OpFAdd %365 %366 
                                                      OpStore %9 %367 
                                         f32 %370 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %373 = OpAccessChain %17 %371 %372 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFDiv %370 %374 
                                                      OpStore %25 %375 
                                         f32 %376 = OpLoad %25 
                                         f32 %377 = OpFNegate %376 
                                         f32 %378 = OpFAdd %377 %74 
                                                      OpStore %25 %378 
                                         f32 %379 = OpLoad %25 
                                Uniform f32* %381 = OpAccessChain %17 %371 %380 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFMul %379 %382 
                                                      OpStore %25 %383 
                                         f32 %384 = OpLoad %25 
                                         f32 %385 = OpExtInst %1 40 %384 %73 
                                                      OpStore %25 %385 
                                         f32 %386 = OpLoad %25 
                                Uniform f32* %388 = OpAccessChain %17 %387 %380 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFMul %386 %389 
                                Uniform f32* %392 = OpAccessChain %17 %387 %391 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFAdd %390 %393 
                                                      OpStore %25 %394 
                                         f32 %395 = OpLoad %25 
                                         f32 %396 = OpExtInst %1 43 %395 %73 %74 
                                                      OpStore %25 %396 
                                       f32_3 %399 = OpLoad %9 
                                         f32 %400 = OpLoad %25 
                                       f32_3 %401 = OpCompositeConstruct %400 %400 %400 
                                       f32_3 %402 = OpFMul %399 %401 
                                       f32_4 %403 = OpLoad %398 
                                       f32_4 %404 = OpVectorShuffle %403 %402 4 5 6 3 
                                                      OpStore %398 %404 
                                 Output f32* %406 = OpAccessChain %398 %391 
                                                      OpStore %406 %74 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat11;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5 = float(_numOfFrames);
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat5;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat0.x = u_xlat5 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    gl_Position = u_xlat3;
    vs_TEXCOORD5 = u_xlat3.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat11)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat11 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat11);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
bool u_xlatb13;
float u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb18 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat8.x = u_xlat13 * u_xlat13;
    u_xlat14 = u_xlat18 * u_xlat8.x + (-u_xlat18);
    u_xlat18 = u_xlat14 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat8.x = u_xlat8.x * 0.318309873;
    u_xlat18 = u_xlat8.x / u_xlat18;
    u_xlat8.x = (-u_xlat13) + 1.0;
    u_xlat14 = abs(u_xlat1.x) * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat13 * abs(u_xlat1.x);
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
    u_xlat13 = u_xlat13 + 9.99999975e-06;
    u_xlat13 = 0.5 / u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat19 * u_xlat19;
    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
    u_xlat7 = u_xlat7 + -0.5;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
    u_xlat18 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 427
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %68 %159 %223 %228 %233 %234 %370 %376 %413 %421 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %68 Location 68 
                                                      OpDecorate %80 DescriptorSet 80 
                                                      OpDecorate %80 Binding 80 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %95 DescriptorSet 95 
                                                      OpDecorate %95 Binding 95 
                                                      OpDecorate %159 Location 159 
                                                      OpMemberDecorate %221 0 BuiltIn 221 
                                                      OpMemberDecorate %221 1 BuiltIn 221 
                                                      OpMemberDecorate %221 2 BuiltIn 221 
                                                      OpDecorate %221 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 228 
                                                      OpDecorate vs_TEXCOORD0 Location 233 
                                                      OpDecorate %234 Location 234 
                                                      OpDecorate vs_TEXCOORD1 Location 370 
                                                      OpDecorate vs_TEXCOORD2 Location 376 
                                                      OpDecorate vs_TEXCOORD3 Location 413 
                                                      OpDecorate vs_TEXCOORD4 Location 421 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeArray %7 %11 
                                              %16 = OpTypeInt 32 1 
                                              %17 = OpTypeStruct %7 %12 %13 %14 %15 %6 %6 %6 %6 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %19 = OpVariable Uniform 
                                          i32 %20 = OpConstant 0 
                                          u32 %21 = OpConstant 1 
                                              %22 = OpTypePointer Uniform %6 
                                          i32 %26 = OpConstant 8 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %37 = OpVariable Private 
                                          i32 %38 = OpConstant 9 
                                              %39 = OpTypePointer Uniform %16 
                                          f32 %57 = OpConstant 3.674022E-40 
                                              %67 = OpTypePointer Input %7 
                                 Input f32_4* %68 = OpVariable Input 
                                              %69 = OpTypePointer Input %6 
                               Private f32_4* %77 = OpVariable Private 
                                              %78 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %79 = OpTypePointer UniformConstant %78 
         UniformConstant read_only Texture2D* %80 = OpVariable UniformConstant 
                                              %82 = OpTypeSampler 
                                              %83 = OpTypePointer UniformConstant %82 
                     UniformConstant sampler* %84 = OpVariable UniformConstant 
                                              %86 = OpTypeSampledImage %78 
                                              %88 = OpTypeVector %6 2 
                                          f32 %91 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %93 = OpVariable UniformConstant 
                     UniformConstant sampler* %95 = OpVariable UniformConstant 
                                             %101 = OpTypeVector %6 3 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_3 %108 = OpConstantComposite %107 %107 %107 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_3 %111 = OpConstantComposite %110 %110 %110 
                              Private f32_4* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 7 
                                         i32 %120 = OpConstant 6 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_2 %148 = OpConstantComposite %146 %147 
                                         u32 %155 = OpConstant 3 
                                Input f32_4* %159 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                              Private f32_4* %193 = OpVariable Private 
                                             %220 = OpTypeArray %6 %21 
                                             %221 = OpTypeStruct %7 %6 %220 
                                             %222 = OpTypePointer Output %221 
        Output struct {f32_4; f32; f32[1];}* %223 = OpVariable Output 
                                             %225 = OpTypePointer Output %7 
                                             %227 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %229 = OpConstant 2 
                                             %232 = OpTypePointer Output %88 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %234 = OpVariable Input 
                                         i32 %237 = OpConstant 10 
                                         f32 %260 = OpConstant 3.674022E-40 
                                       f32_2 %261 = OpConstantComposite %260 %260 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_2 %264 = OpConstantComposite %263 %263 
                                Private f32* %268 = OpVariable Private 
                                         f32 %277 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_2 %279 = OpConstantComposite %277 %278 
                                       f32_2 %281 = OpConstantComposite %57 %57 
                                       f32_3 %302 = OpConstantComposite %57 %57 %57 
                                             %314 = OpTypeBool 
                                             %315 = OpTypePointer Private %314 
                               Private bool* %316 = OpVariable Private 
                                       f32_4 %317 = OpConstantComposite %91 %91 %91 %91 
                                         i32 %318 = OpConstant 5 
                                             %322 = OpTypeVector %314 4 
                                             %326 = OpTypePointer Function %101 
                                             %369 = OpTypePointer Output %101 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %395 = OpConstant 4 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %327 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %19 %20 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpFNegate %24 
                                 Uniform f32* %27 = OpAccessChain %19 %26 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFMul %25 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %9 %30 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 10 %34 
                                 Private f32* %36 = OpAccessChain %9 %30 
                                                      OpStore %36 %35 
                                 Uniform i32* %40 = OpAccessChain %19 %38 
                                          i32 %41 = OpLoad %40 
                                          f32 %42 = OpConvertSToF %41 
                                                      OpStore %37 %42 
                                          f32 %43 = OpLoad %37 
                                 Private f32* %44 = OpAccessChain %9 %30 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Private f32* %47 = OpAccessChain %9 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 9 %49 
                                 Private f32* %51 = OpAccessChain %9 %30 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %9 %30 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %37 
                                          f32 %55 = OpFDiv %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %30 
                                                      OpStore %56 %55 
                                          f32 %58 = OpLoad %37 
                                          f32 %59 = OpFDiv %57 %58 
                                                      OpStore %37 %59 
                                          f32 %60 = OpLoad %37 
                                 Private f32* %61 = OpAccessChain %9 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %30 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %30 
                                          f32 %66 = OpLoad %65 
                                   Input f32* %70 = OpAccessChain %68 %21 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %66 %71 
                                 Private f32* %73 = OpAccessChain %9 %21 
                                                      OpStore %73 %72 
                                   Input f32* %74 = OpAccessChain %68 %30 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %30 
                                                      OpStore %76 %75 
                          read_only Texture2D %81 = OpLoad %80 
                                      sampler %85 = OpLoad %84 
                   read_only Texture2DSampled %87 = OpSampledImage %81 %85 
                                        f32_4 %89 = OpLoad %9 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                        f32_4 %92 = OpImageSampleExplicitLod %87 %90 Lod %7 
                                                      OpStore %77 %92 
                          read_only Texture2D %94 = OpLoad %93 
                                      sampler %96 = OpLoad %95 
                   read_only Texture2DSampled %97 = OpSampledImage %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_4 %100 = OpImageSampleExplicitLod %97 %99 Lod %7 
                                       f32_3 %102 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %9 %104 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 2 1 
                                       f32_3 %109 = OpFMul %106 %108 
                                       f32_3 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 6 3 
                                                      OpStore %9 %114 
                                Uniform f32* %117 = OpAccessChain %19 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Uniform f32* %121 = OpAccessChain %19 %120 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %119 %122 
                                Private f32* %124 = OpAccessChain %115 %30 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %115 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_3 %129 = OpFMul %126 %128 
                                Uniform f32* %130 = OpAccessChain %19 %116 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %132 = OpAccessChain %19 %116 
                                         f32 %133 = OpLoad %132 
                                Uniform f32* %134 = OpAccessChain %19 %116 
                                         f32 %135 = OpLoad %134 
                                       f32_3 %136 = OpCompositeConstruct %131 %133 %135 
                                         f32 %137 = OpCompositeExtract %136 0 
                                         f32 %138 = OpCompositeExtract %136 1 
                                         f32 %139 = OpCompositeExtract %136 2 
                                       f32_3 %140 = OpCompositeConstruct %137 %138 %139 
                                       f32_3 %141 = OpFAdd %129 %140 
                                       f32_4 %142 = OpLoad %115 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %115 %143 
                                       f32_4 %144 = OpLoad %77 
                                       f32_2 %145 = OpVectorShuffle %144 %144 3 3 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_4 %150 = OpLoad %77 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %77 %151 
                                Private f32* %152 = OpAccessChain %115 %30 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                Private f32* %156 = OpAccessChain %115 %155 
                                                      OpStore %156 %154 
                                       f32_4 %157 = OpLoad %115 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 2 1 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %158 %161 
                                       f32_4 %163 = OpLoad %115 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %115 %164 
                                       f32_4 %166 = OpLoad %115 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %19 %168 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %167 %171 
                                                      OpStore %165 %172 
                              Uniform f32_4* %173 = OpAccessChain %19 %168 %20 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %115 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %165 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %165 %179 
                              Uniform f32_4* %181 = OpAccessChain %19 %168 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %115 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %165 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %115 %187 
                                       f32_4 %188 = OpLoad %115 
                              Uniform f32_4* %190 = OpAccessChain %19 %168 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %165 %192 
                                       f32_4 %194 = OpLoad %165 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %19 %189 %168 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFMul %195 %197 
                                                      OpStore %193 %198 
                              Uniform f32_4* %199 = OpAccessChain %19 %189 %20 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %165 
                                       f32_4 %202 = OpVectorShuffle %201 %201 0 0 0 0 
                                       f32_4 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %193 
                                       f32_4 %205 = OpFAdd %203 %204 
                                                      OpStore %193 %205 
                              Uniform f32_4* %206 = OpAccessChain %19 %189 %180 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %165 
                                       f32_4 %209 = OpVectorShuffle %208 %208 2 2 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %193 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %193 %212 
                              Uniform f32_4* %213 = OpAccessChain %19 %189 %189 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %165 
                                       f32_4 %216 = OpVectorShuffle %215 %215 3 3 3 3 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %193 
                                       f32_4 %219 = OpFAdd %217 %218 
                                                      OpStore %165 %219 
                                       f32_4 %224 = OpLoad %165 
                               Output f32_4* %226 = OpAccessChain %223 %20 
                                                      OpStore %226 %224 
                                Private f32* %230 = OpAccessChain %165 %229 
                                         f32 %231 = OpLoad %230 
                                                      OpStore vs_TEXCOORD5 %231 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                              Uniform f32_4* %238 = OpAccessChain %19 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %241 = OpFMul %236 %240 
                              Uniform f32_4* %242 = OpAccessChain %19 %237 
                                       f32_4 %243 = OpLoad %242 
                                       f32_2 %244 = OpVectorShuffle %243 %243 2 3 
                                       f32_2 %245 = OpFAdd %241 %244 
                                                      OpStore vs_TEXCOORD0 %245 
                                Private f32* %246 = OpAccessChain %77 %21 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpExtInst %1 8 %247 
                                Private f32* %249 = OpAccessChain %165 %30 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %165 %30 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFNegate %251 
                                         f32 %253 = OpFMul %252 %147 
                                Private f32* %254 = OpAccessChain %77 %30 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFAdd %253 %255 
                                Private f32* %257 = OpAccessChain %165 %21 
                                                      OpStore %257 %256 
                                       f32_4 %258 = OpLoad %165 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %262 = OpFMul %259 %261 
                                       f32_2 %265 = OpFAdd %262 %264 
                                       f32_4 %266 = OpLoad %77 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 2 3 
                                                      OpStore %77 %267 
                                       f32_4 %269 = OpLoad %77 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                       f32_4 %271 = OpLoad %77 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %268 %273 
                                         f32 %274 = OpLoad %268 
                                       f32_2 %275 = OpCompositeConstruct %274 %274 
                                       f32_2 %276 = OpFNegate %275 
                                       f32_2 %280 = OpFMul %276 %279 
                                       f32_2 %282 = OpFAdd %280 %281 
                                       f32_4 %283 = OpLoad %165 
                                       f32_4 %284 = OpVectorShuffle %283 %282 0 1 4 5 
                                                      OpStore %165 %284 
                                Private f32* %285 = OpAccessChain %165 %229 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpExtInst %1 31 %286 
                                                      OpStore %268 %287 
                                       f32_4 %288 = OpLoad %77 
                                       f32_2 %289 = OpVectorShuffle %288 %288 0 1 
                                         f32 %290 = OpLoad %268 
                                       f32_2 %291 = OpCompositeConstruct %290 %290 
                                       f32_2 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %165 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 2 3 
                                                      OpStore %165 %294 
                                       f32_4 %295 = OpLoad %165 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 3 
                                       f32_3 %297 = OpExtInst %1 40 %296 %111 
                                       f32_4 %298 = OpLoad %77 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %77 %299 
                                       f32_4 %300 = OpLoad %77 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %303 = OpExtInst %1 37 %301 %302 
                                       f32_4 %304 = OpLoad %77 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %77 %305 
                                Private f32* %306 = OpAccessChain %77 %30 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFNegate %307 
                                Private f32* %309 = OpAccessChain %77 %155 
                                                      OpStore %309 %308 
                                Private f32* %310 = OpAccessChain %9 %30 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                Private f32* %313 = OpAccessChain %9 %155 
                                                      OpStore %313 %312 
                                Uniform f32* %319 = OpAccessChain %19 %318 
                                         f32 %320 = OpLoad %319 
                                       f32_4 %321 = OpCompositeConstruct %320 %320 %320 %320 
                                      bool_4 %323 = OpFOrdNotEqual %317 %321 
                                        bool %324 = OpAny %323 
                                                      OpStore %316 %324 
                                        bool %325 = OpLoad %316 
                                                      OpSelectionMerge %329 None 
                                                      OpBranchConditional %325 %328 %332 
                                             %328 = OpLabel 
                                       f32_4 %330 = OpLoad %77 
                                       f32_3 %331 = OpVectorShuffle %330 %330 3 2 1 
                                                      OpStore %327 %331 
                                                      OpBranch %329 
                                             %332 = OpLabel 
                                       f32_4 %333 = OpLoad %9 
                                       f32_3 %334 = OpVectorShuffle %333 %333 3 1 2 
                                                      OpStore %327 %334 
                                                      OpBranch %329 
                                             %329 = OpLabel 
                                       f32_3 %335 = OpLoad %327 
                                       f32_4 %336 = OpLoad %9 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
                                                      OpStore %9 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                              Uniform f32_4* %340 = OpAccessChain %19 %180 %20 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                         f32 %343 = OpDot %339 %342 
                                Private f32* %344 = OpAccessChain %77 %30 
                                                      OpStore %344 %343 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                              Uniform f32_4* %347 = OpAccessChain %19 %180 %168 
                                       f32_4 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                         f32 %350 = OpDot %346 %349 
                                Private f32* %351 = OpAccessChain %77 %21 
                                                      OpStore %351 %350 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                              Uniform f32_4* %354 = OpAccessChain %19 %180 %180 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                         f32 %357 = OpDot %353 %356 
                                Private f32* %358 = OpAccessChain %77 %229 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %77 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_4 %361 = OpLoad %77 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                         f32 %363 = OpDot %360 %362 
                                Private f32* %364 = OpAccessChain %9 %30 
                                                      OpStore %364 %363 
                                Private f32* %365 = OpAccessChain %9 %30 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpExtInst %1 32 %366 
                                Private f32* %368 = OpAccessChain %9 %30 
                                                      OpStore %368 %367 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 0 0 
                                       f32_4 %373 = OpLoad %77 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                                      OpStore vs_TEXCOORD1 %375 
                              Uniform f32_4* %377 = OpAccessChain %19 %168 %189 
                                       f32_4 %378 = OpLoad %377 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_4 %380 = OpLoad %159 
                                       f32_3 %381 = OpVectorShuffle %380 %380 3 3 3 
                                       f32_3 %382 = OpFMul %379 %381 
                                       f32_4 %383 = OpLoad %115 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_3 %385 = OpFAdd %382 %384 
                                                      OpStore vs_TEXCOORD2 %385 
                              Uniform f32_4* %386 = OpAccessChain %19 %168 %189 
                                       f32_4 %387 = OpLoad %386 
                                       f32_4 %388 = OpLoad %159 
                                       f32_4 %389 = OpVectorShuffle %388 %388 3 3 3 3 
                                       f32_4 %390 = OpFMul %387 %389 
                                       f32_4 %391 = OpLoad %115 
                                       f32_4 %392 = OpFAdd %390 %391 
                                                      OpStore %9 %392 
                                       f32_4 %393 = OpLoad %9 
                                       f32_4 %394 = OpVectorShuffle %393 %393 1 1 1 1 
                              Uniform f32_4* %396 = OpAccessChain %19 %395 %168 
                                       f32_4 %397 = OpLoad %396 
                                       f32_4 %398 = OpFMul %394 %397 
                                                      OpStore %77 %398 
                              Uniform f32_4* %399 = OpAccessChain %19 %395 %20 
                                       f32_4 %400 = OpLoad %399 
                                       f32_4 %401 = OpLoad %9 
                                       f32_4 %402 = OpVectorShuffle %401 %401 0 0 0 0 
                                       f32_4 %403 = OpFMul %400 %402 
                                       f32_4 %404 = OpLoad %77 
                                       f32_4 %405 = OpFAdd %403 %404 
                                                      OpStore %77 %405 
                              Uniform f32_4* %406 = OpAccessChain %19 %395 %180 
                                       f32_4 %407 = OpLoad %406 
                                       f32_4 %408 = OpLoad %9 
                                       f32_4 %409 = OpVectorShuffle %408 %408 2 2 2 2 
                                       f32_4 %410 = OpFMul %407 %409 
                                       f32_4 %411 = OpLoad %77 
                                       f32_4 %412 = OpFAdd %410 %411 
                                                      OpStore %77 %412 
                              Uniform f32_4* %414 = OpAccessChain %19 %395 %189 
                                       f32_4 %415 = OpLoad %414 
                                       f32_4 %416 = OpLoad %9 
                                       f32_4 %417 = OpVectorShuffle %416 %416 3 3 3 3 
                                       f32_4 %418 = OpFMul %415 %417 
                                       f32_4 %419 = OpLoad %77 
                                       f32_4 %420 = OpFAdd %418 %419 
                                                      OpStore vs_TEXCOORD3 %420 
                                                      OpStore vs_TEXCOORD4 %317 
                                 Output f32* %422 = OpAccessChain %223 %20 %21 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFNegate %423 
                                 Output f32* %425 = OpAccessChain %223 %20 %21 
                                                      OpStore %425 %424 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 515
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %179 %317 %479 %504 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %74 DescriptorSet 74 
                                                      OpDecorate %74 Binding 74 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate vs_TEXCOORD1 Location 179 
                                                      OpDecorate %311 DescriptorSet 311 
                                                      OpDecorate %311 Binding 311 
                                                      OpDecorate %313 DescriptorSet 313 
                                                      OpDecorate %313 Binding 313 
                                                      OpDecorate vs_TEXCOORD0 Location 317 
                                                      OpDecorate vs_TEXCOORD5 Location 479 
                                                      OpDecorate %504 Location 504 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %7 %7 %17 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 5 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                                              %49 = OpTypePointer Private %10 
                               Private f32_3* %50 = OpVariable Private 
                                              %51 = OpTypeVector %6 2 
                                          f32 %61 = OpConstant 3.674022E-40 
                                        f32_2 %62 = OpConstantComposite %61 %61 
                                              %66 = OpTypePointer Private %6 
                                 Private f32* %67 = OpVariable Private 
                                              %68 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %69 = OpTypePointer UniformConstant %68 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                                              %72 = OpTypeSampler 
                                              %73 = OpTypePointer UniformConstant %72 
                     UniformConstant sampler* %74 = OpVariable UniformConstant 
                                              %76 = OpTypeSampledImage %68 
                                          u32 %81 = OpConstant 3 
                                              %83 = OpTypeBool 
                                              %84 = OpTypePointer Private %83 
                                Private bool* %85 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          u32 %87 = OpConstant 2 
                                          u32 %96 = OpConstant 0 
         UniformConstant read_only Texture2D* %98 = OpVariable UniformConstant 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                                Private f32* %108 = OpVariable Private 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         i32 %122 = OpConstant 4 
                                             %131 = OpTypePointer Uniform %10 
                              Private f32_3* %144 = OpVariable Private 
                              Private f32_3* %156 = OpVariable Private 
                                         f32 %171 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %185 = OpVariable Private 
                                Private f32* %195 = OpVariable Private 
                                Private f32* %213 = OpVariable Private 
                                         i32 %214 = OpConstant 6 
                                             %215 = OpTypePointer Uniform %6 
                                Private f32* %220 = OpVariable Private 
                                         f32 %225 = OpConstant 3.674022E-40 
                              Private f32_3* %227 = OpVariable Private 
                                Private f32* %232 = OpVariable Private 
                                         f32 %247 = OpConstant 3.674022E-40 
                                         f32 %251 = OpConstant 3.674022E-40 
                                         f32 %295 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %311 = OpVariable UniformConstant 
                    UniformConstant sampler* %313 = OpVariable UniformConstant 
                                             %316 = OpTypePointer Input %51 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %322 = OpConstant 8 
                                         f32 %327 = OpConstant 3.674022E-40 
                                       f32_3 %328 = OpConstantComposite %327 %327 %327 
                                         i32 %335 = OpConstant 7 
                                         f32 %349 = OpConstant 3.674022E-40 
                                       f32_3 %350 = OpConstantComposite %349 %349 %349 
                               Private bool* %355 = OpVariable Private 
                                         f32 %380 = OpConstant 3.674022E-40 
                              Private f32_3* %391 = OpVariable Private 
                                       f32_3 %394 = OpConstantComposite %110 %110 %110 
                                         f32 %463 = OpConstant 3.674022E-40 
                                             %478 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %481 = OpConstant 1 
                                             %503 = OpTypePointer Output %7 
                               Output f32_4* %504 = OpVariable Output 
                                             %512 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %14 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpLoad vs_TEXCOORD2 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %20 %22 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %20 %22 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %52 = OpLoad %9 
                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 3 3 
                                        f32_2 %56 = OpFDiv %53 %55 
                                        f32_3 %57 = OpLoad %50 
                                        f32_3 %58 = OpVectorShuffle %57 %56 3 4 2 
                                                      OpStore %50 %58 
                                        f32_3 %59 = OpLoad %50 
                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                        f32_2 %63 = OpFAdd %60 %62 
                                        f32_3 %64 = OpLoad %50 
                                        f32_3 %65 = OpVectorShuffle %64 %63 3 4 2 
                                                      OpStore %50 %65 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %75 = OpLoad %74 
                   read_only Texture2DSampled %77 = OpSampledImage %71 %75 
                                        f32_3 %78 = OpLoad %50 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_4 %80 = OpImageSampleImplicitLod %77 %79 
                                          f32 %82 = OpCompositeExtract %80 3 
                                                      OpStore %67 %82 
                                 Private f32* %88 = OpAccessChain %9 %87 
                                          f32 %89 = OpLoad %88 
                                         bool %90 = OpFOrdLessThan %86 %89 
                                                      OpStore %85 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                          f32 %95 = OpDot %92 %94 
                                 Private f32* %97 = OpAccessChain %9 %96 
                                                      OpStore %97 %95 
                          read_only Texture2D %99 = OpLoad %98 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %102 = OpSampledImage %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 0 
                                       f32_4 %105 = OpImageSampleImplicitLod %102 %104 
                                         f32 %106 = OpCompositeExtract %105 0 
                                Private f32* %107 = OpAccessChain %9 %96 
                                                      OpStore %107 %106 
                                        bool %109 = OpLoad %85 
                                         f32 %111 = OpSelect %109 %110 %86 
                                                      OpStore %108 %111 
                                         f32 %112 = OpLoad %67 
                                         f32 %113 = OpLoad %108 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %108 %114 
                                Private f32* %115 = OpAccessChain %9 %96 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpLoad %108 
                                         f32 %118 = OpFMul %116 %117 
                                Private f32* %119 = OpAccessChain %9 %96 
                                                      OpStore %119 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
                              Uniform f32_4* %123 = OpAccessChain %20 %122 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFMul %121 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %9 %128 
                                       f32_3 %129 = OpLoad vs_TEXCOORD2 
                                       f32_3 %130 = OpFNegate %129 
                              Uniform f32_3* %132 = OpAccessChain %20 %28 
                                       f32_3 %133 = OpLoad %132 
                                       f32_3 %134 = OpFAdd %130 %133 
                                                      OpStore %50 %134 
                                       f32_3 %135 = OpLoad %50 
                                       f32_3 %136 = OpLoad %50 
                                         f32 %137 = OpDot %135 %136 
                                                      OpStore %67 %137 
                                         f32 %138 = OpLoad %67 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %67 %139 
                                         f32 %140 = OpLoad %67 
                                       f32_3 %141 = OpCompositeConstruct %140 %140 %140 
                                       f32_3 %142 = OpLoad %50 
                                       f32_3 %143 = OpFMul %141 %142 
                                                      OpStore %50 %143 
                                       f32_3 %145 = OpLoad vs_TEXCOORD2 
                                       f32_3 %146 = OpFNegate %145 
                              Uniform f32_4* %147 = OpAccessChain %20 %36 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFAdd %146 %149 
                                                      OpStore %144 %150 
                                       f32_3 %151 = OpLoad %144 
                                       f32_3 %152 = OpLoad %144 
                                         f32 %153 = OpDot %151 %152 
                                                      OpStore %67 %153 
                                         f32 %154 = OpLoad %67 
                                         f32 %155 = OpExtInst %1 32 %154 
                                                      OpStore %67 %155 
                                       f32_3 %157 = OpLoad %144 
                                         f32 %158 = OpLoad %67 
                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_3 %161 = OpLoad %50 
                                       f32_3 %162 = OpFAdd %160 %161 
                                                      OpStore %156 %162 
                                         f32 %163 = OpLoad %67 
                                       f32_3 %164 = OpCompositeConstruct %163 %163 %163 
                                       f32_3 %165 = OpLoad %144 
                                       f32_3 %166 = OpFMul %164 %165 
                                                      OpStore %144 %166 
                                       f32_3 %167 = OpLoad %156 
                                       f32_3 %168 = OpLoad %156 
                                         f32 %169 = OpDot %167 %168 
                                                      OpStore %67 %169 
                                         f32 %170 = OpLoad %67 
                                         f32 %172 = OpExtInst %1 40 %170 %171 
                                                      OpStore %67 %172 
                                         f32 %173 = OpLoad %67 
                                         f32 %174 = OpExtInst %1 32 %173 
                                                      OpStore %67 %174 
                                         f32 %175 = OpLoad %67 
                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
                                       f32_3 %177 = OpLoad %156 
                                       f32_3 %178 = OpFMul %176 %177 
                                                      OpStore %156 %178 
                                       f32_3 %180 = OpLoad vs_TEXCOORD1 
                                       f32_3 %181 = OpLoad vs_TEXCOORD1 
                                         f32 %182 = OpDot %180 %181 
                                                      OpStore %67 %182 
                                         f32 %183 = OpLoad %67 
                                         f32 %184 = OpExtInst %1 32 %183 
                                                      OpStore %67 %184 
                                         f32 %186 = OpLoad %67 
                                       f32_3 %187 = OpCompositeConstruct %186 %186 %186 
                                       f32_3 %188 = OpLoad vs_TEXCOORD1 
                                       f32_3 %189 = OpFMul %187 %188 
                                                      OpStore %185 %189 
                                       f32_3 %190 = OpLoad %185 
                                       f32_3 %191 = OpLoad %156 
                                         f32 %192 = OpDot %190 %191 
                                                      OpStore %67 %192 
                                         f32 %193 = OpLoad %67 
                                         f32 %194 = OpExtInst %1 43 %193 %86 %110 
                                                      OpStore %67 %194 
                                       f32_3 %196 = OpLoad %144 
                                       f32_3 %197 = OpLoad %156 
                                         f32 %198 = OpDot %196 %197 
                                                      OpStore %195 %198 
                                         f32 %199 = OpLoad %195 
                                         f32 %200 = OpExtInst %1 43 %199 %86 %110 
                                                      OpStore %195 %200 
                                       f32_3 %201 = OpLoad %185 
                                       f32_3 %202 = OpLoad %144 
                                         f32 %203 = OpDot %201 %202 
                                Private f32* %204 = OpAccessChain %144 %96 
                                                      OpStore %204 %203 
                                Private f32* %205 = OpAccessChain %144 %96 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpExtInst %1 43 %206 %86 %110 
                                Private f32* %208 = OpAccessChain %144 %96 
                                                      OpStore %208 %207 
                                       f32_3 %209 = OpLoad %185 
                                       f32_3 %210 = OpLoad %50 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %50 %96 
                                                      OpStore %212 %211 
                                Uniform f32* %216 = OpAccessChain %20 %214 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %218 %110 
                                                      OpStore %213 %219 
                                         f32 %221 = OpLoad %213 
                                         f32 %222 = OpLoad %213 
                                         f32 %223 = OpFMul %221 %222 
                                                      OpStore %220 %223 
                                         f32 %224 = OpLoad %220 
                                         f32 %226 = OpExtInst %1 40 %224 %225 
                                                      OpStore %220 %226 
                                         f32 %228 = OpLoad %220 
                                         f32 %229 = OpLoad %220 
                                         f32 %230 = OpFMul %228 %229 
                                Private f32* %231 = OpAccessChain %227 %96 
                                                      OpStore %231 %230 
                                         f32 %233 = OpLoad %67 
                                Private f32* %234 = OpAccessChain %227 %96 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                         f32 %237 = OpLoad %67 
                                         f32 %238 = OpFNegate %237 
                                         f32 %239 = OpFAdd %236 %238 
                                                      OpStore %232 %239 
                                         f32 %240 = OpLoad %232 
                                         f32 %241 = OpLoad %67 
                                         f32 %242 = OpFMul %240 %241 
                                         f32 %243 = OpFAdd %242 %110 
                                                      OpStore %67 %243 
                                         f32 %244 = OpLoad %67 
                                         f32 %245 = OpLoad %67 
                                         f32 %246 = OpFMul %244 %245 
                                         f32 %248 = OpFAdd %246 %247 
                                                      OpStore %67 %248 
                                Private f32* %249 = OpAccessChain %227 %96 
                                         f32 %250 = OpLoad %249 
                                         f32 %252 = OpFMul %250 %251 
                                Private f32* %253 = OpAccessChain %227 %96 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %227 %96 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpLoad %67 
                                         f32 %257 = OpFDiv %255 %256 
                                                      OpStore %67 %257 
                                         f32 %258 = OpLoad %220 
                                         f32 %259 = OpFNegate %258 
                                         f32 %260 = OpFAdd %259 %110 
                                Private f32* %261 = OpAccessChain %227 %96 
                                                      OpStore %261 %260 
                                Private f32* %262 = OpAccessChain %50 %96 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpExtInst %1 4 %263 
                                Private f32* %265 = OpAccessChain %227 %96 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFMul %264 %266 
                                         f32 %268 = OpLoad %220 
                                         f32 %269 = OpFAdd %267 %268 
                                                      OpStore %232 %269 
                                Private f32* %270 = OpAccessChain %144 %96 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %227 %96 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                         f32 %275 = OpLoad %220 
                                         f32 %276 = OpFAdd %274 %275 
                                                      OpStore %220 %276 
                                         f32 %277 = OpLoad %220 
                                Private f32* %278 = OpAccessChain %50 %96 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpExtInst %1 4 %279 
                                         f32 %281 = OpFMul %277 %280 
                                                      OpStore %220 %281 
                                Private f32* %282 = OpAccessChain %50 %96 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpExtInst %1 4 %283 
                                         f32 %285 = OpFNegate %284 
                                         f32 %286 = OpFAdd %285 %110 
                                Private f32* %287 = OpAccessChain %50 %96 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %144 %96 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpLoad %232 
                                         f32 %291 = OpFMul %289 %290 
                                         f32 %292 = OpLoad %220 
                                         f32 %293 = OpFAdd %291 %292 
                                                      OpStore %220 %293 
                                         f32 %294 = OpLoad %220 
                                         f32 %296 = OpFAdd %294 %295 
                                                      OpStore %220 %296 
                                         f32 %297 = OpLoad %220 
                                         f32 %298 = OpFDiv %61 %297 
                                                      OpStore %220 %298 
                                         f32 %299 = OpLoad %67 
                                         f32 %300 = OpLoad %220 
                                         f32 %301 = OpFMul %299 %300 
                                                      OpStore %67 %301 
                                Private f32* %302 = OpAccessChain %144 %96 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpLoad %67 
                                         f32 %305 = OpFMul %303 %304 
                                                      OpStore %67 %305 
                                         f32 %306 = OpLoad %67 
                                         f32 %308 = OpFMul %306 %307 
                                                      OpStore %67 %308 
                                         f32 %309 = OpLoad %67 
                                         f32 %310 = OpExtInst %1 40 %309 %86 
                                                      OpStore %67 %310 
                         read_only Texture2D %312 = OpLoad %311 
                                     sampler %314 = OpLoad %313 
                  read_only Texture2DSampled %315 = OpSampledImage %312 %314 
                                       f32_2 %318 = OpLoad vs_TEXCOORD0 
                                       f32_4 %319 = OpImageSampleImplicitLod %315 %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                                      OpStore %227 %320 
                                       f32_3 %321 = OpLoad %227 
                              Uniform f32_4* %323 = OpAccessChain %20 %322 
                                       f32_4 %324 = OpLoad %323 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpFMul %321 %325 
                                       f32_3 %329 = OpFAdd %326 %328 
                                                      OpStore %156 %329 
                                       f32_3 %330 = OpLoad %227 
                              Uniform f32_4* %331 = OpAccessChain %20 %322 
                                       f32_4 %332 = OpLoad %331 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_3 %334 = OpFMul %330 %333 
                                                      OpStore %227 %334 
                                Uniform f32* %336 = OpAccessChain %20 %335 
                                         f32 %337 = OpLoad %336 
                                Uniform f32* %338 = OpAccessChain %20 %335 
                                         f32 %339 = OpLoad %338 
                                Uniform f32* %340 = OpAccessChain %20 %335 
                                         f32 %341 = OpLoad %340 
                                       f32_3 %342 = OpCompositeConstruct %337 %339 %341 
                                         f32 %343 = OpCompositeExtract %342 0 
                                         f32 %344 = OpCompositeExtract %342 1 
                                         f32 %345 = OpCompositeExtract %342 2 
                                       f32_3 %346 = OpCompositeConstruct %343 %344 %345 
                                       f32_3 %347 = OpLoad %156 
                                       f32_3 %348 = OpFMul %346 %347 
                                       f32_3 %351 = OpFAdd %348 %350 
                                                      OpStore %156 %351 
                                       f32_3 %352 = OpLoad %156 
                                       f32_3 %353 = OpLoad %156 
                                         f32 %354 = OpDot %352 %353 
                                                      OpStore %220 %354 
                                         f32 %356 = OpLoad %220 
                                        bool %357 = OpFOrdNotEqual %356 %86 
                                                      OpStore %355 %357 
                                        bool %358 = OpLoad %355 
                                         f32 %359 = OpSelect %358 %110 %86 
                                                      OpStore %220 %359 
                                         f32 %360 = OpLoad %67 
                                         f32 %361 = OpLoad %220 
                                         f32 %362 = OpFMul %360 %361 
                                                      OpStore %67 %362 
                                       f32_4 %363 = OpLoad %9 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                         f32 %365 = OpLoad %67 
                                       f32_3 %366 = OpCompositeConstruct %365 %365 %365 
                                       f32_3 %367 = OpFMul %364 %366 
                                                      OpStore %185 %367 
                                         f32 %368 = OpLoad %195 
                                         f32 %369 = OpFNegate %368 
                                         f32 %370 = OpFAdd %369 %110 
                                                      OpStore %67 %370 
                                         f32 %371 = OpLoad %195 
                                         f32 %372 = OpLoad %195 
                                         f32 %373 = OpFMul %371 %372 
                                                      OpStore %220 %373 
                                         f32 %374 = OpLoad %220 
                                       f32_2 %375 = OpCompositeConstruct %374 %374 
                                         f32 %376 = OpLoad %213 
                                       f32_2 %377 = OpCompositeConstruct %376 %376 
                                         f32 %378 = OpDot %375 %377 
                                                      OpStore %213 %378 
                                         f32 %379 = OpLoad %213 
                                         f32 %381 = OpFAdd %379 %380 
                                                      OpStore %213 %381 
                                         f32 %382 = OpLoad %67 
                                         f32 %383 = OpLoad %67 
                                         f32 %384 = OpFMul %382 %383 
                                                      OpStore %220 %384 
                                         f32 %385 = OpLoad %220 
                                         f32 %386 = OpLoad %220 
                                         f32 %387 = OpFMul %385 %386 
                                                      OpStore %220 %387 
                                         f32 %388 = OpLoad %67 
                                         f32 %389 = OpLoad %220 
                                         f32 %390 = OpFMul %388 %389 
                                                      OpStore %67 %390 
                                       f32_3 %392 = OpLoad %156 
                                       f32_3 %393 = OpFNegate %392 
                                       f32_3 %395 = OpFAdd %393 %394 
                                                      OpStore %391 %395 
                                       f32_3 %396 = OpLoad %391 
                                         f32 %397 = OpLoad %67 
                                       f32_3 %398 = OpCompositeConstruct %397 %397 %397 
                                       f32_3 %399 = OpFMul %396 %398 
                                       f32_3 %400 = OpLoad %156 
                                       f32_3 %401 = OpFAdd %399 %400 
                                                      OpStore %156 %401 
                                       f32_3 %402 = OpLoad %156 
                                       f32_3 %403 = OpLoad %185 
                                       f32_3 %404 = OpFMul %402 %403 
                                                      OpStore %156 %404 
                                Private f32* %405 = OpAccessChain %50 %96 
                                         f32 %406 = OpLoad %405 
                                Private f32* %407 = OpAccessChain %50 %96 
                                         f32 %408 = OpLoad %407 
                                         f32 %409 = OpFMul %406 %408 
                                                      OpStore %67 %409 
                                         f32 %410 = OpLoad %67 
                                         f32 %411 = OpLoad %67 
                                         f32 %412 = OpFMul %410 %411 
                                                      OpStore %67 %412 
                                Private f32* %413 = OpAccessChain %50 %96 
                                         f32 %414 = OpLoad %413 
                                         f32 %415 = OpLoad %67 
                                         f32 %416 = OpFMul %414 %415 
                                                      OpStore %67 %416 
                                         f32 %417 = OpLoad %213 
                                         f32 %418 = OpLoad %67 
                                         f32 %419 = OpFMul %417 %418 
                                         f32 %420 = OpFAdd %419 %110 
                                                      OpStore %67 %420 
                                Private f32* %421 = OpAccessChain %144 %96 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFNegate %422 
                                         f32 %424 = OpFAdd %423 %110 
                                Private f32* %425 = OpAccessChain %50 %96 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %50 %96 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %50 %96 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                                      OpStore %220 %430 
                                         f32 %431 = OpLoad %220 
                                         f32 %432 = OpLoad %220 
                                         f32 %433 = OpFMul %431 %432 
                                                      OpStore %220 %433 
                                Private f32* %434 = OpAccessChain %50 %96 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpLoad %220 
                                         f32 %437 = OpFMul %435 %436 
                                Private f32* %438 = OpAccessChain %50 %96 
                                                      OpStore %438 %437 
                                         f32 %439 = OpLoad %213 
                                Private f32* %440 = OpAccessChain %50 %96 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpFAdd %442 %110 
                                Private f32* %444 = OpAccessChain %50 %96 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %67 
                                Private f32* %446 = OpAccessChain %50 %96 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                                      OpStore %67 %448 
                                Private f32* %449 = OpAccessChain %144 %96 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpLoad %67 
                                         f32 %452 = OpFMul %450 %451 
                                                      OpStore %67 %452 
                                         f32 %453 = OpLoad %67 
                                       f32_3 %454 = OpCompositeConstruct %453 %453 %453 
                                       f32_4 %455 = OpLoad %9 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpFMul %454 %456 
                                       f32_4 %458 = OpLoad %9 
                                       f32_4 %459 = OpVectorShuffle %458 %457 4 5 6 3 
                                                      OpStore %9 %459 
                                Uniform f32* %460 = OpAccessChain %20 %335 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpFNegate %461 
                                         f32 %464 = OpFMul %462 %463 
                                         f32 %465 = OpFAdd %464 %463 
                                                      OpStore %67 %465 
                                         f32 %466 = OpLoad %67 
                                       f32_3 %467 = OpCompositeConstruct %466 %466 %466 
                                       f32_3 %468 = OpLoad %227 
                                       f32_3 %469 = OpFMul %467 %468 
                                                      OpStore %50 %469 
                                       f32_3 %470 = OpLoad %50 
                                       f32_4 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFMul %470 %472 
                                       f32_3 %474 = OpLoad %156 
                                       f32_3 %475 = OpFAdd %473 %474 
                                       f32_4 %476 = OpLoad %9 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 6 3 
                                                      OpStore %9 %477 
                                         f32 %480 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %482 = OpAccessChain %20 %23 %481 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFDiv %480 %483 
                                                      OpStore %67 %484 
                                         f32 %485 = OpLoad %67 
                                         f32 %486 = OpFNegate %485 
                                         f32 %487 = OpFAdd %486 %110 
                                                      OpStore %67 %487 
                                         f32 %488 = OpLoad %67 
                                Uniform f32* %489 = OpAccessChain %20 %23 %87 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFMul %488 %490 
                                                      OpStore %67 %491 
                                         f32 %492 = OpLoad %67 
                                         f32 %493 = OpExtInst %1 40 %492 %86 
                                                      OpStore %67 %493 
                                         f32 %494 = OpLoad %67 
                                Uniform f32* %495 = OpAccessChain %20 %45 %87 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFMul %494 %496 
                                Uniform f32* %498 = OpAccessChain %20 %45 %81 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                                      OpStore %67 %500 
                                         f32 %501 = OpLoad %67 
                                         f32 %502 = OpExtInst %1 43 %501 %86 %110 
                                                      OpStore %67 %502 
                                       f32_4 %505 = OpLoad %9 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
                                         f32 %507 = OpLoad %67 
                                       f32_3 %508 = OpCompositeConstruct %507 %507 %507 
                                       f32_3 %509 = OpFMul %506 %508 
                                       f32_4 %510 = OpLoad %504 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 6 3 
                                                      OpStore %504 %511 
                                 Output f32* %513 = OpAccessChain %504 %81 
                                                      OpStore %513 %110 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(3) uniform  sampler2D _posTex;
UNITY_LOCATION(4) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat11;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5 = float(_numOfFrames);
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat5;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat0.x = u_xlat5 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    gl_Position = u_xlat3;
    vs_TEXCOORD5 = u_xlat3.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = floor(u_xlat1.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat3.zw = (-vec2(u_xlat11)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat11 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat1.xy * vec2(u_xlat11);
    u_xlat1.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
bool u_xlatb13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat8.x = u_xlat13 * u_xlat13;
    u_xlat14 = u_xlat18 * u_xlat8.x + (-u_xlat18);
    u_xlat18 = u_xlat14 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat8.x = u_xlat8.x * 0.318309873;
    u_xlat18 = u_xlat8.x / u_xlat18;
    u_xlat8.x = (-u_xlat13) + 1.0;
    u_xlat14 = abs(u_xlat1.x) * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat13 * abs(u_xlat1.x);
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
    u_xlat13 = u_xlat13 + 9.99999975e-06;
    u_xlat13 = 0.5 / u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat19 * u_xlat19;
    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
    u_xlat7 = u_xlat7 + -0.5;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
    u_xlat18 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 440
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %68 %159 %223 %228 %233 %234 %370 %376 %424 %434 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %68 Location 68 
                                                      OpDecorate %80 DescriptorSet 80 
                                                      OpDecorate %80 Binding 80 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %95 DescriptorSet 95 
                                                      OpDecorate %95 Binding 95 
                                                      OpDecorate %159 Location 159 
                                                      OpMemberDecorate %221 0 BuiltIn 221 
                                                      OpMemberDecorate %221 1 BuiltIn 221 
                                                      OpMemberDecorate %221 2 BuiltIn 221 
                                                      OpDecorate %221 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 228 
                                                      OpDecorate vs_TEXCOORD0 Location 233 
                                                      OpDecorate %234 Location 234 
                                                      OpDecorate vs_TEXCOORD1 Location 370 
                                                      OpDecorate vs_TEXCOORD2 Location 376 
                                                      OpDecorate vs_TEXCOORD3 Location 424 
                                                      OpDecorate vs_TEXCOORD4 Location 434 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeArray %7 %11 
                                              %16 = OpTypeInt 32 1 
                                              %17 = OpTypeStruct %7 %12 %13 %14 %15 %6 %6 %6 %6 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %19 = OpVariable Uniform 
                                          i32 %20 = OpConstant 0 
                                          u32 %21 = OpConstant 1 
                                              %22 = OpTypePointer Uniform %6 
                                          i32 %26 = OpConstant 8 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %37 = OpVariable Private 
                                          i32 %38 = OpConstant 9 
                                              %39 = OpTypePointer Uniform %16 
                                          f32 %57 = OpConstant 3.674022E-40 
                                              %67 = OpTypePointer Input %7 
                                 Input f32_4* %68 = OpVariable Input 
                                              %69 = OpTypePointer Input %6 
                               Private f32_4* %77 = OpVariable Private 
                                              %78 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %79 = OpTypePointer UniformConstant %78 
         UniformConstant read_only Texture2D* %80 = OpVariable UniformConstant 
                                              %82 = OpTypeSampler 
                                              %83 = OpTypePointer UniformConstant %82 
                     UniformConstant sampler* %84 = OpVariable UniformConstant 
                                              %86 = OpTypeSampledImage %78 
                                              %88 = OpTypeVector %6 2 
                                          f32 %91 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %93 = OpVariable UniformConstant 
                     UniformConstant sampler* %95 = OpVariable UniformConstant 
                                             %101 = OpTypeVector %6 3 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_3 %108 = OpConstantComposite %107 %107 %107 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_3 %111 = OpConstantComposite %110 %110 %110 
                              Private f32_4* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 7 
                                         i32 %120 = OpConstant 6 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_2 %148 = OpConstantComposite %146 %147 
                                         u32 %155 = OpConstant 3 
                                Input f32_4* %159 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                              Private f32_4* %193 = OpVariable Private 
                                             %220 = OpTypeArray %6 %21 
                                             %221 = OpTypeStruct %7 %6 %220 
                                             %222 = OpTypePointer Output %221 
        Output struct {f32_4; f32; f32[1];}* %223 = OpVariable Output 
                                             %225 = OpTypePointer Output %7 
                                             %227 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %229 = OpConstant 2 
                                             %232 = OpTypePointer Output %88 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %234 = OpVariable Input 
                                         i32 %237 = OpConstant 10 
                                         f32 %260 = OpConstant 3.674022E-40 
                                       f32_2 %261 = OpConstantComposite %260 %260 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_2 %264 = OpConstantComposite %263 %263 
                                Private f32* %268 = OpVariable Private 
                                         f32 %277 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_2 %279 = OpConstantComposite %277 %278 
                                       f32_2 %281 = OpConstantComposite %57 %57 
                                       f32_3 %302 = OpConstantComposite %57 %57 %57 
                                             %314 = OpTypeBool 
                                             %315 = OpTypePointer Private %314 
                               Private bool* %316 = OpVariable Private 
                                       f32_4 %317 = OpConstantComposite %91 %91 %91 %91 
                                         i32 %318 = OpConstant 5 
                                             %322 = OpTypeVector %314 4 
                                             %326 = OpTypePointer Function %101 
                                             %369 = OpTypePointer Output %101 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %395 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %327 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %19 %20 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpFNegate %24 
                                 Uniform f32* %27 = OpAccessChain %19 %26 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFMul %25 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %9 %30 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 10 %34 
                                 Private f32* %36 = OpAccessChain %9 %30 
                                                      OpStore %36 %35 
                                 Uniform i32* %40 = OpAccessChain %19 %38 
                                          i32 %41 = OpLoad %40 
                                          f32 %42 = OpConvertSToF %41 
                                                      OpStore %37 %42 
                                          f32 %43 = OpLoad %37 
                                 Private f32* %44 = OpAccessChain %9 %30 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Private f32* %47 = OpAccessChain %9 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 9 %49 
                                 Private f32* %51 = OpAccessChain %9 %30 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %9 %30 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %37 
                                          f32 %55 = OpFDiv %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %30 
                                                      OpStore %56 %55 
                                          f32 %58 = OpLoad %37 
                                          f32 %59 = OpFDiv %57 %58 
                                                      OpStore %37 %59 
                                          f32 %60 = OpLoad %37 
                                 Private f32* %61 = OpAccessChain %9 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %30 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %30 
                                          f32 %66 = OpLoad %65 
                                   Input f32* %70 = OpAccessChain %68 %21 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %66 %71 
                                 Private f32* %73 = OpAccessChain %9 %21 
                                                      OpStore %73 %72 
                                   Input f32* %74 = OpAccessChain %68 %30 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %30 
                                                      OpStore %76 %75 
                          read_only Texture2D %81 = OpLoad %80 
                                      sampler %85 = OpLoad %84 
                   read_only Texture2DSampled %87 = OpSampledImage %81 %85 
                                        f32_4 %89 = OpLoad %9 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                        f32_4 %92 = OpImageSampleExplicitLod %87 %90 Lod %7 
                                                      OpStore %77 %92 
                          read_only Texture2D %94 = OpLoad %93 
                                      sampler %96 = OpLoad %95 
                   read_only Texture2DSampled %97 = OpSampledImage %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_4 %100 = OpImageSampleExplicitLod %97 %99 Lod %7 
                                       f32_3 %102 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %9 %104 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 2 1 
                                       f32_3 %109 = OpFMul %106 %108 
                                       f32_3 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 6 3 
                                                      OpStore %9 %114 
                                Uniform f32* %117 = OpAccessChain %19 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Uniform f32* %121 = OpAccessChain %19 %120 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %119 %122 
                                Private f32* %124 = OpAccessChain %115 %30 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %115 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_3 %129 = OpFMul %126 %128 
                                Uniform f32* %130 = OpAccessChain %19 %116 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %132 = OpAccessChain %19 %116 
                                         f32 %133 = OpLoad %132 
                                Uniform f32* %134 = OpAccessChain %19 %116 
                                         f32 %135 = OpLoad %134 
                                       f32_3 %136 = OpCompositeConstruct %131 %133 %135 
                                         f32 %137 = OpCompositeExtract %136 0 
                                         f32 %138 = OpCompositeExtract %136 1 
                                         f32 %139 = OpCompositeExtract %136 2 
                                       f32_3 %140 = OpCompositeConstruct %137 %138 %139 
                                       f32_3 %141 = OpFAdd %129 %140 
                                       f32_4 %142 = OpLoad %115 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %115 %143 
                                       f32_4 %144 = OpLoad %77 
                                       f32_2 %145 = OpVectorShuffle %144 %144 3 3 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_4 %150 = OpLoad %77 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %77 %151 
                                Private f32* %152 = OpAccessChain %115 %30 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                Private f32* %156 = OpAccessChain %115 %155 
                                                      OpStore %156 %154 
                                       f32_4 %157 = OpLoad %115 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 2 1 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %158 %161 
                                       f32_4 %163 = OpLoad %115 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %115 %164 
                                       f32_4 %166 = OpLoad %115 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %19 %168 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %167 %171 
                                                      OpStore %165 %172 
                              Uniform f32_4* %173 = OpAccessChain %19 %168 %20 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %115 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %165 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %165 %179 
                              Uniform f32_4* %181 = OpAccessChain %19 %168 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %115 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %165 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %115 %187 
                                       f32_4 %188 = OpLoad %115 
                              Uniform f32_4* %190 = OpAccessChain %19 %168 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %165 %192 
                                       f32_4 %194 = OpLoad %165 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %19 %189 %168 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFMul %195 %197 
                                                      OpStore %193 %198 
                              Uniform f32_4* %199 = OpAccessChain %19 %189 %20 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %165 
                                       f32_4 %202 = OpVectorShuffle %201 %201 0 0 0 0 
                                       f32_4 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %193 
                                       f32_4 %205 = OpFAdd %203 %204 
                                                      OpStore %193 %205 
                              Uniform f32_4* %206 = OpAccessChain %19 %189 %180 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %165 
                                       f32_4 %209 = OpVectorShuffle %208 %208 2 2 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %193 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %193 %212 
                              Uniform f32_4* %213 = OpAccessChain %19 %189 %189 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %165 
                                       f32_4 %216 = OpVectorShuffle %215 %215 3 3 3 3 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %193 
                                       f32_4 %219 = OpFAdd %217 %218 
                                                      OpStore %165 %219 
                                       f32_4 %224 = OpLoad %165 
                               Output f32_4* %226 = OpAccessChain %223 %20 
                                                      OpStore %226 %224 
                                Private f32* %230 = OpAccessChain %165 %229 
                                         f32 %231 = OpLoad %230 
                                                      OpStore vs_TEXCOORD5 %231 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                              Uniform f32_4* %238 = OpAccessChain %19 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %241 = OpFMul %236 %240 
                              Uniform f32_4* %242 = OpAccessChain %19 %237 
                                       f32_4 %243 = OpLoad %242 
                                       f32_2 %244 = OpVectorShuffle %243 %243 2 3 
                                       f32_2 %245 = OpFAdd %241 %244 
                                                      OpStore vs_TEXCOORD0 %245 
                                Private f32* %246 = OpAccessChain %77 %21 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpExtInst %1 8 %247 
                                Private f32* %249 = OpAccessChain %165 %30 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %165 %30 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFNegate %251 
                                         f32 %253 = OpFMul %252 %147 
                                Private f32* %254 = OpAccessChain %77 %30 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFAdd %253 %255 
                                Private f32* %257 = OpAccessChain %165 %21 
                                                      OpStore %257 %256 
                                       f32_4 %258 = OpLoad %165 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %262 = OpFMul %259 %261 
                                       f32_2 %265 = OpFAdd %262 %264 
                                       f32_4 %266 = OpLoad %77 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 2 3 
                                                      OpStore %77 %267 
                                       f32_4 %269 = OpLoad %77 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                       f32_4 %271 = OpLoad %77 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                         f32 %273 = OpDot %270 %272 
                                                      OpStore %268 %273 
                                         f32 %274 = OpLoad %268 
                                       f32_2 %275 = OpCompositeConstruct %274 %274 
                                       f32_2 %276 = OpFNegate %275 
                                       f32_2 %280 = OpFMul %276 %279 
                                       f32_2 %282 = OpFAdd %280 %281 
                                       f32_4 %283 = OpLoad %165 
                                       f32_4 %284 = OpVectorShuffle %283 %282 0 1 4 5 
                                                      OpStore %165 %284 
                                Private f32* %285 = OpAccessChain %165 %229 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpExtInst %1 31 %286 
                                                      OpStore %268 %287 
                                       f32_4 %288 = OpLoad %77 
                                       f32_2 %289 = OpVectorShuffle %288 %288 0 1 
                                         f32 %290 = OpLoad %268 
                                       f32_2 %291 = OpCompositeConstruct %290 %290 
                                       f32_2 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %165 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 2 3 
                                                      OpStore %165 %294 
                                       f32_4 %295 = OpLoad %165 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 3 
                                       f32_3 %297 = OpExtInst %1 40 %296 %111 
                                       f32_4 %298 = OpLoad %77 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %77 %299 
                                       f32_4 %300 = OpLoad %77 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %303 = OpExtInst %1 37 %301 %302 
                                       f32_4 %304 = OpLoad %77 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %77 %305 
                                Private f32* %306 = OpAccessChain %77 %30 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFNegate %307 
                                Private f32* %309 = OpAccessChain %77 %155 
                                                      OpStore %309 %308 
                                Private f32* %310 = OpAccessChain %9 %30 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                Private f32* %313 = OpAccessChain %9 %155 
                                                      OpStore %313 %312 
                                Uniform f32* %319 = OpAccessChain %19 %318 
                                         f32 %320 = OpLoad %319 
                                       f32_4 %321 = OpCompositeConstruct %320 %320 %320 %320 
                                      bool_4 %323 = OpFOrdNotEqual %317 %321 
                                        bool %324 = OpAny %323 
                                                      OpStore %316 %324 
                                        bool %325 = OpLoad %316 
                                                      OpSelectionMerge %329 None 
                                                      OpBranchConditional %325 %328 %332 
                                             %328 = OpLabel 
                                       f32_4 %330 = OpLoad %77 
                                       f32_3 %331 = OpVectorShuffle %330 %330 3 2 1 
                                                      OpStore %327 %331 
                                                      OpBranch %329 
                                             %332 = OpLabel 
                                       f32_4 %333 = OpLoad %9 
                                       f32_3 %334 = OpVectorShuffle %333 %333 3 1 2 
                                                      OpStore %327 %334 
                                                      OpBranch %329 
                                             %329 = OpLabel 
                                       f32_3 %335 = OpLoad %327 
                                       f32_4 %336 = OpLoad %9 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
                                                      OpStore %9 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                              Uniform f32_4* %340 = OpAccessChain %19 %180 %20 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                         f32 %343 = OpDot %339 %342 
                                Private f32* %344 = OpAccessChain %77 %30 
                                                      OpStore %344 %343 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                              Uniform f32_4* %347 = OpAccessChain %19 %180 %168 
                                       f32_4 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                         f32 %350 = OpDot %346 %349 
                                Private f32* %351 = OpAccessChain %77 %21 
                                                      OpStore %351 %350 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                              Uniform f32_4* %354 = OpAccessChain %19 %180 %180 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                         f32 %357 = OpDot %353 %356 
                                Private f32* %358 = OpAccessChain %77 %229 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %77 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_4 %361 = OpLoad %77 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                         f32 %363 = OpDot %360 %362 
                                Private f32* %364 = OpAccessChain %9 %30 
                                                      OpStore %364 %363 
                                Private f32* %365 = OpAccessChain %9 %30 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpExtInst %1 32 %366 
                                Private f32* %368 = OpAccessChain %9 %30 
                                                      OpStore %368 %367 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 0 0 
                                       f32_4 %373 = OpLoad %77 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                                      OpStore vs_TEXCOORD1 %375 
                              Uniform f32_4* %377 = OpAccessChain %19 %168 %189 
                                       f32_4 %378 = OpLoad %377 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_4 %380 = OpLoad %159 
                                       f32_3 %381 = OpVectorShuffle %380 %380 3 3 3 
                                       f32_3 %382 = OpFMul %379 %381 
                                       f32_4 %383 = OpLoad %115 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_3 %385 = OpFAdd %382 %384 
                                                      OpStore vs_TEXCOORD2 %385 
                              Uniform f32_4* %386 = OpAccessChain %19 %168 %189 
                                       f32_4 %387 = OpLoad %386 
                                       f32_4 %388 = OpLoad %159 
                                       f32_4 %389 = OpVectorShuffle %388 %388 3 3 3 3 
                                       f32_4 %390 = OpFMul %387 %389 
                                       f32_4 %391 = OpLoad %115 
                                       f32_4 %392 = OpFAdd %390 %391 
                                                      OpStore %9 %392 
                                       f32_4 %393 = OpLoad %9 
                                       f32_3 %394 = OpVectorShuffle %393 %393 1 1 1 
                              Uniform f32_4* %396 = OpAccessChain %19 %395 %168 
                                       f32_4 %397 = OpLoad %396 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                       f32_3 %399 = OpFMul %394 %398 
                                       f32_4 %400 = OpLoad %77 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %77 %401 
                              Uniform f32_4* %402 = OpAccessChain %19 %395 %20 
                                       f32_4 %403 = OpLoad %402 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_4 %405 = OpLoad %9 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 0 0 
                                       f32_3 %407 = OpFMul %404 %406 
                                       f32_4 %408 = OpLoad %77 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                       f32_3 %410 = OpFAdd %407 %409 
                                       f32_4 %411 = OpLoad %77 
                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
                                                      OpStore %77 %412 
                              Uniform f32_4* %413 = OpAccessChain %19 %395 %180 
                                       f32_4 %414 = OpLoad %413 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_4 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 2 2 2 
                                       f32_3 %418 = OpFMul %415 %417 
                                       f32_4 %419 = OpLoad %77 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
                                       f32_3 %421 = OpFAdd %418 %420 
                                       f32_4 %422 = OpLoad %9 
                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 6 3 
                                                      OpStore %9 %423 
                              Uniform f32_4* %425 = OpAccessChain %19 %395 %189 
                                       f32_4 %426 = OpLoad %425 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_4 %428 = OpLoad %9 
                                       f32_3 %429 = OpVectorShuffle %428 %428 3 3 3 
                                       f32_3 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %9 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpFAdd %430 %432 
                                                      OpStore vs_TEXCOORD3 %433 
                                                      OpStore vs_TEXCOORD4 %317 
                                 Output f32* %435 = OpAccessChain %223 %20 %21 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFNegate %436 
                                 Output f32* %438 = OpAccessChain %223 %20 %21 
                                                      OpStore %438 %437 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 485
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %151 %292 %449 %475 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %77 DescriptorSet 77 
                                                      OpDecorate %77 Binding 77 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %286 DescriptorSet 286 
                                                      OpDecorate %286 Binding 286 
                                                      OpDecorate %288 DescriptorSet 288 
                                                      OpDecorate %288 Binding 288 
                                                      OpDecorate vs_TEXCOORD0 Location 292 
                                                      OpDecorate vs_TEXCOORD5 Location 449 
                                                      OpDecorate %475 Location 475 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %14 %14 %17 %6 %6 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 5 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %14 
                                          i32 %29 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                                          i32 %48 = OpConstant 3 
                                              %53 = OpTypePointer Private %6 
                                 Private f32* %54 = OpVariable Private 
                                              %58 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                              %59 = OpTypePointer UniformConstant %58 
       UniformConstant read_only TextureCube* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeSampler 
                                              %63 = OpTypePointer UniformConstant %62 
                     UniformConstant sampler* %64 = OpVariable UniformConstant 
                                              %66 = OpTypeSampledImage %58 
                                          u32 %70 = OpConstant 3 
                                          u32 %72 = OpConstant 0 
                                 Private f32* %74 = OpVariable Private 
                                              %75 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %76 = OpTypePointer UniformConstant %75 
         UniformConstant read_only Texture2D* %77 = OpVariable UniformConstant 
                     UniformConstant sampler* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampledImage %75 
                                              %84 = OpTypeVector %6 2 
                                          i32 %95 = OpConstant 4 
                              Private f32_3* %100 = OpVariable Private 
                                             %103 = OpTypePointer Uniform %7 
                              Private f32_3* %116 = OpVariable Private 
                              Private f32_3* %128 = OpVariable Private 
                                         f32 %143 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %157 = OpVariable Private 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         f32 %167 = OpConstant 3.674022E-40 
                                Private f32* %169 = OpVariable Private 
                                Private f32* %187 = OpVariable Private 
                                         i32 %188 = OpConstant 6 
                                             %189 = OpTypePointer Uniform %6 
                                Private f32* %194 = OpVariable Private 
                                         f32 %199 = OpConstant 3.674022E-40 
                              Private f32_3* %201 = OpVariable Private 
                                Private f32* %206 = OpVariable Private 
                                         f32 %221 = OpConstant 3.674022E-40 
                                         f32 %225 = OpConstant 3.674022E-40 
                                         f32 %269 = OpConstant 3.674022E-40 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %282 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %286 = OpVariable UniformConstant 
                    UniformConstant sampler* %288 = OpVariable UniformConstant 
                                             %291 = OpTypePointer Input %84 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %297 = OpConstant 8 
                                         f32 %302 = OpConstant 3.674022E-40 
                                       f32_3 %303 = OpConstantComposite %302 %302 %302 
                                         i32 %310 = OpConstant 7 
                                         f32 %324 = OpConstant 3.674022E-40 
                                       f32_3 %325 = OpConstantComposite %324 %324 %324 
                                             %330 = OpTypeBool 
                                             %331 = OpTypePointer Private %330 
                               Private bool* %332 = OpVariable Private 
                                         f32 %356 = OpConstant 3.674022E-40 
                              Private f32_3* %367 = OpVariable Private 
                                       f32_3 %370 = OpConstantComposite %167 %167 %167 
                                         f32 %436 = OpConstant 3.674022E-40 
                                             %448 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %451 = OpConstant 1 
                                         u32 %459 = OpConstant 2 
                                             %474 = OpTypePointer Output %14 
                               Output f32_4* %475 = OpVariable Output 
                                             %482 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_3 %33 = OpLoad vs_TEXCOORD2 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpFMul %32 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %20 %22 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpLoad vs_TEXCOORD2 
                                        f32_3 %43 = OpVectorShuffle %42 %42 2 2 2 
                                        f32_3 %44 = OpFMul %41 %43 
                                        f32_3 %45 = OpLoad %9 
                                        f32_3 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_3 %47 = OpLoad %9 
                               Uniform f32_4* %49 = OpAccessChain %20 %22 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
                                        f32_3 %52 = OpFAdd %47 %51 
                                                      OpStore %9 %52 
                                        f32_3 %55 = OpLoad %9 
                                        f32_3 %56 = OpLoad %9 
                                          f32 %57 = OpDot %55 %56 
                                                      OpStore %54 %57 
                        read_only TextureCube %61 = OpLoad %60 
                                      sampler %65 = OpLoad %64 
                 read_only TextureCubeSampled %67 = OpSampledImage %61 %65 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpImageSampleImplicitLod %67 %68 
                                          f32 %71 = OpCompositeExtract %69 3 
                                 Private f32* %73 = OpAccessChain %9 %72 
                                                      OpStore %73 %71 
                          read_only Texture2D %78 = OpLoad %77 
                                      sampler %80 = OpLoad %79 
                   read_only Texture2DSampled %82 = OpSampledImage %78 %80 
                                          f32 %83 = OpLoad %54 
                                        f32_2 %85 = OpCompositeConstruct %83 %83 
                                        f32_4 %86 = OpImageSampleImplicitLod %82 %85 
                                          f32 %87 = OpCompositeExtract %86 0 
                                                      OpStore %74 %87 
                                 Private f32* %88 = OpAccessChain %9 %72 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpLoad %74 
                                          f32 %91 = OpFMul %89 %90 
                                 Private f32* %92 = OpAccessChain %9 %72 
                                                      OpStore %92 %91 
                                        f32_3 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 0 0 
                               Uniform f32_4* %96 = OpAccessChain %20 %95 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFMul %94 %98 
                                                      OpStore %9 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD2 
                                       f32_3 %102 = OpFNegate %101 
                              Uniform f32_3* %104 = OpAccessChain %20 %29 
                                       f32_3 %105 = OpLoad %104 
                                       f32_3 %106 = OpFAdd %102 %105 
                                                      OpStore %100 %106 
                                       f32_3 %107 = OpLoad %100 
                                       f32_3 %108 = OpLoad %100 
                                         f32 %109 = OpDot %107 %108 
                                                      OpStore %54 %109 
                                         f32 %110 = OpLoad %54 
                                         f32 %111 = OpExtInst %1 32 %110 
                                                      OpStore %54 %111 
                                         f32 %112 = OpLoad %54 
                                       f32_3 %113 = OpCompositeConstruct %112 %112 %112 
                                       f32_3 %114 = OpLoad %100 
                                       f32_3 %115 = OpFMul %113 %114 
                                                      OpStore %100 %115 
                                       f32_3 %117 = OpLoad vs_TEXCOORD2 
                                       f32_3 %118 = OpFNegate %117 
                              Uniform f32_4* %119 = OpAccessChain %20 %38 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                                      OpStore %116 %122 
                                       f32_3 %123 = OpLoad %116 
                                       f32_3 %124 = OpLoad %116 
                                         f32 %125 = OpDot %123 %124 
                                                      OpStore %54 %125 
                                         f32 %126 = OpLoad %54 
                                         f32 %127 = OpExtInst %1 32 %126 
                                                      OpStore %54 %127 
                                       f32_3 %129 = OpLoad %116 
                                         f32 %130 = OpLoad %54 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_3 %133 = OpLoad %100 
                                       f32_3 %134 = OpFAdd %132 %133 
                                                      OpStore %128 %134 
                                         f32 %135 = OpLoad %54 
                                       f32_3 %136 = OpCompositeConstruct %135 %135 %135 
                                       f32_3 %137 = OpLoad %116 
                                       f32_3 %138 = OpFMul %136 %137 
                                                      OpStore %116 %138 
                                       f32_3 %139 = OpLoad %128 
                                       f32_3 %140 = OpLoad %128 
                                         f32 %141 = OpDot %139 %140 
                                                      OpStore %54 %141 
                                         f32 %142 = OpLoad %54 
                                         f32 %144 = OpExtInst %1 40 %142 %143 
                                                      OpStore %54 %144 
                                         f32 %145 = OpLoad %54 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %54 %146 
                                         f32 %147 = OpLoad %54 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_3 %149 = OpLoad %128 
                                       f32_3 %150 = OpFMul %148 %149 
                                                      OpStore %128 %150 
                                       f32_3 %152 = OpLoad vs_TEXCOORD1 
                                       f32_3 %153 = OpLoad vs_TEXCOORD1 
                                         f32 %154 = OpDot %152 %153 
                                                      OpStore %54 %154 
                                         f32 %155 = OpLoad %54 
                                         f32 %156 = OpExtInst %1 32 %155 
                                                      OpStore %54 %156 
                                         f32 %158 = OpLoad %54 
                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
                                       f32_3 %160 = OpLoad vs_TEXCOORD1 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %157 %161 
                                       f32_3 %162 = OpLoad %157 
                                       f32_3 %163 = OpLoad %128 
                                         f32 %164 = OpDot %162 %163 
                                                      OpStore %54 %164 
                                         f32 %165 = OpLoad %54 
                                         f32 %168 = OpExtInst %1 43 %165 %166 %167 
                                                      OpStore %54 %168 
                                       f32_3 %170 = OpLoad %116 
                                       f32_3 %171 = OpLoad %128 
                                         f32 %172 = OpDot %170 %171 
                                                      OpStore %169 %172 
                                         f32 %173 = OpLoad %169 
                                         f32 %174 = OpExtInst %1 43 %173 %166 %167 
                                                      OpStore %169 %174 
                                       f32_3 %175 = OpLoad %157 
                                       f32_3 %176 = OpLoad %116 
                                         f32 %177 = OpDot %175 %176 
                                Private f32* %178 = OpAccessChain %116 %72 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %116 %72 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 43 %180 %166 %167 
                                Private f32* %182 = OpAccessChain %116 %72 
                                                      OpStore %182 %181 
                                       f32_3 %183 = OpLoad %157 
                                       f32_3 %184 = OpLoad %100 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %100 %72 
                                                      OpStore %186 %185 
                                Uniform f32* %190 = OpAccessChain %20 %188 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFNegate %191 
                                         f32 %193 = OpFAdd %192 %167 
                                                      OpStore %187 %193 
                                         f32 %195 = OpLoad %187 
                                         f32 %196 = OpLoad %187 
                                         f32 %197 = OpFMul %195 %196 
                                                      OpStore %194 %197 
                                         f32 %198 = OpLoad %194 
                                         f32 %200 = OpExtInst %1 40 %198 %199 
                                                      OpStore %194 %200 
                                         f32 %202 = OpLoad %194 
                                         f32 %203 = OpLoad %194 
                                         f32 %204 = OpFMul %202 %203 
                                Private f32* %205 = OpAccessChain %201 %72 
                                                      OpStore %205 %204 
                                         f32 %207 = OpLoad %54 
                                Private f32* %208 = OpAccessChain %201 %72 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFMul %207 %209 
                                         f32 %211 = OpLoad %54 
                                         f32 %212 = OpFNegate %211 
                                         f32 %213 = OpFAdd %210 %212 
                                                      OpStore %206 %213 
                                         f32 %214 = OpLoad %206 
                                         f32 %215 = OpLoad %54 
                                         f32 %216 = OpFMul %214 %215 
                                         f32 %217 = OpFAdd %216 %167 
                                                      OpStore %54 %217 
                                         f32 %218 = OpLoad %54 
                                         f32 %219 = OpLoad %54 
                                         f32 %220 = OpFMul %218 %219 
                                         f32 %222 = OpFAdd %220 %221 
                                                      OpStore %54 %222 
                                Private f32* %223 = OpAccessChain %201 %72 
                                         f32 %224 = OpLoad %223 
                                         f32 %226 = OpFMul %224 %225 
                                Private f32* %227 = OpAccessChain %201 %72 
                                                      OpStore %227 %226 
                                Private f32* %228 = OpAccessChain %201 %72 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpLoad %54 
                                         f32 %231 = OpFDiv %229 %230 
                                                      OpStore %54 %231 
                                         f32 %232 = OpLoad %194 
                                         f32 %233 = OpFNegate %232 
                                         f32 %234 = OpFAdd %233 %167 
                                Private f32* %235 = OpAccessChain %201 %72 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %100 %72 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 4 %237 
                                Private f32* %239 = OpAccessChain %201 %72 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFMul %238 %240 
                                         f32 %242 = OpLoad %194 
                                         f32 %243 = OpFAdd %241 %242 
                                                      OpStore %206 %243 
                                Private f32* %244 = OpAccessChain %116 %72 
                                         f32 %245 = OpLoad %244 
                                Private f32* %246 = OpAccessChain %201 %72 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFMul %245 %247 
                                         f32 %249 = OpLoad %194 
                                         f32 %250 = OpFAdd %248 %249 
                                                      OpStore %194 %250 
                                         f32 %251 = OpLoad %194 
                                Private f32* %252 = OpAccessChain %100 %72 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpExtInst %1 4 %253 
                                         f32 %255 = OpFMul %251 %254 
                                                      OpStore %194 %255 
                                Private f32* %256 = OpAccessChain %100 %72 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpExtInst %1 4 %257 
                                         f32 %259 = OpFNegate %258 
                                         f32 %260 = OpFAdd %259 %167 
                                Private f32* %261 = OpAccessChain %100 %72 
                                                      OpStore %261 %260 
                                Private f32* %262 = OpAccessChain %116 %72 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpLoad %206 
                                         f32 %265 = OpFMul %263 %264 
                                         f32 %266 = OpLoad %194 
                                         f32 %267 = OpFAdd %265 %266 
                                                      OpStore %194 %267 
                                         f32 %268 = OpLoad %194 
                                         f32 %270 = OpFAdd %268 %269 
                                                      OpStore %194 %270 
                                         f32 %272 = OpLoad %194 
                                         f32 %273 = OpFDiv %271 %272 
                                                      OpStore %194 %273 
                                         f32 %274 = OpLoad %54 
                                         f32 %275 = OpLoad %194 
                                         f32 %276 = OpFMul %274 %275 
                                                      OpStore %54 %276 
                                Private f32* %277 = OpAccessChain %116 %72 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpLoad %54 
                                         f32 %280 = OpFMul %278 %279 
                                                      OpStore %54 %280 
                                         f32 %281 = OpLoad %54 
                                         f32 %283 = OpFMul %281 %282 
                                                      OpStore %54 %283 
                                         f32 %284 = OpLoad %54 
                                         f32 %285 = OpExtInst %1 40 %284 %166 
                                                      OpStore %54 %285 
                         read_only Texture2D %287 = OpLoad %286 
                                     sampler %289 = OpLoad %288 
                  read_only Texture2DSampled %290 = OpSampledImage %287 %289 
                                       f32_2 %293 = OpLoad vs_TEXCOORD0 
                                       f32_4 %294 = OpImageSampleImplicitLod %290 %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                                      OpStore %201 %295 
                                       f32_3 %296 = OpLoad %201 
                              Uniform f32_4* %298 = OpAccessChain %20 %297 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFMul %296 %300 
                                       f32_3 %304 = OpFAdd %301 %303 
                                                      OpStore %128 %304 
                                       f32_3 %305 = OpLoad %201 
                              Uniform f32_4* %306 = OpAccessChain %20 %297 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFMul %305 %308 
                                                      OpStore %201 %309 
                                Uniform f32* %311 = OpAccessChain %20 %310 
                                         f32 %312 = OpLoad %311 
                                Uniform f32* %313 = OpAccessChain %20 %310 
                                         f32 %314 = OpLoad %313 
                                Uniform f32* %315 = OpAccessChain %20 %310 
                                         f32 %316 = OpLoad %315 
                                       f32_3 %317 = OpCompositeConstruct %312 %314 %316 
                                         f32 %318 = OpCompositeExtract %317 0 
                                         f32 %319 = OpCompositeExtract %317 1 
                                         f32 %320 = OpCompositeExtract %317 2 
                                       f32_3 %321 = OpCompositeConstruct %318 %319 %320 
                                       f32_3 %322 = OpLoad %128 
                                       f32_3 %323 = OpFMul %321 %322 
                                       f32_3 %326 = OpFAdd %323 %325 
                                                      OpStore %128 %326 
                                       f32_3 %327 = OpLoad %128 
                                       f32_3 %328 = OpLoad %128 
                                         f32 %329 = OpDot %327 %328 
                                                      OpStore %194 %329 
                                         f32 %333 = OpLoad %194 
                                        bool %334 = OpFOrdNotEqual %333 %166 
                                                      OpStore %332 %334 
                                        bool %335 = OpLoad %332 
                                         f32 %336 = OpSelect %335 %167 %166 
                                                      OpStore %194 %336 
                                         f32 %337 = OpLoad %54 
                                         f32 %338 = OpLoad %194 
                                         f32 %339 = OpFMul %337 %338 
                                                      OpStore %54 %339 
                                       f32_3 %340 = OpLoad %9 
                                         f32 %341 = OpLoad %54 
                                       f32_3 %342 = OpCompositeConstruct %341 %341 %341 
                                       f32_3 %343 = OpFMul %340 %342 
                                                      OpStore %157 %343 
                                         f32 %344 = OpLoad %169 
                                         f32 %345 = OpFNegate %344 
                                         f32 %346 = OpFAdd %345 %167 
                                                      OpStore %54 %346 
                                         f32 %347 = OpLoad %169 
                                         f32 %348 = OpLoad %169 
                                         f32 %349 = OpFMul %347 %348 
                                                      OpStore %194 %349 
                                         f32 %350 = OpLoad %194 
                                       f32_2 %351 = OpCompositeConstruct %350 %350 
                                         f32 %352 = OpLoad %187 
                                       f32_2 %353 = OpCompositeConstruct %352 %352 
                                         f32 %354 = OpDot %351 %353 
                                                      OpStore %187 %354 
                                         f32 %355 = OpLoad %187 
                                         f32 %357 = OpFAdd %355 %356 
                                                      OpStore %187 %357 
                                         f32 %358 = OpLoad %54 
                                         f32 %359 = OpLoad %54 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %194 %360 
                                         f32 %361 = OpLoad %194 
                                         f32 %362 = OpLoad %194 
                                         f32 %363 = OpFMul %361 %362 
                                                      OpStore %194 %363 
                                         f32 %364 = OpLoad %54 
                                         f32 %365 = OpLoad %194 
                                         f32 %366 = OpFMul %364 %365 
                                                      OpStore %54 %366 
                                       f32_3 %368 = OpLoad %128 
                                       f32_3 %369 = OpFNegate %368 
                                       f32_3 %371 = OpFAdd %369 %370 
                                                      OpStore %367 %371 
                                       f32_3 %372 = OpLoad %367 
                                         f32 %373 = OpLoad %54 
                                       f32_3 %374 = OpCompositeConstruct %373 %373 %373 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %376 = OpLoad %128 
                                       f32_3 %377 = OpFAdd %375 %376 
                                                      OpStore %128 %377 
                                       f32_3 %378 = OpLoad %128 
                                       f32_3 %379 = OpLoad %157 
                                       f32_3 %380 = OpFMul %378 %379 
                                                      OpStore %128 %380 
                                Private f32* %381 = OpAccessChain %100 %72 
                                         f32 %382 = OpLoad %381 
                                Private f32* %383 = OpAccessChain %100 %72 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFMul %382 %384 
                                                      OpStore %54 %385 
                                         f32 %386 = OpLoad %54 
                                         f32 %387 = OpLoad %54 
                                         f32 %388 = OpFMul %386 %387 
                                                      OpStore %54 %388 
                                Private f32* %389 = OpAccessChain %100 %72 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpLoad %54 
                                         f32 %392 = OpFMul %390 %391 
                                                      OpStore %54 %392 
                                         f32 %393 = OpLoad %187 
                                         f32 %394 = OpLoad %54 
                                         f32 %395 = OpFMul %393 %394 
                                         f32 %396 = OpFAdd %395 %167 
                                                      OpStore %54 %396 
                                Private f32* %397 = OpAccessChain %116 %72 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFNegate %398 
                                         f32 %400 = OpFAdd %399 %167 
                                Private f32* %401 = OpAccessChain %100 %72 
                                                      OpStore %401 %400 
                                Private f32* %402 = OpAccessChain %100 %72 
                                         f32 %403 = OpLoad %402 
                                Private f32* %404 = OpAccessChain %100 %72 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %403 %405 
                                                      OpStore %194 %406 
                                         f32 %407 = OpLoad %194 
                                         f32 %408 = OpLoad %194 
                                         f32 %409 = OpFMul %407 %408 
                                                      OpStore %194 %409 
                                Private f32* %410 = OpAccessChain %100 %72 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpLoad %194 
                                         f32 %413 = OpFMul %411 %412 
                                Private f32* %414 = OpAccessChain %100 %72 
                                                      OpStore %414 %413 
                                         f32 %415 = OpLoad %187 
                                Private f32* %416 = OpAccessChain %100 %72 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFMul %415 %417 
                                         f32 %419 = OpFAdd %418 %167 
                                Private f32* %420 = OpAccessChain %100 %72 
                                                      OpStore %420 %419 
                                         f32 %421 = OpLoad %54 
                                Private f32* %422 = OpAccessChain %100 %72 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFMul %421 %423 
                                                      OpStore %54 %424 
                                Private f32* %425 = OpAccessChain %116 %72 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpLoad %54 
                                         f32 %428 = OpFMul %426 %427 
                                                      OpStore %54 %428 
                                         f32 %429 = OpLoad %54 
                                       f32_3 %430 = OpCompositeConstruct %429 %429 %429 
                                       f32_3 %431 = OpLoad %9 
                                       f32_3 %432 = OpFMul %430 %431 
                                                      OpStore %9 %432 
                                Uniform f32* %433 = OpAccessChain %20 %310 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFNegate %434 
                                         f32 %437 = OpFMul %435 %436 
                                         f32 %438 = OpFAdd %437 %436 
                                                      OpStore %54 %438 
                                         f32 %439 = OpLoad %54 
                                       f32_3 %440 = OpCompositeConstruct %439 %439 %439 
                                       f32_3 %441 = OpLoad %201 
                                       f32_3 %442 = OpFMul %440 %441 
                                                      OpStore %100 %442 
                                       f32_3 %443 = OpLoad %100 
                                       f32_3 %444 = OpLoad %9 
                                       f32_3 %445 = OpFMul %443 %444 
                                       f32_3 %446 = OpLoad %128 
                                       f32_3 %447 = OpFAdd %445 %446 
                                                      OpStore %9 %447 
                                         f32 %450 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %452 = OpAccessChain %20 %23 %451 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFDiv %450 %453 
                                                      OpStore %54 %454 
                                         f32 %455 = OpLoad %54 
                                         f32 %456 = OpFNegate %455 
                                         f32 %457 = OpFAdd %456 %167 
                                                      OpStore %54 %457 
                                         f32 %458 = OpLoad %54 
                                Uniform f32* %460 = OpAccessChain %20 %23 %459 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpFMul %458 %461 
                                                      OpStore %54 %462 
                                         f32 %463 = OpLoad %54 
                                         f32 %464 = OpExtInst %1 40 %463 %166 
                                                      OpStore %54 %464 
                                         f32 %465 = OpLoad %54 
                                Uniform f32* %466 = OpAccessChain %20 %48 %459 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFMul %465 %467 
                                Uniform f32* %469 = OpAccessChain %20 %48 %70 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpFAdd %468 %470 
                                                      OpStore %54 %471 
                                         f32 %472 = OpLoad %54 
                                         f32 %473 = OpExtInst %1 43 %472 %166 %167 
                                                      OpStore %54 %473 
                                       f32_3 %476 = OpLoad %9 
                                         f32 %477 = OpLoad %54 
                                       f32_3 %478 = OpCompositeConstruct %477 %477 %477 
                                       f32_3 %479 = OpFMul %476 %478 
                                       f32_4 %480 = OpLoad %475 
                                       f32_4 %481 = OpVectorShuffle %480 %479 4 5 6 3 
                                                      OpStore %475 %481 
                                 Output f32* %483 = OpAccessChain %475 %70 
                                                      OpStore %483 %167 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(2) uniform  sampler2D _posTex;
UNITY_LOCATION(3) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5 = float(_numOfFrames);
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat5;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat0.x = u_xlat5 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat4;
    gl_Position = u_xlat3;
    vs_TEXCOORD5 = u_xlat3.z;
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat11.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat11.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat11.xy;
    u_xlat11.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.zz + u_xlat11.xy;
    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat3.ww + u_xlat11.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-u_xlat11.xx) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat11.x = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * u_xlat11.xx;
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat12;
vec2 u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13.x = u_xlat7 * u_xlat7;
    u_xlat13.x = max(u_xlat13.x, 0.00200000009);
    u_xlat19 = u_xlat13.x * u_xlat13.x;
    u_xlat20 = u_xlat18 * u_xlat19 + (-u_xlat18);
    u_xlat18 = u_xlat20 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat19 = u_xlat19 * 0.318309873;
    u_xlat18 = u_xlat19 / u_xlat18;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat12 = (-u_xlat13.x) + 1.0;
    u_xlat19 = abs(u_xlat0.x) * u_xlat12 + u_xlat13.x;
    u_xlat12 = u_xlat6 * u_xlat12 + u_xlat13.x;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat19 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat6 * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat13.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat13.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat13.xy;
    u_xlat13.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat13.xy;
    u_xlat13.xy = u_xlat13.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4 = texture(_LightTexture0, u_xlat13.xy);
    u_xlat4.xyz = u_xlat4.www * _LightColor0.xyz;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = dot(vec2(u_xlat18), vec2(u_xlat7));
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
    u_xlat12 = u_xlat0.x * u_xlat0.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat18 * u_xlat0.x + 1.0;
    u_xlat12 = (-u_xlat6) + 1.0;
    u_xlat19 = u_xlat12 * u_xlat12;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat12 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 434
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %68 %159 %223 %228 %240 %276 %285 %286 %422 %428 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %68 Location 68 
                                                      OpDecorate %80 DescriptorSet 80 
                                                      OpDecorate %80 Binding 80 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %95 DescriptorSet 95 
                                                      OpDecorate %95 Binding 95 
                                                      OpDecorate %159 Location 159 
                                                      OpMemberDecorate %221 0 BuiltIn 221 
                                                      OpMemberDecorate %221 1 BuiltIn 221 
                                                      OpMemberDecorate %221 2 BuiltIn 221 
                                                      OpDecorate %221 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 228 
                                                      OpDecorate vs_TEXCOORD2 Location 240 
                                                      OpDecorate vs_TEXCOORD3 Location 276 
                                                      OpDecorate vs_TEXCOORD0 Location 285 
                                                      OpDecorate %286 Location 286 
                                                      OpDecorate vs_TEXCOORD1 Location 422 
                                                      OpDecorate vs_TEXCOORD4 Location 428 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeArray %7 %11 
                                              %16 = OpTypeInt 32 1 
                                              %17 = OpTypeStruct %7 %12 %13 %14 %15 %6 %6 %6 %6 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %19 = OpVariable Uniform 
                                          i32 %20 = OpConstant 0 
                                          u32 %21 = OpConstant 1 
                                              %22 = OpTypePointer Uniform %6 
                                          i32 %26 = OpConstant 8 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %37 = OpVariable Private 
                                          i32 %38 = OpConstant 9 
                                              %39 = OpTypePointer Uniform %16 
                                          f32 %57 = OpConstant 3.674022E-40 
                                              %67 = OpTypePointer Input %7 
                                 Input f32_4* %68 = OpVariable Input 
                                              %69 = OpTypePointer Input %6 
                               Private f32_4* %77 = OpVariable Private 
                                              %78 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %79 = OpTypePointer UniformConstant %78 
         UniformConstant read_only Texture2D* %80 = OpVariable UniformConstant 
                                              %82 = OpTypeSampler 
                                              %83 = OpTypePointer UniformConstant %82 
                     UniformConstant sampler* %84 = OpVariable UniformConstant 
                                              %86 = OpTypeSampledImage %78 
                                              %88 = OpTypeVector %6 2 
                                          f32 %91 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %93 = OpVariable UniformConstant 
                     UniformConstant sampler* %95 = OpVariable UniformConstant 
                                             %101 = OpTypeVector %6 3 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_3 %108 = OpConstantComposite %107 %107 %107 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_3 %111 = OpConstantComposite %110 %110 %110 
                              Private f32_4* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 7 
                                         i32 %120 = OpConstant 6 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_2 %148 = OpConstantComposite %146 %147 
                                         u32 %155 = OpConstant 3 
                                Input f32_4* %159 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                              Private f32_4* %193 = OpVariable Private 
                                             %220 = OpTypeArray %6 %21 
                                             %221 = OpTypeStruct %7 %6 %220 
                                             %222 = OpTypePointer Output %221 
        Output struct {f32_4; f32; f32[1];}* %223 = OpVariable Output 
                                             %225 = OpTypePointer Output %7 
                                             %227 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %229 = OpConstant 2 
                                             %239 = OpTypePointer Output %101 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %250 = OpTypePointer Private %88 
                              Private f32_2* %251 = OpVariable Private 
                                         i32 %254 = OpConstant 4 
                                             %275 = OpTypePointer Output %88 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %286 = OpVariable Input 
                                         i32 %289 = OpConstant 10 
                                         f32 %312 = OpConstant 3.674022E-40 
                                       f32_2 %313 = OpConstantComposite %312 %312 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_2 %316 = OpConstantComposite %315 %315 
                                         f32 %329 = OpConstant 3.674022E-40 
                                         f32 %330 = OpConstant 3.674022E-40 
                                       f32_2 %331 = OpConstantComposite %329 %330 
                                       f32_2 %333 = OpConstantComposite %57 %57 
                                       f32_3 %355 = OpConstantComposite %57 %57 %57 
                                             %367 = OpTypeBool 
                                             %368 = OpTypePointer Private %367 
                               Private bool* %369 = OpVariable Private 
                                       f32_4 %370 = OpConstantComposite %91 %91 %91 %91 
                                         i32 %371 = OpConstant 5 
                                             %375 = OpTypeVector %367 4 
                                             %379 = OpTypePointer Function %101 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %380 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %19 %20 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpFNegate %24 
                                 Uniform f32* %27 = OpAccessChain %19 %26 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFMul %25 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                 Private f32* %33 = OpAccessChain %9 %30 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 10 %34 
                                 Private f32* %36 = OpAccessChain %9 %30 
                                                      OpStore %36 %35 
                                 Uniform i32* %40 = OpAccessChain %19 %38 
                                          i32 %41 = OpLoad %40 
                                          f32 %42 = OpConvertSToF %41 
                                                      OpStore %37 %42 
                                          f32 %43 = OpLoad %37 
                                 Private f32* %44 = OpAccessChain %9 %30 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Private f32* %47 = OpAccessChain %9 %30 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %30 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpExtInst %1 9 %49 
                                 Private f32* %51 = OpAccessChain %9 %30 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %9 %30 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %37 
                                          f32 %55 = OpFDiv %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %30 
                                                      OpStore %56 %55 
                                          f32 %58 = OpLoad %37 
                                          f32 %59 = OpFDiv %57 %58 
                                                      OpStore %37 %59 
                                          f32 %60 = OpLoad %37 
                                 Private f32* %61 = OpAccessChain %9 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %30 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %30 
                                          f32 %66 = OpLoad %65 
                                   Input f32* %70 = OpAccessChain %68 %21 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %66 %71 
                                 Private f32* %73 = OpAccessChain %9 %21 
                                                      OpStore %73 %72 
                                   Input f32* %74 = OpAccessChain %68 %30 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %30 
                                                      OpStore %76 %75 
                          read_only Texture2D %81 = OpLoad %80 
                                      sampler %85 = OpLoad %84 
                   read_only Texture2DSampled %87 = OpSampledImage %81 %85 
                                        f32_4 %89 = OpLoad %9 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                        f32_4 %92 = OpImageSampleExplicitLod %87 %90 Lod %7 
                                                      OpStore %77 %92 
                          read_only Texture2D %94 = OpLoad %93 
                                      sampler %96 = OpLoad %95 
                   read_only Texture2DSampled %97 = OpSampledImage %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_4 %100 = OpImageSampleExplicitLod %97 %99 Lod %7 
                                       f32_3 %102 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %9 %104 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 2 1 
                                       f32_3 %109 = OpFMul %106 %108 
                                       f32_3 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 6 3 
                                                      OpStore %9 %114 
                                Uniform f32* %117 = OpAccessChain %19 %116 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Uniform f32* %121 = OpAccessChain %19 %120 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFAdd %119 %122 
                                Private f32* %124 = OpAccessChain %115 %30 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %115 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_3 %129 = OpFMul %126 %128 
                                Uniform f32* %130 = OpAccessChain %19 %116 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %132 = OpAccessChain %19 %116 
                                         f32 %133 = OpLoad %132 
                                Uniform f32* %134 = OpAccessChain %19 %116 
                                         f32 %135 = OpLoad %134 
                                       f32_3 %136 = OpCompositeConstruct %131 %133 %135 
                                         f32 %137 = OpCompositeExtract %136 0 
                                         f32 %138 = OpCompositeExtract %136 1 
                                         f32 %139 = OpCompositeExtract %136 2 
                                       f32_3 %140 = OpCompositeConstruct %137 %138 %139 
                                       f32_3 %141 = OpFAdd %129 %140 
                                       f32_4 %142 = OpLoad %115 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %115 %143 
                                       f32_4 %144 = OpLoad %77 
                                       f32_2 %145 = OpVectorShuffle %144 %144 3 3 
                                       f32_2 %149 = OpFMul %145 %148 
                                       f32_4 %150 = OpLoad %77 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %77 %151 
                                Private f32* %152 = OpAccessChain %115 %30 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                Private f32* %156 = OpAccessChain %115 %155 
                                                      OpStore %156 %154 
                                       f32_4 %157 = OpLoad %115 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 2 1 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %158 %161 
                                       f32_4 %163 = OpLoad %115 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %115 %164 
                                       f32_4 %166 = OpLoad %115 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %19 %168 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %167 %171 
                                                      OpStore %165 %172 
                              Uniform f32_4* %173 = OpAccessChain %19 %168 %20 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %115 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %165 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %165 %179 
                              Uniform f32_4* %181 = OpAccessChain %19 %168 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %115 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %165 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %115 %187 
                                       f32_4 %188 = OpLoad %115 
                              Uniform f32_4* %190 = OpAccessChain %19 %168 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %165 %192 
                                       f32_4 %194 = OpLoad %165 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %19 %189 %168 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFMul %195 %197 
                                                      OpStore %193 %198 
                              Uniform f32_4* %199 = OpAccessChain %19 %189 %20 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %165 
                                       f32_4 %202 = OpVectorShuffle %201 %201 0 0 0 0 
                                       f32_4 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %193 
                                       f32_4 %205 = OpFAdd %203 %204 
                                                      OpStore %193 %205 
                              Uniform f32_4* %206 = OpAccessChain %19 %189 %180 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %165 
                                       f32_4 %209 = OpVectorShuffle %208 %208 2 2 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %193 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %193 %212 
                              Uniform f32_4* %213 = OpAccessChain %19 %189 %189 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %165 
                                       f32_4 %216 = OpVectorShuffle %215 %215 3 3 3 3 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %193 
                                       f32_4 %219 = OpFAdd %217 %218 
                                                      OpStore %165 %219 
                                       f32_4 %224 = OpLoad %165 
                               Output f32_4* %226 = OpAccessChain %223 %20 
                                                      OpStore %226 %224 
                                Private f32* %230 = OpAccessChain %165 %229 
                                         f32 %231 = OpLoad %230 
                                                      OpStore vs_TEXCOORD5 %231 
                              Uniform f32_4* %232 = OpAccessChain %19 %168 %189 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpLoad %159 
                                       f32_4 %235 = OpVectorShuffle %234 %234 3 3 3 3 
                                       f32_4 %236 = OpFMul %233 %235 
                                       f32_4 %237 = OpLoad %115 
                                       f32_4 %238 = OpFAdd %236 %237 
                                                      OpStore %165 %238 
                              Uniform f32_4* %241 = OpAccessChain %19 %168 %189 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_4 %244 = OpLoad %159 
                                       f32_3 %245 = OpVectorShuffle %244 %244 3 3 3 
                                       f32_3 %246 = OpFMul %243 %245 
                                       f32_4 %247 = OpLoad %115 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFAdd %246 %248 
                                                      OpStore vs_TEXCOORD2 %249 
                                       f32_4 %252 = OpLoad %165 
                                       f32_2 %253 = OpVectorShuffle %252 %252 1 1 
                              Uniform f32_4* %255 = OpAccessChain %19 %254 %168 
                                       f32_4 %256 = OpLoad %255 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 1 
                                       f32_2 %258 = OpFMul %253 %257 
                                                      OpStore %251 %258 
                              Uniform f32_4* %259 = OpAccessChain %19 %254 %20 
                                       f32_4 %260 = OpLoad %259 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_4 %262 = OpLoad %165 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 0 
                                       f32_2 %264 = OpFMul %261 %263 
                                       f32_2 %265 = OpLoad %251 
                                       f32_2 %266 = OpFAdd %264 %265 
                                                      OpStore %251 %266 
                              Uniform f32_4* %267 = OpAccessChain %19 %254 %180 
                                       f32_4 %268 = OpLoad %267 
                                       f32_2 %269 = OpVectorShuffle %268 %268 0 1 
                                       f32_4 %270 = OpLoad %165 
                                       f32_2 %271 = OpVectorShuffle %270 %270 2 2 
                                       f32_2 %272 = OpFMul %269 %271 
                                       f32_2 %273 = OpLoad %251 
                                       f32_2 %274 = OpFAdd %272 %273 
                                                      OpStore %251 %274 
                              Uniform f32_4* %277 = OpAccessChain %19 %254 %189 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_4 %280 = OpLoad %165 
                                       f32_2 %281 = OpVectorShuffle %280 %280 3 3 
                                       f32_2 %282 = OpFMul %279 %281 
                                       f32_2 %283 = OpLoad %251 
                                       f32_2 %284 = OpFAdd %282 %283 
                                                      OpStore vs_TEXCOORD3 %284 
                                       f32_4 %287 = OpLoad %286 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                              Uniform f32_4* %290 = OpAccessChain %19 %289 
                                       f32_4 %291 = OpLoad %290 
                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
                                       f32_2 %293 = OpFMul %288 %292 
                              Uniform f32_4* %294 = OpAccessChain %19 %289 
                                       f32_4 %295 = OpLoad %294 
                                       f32_2 %296 = OpVectorShuffle %295 %295 2 3 
                                       f32_2 %297 = OpFAdd %293 %296 
                                                      OpStore vs_TEXCOORD0 %297 
                                Private f32* %298 = OpAccessChain %77 %21 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpExtInst %1 8 %299 
                                Private f32* %301 = OpAccessChain %115 %30 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %115 %30 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFNegate %303 
                                         f32 %305 = OpFMul %304 %147 
                                Private f32* %306 = OpAccessChain %77 %30 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFAdd %305 %307 
                                Private f32* %309 = OpAccessChain %115 %21 
                                                      OpStore %309 %308 
                                       f32_4 %310 = OpLoad %115 
                                       f32_2 %311 = OpVectorShuffle %310 %310 0 1 
                                       f32_2 %314 = OpFMul %311 %313 
                                       f32_2 %317 = OpFAdd %314 %316 
                                       f32_4 %318 = OpLoad %77 
                                       f32_4 %319 = OpVectorShuffle %318 %317 4 5 2 3 
                                                      OpStore %77 %319 
                                       f32_4 %320 = OpLoad %77 
                                       f32_2 %321 = OpVectorShuffle %320 %320 0 1 
                                       f32_4 %322 = OpLoad %77 
                                       f32_2 %323 = OpVectorShuffle %322 %322 0 1 
                                         f32 %324 = OpDot %321 %323 
                                Private f32* %325 = OpAccessChain %251 %30 
                                                      OpStore %325 %324 
                                       f32_2 %326 = OpLoad %251 
                                       f32_2 %327 = OpVectorShuffle %326 %326 0 0 
                                       f32_2 %328 = OpFNegate %327 
                                       f32_2 %332 = OpFMul %328 %331 
                                       f32_2 %334 = OpFAdd %332 %333 
                                       f32_4 %335 = OpLoad %115 
                                       f32_4 %336 = OpVectorShuffle %335 %334 0 1 4 5 
                                                      OpStore %115 %336 
                                Private f32* %337 = OpAccessChain %115 %229 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpExtInst %1 31 %338 
                                Private f32* %340 = OpAccessChain %251 %30 
                                                      OpStore %340 %339 
                                       f32_4 %341 = OpLoad %77 
                                       f32_2 %342 = OpVectorShuffle %341 %341 0 1 
                                       f32_2 %343 = OpLoad %251 
                                       f32_2 %344 = OpVectorShuffle %343 %343 0 0 
                                       f32_2 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %115 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 2 3 
                                                      OpStore %115 %347 
                                       f32_4 %348 = OpLoad %115 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 3 
                                       f32_3 %350 = OpExtInst %1 40 %349 %111 
                                       f32_4 %351 = OpLoad %77 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %77 %352 
                                       f32_4 %353 = OpLoad %77 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_3 %356 = OpExtInst %1 37 %354 %355 
                                       f32_4 %357 = OpLoad %77 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %77 %358 
                                Private f32* %359 = OpAccessChain %77 %30 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFNegate %360 
                                Private f32* %362 = OpAccessChain %77 %155 
                                                      OpStore %362 %361 
                                Private f32* %363 = OpAccessChain %9 %30 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFNegate %364 
                                Private f32* %366 = OpAccessChain %9 %155 
                                                      OpStore %366 %365 
                                Uniform f32* %372 = OpAccessChain %19 %371 
                                         f32 %373 = OpLoad %372 
                                       f32_4 %374 = OpCompositeConstruct %373 %373 %373 %373 
                                      bool_4 %376 = OpFOrdNotEqual %370 %374 
                                        bool %377 = OpAny %376 
                                                      OpStore %369 %377 
                                        bool %378 = OpLoad %369 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %378 %381 %385 
                                             %381 = OpLabel 
                                       f32_4 %383 = OpLoad %77 
                                       f32_3 %384 = OpVectorShuffle %383 %383 3 2 1 
                                                      OpStore %380 %384 
                                                      OpBranch %382 
                                             %385 = OpLabel 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 3 1 2 
                                                      OpStore %380 %387 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                       f32_3 %388 = OpLoad %380 
                                       f32_4 %389 = OpLoad %9 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %9 %390 
                                       f32_4 %391 = OpLoad %9 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                              Uniform f32_4* %393 = OpAccessChain %19 %180 %20 
                                       f32_4 %394 = OpLoad %393 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                         f32 %396 = OpDot %392 %395 
                                Private f32* %397 = OpAccessChain %77 %30 
                                                      OpStore %397 %396 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                              Uniform f32_4* %400 = OpAccessChain %19 %180 %168 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                         f32 %403 = OpDot %399 %402 
                                Private f32* %404 = OpAccessChain %77 %21 
                                                      OpStore %404 %403 
                                       f32_4 %405 = OpLoad %9 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              Uniform f32_4* %407 = OpAccessChain %19 %180 %180 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                         f32 %410 = OpDot %406 %409 
                                Private f32* %411 = OpAccessChain %77 %229 
                                                      OpStore %411 %410 
                                       f32_4 %412 = OpLoad %77 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %77 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                         f32 %416 = OpDot %413 %415 
                                Private f32* %417 = OpAccessChain %9 %30 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %9 %30 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpExtInst %1 32 %419 
                                Private f32* %421 = OpAccessChain %9 %30 
                                                      OpStore %421 %420 
                                       f32_4 %423 = OpLoad %9 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 0 0 
                                       f32_4 %425 = OpLoad %77 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFMul %424 %426 
                                                      OpStore vs_TEXCOORD1 %427 
                                                      OpStore vs_TEXCOORD4 %370 
                                 Output f32* %429 = OpAccessChain %223 %20 %21 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpFNegate %430 
                                 Output f32* %432 = OpAccessChain %223 %20 %21 
                                                      OpStore %432 %431 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 458
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %61 %212 %422 %448 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate vs_TEXCOORD1 Location 61 
                                                      OpDecorate %203 DescriptorSet 203 
                                                      OpDecorate %203 Binding 203 
                                                      OpDecorate %207 DescriptorSet 207 
                                                      OpDecorate %207 Binding 207 
                                                      OpDecorate vs_TEXCOORD0 Location 212 
                                                      OpDecorate %291 DescriptorSet 291 
                                                      OpDecorate %291 Binding 291 
                                                      OpDecorate %293 DescriptorSet 293 
                                                      OpDecorate %293 Binding 293 
                                                      OpDecorate vs_TEXCOORD5 Location 422 
                                                      OpDecorate %448 Location 448 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %14 %14 %17 %6 %6 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %34 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                              %40 = OpTypePointer Uniform %14 
                                          f32 %53 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_3* %67 = OpVariable Private 
                                          f32 %76 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                                          u32 %84 = OpConstant 0 
                                 Private f32* %90 = OpVariable Private 
                                          i32 %91 = OpConstant 6 
                                              %92 = OpTypePointer Uniform %6 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Private %97 
                               Private f32_2* %99 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                                Private f32* %109 = OpVariable Private 
                                Private f32* %115 = OpVariable Private 
                                         f32 %129 = OpConstant 3.674022E-40 
                                         f32 %132 = OpConstant 3.674022E-40 
                                Private f32* %141 = OpVariable Private 
                                Private f32* %149 = OpVariable Private 
                                         f32 %185 = OpConstant 3.674022E-40 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %197 = OpConstant 3.674022E-40 
                                             %201 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %202 = OpTypePointer UniformConstant %201 
        UniformConstant read_only Texture2D* %203 = OpVariable UniformConstant 
                                             %205 = OpTypeSampler 
                                             %206 = OpTypePointer UniformConstant %205 
                    UniformConstant sampler* %207 = OpVariable UniformConstant 
                                             %209 = OpTypeSampledImage %201 
                                             %211 = OpTypePointer Input %97 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                              Private f32_3* %216 = OpVariable Private 
                                         i32 %218 = OpConstant 8 
                                         f32 %223 = OpConstant 3.674022E-40 
                                       f32_3 %224 = OpConstantComposite %223 %223 %223 
                                         i32 %231 = OpConstant 7 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                             %251 = OpTypeBool 
                                             %252 = OpTypePointer Private %251 
                               Private bool* %253 = OpVariable Private 
                                         i32 %263 = OpConstant 5 
                                         i32 %264 = OpConstant 1 
                                         i32 %286 = OpConstant 3 
        UniformConstant read_only Texture2D* %291 = OpVariable UniformConstant 
                    UniformConstant sampler* %293 = OpVariable UniformConstant 
                                         u32 %298 = OpConstant 3 
                              Private f32_3* %300 = OpVariable Private 
                                         i32 %303 = OpConstant 4 
                              Private f32_3* %308 = OpVariable Private 
                                         f32 %328 = OpConstant 3.674022E-40 
                                       f32_3 %346 = OpConstantComposite %77 %77 %77 
                                         f32 %409 = OpConstant 3.674022E-40 
                                             %421 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %424 = OpConstant 1 
                                         u32 %432 = OpConstant 2 
                                             %447 = OpTypePointer Output %14 
                               Output f32_4* %448 = OpVariable Output 
                                             %455 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                        f32_3 %35 = OpLoad %9 
                                          f32 %36 = OpLoad %28 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_3 %38 = OpFMul %35 %37 
                               Uniform f32_4* %41 = OpAccessChain %20 %39 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_3 %44 = OpFAdd %38 %43 
                                                      OpStore %34 %44 
                                          f32 %45 = OpLoad %28 
                                        f32_3 %46 = OpCompositeConstruct %45 %45 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFMul %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %34 
                                        f32_3 %50 = OpLoad %34 
                                          f32 %51 = OpDot %49 %50 
                                                      OpStore %28 %51 
                                          f32 %52 = OpLoad %28 
                                          f32 %54 = OpExtInst %1 40 %52 %53 
                                                      OpStore %28 %54 
                                          f32 %55 = OpLoad %28 
                                          f32 %56 = OpExtInst %1 32 %55 
                                                      OpStore %28 %56 
                                          f32 %57 = OpLoad %28 
                                        f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                                        f32_3 %59 = OpLoad %34 
                                        f32_3 %60 = OpFMul %58 %59 
                                                      OpStore %34 %60 
                                        f32_3 %62 = OpLoad vs_TEXCOORD1 
                                        f32_3 %63 = OpLoad vs_TEXCOORD1 
                                          f32 %64 = OpDot %62 %63 
                                                      OpStore %28 %64 
                                          f32 %65 = OpLoad %28 
                                          f32 %66 = OpExtInst %1 32 %65 
                                                      OpStore %28 %66 
                                          f32 %68 = OpLoad %28 
                                        f32_3 %69 = OpCompositeConstruct %68 %68 %68 
                                        f32_3 %70 = OpLoad vs_TEXCOORD1 
                                        f32_3 %71 = OpFMul %69 %70 
                                                      OpStore %67 %71 
                                        f32_3 %72 = OpLoad %67 
                                        f32_3 %73 = OpLoad %34 
                                          f32 %74 = OpDot %72 %73 
                                                      OpStore %28 %74 
                                          f32 %75 = OpLoad %28 
                                          f32 %78 = OpExtInst %1 43 %75 %76 %77 
                                                      OpStore %28 %78 
                               Uniform f32_4* %79 = OpAccessChain %20 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpLoad %34 
                                          f32 %83 = OpDot %81 %82 
                                 Private f32* %85 = OpAccessChain %34 %84 
                                                      OpStore %85 %83 
                                 Private f32* %86 = OpAccessChain %34 %84 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpExtInst %1 43 %87 %76 %77 
                                 Private f32* %89 = OpAccessChain %34 %84 
                                                      OpStore %89 %88 
                                 Uniform f32* %93 = OpAccessChain %20 %91 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFNegate %94 
                                          f32 %96 = OpFAdd %95 %77 
                                                      OpStore %90 %96 
                                         f32 %100 = OpLoad %90 
                                         f32 %101 = OpLoad %90 
                                         f32 %102 = OpFMul %100 %101 
                                Private f32* %103 = OpAccessChain %99 %84 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %99 %84 
                                         f32 %105 = OpLoad %104 
                                         f32 %107 = OpExtInst %1 40 %105 %106 
                                Private f32* %108 = OpAccessChain %99 %84 
                                                      OpStore %108 %107 
                                Private f32* %110 = OpAccessChain %99 %84 
                                         f32 %111 = OpLoad %110 
                                Private f32* %112 = OpAccessChain %99 %84 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFMul %111 %113 
                                                      OpStore %109 %114 
                                         f32 %116 = OpLoad %28 
                                         f32 %117 = OpLoad %109 
                                         f32 %118 = OpFMul %116 %117 
                                         f32 %119 = OpLoad %28 
                                         f32 %120 = OpFNegate %119 
                                         f32 %121 = OpFAdd %118 %120 
                                                      OpStore %115 %121 
                                         f32 %122 = OpLoad %115 
                                         f32 %123 = OpLoad %28 
                                         f32 %124 = OpFMul %122 %123 
                                         f32 %125 = OpFAdd %124 %77 
                                                      OpStore %28 %125 
                                         f32 %126 = OpLoad %28 
                                         f32 %127 = OpLoad %28 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %130 = OpFAdd %128 %129 
                                                      OpStore %28 %130 
                                         f32 %131 = OpLoad %109 
                                         f32 %133 = OpFMul %131 %132 
                                                      OpStore %109 %133 
                                         f32 %134 = OpLoad %109 
                                         f32 %135 = OpLoad %28 
                                         f32 %136 = OpFDiv %134 %135 
                                                      OpStore %28 %136 
                                       f32_3 %137 = OpLoad %67 
                                       f32_3 %138 = OpLoad %9 
                                         f32 %139 = OpDot %137 %138 
                                Private f32* %140 = OpAccessChain %9 %84 
                                                      OpStore %140 %139 
                                       f32_3 %142 = OpLoad %67 
                              Uniform f32_4* %143 = OpAccessChain %20 %39 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                         f32 %146 = OpDot %142 %145 
                                                      OpStore %141 %146 
                                         f32 %147 = OpLoad %141 
                                         f32 %148 = OpExtInst %1 43 %147 %76 %77 
                                                      OpStore %141 %148 
                                Private f32* %150 = OpAccessChain %99 %84 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                         f32 %153 = OpFAdd %152 %77 
                                                      OpStore %149 %153 
                                Private f32* %154 = OpAccessChain %9 %84 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpExtInst %1 4 %155 
                                         f32 %157 = OpLoad %149 
                                         f32 %158 = OpFMul %156 %157 
                                Private f32* %159 = OpAccessChain %99 %84 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                                      OpStore %109 %161 
                                         f32 %162 = OpLoad %141 
                                         f32 %163 = OpLoad %149 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %165 = OpAccessChain %99 %84 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFAdd %164 %166 
                                                      OpStore %149 %167 
                                         f32 %168 = OpLoad %149 
                                Private f32* %169 = OpAccessChain %9 %84 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 4 %170 
                                         f32 %172 = OpFMul %168 %171 
                                                      OpStore %149 %172 
                                Private f32* %173 = OpAccessChain %9 %84 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpExtInst %1 4 %174 
                                         f32 %176 = OpFNegate %175 
                                         f32 %177 = OpFAdd %176 %77 
                                Private f32* %178 = OpAccessChain %9 %84 
                                                      OpStore %178 %177 
                                         f32 %179 = OpLoad %141 
                                         f32 %180 = OpLoad %109 
                                         f32 %181 = OpFMul %179 %180 
                                         f32 %182 = OpLoad %149 
                                         f32 %183 = OpFAdd %181 %182 
                                                      OpStore %149 %183 
                                         f32 %184 = OpLoad %149 
                                         f32 %186 = OpFAdd %184 %185 
                                                      OpStore %149 %186 
                                         f32 %188 = OpLoad %149 
                                         f32 %189 = OpFDiv %187 %188 
                                                      OpStore %149 %189 
                                         f32 %190 = OpLoad %28 
                                         f32 %191 = OpLoad %149 
                                         f32 %192 = OpFMul %190 %191 
                                                      OpStore %149 %192 
                                         f32 %193 = OpLoad %141 
                                         f32 %194 = OpLoad %149 
                                         f32 %195 = OpFMul %193 %194 
                                                      OpStore %149 %195 
                                         f32 %196 = OpLoad %149 
                                         f32 %198 = OpFMul %196 %197 
                                                      OpStore %149 %198 
                                         f32 %199 = OpLoad %149 
                                         f32 %200 = OpExtInst %1 40 %199 %76 
                                                      OpStore %149 %200 
                         read_only Texture2D %204 = OpLoad %203 
                                     sampler %208 = OpLoad %207 
                  read_only Texture2DSampled %210 = OpSampledImage %204 %208 
                                       f32_2 %213 = OpLoad vs_TEXCOORD0 
                                       f32_4 %214 = OpImageSampleImplicitLod %210 %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                                      OpStore %67 %215 
                                       f32_3 %217 = OpLoad %67 
                              Uniform f32_4* %219 = OpAccessChain %20 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFMul %217 %221 
                                       f32_3 %225 = OpFAdd %222 %224 
                                                      OpStore %216 %225 
                                       f32_3 %226 = OpLoad %67 
                              Uniform f32_4* %227 = OpAccessChain %20 %218 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %226 %229 
                                                      OpStore %67 %230 
                                Uniform f32* %232 = OpAccessChain %20 %231 
                                         f32 %233 = OpLoad %232 
                                Uniform f32* %234 = OpAccessChain %20 %231 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %20 %231 
                                         f32 %237 = OpLoad %236 
                                       f32_3 %238 = OpCompositeConstruct %233 %235 %237 
                                         f32 %239 = OpCompositeExtract %238 0 
                                         f32 %240 = OpCompositeExtract %238 1 
                                         f32 %241 = OpCompositeExtract %238 2 
                                       f32_3 %242 = OpCompositeConstruct %239 %240 %241 
                                       f32_3 %243 = OpLoad %216 
                                       f32_3 %244 = OpFMul %242 %243 
                                       f32_3 %247 = OpFAdd %244 %246 
                                                      OpStore %216 %247 
                                       f32_3 %248 = OpLoad %216 
                                       f32_3 %249 = OpLoad %216 
                                         f32 %250 = OpDot %248 %249 
                                                      OpStore %28 %250 
                                         f32 %254 = OpLoad %28 
                                        bool %255 = OpFOrdNotEqual %254 %76 
                                                      OpStore %253 %255 
                                        bool %256 = OpLoad %253 
                                         f32 %257 = OpSelect %256 %77 %76 
                                                      OpStore %28 %257 
                                         f32 %258 = OpLoad %28 
                                         f32 %259 = OpLoad %149 
                                         f32 %260 = OpFMul %258 %259 
                                                      OpStore %149 %260 
                                       f32_3 %261 = OpLoad vs_TEXCOORD2 
                                       f32_2 %262 = OpVectorShuffle %261 %261 1 1 
                              Uniform f32_4* %265 = OpAccessChain %20 %263 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                                       f32_2 %268 = OpFMul %262 %267 
                                                      OpStore %99 %268 
                              Uniform f32_4* %269 = OpAccessChain %20 %263 %22 
                                       f32_4 %270 = OpLoad %269 
                                       f32_2 %271 = OpVectorShuffle %270 %270 0 1 
                                       f32_3 %272 = OpLoad vs_TEXCOORD2 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 0 
                                       f32_2 %274 = OpFMul %271 %273 
                                       f32_2 %275 = OpLoad %99 
                                       f32_2 %276 = OpFAdd %274 %275 
                                                      OpStore %99 %276 
                              Uniform f32_4* %277 = OpAccessChain %20 %263 %39 
                                       f32_4 %278 = OpLoad %277 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_3 %280 = OpLoad vs_TEXCOORD2 
                                       f32_2 %281 = OpVectorShuffle %280 %280 2 2 
                                       f32_2 %282 = OpFMul %279 %281 
                                       f32_2 %283 = OpLoad %99 
                                       f32_2 %284 = OpFAdd %282 %283 
                                                      OpStore %99 %284 
                                       f32_2 %285 = OpLoad %99 
                              Uniform f32_4* %287 = OpAccessChain %20 %263 %286 
                                       f32_4 %288 = OpLoad %287 
                                       f32_2 %289 = OpVectorShuffle %288 %288 0 1 
                                       f32_2 %290 = OpFAdd %285 %289 
                                                      OpStore %99 %290 
                         read_only Texture2D %292 = OpLoad %291 
                                     sampler %294 = OpLoad %293 
                  read_only Texture2DSampled %295 = OpSampledImage %292 %294 
                                       f32_2 %296 = OpLoad %99 
                                       f32_4 %297 = OpImageSampleImplicitLod %295 %296 
                                         f32 %299 = OpCompositeExtract %297 3 
                                                      OpStore %28 %299 
                                         f32 %301 = OpLoad %28 
                                       f32_3 %302 = OpCompositeConstruct %301 %301 %301 
                              Uniform f32_4* %304 = OpAccessChain %20 %303 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_3 %307 = OpFMul %302 %306 
                                                      OpStore %300 %307 
                                         f32 %309 = OpLoad %149 
                                       f32_3 %310 = OpCompositeConstruct %309 %309 %309 
                                       f32_3 %311 = OpLoad %300 
                                       f32_3 %312 = OpFMul %310 %311 
                                                      OpStore %308 %312 
                                Private f32* %313 = OpAccessChain %34 %84 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpFAdd %315 %77 
                                                      OpStore %149 %316 
                                Private f32* %317 = OpAccessChain %34 %84 
                                         f32 %318 = OpLoad %317 
                                Private f32* %319 = OpAccessChain %34 %84 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                                      OpStore %28 %321 
                                         f32 %322 = OpLoad %28 
                                       f32_2 %323 = OpCompositeConstruct %322 %322 
                                         f32 %324 = OpLoad %90 
                                       f32_2 %325 = OpCompositeConstruct %324 %324 
                                         f32 %326 = OpDot %323 %325 
                                                      OpStore %28 %326 
                                         f32 %327 = OpLoad %28 
                                         f32 %329 = OpFAdd %327 %328 
                                                      OpStore %28 %329 
                                         f32 %330 = OpLoad %149 
                                         f32 %331 = OpLoad %149 
                                         f32 %332 = OpFMul %330 %331 
                                Private f32* %333 = OpAccessChain %34 %84 
                                                      OpStore %333 %332 
                                Private f32* %334 = OpAccessChain %34 %84 
                                         f32 %335 = OpLoad %334 
                                Private f32* %336 = OpAccessChain %34 %84 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFMul %335 %337 
                                Private f32* %339 = OpAccessChain %34 %84 
                                                      OpStore %339 %338 
                                         f32 %340 = OpLoad %149 
                                Private f32* %341 = OpAccessChain %34 %84 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpFMul %340 %342 
                                                      OpStore %149 %343 
                                       f32_3 %344 = OpLoad %216 
                                       f32_3 %345 = OpFNegate %344 
                                       f32_3 %347 = OpFAdd %345 %346 
                                                      OpStore %34 %347 
                                       f32_3 %348 = OpLoad %34 
                                         f32 %349 = OpLoad %149 
                                       f32_3 %350 = OpCompositeConstruct %349 %349 %349 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_3 %352 = OpLoad %216 
                                       f32_3 %353 = OpFAdd %351 %352 
                                                      OpStore %34 %353 
                                       f32_3 %354 = OpLoad %34 
                                       f32_3 %355 = OpLoad %308 
                                       f32_3 %356 = OpFMul %354 %355 
                                                      OpStore %34 %356 
                                Private f32* %357 = OpAccessChain %9 %84 
                                         f32 %358 = OpLoad %357 
                                Private f32* %359 = OpAccessChain %9 %84 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFMul %358 %360 
                                                      OpStore %149 %361 
                                         f32 %362 = OpLoad %149 
                                         f32 %363 = OpLoad %149 
                                         f32 %364 = OpFMul %362 %363 
                                                      OpStore %149 %364 
                                Private f32* %365 = OpAccessChain %9 %84 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpLoad %149 
                                         f32 %368 = OpFMul %366 %367 
                                Private f32* %369 = OpAccessChain %9 %84 
                                                      OpStore %369 %368 
                                         f32 %370 = OpLoad %28 
                                Private f32* %371 = OpAccessChain %9 %84 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpFMul %370 %372 
                                         f32 %374 = OpFAdd %373 %77 
                                Private f32* %375 = OpAccessChain %9 %84 
                                                      OpStore %375 %374 
                                         f32 %376 = OpLoad %141 
                                         f32 %377 = OpFNegate %376 
                                         f32 %378 = OpFAdd %377 %77 
                                                      OpStore %149 %378 
                                         f32 %379 = OpLoad %149 
                                         f32 %380 = OpLoad %149 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %109 %381 
                                         f32 %382 = OpLoad %109 
                                         f32 %383 = OpLoad %109 
                                         f32 %384 = OpFMul %382 %383 
                                                      OpStore %109 %384 
                                         f32 %385 = OpLoad %149 
                                         f32 %386 = OpLoad %109 
                                         f32 %387 = OpFMul %385 %386 
                                                      OpStore %149 %387 
                                         f32 %388 = OpLoad %28 
                                         f32 %389 = OpLoad %149 
                                         f32 %390 = OpFMul %388 %389 
                                         f32 %391 = OpFAdd %390 %77 
                                                      OpStore %149 %391 
                                Private f32* %392 = OpAccessChain %9 %84 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpLoad %149 
                                         f32 %395 = OpFMul %393 %394 
                                Private f32* %396 = OpAccessChain %9 %84 
                                                      OpStore %396 %395 
                                         f32 %397 = OpLoad %141 
                                Private f32* %398 = OpAccessChain %9 %84 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFMul %397 %399 
                                Private f32* %401 = OpAccessChain %9 %84 
                                                      OpStore %401 %400 
                                       f32_3 %402 = OpLoad %9 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 0 0 
                                       f32_3 %404 = OpLoad %300 
                                       f32_3 %405 = OpFMul %403 %404 
                                                      OpStore %9 %405 
                                Uniform f32* %406 = OpAccessChain %20 %231 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpFNegate %407 
                                         f32 %410 = OpFMul %408 %409 
                                         f32 %411 = OpFAdd %410 %409 
                                                      OpStore %28 %411 
                                         f32 %412 = OpLoad %28 
                                       f32_3 %413 = OpCompositeConstruct %412 %412 %412 
                                       f32_3 %414 = OpLoad %67 
                                       f32_3 %415 = OpFMul %413 %414 
                                                      OpStore %67 %415 
                                       f32_3 %416 = OpLoad %67 
                                       f32_3 %417 = OpLoad %9 
                                       f32_3 %418 = OpFMul %416 %417 
                                       f32_3 %419 = OpLoad %34 
                                       f32_3 %420 = OpFAdd %418 %419 
                                                      OpStore %9 %420 
                                         f32 %423 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %425 = OpAccessChain %20 %264 %424 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFDiv %423 %426 
                                                      OpStore %28 %427 
                                         f32 %428 = OpLoad %28 
                                         f32 %429 = OpFNegate %428 
                                         f32 %430 = OpFAdd %429 %77 
                                                      OpStore %28 %430 
                                         f32 %431 = OpLoad %28 
                                Uniform f32* %433 = OpAccessChain %20 %264 %432 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFMul %431 %434 
                                                      OpStore %28 %435 
                                         f32 %436 = OpLoad %28 
                                         f32 %437 = OpExtInst %1 40 %436 %76 
                                                      OpStore %28 %437 
                                         f32 %438 = OpLoad %28 
                                Uniform f32* %439 = OpAccessChain %20 %286 %432 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpFMul %438 %440 
                                Uniform f32* %442 = OpAccessChain %20 %286 %298 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFAdd %441 %443 
                                                      OpStore %28 %444 
                                         f32 %445 = OpLoad %28 
                                         f32 %446 = OpExtInst %1 43 %445 %76 %77 
                                                      OpStore %28 %446 
                                       f32_3 %449 = OpLoad %9 
                                         f32 %450 = OpLoad %28 
                                       f32_3 %451 = OpCompositeConstruct %450 %450 %450 
                                       f32_3 %452 = OpFMul %449 %451 
                                       f32_4 %453 = OpLoad %448 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %448 %454 
                                 Output f32* %456 = OpAccessChain %448 %298 
                                                      OpStore %456 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 200
  Tags { "LIGHTMODE" = "DEFERRED" "RenderType" = "Opaque" }
  GpuProgramID 176505
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(1) uniform  sampler2D _posTex;
UNITY_LOCATION(2) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
float u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat0 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    SV_Target3.xyz = u_xlat2.xyz;
    SV_Target1.w = _Glossiness;
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 386
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %225 %236 %237 %373 %379 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %223 0 BuiltIn 223 
                                                      OpMemberDecorate %223 1 BuiltIn 223 
                                                      OpMemberDecorate %223 2 BuiltIn 223 
                                                      OpDecorate %223 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 236 
                                                      OpDecorate %237 Location 237 
                                                      OpDecorate vs_TEXCOORD1 Location 373 
                                                      OpDecorate vs_TEXCOORD4 Location 379 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 7 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 8 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 6 
                                         i32 %119 = OpConstant 5 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 1 
                                             %168 = OpTypePointer Uniform %7 
                                         i32 %179 = OpConstant 2 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %222 = OpTypeArray %6 %20 
                                             %223 = OpTypeStruct %7 %6 %222 
                                             %224 = OpTypePointer Output %223 
        Output struct {f32_4; f32; f32[1];}* %225 = OpVariable Output 
                                             %233 = OpTypePointer Output %7 
                                             %235 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %237 = OpVariable Input 
                                         i32 %240 = OpConstant 9 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_2 %264 = OpConstantComposite %263 %263 
                                         f32 %266 = OpConstant 3.674022E-40 
                                       f32_2 %267 = OpConstantComposite %266 %266 
                                Private f32* %271 = OpVariable Private 
                                         f32 %280 = OpConstant 3.674022E-40 
                                         f32 %281 = OpConstant 3.674022E-40 
                                       f32_2 %282 = OpConstantComposite %280 %281 
                                       f32_2 %284 = OpConstantComposite %56 %56 
                                         u32 %288 = OpConstant 2 
                                       f32_3 %306 = OpConstantComposite %56 %56 %56 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                       f32_4 %321 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %322 = OpConstant 4 
                                             %326 = OpTypeVector %318 4 
                                             %330 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                             %380 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %331 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %169 = OpAccessChain %18 %167 %167 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpFMul %166 %170 
                                                      OpStore %164 %171 
                              Uniform f32_4* %172 = OpAccessChain %18 %167 %19 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpLoad %114 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %164 
                                       f32_4 %178 = OpFAdd %176 %177 
                                                      OpStore %164 %178 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %205 = OpAccessChain %18 %188 %167 
                                       f32_4 %206 = OpLoad %205 
                                       f32_4 %207 = OpFMul %204 %206 
                                                      OpStore %114 %207 
                              Uniform f32_4* %208 = OpAccessChain %18 %188 %19 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %164 
                                       f32_4 %211 = OpVectorShuffle %210 %210 0 0 0 0 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %114 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %114 %214 
                              Uniform f32_4* %215 = OpAccessChain %18 %188 %179 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %164 
                                       f32_4 %218 = OpVectorShuffle %217 %217 2 2 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %114 
                                       f32_4 %221 = OpFAdd %219 %220 
                                                      OpStore %114 %221 
                              Uniform f32_4* %226 = OpAccessChain %18 %188 %188 
                                       f32_4 %227 = OpLoad %226 
                                       f32_4 %228 = OpLoad %164 
                                       f32_4 %229 = OpVectorShuffle %228 %228 3 3 3 3 
                                       f32_4 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %114 
                                       f32_4 %232 = OpFAdd %230 %231 
                               Output f32_4* %234 = OpAccessChain %225 %19 
                                                      OpStore %234 %232 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                              Uniform f32_4* %241 = OpAccessChain %18 %240 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                              Uniform f32_4* %245 = OpAccessChain %18 %240 
                                       f32_4 %246 = OpLoad %245 
                                       f32_2 %247 = OpVectorShuffle %246 %246 2 3 
                                       f32_2 %248 = OpFAdd %244 %247 
                                                      OpStore vs_TEXCOORD0 %248 
                                Private f32* %249 = OpAccessChain %76 %20 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpExtInst %1 8 %250 
                                Private f32* %252 = OpAccessChain %114 %29 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %114 %29 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFNegate %254 
                                         f32 %256 = OpFMul %255 %146 
                                Private f32* %257 = OpAccessChain %76 %29 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %114 %20 
                                                      OpStore %260 %259 
                                       f32_4 %261 = OpLoad %114 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_2 %265 = OpFMul %262 %264 
                                       f32_2 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %76 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %76 %270 
                                       f32_4 %272 = OpLoad %76 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_4 %274 = OpLoad %76 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                         f32 %276 = OpDot %273 %275 
                                                      OpStore %271 %276 
                                         f32 %277 = OpLoad %271 
                                       f32_2 %278 = OpCompositeConstruct %277 %277 
                                       f32_2 %279 = OpFNegate %278 
                                       f32_2 %283 = OpFMul %279 %282 
                                       f32_2 %285 = OpFAdd %283 %284 
                                       f32_4 %286 = OpLoad %114 
                                       f32_4 %287 = OpVectorShuffle %286 %285 0 1 4 5 
                                                      OpStore %114 %287 
                                Private f32* %289 = OpAccessChain %114 %288 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpExtInst %1 31 %290 
                                                      OpStore %271 %291 
                                       f32_4 %292 = OpLoad %76 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                         f32 %294 = OpLoad %271 
                                       f32_2 %295 = OpCompositeConstruct %294 %294 
                                       f32_2 %296 = OpFMul %293 %295 
                                       f32_4 %297 = OpLoad %114 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %114 %298 
                                       f32_4 %299 = OpLoad %114 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 3 
                                       f32_3 %301 = OpExtInst %1 40 %300 %110 
                                       f32_4 %302 = OpLoad %76 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %76 %303 
                                       f32_4 %304 = OpLoad %76 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %307 = OpExtInst %1 37 %305 %306 
                                       f32_4 %308 = OpLoad %76 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %76 %309 
                                Private f32* %310 = OpAccessChain %76 %29 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                Private f32* %313 = OpAccessChain %76 %154 
                                                      OpStore %313 %312 
                                Private f32* %314 = OpAccessChain %9 %29 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFNegate %315 
                                Private f32* %317 = OpAccessChain %9 %154 
                                                      OpStore %317 %316 
                                Uniform f32* %323 = OpAccessChain %18 %322 
                                         f32 %324 = OpLoad %323 
                                       f32_4 %325 = OpCompositeConstruct %324 %324 %324 %324 
                                      bool_4 %327 = OpFOrdNotEqual %321 %325 
                                        bool %328 = OpAny %327 
                                                      OpStore %320 %328 
                                        bool %329 = OpLoad %320 
                                                      OpSelectionMerge %333 None 
                                                      OpBranchConditional %329 %332 %336 
                                             %332 = OpLabel 
                                       f32_4 %334 = OpLoad %76 
                                       f32_3 %335 = OpVectorShuffle %334 %334 3 2 1 
                                                      OpStore %331 %335 
                                                      OpBranch %333 
                                             %336 = OpLabel 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 3 1 2 
                                                      OpStore %331 %338 
                                                      OpBranch %333 
                                             %333 = OpLabel 
                                       f32_3 %339 = OpLoad %331 
                                       f32_4 %340 = OpLoad %9 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %9 %341 
                                       f32_4 %342 = OpLoad %9 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                              Uniform f32_4* %344 = OpAccessChain %18 %179 %19 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                         f32 %347 = OpDot %343 %346 
                                Private f32* %348 = OpAccessChain %76 %29 
                                                      OpStore %348 %347 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                              Uniform f32_4* %351 = OpAccessChain %18 %179 %167 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %354 = OpDot %350 %353 
                                Private f32* %355 = OpAccessChain %76 %20 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                              Uniform f32_4* %358 = OpAccessChain %18 %179 %179 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                         f32 %361 = OpDot %357 %360 
                                Private f32* %362 = OpAccessChain %76 %288 
                                                      OpStore %362 %361 
                                       f32_4 %363 = OpLoad %76 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_4 %365 = OpLoad %76 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                         f32 %367 = OpDot %364 %366 
                                Private f32* %368 = OpAccessChain %9 %29 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %9 %29 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpExtInst %1 32 %370 
                                Private f32* %372 = OpAccessChain %9 %29 
                                                      OpStore %372 %371 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_4 %376 = OpLoad %76 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                                      OpStore vs_TEXCOORD1 %378 
                                                      OpStore vs_TEXCOORD4 %321 
                                 Output f32* %381 = OpAccessChain %225 %19 %20 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFNegate %382 
                                 Output f32* %384 = OpAccessChain %225 %19 %20 
                                                      OpStore %384 %383 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 110
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %44 %64 %89 %97 %99 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 Location 9 
                                             OpMemberDecorate %17 0 Offset 17 
                                             OpMemberDecorate %17 1 Offset 17 
                                             OpMemberDecorate %17 2 Offset 17 
                                             OpDecorate %17 Block 
                                             OpDecorate %19 DescriptorSet 19 
                                             OpDecorate %19 Binding 19 
                                             OpDecorate %34 DescriptorSet 34 
                                             OpDecorate %34 Binding 34 
                                             OpDecorate %38 DescriptorSet 38 
                                             OpDecorate %38 Binding 38 
                                             OpDecorate vs_TEXCOORD0 Location 44 
                                             OpDecorate %64 Location 64 
                                             OpDecorate %89 Location 89 
                                             OpDecorate %97 Location 97 
                                             OpDecorate vs_TEXCOORD1 Location 99 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypePointer Private %6 
                        Private f32* %16 = OpVariable Private 
                                     %17 = OpTypeStruct %6 %6 %7 
                                     %18 = OpTypePointer Uniform %17 
  Uniform struct {f32; f32; f32_4;}* %19 = OpVariable Uniform 
                                     %20 = OpTypeInt 32 1 
                                 i32 %21 = OpConstant 1 
                                     %22 = OpTypePointer Uniform %6 
                                 f32 %26 = OpConstant 3.674022E-40 
                                     %29 = OpTypeVector %6 3 
                                     %30 = OpTypePointer Private %29 
                      Private f32_3* %31 = OpVariable Private 
                                     %32 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %33 = OpTypePointer UniformConstant %32 
UniformConstant read_only Texture2D* %34 = OpVariable UniformConstant 
                                     %36 = OpTypeSampler 
                                     %37 = OpTypePointer UniformConstant %36 
            UniformConstant sampler* %38 = OpVariable UniformConstant 
                                     %40 = OpTypeSampledImage %32 
                                     %42 = OpTypeVector %6 2 
                                     %43 = OpTypePointer Input %42 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %48 = OpVariable Private 
                                 i32 %50 = OpConstant 2 
                                     %51 = OpTypePointer Uniform %7 
                                 f32 %61 = OpConstant 3.674022E-40 
                               f32_3 %62 = OpConstantComposite %61 %61 %61 
                       Output f32_4* %64 = OpVariable Output 
                                 f32 %78 = OpConstant 3.674022E-40 
                               f32_3 %79 = OpConstantComposite %78 %78 %78 
                       Output f32_4* %89 = OpVariable Output 
                                 i32 %93 = OpConstant 0 
                       Output f32_4* %97 = OpVariable Output 
                                     %98 = OpTypePointer Input %29 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                f32 %101 = OpConstant 3.674022E-40 
                              f32_3 %102 = OpConstantComposite %101 %101 %101 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                        Uniform f32* %23 = OpAccessChain %19 %21 
                                 f32 %24 = OpLoad %23 
                                 f32 %25 = OpFNegate %24 
                                 f32 %27 = OpFMul %25 %26 
                                 f32 %28 = OpFAdd %27 %26 
                                             OpStore %16 %28 
                 read_only Texture2D %35 = OpLoad %34 
                             sampler %39 = OpLoad %38 
          read_only Texture2DSampled %41 = OpSampledImage %35 %39 
                               f32_2 %45 = OpLoad vs_TEXCOORD0 
                               f32_4 %46 = OpImageSampleImplicitLod %41 %45 
                               f32_3 %47 = OpVectorShuffle %46 %46 0 1 2 
                                             OpStore %31 %47 
                               f32_3 %49 = OpLoad %31 
                      Uniform f32_4* %52 = OpAccessChain %19 %50 
                               f32_4 %53 = OpLoad %52 
                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               f32_3 %55 = OpFMul %49 %54 
                                             OpStore %48 %55 
                               f32_3 %56 = OpLoad %31 
                      Uniform f32_4* %57 = OpAccessChain %19 %50 
                               f32_4 %58 = OpLoad %57 
                               f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                               f32_3 %60 = OpFMul %56 %59 
                               f32_3 %63 = OpFAdd %60 %62 
                                             OpStore %31 %63 
                        Uniform f32* %65 = OpAccessChain %19 %21 
                                 f32 %66 = OpLoad %65 
                        Uniform f32* %67 = OpAccessChain %19 %21 
                                 f32 %68 = OpLoad %67 
                        Uniform f32* %69 = OpAccessChain %19 %21 
                                 f32 %70 = OpLoad %69 
                               f32_3 %71 = OpCompositeConstruct %66 %68 %70 
                                 f32 %72 = OpCompositeExtract %71 0 
                                 f32 %73 = OpCompositeExtract %71 1 
                                 f32 %74 = OpCompositeExtract %71 2 
                               f32_3 %75 = OpCompositeConstruct %72 %73 %74 
                               f32_3 %76 = OpLoad %31 
                               f32_3 %77 = OpFMul %75 %76 
                               f32_3 %80 = OpFAdd %77 %79 
                               f32_4 %81 = OpLoad %64 
                               f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                             OpStore %64 %82 
                                 f32 %83 = OpLoad %16 
                               f32_3 %84 = OpCompositeConstruct %83 %83 %83 
                               f32_3 %85 = OpLoad %48 
                               f32_3 %86 = OpFMul %84 %85 
                               f32_4 %87 = OpLoad %9 
                               f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                             OpStore %9 %88 
                               f32_3 %90 = OpLoad %48 
                               f32_4 %91 = OpLoad %89 
                               f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                             OpStore %89 %92 
                        Uniform f32* %94 = OpAccessChain %19 %93 
                                 f32 %95 = OpLoad %94 
                         Output f32* %96 = OpAccessChain %64 %12 
                                             OpStore %96 %95 
                              f32_3 %100 = OpLoad vs_TEXCOORD1 
                              f32_3 %103 = OpFMul %100 %102 
                              f32_3 %104 = OpFAdd %103 %102 
                              f32_4 %105 = OpLoad %97 
                              f32_4 %106 = OpVectorShuffle %105 %104 4 5 6 3 
                                             OpStore %97 %106 
                        Output f32* %107 = OpAccessChain %97 %12 
                                             OpStore %107 %10 
                        Output f32* %108 = OpAccessChain %89 %12 
                                             OpStore %108 %10 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(1) uniform  sampler2D _posTex;
UNITY_LOCATION(2) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
float u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat0 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    SV_Target3.xyz = exp2((-u_xlat2.xyz));
    SV_Target1.w = _Glossiness;
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 386
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %193 %225 %236 %237 %373 %379 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 193 
                                                      OpMemberDecorate %223 0 BuiltIn 223 
                                                      OpMemberDecorate %223 1 BuiltIn 223 
                                                      OpMemberDecorate %223 2 BuiltIn 223 
                                                      OpDecorate %223 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 236 
                                                      OpDecorate %237 Location 237 
                                                      OpDecorate vs_TEXCOORD1 Location 373 
                                                      OpDecorate vs_TEXCOORD4 Location 379 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 7 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 8 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 6 
                                         i32 %119 = OpConstant 5 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 1 
                                             %168 = OpTypePointer Uniform %7 
                                         i32 %179 = OpConstant 2 
                                         i32 %188 = OpConstant 3 
                                             %192 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %222 = OpTypeArray %6 %20 
                                             %223 = OpTypeStruct %7 %6 %222 
                                             %224 = OpTypePointer Output %223 
        Output struct {f32_4; f32; f32[1];}* %225 = OpVariable Output 
                                             %233 = OpTypePointer Output %7 
                                             %235 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %237 = OpVariable Input 
                                         i32 %240 = OpConstant 9 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_2 %264 = OpConstantComposite %263 %263 
                                         f32 %266 = OpConstant 3.674022E-40 
                                       f32_2 %267 = OpConstantComposite %266 %266 
                                Private f32* %271 = OpVariable Private 
                                         f32 %280 = OpConstant 3.674022E-40 
                                         f32 %281 = OpConstant 3.674022E-40 
                                       f32_2 %282 = OpConstantComposite %280 %281 
                                       f32_2 %284 = OpConstantComposite %56 %56 
                                         u32 %288 = OpConstant 2 
                                       f32_3 %306 = OpConstantComposite %56 %56 %56 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                       f32_4 %321 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %322 = OpConstant 4 
                                             %326 = OpTypeVector %318 4 
                                             %330 = OpTypePointer Function %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                             %380 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %331 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %169 = OpAccessChain %18 %167 %167 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpFMul %166 %170 
                                                      OpStore %164 %171 
                              Uniform f32_4* %172 = OpAccessChain %18 %167 %19 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpLoad %114 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %164 
                                       f32_4 %178 = OpFAdd %176 %177 
                                                      OpStore %164 %178 
                              Uniform f32_4* %180 = OpAccessChain %18 %167 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpLoad %114 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %164 
                                       f32_4 %186 = OpFAdd %184 %185 
                                                      OpStore %114 %186 
                                       f32_4 %187 = OpLoad %114 
                              Uniform f32_4* %189 = OpAccessChain %18 %167 %188 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpFAdd %187 %190 
                                                      OpStore %164 %191 
                              Uniform f32_4* %194 = OpAccessChain %18 %167 %188 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %158 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %114 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD2 %202 
                                       f32_4 %203 = OpLoad %164 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 1 1 1 
                              Uniform f32_4* %205 = OpAccessChain %18 %188 %167 
                                       f32_4 %206 = OpLoad %205 
                                       f32_4 %207 = OpFMul %204 %206 
                                                      OpStore %114 %207 
                              Uniform f32_4* %208 = OpAccessChain %18 %188 %19 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %164 
                                       f32_4 %211 = OpVectorShuffle %210 %210 0 0 0 0 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %114 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %114 %214 
                              Uniform f32_4* %215 = OpAccessChain %18 %188 %179 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %164 
                                       f32_4 %218 = OpVectorShuffle %217 %217 2 2 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %114 
                                       f32_4 %221 = OpFAdd %219 %220 
                                                      OpStore %114 %221 
                              Uniform f32_4* %226 = OpAccessChain %18 %188 %188 
                                       f32_4 %227 = OpLoad %226 
                                       f32_4 %228 = OpLoad %164 
                                       f32_4 %229 = OpVectorShuffle %228 %228 3 3 3 3 
                                       f32_4 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %114 
                                       f32_4 %232 = OpFAdd %230 %231 
                               Output f32_4* %234 = OpAccessChain %225 %19 
                                                      OpStore %234 %232 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                              Uniform f32_4* %241 = OpAccessChain %18 %240 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                              Uniform f32_4* %245 = OpAccessChain %18 %240 
                                       f32_4 %246 = OpLoad %245 
                                       f32_2 %247 = OpVectorShuffle %246 %246 2 3 
                                       f32_2 %248 = OpFAdd %244 %247 
                                                      OpStore vs_TEXCOORD0 %248 
                                Private f32* %249 = OpAccessChain %76 %20 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpExtInst %1 8 %250 
                                Private f32* %252 = OpAccessChain %114 %29 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %114 %29 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFNegate %254 
                                         f32 %256 = OpFMul %255 %146 
                                Private f32* %257 = OpAccessChain %76 %29 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %114 %20 
                                                      OpStore %260 %259 
                                       f32_4 %261 = OpLoad %114 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_2 %265 = OpFMul %262 %264 
                                       f32_2 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %76 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %76 %270 
                                       f32_4 %272 = OpLoad %76 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_4 %274 = OpLoad %76 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                         f32 %276 = OpDot %273 %275 
                                                      OpStore %271 %276 
                                         f32 %277 = OpLoad %271 
                                       f32_2 %278 = OpCompositeConstruct %277 %277 
                                       f32_2 %279 = OpFNegate %278 
                                       f32_2 %283 = OpFMul %279 %282 
                                       f32_2 %285 = OpFAdd %283 %284 
                                       f32_4 %286 = OpLoad %114 
                                       f32_4 %287 = OpVectorShuffle %286 %285 0 1 4 5 
                                                      OpStore %114 %287 
                                Private f32* %289 = OpAccessChain %114 %288 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpExtInst %1 31 %290 
                                                      OpStore %271 %291 
                                       f32_4 %292 = OpLoad %76 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                         f32 %294 = OpLoad %271 
                                       f32_2 %295 = OpCompositeConstruct %294 %294 
                                       f32_2 %296 = OpFMul %293 %295 
                                       f32_4 %297 = OpLoad %114 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %114 %298 
                                       f32_4 %299 = OpLoad %114 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 3 
                                       f32_3 %301 = OpExtInst %1 40 %300 %110 
                                       f32_4 %302 = OpLoad %76 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %76 %303 
                                       f32_4 %304 = OpLoad %76 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %307 = OpExtInst %1 37 %305 %306 
                                       f32_4 %308 = OpLoad %76 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %76 %309 
                                Private f32* %310 = OpAccessChain %76 %29 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                Private f32* %313 = OpAccessChain %76 %154 
                                                      OpStore %313 %312 
                                Private f32* %314 = OpAccessChain %9 %29 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFNegate %315 
                                Private f32* %317 = OpAccessChain %9 %154 
                                                      OpStore %317 %316 
                                Uniform f32* %323 = OpAccessChain %18 %322 
                                         f32 %324 = OpLoad %323 
                                       f32_4 %325 = OpCompositeConstruct %324 %324 %324 %324 
                                      bool_4 %327 = OpFOrdNotEqual %321 %325 
                                        bool %328 = OpAny %327 
                                                      OpStore %320 %328 
                                        bool %329 = OpLoad %320 
                                                      OpSelectionMerge %333 None 
                                                      OpBranchConditional %329 %332 %336 
                                             %332 = OpLabel 
                                       f32_4 %334 = OpLoad %76 
                                       f32_3 %335 = OpVectorShuffle %334 %334 3 2 1 
                                                      OpStore %331 %335 
                                                      OpBranch %333 
                                             %336 = OpLabel 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 3 1 2 
                                                      OpStore %331 %338 
                                                      OpBranch %333 
                                             %333 = OpLabel 
                                       f32_3 %339 = OpLoad %331 
                                       f32_4 %340 = OpLoad %9 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %9 %341 
                                       f32_4 %342 = OpLoad %9 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                              Uniform f32_4* %344 = OpAccessChain %18 %179 %19 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                         f32 %347 = OpDot %343 %346 
                                Private f32* %348 = OpAccessChain %76 %29 
                                                      OpStore %348 %347 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                              Uniform f32_4* %351 = OpAccessChain %18 %179 %167 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %354 = OpDot %350 %353 
                                Private f32* %355 = OpAccessChain %76 %20 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                              Uniform f32_4* %358 = OpAccessChain %18 %179 %179 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                         f32 %361 = OpDot %357 %360 
                                Private f32* %362 = OpAccessChain %76 %288 
                                                      OpStore %362 %361 
                                       f32_4 %363 = OpLoad %76 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_4 %365 = OpLoad %76 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                         f32 %367 = OpDot %364 %366 
                                Private f32* %368 = OpAccessChain %9 %29 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %9 %29 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpExtInst %1 32 %370 
                                Private f32* %372 = OpAccessChain %9 %29 
                                                      OpStore %372 %371 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_4 %376 = OpLoad %76 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                                      OpStore vs_TEXCOORD1 %378 
                                                      OpStore vs_TEXCOORD4 %321 
                                 Output f32* %381 = OpAccessChain %225 %19 %20 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFNegate %382 
                                 Output f32* %384 = OpAccessChain %225 %19 %20 
                                                      OpStore %384 %383 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 112
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %44 %64 %89 %99 %101 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %9 Location 9 
                                             OpMemberDecorate %17 0 Offset 17 
                                             OpMemberDecorate %17 1 Offset 17 
                                             OpMemberDecorate %17 2 Offset 17 
                                             OpDecorate %17 Block 
                                             OpDecorate %19 DescriptorSet 19 
                                             OpDecorate %19 Binding 19 
                                             OpDecorate %34 DescriptorSet 34 
                                             OpDecorate %34 Binding 34 
                                             OpDecorate %38 DescriptorSet 38 
                                             OpDecorate %38 Binding 38 
                                             OpDecorate vs_TEXCOORD0 Location 44 
                                             OpDecorate %64 Location 64 
                                             OpDecorate %89 Location 89 
                                             OpDecorate %99 Location 99 
                                             OpDecorate vs_TEXCOORD1 Location 101 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypePointer Private %6 
                        Private f32* %16 = OpVariable Private 
                                     %17 = OpTypeStruct %6 %6 %7 
                                     %18 = OpTypePointer Uniform %17 
  Uniform struct {f32; f32; f32_4;}* %19 = OpVariable Uniform 
                                     %20 = OpTypeInt 32 1 
                                 i32 %21 = OpConstant 1 
                                     %22 = OpTypePointer Uniform %6 
                                 f32 %26 = OpConstant 3.674022E-40 
                                     %29 = OpTypeVector %6 3 
                                     %30 = OpTypePointer Private %29 
                      Private f32_3* %31 = OpVariable Private 
                                     %32 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %33 = OpTypePointer UniformConstant %32 
UniformConstant read_only Texture2D* %34 = OpVariable UniformConstant 
                                     %36 = OpTypeSampler 
                                     %37 = OpTypePointer UniformConstant %36 
            UniformConstant sampler* %38 = OpVariable UniformConstant 
                                     %40 = OpTypeSampledImage %32 
                                     %42 = OpTypeVector %6 2 
                                     %43 = OpTypePointer Input %42 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                      Private f32_3* %48 = OpVariable Private 
                                 i32 %50 = OpConstant 2 
                                     %51 = OpTypePointer Uniform %7 
                                 f32 %61 = OpConstant 3.674022E-40 
                               f32_3 %62 = OpConstantComposite %61 %61 %61 
                       Output f32_4* %64 = OpVariable Output 
                                 f32 %78 = OpConstant 3.674022E-40 
                               f32_3 %79 = OpConstantComposite %78 %78 %78 
                       Output f32_4* %89 = OpVariable Output 
                                 i32 %95 = OpConstant 0 
                       Output f32_4* %99 = OpVariable Output 
                                    %100 = OpTypePointer Input %29 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                f32 %103 = OpConstant 3.674022E-40 
                              f32_3 %104 = OpConstantComposite %103 %103 %103 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                        Uniform f32* %23 = OpAccessChain %19 %21 
                                 f32 %24 = OpLoad %23 
                                 f32 %25 = OpFNegate %24 
                                 f32 %27 = OpFMul %25 %26 
                                 f32 %28 = OpFAdd %27 %26 
                                             OpStore %16 %28 
                 read_only Texture2D %35 = OpLoad %34 
                             sampler %39 = OpLoad %38 
          read_only Texture2DSampled %41 = OpSampledImage %35 %39 
                               f32_2 %45 = OpLoad vs_TEXCOORD0 
                               f32_4 %46 = OpImageSampleImplicitLod %41 %45 
                               f32_3 %47 = OpVectorShuffle %46 %46 0 1 2 
                                             OpStore %31 %47 
                               f32_3 %49 = OpLoad %31 
                      Uniform f32_4* %52 = OpAccessChain %19 %50 
                               f32_4 %53 = OpLoad %52 
                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               f32_3 %55 = OpFMul %49 %54 
                                             OpStore %48 %55 
                               f32_3 %56 = OpLoad %31 
                      Uniform f32_4* %57 = OpAccessChain %19 %50 
                               f32_4 %58 = OpLoad %57 
                               f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                               f32_3 %60 = OpFMul %56 %59 
                               f32_3 %63 = OpFAdd %60 %62 
                                             OpStore %31 %63 
                        Uniform f32* %65 = OpAccessChain %19 %21 
                                 f32 %66 = OpLoad %65 
                        Uniform f32* %67 = OpAccessChain %19 %21 
                                 f32 %68 = OpLoad %67 
                        Uniform f32* %69 = OpAccessChain %19 %21 
                                 f32 %70 = OpLoad %69 
                               f32_3 %71 = OpCompositeConstruct %66 %68 %70 
                                 f32 %72 = OpCompositeExtract %71 0 
                                 f32 %73 = OpCompositeExtract %71 1 
                                 f32 %74 = OpCompositeExtract %71 2 
                               f32_3 %75 = OpCompositeConstruct %72 %73 %74 
                               f32_3 %76 = OpLoad %31 
                               f32_3 %77 = OpFMul %75 %76 
                               f32_3 %80 = OpFAdd %77 %79 
                               f32_4 %81 = OpLoad %64 
                               f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                             OpStore %64 %82 
                                 f32 %83 = OpLoad %16 
                               f32_3 %84 = OpCompositeConstruct %83 %83 %83 
                               f32_3 %85 = OpLoad %48 
                               f32_3 %86 = OpFMul %84 %85 
                               f32_4 %87 = OpLoad %9 
                               f32_4 %88 = OpVectorShuffle %87 %86 4 5 6 3 
                                             OpStore %9 %88 
                               f32_3 %90 = OpLoad %48 
                               f32_3 %91 = OpFNegate %90 
                               f32_3 %92 = OpExtInst %1 29 %91 
                               f32_4 %93 = OpLoad %89 
                               f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                             OpStore %89 %94 
                        Uniform f32* %96 = OpAccessChain %19 %95 
                                 f32 %97 = OpLoad %96 
                         Output f32* %98 = OpAccessChain %64 %12 
                                             OpStore %98 %97 
                              f32_3 %102 = OpLoad vs_TEXCOORD1 
                              f32_3 %105 = OpFMul %102 %104 
                              f32_3 %106 = OpFAdd %105 %104 
                              f32_4 %107 = OpLoad %99 
                              f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                             OpStore %99 %108 
                        Output f32* %109 = OpAccessChain %99 %12 
                                             OpStore %109 %10 
                        Output f32* %110 = OpAccessChain %89 %12 
                                             OpStore %110 %10 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(1) uniform  sampler2D _posTex;
UNITY_LOCATION(2) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
float u_xlat12;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat12 = u_xlat0.y * u_xlat0.y;
    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
float u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat0 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat4.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat4.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target1.w = _Glossiness;
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    SV_Target3.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat4.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 438
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %194 %227 %238 %239 %383 %386 %421 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 194 
                                                      OpMemberDecorate %225 0 BuiltIn 225 
                                                      OpMemberDecorate %225 1 BuiltIn 225 
                                                      OpMemberDecorate %225 2 BuiltIn 225 
                                                      OpDecorate %225 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 238 
                                                      OpDecorate %239 Location 239 
                                                      OpDecorate vs_TEXCOORD1 Location 383 
                                                      OpDecorate vs_TEXCOORD4 Location 386 
                                                      OpDecorate vs_TEXCOORD5 Location 421 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 11 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 12 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 10 
                                         i32 %119 = OpConstant 9 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 5 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                                             %193 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %206 = OpConstant 7 
                                             %224 = OpTypeArray %6 %20 
                                             %225 = OpTypeStruct %7 %6 %224 
                                             %226 = OpTypePointer Output %225 
        Output struct {f32_4; f32; f32[1];}* %227 = OpVariable Output 
                                             %235 = OpTypePointer Output %7 
                                             %237 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %239 = OpVariable Input 
                                         i32 %242 = OpConstant 13 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_2 %266 = OpConstantComposite %265 %265 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_2 %269 = OpConstantComposite %268 %268 
                                Private f32* %273 = OpVariable Private 
                                         f32 %282 = OpConstant 3.674022E-40 
                                         f32 %283 = OpConstant 3.674022E-40 
                                       f32_2 %284 = OpConstantComposite %282 %283 
                                       f32_2 %286 = OpConstantComposite %56 %56 
                                         u32 %290 = OpConstant 2 
                                       f32_3 %308 = OpConstantComposite %56 %56 %56 
                                             %320 = OpTypeBool 
                                             %321 = OpTypePointer Private %320 
                               Private bool* %322 = OpVariable Private 
                                       f32_4 %323 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %324 = OpConstant 8 
                                             %328 = OpTypeVector %320 4 
                                             %332 = OpTypePointer Function %100 
                                         i32 %346 = OpConstant 6 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                Private f32* %387 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %422 = OpConstant 4 
                                             %432 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %333 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %18 %167 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %166 %171 
                                                      OpStore %164 %172 
                              Uniform f32_4* %173 = OpAccessChain %18 %167 %19 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %114 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %164 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %164 %179 
                              Uniform f32_4* %181 = OpAccessChain %18 %167 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %114 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %164 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %114 %187 
                                       f32_4 %188 = OpLoad %114 
                              Uniform f32_4* %190 = OpAccessChain %18 %167 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %164 %192 
                              Uniform f32_4* %195 = OpAccessChain %18 %167 %189 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %158 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %114 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                                      OpStore vs_TEXCOORD2 %203 
                                       f32_4 %204 = OpLoad %164 
                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
                              Uniform f32_4* %207 = OpAccessChain %18 %206 %168 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpFMul %205 %208 
                                                      OpStore %114 %209 
                              Uniform f32_4* %210 = OpAccessChain %18 %206 %19 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %164 
                                       f32_4 %213 = OpVectorShuffle %212 %212 0 0 0 0 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %114 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %114 %216 
                              Uniform f32_4* %217 = OpAccessChain %18 %206 %180 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %164 
                                       f32_4 %220 = OpVectorShuffle %219 %219 2 2 2 2 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %114 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %114 %223 
                              Uniform f32_4* %228 = OpAccessChain %18 %206 %189 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %164 
                                       f32_4 %231 = OpVectorShuffle %230 %230 3 3 3 3 
                                       f32_4 %232 = OpFMul %229 %231 
                                       f32_4 %233 = OpLoad %114 
                                       f32_4 %234 = OpFAdd %232 %233 
                               Output f32_4* %236 = OpAccessChain %227 %19 
                                                      OpStore %236 %234 
                                       f32_4 %240 = OpLoad %239 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                              Uniform f32_4* %243 = OpAccessChain %18 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                                       f32_2 %246 = OpFMul %241 %245 
                              Uniform f32_4* %247 = OpAccessChain %18 %242 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 2 3 
                                       f32_2 %250 = OpFAdd %246 %249 
                                                      OpStore vs_TEXCOORD0 %250 
                                Private f32* %251 = OpAccessChain %76 %20 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpExtInst %1 8 %252 
                                Private f32* %254 = OpAccessChain %114 %29 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %114 %29 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFNegate %256 
                                         f32 %258 = OpFMul %257 %146 
                                Private f32* %259 = OpAccessChain %76 %29 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %114 %20 
                                                      OpStore %262 %261 
                                       f32_4 %263 = OpLoad %114 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                       f32_2 %267 = OpFMul %264 %266 
                                       f32_2 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %76 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 2 3 
                                                      OpStore %76 %272 
                                       f32_4 %274 = OpLoad %76 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_4 %276 = OpLoad %76 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                         f32 %278 = OpDot %275 %277 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                       f32_2 %280 = OpCompositeConstruct %279 %279 
                                       f32_2 %281 = OpFNegate %280 
                                       f32_2 %285 = OpFMul %281 %284 
                                       f32_2 %287 = OpFAdd %285 %286 
                                       f32_4 %288 = OpLoad %114 
                                       f32_4 %289 = OpVectorShuffle %288 %287 0 1 4 5 
                                                      OpStore %114 %289 
                                Private f32* %291 = OpAccessChain %114 %290 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpExtInst %1 31 %292 
                                                      OpStore %273 %293 
                                       f32_4 %294 = OpLoad %76 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                         f32 %296 = OpLoad %273 
                                       f32_2 %297 = OpCompositeConstruct %296 %296 
                                       f32_2 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %114 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 2 3 
                                                      OpStore %114 %300 
                                       f32_4 %301 = OpLoad %114 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 3 
                                       f32_3 %303 = OpExtInst %1 40 %302 %110 
                                       f32_4 %304 = OpLoad %76 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %76 %305 
                                       f32_4 %306 = OpLoad %76 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %309 = OpExtInst %1 37 %307 %308 
                                       f32_4 %310 = OpLoad %76 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %76 %311 
                                Private f32* %312 = OpAccessChain %76 %29 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFNegate %313 
                                Private f32* %315 = OpAccessChain %76 %154 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %9 %29 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFNegate %317 
                                Private f32* %319 = OpAccessChain %9 %154 
                                                      OpStore %319 %318 
                                Uniform f32* %325 = OpAccessChain %18 %324 
                                         f32 %326 = OpLoad %325 
                                       f32_4 %327 = OpCompositeConstruct %326 %326 %326 %326 
                                      bool_4 %329 = OpFOrdNotEqual %323 %327 
                                        bool %330 = OpAny %329 
                                                      OpStore %322 %330 
                                        bool %331 = OpLoad %322 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %331 %334 %338 
                                             %334 = OpLabel 
                                       f32_4 %336 = OpLoad %76 
                                       f32_3 %337 = OpVectorShuffle %336 %336 3 2 1 
                                                      OpStore %333 %337 
                                                      OpBranch %335 
                                             %338 = OpLabel 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 3 1 2 
                                                      OpStore %333 %340 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_3 %341 = OpLoad %333 
                                       f32_4 %342 = OpLoad %9 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %9 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                              Uniform f32_4* %347 = OpAccessChain %18 %346 %19 
                                       f32_4 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                         f32 %350 = OpDot %345 %349 
                                Private f32* %351 = OpAccessChain %76 %29 
                                                      OpStore %351 %350 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                              Uniform f32_4* %354 = OpAccessChain %18 %346 %168 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                         f32 %357 = OpDot %353 %356 
                                Private f32* %358 = OpAccessChain %76 %20 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %9 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                              Uniform f32_4* %361 = OpAccessChain %18 %346 %180 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                         f32 %364 = OpDot %360 %363 
                                Private f32* %365 = OpAccessChain %76 %290 
                                                      OpStore %365 %364 
                                       f32_4 %366 = OpLoad %76 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %76 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                         f32 %370 = OpDot %367 %369 
                                Private f32* %371 = OpAccessChain %9 %29 
                                                      OpStore %371 %370 
                                Private f32* %372 = OpAccessChain %9 %29 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpExtInst %1 32 %373 
                                Private f32* %375 = OpAccessChain %9 %29 
                                                      OpStore %375 %374 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 0 0 
                                       f32_4 %378 = OpLoad %76 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %377 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
                                                      OpStore %9 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                                      OpStore vs_TEXCOORD1 %385 
                                                      OpStore vs_TEXCOORD4 %323 
                                Private f32* %388 = OpAccessChain %9 %20 
                                         f32 %389 = OpLoad %388 
                                Private f32* %390 = OpAccessChain %9 %20 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFMul %389 %391 
                                                      OpStore %387 %392 
                                Private f32* %393 = OpAccessChain %9 %29 
                                         f32 %394 = OpLoad %393 
                                Private f32* %395 = OpAccessChain %9 %29 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFMul %394 %396 
                                         f32 %398 = OpLoad %387 
                                         f32 %399 = OpFNegate %398 
                                         f32 %400 = OpFAdd %397 %399 
                                                      OpStore %387 %400 
                                       f32_4 %401 = OpLoad %9 
                                       f32_4 %402 = OpVectorShuffle %401 %401 1 2 2 0 
                                       f32_4 %403 = OpLoad %9 
                                       f32_4 %404 = OpVectorShuffle %403 %403 0 1 2 2 
                                       f32_4 %405 = OpFMul %402 %404 
                                                      OpStore %76 %405 
                              Uniform f32_4* %406 = OpAccessChain %18 %168 
                                       f32_4 %407 = OpLoad %406 
                                       f32_4 %408 = OpLoad %76 
                                         f32 %409 = OpDot %407 %408 
                                Private f32* %410 = OpAccessChain %9 %29 
                                                      OpStore %410 %409 
                              Uniform f32_4* %411 = OpAccessChain %18 %180 
                                       f32_4 %412 = OpLoad %411 
                                       f32_4 %413 = OpLoad %76 
                                         f32 %414 = OpDot %412 %413 
                                Private f32* %415 = OpAccessChain %9 %20 
                                                      OpStore %415 %414 
                              Uniform f32_4* %416 = OpAccessChain %18 %189 
                                       f32_4 %417 = OpLoad %416 
                                       f32_4 %418 = OpLoad %76 
                                         f32 %419 = OpDot %417 %418 
                                Private f32* %420 = OpAccessChain %9 %290 
                                                      OpStore %420 %419 
                              Uniform f32_4* %423 = OpAccessChain %18 %422 
                                       f32_4 %424 = OpLoad %423 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                         f32 %426 = OpLoad %387 
                                       f32_3 %427 = OpCompositeConstruct %426 %426 %426 
                                       f32_3 %428 = OpFMul %425 %427 
                                       f32_4 %429 = OpLoad %9 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_3 %431 = OpFAdd %428 %430 
                                                      OpStore vs_TEXCOORD5 %431 
                                 Output f32* %433 = OpAccessChain %227 %19 %20 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFNegate %434 
                                 Output f32* %436 = OpAccessChain %227 %19 %20 
                                                      OpStore %436 %435 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 158
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %9 %46 %66 %96 %98 %135 %147 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 Location 9 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %36 DescriptorSet 36 
                                                      OpDecorate %36 Binding 36 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD0 Location 46 
                                                      OpDecorate %66 Location 66 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate vs_TEXCOORD1 Location 98 
                                                      OpDecorate vs_TEXCOORD5 Location 135 
                                                      OpDecorate %147 Location 147 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Output %7 
                                 Output f32_4* %9 = OpVariable Output 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 3 
                                              %13 = OpTypePointer Output %6 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypePointer Private %15 
                               Private f32_3* %17 = OpVariable Private 
                                              %18 = OpTypeStruct %7 %7 %7 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 4 
                                              %23 = OpTypePointer Uniform %6 
                                          f32 %27 = OpConstant 3.674022E-40 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_3* %33 = OpVariable Private 
                                              %34 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %35 = OpTypePointer UniformConstant %34 
         UniformConstant read_only Texture2D* %36 = OpVariable UniformConstant 
                                              %38 = OpTypeSampler 
                                              %39 = OpTypePointer UniformConstant %38 
                     UniformConstant sampler* %40 = OpVariable UniformConstant 
                                              %42 = OpTypeSampledImage %34 
                                              %44 = OpTypeVector %6 2 
                                              %45 = OpTypePointer Input %44 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %50 = OpVariable Private 
                                          i32 %52 = OpConstant 5 
                                              %53 = OpTypePointer Uniform %7 
                                          f32 %63 = OpConstant 3.674022E-40 
                                        f32_3 %64 = OpConstantComposite %63 %63 %63 
                                Output f32_4* %66 = OpVariable Output 
                                          f32 %80 = OpConstant 3.674022E-40 
                                        f32_3 %81 = OpConstantComposite %80 %80 %80 
                                          i32 %92 = OpConstant 3 
                                Output f32_4* %96 = OpVariable Output 
                                              %97 = OpTypePointer Input %15 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %100 %100 %100 
                                             %107 = OpTypePointer Private %7 
                              Private f32_4* %108 = OpVariable Private 
                              Private f32_3* %113 = OpVariable Private 
                                         i32 %114 = OpConstant 0 
                                         i32 %120 = OpConstant 1 
                                         u32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant 2 
                                         u32 %132 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_3 %143 = OpConstantComposite %142 %142 %142 
                               Output f32_4* %147 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                  Output f32* %14 = OpAccessChain %9 %12 
                                                      OpStore %14 %10 
                                 Uniform f32* %24 = OpAccessChain %20 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                          f32 %28 = OpFMul %26 %27 
                                          f32 %29 = OpFAdd %28 %27 
                                 Private f32* %32 = OpAccessChain %17 %30 
                                                      OpStore %32 %29 
                          read_only Texture2D %37 = OpLoad %36 
                                      sampler %41 = OpLoad %40 
                   read_only Texture2DSampled %43 = OpSampledImage %37 %41 
                                        f32_2 %47 = OpLoad vs_TEXCOORD0 
                                        f32_4 %48 = OpImageSampleImplicitLod %43 %47 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                                      OpStore %33 %49 
                                        f32_3 %51 = OpLoad %33 
                               Uniform f32_4* %54 = OpAccessChain %20 %52 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_3 %57 = OpFMul %51 %56 
                                                      OpStore %50 %57 
                                        f32_3 %58 = OpLoad %33 
                               Uniform f32_4* %59 = OpAccessChain %20 %52 
                                        f32_4 %60 = OpLoad %59 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFMul %58 %61 
                                        f32_3 %65 = OpFAdd %62 %64 
                                                      OpStore %33 %65 
                                 Uniform f32* %67 = OpAccessChain %20 %22 
                                          f32 %68 = OpLoad %67 
                                 Uniform f32* %69 = OpAccessChain %20 %22 
                                          f32 %70 = OpLoad %69 
                                 Uniform f32* %71 = OpAccessChain %20 %22 
                                          f32 %72 = OpLoad %71 
                                        f32_3 %73 = OpCompositeConstruct %68 %70 %72 
                                          f32 %74 = OpCompositeExtract %73 0 
                                          f32 %75 = OpCompositeExtract %73 1 
                                          f32 %76 = OpCompositeExtract %73 2 
                                        f32_3 %77 = OpCompositeConstruct %74 %75 %76 
                                        f32_3 %78 = OpLoad %33 
                                        f32_3 %79 = OpFMul %77 %78 
                                        f32_3 %82 = OpFAdd %79 %81 
                                        f32_4 %83 = OpLoad %66 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %66 %84 
                                        f32_3 %85 = OpLoad %17 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 0 0 
                                        f32_3 %87 = OpLoad %50 
                                        f32_3 %88 = OpFMul %86 %87 
                                                      OpStore %17 %88 
                                        f32_3 %89 = OpLoad %17 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 6 3 
                                                      OpStore %9 %91 
                                 Uniform f32* %93 = OpAccessChain %20 %92 
                                          f32 %94 = OpLoad %93 
                                  Output f32* %95 = OpAccessChain %66 %12 
                                                      OpStore %95 %94 
                                        f32_3 %99 = OpLoad vs_TEXCOORD1 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_3 %103 = OpFAdd %102 %101 
                                       f32_4 %104 = OpLoad %96 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %96 %105 
                                 Output f32* %106 = OpAccessChain %96 %12 
                                                      OpStore %106 %10 
                                       f32_3 %109 = OpLoad vs_TEXCOORD1 
                                       f32_4 %110 = OpLoad %108 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %108 %111 
                                Private f32* %112 = OpAccessChain %108 %12 
                                                      OpStore %112 %10 
                              Uniform f32_4* %115 = OpAccessChain %20 %114 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %108 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %119 = OpAccessChain %113 %30 
                                                      OpStore %119 %118 
                              Uniform f32_4* %121 = OpAccessChain %20 %120 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %108 
                                         f32 %124 = OpDot %122 %123 
                                Private f32* %126 = OpAccessChain %113 %125 
                                                      OpStore %126 %124 
                              Uniform f32_4* %128 = OpAccessChain %20 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %108 
                                         f32 %131 = OpDot %129 %130 
                                Private f32* %133 = OpAccessChain %113 %132 
                                                      OpStore %133 %131 
                                       f32_3 %134 = OpLoad %113 
                                       f32_3 %136 = OpLoad vs_TEXCOORD5 
                                       f32_3 %137 = OpFAdd %134 %136 
                                       f32_4 %138 = OpLoad %108 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
                                                      OpStore %108 %139 
                                       f32_4 %140 = OpLoad %108 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %144 = OpExtInst %1 40 %141 %143 
                                       f32_4 %145 = OpLoad %108 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %108 %146 
                                       f32_3 %148 = OpLoad %17 
                                       f32_4 %149 = OpLoad %108 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_3 %152 = OpLoad %50 
                                       f32_3 %153 = OpFAdd %151 %152 
                                       f32_4 %154 = OpLoad %147 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %147 %155 
                                 Output f32* %156 = OpAccessChain %147 %12 
                                                      OpStore %156 %10 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(1) uniform  sampler2D _posTex;
UNITY_LOCATION(2) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat9;
float u_xlat12;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = (-_boundingMin) + _boundingMax;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xxx + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat2.w = (-u_xlat2.x);
    u_xlat2.xyz = u_xlat2.wzy + in_POSITION0.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = floor(u_xlat1.y);
    u_xlat2.y = (-u_xlat2.x) * 32.0 + u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat2.zw = (-vec2(u_xlat9)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat9 = sqrt(u_xlat2.z);
    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
    u_xlat1.xyz = max(u_xlat2.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.wzy : u_xlat0.wyz;
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat12 = u_xlat0.y * u_xlat0.y;
    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat0.x = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat4.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target1.w = _Glossiness;
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat4.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 438
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %158 %194 %227 %238 %239 %383 %386 %421 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpMemberDecorate %16 11 Offset 16 
                                                      OpMemberDecorate %16 12 Offset 16 
                                                      OpMemberDecorate %16 13 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD2 Location 194 
                                                      OpMemberDecorate %225 0 BuiltIn 225 
                                                      OpMemberDecorate %225 1 BuiltIn 225 
                                                      OpMemberDecorate %225 2 BuiltIn 225 
                                                      OpDecorate %225 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 238 
                                                      OpDecorate %239 Location 239 
                                                      OpDecorate vs_TEXCOORD1 Location 383 
                                                      OpDecorate vs_TEXCOORD4 Location 386 
                                                      OpDecorate vs_TEXCOORD5 Location 421 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 %7 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32; f32_4;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 11 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 12 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         i32 %115 = OpConstant 10 
                                         i32 %119 = OpConstant 9 
                                         f32 %145 = OpConstant 3.674022E-40 
                                         f32 %146 = OpConstant 3.674022E-40 
                                       f32_2 %147 = OpConstantComposite %145 %146 
                                         u32 %154 = OpConstant 3 
                                Input f32_4* %158 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         i32 %167 = OpConstant 5 
                                         i32 %168 = OpConstant 1 
                                             %169 = OpTypePointer Uniform %7 
                                         i32 %180 = OpConstant 2 
                                         i32 %189 = OpConstant 3 
                                             %193 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %206 = OpConstant 7 
                                             %224 = OpTypeArray %6 %20 
                                             %225 = OpTypeStruct %7 %6 %224 
                                             %226 = OpTypePointer Output %225 
        Output struct {f32_4; f32; f32[1];}* %227 = OpVariable Output 
                                             %235 = OpTypePointer Output %7 
                                             %237 = OpTypePointer Output %87 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %239 = OpVariable Input 
                                         i32 %242 = OpConstant 13 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_2 %266 = OpConstantComposite %265 %265 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_2 %269 = OpConstantComposite %268 %268 
                                Private f32* %273 = OpVariable Private 
                                         f32 %282 = OpConstant 3.674022E-40 
                                         f32 %283 = OpConstant 3.674022E-40 
                                       f32_2 %284 = OpConstantComposite %282 %283 
                                       f32_2 %286 = OpConstantComposite %56 %56 
                                         u32 %290 = OpConstant 2 
                                       f32_3 %308 = OpConstantComposite %56 %56 %56 
                                             %320 = OpTypeBool 
                                             %321 = OpTypePointer Private %320 
                               Private bool* %322 = OpVariable Private 
                                       f32_4 %323 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %324 = OpConstant 8 
                                             %328 = OpTypeVector %320 4 
                                             %332 = OpTypePointer Function %100 
                                         i32 %346 = OpConstant 6 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                Private f32* %387 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %422 = OpConstant 4 
                                             %432 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %333 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                Uniform f32* %116 = OpAccessChain %18 %115 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                Uniform f32* %120 = OpAccessChain %18 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %118 %121 
                                Private f32* %123 = OpAccessChain %114 %29 
                                                      OpStore %123 %122 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %114 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                Uniform f32* %129 = OpAccessChain %18 %115 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %131 = OpAccessChain %18 %115 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %18 %115 
                                         f32 %134 = OpLoad %133 
                                       f32_3 %135 = OpCompositeConstruct %130 %132 %134 
                                         f32 %136 = OpCompositeExtract %135 0 
                                         f32 %137 = OpCompositeExtract %135 1 
                                         f32 %138 = OpCompositeExtract %135 2 
                                       f32_3 %139 = OpCompositeConstruct %136 %137 %138 
                                       f32_3 %140 = OpFAdd %128 %139 
                                       f32_4 %141 = OpLoad %114 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %114 %142 
                                       f32_4 %143 = OpLoad %76 
                                       f32_2 %144 = OpVectorShuffle %143 %143 3 3 
                                       f32_2 %148 = OpFMul %144 %147 
                                       f32_4 %149 = OpLoad %76 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 2 3 
                                                      OpStore %76 %150 
                                Private f32* %151 = OpAccessChain %114 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                Private f32* %155 = OpAccessChain %114 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %114 
                                       f32_3 %157 = OpVectorShuffle %156 %156 3 2 1 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %114 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %114 %163 
                                       f32_4 %165 = OpLoad %114 
                                       f32_4 %166 = OpVectorShuffle %165 %165 1 1 1 1 
                              Uniform f32_4* %170 = OpAccessChain %18 %167 %168 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpFMul %166 %171 
                                                      OpStore %164 %172 
                              Uniform f32_4* %173 = OpAccessChain %18 %167 %19 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %114 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %164 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %164 %179 
                              Uniform f32_4* %181 = OpAccessChain %18 %167 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %114 
                                       f32_4 %184 = OpVectorShuffle %183 %183 2 2 2 2 
                                       f32_4 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %164 
                                       f32_4 %187 = OpFAdd %185 %186 
                                                      OpStore %114 %187 
                                       f32_4 %188 = OpLoad %114 
                              Uniform f32_4* %190 = OpAccessChain %18 %167 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpFAdd %188 %191 
                                                      OpStore %164 %192 
                              Uniform f32_4* %195 = OpAccessChain %18 %167 %189 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_4 %198 = OpLoad %158 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %114 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                                      OpStore vs_TEXCOORD2 %203 
                                       f32_4 %204 = OpLoad %164 
                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
                              Uniform f32_4* %207 = OpAccessChain %18 %206 %168 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpFMul %205 %208 
                                                      OpStore %114 %209 
                              Uniform f32_4* %210 = OpAccessChain %18 %206 %19 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %164 
                                       f32_4 %213 = OpVectorShuffle %212 %212 0 0 0 0 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %114 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %114 %216 
                              Uniform f32_4* %217 = OpAccessChain %18 %206 %180 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %164 
                                       f32_4 %220 = OpVectorShuffle %219 %219 2 2 2 2 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %114 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %114 %223 
                              Uniform f32_4* %228 = OpAccessChain %18 %206 %189 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %164 
                                       f32_4 %231 = OpVectorShuffle %230 %230 3 3 3 3 
                                       f32_4 %232 = OpFMul %229 %231 
                                       f32_4 %233 = OpLoad %114 
                                       f32_4 %234 = OpFAdd %232 %233 
                               Output f32_4* %236 = OpAccessChain %227 %19 
                                                      OpStore %236 %234 
                                       f32_4 %240 = OpLoad %239 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                              Uniform f32_4* %243 = OpAccessChain %18 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                                       f32_2 %246 = OpFMul %241 %245 
                              Uniform f32_4* %247 = OpAccessChain %18 %242 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 2 3 
                                       f32_2 %250 = OpFAdd %246 %249 
                                                      OpStore vs_TEXCOORD0 %250 
                                Private f32* %251 = OpAccessChain %76 %20 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpExtInst %1 8 %252 
                                Private f32* %254 = OpAccessChain %114 %29 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %114 %29 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFNegate %256 
                                         f32 %258 = OpFMul %257 %146 
                                Private f32* %259 = OpAccessChain %76 %29 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %114 %20 
                                                      OpStore %262 %261 
                                       f32_4 %263 = OpLoad %114 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                       f32_2 %267 = OpFMul %264 %266 
                                       f32_2 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %76 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 2 3 
                                                      OpStore %76 %272 
                                       f32_4 %274 = OpLoad %76 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_4 %276 = OpLoad %76 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                         f32 %278 = OpDot %275 %277 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                       f32_2 %280 = OpCompositeConstruct %279 %279 
                                       f32_2 %281 = OpFNegate %280 
                                       f32_2 %285 = OpFMul %281 %284 
                                       f32_2 %287 = OpFAdd %285 %286 
                                       f32_4 %288 = OpLoad %114 
                                       f32_4 %289 = OpVectorShuffle %288 %287 0 1 4 5 
                                                      OpStore %114 %289 
                                Private f32* %291 = OpAccessChain %114 %290 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpExtInst %1 31 %292 
                                                      OpStore %273 %293 
                                       f32_4 %294 = OpLoad %76 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                         f32 %296 = OpLoad %273 
                                       f32_2 %297 = OpCompositeConstruct %296 %296 
                                       f32_2 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %114 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 2 3 
                                                      OpStore %114 %300 
                                       f32_4 %301 = OpLoad %114 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 3 
                                       f32_3 %303 = OpExtInst %1 40 %302 %110 
                                       f32_4 %304 = OpLoad %76 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %76 %305 
                                       f32_4 %306 = OpLoad %76 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %309 = OpExtInst %1 37 %307 %308 
                                       f32_4 %310 = OpLoad %76 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %76 %311 
                                Private f32* %312 = OpAccessChain %76 %29 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFNegate %313 
                                Private f32* %315 = OpAccessChain %76 %154 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %9 %29 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFNegate %317 
                                Private f32* %319 = OpAccessChain %9 %154 
                                                      OpStore %319 %318 
                                Uniform f32* %325 = OpAccessChain %18 %324 
                                         f32 %326 = OpLoad %325 
                                       f32_4 %327 = OpCompositeConstruct %326 %326 %326 %326 
                                      bool_4 %329 = OpFOrdNotEqual %323 %327 
                                        bool %330 = OpAny %329 
                                                      OpStore %322 %330 
                                        bool %331 = OpLoad %322 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %331 %334 %338 
                                             %334 = OpLabel 
                                       f32_4 %336 = OpLoad %76 
                                       f32_3 %337 = OpVectorShuffle %336 %336 3 2 1 
                                                      OpStore %333 %337 
                                                      OpBranch %335 
                                             %338 = OpLabel 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 3 1 2 
                                                      OpStore %333 %340 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_3 %341 = OpLoad %333 
                                       f32_4 %342 = OpLoad %9 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %9 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                              Uniform f32_4* %347 = OpAccessChain %18 %346 %19 
                                       f32_4 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                         f32 %350 = OpDot %345 %349 
                                Private f32* %351 = OpAccessChain %76 %29 
                                                      OpStore %351 %350 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                              Uniform f32_4* %354 = OpAccessChain %18 %346 %168 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                         f32 %357 = OpDot %353 %356 
                                Private f32* %358 = OpAccessChain %76 %20 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %9 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                              Uniform f32_4* %361 = OpAccessChain %18 %346 %180 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                         f32 %364 = OpDot %360 %363 
                                Private f32* %365 = OpAccessChain %76 %290 
                                                      OpStore %365 %364 
                                       f32_4 %366 = OpLoad %76 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %76 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                         f32 %370 = OpDot %367 %369 
                                Private f32* %371 = OpAccessChain %9 %29 
                                                      OpStore %371 %370 
                                Private f32* %372 = OpAccessChain %9 %29 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpExtInst %1 32 %373 
                                Private f32* %375 = OpAccessChain %9 %29 
                                                      OpStore %375 %374 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 0 0 
                                       f32_4 %378 = OpLoad %76 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %377 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
                                                      OpStore %9 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                                      OpStore vs_TEXCOORD1 %385 
                                                      OpStore vs_TEXCOORD4 %323 
                                Private f32* %388 = OpAccessChain %9 %20 
                                         f32 %389 = OpLoad %388 
                                Private f32* %390 = OpAccessChain %9 %20 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFMul %389 %391 
                                                      OpStore %387 %392 
                                Private f32* %393 = OpAccessChain %9 %29 
                                         f32 %394 = OpLoad %393 
                                Private f32* %395 = OpAccessChain %9 %29 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFMul %394 %396 
                                         f32 %398 = OpLoad %387 
                                         f32 %399 = OpFNegate %398 
                                         f32 %400 = OpFAdd %397 %399 
                                                      OpStore %387 %400 
                                       f32_4 %401 = OpLoad %9 
                                       f32_4 %402 = OpVectorShuffle %401 %401 1 2 2 0 
                                       f32_4 %403 = OpLoad %9 
                                       f32_4 %404 = OpVectorShuffle %403 %403 0 1 2 2 
                                       f32_4 %405 = OpFMul %402 %404 
                                                      OpStore %76 %405 
                              Uniform f32_4* %406 = OpAccessChain %18 %168 
                                       f32_4 %407 = OpLoad %406 
                                       f32_4 %408 = OpLoad %76 
                                         f32 %409 = OpDot %407 %408 
                                Private f32* %410 = OpAccessChain %9 %29 
                                                      OpStore %410 %409 
                              Uniform f32_4* %411 = OpAccessChain %18 %180 
                                       f32_4 %412 = OpLoad %411 
                                       f32_4 %413 = OpLoad %76 
                                         f32 %414 = OpDot %412 %413 
                                Private f32* %415 = OpAccessChain %9 %20 
                                                      OpStore %415 %414 
                              Uniform f32_4* %416 = OpAccessChain %18 %189 
                                       f32_4 %417 = OpLoad %416 
                                       f32_4 %418 = OpLoad %76 
                                         f32 %419 = OpDot %417 %418 
                                Private f32* %420 = OpAccessChain %9 %290 
                                                      OpStore %420 %419 
                              Uniform f32_4* %423 = OpAccessChain %18 %422 
                                       f32_4 %424 = OpLoad %423 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                         f32 %426 = OpLoad %387 
                                       f32_3 %427 = OpCompositeConstruct %426 %426 %426 
                                       f32_3 %428 = OpFMul %425 %427 
                                       f32_4 %429 = OpLoad %9 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_3 %431 = OpFAdd %428 %430 
                                                      OpStore vs_TEXCOORD5 %431 
                                 Output f32* %433 = OpAccessChain %227 %19 %20 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFNegate %434 
                                 Output f32* %436 = OpAccessChain %227 %19 %20 
                                                      OpStore %436 %435 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 161
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %9 %46 %66 %96 %98 %135 %153 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %9 Location 9 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %36 DescriptorSet 36 
                                                      OpDecorate %36 Binding 36 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD0 Location 46 
                                                      OpDecorate %66 Location 66 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate vs_TEXCOORD1 Location 98 
                                                      OpDecorate vs_TEXCOORD5 Location 135 
                                                      OpDecorate %153 Location 153 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Output %7 
                                 Output f32_4* %9 = OpVariable Output 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 3 
                                              %13 = OpTypePointer Output %6 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypePointer Private %15 
                               Private f32_3* %17 = OpVariable Private 
                                              %18 = OpTypeStruct %7 %7 %7 %6 %6 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4; f32; f32; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 4 
                                              %23 = OpTypePointer Uniform %6 
                                          f32 %27 = OpConstant 3.674022E-40 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_3* %33 = OpVariable Private 
                                              %34 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %35 = OpTypePointer UniformConstant %34 
         UniformConstant read_only Texture2D* %36 = OpVariable UniformConstant 
                                              %38 = OpTypeSampler 
                                              %39 = OpTypePointer UniformConstant %38 
                     UniformConstant sampler* %40 = OpVariable UniformConstant 
                                              %42 = OpTypeSampledImage %34 
                                              %44 = OpTypeVector %6 2 
                                              %45 = OpTypePointer Input %44 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_3* %50 = OpVariable Private 
                                          i32 %52 = OpConstant 5 
                                              %53 = OpTypePointer Uniform %7 
                                          f32 %63 = OpConstant 3.674022E-40 
                                        f32_3 %64 = OpConstantComposite %63 %63 %63 
                                Output f32_4* %66 = OpVariable Output 
                                          f32 %80 = OpConstant 3.674022E-40 
                                        f32_3 %81 = OpConstantComposite %80 %80 %80 
                                          i32 %92 = OpConstant 3 
                                Output f32_4* %96 = OpVariable Output 
                                              %97 = OpTypePointer Input %15 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %100 %100 %100 
                                             %107 = OpTypePointer Private %7 
                              Private f32_4* %108 = OpVariable Private 
                              Private f32_3* %113 = OpVariable Private 
                                         i32 %114 = OpConstant 0 
                                         i32 %120 = OpConstant 1 
                                         u32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant 2 
                                         u32 %132 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_3 %143 = OpConstantComposite %142 %142 %142 
                               Output f32_4* %153 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                  Output f32* %14 = OpAccessChain %9 %12 
                                                      OpStore %14 %10 
                                 Uniform f32* %24 = OpAccessChain %20 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                          f32 %28 = OpFMul %26 %27 
                                          f32 %29 = OpFAdd %28 %27 
                                 Private f32* %32 = OpAccessChain %17 %30 
                                                      OpStore %32 %29 
                          read_only Texture2D %37 = OpLoad %36 
                                      sampler %41 = OpLoad %40 
                   read_only Texture2DSampled %43 = OpSampledImage %37 %41 
                                        f32_2 %47 = OpLoad vs_TEXCOORD0 
                                        f32_4 %48 = OpImageSampleImplicitLod %43 %47 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                                      OpStore %33 %49 
                                        f32_3 %51 = OpLoad %33 
                               Uniform f32_4* %54 = OpAccessChain %20 %52 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_3 %57 = OpFMul %51 %56 
                                                      OpStore %50 %57 
                                        f32_3 %58 = OpLoad %33 
                               Uniform f32_4* %59 = OpAccessChain %20 %52 
                                        f32_4 %60 = OpLoad %59 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFMul %58 %61 
                                        f32_3 %65 = OpFAdd %62 %64 
                                                      OpStore %33 %65 
                                 Uniform f32* %67 = OpAccessChain %20 %22 
                                          f32 %68 = OpLoad %67 
                                 Uniform f32* %69 = OpAccessChain %20 %22 
                                          f32 %70 = OpLoad %69 
                                 Uniform f32* %71 = OpAccessChain %20 %22 
                                          f32 %72 = OpLoad %71 
                                        f32_3 %73 = OpCompositeConstruct %68 %70 %72 
                                          f32 %74 = OpCompositeExtract %73 0 
                                          f32 %75 = OpCompositeExtract %73 1 
                                          f32 %76 = OpCompositeExtract %73 2 
                                        f32_3 %77 = OpCompositeConstruct %74 %75 %76 
                                        f32_3 %78 = OpLoad %33 
                                        f32_3 %79 = OpFMul %77 %78 
                                        f32_3 %82 = OpFAdd %79 %81 
                                        f32_4 %83 = OpLoad %66 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %66 %84 
                                        f32_3 %85 = OpLoad %17 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 0 0 
                                        f32_3 %87 = OpLoad %50 
                                        f32_3 %88 = OpFMul %86 %87 
                                                      OpStore %17 %88 
                                        f32_3 %89 = OpLoad %17 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 6 3 
                                                      OpStore %9 %91 
                                 Uniform f32* %93 = OpAccessChain %20 %92 
                                          f32 %94 = OpLoad %93 
                                  Output f32* %95 = OpAccessChain %66 %12 
                                                      OpStore %95 %94 
                                        f32_3 %99 = OpLoad vs_TEXCOORD1 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_3 %103 = OpFAdd %102 %101 
                                       f32_4 %104 = OpLoad %96 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %96 %105 
                                 Output f32* %106 = OpAccessChain %96 %12 
                                                      OpStore %106 %10 
                                       f32_3 %109 = OpLoad vs_TEXCOORD1 
                                       f32_4 %110 = OpLoad %108 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %108 %111 
                                Private f32* %112 = OpAccessChain %108 %12 
                                                      OpStore %112 %10 
                              Uniform f32_4* %115 = OpAccessChain %20 %114 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %108 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %119 = OpAccessChain %113 %30 
                                                      OpStore %119 %118 
                              Uniform f32_4* %121 = OpAccessChain %20 %120 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %108 
                                         f32 %124 = OpDot %122 %123 
                                Private f32* %126 = OpAccessChain %113 %125 
                                                      OpStore %126 %124 
                              Uniform f32_4* %128 = OpAccessChain %20 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %108 
                                         f32 %131 = OpDot %129 %130 
                                Private f32* %133 = OpAccessChain %113 %132 
                                                      OpStore %133 %131 
                                       f32_3 %134 = OpLoad %113 
                                       f32_3 %136 = OpLoad vs_TEXCOORD5 
                                       f32_3 %137 = OpFAdd %134 %136 
                                       f32_4 %138 = OpLoad %108 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
                                                      OpStore %108 %139 
                                       f32_4 %140 = OpLoad %108 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %144 = OpExtInst %1 40 %141 %143 
                                       f32_4 %145 = OpLoad %108 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %108 %146 
                                       f32_3 %147 = OpLoad %17 
                                       f32_4 %148 = OpLoad %108 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_3 %151 = OpLoad %50 
                                       f32_3 %152 = OpFAdd %150 %151 
                                                      OpStore %17 %152 
                                       f32_3 %154 = OpLoad %17 
                                       f32_3 %155 = OpFNegate %154 
                                       f32_3 %156 = OpExtInst %1 29 %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                 Output f32* %159 = OpAccessChain %153 %12 
                                                      OpStore %159 %10 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "ShadowCaster"
  LOD 200
  Tags { "LIGHTMODE" = "SHADOWCASTER" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 207656
Program "vp" {
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
UNITY_LOCATION(0) uniform  sampler2D _posTex;
UNITY_LOCATION(1) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD1;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat2.x;
    u_xlat2.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat13 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat3.zw = (-vec2(u_xlat13)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat13 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat2.xy * vec2(u_xlat13);
    u_xlat2.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.w = (-u_xlat2.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat2.wzy : u_xlat0.wyz;
    u_xlat2.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat12 = (-_boundingMin) + _boundingMax;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat12) + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat1.wzy + in_POSITION0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat3.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat12 = (-u_xlat12) * u_xlat12 + 1.0;
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + u_xlat2.xyz;
    u_xlatb12 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat3;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat3;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat0;
    u_xlat13 = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat8 = u_xlat0.z + u_xlat13;
    u_xlat13 = max((-u_xlat0.w), u_xlat8);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat13;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 512
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %294 %445 %497 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %294 Location 294 
                                                      OpMemberDecorate %443 0 BuiltIn 443 
                                                      OpMemberDecorate %443 1 BuiltIn 443 
                                                      OpMemberDecorate %443 2 BuiltIn 443 
                                                      OpDecorate %443 Block 
                                                      OpDecorate vs_TEXCOORD1 Location 497 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 9 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 10 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         f32 %118 = OpConstant 3.674022E-40 
                                       f32_2 %119 = OpConstantComposite %117 %118 
                              Private f32_4* %123 = OpVariable Private 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_2 %139 = OpConstantComposite %138 %138 
                                         f32 %141 = OpConstant 3.674022E-40 
                                       f32_2 %142 = OpConstantComposite %141 %141 
                                Private f32* %146 = OpVariable Private 
                                         f32 %155 = OpConstant 3.674022E-40 
                                         f32 %156 = OpConstant 3.674022E-40 
                                       f32_2 %157 = OpConstantComposite %155 %156 
                                       f32_2 %159 = OpConstantComposite %56 %56 
                                         u32 %163 = OpConstant 2 
                                       f32_3 %181 = OpConstantComposite %56 %56 %56 
                                         u32 %188 = OpConstant 3 
                                             %194 = OpTypeBool 
                                             %195 = OpTypePointer Private %194 
                               Private bool* %196 = OpVariable Private 
                                       f32_4 %197 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %198 = OpConstant 6 
                                             %202 = OpTypeVector %194 4 
                                             %206 = OpTypePointer Function %100 
                                         i32 %220 = OpConstant 4 
                                             %221 = OpTypePointer Uniform %7 
                                         i32 %229 = OpConstant 1 
                                         i32 %237 = OpConstant 2 
                                Private f32* %260 = OpVariable Private 
                                         i32 %261 = OpConstant 8 
                                         i32 %265 = OpConstant 7 
                                Input f32_4* %294 = OpVariable Input 
                                         i32 %302 = OpConstant 3 
                               Private bool* %381 = OpVariable Private 
                                         i32 %399 = OpConstant 5 
                                Private f32* %433 = OpVariable Private 
                                             %442 = OpTypeArray %6 %20 
                                             %443 = OpTypeStruct %7 %6 %442 
                                             %444 = OpTypePointer Output %443 
        Output struct {f32_4; f32; f32[1];}* %445 = OpVariable Output 
                                             %448 = OpTypePointer Output %7 
                                             %464 = OpTypePointer Output %6 
                                             %496 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %207 = OpVariable Function 
                             Function f32_3* %386 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                       f32_4 %115 = OpLoad %76 
                                       f32_2 %116 = OpVectorShuffle %115 %115 3 3 
                                       f32_2 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %114 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 2 3 
                                                      OpStore %114 %122 
                                Private f32* %124 = OpAccessChain %114 %20 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpExtInst %1 8 %125 
                                Private f32* %127 = OpAccessChain %123 %29 
                                                      OpStore %127 %126 
                                Private f32* %128 = OpAccessChain %123 %29 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFNegate %129 
                                         f32 %131 = OpFMul %130 %118 
                                Private f32* %132 = OpAccessChain %114 %29 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %123 %20 
                                                      OpStore %135 %134 
                                       f32_4 %136 = OpLoad %123 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_2 %140 = OpFMul %137 %139 
                                       f32_2 %143 = OpFAdd %140 %142 
                                       f32_4 %144 = OpLoad %114 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %114 %145 
                                       f32_4 %147 = OpLoad %114 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_4 %149 = OpLoad %114 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                       f32_2 %153 = OpCompositeConstruct %152 %152 
                                       f32_2 %154 = OpFNegate %153 
                                       f32_2 %158 = OpFMul %154 %157 
                                       f32_2 %160 = OpFAdd %158 %159 
                                       f32_4 %161 = OpLoad %123 
                                       f32_4 %162 = OpVectorShuffle %161 %160 0 1 4 5 
                                                      OpStore %123 %162 
                                Private f32* %164 = OpAccessChain %123 %163 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpExtInst %1 31 %165 
                                                      OpStore %146 %166 
                                       f32_4 %167 = OpLoad %114 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                         f32 %169 = OpLoad %146 
                                       f32_2 %170 = OpCompositeConstruct %169 %169 
                                       f32_2 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %123 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %123 %173 
                                       f32_4 %174 = OpLoad %123 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 3 
                                       f32_3 %176 = OpExtInst %1 40 %175 %110 
                                       f32_4 %177 = OpLoad %114 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %114 %178 
                                       f32_4 %179 = OpLoad %114 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %182 = OpExtInst %1 37 %180 %181 
                                       f32_4 %183 = OpLoad %114 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                      OpStore %114 %184 
                                Private f32* %185 = OpAccessChain %114 %29 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                Private f32* %189 = OpAccessChain %114 %188 
                                                      OpStore %189 %187 
                                Private f32* %190 = OpAccessChain %9 %29 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFNegate %191 
                                Private f32* %193 = OpAccessChain %9 %188 
                                                      OpStore %193 %192 
                                Uniform f32* %199 = OpAccessChain %18 %198 
                                         f32 %200 = OpLoad %199 
                                       f32_4 %201 = OpCompositeConstruct %200 %200 %200 %200 
                                      bool_4 %203 = OpFOrdNotEqual %197 %201 
                                        bool %204 = OpAny %203 
                                                      OpStore %196 %204 
                                        bool %205 = OpLoad %196 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %205 %208 %212 
                                             %208 = OpLabel 
                                       f32_4 %210 = OpLoad %114 
                                       f32_3 %211 = OpVectorShuffle %210 %210 3 2 1 
                                                      OpStore %207 %211 
                                                      OpBranch %209 
                                             %212 = OpLabel 
                                       f32_4 %213 = OpLoad %9 
                                       f32_3 %214 = OpVectorShuffle %213 %213 3 1 2 
                                                      OpStore %207 %214 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                       f32_3 %215 = OpLoad %207 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %9 %217 
                                       f32_4 %218 = OpLoad %9 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                              Uniform f32_4* %222 = OpAccessChain %18 %220 %19 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                         f32 %225 = OpDot %219 %224 
                                Private f32* %226 = OpAccessChain %114 %29 
                                                      OpStore %226 %225 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                              Uniform f32_4* %230 = OpAccessChain %18 %220 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                         f32 %233 = OpDot %228 %232 
                                Private f32* %234 = OpAccessChain %114 %20 
                                                      OpStore %234 %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                              Uniform f32_4* %238 = OpAccessChain %18 %220 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %236 %240 
                                Private f32* %242 = OpAccessChain %114 %163 
                                                      OpStore %242 %241 
                                       f32_4 %243 = OpLoad %114 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_4 %245 = OpLoad %114 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %244 %246 
                                Private f32* %248 = OpAccessChain %9 %29 
                                                      OpStore %248 %247 
                                Private f32* %249 = OpAccessChain %9 %29 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpExtInst %1 32 %250 
                                Private f32* %252 = OpAccessChain %9 %29 
                                                      OpStore %252 %251 
                                       f32_4 %253 = OpLoad %9 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 0 0 
                                       f32_4 %255 = OpLoad %114 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_4 %258 = OpLoad %9 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %9 %259 
                                Uniform f32* %262 = OpAccessChain %18 %261 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                Uniform f32* %266 = OpAccessChain %18 %265 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFAdd %264 %267 
                                                      OpStore %260 %268 
                                       f32_4 %269 = OpLoad %76 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                         f32 %271 = OpLoad %260 
                                       f32_3 %272 = OpCompositeConstruct %271 %271 %271 
                                       f32_3 %273 = OpFMul %270 %272 
                                Uniform f32* %274 = OpAccessChain %18 %261 
                                         f32 %275 = OpLoad %274 
                                Uniform f32* %276 = OpAccessChain %18 %261 
                                         f32 %277 = OpLoad %276 
                                Uniform f32* %278 = OpAccessChain %18 %261 
                                         f32 %279 = OpLoad %278 
                                       f32_3 %280 = OpCompositeConstruct %275 %277 %279 
                                         f32 %281 = OpCompositeExtract %280 0 
                                         f32 %282 = OpCompositeExtract %280 1 
                                         f32 %283 = OpCompositeExtract %280 2 
                                       f32_3 %284 = OpCompositeConstruct %281 %282 %283 
                                       f32_3 %285 = OpFAdd %273 %284 
                                       f32_4 %286 = OpLoad %76 
                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
                                                      OpStore %76 %287 
                                Private f32* %288 = OpAccessChain %76 %29 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                Private f32* %291 = OpAccessChain %76 %188 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %76 
                                       f32_3 %293 = OpVectorShuffle %292 %292 3 2 1 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFAdd %293 %296 
                                       f32_4 %298 = OpLoad %76 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %76 %299 
                                       f32_4 %300 = OpLoad %76 
                                       f32_4 %301 = OpVectorShuffle %300 %300 1 1 1 1 
                              Uniform f32_4* %303 = OpAccessChain %18 %302 %229 
                                       f32_4 %304 = OpLoad %303 
                                       f32_4 %305 = OpFMul %301 %304 
                                                      OpStore %114 %305 
                              Uniform f32_4* %306 = OpAccessChain %18 %302 %19 
                                       f32_4 %307 = OpLoad %306 
                                       f32_4 %308 = OpLoad %76 
                                       f32_4 %309 = OpVectorShuffle %308 %308 0 0 0 0 
                                       f32_4 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %114 
                                       f32_4 %312 = OpFAdd %310 %311 
                                                      OpStore %114 %312 
                              Uniform f32_4* %313 = OpAccessChain %18 %302 %237 
                                       f32_4 %314 = OpLoad %313 
                                       f32_4 %315 = OpLoad %76 
                                       f32_4 %316 = OpVectorShuffle %315 %315 2 2 2 2 
                                       f32_4 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %114 
                                       f32_4 %319 = OpFAdd %317 %318 
                                                      OpStore %114 %319 
                              Uniform f32_4* %320 = OpAccessChain %18 %302 %302 
                                       f32_4 %321 = OpLoad %320 
                                       f32_4 %322 = OpLoad %294 
                                       f32_4 %323 = OpVectorShuffle %322 %322 3 3 3 3 
                                       f32_4 %324 = OpFMul %321 %323 
                                       f32_4 %325 = OpLoad %114 
                                       f32_4 %326 = OpFAdd %324 %325 
                                                      OpStore %114 %326 
                                       f32_4 %327 = OpLoad %114 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFNegate %328 
                              Uniform f32_4* %330 = OpAccessChain %18 %229 
                                       f32_4 %331 = OpLoad %330 
                                       f32_3 %332 = OpVectorShuffle %331 %331 3 3 3 
                                       f32_3 %333 = OpFMul %329 %332 
                              Uniform f32_4* %334 = OpAccessChain %18 %229 
                                       f32_4 %335 = OpLoad %334 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_3 %337 = OpFAdd %333 %336 
                                       f32_4 %338 = OpLoad %123 
                                       f32_4 %339 = OpVectorShuffle %338 %337 4 5 6 3 
                                                      OpStore %123 %339 
                                       f32_4 %340 = OpLoad %123 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_4 %342 = OpLoad %123 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                         f32 %344 = OpDot %341 %343 
                                                      OpStore %260 %344 
                                         f32 %345 = OpLoad %260 
                                         f32 %346 = OpExtInst %1 32 %345 
                                                      OpStore %260 %346 
                                         f32 %347 = OpLoad %260 
                                       f32_3 %348 = OpCompositeConstruct %347 %347 %347 
                                       f32_4 %349 = OpLoad %123 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_4 %352 = OpLoad %123 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %123 %353 
                                       f32_4 %354 = OpLoad %9 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %123 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                         f32 %358 = OpDot %355 %357 
                                                      OpStore %260 %358 
                                         f32 %359 = OpLoad %260 
                                         f32 %360 = OpFNegate %359 
                                         f32 %361 = OpLoad %260 
                                         f32 %362 = OpFMul %360 %361 
                                         f32 %363 = OpFAdd %362 %56 
                                                      OpStore %260 %363 
                                         f32 %364 = OpLoad %260 
                                         f32 %365 = OpExtInst %1 31 %364 
                                                      OpStore %260 %365 
                                         f32 %366 = OpLoad %260 
                                Uniform f32* %367 = OpAccessChain %18 %237 %163 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFMul %366 %368 
                                                      OpStore %260 %369 
                                       f32_4 %370 = OpLoad %9 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFNegate %371 
                                         f32 %373 = OpLoad %260 
                                       f32_3 %374 = OpCompositeConstruct %373 %373 %373 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %114 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %9 %380 
                                Uniform f32* %382 = OpAccessChain %18 %237 %163 
                                         f32 %383 = OpLoad %382 
                                        bool %384 = OpFOrdNotEqual %383 %90 
                                                      OpStore %381 %384 
                                        bool %385 = OpLoad %381 
                                                      OpSelectionMerge %388 None 
                                                      OpBranchConditional %385 %387 %391 
                                             %387 = OpLabel 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                                      OpStore %386 %390 
                                                      OpBranch %388 
                                             %391 = OpLabel 
                                       f32_4 %392 = OpLoad %114 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                                      OpStore %386 %393 
                                                      OpBranch %388 
                                             %388 = OpLabel 
                                       f32_3 %394 = OpLoad %386 
                                       f32_4 %395 = OpLoad %9 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %9 %396 
                                       f32_4 %397 = OpLoad %9 
                                       f32_4 %398 = OpVectorShuffle %397 %397 1 1 1 1 
                              Uniform f32_4* %400 = OpAccessChain %18 %399 %229 
                                       f32_4 %401 = OpLoad %400 
                                       f32_4 %402 = OpFMul %398 %401 
                                                      OpStore %123 %402 
                              Uniform f32_4* %403 = OpAccessChain %18 %399 %19 
                                       f32_4 %404 = OpLoad %403 
                                       f32_4 %405 = OpLoad %9 
                                       f32_4 %406 = OpVectorShuffle %405 %405 0 0 0 0 
                                       f32_4 %407 = OpFMul %404 %406 
                                       f32_4 %408 = OpLoad %123 
                                       f32_4 %409 = OpFAdd %407 %408 
                                                      OpStore %123 %409 
                              Uniform f32_4* %410 = OpAccessChain %18 %399 %237 
                                       f32_4 %411 = OpLoad %410 
                                       f32_4 %412 = OpLoad %9 
                                       f32_4 %413 = OpVectorShuffle %412 %412 2 2 2 2 
                                       f32_4 %414 = OpFMul %411 %413 
                                       f32_4 %415 = OpLoad %123 
                                       f32_4 %416 = OpFAdd %414 %415 
                                                      OpStore %9 %416 
                              Uniform f32_4* %417 = OpAccessChain %18 %399 %302 
                                       f32_4 %418 = OpLoad %417 
                                       f32_4 %419 = OpLoad %114 
                                       f32_4 %420 = OpVectorShuffle %419 %419 3 3 3 3 
                                       f32_4 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %9 
                                       f32_4 %423 = OpFAdd %421 %422 
                                                      OpStore %9 %423 
                                Uniform f32* %424 = OpAccessChain %18 %237 %29 
                                         f32 %425 = OpLoad %424 
                                Private f32* %426 = OpAccessChain %9 %188 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpFDiv %425 %427 
                                                      OpStore %146 %428 
                                         f32 %429 = OpLoad %146 
                                         f32 %430 = OpExtInst %1 37 %429 %90 
                                                      OpStore %146 %430 
                                         f32 %431 = OpLoad %146 
                                         f32 %432 = OpExtInst %1 40 %431 %109 
                                                      OpStore %146 %432 
                                Private f32* %434 = OpAccessChain %9 %163 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpLoad %146 
                                         f32 %437 = OpFAdd %435 %436 
                                                      OpStore %433 %437 
                                Private f32* %438 = OpAccessChain %9 %188 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpLoad %433 
                                         f32 %441 = OpExtInst %1 37 %439 %440 
                                                      OpStore %146 %441 
                                       f32_4 %446 = OpLoad %9 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 3 
                               Output f32_4* %449 = OpAccessChain %445 %19 
                                       f32_4 %450 = OpLoad %449 
                                       f32_4 %451 = OpVectorShuffle %450 %447 4 5 2 6 
                                                      OpStore %449 %451 
                                         f32 %452 = OpLoad %433 
                                         f32 %453 = OpFNegate %452 
                                         f32 %454 = OpLoad %146 
                                         f32 %455 = OpFAdd %453 %454 
                                Private f32* %456 = OpAccessChain %9 %29 
                                                      OpStore %456 %455 
                                Uniform f32* %457 = OpAccessChain %18 %237 %20 
                                         f32 %458 = OpLoad %457 
                                Private f32* %459 = OpAccessChain %9 %29 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFMul %458 %460 
                                         f32 %462 = OpLoad %433 
                                         f32 %463 = OpFAdd %461 %462 
                                 Output f32* %465 = OpAccessChain %445 %19 %163 
                                                      OpStore %465 %463 
                                       f32_4 %466 = OpLoad %76 
                                       f32_3 %467 = OpVectorShuffle %466 %466 1 1 1 
                              Uniform f32_4* %468 = OpAccessChain %18 %302 %229 
                                       f32_4 %469 = OpLoad %468 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFMul %467 %470 
                                       f32_4 %472 = OpLoad %9 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %9 %473 
                              Uniform f32_4* %474 = OpAccessChain %18 %302 %19 
                                       f32_4 %475 = OpLoad %474 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
                                       f32_4 %477 = OpLoad %76 
                                       f32_3 %478 = OpVectorShuffle %477 %477 0 0 0 
                                       f32_3 %479 = OpFMul %476 %478 
                                       f32_4 %480 = OpLoad %9 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpFAdd %479 %481 
                                       f32_4 %483 = OpLoad %9 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %9 %484 
                              Uniform f32_4* %485 = OpAccessChain %18 %302 %237 
                                       f32_4 %486 = OpLoad %485 
                                       f32_3 %487 = OpVectorShuffle %486 %486 0 1 2 
                                       f32_4 %488 = OpLoad %76 
                                       f32_3 %489 = OpVectorShuffle %488 %488 2 2 2 
                                       f32_3 %490 = OpFMul %487 %489 
                                       f32_4 %491 = OpLoad %9 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFAdd %490 %492 
                                       f32_4 %494 = OpLoad %9 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 5 6 3 
                                                      OpStore %9 %495 
                              Uniform f32_4* %498 = OpAccessChain %18 %302 %302 
                                       f32_4 %499 = OpLoad %498 
                                       f32_3 %500 = OpVectorShuffle %499 %499 0 1 2 
                                       f32_4 %501 = OpLoad %294 
                                       f32_3 %502 = OpVectorShuffle %501 %501 3 3 3 
                                       f32_3 %503 = OpFMul %500 %502 
                                       f32_4 %504 = OpLoad %9 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                                       f32_3 %506 = OpFAdd %503 %505 
                                                      OpStore vs_TEXCOORD1 %506 
                                 Output f32* %507 = OpAccessChain %445 %19 %20 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpFNegate %508 
                                 Output f32* %510 = OpAccessChain %445 %19 %20 
                                                      OpStore %510 %509 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 13
; Schema: 0
                     OpCapability Shader 
              %1 = OpExtInstImport "GLSL.std.450" 
                     OpMemoryModel Logical GLSL450 
                     OpEntryPoint Fragment %4 "main" %9 
                     OpExecutionMode %4 OriginUpperLeft 
                     OpDecorate %9 Location 9 
              %2 = OpTypeVoid 
              %3 = OpTypeFunction %2 
              %6 = OpTypeFloat 32 
              %7 = OpTypeVector %6 4 
              %8 = OpTypePointer Output %7 
Output f32_4* %9 = OpVariable Output 
         f32 %10 = OpConstant 3.674022E-40 
       f32_4 %11 = OpConstantComposite %10 %10 %10 %10 
         void %4 = OpFunction None %3 
              %5 = OpLabel 
                     OpStore %9 %11 
                     OpReturn
                     OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _pack_normal;
uniform 	float _boundingMax;
uniform 	float _boundingMin;
uniform 	float _speed;
uniform 	int _numOfFrames;
UNITY_LOCATION(0) uniform  sampler2D _posTex;
UNITY_LOCATION(1) uniform  sampler2D _nTex;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD1;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.x = (-_Time.y) * _speed;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat4 = float(_numOfFrames);
    u_xlat0.x = u_xlat4 * u_xlat0.x;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / u_xlat4;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat0.x = u_xlat4 + u_xlat0.x;
    u_xlat0.y = u_xlat0.x + in_TEXCOORD1.y;
    u_xlat0.x = in_TEXCOORD1.x;
    u_xlat1 = textureLod(_posTex, u_xlat0.xy, 0.0);
    u_xlat0 = textureLod(_nTex, u_xlat0.xy, 0.0);
    u_xlat0.xyz = u_xlat0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xy = u_xlat1.ww * vec2(1024.0, 32.0);
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat3.y = (-u_xlat3.x) * 32.0 + u_xlat2.x;
    u_xlat2.xy = u_xlat3.xy * vec2(0.126984134, 0.126984134) + vec2(-2.0, -2.0);
    u_xlat13 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat3.zw = (-vec2(u_xlat13)) * vec2(0.25, 0.5) + vec2(1.0, 1.0);
    u_xlat13 = sqrt(u_xlat3.z);
    u_xlat3.xy = u_xlat2.xy * vec2(u_xlat13);
    u_xlat2.xyz = max(u_xlat3.xyw, vec3(-1.0, -1.0, -1.0));
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.w = (-u_xlat2.x);
    u_xlat0.w = (-u_xlat0.x);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_pack_normal);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat2.wzy : u_xlat0.wyz;
    u_xlat2.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat12 = (-_boundingMin) + _boundingMax;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat12) + vec3(vec3(_boundingMin, _boundingMin, _boundingMin));
    u_xlat1.w = (-u_xlat1.x);
    u_xlat1.xyz = u_xlat1.wzy + in_POSITION0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat3.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat12 = (-u_xlat12) * u_xlat12 + 1.0;
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + u_xlat2.xyz;
    u_xlatb12 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat3;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat3;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat0;
    u_xlat13 = max((-u_xlat0.w), u_xlat0.z);
    u_xlat13 = (-u_xlat0.z) + u_xlat13;
    gl_Position.z = unity_LightShadowBias.y * u_xlat13 + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 499
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %67 %294 %437 %484 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %16 0 Offset 16 
                                                      OpMemberDecorate %16 1 Offset 16 
                                                      OpMemberDecorate %16 2 Offset 16 
                                                      OpMemberDecorate %16 3 Offset 16 
                                                      OpMemberDecorate %16 4 Offset 16 
                                                      OpMemberDecorate %16 5 Offset 16 
                                                      OpMemberDecorate %16 6 Offset 16 
                                                      OpMemberDecorate %16 7 Offset 16 
                                                      OpMemberDecorate %16 8 Offset 16 
                                                      OpMemberDecorate %16 9 Offset 16 
                                                      OpMemberDecorate %16 10 Offset 16 
                                                      OpDecorate %16 Block 
                                                      OpDecorate %18 DescriptorSet 18 
                                                      OpDecorate %18 Binding 18 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpDecorate %294 Location 294 
                                                      OpMemberDecorate %435 0 BuiltIn 435 
                                                      OpMemberDecorate %435 1 BuiltIn 435 
                                                      OpMemberDecorate %435 2 BuiltIn 435 
                                                      OpDecorate %435 Block 
                                                      OpDecorate vs_TEXCOORD1 Location 484 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeInt 32 1 
                                              %16 = OpTypeStruct %7 %7 %7 %12 %13 %14 %6 %6 %6 %6 %15 
                                              %17 = OpTypePointer Uniform %16 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; i32;}* %18 = OpVariable Uniform 
                                          i32 %19 = OpConstant 0 
                                          u32 %20 = OpConstant 1 
                                              %21 = OpTypePointer Uniform %6 
                                          i32 %25 = OpConstant 9 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %36 = OpVariable Private 
                                          i32 %37 = OpConstant 10 
                                              %38 = OpTypePointer Uniform %15 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %66 = OpTypePointer Input %7 
                                 Input f32_4* %67 = OpVariable Input 
                                              %68 = OpTypePointer Input %6 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypePointer UniformConstant %77 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampler 
                                              %82 = OpTypePointer UniformConstant %81 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %85 = OpTypeSampledImage %77 
                                              %87 = OpTypeVector %6 2 
                                          f32 %90 = OpConstant 3.674022E-40 
         UniformConstant read_only Texture2D* %92 = OpVariable UniformConstant 
                     UniformConstant sampler* %94 = OpVariable UniformConstant 
                                             %100 = OpTypeVector %6 3 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_3 %107 = OpConstantComposite %106 %106 %106 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                              Private f32_4* %114 = OpVariable Private 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         f32 %118 = OpConstant 3.674022E-40 
                                       f32_2 %119 = OpConstantComposite %117 %118 
                              Private f32_4* %123 = OpVariable Private 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_2 %139 = OpConstantComposite %138 %138 
                                         f32 %141 = OpConstant 3.674022E-40 
                                       f32_2 %142 = OpConstantComposite %141 %141 
                                Private f32* %146 = OpVariable Private 
                                         f32 %155 = OpConstant 3.674022E-40 
                                         f32 %156 = OpConstant 3.674022E-40 
                                       f32_2 %157 = OpConstantComposite %155 %156 
                                       f32_2 %159 = OpConstantComposite %56 %56 
                                         u32 %163 = OpConstant 2 
                                       f32_3 %181 = OpConstantComposite %56 %56 %56 
                                         u32 %188 = OpConstant 3 
                                             %194 = OpTypeBool 
                                             %195 = OpTypePointer Private %194 
                               Private bool* %196 = OpVariable Private 
                                       f32_4 %197 = OpConstantComposite %90 %90 %90 %90 
                                         i32 %198 = OpConstant 6 
                                             %202 = OpTypeVector %194 4 
                                             %206 = OpTypePointer Function %100 
                                         i32 %220 = OpConstant 4 
                                             %221 = OpTypePointer Uniform %7 
                                         i32 %229 = OpConstant 1 
                                         i32 %237 = OpConstant 2 
                                Private f32* %260 = OpVariable Private 
                                         i32 %261 = OpConstant 8 
                                         i32 %265 = OpConstant 7 
                                Input f32_4* %294 = OpVariable Input 
                                         i32 %302 = OpConstant 3 
                               Private bool* %381 = OpVariable Private 
                                         i32 %399 = OpConstant 5 
                                             %434 = OpTypeArray %6 %20 
                                             %435 = OpTypeStruct %7 %6 %434 
                                             %436 = OpTypePointer Output %435 
        Output struct {f32_4; f32; f32[1];}* %437 = OpVariable Output 
                                             %445 = OpTypePointer Output %6 
                                             %449 = OpTypePointer Output %7 
                                             %483 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %207 = OpVariable Function 
                             Function f32_3* %386 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %18 %19 %20 
                                          f32 %23 = OpLoad %22 
                                          f32 %24 = OpFNegate %23 
                                 Uniform f32* %26 = OpAccessChain %18 %25 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFMul %24 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                 Private f32* %32 = OpAccessChain %9 %29 
                                          f32 %33 = OpLoad %32 
                                          f32 %34 = OpExtInst %1 10 %33 
                                 Private f32* %35 = OpAccessChain %9 %29 
                                                      OpStore %35 %34 
                                 Uniform i32* %39 = OpAccessChain %18 %37 
                                          i32 %40 = OpLoad %39 
                                          f32 %41 = OpConvertSToF %40 
                                                      OpStore %36 %41 
                                          f32 %42 = OpLoad %36 
                                 Private f32* %43 = OpAccessChain %9 %29 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFMul %42 %44 
                                 Private f32* %46 = OpAccessChain %9 %29 
                                                      OpStore %46 %45 
                                 Private f32* %47 = OpAccessChain %9 %29 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpExtInst %1 9 %48 
                                 Private f32* %50 = OpAccessChain %9 %29 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %9 %29 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpLoad %36 
                                          f32 %54 = OpFDiv %52 %53 
                                 Private f32* %55 = OpAccessChain %9 %29 
                                                      OpStore %55 %54 
                                          f32 %57 = OpLoad %36 
                                          f32 %58 = OpFDiv %56 %57 
                                                      OpStore %36 %58 
                                          f32 %59 = OpLoad %36 
                                 Private f32* %60 = OpAccessChain %9 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFAdd %59 %61 
                                 Private f32* %63 = OpAccessChain %9 %29 
                                                      OpStore %63 %62 
                                 Private f32* %64 = OpAccessChain %9 %29 
                                          f32 %65 = OpLoad %64 
                                   Input f32* %69 = OpAccessChain %67 %20 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %65 %70 
                                 Private f32* %72 = OpAccessChain %9 %20 
                                                      OpStore %72 %71 
                                   Input f32* %73 = OpAccessChain %67 %29 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %9 %29 
                                                      OpStore %75 %74 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %91 = OpImageSampleExplicitLod %86 %89 Lod %7 
                                                      OpStore %76 %91 
                          read_only Texture2D %93 = OpLoad %92 
                                      sampler %95 = OpLoad %94 
                   read_only Texture2DSampled %96 = OpSampledImage %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                                        f32_4 %99 = OpImageSampleExplicitLod %96 %98 Lod %7 
                                       f32_3 %101 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %9 %103 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 2 1 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                       f32_4 %115 = OpLoad %76 
                                       f32_2 %116 = OpVectorShuffle %115 %115 3 3 
                                       f32_2 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %114 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 2 3 
                                                      OpStore %114 %122 
                                Private f32* %124 = OpAccessChain %114 %20 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpExtInst %1 8 %125 
                                Private f32* %127 = OpAccessChain %123 %29 
                                                      OpStore %127 %126 
                                Private f32* %128 = OpAccessChain %123 %29 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFNegate %129 
                                         f32 %131 = OpFMul %130 %118 
                                Private f32* %132 = OpAccessChain %114 %29 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %123 %20 
                                                      OpStore %135 %134 
                                       f32_4 %136 = OpLoad %123 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                                       f32_2 %140 = OpFMul %137 %139 
                                       f32_2 %143 = OpFAdd %140 %142 
                                       f32_4 %144 = OpLoad %114 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %114 %145 
                                       f32_4 %147 = OpLoad %114 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_4 %149 = OpLoad %114 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                       f32_2 %153 = OpCompositeConstruct %152 %152 
                                       f32_2 %154 = OpFNegate %153 
                                       f32_2 %158 = OpFMul %154 %157 
                                       f32_2 %160 = OpFAdd %158 %159 
                                       f32_4 %161 = OpLoad %123 
                                       f32_4 %162 = OpVectorShuffle %161 %160 0 1 4 5 
                                                      OpStore %123 %162 
                                Private f32* %164 = OpAccessChain %123 %163 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpExtInst %1 31 %165 
                                                      OpStore %146 %166 
                                       f32_4 %167 = OpLoad %114 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                         f32 %169 = OpLoad %146 
                                       f32_2 %170 = OpCompositeConstruct %169 %169 
                                       f32_2 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %123 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %123 %173 
                                       f32_4 %174 = OpLoad %123 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 3 
                                       f32_3 %176 = OpExtInst %1 40 %175 %110 
                                       f32_4 %177 = OpLoad %114 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %114 %178 
                                       f32_4 %179 = OpLoad %114 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %182 = OpExtInst %1 37 %180 %181 
                                       f32_4 %183 = OpLoad %114 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                      OpStore %114 %184 
                                Private f32* %185 = OpAccessChain %114 %29 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                Private f32* %189 = OpAccessChain %114 %188 
                                                      OpStore %189 %187 
                                Private f32* %190 = OpAccessChain %9 %29 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFNegate %191 
                                Private f32* %193 = OpAccessChain %9 %188 
                                                      OpStore %193 %192 
                                Uniform f32* %199 = OpAccessChain %18 %198 
                                         f32 %200 = OpLoad %199 
                                       f32_4 %201 = OpCompositeConstruct %200 %200 %200 %200 
                                      bool_4 %203 = OpFOrdNotEqual %197 %201 
                                        bool %204 = OpAny %203 
                                                      OpStore %196 %204 
                                        bool %205 = OpLoad %196 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %205 %208 %212 
                                             %208 = OpLabel 
                                       f32_4 %210 = OpLoad %114 
                                       f32_3 %211 = OpVectorShuffle %210 %210 3 2 1 
                                                      OpStore %207 %211 
                                                      OpBranch %209 
                                             %212 = OpLabel 
                                       f32_4 %213 = OpLoad %9 
                                       f32_3 %214 = OpVectorShuffle %213 %213 3 1 2 
                                                      OpStore %207 %214 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                       f32_3 %215 = OpLoad %207 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %9 %217 
                                       f32_4 %218 = OpLoad %9 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                              Uniform f32_4* %222 = OpAccessChain %18 %220 %19 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                         f32 %225 = OpDot %219 %224 
                                Private f32* %226 = OpAccessChain %114 %29 
                                                      OpStore %226 %225 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                              Uniform f32_4* %230 = OpAccessChain %18 %220 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                         f32 %233 = OpDot %228 %232 
                                Private f32* %234 = OpAccessChain %114 %20 
                                                      OpStore %234 %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                              Uniform f32_4* %238 = OpAccessChain %18 %220 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %236 %240 
                                Private f32* %242 = OpAccessChain %114 %163 
                                                      OpStore %242 %241 
                                       f32_4 %243 = OpLoad %114 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_4 %245 = OpLoad %114 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %244 %246 
                                Private f32* %248 = OpAccessChain %9 %29 
                                                      OpStore %248 %247 
                                Private f32* %249 = OpAccessChain %9 %29 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpExtInst %1 32 %250 
                                Private f32* %252 = OpAccessChain %9 %29 
                                                      OpStore %252 %251 
                                       f32_4 %253 = OpLoad %9 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 0 0 
                                       f32_4 %255 = OpLoad %114 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_4 %258 = OpLoad %9 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %9 %259 
                                Uniform f32* %262 = OpAccessChain %18 %261 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                Uniform f32* %266 = OpAccessChain %18 %265 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFAdd %264 %267 
                                                      OpStore %260 %268 
                                       f32_4 %269 = OpLoad %76 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                         f32 %271 = OpLoad %260 
                                       f32_3 %272 = OpCompositeConstruct %271 %271 %271 
                                       f32_3 %273 = OpFMul %270 %272 
                                Uniform f32* %274 = OpAccessChain %18 %261 
                                         f32 %275 = OpLoad %274 
                                Uniform f32* %276 = OpAccessChain %18 %261 
                                         f32 %277 = OpLoad %276 
                                Uniform f32* %278 = OpAccessChain %18 %261 
                                         f32 %279 = OpLoad %278 
                                       f32_3 %280 = OpCompositeConstruct %275 %277 %279 
                                         f32 %281 = OpCompositeExtract %280 0 
                                         f32 %282 = OpCompositeExtract %280 1 
                                         f32 %283 = OpCompositeExtract %280 2 
                                       f32_3 %284 = OpCompositeConstruct %281 %282 %283 
                                       f32_3 %285 = OpFAdd %273 %284 
                                       f32_4 %286 = OpLoad %76 
                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
                                                      OpStore %76 %287 
                                Private f32* %288 = OpAccessChain %76 %29 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                Private f32* %291 = OpAccessChain %76 %188 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %76 
                                       f32_3 %293 = OpVectorShuffle %292 %292 3 2 1 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFAdd %293 %296 
                                       f32_4 %298 = OpLoad %76 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %76 %299 
                                       f32_4 %300 = OpLoad %76 
                                       f32_4 %301 = OpVectorShuffle %300 %300 1 1 1 1 
                              Uniform f32_4* %303 = OpAccessChain %18 %302 %229 
                                       f32_4 %304 = OpLoad %303 
                                       f32_4 %305 = OpFMul %301 %304 
                                                      OpStore %114 %305 
                              Uniform f32_4* %306 = OpAccessChain %18 %302 %19 
                                       f32_4 %307 = OpLoad %306 
                                       f32_4 %308 = OpLoad %76 
                                       f32_4 %309 = OpVectorShuffle %308 %308 0 0 0 0 
                                       f32_4 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %114 
                                       f32_4 %312 = OpFAdd %310 %311 
                                                      OpStore %114 %312 
                              Uniform f32_4* %313 = OpAccessChain %18 %302 %237 
                                       f32_4 %314 = OpLoad %313 
                                       f32_4 %315 = OpLoad %76 
                                       f32_4 %316 = OpVectorShuffle %315 %315 2 2 2 2 
                                       f32_4 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %114 
                                       f32_4 %319 = OpFAdd %317 %318 
                                                      OpStore %114 %319 
                              Uniform f32_4* %320 = OpAccessChain %18 %302 %302 
                                       f32_4 %321 = OpLoad %320 
                                       f32_4 %322 = OpLoad %294 
                                       f32_4 %323 = OpVectorShuffle %322 %322 3 3 3 3 
                                       f32_4 %324 = OpFMul %321 %323 
                                       f32_4 %325 = OpLoad %114 
                                       f32_4 %326 = OpFAdd %324 %325 
                                                      OpStore %114 %326 
                                       f32_4 %327 = OpLoad %114 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFNegate %328 
                              Uniform f32_4* %330 = OpAccessChain %18 %229 
                                       f32_4 %331 = OpLoad %330 
                                       f32_3 %332 = OpVectorShuffle %331 %331 3 3 3 
                                       f32_3 %333 = OpFMul %329 %332 
                              Uniform f32_4* %334 = OpAccessChain %18 %229 
                                       f32_4 %335 = OpLoad %334 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_3 %337 = OpFAdd %333 %336 
                                       f32_4 %338 = OpLoad %123 
                                       f32_4 %339 = OpVectorShuffle %338 %337 4 5 6 3 
                                                      OpStore %123 %339 
                                       f32_4 %340 = OpLoad %123 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_4 %342 = OpLoad %123 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                         f32 %344 = OpDot %341 %343 
                                                      OpStore %260 %344 
                                         f32 %345 = OpLoad %260 
                                         f32 %346 = OpExtInst %1 32 %345 
                                                      OpStore %260 %346 
                                         f32 %347 = OpLoad %260 
                                       f32_3 %348 = OpCompositeConstruct %347 %347 %347 
                                       f32_4 %349 = OpLoad %123 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_4 %352 = OpLoad %123 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %123 %353 
                                       f32_4 %354 = OpLoad %9 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %123 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                         f32 %358 = OpDot %355 %357 
                                                      OpStore %260 %358 
                                         f32 %359 = OpLoad %260 
                                         f32 %360 = OpFNegate %359 
                                         f32 %361 = OpLoad %260 
                                         f32 %362 = OpFMul %360 %361 
                                         f32 %363 = OpFAdd %362 %56 
                                                      OpStore %260 %363 
                                         f32 %364 = OpLoad %260 
                                         f32 %365 = OpExtInst %1 31 %364 
                                                      OpStore %260 %365 
                                         f32 %366 = OpLoad %260 
                                Uniform f32* %367 = OpAccessChain %18 %237 %163 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFMul %366 %368 
                                                      OpStore %260 %369 
                                       f32_4 %370 = OpLoad %9 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFNegate %371 
                                         f32 %373 = OpLoad %260 
                                       f32_3 %374 = OpCompositeConstruct %373 %373 %373 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %114 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %9 %380 
                                Uniform f32* %382 = OpAccessChain %18 %237 %163 
                                         f32 %383 = OpLoad %382 
                                        bool %384 = OpFOrdNotEqual %383 %90 
                                                      OpStore %381 %384 
                                        bool %385 = OpLoad %381 
                                                      OpSelectionMerge %388 None 
                                                      OpBranchConditional %385 %387 %391 
                                             %387 = OpLabel 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                                      OpStore %386 %390 
                                                      OpBranch %388 
                                             %391 = OpLabel 
                                       f32_4 %392 = OpLoad %114 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                                      OpStore %386 %393 
                                                      OpBranch %388 
                                             %388 = OpLabel 
                                       f32_3 %394 = OpLoad %386 
                                       f32_4 %395 = OpLoad %9 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %9 %396 
                                       f32_4 %397 = OpLoad %9 
                                       f32_4 %398 = OpVectorShuffle %397 %397 1 1 1 1 
                              Uniform f32_4* %400 = OpAccessChain %18 %399 %229 
                                       f32_4 %401 = OpLoad %400 
                                       f32_4 %402 = OpFMul %398 %401 
                                                      OpStore %123 %402 
                              Uniform f32_4* %403 = OpAccessChain %18 %399 %19 
                                       f32_4 %404 = OpLoad %403 
                                       f32_4 %405 = OpLoad %9 
                                       f32_4 %406 = OpVectorShuffle %405 %405 0 0 0 0 
                                       f32_4 %407 = OpFMul %404 %406 
                                       f32_4 %408 = OpLoad %123 
                                       f32_4 %409 = OpFAdd %407 %408 
                                                      OpStore %123 %409 
                              Uniform f32_4* %410 = OpAccessChain %18 %399 %237 
                                       f32_4 %411 = OpLoad %410 
                                       f32_4 %412 = OpLoad %9 
                                       f32_4 %413 = OpVectorShuffle %412 %412 2 2 2 2 
                                       f32_4 %414 = OpFMul %411 %413 
                                       f32_4 %415 = OpLoad %123 
                                       f32_4 %416 = OpFAdd %414 %415 
                                                      OpStore %9 %416 
                              Uniform f32_4* %417 = OpAccessChain %18 %399 %302 
                                       f32_4 %418 = OpLoad %417 
                                       f32_4 %419 = OpLoad %114 
                                       f32_4 %420 = OpVectorShuffle %419 %419 3 3 3 3 
                                       f32_4 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %9 
                                       f32_4 %423 = OpFAdd %421 %422 
                                                      OpStore %9 %423 
                                Private f32* %424 = OpAccessChain %9 %188 
                                         f32 %425 = OpLoad %424 
                                Private f32* %426 = OpAccessChain %9 %163 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpExtInst %1 37 %425 %427 
                                                      OpStore %146 %428 
                                Private f32* %429 = OpAccessChain %9 %163 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpFNegate %430 
                                         f32 %432 = OpLoad %146 
                                         f32 %433 = OpFAdd %431 %432 
                                                      OpStore %146 %433 
                                Uniform f32* %438 = OpAccessChain %18 %237 %20 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpLoad %146 
                                         f32 %441 = OpFMul %439 %440 
                                Private f32* %442 = OpAccessChain %9 %163 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFAdd %441 %443 
                                 Output f32* %446 = OpAccessChain %437 %19 %163 
                                                      OpStore %446 %444 
                                       f32_4 %447 = OpLoad %9 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 3 
                               Output f32_4* %450 = OpAccessChain %437 %19 
                                       f32_4 %451 = OpLoad %450 
                                       f32_4 %452 = OpVectorShuffle %451 %448 4 5 2 6 
                                                      OpStore %450 %452 
                                       f32_4 %453 = OpLoad %76 
                                       f32_3 %454 = OpVectorShuffle %453 %453 1 1 1 
                              Uniform f32_4* %455 = OpAccessChain %18 %302 %229 
                                       f32_4 %456 = OpLoad %455 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFMul %454 %457 
                                       f32_4 %459 = OpLoad %9 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                      OpStore %9 %460 
                              Uniform f32_4* %461 = OpAccessChain %18 %302 %19 
                                       f32_4 %462 = OpLoad %461 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_4 %464 = OpLoad %76 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 0 0 
                                       f32_3 %466 = OpFMul %463 %465 
                                       f32_4 %467 = OpLoad %9 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                       f32_3 %469 = OpFAdd %466 %468 
                                       f32_4 %470 = OpLoad %9 
                                       f32_4 %471 = OpVectorShuffle %470 %469 4 5 6 3 
                                                      OpStore %9 %471 
                              Uniform f32_4* %472 = OpAccessChain %18 %302 %237 
                                       f32_4 %473 = OpLoad %472 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 1 2 
                                       f32_4 %475 = OpLoad %76 
                                       f32_3 %476 = OpVectorShuffle %475 %475 2 2 2 
                                       f32_3 %477 = OpFMul %474 %476 
                                       f32_4 %478 = OpLoad %9 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFAdd %477 %479 
                                       f32_4 %481 = OpLoad %9 
                                       f32_4 %482 = OpVectorShuffle %481 %480 4 5 6 3 
                                                      OpStore %9 %482 
                              Uniform f32_4* %485 = OpAccessChain %18 %302 %302 
                                       f32_4 %486 = OpLoad %485 
                                       f32_3 %487 = OpVectorShuffle %486 %486 0 1 2 
                                       f32_4 %488 = OpLoad %294 
                                       f32_3 %489 = OpVectorShuffle %488 %488 3 3 3 
                                       f32_3 %490 = OpFMul %487 %489 
                                       f32_4 %491 = OpLoad %9 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFAdd %490 %492 
                                                      OpStore vs_TEXCOORD1 %493 
                                 Output f32* %494 = OpAccessChain %437 %19 %20 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFNegate %495 
                                 Output f32* %497 = OpAccessChain %437 %19 %20 
                                                      OpStore %497 %496 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 13
; Schema: 0
                     OpCapability Shader 
              %1 = OpExtInstImport "GLSL.std.450" 
                     OpMemoryModel Logical GLSL450 
                     OpEntryPoint Fragment %4 "main" %9 
                     OpExecutionMode %4 OriginUpperLeft 
                     OpDecorate %9 Location 9 
              %2 = OpTypeVoid 
              %3 = OpTypeFunction %2 
              %6 = OpTypeFloat 32 
              %7 = OpTypeVector %6 4 
              %8 = OpTypePointer Output %7 
Output f32_4* %9 = OpVariable Output 
         f32 %10 = OpConstant 3.674022E-40 
       f32_4 %11 = OpConstantComposite %10 %10 %10 %10 
         void %4 = OpFunction None %3 
              %5 = OpLabel 
                     OpStore %9 %11 
                     OpReturn
                     OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_CUBE" }
""
}
}
}
}
Fallback "Diffuse"
}