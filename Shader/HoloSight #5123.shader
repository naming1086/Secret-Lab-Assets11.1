//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "HoloSight" {
Properties {
_Color ("Color", Color) = (1,1,1,1)
_MainTex ("Albedo (RGBA)", 2D) = "white" { }
_Glossiness ("Smoothness", Range(0, 1)) = 0.5
_Metallic ("Metallic", Range(0, 1)) = 0
_Emission ("Emission Multiplier", Range(0, 5)) = 1
[Space] _RedDotColor ("Red Dot Color(RGB) Brightness(A)", Color) = (1,1,1,1)
_RedDotTex ("Red Dot Texture (A)", 2D) = "white" { }
_RedDotSize ("Red Dot size", Range(0, 10)) = 0
[Toggle(FIXED_SIZE)] _FixedSize ("Use Fixed Size", Float) = 0
_RedDotDist ("Red Dot offset distance", Range(0, 50)) = 2
_OffsetX ("Side Offset", Float) = 0
_OffsetY ("Height Offset", Float) = 0
}
SubShader {
 LOD 200
 Tags { "QUEUE" = "Transparent" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Opaque" }
  Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
  ColorMask RGB 0
  ZWrite Off
  GpuProgramID 61232
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec2 u_xlat4;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat4.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat0.xy = (-u_xlat0.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat4.xy;
    u_xlat0.xy = u_xlat0.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat0.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	float _Emission;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    u_xlat4 = u_xlat4.wwww * _RedDotColor;
    u_xlat4.xyz = u_xlat4.xyz * _RedDotColor.www;
    SV_Target0.w = u_xlat2.w * _Color.w + u_xlat4.w;
    u_xlat37 = (-_Glossiness) + 1.0;
    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb38){
        u_xlat38 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat38 = inversesqrt(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat38) * u_xlat5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
        u_xlat38 = min(u_xlat7.z, u_xlat38);
        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat5.xyz;
    }
    u_xlat38 = (-u_xlat37) * 0.699999988 + 1.70000005;
    u_xlat38 = u_xlat37 * u_xlat38;
    u_xlat38 = u_xlat38 * 6.0;
    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat38);
    u_xlat39 = u_xlat6.w + -1.0;
    u_xlat39 = unity_SpecCube0_HDR.w * u_xlat39 + 1.0;
    u_xlat39 = log2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.y;
    u_xlat39 = exp2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat39);
    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat40 = inversesqrt(u_xlat40);
            u_xlat8.xyz = vec3(u_xlat40) * u_xlat5.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;
        }
        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat38);
        u_xlat38 = u_xlat5.w + -1.0;
        u_xlat38 = unity_SpecCube1_HDR.w * u_xlat38 + 1.0;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.y;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz + (-u_xlat5.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat5.xyz;
    }
    u_xlat38 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat5.xyz = vec3(u_xlat38) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat38 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat38) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat37));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat39 = u_xlat25 * u_xlat25;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat25 = u_xlat25 * u_xlat39;
    u_xlat12.x = u_xlat12.x * u_xlat25 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat37 * u_xlat37;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat37 = (-u_xlat24) + 1.0;
    u_xlat39 = abs(u_xlat36) * u_xlat37 + u_xlat24;
    u_xlat37 = u_xlat1.x * u_xlat37 + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat37;
    u_xlat36 = u_xlat1.x * u_xlat39 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat37 = u_xlat24 * u_xlat24;
    u_xlat39 = u_xlat13 * u_xlat37 + (-u_xlat13);
    u_xlat13 = u_xlat39 * u_xlat13 + 1.0;
    u_xlat37 = u_xlat37 * 0.318309873;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat13 = u_xlat37 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat12.z = u_xlat36 * 3.14159274;
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat36 = max(u_xlat12.z, 0.0);
    u_xlat24 = u_xlat24 * u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat36 * u_xlat1.x;
    u_xlat1.x = (-u_xlat38) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5.xyz = u_xlat12.xxx * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat8.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat5.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat24);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyw + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat4.xyz * vec3(vec3(_Emission, _Emission, _Emission)) + u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 275
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %74 %135 %210 %216 %217 %230 %260 %266 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpMemberDecorate %20 7 Offset 20 
                                                      OpMemberDecorate %20 8 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %72 0 BuiltIn 72 
                                                      OpMemberDecorate %72 1 BuiltIn 72 
                                                      OpMemberDecorate %72 2 BuiltIn 72 
                                                      OpDecorate %72 Block 
                                                      OpDecorate vs_TEXCOORD2 Location 135 
                                                      OpDecorate vs_TEXCOORD3 Location 210 
                                                      OpDecorate vs_TEXCOORD0 Location 216 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %230 Location 230 
                                                      OpDecorate vs_TEXCOORD1 Location 260 
                                                      OpDecorate vs_TEXCOORD7 Location 266 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeStruct %14 %17 %18 %19 %6 %6 %6 %6 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %50 = OpVariable Private 
                                          u32 %70 = OpConstant 1 
                                              %71 = OpTypeArray %6 %70 
                                              %72 = OpTypeStruct %7 %6 %71 
                                              %73 = OpTypePointer Output %72 
         Output struct {f32_4; f32; f32[1];}* %74 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                             %128 = OpTypePointer Uniform %14 
                                             %134 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %138 = OpTypeVector %6 2 
                                             %169 = OpTypePointer Private %138 
                              Private f32_2* %170 = OpVariable Private 
                                         i32 %173 = OpConstant 6 
                                             %174 = OpTypePointer Uniform %6 
                                         i32 %177 = OpConstant 7 
                                         i32 %186 = OpConstant 5 
                                         i32 %202 = OpConstant 4 
                                             %209 = OpTypePointer Output %138 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %213 = OpConstant 3.674022E-40 
                                       f32_2 %214 = OpConstantComposite %213 %213 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %217 = OpVariable Input 
                                         i32 %220 = OpConstant 8 
                                             %229 = OpTypePointer Input %14 
                                Input f32_3* %230 = OpVariable Input 
                                         u32 %236 = OpConstant 0 
                                             %237 = OpTypePointer Private %6 
                                         u32 %250 = OpConstant 2 
                                Private f32* %252 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                         f32 %267 = OpConstant 3.674022E-40 
                                       f32_4 %268 = OpConstantComposite %267 %267 %267 %267 
                                             %269 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %22 %24 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %9 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 1 1 1 1 
                               Uniform f32_4* %53 = OpAccessChain %22 %46 %24 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpFMul %52 %54 
                                                      OpStore %50 %55 
                               Uniform f32_4* %56 = OpAccessChain %22 %46 %29 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %50 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %50 %62 
                               Uniform f32_4* %63 = OpAccessChain %22 %46 %37 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %9 
                                        f32_4 %66 = OpVectorShuffle %65 %65 2 2 2 2 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %50 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %50 %69 
                               Uniform f32_4* %75 = OpAccessChain %22 %46 %46 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_4 %78 = OpVectorShuffle %77 %77 3 3 3 3 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %50 
                                        f32_4 %81 = OpFAdd %79 %80 
                                Output f32_4* %83 = OpAccessChain %74 %29 
                                                      OpStore %83 %81 
                                        f32_4 %84 = OpLoad %11 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %22 %24 %24 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %85 %88 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 6 3 
                                                      OpStore %9 %91 
                               Uniform f32_4* %92 = OpAccessChain %22 %24 %29 
                                        f32_4 %93 = OpLoad %92 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_4 %95 = OpLoad %11 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFAdd %97 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 6 3 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %22 %24 %37 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %11 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                              Uniform f32_4* %114 = OpAccessChain %22 %24 %46 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_4 %117 = OpLoad %11 
                                       f32_3 %118 = OpVectorShuffle %117 %117 3 3 3 
                                       f32_3 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %119 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %9 %124 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFNegate %126 
                              Uniform f32_3* %129 = OpAccessChain %22 %29 
                                       f32_3 %130 = OpLoad %129 
                                       f32_3 %131 = OpFAdd %127 %130 
                                       f32_4 %132 = OpLoad %50 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %50 %133 
                                       f32_4 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                                      OpStore vs_TEXCOORD2 %137 
                                       f32_4 %139 = OpLoad %50 
                                       f32_2 %140 = OpVectorShuffle %139 %139 1 1 
                              Uniform f32_4* %141 = OpAccessChain %22 %37 %24 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %144 = OpFMul %140 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 2 3 
                                                      OpStore %9 %146 
                              Uniform f32_4* %147 = OpAccessChain %22 %37 %29 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_4 %150 = OpLoad %50 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 0 
                                       f32_2 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFAdd %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 2 3 
                                                      OpStore %9 %157 
                              Uniform f32_4* %158 = OpAccessChain %22 %37 %37 
                                       f32_4 %159 = OpLoad %158 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                       f32_4 %161 = OpLoad %50 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 2 
                                       f32_2 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %9 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFAdd %163 %165 
                                       f32_4 %167 = OpLoad %9 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 2 3 
                                                      OpStore %9 %168 
                                       f32_4 %171 = OpLoad %11 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                Uniform f32* %175 = OpAccessChain %22 %173 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %178 = OpAccessChain %22 %177 
                                         f32 %179 = OpLoad %178 
                                       f32_2 %180 = OpCompositeConstruct %176 %179 
                                       f32_2 %181 = OpFNegate %180 
                                       f32_2 %182 = OpFAdd %172 %181 
                                                      OpStore %170 %182 
                                       f32_4 %183 = OpLoad %9 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFNegate %184 
                                Uniform f32* %187 = OpAccessChain %22 %186 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %22 %186 
                                         f32 %190 = OpLoad %189 
                                       f32_2 %191 = OpCompositeConstruct %188 %190 
                                         f32 %192 = OpCompositeExtract %191 0 
                                         f32 %193 = OpCompositeExtract %191 1 
                                       f32_2 %194 = OpCompositeConstruct %192 %193 
                                       f32_2 %195 = OpFMul %185 %194 
                                       f32_2 %196 = OpLoad %170 
                                       f32_2 %197 = OpFAdd %195 %196 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %9 %199 
                                       f32_4 %200 = OpLoad %9 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                Uniform f32* %203 = OpAccessChain %22 %202 
                                         f32 %204 = OpLoad %203 
                                       f32_2 %205 = OpCompositeConstruct %204 %204 
                                       f32_2 %206 = OpFDiv %201 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 2 3 
                                                      OpStore %9 %208 
                                       f32_4 %211 = OpLoad %9 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %215 = OpFAdd %212 %214 
                                                      OpStore vs_TEXCOORD3 %215 
                                       f32_4 %218 = OpLoad %217 
                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
                              Uniform f32_4* %221 = OpAccessChain %22 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_2 %223 = OpVectorShuffle %222 %222 0 1 
                                       f32_2 %224 = OpFMul %219 %223 
                              Uniform f32_4* %225 = OpAccessChain %22 %220 
                                       f32_4 %226 = OpLoad %225 
                                       f32_2 %227 = OpVectorShuffle %226 %226 2 3 
                                       f32_2 %228 = OpFAdd %224 %227 
                                                      OpStore vs_TEXCOORD0 %228 
                                       f32_3 %231 = OpLoad %230 
                              Uniform f32_4* %232 = OpAccessChain %22 %37 %29 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %231 %234 
                                Private f32* %238 = OpAccessChain %9 %236 
                                                      OpStore %238 %235 
                                       f32_3 %239 = OpLoad %230 
                              Uniform f32_4* %240 = OpAccessChain %22 %37 %24 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                         f32 %243 = OpDot %239 %242 
                                Private f32* %244 = OpAccessChain %9 %70 
                                                      OpStore %244 %243 
                                       f32_3 %245 = OpLoad %230 
                              Uniform f32_4* %246 = OpAccessChain %22 %37 %37 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %245 %248 
                                Private f32* %251 = OpAccessChain %9 %250 
                                                      OpStore %251 %249 
                                       f32_4 %253 = OpLoad %9 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpDot %254 %256 
                                                      OpStore %252 %257 
                                         f32 %258 = OpLoad %252 
                                         f32 %259 = OpExtInst %1 32 %258 
                                                      OpStore %252 %259 
                                         f32 %261 = OpLoad %252 
                                       f32_3 %262 = OpCompositeConstruct %261 %261 %261 
                                       f32_4 %263 = OpLoad %9 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                                      OpStore vs_TEXCOORD1 %265 
                                                      OpStore vs_TEXCOORD7 %268 
                                 Output f32* %270 = OpAccessChain %74 %29 %70 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFNegate %271 
                                 Output f32* %273 = OpAccessChain %74 %29 %70 
                                                      OpStore %273 %272 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 909
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %56 %75 %97 %119 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate vs_TEXCOORD0 Location 56 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate vs_TEXCOORD3 Location 75 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate vs_TEXCOORD1 Location 119 
                                                      OpDecorate %283 DescriptorSet 283 
                                                      OpDecorate %283 Binding 283 
                                                      OpDecorate %285 DescriptorSet 285 
                                                      OpDecorate %285 Binding 285 
                                                      OpDecorate %438 DescriptorSet 438 
                                                      OpDecorate %438 Binding 438 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                               Private f32_4* %43 = OpVariable Private 
                                              %44 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %45 = OpTypePointer UniformConstant %44 
         UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
                                              %48 = OpTypeSampler 
                                              %49 = OpTypePointer UniformConstant %48 
                     UniformConstant sampler* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampledImage %44 
                                              %54 = OpTypeVector %6 2 
                                              %55 = OpTypePointer Input %54 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %59 = OpTypePointer Private %10 
                               Private f32_3* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 14 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                              %78 = OpTypeInt 32 0 
                                          u32 %79 = OpConstant 3 
                               Private f32_4* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 15 
                                              %96 = OpTypePointer Output %7 
                                Output f32_4* %97 = OpVariable Output 
                                             %100 = OpTypePointer Uniform %6 
                                             %107 = OpTypePointer Output %6 
                                         i32 %109 = OpConstant 11 
                                         f32 %113 = OpConstant 3.674022E-40 
                                Private f32* %115 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_4* %125 = OpVariable Private 
                                             %137 = OpTypeBool 
                                             %138 = OpTypePointer Private %137 
                               Private bool* %139 = OpVariable Private 
                                         f32 %140 = OpConstant 3.674022E-40 
                                         i32 %141 = OpConstant 4 
                              Private f32_4* %155 = OpVariable Private 
                              Private f32_3* %163 = OpVariable Private 
                                         i32 %166 = OpConstant 2 
                              Private f32_3* %175 = OpVariable Private 
                                         i32 %178 = OpConstant 3 
                                             %187 = OpTypeVector %137 3 
                                             %188 = OpTypePointer Private %187 
                             Private bool_3* %189 = OpVariable Private 
                                       f32_4 %190 = OpConstantComposite %140 %140 %140 %140 
                                             %193 = OpTypeVector %137 4 
                                             %196 = OpTypePointer Function %10 
                                         u32 %199 = OpConstant 0 
                                             %202 = OpTypePointer Function %6 
                                         u32 %213 = OpConstant 1 
                                         u32 %226 = OpConstant 2 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %273 = OpConstant 3.674022E-40 
                                         f32 %279 = OpConstant 3.674022E-40 
                                             %281 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %282 = OpTypePointer UniformConstant %281 
      UniformConstant read_only TextureCube* %283 = OpVariable UniformConstant 
                    UniformConstant sampler* %285 = OpVariable UniformConstant 
                                             %287 = OpTypeSampledImage %281 
                                Private f32* %293 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         i32 %298 = OpConstant 5 
                               Private bool* %321 = OpVariable Private 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         i32 %329 = OpConstant 8 
                                Private f32* %336 = OpVariable Private 
                              Private f32_3* %349 = OpVariable Private 
                                         i32 %352 = OpConstant 6 
                              Private f32_3* %360 = OpVariable Private 
                                         i32 %363 = OpConstant 7 
                             Private bool_3* %371 = OpVariable Private 
      UniformConstant read_only TextureCube* %438 = OpVariable UniformConstant 
                                         i32 %449 = OpConstant 9 
                                         f32 %511 = OpConstant 3.674022E-40 
                                       f32_3 %512 = OpConstantComposite %511 %511 %511 
                                         i32 %516 = OpConstant 12 
                                         f32 %531 = OpConstant 3.674022E-40 
                                       f32_3 %532 = OpConstantComposite %531 %531 %531 
                                         f32 %539 = OpConstant 3.674022E-40 
                                         i32 %551 = OpConstant 1 
                                         f32 %564 = OpConstant 3.674022E-40 
                                Private f32* %591 = OpVariable Private 
                              Private f32_3* %610 = OpVariable Private 
                                         f32 %625 = OpConstant 3.674022E-40 
                                Private f32* %628 = OpVariable Private 
                                Private f32* %633 = OpVariable Private 
                                         f32 %676 = OpConstant 3.674022E-40 
                                         f32 %704 = OpConstant 3.674022E-40 
                                         f32 %706 = OpConstant 3.674022E-40 
                                         f32 %723 = OpConstant 3.674022E-40 
                                         f32 %728 = OpConstant 3.674022E-40 
                                         f32 %746 = OpConstant 3.674022E-40 
                               Private bool* %762 = OpVariable Private 
                                         i32 %789 = OpConstant 10 
                                       f32_3 %830 = OpConstantComposite %113 %113 %113 
                                         i32 %890 = OpConstant 13 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %197 = OpVariable Function 
                               Function f32* %203 = OpVariable Function 
                               Function f32* %216 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                             Function f32_3* %376 = OpVariable Function 
                               Function f32* %380 = OpVariable Function 
                               Function f32* %392 = OpVariable Function 
                               Function f32* %404 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %47 = OpLoad %46 
                                      sampler %51 = OpLoad %50 
                   read_only Texture2DSampled %53 = OpSampledImage %47 %51 
                                        f32_2 %57 = OpLoad vs_TEXCOORD0 
                                        f32_4 %58 = OpImageSampleImplicitLod %53 %57 
                                                      OpStore %43 %58 
                                        f32_4 %61 = OpLoad %43 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %60 %68 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_2 %76 = OpLoad vs_TEXCOORD3 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                          f32 %80 = OpCompositeExtract %77 3 
                                                      OpStore %69 %80 
                                          f32 %82 = OpLoad %69 
                                        f32_4 %83 = OpCompositeConstruct %82 %82 %82 %82 
                               Uniform f32_4* %85 = OpAccessChain %17 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFMul %83 %86 
                                                      OpStore %81 %87 
                                        f32_4 %88 = OpLoad %81 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                               Uniform f32_4* %90 = OpAccessChain %17 %84 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 3 3 3 
                                        f32_3 %93 = OpFMul %89 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %81 %95 
                                 Private f32* %98 = OpAccessChain %43 %79 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %17 %63 %79 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %99 %102 
                                Private f32* %104 = OpAccessChain %81 %79 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFAdd %103 %105 
                                 Output f32* %108 = OpAccessChain %97 %79 
                                                      OpStore %108 %106 
                                Uniform f32* %110 = OpAccessChain %17 %109 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                         f32 %114 = OpFAdd %112 %113 
                                                      OpStore %69 %114 
                                       f32_4 %116 = OpLoad %35 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFNegate %117 
                                       f32_3 %120 = OpLoad vs_TEXCOORD1 
                                         f32 %121 = OpDot %118 %120 
                                                      OpStore %115 %121 
                                         f32 %122 = OpLoad %115 
                                         f32 %123 = OpLoad %115 
                                         f32 %124 = OpFAdd %122 %123 
                                                      OpStore %115 %124 
                                       f32_3 %126 = OpLoad vs_TEXCOORD1 
                                         f32 %127 = OpLoad %115 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFMul %126 %129 
                                       f32_4 %131 = OpLoad %35 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %130 %133 
                                       f32_4 %135 = OpLoad %125 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %125 %136 
                                Uniform f32* %142 = OpAccessChain %17 %141 %79 
                                         f32 %143 = OpLoad %142 
                                        bool %144 = OpFOrdLessThan %140 %143 
                                                      OpStore %139 %144 
                                        bool %145 = OpLoad %139 
                                                      OpSelectionMerge %147 None 
                                                      OpBranchConditional %145 %146 %264 
                                             %146 = OpLabel 
                                       f32_4 %148 = OpLoad %125 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %125 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %149 %151 
                                                      OpStore %115 %152 
                                         f32 %153 = OpLoad %115 
                                         f32 %154 = OpExtInst %1 32 %153 
                                                      OpStore %115 %154 
                                         f32 %156 = OpLoad %115 
                                       f32_3 %157 = OpCompositeConstruct %156 %156 %156 
                                       f32_4 %158 = OpLoad %125 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %155 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %155 %162 
                                       f32_3 %164 = OpLoad vs_TEXCOORD2 
                                       f32_3 %165 = OpFNegate %164 
                              Uniform f32_4* %167 = OpAccessChain %17 %166 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFAdd %165 %169 
                                                      OpStore %163 %170 
                                       f32_3 %171 = OpLoad %163 
                                       f32_4 %172 = OpLoad %155 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFDiv %171 %173 
                                                      OpStore %163 %174 
                                       f32_3 %176 = OpLoad vs_TEXCOORD2 
                                       f32_3 %177 = OpFNegate %176 
                              Uniform f32_4* %179 = OpAccessChain %17 %178 
                                       f32_4 %180 = OpLoad %179 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFAdd %177 %181 
                                                      OpStore %175 %182 
                                       f32_3 %183 = OpLoad %175 
                                       f32_4 %184 = OpLoad %155 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFDiv %183 %185 
                                                      OpStore %175 %186 
                                       f32_4 %191 = OpLoad %155 
                                       f32_4 %192 = OpVectorShuffle %191 %191 0 1 2 0 
                                      bool_4 %194 = OpFOrdLessThan %190 %192 
                                      bool_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                                      OpStore %189 %195 
                                       f32_3 %198 = OpLoad %163 
                                                      OpStore %197 %198 
                               Private bool* %200 = OpAccessChain %189 %199 
                                        bool %201 = OpLoad %200 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %201 %204 %208 
                                             %204 = OpLabel 
                                Private f32* %206 = OpAccessChain %163 %199 
                                         f32 %207 = OpLoad %206 
                                                      OpStore %203 %207 
                                                      OpBranch %205 
                                             %208 = OpLabel 
                                Private f32* %209 = OpAccessChain %175 %199 
                                         f32 %210 = OpLoad %209 
                                                      OpStore %203 %210 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                         f32 %211 = OpLoad %203 
                               Function f32* %212 = OpAccessChain %197 %199 
                                                      OpStore %212 %211 
                               Private bool* %214 = OpAccessChain %189 %213 
                                        bool %215 = OpLoad %214 
                                                      OpSelectionMerge %218 None 
                                                      OpBranchConditional %215 %217 %221 
                                             %217 = OpLabel 
                                Private f32* %219 = OpAccessChain %163 %213 
                                         f32 %220 = OpLoad %219 
                                                      OpStore %216 %220 
                                                      OpBranch %218 
                                             %221 = OpLabel 
                                Private f32* %222 = OpAccessChain %175 %213 
                                         f32 %223 = OpLoad %222 
                                                      OpStore %216 %223 
                                                      OpBranch %218 
                                             %218 = OpLabel 
                                         f32 %224 = OpLoad %216 
                               Function f32* %225 = OpAccessChain %197 %213 
                                                      OpStore %225 %224 
                               Private bool* %227 = OpAccessChain %189 %226 
                                        bool %228 = OpLoad %227 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %228 %230 %234 
                                             %230 = OpLabel 
                                Private f32* %232 = OpAccessChain %163 %226 
                                         f32 %233 = OpLoad %232 
                                                      OpStore %229 %233 
                                                      OpBranch %231 
                                             %234 = OpLabel 
                                Private f32* %235 = OpAccessChain %175 %226 
                                         f32 %236 = OpLoad %235 
                                                      OpStore %229 %236 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                         f32 %237 = OpLoad %229 
                               Function f32* %238 = OpAccessChain %197 %226 
                                                      OpStore %238 %237 
                                       f32_3 %239 = OpLoad %197 
                                                      OpStore %163 %239 
                                Private f32* %240 = OpAccessChain %163 %213 
                                         f32 %241 = OpLoad %240 
                                Private f32* %242 = OpAccessChain %163 %199 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpExtInst %1 37 %241 %243 
                                                      OpStore %115 %244 
                                Private f32* %245 = OpAccessChain %163 %226 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpLoad %115 
                                         f32 %248 = OpExtInst %1 37 %246 %247 
                                                      OpStore %115 %248 
                                       f32_3 %249 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %250 = OpAccessChain %17 %141 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFNegate %252 
                                       f32_3 %254 = OpFAdd %249 %253 
                                                      OpStore %163 %254 
                                       f32_4 %255 = OpLoad %155 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpLoad %115 
                                       f32_3 %258 = OpCompositeConstruct %257 %257 %257 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %163 
                                       f32_3 %261 = OpFAdd %259 %260 
                                       f32_4 %262 = OpLoad %155 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %155 %263 
                                                      OpBranch %147 
                                             %264 = OpLabel 
                                       f32_4 %265 = OpLoad %125 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %155 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %155 %268 
                                                      OpBranch %147 
                                             %147 = OpLabel 
                                         f32 %269 = OpLoad %69 
                                         f32 %270 = OpFNegate %269 
                                         f32 %272 = OpFMul %270 %271 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %115 %274 
                                         f32 %275 = OpLoad %69 
                                         f32 %276 = OpLoad %115 
                                         f32 %277 = OpFMul %275 %276 
                                                      OpStore %115 %277 
                                         f32 %278 = OpLoad %115 
                                         f32 %280 = OpFMul %278 %279 
                                                      OpStore %115 %280 
                       read_only TextureCube %284 = OpLoad %283 
                                     sampler %286 = OpLoad %285 
                read_only TextureCubeSampled %288 = OpSampledImage %284 %286 
                                       f32_4 %289 = OpLoad %155 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                         f32 %291 = OpLoad %115 
                                       f32_4 %292 = OpImageSampleExplicitLod %288 %290 Lod %7 
                                                      OpStore %155 %292 
                                Private f32* %294 = OpAccessChain %155 %79 
                                         f32 %295 = OpLoad %294 
                                         f32 %297 = OpFAdd %295 %296 
                                                      OpStore %293 %297 
                                Uniform f32* %299 = OpAccessChain %17 %298 %79 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpLoad %293 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpFAdd %302 %113 
                                                      OpStore %293 %303 
                                         f32 %304 = OpLoad %293 
                                         f32 %305 = OpExtInst %1 30 %304 
                                                      OpStore %293 %305 
                                         f32 %306 = OpLoad %293 
                                Uniform f32* %307 = OpAccessChain %17 %298 %213 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                                      OpStore %293 %309 
                                         f32 %310 = OpLoad %293 
                                         f32 %311 = OpExtInst %1 29 %310 
                                                      OpStore %293 %311 
                                         f32 %312 = OpLoad %293 
                                Uniform f32* %313 = OpAccessChain %17 %298 %199 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                                      OpStore %293 %315 
                                       f32_4 %316 = OpLoad %155 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                         f32 %318 = OpLoad %293 
                                       f32_3 %319 = OpCompositeConstruct %318 %318 %318 
                                       f32_3 %320 = OpFMul %317 %319 
                                                      OpStore %163 %320 
                                Uniform f32* %322 = OpAccessChain %17 %178 %79 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdLessThan %323 %324 
                                                      OpStore %321 %325 
                                        bool %326 = OpLoad %321 
                                                      OpSelectionMerge %328 None 
                                                      OpBranchConditional %326 %327 %328 
                                             %327 = OpLabel 
                                Uniform f32* %330 = OpAccessChain %17 %329 %79 
                                         f32 %331 = OpLoad %330 
                                        bool %332 = OpFOrdLessThan %140 %331 
                                                      OpStore %321 %332 
                                        bool %333 = OpLoad %321 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %335 
                                             %334 = OpLabel 
                                       f32_4 %337 = OpLoad %125 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_4 %339 = OpLoad %125 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                         f32 %341 = OpDot %338 %340 
                                                      OpStore %336 %341 
                                         f32 %342 = OpLoad %336 
                                         f32 %343 = OpExtInst %1 32 %342 
                                                      OpStore %336 %343 
                                         f32 %344 = OpLoad %336 
                                       f32_3 %345 = OpCompositeConstruct %344 %344 %344 
                                       f32_4 %346 = OpLoad %125 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFMul %345 %347 
                                                      OpStore %175 %348 
                                       f32_3 %350 = OpLoad vs_TEXCOORD2 
                                       f32_3 %351 = OpFNegate %350 
                              Uniform f32_4* %353 = OpAccessChain %17 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %351 %355 
                                                      OpStore %349 %356 
                                       f32_3 %357 = OpLoad %349 
                                       f32_3 %358 = OpLoad %175 
                                       f32_3 %359 = OpFDiv %357 %358 
                                                      OpStore %349 %359 
                                       f32_3 %361 = OpLoad vs_TEXCOORD2 
                                       f32_3 %362 = OpFNegate %361 
                              Uniform f32_4* %364 = OpAccessChain %17 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %362 %366 
                                                      OpStore %360 %367 
                                       f32_3 %368 = OpLoad %360 
                                       f32_3 %369 = OpLoad %175 
                                       f32_3 %370 = OpFDiv %368 %369 
                                                      OpStore %360 %370 
                                       f32_3 %372 = OpLoad %175 
                                       f32_4 %373 = OpVectorShuffle %372 %372 0 1 2 0 
                                      bool_4 %374 = OpFOrdLessThan %190 %373 
                                      bool_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                                      OpStore %371 %375 
                                       f32_3 %377 = OpLoad %349 
                                                      OpStore %376 %377 
                               Private bool* %378 = OpAccessChain %371 %199 
                                        bool %379 = OpLoad %378 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %379 %381 %385 
                                             %381 = OpLabel 
                                Private f32* %383 = OpAccessChain %349 %199 
                                         f32 %384 = OpLoad %383 
                                                      OpStore %380 %384 
                                                      OpBranch %382 
                                             %385 = OpLabel 
                                Private f32* %386 = OpAccessChain %360 %199 
                                         f32 %387 = OpLoad %386 
                                                      OpStore %380 %387 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                         f32 %388 = OpLoad %380 
                               Function f32* %389 = OpAccessChain %376 %199 
                                                      OpStore %389 %388 
                               Private bool* %390 = OpAccessChain %371 %213 
                                        bool %391 = OpLoad %390 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %391 %393 %397 
                                             %393 = OpLabel 
                                Private f32* %395 = OpAccessChain %349 %213 
                                         f32 %396 = OpLoad %395 
                                                      OpStore %392 %396 
                                                      OpBranch %394 
                                             %397 = OpLabel 
                                Private f32* %398 = OpAccessChain %360 %213 
                                         f32 %399 = OpLoad %398 
                                                      OpStore %392 %399 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %400 = OpLoad %392 
                               Function f32* %401 = OpAccessChain %376 %213 
                                                      OpStore %401 %400 
                               Private bool* %402 = OpAccessChain %371 %226 
                                        bool %403 = OpLoad %402 
                                                      OpSelectionMerge %406 None 
                                                      OpBranchConditional %403 %405 %409 
                                             %405 = OpLabel 
                                Private f32* %407 = OpAccessChain %349 %226 
                                         f32 %408 = OpLoad %407 
                                                      OpStore %404 %408 
                                                      OpBranch %406 
                                             %409 = OpLabel 
                                Private f32* %410 = OpAccessChain %360 %226 
                                         f32 %411 = OpLoad %410 
                                                      OpStore %404 %411 
                                                      OpBranch %406 
                                             %406 = OpLabel 
                                         f32 %412 = OpLoad %404 
                               Function f32* %413 = OpAccessChain %376 %226 
                                                      OpStore %413 %412 
                                       f32_3 %414 = OpLoad %376 
                                                      OpStore %349 %414 
                                Private f32* %415 = OpAccessChain %349 %213 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %349 %199 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpExtInst %1 37 %416 %418 
                                                      OpStore %336 %419 
                                Private f32* %420 = OpAccessChain %349 %226 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpLoad %336 
                                         f32 %423 = OpExtInst %1 37 %421 %422 
                                                      OpStore %336 %423 
                                       f32_3 %424 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %425 = OpAccessChain %17 %329 
                                       f32_4 %426 = OpLoad %425 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_3 %428 = OpFNegate %427 
                                       f32_3 %429 = OpFAdd %424 %428 
                                                      OpStore %349 %429 
                                       f32_3 %430 = OpLoad %175 
                                         f32 %431 = OpLoad %336 
                                       f32_3 %432 = OpCompositeConstruct %431 %431 %431 
                                       f32_3 %433 = OpFMul %430 %432 
                                       f32_3 %434 = OpLoad %349 
                                       f32_3 %435 = OpFAdd %433 %434 
                                       f32_4 %436 = OpLoad %125 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %125 %437 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                       read_only TextureCube %439 = OpLoad %438 
                                     sampler %440 = OpLoad %285 
                read_only TextureCubeSampled %441 = OpSampledImage %439 %440 
                                       f32_4 %442 = OpLoad %125 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                         f32 %444 = OpLoad %115 
                                       f32_4 %445 = OpImageSampleExplicitLod %441 %443 Lod %7 
                                                      OpStore %125 %445 
                                Private f32* %446 = OpAccessChain %125 %79 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFAdd %447 %296 
                                                      OpStore %115 %448 
                                Uniform f32* %450 = OpAccessChain %17 %449 %79 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpLoad %115 
                                         f32 %453 = OpFMul %451 %452 
                                         f32 %454 = OpFAdd %453 %113 
                                                      OpStore %115 %454 
                                         f32 %455 = OpLoad %115 
                                         f32 %456 = OpExtInst %1 30 %455 
                                                      OpStore %115 %456 
                                         f32 %457 = OpLoad %115 
                                Uniform f32* %458 = OpAccessChain %17 %449 %213 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFMul %457 %459 
                                                      OpStore %115 %460 
                                         f32 %461 = OpLoad %115 
                                         f32 %462 = OpExtInst %1 29 %461 
                                                      OpStore %115 %462 
                                         f32 %463 = OpLoad %115 
                                Uniform f32* %464 = OpAccessChain %17 %449 %199 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                                      OpStore %115 %466 
                                       f32_4 %467 = OpLoad %125 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                         f32 %469 = OpLoad %115 
                                       f32_3 %470 = OpCompositeConstruct %469 %469 %469 
                                       f32_3 %471 = OpFMul %468 %470 
                                       f32_4 %472 = OpLoad %125 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %125 %473 
                                         f32 %474 = OpLoad %293 
                                       f32_3 %475 = OpCompositeConstruct %474 %474 %474 
                                       f32_4 %476 = OpLoad %155 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %125 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpFNegate %480 
                                       f32_3 %482 = OpFAdd %478 %481 
                                       f32_4 %483 = OpLoad %155 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %155 %484 
                              Uniform f32_4* %485 = OpAccessChain %17 %178 
                                       f32_4 %486 = OpLoad %485 
                                       f32_3 %487 = OpVectorShuffle %486 %486 3 3 3 
                                       f32_4 %488 = OpLoad %155 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 2 
                                       f32_3 %490 = OpFMul %487 %489 
                                       f32_4 %491 = OpLoad %125 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFAdd %490 %492 
                                                      OpStore %163 %493 
                                                      OpBranch %328 
                                             %328 = OpLabel 
                                       f32_3 %494 = OpLoad vs_TEXCOORD1 
                                       f32_3 %495 = OpLoad vs_TEXCOORD1 
                                         f32 %496 = OpDot %494 %495 
                                                      OpStore %115 %496 
                                         f32 %497 = OpLoad %115 
                                         f32 %498 = OpExtInst %1 32 %497 
                                                      OpStore %115 %498 
                                         f32 %499 = OpLoad %115 
                                       f32_3 %500 = OpCompositeConstruct %499 %499 %499 
                                       f32_3 %501 = OpLoad vs_TEXCOORD1 
                                       f32_3 %502 = OpFMul %500 %501 
                                       f32_4 %503 = OpLoad %125 
                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 6 3 
                                                      OpStore %125 %504 
                                       f32_4 %505 = OpLoad %43 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
                              Uniform f32_4* %507 = OpAccessChain %17 %63 
                                       f32_4 %508 = OpLoad %507 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                       f32_3 %510 = OpFMul %506 %509 
                                       f32_3 %513 = OpFAdd %510 %512 
                                       f32_4 %514 = OpLoad %43 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 6 3 
                                                      OpStore %43 %515 
                                Uniform f32* %517 = OpAccessChain %17 %516 
                                         f32 %518 = OpLoad %517 
                                Uniform f32* %519 = OpAccessChain %17 %516 
                                         f32 %520 = OpLoad %519 
                                Uniform f32* %521 = OpAccessChain %17 %516 
                                         f32 %522 = OpLoad %521 
                                       f32_3 %523 = OpCompositeConstruct %518 %520 %522 
                                         f32 %524 = OpCompositeExtract %523 0 
                                         f32 %525 = OpCompositeExtract %523 1 
                                         f32 %526 = OpCompositeExtract %523 2 
                                       f32_3 %527 = OpCompositeConstruct %524 %525 %526 
                                       f32_4 %528 = OpLoad %43 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFMul %527 %529 
                                       f32_3 %533 = OpFAdd %530 %532 
                                       f32_4 %534 = OpLoad %43 
                                       f32_4 %535 = OpVectorShuffle %534 %533 4 5 6 3 
                                                      OpStore %43 %535 
                                Uniform f32* %536 = OpAccessChain %17 %516 
                                         f32 %537 = OpLoad %536 
                                         f32 %538 = OpFNegate %537 
                                         f32 %540 = OpFMul %538 %539 
                                         f32 %541 = OpFAdd %540 %539 
                                                      OpStore %115 %541 
                                         f32 %542 = OpLoad %115 
                                       f32_3 %543 = OpCompositeConstruct %542 %542 %542 
                                       f32_3 %544 = OpLoad %60 
                                       f32_3 %545 = OpFMul %543 %544 
                                                      OpStore %60 %545 
                                       f32_4 %546 = OpLoad %9 
                                       f32_3 %547 = OpVectorShuffle %546 %546 0 1 2 
                                         f32 %548 = OpLoad %27 
                                       f32_3 %549 = OpCompositeConstruct %548 %548 %548 
                                       f32_3 %550 = OpFMul %547 %549 
                              Uniform f32_4* %552 = OpAccessChain %17 %551 
                                       f32_4 %553 = OpLoad %552 
                                       f32_3 %554 = OpVectorShuffle %553 %553 0 1 2 
                                       f32_3 %555 = OpFAdd %550 %554 
                                       f32_4 %556 = OpLoad %9 
                                       f32_4 %557 = OpVectorShuffle %556 %555 4 5 6 3 
                                                      OpStore %9 %557 
                                       f32_4 %558 = OpLoad %9 
                                       f32_3 %559 = OpVectorShuffle %558 %558 0 1 2 
                                       f32_4 %560 = OpLoad %9 
                                       f32_3 %561 = OpVectorShuffle %560 %560 0 1 2 
                                         f32 %562 = OpDot %559 %561 
                                                      OpStore %27 %562 
                                         f32 %563 = OpLoad %27 
                                         f32 %565 = OpExtInst %1 40 %563 %564 
                                                      OpStore %27 %565 
                                         f32 %566 = OpLoad %27 
                                         f32 %567 = OpExtInst %1 32 %566 
                                                      OpStore %27 %567 
                                         f32 %568 = OpLoad %27 
                                       f32_3 %569 = OpCompositeConstruct %568 %568 %568 
                                       f32_4 %570 = OpLoad %9 
                                       f32_3 %571 = OpVectorShuffle %570 %570 0 1 2 
                                       f32_3 %572 = OpFMul %569 %571 
                                       f32_4 %573 = OpLoad %9 
                                       f32_4 %574 = OpVectorShuffle %573 %572 4 5 6 3 
                                                      OpStore %9 %574 
                                       f32_4 %575 = OpLoad %125 
                                       f32_3 %576 = OpVectorShuffle %575 %575 0 1 2 
                                       f32_4 %577 = OpLoad %35 
                                       f32_3 %578 = OpVectorShuffle %577 %577 0 1 2 
                                         f32 %579 = OpDot %576 %578 
                                                      OpStore %27 %579 
                                       f32_4 %580 = OpLoad %125 
                                       f32_3 %581 = OpVectorShuffle %580 %580 0 1 2 
                              Uniform f32_4* %582 = OpAccessChain %17 %551 
                                       f32_4 %583 = OpLoad %582 
                                       f32_3 %584 = OpVectorShuffle %583 %583 0 1 2 
                                         f32 %585 = OpDot %581 %584 
                                Private f32* %586 = OpAccessChain %35 %199 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %35 %199 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpExtInst %1 43 %588 %140 %113 
                                Private f32* %590 = OpAccessChain %35 %199 
                                                      OpStore %590 %589 
                                       f32_4 %592 = OpLoad %125 
                                       f32_3 %593 = OpVectorShuffle %592 %592 0 1 2 
                                       f32_4 %594 = OpLoad %9 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                         f32 %596 = OpDot %593 %595 
                                                      OpStore %591 %596 
                                         f32 %597 = OpLoad %591 
                                         f32 %598 = OpExtInst %1 43 %597 %140 %113 
                                                      OpStore %591 %598 
                              Uniform f32_4* %599 = OpAccessChain %17 %551 
                                       f32_4 %600 = OpLoad %599 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_4 %602 = OpLoad %9 
                                       f32_3 %603 = OpVectorShuffle %602 %602 0 1 2 
                                         f32 %604 = OpDot %601 %603 
                                Private f32* %605 = OpAccessChain %9 %199 
                                                      OpStore %605 %604 
                                Private f32* %606 = OpAccessChain %9 %199 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpExtInst %1 43 %607 %140 %113 
                                Private f32* %609 = OpAccessChain %9 %199 
                                                      OpStore %609 %608 
                                Private f32* %611 = OpAccessChain %9 %199 
                                         f32 %612 = OpLoad %611 
                                Private f32* %613 = OpAccessChain %9 %199 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpFMul %612 %614 
                                Private f32* %616 = OpAccessChain %610 %199 
                                                      OpStore %616 %615 
                                       f32_3 %617 = OpLoad %610 
                                       f32_2 %618 = OpVectorShuffle %617 %617 0 0 
                                         f32 %619 = OpLoad %69 
                                       f32_2 %620 = OpCompositeConstruct %619 %619 
                                         f32 %621 = OpDot %618 %620 
                                Private f32* %622 = OpAccessChain %610 %199 
                                                      OpStore %622 %621 
                                Private f32* %623 = OpAccessChain %610 %199 
                                         f32 %624 = OpLoad %623 
                                         f32 %626 = OpFAdd %624 %625 
                                Private f32* %627 = OpAccessChain %610 %199 
                                                      OpStore %627 %626 
                                Private f32* %629 = OpAccessChain %35 %199 
                                         f32 %630 = OpLoad %629 
                                         f32 %631 = OpFNegate %630 
                                         f32 %632 = OpFAdd %631 %113 
                                                      OpStore %628 %632 
                                         f32 %634 = OpLoad %628 
                                         f32 %635 = OpLoad %628 
                                         f32 %636 = OpFMul %634 %635 
                                                      OpStore %633 %636 
                                         f32 %637 = OpLoad %633 
                                         f32 %638 = OpLoad %633 
                                         f32 %639 = OpFMul %637 %638 
                                                      OpStore %633 %639 
                                         f32 %640 = OpLoad %628 
                                         f32 %641 = OpLoad %633 
                                         f32 %642 = OpFMul %640 %641 
                                                      OpStore %628 %642 
                                Private f32* %643 = OpAccessChain %610 %199 
                                         f32 %644 = OpLoad %643 
                                         f32 %645 = OpLoad %628 
                                         f32 %646 = OpFMul %644 %645 
                                         f32 %647 = OpFAdd %646 %113 
                                                      OpStore %628 %647 
                                         f32 %648 = OpLoad %27 
                                         f32 %649 = OpExtInst %1 4 %648 
                                         f32 %650 = OpFNegate %649 
                                         f32 %651 = OpFAdd %650 %113 
                                                      OpStore %633 %651 
                                         f32 %652 = OpLoad %633 
                                         f32 %653 = OpLoad %633 
                                         f32 %654 = OpFMul %652 %653 
                                                      OpStore %293 %654 
                                         f32 %655 = OpLoad %293 
                                         f32 %656 = OpLoad %293 
                                         f32 %657 = OpFMul %655 %656 
                                                      OpStore %293 %657 
                                         f32 %658 = OpLoad %633 
                                         f32 %659 = OpLoad %293 
                                         f32 %660 = OpFMul %658 %659 
                                                      OpStore %633 %660 
                                Private f32* %661 = OpAccessChain %610 %199 
                                         f32 %662 = OpLoad %661 
                                         f32 %663 = OpLoad %633 
                                         f32 %664 = OpFMul %662 %663 
                                         f32 %665 = OpFAdd %664 %113 
                                Private f32* %666 = OpAccessChain %610 %199 
                                                      OpStore %666 %665 
                                Private f32* %667 = OpAccessChain %610 %199 
                                         f32 %668 = OpLoad %667 
                                         f32 %669 = OpLoad %628 
                                         f32 %670 = OpFMul %668 %669 
                                Private f32* %671 = OpAccessChain %610 %199 
                                                      OpStore %671 %670 
                                         f32 %672 = OpLoad %69 
                                         f32 %673 = OpLoad %69 
                                         f32 %674 = OpFMul %672 %673 
                                                      OpStore %628 %674 
                                         f32 %675 = OpLoad %628 
                                         f32 %677 = OpExtInst %1 40 %675 %676 
                                                      OpStore %628 %677 
                                         f32 %678 = OpLoad %628 
                                         f32 %679 = OpFNegate %678 
                                         f32 %680 = OpFAdd %679 %113 
                                                      OpStore %69 %680 
                                         f32 %681 = OpLoad %27 
                                         f32 %682 = OpExtInst %1 4 %681 
                                         f32 %683 = OpLoad %69 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpLoad %628 
                                         f32 %686 = OpFAdd %684 %685 
                                                      OpStore %293 %686 
                                Private f32* %687 = OpAccessChain %35 %199 
                                         f32 %688 = OpLoad %687 
                                         f32 %689 = OpLoad %69 
                                         f32 %690 = OpFMul %688 %689 
                                         f32 %691 = OpLoad %628 
                                         f32 %692 = OpFAdd %690 %691 
                                                      OpStore %69 %692 
                                         f32 %693 = OpLoad %27 
                                         f32 %694 = OpExtInst %1 4 %693 
                                         f32 %695 = OpLoad %69 
                                         f32 %696 = OpFMul %694 %695 
                                                      OpStore %27 %696 
                                Private f32* %697 = OpAccessChain %35 %199 
                                         f32 %698 = OpLoad %697 
                                         f32 %699 = OpLoad %293 
                                         f32 %700 = OpFMul %698 %699 
                                         f32 %701 = OpLoad %27 
                                         f32 %702 = OpFAdd %700 %701 
                                                      OpStore %27 %702 
                                         f32 %703 = OpLoad %27 
                                         f32 %705 = OpFAdd %703 %704 
                                                      OpStore %27 %705 
                                         f32 %707 = OpLoad %27 
                                         f32 %708 = OpFDiv %706 %707 
                                                      OpStore %27 %708 
                                         f32 %709 = OpLoad %628 
                                         f32 %710 = OpLoad %628 
                                         f32 %711 = OpFMul %709 %710 
                                                      OpStore %69 %711 
                                         f32 %712 = OpLoad %591 
                                         f32 %713 = OpLoad %69 
                                         f32 %714 = OpFMul %712 %713 
                                         f32 %715 = OpLoad %591 
                                         f32 %716 = OpFNegate %715 
                                         f32 %717 = OpFAdd %714 %716 
                                                      OpStore %293 %717 
                                         f32 %718 = OpLoad %293 
                                         f32 %719 = OpLoad %591 
                                         f32 %720 = OpFMul %718 %719 
                                         f32 %721 = OpFAdd %720 %113 
                                                      OpStore %591 %721 
                                         f32 %722 = OpLoad %69 
                                         f32 %724 = OpFMul %722 %723 
                                                      OpStore %69 %724 
                                         f32 %725 = OpLoad %591 
                                         f32 %726 = OpLoad %591 
                                         f32 %727 = OpFMul %725 %726 
                                         f32 %729 = OpFAdd %727 %728 
                                                      OpStore %591 %729 
                                         f32 %730 = OpLoad %69 
                                         f32 %731 = OpLoad %591 
                                         f32 %732 = OpFDiv %730 %731 
                                                      OpStore %591 %732 
                                         f32 %733 = OpLoad %27 
                                         f32 %734 = OpLoad %591 
                                         f32 %735 = OpFMul %733 %734 
                                Private f32* %736 = OpAccessChain %610 %226 
                                                      OpStore %736 %735 
                                       f32_4 %737 = OpLoad %35 
                                       f32_2 %738 = OpVectorShuffle %737 %737 0 0 
                                       f32_3 %739 = OpLoad %610 
                                       f32_2 %740 = OpVectorShuffle %739 %739 0 2 
                                       f32_2 %741 = OpFMul %738 %740 
                                       f32_3 %742 = OpLoad %610 
                                       f32_3 %743 = OpVectorShuffle %742 %741 3 1 4 
                                                      OpStore %610 %743 
                                Private f32* %744 = OpAccessChain %610 %226 
                                         f32 %745 = OpLoad %744 
                                         f32 %747 = OpFMul %745 %746 
                                                      OpStore %27 %747 
                                         f32 %748 = OpLoad %27 
                                         f32 %749 = OpExtInst %1 40 %748 %140 
                                                      OpStore %27 %749 
                                         f32 %750 = OpLoad %628 
                                         f32 %751 = OpLoad %628 
                                         f32 %752 = OpFMul %750 %751 
                                         f32 %753 = OpFAdd %752 %113 
                                                      OpStore %628 %753 
                                         f32 %754 = OpLoad %628 
                                         f32 %755 = OpFDiv %113 %754 
                                                      OpStore %628 %755 
                                       f32_4 %756 = OpLoad %43 
                                       f32_3 %757 = OpVectorShuffle %756 %756 0 1 2 
                                       f32_4 %758 = OpLoad %43 
                                       f32_3 %759 = OpVectorShuffle %758 %758 0 1 2 
                                         f32 %760 = OpDot %757 %759 
                                Private f32* %761 = OpAccessChain %35 %199 
                                                      OpStore %761 %760 
                                Private f32* %763 = OpAccessChain %35 %199 
                                         f32 %764 = OpLoad %763 
                                        bool %765 = OpFOrdNotEqual %764 %140 
                                                      OpStore %762 %765 
                                        bool %766 = OpLoad %762 
                                         f32 %767 = OpSelect %766 %113 %140 
                                Private f32* %768 = OpAccessChain %35 %199 
                                                      OpStore %768 %767 
                                         f32 %769 = OpLoad %27 
                                Private f32* %770 = OpAccessChain %35 %199 
                                         f32 %771 = OpLoad %770 
                                         f32 %772 = OpFMul %769 %771 
                                                      OpStore %27 %772 
                                         f32 %773 = OpLoad %115 
                                         f32 %774 = OpFNegate %773 
                                Uniform f32* %775 = OpAccessChain %17 %109 
                                         f32 %776 = OpLoad %775 
                                         f32 %777 = OpFAdd %774 %776 
                                Private f32* %778 = OpAccessChain %35 %199 
                                                      OpStore %778 %777 
                                Private f32* %779 = OpAccessChain %35 %199 
                                         f32 %780 = OpLoad %779 
                                         f32 %781 = OpFAdd %780 %113 
                                Private f32* %782 = OpAccessChain %35 %199 
                                                      OpStore %782 %781 
                                Private f32* %783 = OpAccessChain %35 %199 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpExtInst %1 43 %784 %140 %113 
                                Private f32* %786 = OpAccessChain %35 %199 
                                                      OpStore %786 %785 
                                       f32_3 %787 = OpLoad %610 
                                       f32_3 %788 = OpVectorShuffle %787 %787 0 0 0 
                              Uniform f32_4* %790 = OpAccessChain %17 %789 
                                       f32_4 %791 = OpLoad %790 
                                       f32_3 %792 = OpVectorShuffle %791 %791 0 1 2 
                                       f32_3 %793 = OpFMul %788 %792 
                                       f32_4 %794 = OpLoad %125 
                                       f32_4 %795 = OpVectorShuffle %794 %793 4 5 6 3 
                                                      OpStore %125 %795 
                                         f32 %796 = OpLoad %27 
                                       f32_3 %797 = OpCompositeConstruct %796 %796 %796 
                              Uniform f32_4* %798 = OpAccessChain %17 %789 
                                       f32_4 %799 = OpLoad %798 
                                       f32_3 %800 = OpVectorShuffle %799 %799 0 1 2 
                                       f32_3 %801 = OpFMul %797 %800 
                                       f32_4 %802 = OpLoad %155 
                                       f32_4 %803 = OpVectorShuffle %802 %801 4 5 6 3 
                                                      OpStore %155 %803 
                                Private f32* %804 = OpAccessChain %9 %199 
                                         f32 %805 = OpLoad %804 
                                         f32 %806 = OpFNegate %805 
                                         f32 %807 = OpFAdd %806 %113 
                                Private f32* %808 = OpAccessChain %9 %199 
                                                      OpStore %808 %807 
                                Private f32* %809 = OpAccessChain %9 %199 
                                         f32 %810 = OpLoad %809 
                                Private f32* %811 = OpAccessChain %9 %199 
                                         f32 %812 = OpLoad %811 
                                         f32 %813 = OpFMul %810 %812 
                                Private f32* %814 = OpAccessChain %610 %199 
                                                      OpStore %814 %813 
                                Private f32* %815 = OpAccessChain %610 %199 
                                         f32 %816 = OpLoad %815 
                                Private f32* %817 = OpAccessChain %610 %199 
                                         f32 %818 = OpLoad %817 
                                         f32 %819 = OpFMul %816 %818 
                                Private f32* %820 = OpAccessChain %610 %199 
                                                      OpStore %820 %819 
                                Private f32* %821 = OpAccessChain %9 %199 
                                         f32 %822 = OpLoad %821 
                                Private f32* %823 = OpAccessChain %610 %199 
                                         f32 %824 = OpLoad %823 
                                         f32 %825 = OpFMul %822 %824 
                                Private f32* %826 = OpAccessChain %9 %199 
                                                      OpStore %826 %825 
                                       f32_4 %827 = OpLoad %43 
                                       f32_3 %828 = OpVectorShuffle %827 %827 0 1 2 
                                       f32_3 %829 = OpFNegate %828 
                                       f32_3 %831 = OpFAdd %829 %830 
                                                      OpStore %175 %831 
                                       f32_3 %832 = OpLoad %175 
                                       f32_4 %833 = OpLoad %9 
                                       f32_3 %834 = OpVectorShuffle %833 %833 0 0 0 
                                       f32_3 %835 = OpFMul %832 %834 
                                       f32_4 %836 = OpLoad %43 
                                       f32_3 %837 = OpVectorShuffle %836 %836 0 1 2 
                                       f32_3 %838 = OpFAdd %835 %837 
                                       f32_4 %839 = OpLoad %9 
                                       f32_4 %840 = OpVectorShuffle %839 %838 4 5 2 6 
                                                      OpStore %9 %840 
                                       f32_4 %841 = OpLoad %9 
                                       f32_3 %842 = OpVectorShuffle %841 %841 0 1 3 
                                       f32_4 %843 = OpLoad %155 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 2 
                                       f32_3 %845 = OpFMul %842 %844 
                                       f32_4 %846 = OpLoad %9 
                                       f32_4 %847 = OpVectorShuffle %846 %845 4 5 2 6 
                                                      OpStore %9 %847 
                                       f32_3 %848 = OpLoad %60 
                                       f32_4 %849 = OpLoad %125 
                                       f32_3 %850 = OpVectorShuffle %849 %849 0 1 2 
                                       f32_3 %851 = OpFMul %848 %850 
                                       f32_4 %852 = OpLoad %9 
                                       f32_3 %853 = OpVectorShuffle %852 %852 0 1 3 
                                       f32_3 %854 = OpFAdd %851 %853 
                                       f32_4 %855 = OpLoad %9 
                                       f32_4 %856 = OpVectorShuffle %855 %854 4 5 2 6 
                                                      OpStore %9 %856 
                                       f32_3 %857 = OpLoad %163 
                                         f32 %858 = OpLoad %628 
                                       f32_3 %859 = OpCompositeConstruct %858 %858 %858 
                                       f32_3 %860 = OpFMul %857 %859 
                                                      OpStore %60 %860 
                                       f32_4 %861 = OpLoad %43 
                                       f32_3 %862 = OpVectorShuffle %861 %861 0 1 2 
                                       f32_3 %863 = OpFNegate %862 
                                       f32_4 %864 = OpLoad %35 
                                       f32_3 %865 = OpVectorShuffle %864 %864 0 0 0 
                                       f32_3 %866 = OpFAdd %863 %865 
                                       f32_4 %867 = OpLoad %35 
                                       f32_4 %868 = OpVectorShuffle %867 %866 4 5 2 6 
                                                      OpStore %35 %868 
                                         f32 %869 = OpLoad %633 
                                       f32_3 %870 = OpCompositeConstruct %869 %869 %869 
                                       f32_4 %871 = OpLoad %35 
                                       f32_3 %872 = OpVectorShuffle %871 %871 0 1 3 
                                       f32_3 %873 = OpFMul %870 %872 
                                       f32_4 %874 = OpLoad %43 
                                       f32_3 %875 = OpVectorShuffle %874 %874 0 1 2 
                                       f32_3 %876 = OpFAdd %873 %875 
                                       f32_4 %877 = OpLoad %35 
                                       f32_4 %878 = OpVectorShuffle %877 %876 4 5 6 3 
                                                      OpStore %35 %878 
                                       f32_3 %879 = OpLoad %60 
                                       f32_4 %880 = OpLoad %35 
                                       f32_3 %881 = OpVectorShuffle %880 %880 0 1 2 
                                       f32_3 %882 = OpFMul %879 %881 
                                       f32_4 %883 = OpLoad %9 
                                       f32_3 %884 = OpVectorShuffle %883 %883 0 1 3 
                                       f32_3 %885 = OpFAdd %882 %884 
                                       f32_4 %886 = OpLoad %9 
                                       f32_4 %887 = OpVectorShuffle %886 %885 4 5 6 3 
                                                      OpStore %9 %887 
                                       f32_4 %888 = OpLoad %81 
                                       f32_3 %889 = OpVectorShuffle %888 %888 0 1 2 
                                Uniform f32* %891 = OpAccessChain %17 %890 
                                         f32 %892 = OpLoad %891 
                                Uniform f32* %893 = OpAccessChain %17 %890 
                                         f32 %894 = OpLoad %893 
                                Uniform f32* %895 = OpAccessChain %17 %890 
                                         f32 %896 = OpLoad %895 
                                       f32_3 %897 = OpCompositeConstruct %892 %894 %896 
                                         f32 %898 = OpCompositeExtract %897 0 
                                         f32 %899 = OpCompositeExtract %897 1 
                                         f32 %900 = OpCompositeExtract %897 2 
                                       f32_3 %901 = OpCompositeConstruct %898 %899 %900 
                                       f32_3 %902 = OpFMul %889 %901 
                                       f32_4 %903 = OpLoad %9 
                                       f32_3 %904 = OpVectorShuffle %903 %903 0 1 2 
                                       f32_3 %905 = OpFAdd %902 %904 
                                       f32_4 %906 = OpLoad %97 
                                       f32_4 %907 = OpVectorShuffle %906 %905 4 5 6 3 
                                                      OpStore %97 %907 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec2 u_xlat4;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat4.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat0.xy = (-u_xlat0.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat4.xy;
    u_xlat0.xy = u_xlat0.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat0.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	float _Emission;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    u_xlat4 = u_xlat4.wwww * _RedDotColor;
    u_xlat4.xyz = u_xlat4.xyz * _RedDotColor.www;
    SV_Target0.w = u_xlat2.w * _Color.w + u_xlat4.w;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat41 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat41 = u_xlat41 + u_xlat41;
    u_xlat5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat41)) + (-u_xlat1.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz;
    u_xlat6.w = 1.0;
    u_xlat7.x = dot(unity_SHAr, u_xlat6);
    u_xlat7.y = dot(unity_SHAg, u_xlat6);
    u_xlat7.z = dot(unity_SHAb, u_xlat6);
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat41 = inversesqrt(u_xlat41);
        u_xlat7.xyz = vec3(u_xlat41) * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat41 = min(u_xlat8.y, u_xlat8.x);
        u_xlat41 = min(u_xlat8.z, u_xlat41);
        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat41) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    }
    u_xlat41 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat41 = u_xlat40 * u_xlat41;
    u_xlat41 = u_xlat41 * 6.0;
    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat41);
    u_xlat42 = u_xlat7.w + -1.0;
    u_xlat42 = unity_SpecCube0_HDR.w * u_xlat42 + 1.0;
    u_xlat42 = log2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat5.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        }
        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat41);
        u_xlat41 = u_xlat5.w + -1.0;
        u_xlat41 = unity_SpecCube1_HDR.w * u_xlat41 + 1.0;
        u_xlat41 = log2(u_xlat41);
        u_xlat41 = u_xlat41 * unity_SpecCube1_HDR.y;
        u_xlat41 = exp2(u_xlat41);
        u_xlat41 = u_xlat41 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat41);
        u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    }
    u_xlat41 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat5.xyz = vec3(u_xlat41) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat41 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat41) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat40));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat42 = u_xlat27 * u_xlat27;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat27 = u_xlat27 * u_xlat42;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat40 * u_xlat40;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat40 = (-u_xlat26) + 1.0;
    u_xlat42 = abs(u_xlat39) * u_xlat40 + u_xlat26;
    u_xlat40 = u_xlat1.x * u_xlat40 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat40;
    u_xlat39 = u_xlat1.x * u_xlat42 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat40 = u_xlat26 * u_xlat26;
    u_xlat42 = u_xlat14 * u_xlat40 + (-u_xlat14);
    u_xlat14 = u_xlat42 * u_xlat14 + 1.0;
    u_xlat40 = u_xlat40 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat40 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat13.z = u_xlat39 * 3.14159274;
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat39 = max(u_xlat13.z, 0.0);
    u_xlat26 = u_xlat26 * u_xlat26 + 1.0;
    u_xlat26 = float(1.0) / u_xlat26;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat1.x = (-u_xlat41) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat6.xyz = vec3(u_xlat39) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat7.xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat5.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat4.xyz * vec3(vec3(_Emission, _Emission, _Emission)) + u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 326
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %76 %137 %213 %219 %220 %233 %270 %306 %317 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpMemberDecorate %20 7 Offset 20 
                                                      OpMemberDecorate %20 8 Offset 20 
                                                      OpMemberDecorate %20 9 Offset 20 
                                                      OpMemberDecorate %20 10 Offset 20 
                                                      OpMemberDecorate %20 11 Offset 20 
                                                      OpMemberDecorate %20 12 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %74 0 BuiltIn 74 
                                                      OpMemberDecorate %74 1 BuiltIn 74 
                                                      OpMemberDecorate %74 2 BuiltIn 74 
                                                      OpDecorate %74 Block 
                                                      OpDecorate vs_TEXCOORD2 Location 137 
                                                      OpDecorate vs_TEXCOORD3 Location 213 
                                                      OpDecorate vs_TEXCOORD0 Location 219 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %233 Location 233 
                                                      OpDecorate vs_TEXCOORD1 Location 270 
                                                      OpDecorate vs_TEXCOORD4 Location 306 
                                                      OpDecorate vs_TEXCOORD7 Location 317 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %6 %6 %6 %6 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 5 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          i32 %54 = OpConstant 7 
                                          u32 %72 = OpConstant 1 
                                              %73 = OpTypeArray %6 %72 
                                              %74 = OpTypeStruct %7 %6 %73 
                                              %75 = OpTypePointer Output %74 
         Output struct {f32_4; f32; f32[1];}* %76 = OpVariable Output 
                                              %84 = OpTypePointer Output %7 
                                             %130 = OpTypePointer Uniform %14 
                                             %136 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %140 = OpTypeVector %6 2 
                                         i32 %143 = OpConstant 6 
                                             %172 = OpTypePointer Private %140 
                              Private f32_2* %173 = OpVariable Private 
                                         i32 %176 = OpConstant 10 
                                             %177 = OpTypePointer Uniform %6 
                                         i32 %180 = OpConstant 11 
                                         i32 %189 = OpConstant 9 
                                         i32 %205 = OpConstant 8 
                                             %212 = OpTypePointer Output %140 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_2 %217 = OpConstantComposite %216 %216 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                         i32 %223 = OpConstant 12 
                                             %232 = OpTypePointer Input %14 
                                Input f32_3* %233 = OpVariable Input 
                                         u32 %239 = OpConstant 0 
                                             %240 = OpTypePointer Private %6 
                                         u32 %253 = OpConstant 2 
                                Private f32* %255 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %307 = OpConstant 4 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                         f32 %318 = OpConstant 3.674022E-40 
                                       f32_4 %319 = OpConstantComposite %318 %318 %318 %318 
                                             %320 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpLoad %11 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
                                        f32_4 %35 = OpFMul %32 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_4 %41 = OpLoad %11 
                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
                                        f32_4 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %9 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %55 = OpAccessChain %22 %54 %25 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpFMul %53 %56 
                                                      OpStore %51 %57 
                               Uniform f32_4* %58 = OpAccessChain %22 %54 %30 
                                        f32_4 %59 = OpLoad %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                                        f32_4 %62 = OpFMul %59 %61 
                                        f32_4 %63 = OpLoad %51 
                                        f32_4 %64 = OpFAdd %62 %63 
                                                      OpStore %51 %64 
                               Uniform f32_4* %65 = OpAccessChain %22 %54 %38 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %51 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %51 %71 
                               Uniform f32_4* %77 = OpAccessChain %22 %54 %47 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpVectorShuffle %79 %79 3 3 3 3 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %51 
                                        f32_4 %83 = OpFAdd %81 %82 
                                Output f32_4* %85 = OpAccessChain %76 %30 
                                                      OpStore %85 %83 
                                        f32_4 %86 = OpLoad %11 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %22 %24 %25 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %87 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %9 %93 
                               Uniform f32_4* %94 = OpAccessChain %22 %24 %30 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_4 %97 = OpLoad %11 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %9 %104 
                              Uniform f32_4* %105 = OpAccessChain %22 %24 %38 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_4 %108 = OpLoad %11 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                              Uniform f32_4* %116 = OpAccessChain %22 %24 %47 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_4 %119 = OpLoad %11 
                                       f32_3 %120 = OpVectorShuffle %119 %119 3 3 3 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFAdd %121 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %9 %126 
                                       f32_4 %127 = OpLoad %9 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_3 %129 = OpFNegate %128 
                              Uniform f32_3* %131 = OpAccessChain %22 %30 
                                       f32_3 %132 = OpLoad %131 
                                       f32_3 %133 = OpFAdd %129 %132 
                                       f32_4 %134 = OpLoad %51 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %51 %135 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                                      OpStore vs_TEXCOORD2 %139 
                                       f32_4 %141 = OpLoad %51 
                                       f32_2 %142 = OpVectorShuffle %141 %141 1 1 
                              Uniform f32_4* %144 = OpAccessChain %22 %143 %25 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                                       f32_4 %148 = OpLoad %9 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 2 3 
                                                      OpStore %9 %149 
                              Uniform f32_4* %150 = OpAccessChain %22 %143 %30 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_4 %153 = OpLoad %51 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 0 
                                       f32_2 %155 = OpFMul %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_2 %157 = OpVectorShuffle %156 %156 0 1 
                                       f32_2 %158 = OpFAdd %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 2 3 
                                                      OpStore %9 %160 
                              Uniform f32_4* %161 = OpAccessChain %22 %143 %38 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
                                       f32_4 %164 = OpLoad %51 
                                       f32_2 %165 = OpVectorShuffle %164 %164 2 2 
                                       f32_2 %166 = OpFMul %163 %165 
                                       f32_4 %167 = OpLoad %9 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFAdd %166 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 2 3 
                                                      OpStore %9 %171 
                                       f32_4 %174 = OpLoad %11 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 1 
                                Uniform f32* %178 = OpAccessChain %22 %176 
                                         f32 %179 = OpLoad %178 
                                Uniform f32* %181 = OpAccessChain %22 %180 
                                         f32 %182 = OpLoad %181 
                                       f32_2 %183 = OpCompositeConstruct %179 %182 
                                       f32_2 %184 = OpFNegate %183 
                                       f32_2 %185 = OpFAdd %175 %184 
                                                      OpStore %173 %185 
                                       f32_4 %186 = OpLoad %9 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_2 %188 = OpFNegate %187 
                                Uniform f32* %190 = OpAccessChain %22 %189 
                                         f32 %191 = OpLoad %190 
                                Uniform f32* %192 = OpAccessChain %22 %189 
                                         f32 %193 = OpLoad %192 
                                       f32_2 %194 = OpCompositeConstruct %191 %193 
                                         f32 %195 = OpCompositeExtract %194 0 
                                         f32 %196 = OpCompositeExtract %194 1 
                                       f32_2 %197 = OpCompositeConstruct %195 %196 
                                       f32_2 %198 = OpFMul %188 %197 
                                       f32_2 %199 = OpLoad %173 
                                       f32_2 %200 = OpFAdd %198 %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 2 3 
                                                      OpStore %9 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_2 %204 = OpVectorShuffle %203 %203 0 1 
                                Uniform f32* %206 = OpAccessChain %22 %205 
                                         f32 %207 = OpLoad %206 
                                       f32_2 %208 = OpCompositeConstruct %207 %207 
                                       f32_2 %209 = OpFDiv %204 %208 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 2 3 
                                                      OpStore %9 %211 
                                       f32_4 %214 = OpLoad %9 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_2 %218 = OpFAdd %215 %217 
                                                      OpStore vs_TEXCOORD3 %218 
                                       f32_4 %221 = OpLoad %220 
                                       f32_2 %222 = OpVectorShuffle %221 %221 0 1 
                              Uniform f32_4* %224 = OpAccessChain %22 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_2 %227 = OpFMul %222 %226 
                              Uniform f32_4* %228 = OpAccessChain %22 %223 
                                       f32_4 %229 = OpLoad %228 
                                       f32_2 %230 = OpVectorShuffle %229 %229 2 3 
                                       f32_2 %231 = OpFAdd %227 %230 
                                                      OpStore vs_TEXCOORD0 %231 
                                       f32_3 %234 = OpLoad %233 
                              Uniform f32_4* %235 = OpAccessChain %22 %143 %30 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                         f32 %238 = OpDot %234 %237 
                                Private f32* %241 = OpAccessChain %9 %239 
                                                      OpStore %241 %238 
                                       f32_3 %242 = OpLoad %233 
                              Uniform f32_4* %243 = OpAccessChain %22 %143 %25 
                                       f32_4 %244 = OpLoad %243 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                         f32 %246 = OpDot %242 %245 
                                Private f32* %247 = OpAccessChain %9 %72 
                                                      OpStore %247 %246 
                                       f32_3 %248 = OpLoad %233 
                              Uniform f32_4* %249 = OpAccessChain %22 %143 %38 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpDot %248 %251 
                                Private f32* %254 = OpAccessChain %9 %253 
                                                      OpStore %254 %252 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %257 %259 
                                                      OpStore %255 %260 
                                         f32 %261 = OpLoad %255 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %255 %262 
                                         f32 %263 = OpLoad %255 
                                       f32_3 %264 = OpCompositeConstruct %263 %263 %263 
                                       f32_4 %265 = OpLoad %9 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_4 %268 = OpLoad %9 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %9 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                                      OpStore vs_TEXCOORD1 %272 
                                Private f32* %273 = OpAccessChain %9 %72 
                                         f32 %274 = OpLoad %273 
                                Private f32* %275 = OpAccessChain %9 %72 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFMul %274 %276 
                                                      OpStore %255 %277 
                                Private f32* %278 = OpAccessChain %9 %239 
                                         f32 %279 = OpLoad %278 
                                Private f32* %280 = OpAccessChain %9 %239 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpFMul %279 %281 
                                         f32 %283 = OpLoad %255 
                                         f32 %284 = OpFNegate %283 
                                         f32 %285 = OpFAdd %282 %284 
                                                      OpStore %255 %285 
                                       f32_4 %286 = OpLoad %9 
                                       f32_4 %287 = OpVectorShuffle %286 %286 1 2 2 0 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 0 1 2 2 
                                       f32_4 %290 = OpFMul %287 %289 
                                                      OpStore %51 %290 
                              Uniform f32_4* %291 = OpAccessChain %22 %25 
                                       f32_4 %292 = OpLoad %291 
                                       f32_4 %293 = OpLoad %51 
                                         f32 %294 = OpDot %292 %293 
                                Private f32* %295 = OpAccessChain %9 %239 
                                                      OpStore %295 %294 
                              Uniform f32_4* %296 = OpAccessChain %22 %38 
                                       f32_4 %297 = OpLoad %296 
                                       f32_4 %298 = OpLoad %51 
                                         f32 %299 = OpDot %297 %298 
                                Private f32* %300 = OpAccessChain %9 %72 
                                                      OpStore %300 %299 
                              Uniform f32_4* %301 = OpAccessChain %22 %47 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %51 
                                         f32 %304 = OpDot %302 %303 
                                Private f32* %305 = OpAccessChain %9 %253 
                                                      OpStore %305 %304 
                              Uniform f32_4* %308 = OpAccessChain %22 %307 
                                       f32_4 %309 = OpLoad %308 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                         f32 %311 = OpLoad %255 
                                       f32_3 %312 = OpCompositeConstruct %311 %311 %311 
                                       f32_3 %313 = OpFMul %310 %312 
                                       f32_4 %314 = OpLoad %9 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpFAdd %313 %315 
                                                      OpStore vs_TEXCOORD4 %316 
                                                      OpStore vs_TEXCOORD7 %319 
                                 Output f32* %321 = OpAccessChain %76 %30 %72 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                 Output f32* %324 = OpAccessChain %76 %30 %72 
                                                      OpStore %324 %323 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 951
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %56 %75 %97 %119 %166 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpMemberDecorate %15 18 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate vs_TEXCOORD0 Location 56 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate vs_TEXCOORD3 Location 75 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate vs_TEXCOORD1 Location 119 
                                                      OpDecorate vs_TEXCOORD4 Location 166 
                                                      OpDecorate %319 DescriptorSet 319 
                                                      OpDecorate %319 Binding 319 
                                                      OpDecorate %321 DescriptorSet 321 
                                                      OpDecorate %321 Binding 321 
                                                      OpDecorate %474 DescriptorSet 474 
                                                      OpDecorate %474 Binding 474 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                               Private f32_4* %43 = OpVariable Private 
                                              %44 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %45 = OpTypePointer UniformConstant %44 
         UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
                                              %48 = OpTypeSampler 
                                              %49 = OpTypePointer UniformConstant %48 
                     UniformConstant sampler* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampledImage %44 
                                              %54 = OpTypeVector %6 2 
                                              %55 = OpTypePointer Input %54 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %59 = OpTypePointer Private %10 
                               Private f32_3* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 17 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                              %78 = OpTypeInt 32 0 
                                          u32 %79 = OpConstant 3 
                               Private f32_4* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 18 
                                              %96 = OpTypePointer Output %7 
                                Output f32_4* %97 = OpVariable Output 
                                             %100 = OpTypePointer Uniform %6 
                                             %107 = OpTypePointer Output %6 
                                         i32 %109 = OpConstant 14 
                                         f32 %113 = OpConstant 3.674022E-40 
                                Private f32* %115 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_4* %125 = OpVariable Private 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %143 = OpConstant 2 
                                         u32 %148 = OpConstant 0 
                                         i32 %150 = OpConstant 3 
                                         u32 %155 = OpConstant 1 
                                         i32 %157 = OpConstant 4 
                                         u32 %162 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                                         f32 %173 = OpConstant 3.674022E-40 
                                       f32_3 %174 = OpConstantComposite %173 %173 %173 
                                             %178 = OpTypeBool 
                                             %179 = OpTypePointer Private %178 
                               Private bool* %180 = OpVariable Private 
                                         i32 %181 = OpConstant 7 
                              Private f32_3* %202 = OpVariable Private 
                                         i32 %205 = OpConstant 5 
                              Private f32_3* %214 = OpVariable Private 
                                         i32 %217 = OpConstant 6 
                                             %226 = OpTypeVector %178 3 
                                             %227 = OpTypePointer Private %226 
                             Private bool_3* %228 = OpVariable Private 
                                       f32_4 %229 = OpConstantComposite %173 %173 %173 %173 
                                             %232 = OpTypeVector %178 4 
                                             %235 = OpTypePointer Function %10 
                                             %240 = OpTypePointer Function %6 
                                         f32 %307 = OpConstant 3.674022E-40 
                                         f32 %309 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                             %317 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %318 = OpTypePointer UniformConstant %317 
      UniformConstant read_only TextureCube* %319 = OpVariable UniformConstant 
                    UniformConstant sampler* %321 = OpVariable UniformConstant 
                                             %323 = OpTypeSampledImage %317 
                                Private f32* %329 = OpVariable Private 
                                         f32 %332 = OpConstant 3.674022E-40 
                                         i32 %334 = OpConstant 8 
                               Private bool* %357 = OpVariable Private 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         i32 %365 = OpConstant 11 
                                Private f32* %372 = OpVariable Private 
                              Private f32_3* %385 = OpVariable Private 
                                         i32 %388 = OpConstant 9 
                              Private f32_3* %396 = OpVariable Private 
                                         i32 %399 = OpConstant 10 
                             Private bool_3* %407 = OpVariable Private 
      UniformConstant read_only TextureCube* %474 = OpVariable UniformConstant 
                                         i32 %485 = OpConstant 12 
                                         f32 %547 = OpConstant 3.674022E-40 
                                       f32_3 %548 = OpConstantComposite %547 %547 %547 
                                         i32 %552 = OpConstant 15 
                                         f32 %567 = OpConstant 3.674022E-40 
                                       f32_3 %568 = OpConstantComposite %567 %567 %567 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         i32 %587 = OpConstant 1 
                                         f32 %600 = OpConstant 3.674022E-40 
                                Private f32* %627 = OpVariable Private 
                              Private f32_3* %646 = OpVariable Private 
                                         f32 %661 = OpConstant 3.674022E-40 
                                Private f32* %664 = OpVariable Private 
                                Private f32* %669 = OpVariable Private 
                                         f32 %712 = OpConstant 3.674022E-40 
                                         f32 %740 = OpConstant 3.674022E-40 
                                         f32 %742 = OpConstant 3.674022E-40 
                                         f32 %759 = OpConstant 3.674022E-40 
                                         f32 %764 = OpConstant 3.674022E-40 
                                         f32 %782 = OpConstant 3.674022E-40 
                               Private bool* %798 = OpVariable Private 
                                         i32 %823 = OpConstant 13 
                                       f32_3 %869 = OpConstantComposite %113 %113 %113 
                                         i32 %932 = OpConstant 16 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %236 = OpVariable Function 
                               Function f32* %241 = OpVariable Function 
                               Function f32* %253 = OpVariable Function 
                               Function f32* %265 = OpVariable Function 
                             Function f32_3* %412 = OpVariable Function 
                               Function f32* %416 = OpVariable Function 
                               Function f32* %428 = OpVariable Function 
                               Function f32* %440 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %47 = OpLoad %46 
                                      sampler %51 = OpLoad %50 
                   read_only Texture2DSampled %53 = OpSampledImage %47 %51 
                                        f32_2 %57 = OpLoad vs_TEXCOORD0 
                                        f32_4 %58 = OpImageSampleImplicitLod %53 %57 
                                                      OpStore %43 %58 
                                        f32_4 %61 = OpLoad %43 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %60 %68 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_2 %76 = OpLoad vs_TEXCOORD3 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                          f32 %80 = OpCompositeExtract %77 3 
                                                      OpStore %69 %80 
                                          f32 %82 = OpLoad %69 
                                        f32_4 %83 = OpCompositeConstruct %82 %82 %82 %82 
                               Uniform f32_4* %85 = OpAccessChain %17 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFMul %83 %86 
                                                      OpStore %81 %87 
                                        f32_4 %88 = OpLoad %81 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                               Uniform f32_4* %90 = OpAccessChain %17 %84 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 3 3 3 
                                        f32_3 %93 = OpFMul %89 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %81 %95 
                                 Private f32* %98 = OpAccessChain %43 %79 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %17 %63 %79 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %99 %102 
                                Private f32* %104 = OpAccessChain %81 %79 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFAdd %103 %105 
                                 Output f32* %108 = OpAccessChain %97 %79 
                                                      OpStore %108 %106 
                                Uniform f32* %110 = OpAccessChain %17 %109 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                         f32 %114 = OpFAdd %112 %113 
                                                      OpStore %69 %114 
                                       f32_4 %116 = OpLoad %35 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFNegate %117 
                                       f32_3 %120 = OpLoad vs_TEXCOORD1 
                                         f32 %121 = OpDot %118 %120 
                                                      OpStore %115 %121 
                                         f32 %122 = OpLoad %115 
                                         f32 %123 = OpLoad %115 
                                         f32 %124 = OpFAdd %122 %123 
                                                      OpStore %115 %124 
                                       f32_3 %126 = OpLoad vs_TEXCOORD1 
                                         f32 %127 = OpLoad %115 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFMul %126 %129 
                                       f32_4 %131 = OpLoad %35 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %130 %133 
                                       f32_4 %135 = OpLoad %125 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %125 %136 
                                       f32_3 %138 = OpLoad vs_TEXCOORD1 
                                       f32_4 %139 = OpLoad %137 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %137 %140 
                                Private f32* %141 = OpAccessChain %137 %79 
                                                      OpStore %141 %113 
                              Uniform f32_4* %144 = OpAccessChain %17 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpLoad %137 
                                         f32 %147 = OpDot %145 %146 
                                Private f32* %149 = OpAccessChain %142 %148 
                                                      OpStore %149 %147 
                              Uniform f32_4* %151 = OpAccessChain %17 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_4 %153 = OpLoad %137 
                                         f32 %154 = OpDot %152 %153 
                                Private f32* %156 = OpAccessChain %142 %155 
                                                      OpStore %156 %154 
                              Uniform f32_4* %158 = OpAccessChain %17 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpLoad %137 
                                         f32 %161 = OpDot %159 %160 
                                Private f32* %163 = OpAccessChain %142 %162 
                                                      OpStore %163 %161 
                                       f32_4 %164 = OpLoad %142 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %167 = OpLoad vs_TEXCOORD4 
                                       f32_3 %168 = OpFAdd %165 %167 
                                       f32_4 %169 = OpLoad %137 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %137 %170 
                                       f32_4 %171 = OpLoad %137 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %175 = OpExtInst %1 40 %172 %174 
                                       f32_4 %176 = OpLoad %137 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %137 %177 
                                Uniform f32* %182 = OpAccessChain %17 %181 %79 
                                         f32 %183 = OpLoad %182 
                                        bool %184 = OpFOrdLessThan %173 %183 
                                                      OpStore %180 %184 
                                        bool %185 = OpLoad %180 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %300 
                                             %186 = OpLabel 
                                       f32_4 %188 = OpLoad %125 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %125 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %189 %191 
                                                      OpStore %115 %192 
                                         f32 %193 = OpLoad %115 
                                         f32 %194 = OpExtInst %1 32 %193 
                                                      OpStore %115 %194 
                                         f32 %195 = OpLoad %115 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_4 %197 = OpLoad %125 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %142 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %142 %201 
                                       f32_3 %203 = OpLoad vs_TEXCOORD2 
                                       f32_3 %204 = OpFNegate %203 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFAdd %204 %208 
                                                      OpStore %202 %209 
                                       f32_3 %210 = OpLoad %202 
                                       f32_4 %211 = OpLoad %142 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFDiv %210 %212 
                                                      OpStore %202 %213 
                                       f32_3 %215 = OpLoad vs_TEXCOORD2 
                                       f32_3 %216 = OpFNegate %215 
                              Uniform f32_4* %218 = OpAccessChain %17 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFAdd %216 %220 
                                                      OpStore %214 %221 
                                       f32_3 %222 = OpLoad %214 
                                       f32_4 %223 = OpLoad %142 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_3 %225 = OpFDiv %222 %224 
                                                      OpStore %214 %225 
                                       f32_4 %230 = OpLoad %142 
                                       f32_4 %231 = OpVectorShuffle %230 %230 0 1 2 0 
                                      bool_4 %233 = OpFOrdLessThan %229 %231 
                                      bool_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                                      OpStore %228 %234 
                                       f32_3 %237 = OpLoad %202 
                                                      OpStore %236 %237 
                               Private bool* %238 = OpAccessChain %228 %148 
                                        bool %239 = OpLoad %238 
                                                      OpSelectionMerge %243 None 
                                                      OpBranchConditional %239 %242 %246 
                                             %242 = OpLabel 
                                Private f32* %244 = OpAccessChain %202 %148 
                                         f32 %245 = OpLoad %244 
                                                      OpStore %241 %245 
                                                      OpBranch %243 
                                             %246 = OpLabel 
                                Private f32* %247 = OpAccessChain %214 %148 
                                         f32 %248 = OpLoad %247 
                                                      OpStore %241 %248 
                                                      OpBranch %243 
                                             %243 = OpLabel 
                                         f32 %249 = OpLoad %241 
                               Function f32* %250 = OpAccessChain %236 %148 
                                                      OpStore %250 %249 
                               Private bool* %251 = OpAccessChain %228 %155 
                                        bool %252 = OpLoad %251 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %252 %254 %258 
                                             %254 = OpLabel 
                                Private f32* %256 = OpAccessChain %202 %155 
                                         f32 %257 = OpLoad %256 
                                                      OpStore %253 %257 
                                                      OpBranch %255 
                                             %258 = OpLabel 
                                Private f32* %259 = OpAccessChain %214 %155 
                                         f32 %260 = OpLoad %259 
                                                      OpStore %253 %260 
                                                      OpBranch %255 
                                             %255 = OpLabel 
                                         f32 %261 = OpLoad %253 
                               Function f32* %262 = OpAccessChain %236 %155 
                                                      OpStore %262 %261 
                               Private bool* %263 = OpAccessChain %228 %162 
                                        bool %264 = OpLoad %263 
                                                      OpSelectionMerge %267 None 
                                                      OpBranchConditional %264 %266 %270 
                                             %266 = OpLabel 
                                Private f32* %268 = OpAccessChain %202 %162 
                                         f32 %269 = OpLoad %268 
                                                      OpStore %265 %269 
                                                      OpBranch %267 
                                             %270 = OpLabel 
                                Private f32* %271 = OpAccessChain %214 %162 
                                         f32 %272 = OpLoad %271 
                                                      OpStore %265 %272 
                                                      OpBranch %267 
                                             %267 = OpLabel 
                                         f32 %273 = OpLoad %265 
                               Function f32* %274 = OpAccessChain %236 %162 
                                                      OpStore %274 %273 
                                       f32_3 %275 = OpLoad %236 
                                                      OpStore %202 %275 
                                Private f32* %276 = OpAccessChain %202 %155 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %202 %148 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpExtInst %1 37 %277 %279 
                                                      OpStore %115 %280 
                                Private f32* %281 = OpAccessChain %202 %162 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpLoad %115 
                                         f32 %284 = OpExtInst %1 37 %282 %283 
                                                      OpStore %115 %284 
                                       f32_3 %285 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %286 = OpAccessChain %17 %181 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFNegate %288 
                                       f32_3 %290 = OpFAdd %285 %289 
                                                      OpStore %202 %290 
                                       f32_4 %291 = OpLoad %142 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                         f32 %293 = OpLoad %115 
                                       f32_3 %294 = OpCompositeConstruct %293 %293 %293 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %202 
                                       f32_3 %297 = OpFAdd %295 %296 
                                       f32_4 %298 = OpLoad %142 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %142 %299 
                                                      OpBranch %187 
                                             %300 = OpLabel 
                                       f32_4 %301 = OpLoad %125 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %142 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %142 %304 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %305 = OpLoad %69 
                                         f32 %306 = OpFNegate %305 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %310 = OpFAdd %308 %309 
                                                      OpStore %115 %310 
                                         f32 %311 = OpLoad %69 
                                         f32 %312 = OpLoad %115 
                                         f32 %313 = OpFMul %311 %312 
                                                      OpStore %115 %313 
                                         f32 %314 = OpLoad %115 
                                         f32 %316 = OpFMul %314 %315 
                                                      OpStore %115 %316 
                       read_only TextureCube %320 = OpLoad %319 
                                     sampler %322 = OpLoad %321 
                read_only TextureCubeSampled %324 = OpSampledImage %320 %322 
                                       f32_4 %325 = OpLoad %142 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                         f32 %327 = OpLoad %115 
                                       f32_4 %328 = OpImageSampleExplicitLod %324 %326 Lod %7 
                                                      OpStore %142 %328 
                                Private f32* %330 = OpAccessChain %142 %79 
                                         f32 %331 = OpLoad %330 
                                         f32 %333 = OpFAdd %331 %332 
                                                      OpStore %329 %333 
                                Uniform f32* %335 = OpAccessChain %17 %334 %79 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpLoad %329 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpFAdd %338 %113 
                                                      OpStore %329 %339 
                                         f32 %340 = OpLoad %329 
                                         f32 %341 = OpExtInst %1 30 %340 
                                                      OpStore %329 %341 
                                         f32 %342 = OpLoad %329 
                                Uniform f32* %343 = OpAccessChain %17 %334 %155 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFMul %342 %344 
                                                      OpStore %329 %345 
                                         f32 %346 = OpLoad %329 
                                         f32 %347 = OpExtInst %1 29 %346 
                                                      OpStore %329 %347 
                                         f32 %348 = OpLoad %329 
                                Uniform f32* %349 = OpAccessChain %17 %334 %148 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %348 %350 
                                                      OpStore %329 %351 
                                       f32_4 %352 = OpLoad %142 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %354 = OpLoad %329 
                                       f32_3 %355 = OpCompositeConstruct %354 %354 %354 
                                       f32_3 %356 = OpFMul %353 %355 
                                                      OpStore %202 %356 
                                Uniform f32* %358 = OpAccessChain %17 %217 %79 
                                         f32 %359 = OpLoad %358 
                                        bool %361 = OpFOrdLessThan %359 %360 
                                                      OpStore %357 %361 
                                        bool %362 = OpLoad %357 
                                                      OpSelectionMerge %364 None 
                                                      OpBranchConditional %362 %363 %364 
                                             %363 = OpLabel 
                                Uniform f32* %366 = OpAccessChain %17 %365 %79 
                                         f32 %367 = OpLoad %366 
                                        bool %368 = OpFOrdLessThan %173 %367 
                                                      OpStore %357 %368 
                                        bool %369 = OpLoad %357 
                                                      OpSelectionMerge %371 None 
                                                      OpBranchConditional %369 %370 %371 
                                             %370 = OpLabel 
                                       f32_4 %373 = OpLoad %125 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_4 %375 = OpLoad %125 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                         f32 %377 = OpDot %374 %376 
                                                      OpStore %372 %377 
                                         f32 %378 = OpLoad %372 
                                         f32 %379 = OpExtInst %1 32 %378 
                                                      OpStore %372 %379 
                                         f32 %380 = OpLoad %372 
                                       f32_3 %381 = OpCompositeConstruct %380 %380 %380 
                                       f32_4 %382 = OpLoad %125 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFMul %381 %383 
                                                      OpStore %214 %384 
                                       f32_3 %386 = OpLoad vs_TEXCOORD2 
                                       f32_3 %387 = OpFNegate %386 
                              Uniform f32_4* %389 = OpAccessChain %17 %388 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %387 %391 
                                                      OpStore %385 %392 
                                       f32_3 %393 = OpLoad %385 
                                       f32_3 %394 = OpLoad %214 
                                       f32_3 %395 = OpFDiv %393 %394 
                                                      OpStore %385 %395 
                                       f32_3 %397 = OpLoad vs_TEXCOORD2 
                                       f32_3 %398 = OpFNegate %397 
                              Uniform f32_4* %400 = OpAccessChain %17 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %398 %402 
                                                      OpStore %396 %403 
                                       f32_3 %404 = OpLoad %396 
                                       f32_3 %405 = OpLoad %214 
                                       f32_3 %406 = OpFDiv %404 %405 
                                                      OpStore %396 %406 
                                       f32_3 %408 = OpLoad %214 
                                       f32_4 %409 = OpVectorShuffle %408 %408 0 1 2 0 
                                      bool_4 %410 = OpFOrdLessThan %229 %409 
                                      bool_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                                      OpStore %407 %411 
                                       f32_3 %413 = OpLoad %385 
                                                      OpStore %412 %413 
                               Private bool* %414 = OpAccessChain %407 %148 
                                        bool %415 = OpLoad %414 
                                                      OpSelectionMerge %418 None 
                                                      OpBranchConditional %415 %417 %421 
                                             %417 = OpLabel 
                                Private f32* %419 = OpAccessChain %385 %148 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %416 %420 
                                                      OpBranch %418 
                                             %421 = OpLabel 
                                Private f32* %422 = OpAccessChain %396 %148 
                                         f32 %423 = OpLoad %422 
                                                      OpStore %416 %423 
                                                      OpBranch %418 
                                             %418 = OpLabel 
                                         f32 %424 = OpLoad %416 
                               Function f32* %425 = OpAccessChain %412 %148 
                                                      OpStore %425 %424 
                               Private bool* %426 = OpAccessChain %407 %155 
                                        bool %427 = OpLoad %426 
                                                      OpSelectionMerge %430 None 
                                                      OpBranchConditional %427 %429 %433 
                                             %429 = OpLabel 
                                Private f32* %431 = OpAccessChain %385 %155 
                                         f32 %432 = OpLoad %431 
                                                      OpStore %428 %432 
                                                      OpBranch %430 
                                             %433 = OpLabel 
                                Private f32* %434 = OpAccessChain %396 %155 
                                         f32 %435 = OpLoad %434 
                                                      OpStore %428 %435 
                                                      OpBranch %430 
                                             %430 = OpLabel 
                                         f32 %436 = OpLoad %428 
                               Function f32* %437 = OpAccessChain %412 %155 
                                                      OpStore %437 %436 
                               Private bool* %438 = OpAccessChain %407 %162 
                                        bool %439 = OpLoad %438 
                                                      OpSelectionMerge %442 None 
                                                      OpBranchConditional %439 %441 %445 
                                             %441 = OpLabel 
                                Private f32* %443 = OpAccessChain %385 %162 
                                         f32 %444 = OpLoad %443 
                                                      OpStore %440 %444 
                                                      OpBranch %442 
                                             %445 = OpLabel 
                                Private f32* %446 = OpAccessChain %396 %162 
                                         f32 %447 = OpLoad %446 
                                                      OpStore %440 %447 
                                                      OpBranch %442 
                                             %442 = OpLabel 
                                         f32 %448 = OpLoad %440 
                               Function f32* %449 = OpAccessChain %412 %162 
                                                      OpStore %449 %448 
                                       f32_3 %450 = OpLoad %412 
                                                      OpStore %385 %450 
                                Private f32* %451 = OpAccessChain %385 %155 
                                         f32 %452 = OpLoad %451 
                                Private f32* %453 = OpAccessChain %385 %148 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 37 %452 %454 
                                                      OpStore %372 %455 
                                Private f32* %456 = OpAccessChain %385 %162 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpLoad %372 
                                         f32 %459 = OpExtInst %1 37 %457 %458 
                                                      OpStore %372 %459 
                                       f32_3 %460 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %461 = OpAccessChain %17 %365 
                                       f32_4 %462 = OpLoad %461 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpFNegate %463 
                                       f32_3 %465 = OpFAdd %460 %464 
                                                      OpStore %385 %465 
                                       f32_3 %466 = OpLoad %214 
                                         f32 %467 = OpLoad %372 
                                       f32_3 %468 = OpCompositeConstruct %467 %467 %467 
                                       f32_3 %469 = OpFMul %466 %468 
                                       f32_3 %470 = OpLoad %385 
                                       f32_3 %471 = OpFAdd %469 %470 
                                       f32_4 %472 = OpLoad %125 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %125 %473 
                                                      OpBranch %371 
                                             %371 = OpLabel 
                       read_only TextureCube %475 = OpLoad %474 
                                     sampler %476 = OpLoad %321 
                read_only TextureCubeSampled %477 = OpSampledImage %475 %476 
                                       f32_4 %478 = OpLoad %125 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                         f32 %480 = OpLoad %115 
                                       f32_4 %481 = OpImageSampleExplicitLod %477 %479 Lod %7 
                                                      OpStore %125 %481 
                                Private f32* %482 = OpAccessChain %125 %79 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFAdd %483 %332 
                                                      OpStore %115 %484 
                                Uniform f32* %486 = OpAccessChain %17 %485 %79 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpLoad %115 
                                         f32 %489 = OpFMul %487 %488 
                                         f32 %490 = OpFAdd %489 %113 
                                                      OpStore %115 %490 
                                         f32 %491 = OpLoad %115 
                                         f32 %492 = OpExtInst %1 30 %491 
                                                      OpStore %115 %492 
                                         f32 %493 = OpLoad %115 
                                Uniform f32* %494 = OpAccessChain %17 %485 %155 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %493 %495 
                                                      OpStore %115 %496 
                                         f32 %497 = OpLoad %115 
                                         f32 %498 = OpExtInst %1 29 %497 
                                                      OpStore %115 %498 
                                         f32 %499 = OpLoad %115 
                                Uniform f32* %500 = OpAccessChain %17 %485 %148 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpFMul %499 %501 
                                                      OpStore %115 %502 
                                       f32_4 %503 = OpLoad %125 
                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
                                         f32 %505 = OpLoad %115 
                                       f32_3 %506 = OpCompositeConstruct %505 %505 %505 
                                       f32_3 %507 = OpFMul %504 %506 
                                       f32_4 %508 = OpLoad %125 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
                                                      OpStore %125 %509 
                                         f32 %510 = OpLoad %329 
                                       f32_3 %511 = OpCompositeConstruct %510 %510 %510 
                                       f32_4 %512 = OpLoad %142 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                       f32_3 %514 = OpFMul %511 %513 
                                       f32_4 %515 = OpLoad %125 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFNegate %516 
                                       f32_3 %518 = OpFAdd %514 %517 
                                       f32_4 %519 = OpLoad %142 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %142 %520 
                              Uniform f32_4* %521 = OpAccessChain %17 %217 
                                       f32_4 %522 = OpLoad %521 
                                       f32_3 %523 = OpVectorShuffle %522 %522 3 3 3 
                                       f32_4 %524 = OpLoad %142 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_3 %526 = OpFMul %523 %525 
                                       f32_4 %527 = OpLoad %125 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFAdd %526 %528 
                                                      OpStore %202 %529 
                                                      OpBranch %364 
                                             %364 = OpLabel 
                                       f32_3 %530 = OpLoad vs_TEXCOORD1 
                                       f32_3 %531 = OpLoad vs_TEXCOORD1 
                                         f32 %532 = OpDot %530 %531 
                                                      OpStore %115 %532 
                                         f32 %533 = OpLoad %115 
                                         f32 %534 = OpExtInst %1 32 %533 
                                                      OpStore %115 %534 
                                         f32 %535 = OpLoad %115 
                                       f32_3 %536 = OpCompositeConstruct %535 %535 %535 
                                       f32_3 %537 = OpLoad vs_TEXCOORD1 
                                       f32_3 %538 = OpFMul %536 %537 
                                       f32_4 %539 = OpLoad %125 
                                       f32_4 %540 = OpVectorShuffle %539 %538 4 5 6 3 
                                                      OpStore %125 %540 
                                       f32_4 %541 = OpLoad %43 
                                       f32_3 %542 = OpVectorShuffle %541 %541 0 1 2 
                              Uniform f32_4* %543 = OpAccessChain %17 %63 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFMul %542 %545 
                                       f32_3 %549 = OpFAdd %546 %548 
                                       f32_4 %550 = OpLoad %43 
                                       f32_4 %551 = OpVectorShuffle %550 %549 4 5 6 3 
                                                      OpStore %43 %551 
                                Uniform f32* %553 = OpAccessChain %17 %552 
                                         f32 %554 = OpLoad %553 
                                Uniform f32* %555 = OpAccessChain %17 %552 
                                         f32 %556 = OpLoad %555 
                                Uniform f32* %557 = OpAccessChain %17 %552 
                                         f32 %558 = OpLoad %557 
                                       f32_3 %559 = OpCompositeConstruct %554 %556 %558 
                                         f32 %560 = OpCompositeExtract %559 0 
                                         f32 %561 = OpCompositeExtract %559 1 
                                         f32 %562 = OpCompositeExtract %559 2 
                                       f32_3 %563 = OpCompositeConstruct %560 %561 %562 
                                       f32_4 %564 = OpLoad %43 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                       f32_3 %566 = OpFMul %563 %565 
                                       f32_3 %569 = OpFAdd %566 %568 
                                       f32_4 %570 = OpLoad %43 
                                       f32_4 %571 = OpVectorShuffle %570 %569 4 5 6 3 
                                                      OpStore %43 %571 
                                Uniform f32* %572 = OpAccessChain %17 %552 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFNegate %573 
                                         f32 %576 = OpFMul %574 %575 
                                         f32 %577 = OpFAdd %576 %575 
                                                      OpStore %115 %577 
                                         f32 %578 = OpLoad %115 
                                       f32_3 %579 = OpCompositeConstruct %578 %578 %578 
                                       f32_3 %580 = OpLoad %60 
                                       f32_3 %581 = OpFMul %579 %580 
                                                      OpStore %60 %581 
                                       f32_4 %582 = OpLoad %9 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                         f32 %584 = OpLoad %27 
                                       f32_3 %585 = OpCompositeConstruct %584 %584 %584 
                                       f32_3 %586 = OpFMul %583 %585 
                              Uniform f32_4* %588 = OpAccessChain %17 %587 
                                       f32_4 %589 = OpLoad %588 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                       f32_3 %591 = OpFAdd %586 %590 
                                       f32_4 %592 = OpLoad %9 
                                       f32_4 %593 = OpVectorShuffle %592 %591 4 5 6 3 
                                                      OpStore %9 %593 
                                       f32_4 %594 = OpLoad %9 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                       f32_4 %596 = OpLoad %9 
                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
                                         f32 %598 = OpDot %595 %597 
                                                      OpStore %27 %598 
                                         f32 %599 = OpLoad %27 
                                         f32 %601 = OpExtInst %1 40 %599 %600 
                                                      OpStore %27 %601 
                                         f32 %602 = OpLoad %27 
                                         f32 %603 = OpExtInst %1 32 %602 
                                                      OpStore %27 %603 
                                         f32 %604 = OpLoad %27 
                                       f32_3 %605 = OpCompositeConstruct %604 %604 %604 
                                       f32_4 %606 = OpLoad %9 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 1 2 
                                       f32_3 %608 = OpFMul %605 %607 
                                       f32_4 %609 = OpLoad %9 
                                       f32_4 %610 = OpVectorShuffle %609 %608 4 5 6 3 
                                                      OpStore %9 %610 
                                       f32_4 %611 = OpLoad %125 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_4 %613 = OpLoad %35 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                         f32 %615 = OpDot %612 %614 
                                                      OpStore %27 %615 
                                       f32_4 %616 = OpLoad %125 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                              Uniform f32_4* %618 = OpAccessChain %17 %587 
                                       f32_4 %619 = OpLoad %618 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                                         f32 %621 = OpDot %617 %620 
                                Private f32* %622 = OpAccessChain %35 %148 
                                                      OpStore %622 %621 
                                Private f32* %623 = OpAccessChain %35 %148 
                                         f32 %624 = OpLoad %623 
                                         f32 %625 = OpExtInst %1 43 %624 %173 %113 
                                Private f32* %626 = OpAccessChain %35 %148 
                                                      OpStore %626 %625 
                                       f32_4 %628 = OpLoad %125 
                                       f32_3 %629 = OpVectorShuffle %628 %628 0 1 2 
                                       f32_4 %630 = OpLoad %9 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                                         f32 %632 = OpDot %629 %631 
                                                      OpStore %627 %632 
                                         f32 %633 = OpLoad %627 
                                         f32 %634 = OpExtInst %1 43 %633 %173 %113 
                                                      OpStore %627 %634 
                              Uniform f32_4* %635 = OpAccessChain %17 %587 
                                       f32_4 %636 = OpLoad %635 
                                       f32_3 %637 = OpVectorShuffle %636 %636 0 1 2 
                                       f32_4 %638 = OpLoad %9 
                                       f32_3 %639 = OpVectorShuffle %638 %638 0 1 2 
                                         f32 %640 = OpDot %637 %639 
                                Private f32* %641 = OpAccessChain %9 %148 
                                                      OpStore %641 %640 
                                Private f32* %642 = OpAccessChain %9 %148 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpExtInst %1 43 %643 %173 %113 
                                Private f32* %645 = OpAccessChain %9 %148 
                                                      OpStore %645 %644 
                                Private f32* %647 = OpAccessChain %9 %148 
                                         f32 %648 = OpLoad %647 
                                Private f32* %649 = OpAccessChain %9 %148 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpFMul %648 %650 
                                Private f32* %652 = OpAccessChain %646 %148 
                                                      OpStore %652 %651 
                                       f32_3 %653 = OpLoad %646 
                                       f32_2 %654 = OpVectorShuffle %653 %653 0 0 
                                         f32 %655 = OpLoad %69 
                                       f32_2 %656 = OpCompositeConstruct %655 %655 
                                         f32 %657 = OpDot %654 %656 
                                Private f32* %658 = OpAccessChain %646 %148 
                                                      OpStore %658 %657 
                                Private f32* %659 = OpAccessChain %646 %148 
                                         f32 %660 = OpLoad %659 
                                         f32 %662 = OpFAdd %660 %661 
                                Private f32* %663 = OpAccessChain %646 %148 
                                                      OpStore %663 %662 
                                Private f32* %665 = OpAccessChain %35 %148 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFNegate %666 
                                         f32 %668 = OpFAdd %667 %113 
                                                      OpStore %664 %668 
                                         f32 %670 = OpLoad %664 
                                         f32 %671 = OpLoad %664 
                                         f32 %672 = OpFMul %670 %671 
                                                      OpStore %669 %672 
                                         f32 %673 = OpLoad %669 
                                         f32 %674 = OpLoad %669 
                                         f32 %675 = OpFMul %673 %674 
                                                      OpStore %669 %675 
                                         f32 %676 = OpLoad %664 
                                         f32 %677 = OpLoad %669 
                                         f32 %678 = OpFMul %676 %677 
                                                      OpStore %664 %678 
                                Private f32* %679 = OpAccessChain %646 %148 
                                         f32 %680 = OpLoad %679 
                                         f32 %681 = OpLoad %664 
                                         f32 %682 = OpFMul %680 %681 
                                         f32 %683 = OpFAdd %682 %113 
                                                      OpStore %664 %683 
                                         f32 %684 = OpLoad %27 
                                         f32 %685 = OpExtInst %1 4 %684 
                                         f32 %686 = OpFNegate %685 
                                         f32 %687 = OpFAdd %686 %113 
                                                      OpStore %669 %687 
                                         f32 %688 = OpLoad %669 
                                         f32 %689 = OpLoad %669 
                                         f32 %690 = OpFMul %688 %689 
                                                      OpStore %329 %690 
                                         f32 %691 = OpLoad %329 
                                         f32 %692 = OpLoad %329 
                                         f32 %693 = OpFMul %691 %692 
                                                      OpStore %329 %693 
                                         f32 %694 = OpLoad %669 
                                         f32 %695 = OpLoad %329 
                                         f32 %696 = OpFMul %694 %695 
                                                      OpStore %669 %696 
                                Private f32* %697 = OpAccessChain %646 %148 
                                         f32 %698 = OpLoad %697 
                                         f32 %699 = OpLoad %669 
                                         f32 %700 = OpFMul %698 %699 
                                         f32 %701 = OpFAdd %700 %113 
                                Private f32* %702 = OpAccessChain %646 %148 
                                                      OpStore %702 %701 
                                Private f32* %703 = OpAccessChain %646 %148 
                                         f32 %704 = OpLoad %703 
                                         f32 %705 = OpLoad %664 
                                         f32 %706 = OpFMul %704 %705 
                                Private f32* %707 = OpAccessChain %646 %148 
                                                      OpStore %707 %706 
                                         f32 %708 = OpLoad %69 
                                         f32 %709 = OpLoad %69 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %664 %710 
                                         f32 %711 = OpLoad %664 
                                         f32 %713 = OpExtInst %1 40 %711 %712 
                                                      OpStore %664 %713 
                                         f32 %714 = OpLoad %664 
                                         f32 %715 = OpFNegate %714 
                                         f32 %716 = OpFAdd %715 %113 
                                                      OpStore %69 %716 
                                         f32 %717 = OpLoad %27 
                                         f32 %718 = OpExtInst %1 4 %717 
                                         f32 %719 = OpLoad %69 
                                         f32 %720 = OpFMul %718 %719 
                                         f32 %721 = OpLoad %664 
                                         f32 %722 = OpFAdd %720 %721 
                                                      OpStore %329 %722 
                                Private f32* %723 = OpAccessChain %35 %148 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpLoad %69 
                                         f32 %726 = OpFMul %724 %725 
                                         f32 %727 = OpLoad %664 
                                         f32 %728 = OpFAdd %726 %727 
                                                      OpStore %69 %728 
                                         f32 %729 = OpLoad %27 
                                         f32 %730 = OpExtInst %1 4 %729 
                                         f32 %731 = OpLoad %69 
                                         f32 %732 = OpFMul %730 %731 
                                                      OpStore %27 %732 
                                Private f32* %733 = OpAccessChain %35 %148 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpLoad %329 
                                         f32 %736 = OpFMul %734 %735 
                                         f32 %737 = OpLoad %27 
                                         f32 %738 = OpFAdd %736 %737 
                                                      OpStore %27 %738 
                                         f32 %739 = OpLoad %27 
                                         f32 %741 = OpFAdd %739 %740 
                                                      OpStore %27 %741 
                                         f32 %743 = OpLoad %27 
                                         f32 %744 = OpFDiv %742 %743 
                                                      OpStore %27 %744 
                                         f32 %745 = OpLoad %664 
                                         f32 %746 = OpLoad %664 
                                         f32 %747 = OpFMul %745 %746 
                                                      OpStore %69 %747 
                                         f32 %748 = OpLoad %627 
                                         f32 %749 = OpLoad %69 
                                         f32 %750 = OpFMul %748 %749 
                                         f32 %751 = OpLoad %627 
                                         f32 %752 = OpFNegate %751 
                                         f32 %753 = OpFAdd %750 %752 
                                                      OpStore %329 %753 
                                         f32 %754 = OpLoad %329 
                                         f32 %755 = OpLoad %627 
                                         f32 %756 = OpFMul %754 %755 
                                         f32 %757 = OpFAdd %756 %113 
                                                      OpStore %627 %757 
                                         f32 %758 = OpLoad %69 
                                         f32 %760 = OpFMul %758 %759 
                                                      OpStore %69 %760 
                                         f32 %761 = OpLoad %627 
                                         f32 %762 = OpLoad %627 
                                         f32 %763 = OpFMul %761 %762 
                                         f32 %765 = OpFAdd %763 %764 
                                                      OpStore %627 %765 
                                         f32 %766 = OpLoad %69 
                                         f32 %767 = OpLoad %627 
                                         f32 %768 = OpFDiv %766 %767 
                                                      OpStore %627 %768 
                                         f32 %769 = OpLoad %27 
                                         f32 %770 = OpLoad %627 
                                         f32 %771 = OpFMul %769 %770 
                                Private f32* %772 = OpAccessChain %646 %162 
                                                      OpStore %772 %771 
                                       f32_4 %773 = OpLoad %35 
                                       f32_2 %774 = OpVectorShuffle %773 %773 0 0 
                                       f32_3 %775 = OpLoad %646 
                                       f32_2 %776 = OpVectorShuffle %775 %775 0 2 
                                       f32_2 %777 = OpFMul %774 %776 
                                       f32_3 %778 = OpLoad %646 
                                       f32_3 %779 = OpVectorShuffle %778 %777 3 1 4 
                                                      OpStore %646 %779 
                                Private f32* %780 = OpAccessChain %646 %162 
                                         f32 %781 = OpLoad %780 
                                         f32 %783 = OpFMul %781 %782 
                                                      OpStore %27 %783 
                                         f32 %784 = OpLoad %27 
                                         f32 %785 = OpExtInst %1 40 %784 %173 
                                                      OpStore %27 %785 
                                         f32 %786 = OpLoad %664 
                                         f32 %787 = OpLoad %664 
                                         f32 %788 = OpFMul %786 %787 
                                         f32 %789 = OpFAdd %788 %113 
                                                      OpStore %664 %789 
                                         f32 %790 = OpLoad %664 
                                         f32 %791 = OpFDiv %113 %790 
                                                      OpStore %664 %791 
                                       f32_4 %792 = OpLoad %43 
                                       f32_3 %793 = OpVectorShuffle %792 %792 0 1 2 
                                       f32_4 %794 = OpLoad %43 
                                       f32_3 %795 = OpVectorShuffle %794 %794 0 1 2 
                                         f32 %796 = OpDot %793 %795 
                                Private f32* %797 = OpAccessChain %35 %148 
                                                      OpStore %797 %796 
                                Private f32* %799 = OpAccessChain %35 %148 
                                         f32 %800 = OpLoad %799 
                                        bool %801 = OpFOrdNotEqual %800 %173 
                                                      OpStore %798 %801 
                                        bool %802 = OpLoad %798 
                                         f32 %803 = OpSelect %802 %113 %173 
                                Private f32* %804 = OpAccessChain %35 %148 
                                                      OpStore %804 %803 
                                         f32 %805 = OpLoad %27 
                                Private f32* %806 = OpAccessChain %35 %148 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFMul %805 %807 
                                                      OpStore %27 %808 
                                         f32 %809 = OpLoad %115 
                                         f32 %810 = OpFNegate %809 
                                Uniform f32* %811 = OpAccessChain %17 %109 
                                         f32 %812 = OpLoad %811 
                                         f32 %813 = OpFAdd %810 %812 
                                Private f32* %814 = OpAccessChain %35 %148 
                                                      OpStore %814 %813 
                                Private f32* %815 = OpAccessChain %35 %148 
                                         f32 %816 = OpLoad %815 
                                         f32 %817 = OpFAdd %816 %113 
                                Private f32* %818 = OpAccessChain %35 %148 
                                                      OpStore %818 %817 
                                Private f32* %819 = OpAccessChain %35 %148 
                                         f32 %820 = OpLoad %819 
                                         f32 %821 = OpExtInst %1 43 %820 %173 %113 
                                Private f32* %822 = OpAccessChain %35 %148 
                                                      OpStore %822 %821 
                              Uniform f32_4* %824 = OpAccessChain %17 %823 
                                       f32_4 %825 = OpLoad %824 
                                       f32_3 %826 = OpVectorShuffle %825 %825 0 1 2 
                                       f32_3 %827 = OpLoad %646 
                                       f32_3 %828 = OpVectorShuffle %827 %827 0 0 0 
                                       f32_3 %829 = OpFMul %826 %828 
                                       f32_4 %830 = OpLoad %137 
                                       f32_3 %831 = OpVectorShuffle %830 %830 0 1 2 
                                       f32_3 %832 = OpFAdd %829 %831 
                                       f32_4 %833 = OpLoad %125 
                                       f32_4 %834 = OpVectorShuffle %833 %832 4 5 6 3 
                                                      OpStore %125 %834 
                                         f32 %835 = OpLoad %27 
                                       f32_3 %836 = OpCompositeConstruct %835 %835 %835 
                              Uniform f32_4* %837 = OpAccessChain %17 %823 
                                       f32_4 %838 = OpLoad %837 
                                       f32_3 %839 = OpVectorShuffle %838 %838 0 1 2 
                                       f32_3 %840 = OpFMul %836 %839 
                                       f32_4 %841 = OpLoad %137 
                                       f32_4 %842 = OpVectorShuffle %841 %840 4 5 6 3 
                                                      OpStore %137 %842 
                                Private f32* %843 = OpAccessChain %9 %148 
                                         f32 %844 = OpLoad %843 
                                         f32 %845 = OpFNegate %844 
                                         f32 %846 = OpFAdd %845 %113 
                                Private f32* %847 = OpAccessChain %9 %148 
                                                      OpStore %847 %846 
                                Private f32* %848 = OpAccessChain %9 %148 
                                         f32 %849 = OpLoad %848 
                                Private f32* %850 = OpAccessChain %9 %148 
                                         f32 %851 = OpLoad %850 
                                         f32 %852 = OpFMul %849 %851 
                                Private f32* %853 = OpAccessChain %646 %148 
                                                      OpStore %853 %852 
                                Private f32* %854 = OpAccessChain %646 %148 
                                         f32 %855 = OpLoad %854 
                                Private f32* %856 = OpAccessChain %646 %148 
                                         f32 %857 = OpLoad %856 
                                         f32 %858 = OpFMul %855 %857 
                                Private f32* %859 = OpAccessChain %646 %148 
                                                      OpStore %859 %858 
                                Private f32* %860 = OpAccessChain %9 %148 
                                         f32 %861 = OpLoad %860 
                                Private f32* %862 = OpAccessChain %646 %148 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFMul %861 %863 
                                Private f32* %865 = OpAccessChain %9 %148 
                                                      OpStore %865 %864 
                                       f32_4 %866 = OpLoad %43 
                                       f32_3 %867 = OpVectorShuffle %866 %866 0 1 2 
                                       f32_3 %868 = OpFNegate %867 
                                       f32_3 %870 = OpFAdd %868 %869 
                                       f32_4 %871 = OpLoad %142 
                                       f32_4 %872 = OpVectorShuffle %871 %870 4 5 6 3 
                                                      OpStore %142 %872 
                                       f32_4 %873 = OpLoad %142 
                                       f32_3 %874 = OpVectorShuffle %873 %873 0 1 2 
                                       f32_4 %875 = OpLoad %9 
                                       f32_3 %876 = OpVectorShuffle %875 %875 0 0 0 
                                       f32_3 %877 = OpFMul %874 %876 
                                       f32_4 %878 = OpLoad %43 
                                       f32_3 %879 = OpVectorShuffle %878 %878 0 1 2 
                                       f32_3 %880 = OpFAdd %877 %879 
                                       f32_4 %881 = OpLoad %9 
                                       f32_4 %882 = OpVectorShuffle %881 %880 4 5 2 6 
                                                      OpStore %9 %882 
                                       f32_4 %883 = OpLoad %9 
                                       f32_3 %884 = OpVectorShuffle %883 %883 0 1 3 
                                       f32_4 %885 = OpLoad %137 
                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 2 
                                       f32_3 %887 = OpFMul %884 %886 
                                       f32_4 %888 = OpLoad %9 
                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 2 6 
                                                      OpStore %9 %889 
                                       f32_3 %890 = OpLoad %60 
                                       f32_4 %891 = OpLoad %125 
                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
                                       f32_3 %893 = OpFMul %890 %892 
                                       f32_4 %894 = OpLoad %9 
                                       f32_3 %895 = OpVectorShuffle %894 %894 0 1 3 
                                       f32_3 %896 = OpFAdd %893 %895 
                                       f32_4 %897 = OpLoad %9 
                                       f32_4 %898 = OpVectorShuffle %897 %896 4 5 2 6 
                                                      OpStore %9 %898 
                                       f32_3 %899 = OpLoad %202 
                                         f32 %900 = OpLoad %664 
                                       f32_3 %901 = OpCompositeConstruct %900 %900 %900 
                                       f32_3 %902 = OpFMul %899 %901 
                                                      OpStore %60 %902 
                                       f32_4 %903 = OpLoad %43 
                                       f32_3 %904 = OpVectorShuffle %903 %903 0 1 2 
                                       f32_3 %905 = OpFNegate %904 
                                       f32_4 %906 = OpLoad %35 
                                       f32_3 %907 = OpVectorShuffle %906 %906 0 0 0 
                                       f32_3 %908 = OpFAdd %905 %907 
                                       f32_4 %909 = OpLoad %35 
                                       f32_4 %910 = OpVectorShuffle %909 %908 4 5 2 6 
                                                      OpStore %35 %910 
                                         f32 %911 = OpLoad %669 
                                       f32_3 %912 = OpCompositeConstruct %911 %911 %911 
                                       f32_4 %913 = OpLoad %35 
                                       f32_3 %914 = OpVectorShuffle %913 %913 0 1 3 
                                       f32_3 %915 = OpFMul %912 %914 
                                       f32_4 %916 = OpLoad %43 
                                       f32_3 %917 = OpVectorShuffle %916 %916 0 1 2 
                                       f32_3 %918 = OpFAdd %915 %917 
                                       f32_4 %919 = OpLoad %35 
                                       f32_4 %920 = OpVectorShuffle %919 %918 4 5 6 3 
                                                      OpStore %35 %920 
                                       f32_3 %921 = OpLoad %60 
                                       f32_4 %922 = OpLoad %35 
                                       f32_3 %923 = OpVectorShuffle %922 %922 0 1 2 
                                       f32_3 %924 = OpFMul %921 %923 
                                       f32_4 %925 = OpLoad %9 
                                       f32_3 %926 = OpVectorShuffle %925 %925 0 1 3 
                                       f32_3 %927 = OpFAdd %924 %926 
                                       f32_4 %928 = OpLoad %9 
                                       f32_4 %929 = OpVectorShuffle %928 %927 4 5 6 3 
                                                      OpStore %9 %929 
                                       f32_4 %930 = OpLoad %81 
                                       f32_3 %931 = OpVectorShuffle %930 %930 0 1 2 
                                Uniform f32* %933 = OpAccessChain %17 %932 
                                         f32 %934 = OpLoad %933 
                                Uniform f32* %935 = OpAccessChain %17 %932 
                                         f32 %936 = OpLoad %935 
                                Uniform f32* %937 = OpAccessChain %17 %932 
                                         f32 %938 = OpLoad %937 
                                       f32_3 %939 = OpCompositeConstruct %934 %936 %938 
                                         f32 %940 = OpCompositeExtract %939 0 
                                         f32 %941 = OpCompositeExtract %939 1 
                                         f32 %942 = OpCompositeExtract %939 2 
                                       f32_3 %943 = OpCompositeConstruct %940 %941 %942 
                                       f32_3 %944 = OpFMul %931 %943 
                                       f32_4 %945 = OpLoad %9 
                                       f32_3 %946 = OpVectorShuffle %945 %945 0 1 2 
                                       f32_3 %947 = OpFAdd %944 %946 
                                       f32_4 %948 = OpLoad %97 
                                       f32_4 %949 = OpVectorShuffle %948 %947 4 5 6 3 
                                                      OpStore %97 %949 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec2 u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat10.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat2.xx + u_xlat10.xy;
    u_xlat10.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat2.zz + u_xlat10.xy;
    u_xlat0.xy = (-u_xlat10.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat0.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat0.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat0.xxxx + u_xlat4;
    u_xlat2 = u_xlat1 * u_xlat0.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * u_xlat0.y;
    u_xlat15 = u_xlat0.x * u_xlat0.x + (-u_xlat15);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat2);
    u_xlat0.y = dot(unity_SHBg, u_xlat2);
    u_xlat0.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	float _Emission;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    u_xlat4 = u_xlat4.wwww * _RedDotColor;
    u_xlat4.xyz = u_xlat4.xyz * _RedDotColor.www;
    SV_Target0.w = u_xlat2.w * _Color.w + u_xlat4.w;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat41 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat41 = u_xlat41 + u_xlat41;
    u_xlat5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat41)) + (-u_xlat1.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz;
    u_xlat6.w = 1.0;
    u_xlat7.x = dot(unity_SHAr, u_xlat6);
    u_xlat7.y = dot(unity_SHAg, u_xlat6);
    u_xlat7.z = dot(unity_SHAb, u_xlat6);
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat41 = inversesqrt(u_xlat41);
        u_xlat7.xyz = vec3(u_xlat41) * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat41 = min(u_xlat8.y, u_xlat8.x);
        u_xlat41 = min(u_xlat8.z, u_xlat41);
        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat41) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    }
    u_xlat41 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat41 = u_xlat40 * u_xlat41;
    u_xlat41 = u_xlat41 * 6.0;
    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat41);
    u_xlat42 = u_xlat7.w + -1.0;
    u_xlat42 = unity_SpecCube0_HDR.w * u_xlat42 + 1.0;
    u_xlat42 = log2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat5.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        }
        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat41);
        u_xlat41 = u_xlat5.w + -1.0;
        u_xlat41 = unity_SpecCube1_HDR.w * u_xlat41 + 1.0;
        u_xlat41 = log2(u_xlat41);
        u_xlat41 = u_xlat41 * unity_SpecCube1_HDR.y;
        u_xlat41 = exp2(u_xlat41);
        u_xlat41 = u_xlat41 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat41);
        u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    }
    u_xlat41 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat5.xyz = vec3(u_xlat41) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat41 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat41) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat40));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat42 = u_xlat27 * u_xlat27;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat27 = u_xlat27 * u_xlat42;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat40 * u_xlat40;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat40 = (-u_xlat26) + 1.0;
    u_xlat42 = abs(u_xlat39) * u_xlat40 + u_xlat26;
    u_xlat40 = u_xlat1.x * u_xlat40 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat40;
    u_xlat39 = u_xlat1.x * u_xlat42 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat40 = u_xlat26 * u_xlat26;
    u_xlat42 = u_xlat14 * u_xlat40 + (-u_xlat14);
    u_xlat14 = u_xlat42 * u_xlat14 + 1.0;
    u_xlat40 = u_xlat40 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat40 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat13.z = u_xlat39 * 3.14159274;
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat39 = max(u_xlat13.z, 0.0);
    u_xlat26 = u_xlat26 * u_xlat26 + 1.0;
    u_xlat26 = float(1.0) / u_xlat26;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat1.x = (-u_xlat41) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat6.xyz = vec3(u_xlat39) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat7.xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat5.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = u_xlat4.xyz * vec3(vec3(_Emission, _Emission, _Emission)) + u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 448
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %78 %206 %212 %213 %226 %264 %267 %435 %441 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %76 0 BuiltIn 76 
                                                      OpMemberDecorate %76 1 BuiltIn 76 
                                                      OpMemberDecorate %76 2 BuiltIn 76 
                                                      OpDecorate %76 Block 
                                                      OpDecorate vs_TEXCOORD3 Location 206 
                                                      OpDecorate vs_TEXCOORD0 Location 212 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %226 Location 226 
                                                      OpDecorate vs_TEXCOORD1 Location 264 
                                                      OpDecorate vs_TEXCOORD2 Location 267 
                                                      OpDecorate vs_TEXCOORD4 Location 435 
                                                      OpDecorate vs_TEXCOORD7 Location 441 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 8 
                                              %17 = OpTypeArray %7 %16 
                                          u32 %18 = OpConstant 4 
                                              %19 = OpTypeArray %7 %18 
                                              %20 = OpTypeArray %7 %18 
                                              %21 = OpTypeArray %7 %18 
                                              %22 = OpTypeStruct %14 %7 %7 %7 %7 %17 %7 %7 %7 %7 %19 %20 %21 %6 %6 %6 %6 %7 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 10 
                                          i32 %27 = OpConstant 1 
                                              %28 = OpTypePointer Uniform %7 
                                          i32 %32 = OpConstant 0 
                                          i32 %40 = OpConstant 2 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %53 = OpVariable Private 
                                          i32 %56 = OpConstant 12 
                                          u32 %74 = OpConstant 1 
                                              %75 = OpTypeArray %6 %74 
                                              %76 = OpTypeStruct %7 %6 %75 
                                              %77 = OpTypePointer Output %76 
         Output struct {f32_4; f32; f32[1];}* %78 = OpVariable Output 
                                              %86 = OpTypePointer Output %7 
                                              %88 = OpTypeVector %6 2 
                                          i32 %91 = OpConstant 15 
                                              %92 = OpTypePointer Uniform %6 
                                          i32 %95 = OpConstant 16 
                              Private f32_4* %144 = OpVariable Private 
                                             %148 = OpTypePointer Uniform %14 
                                             %154 = OpTypePointer Private %88 
                              Private f32_2* %155 = OpVariable Private 
                                         i32 %158 = OpConstant 11 
                                         i32 %181 = OpConstant 14 
                                         i32 %198 = OpConstant 13 
                                             %205 = OpTypePointer Output %88 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %209 = OpConstant 3.674022E-40 
                                       f32_2 %210 = OpConstantComposite %209 %209 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %213 = OpVariable Input 
                                         i32 %216 = OpConstant 17 
                                             %225 = OpTypePointer Input %14 
                                Input f32_3* %226 = OpVariable Input 
                                         u32 %232 = OpConstant 0 
                                             %233 = OpTypePointer Private %6 
                                         u32 %246 = OpConstant 2 
                                Private f32* %248 = OpVariable Private 
                                             %263 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %276 = OpVariable Private 
                              Private f32_4* %289 = OpVariable Private 
                                         f32 %320 = OpConstant 3.674022E-40 
                                       f32_4 %321 = OpConstantComposite %320 %320 %320 %320 
                                         i32 %326 = OpConstant 4 
                                         f32 %330 = OpConstant 3.674022E-40 
                                       f32_4 %331 = OpConstantComposite %330 %330 %330 %330 
                                         f32 %339 = OpConstant 3.674022E-40 
                                       f32_4 %340 = OpConstantComposite %339 %339 %339 %339 
                                         i32 %347 = OpConstant 5 
                                         i32 %405 = OpConstant 6 
                                         i32 %411 = OpConstant 7 
                                         i32 %417 = OpConstant 8 
                                         i32 %423 = OpConstant 9 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                             %442 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %29 = OpAccessChain %24 %26 %27 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpFMul %13 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %33 = OpAccessChain %24 %26 %32 
                                        f32_4 %34 = OpLoad %33 
                                        f32_4 %35 = OpLoad %11 
                                        f32_4 %36 = OpVectorShuffle %35 %35 0 0 0 0 
                                        f32_4 %37 = OpFMul %34 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %24 %26 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_4 %43 = OpLoad %11 
                                        f32_4 %44 = OpVectorShuffle %43 %43 2 2 2 2 
                                        f32_4 %45 = OpFMul %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpFAdd %45 %46 
                                                      OpStore %9 %47 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %24 %26 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %57 = OpAccessChain %24 %56 %27 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpFMul %55 %58 
                                                      OpStore %53 %59 
                               Uniform f32_4* %60 = OpAccessChain %24 %56 %32 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_4 %63 = OpVectorShuffle %62 %62 0 0 0 0 
                                        f32_4 %64 = OpFMul %61 %63 
                                        f32_4 %65 = OpLoad %53 
                                        f32_4 %66 = OpFAdd %64 %65 
                                                      OpStore %53 %66 
                               Uniform f32_4* %67 = OpAccessChain %24 %56 %40 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpVectorShuffle %69 %69 2 2 2 2 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %53 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %53 %73 
                               Uniform f32_4* %79 = OpAccessChain %24 %56 %49 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 3 3 3 3 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                Output f32_4* %87 = OpAccessChain %78 %32 
                                                      OpStore %87 %85 
                                        f32_4 %89 = OpLoad %11 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                 Uniform f32* %93 = OpAccessChain %24 %91 
                                          f32 %94 = OpLoad %93 
                                 Uniform f32* %96 = OpAccessChain %24 %95 
                                          f32 %97 = OpLoad %96 
                                        f32_2 %98 = OpCompositeConstruct %94 %97 
                                        f32_2 %99 = OpFNegate %98 
                                       f32_2 %100 = OpFAdd %90 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %9 %102 
                                       f32_4 %103 = OpLoad %11 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %24 %26 %27 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                       f32_4 %109 = OpLoad %53 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %53 %110 
                              Uniform f32_4* %111 = OpAccessChain %24 %26 %32 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_4 %114 = OpLoad %11 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 0 0 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %53 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %53 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %53 %121 
                              Uniform f32_4* %122 = OpAccessChain %24 %26 %40 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_4 %125 = OpLoad %11 
                                       f32_3 %126 = OpVectorShuffle %125 %125 2 2 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFAdd %127 %129 
                                       f32_4 %131 = OpLoad %53 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 6 3 
                                                      OpStore %53 %132 
                              Uniform f32_4* %133 = OpAccessChain %24 %26 %49 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_4 %136 = OpLoad %11 
                                       f32_3 %137 = OpVectorShuffle %136 %136 3 3 3 
                                       f32_3 %138 = OpFMul %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_3 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %53 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %53 %143 
                                       f32_4 %145 = OpLoad %53 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFNegate %146 
                              Uniform f32_3* %149 = OpAccessChain %24 %32 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpFAdd %147 %150 
                                       f32_4 %152 = OpLoad %144 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %144 %153 
                                       f32_4 %156 = OpLoad %144 
                                       f32_2 %157 = OpVectorShuffle %156 %156 1 1 
                              Uniform f32_4* %159 = OpAccessChain %24 %158 %27 
                                       f32_4 %160 = OpLoad %159 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                       f32_2 %162 = OpFMul %157 %161 
                                                      OpStore %155 %162 
                              Uniform f32_4* %163 = OpAccessChain %24 %158 %32 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_4 %166 = OpLoad %144 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 0 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_2 %169 = OpLoad %155 
                                       f32_2 %170 = OpFAdd %168 %169 
                                                      OpStore %155 %170 
                              Uniform f32_4* %171 = OpAccessChain %24 %158 %40 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_4 %174 = OpLoad %144 
                                       f32_2 %175 = OpVectorShuffle %174 %174 2 2 
                                       f32_2 %176 = OpFMul %173 %175 
                                       f32_2 %177 = OpLoad %155 
                                       f32_2 %178 = OpFAdd %176 %177 
                                                      OpStore %155 %178 
                                       f32_2 %179 = OpLoad %155 
                                       f32_2 %180 = OpFNegate %179 
                                Uniform f32* %182 = OpAccessChain %24 %181 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %184 = OpAccessChain %24 %181 
                                         f32 %185 = OpLoad %184 
                                       f32_2 %186 = OpCompositeConstruct %183 %185 
                                         f32 %187 = OpCompositeExtract %186 0 
                                         f32 %188 = OpCompositeExtract %186 1 
                                       f32_2 %189 = OpCompositeConstruct %187 %188 
                                       f32_2 %190 = OpFMul %180 %189 
                                       f32_4 %191 = OpLoad %9 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_2 %193 = OpFAdd %190 %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 2 3 
                                                      OpStore %9 %195 
                                       f32_4 %196 = OpLoad %9 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                Uniform f32* %199 = OpAccessChain %24 %198 
                                         f32 %200 = OpLoad %199 
                                       f32_2 %201 = OpCompositeConstruct %200 %200 
                                       f32_2 %202 = OpFDiv %197 %201 
                                       f32_4 %203 = OpLoad %9 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
                                                      OpStore %9 %204 
                                       f32_4 %207 = OpLoad %9 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                                       f32_2 %211 = OpFAdd %208 %210 
                                                      OpStore vs_TEXCOORD3 %211 
                                       f32_4 %214 = OpLoad %213 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                              Uniform f32_4* %217 = OpAccessChain %24 %216 
                                       f32_4 %218 = OpLoad %217 
                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
                                       f32_2 %220 = OpFMul %215 %219 
                              Uniform f32_4* %221 = OpAccessChain %24 %216 
                                       f32_4 %222 = OpLoad %221 
                                       f32_2 %223 = OpVectorShuffle %222 %222 2 3 
                                       f32_2 %224 = OpFAdd %220 %223 
                                                      OpStore vs_TEXCOORD0 %224 
                                       f32_3 %227 = OpLoad %226 
                              Uniform f32_4* %228 = OpAccessChain %24 %158 %32 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                         f32 %231 = OpDot %227 %230 
                                Private f32* %234 = OpAccessChain %9 %232 
                                                      OpStore %234 %231 
                                       f32_3 %235 = OpLoad %226 
                              Uniform f32_4* %236 = OpAccessChain %24 %158 %27 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                         f32 %239 = OpDot %235 %238 
                                Private f32* %240 = OpAccessChain %9 %74 
                                                      OpStore %240 %239 
                                       f32_3 %241 = OpLoad %226 
                              Uniform f32_4* %242 = OpAccessChain %24 %158 %40 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                         f32 %245 = OpDot %241 %244 
                                Private f32* %247 = OpAccessChain %9 %246 
                                                      OpStore %247 %245 
                                       f32_4 %249 = OpLoad %9 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_4 %251 = OpLoad %9 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %250 %252 
                                                      OpStore %248 %253 
                                         f32 %254 = OpLoad %248 
                                         f32 %255 = OpExtInst %1 32 %254 
                                                      OpStore %248 %255 
                                         f32 %256 = OpLoad %248 
                                       f32_3 %257 = OpCompositeConstruct %256 %256 %256 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %265 = OpLoad %9 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                                      OpStore vs_TEXCOORD1 %266 
                                       f32_4 %268 = OpLoad %53 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                                      OpStore vs_TEXCOORD2 %269 
                                       f32_4 %270 = OpLoad %53 
                                       f32_4 %271 = OpVectorShuffle %270 %270 0 0 0 0 
                                       f32_4 %272 = OpFNegate %271 
                              Uniform f32_4* %273 = OpAccessChain %24 %27 
                                       f32_4 %274 = OpLoad %273 
                                       f32_4 %275 = OpFAdd %272 %274 
                                                      OpStore %144 %275 
                                       f32_4 %277 = OpLoad %53 
                                       f32_4 %278 = OpVectorShuffle %277 %277 1 1 1 1 
                                       f32_4 %279 = OpFNegate %278 
                              Uniform f32_4* %280 = OpAccessChain %24 %40 
                                       f32_4 %281 = OpLoad %280 
                                       f32_4 %282 = OpFAdd %279 %281 
                                                      OpStore %276 %282 
                                       f32_4 %283 = OpLoad %53 
                                       f32_4 %284 = OpVectorShuffle %283 %283 2 2 2 2 
                                       f32_4 %285 = OpFNegate %284 
                              Uniform f32_4* %286 = OpAccessChain %24 %49 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpFAdd %285 %287 
                                                      OpStore %53 %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpVectorShuffle %290 %290 1 1 1 1 
                                       f32_4 %292 = OpLoad %276 
                                       f32_4 %293 = OpFMul %291 %292 
                                                      OpStore %289 %293 
                                       f32_4 %294 = OpLoad %276 
                                       f32_4 %295 = OpLoad %276 
                                       f32_4 %296 = OpFMul %294 %295 
                                                      OpStore %276 %296 
                                       f32_4 %297 = OpLoad %144 
                                       f32_4 %298 = OpLoad %144 
                                       f32_4 %299 = OpFMul %297 %298 
                                       f32_4 %300 = OpLoad %276 
                                       f32_4 %301 = OpFAdd %299 %300 
                                                      OpStore %276 %301 
                                       f32_4 %302 = OpLoad %144 
                                       f32_4 %303 = OpLoad %9 
                                       f32_4 %304 = OpVectorShuffle %303 %303 0 0 0 0 
                                       f32_4 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %289 
                                       f32_4 %307 = OpFAdd %305 %306 
                                                      OpStore %144 %307 
                                       f32_4 %308 = OpLoad %53 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %310 = OpVectorShuffle %309 %309 2 2 2 2 
                                       f32_4 %311 = OpFMul %308 %310 
                                       f32_4 %312 = OpLoad %144 
                                       f32_4 %313 = OpFAdd %311 %312 
                                                      OpStore %144 %313 
                                       f32_4 %314 = OpLoad %53 
                                       f32_4 %315 = OpLoad %53 
                                       f32_4 %316 = OpFMul %314 %315 
                                       f32_4 %317 = OpLoad %276 
                                       f32_4 %318 = OpFAdd %316 %317 
                                                      OpStore %53 %318 
                                       f32_4 %319 = OpLoad %53 
                                       f32_4 %322 = OpExtInst %1 40 %319 %321 
                                                      OpStore %53 %322 
                                       f32_4 %323 = OpLoad %53 
                                       f32_4 %324 = OpExtInst %1 32 %323 
                                                      OpStore %276 %324 
                                       f32_4 %325 = OpLoad %53 
                              Uniform f32_4* %327 = OpAccessChain %24 %326 
                                       f32_4 %328 = OpLoad %327 
                                       f32_4 %329 = OpFMul %325 %328 
                                       f32_4 %332 = OpFAdd %329 %331 
                                                      OpStore %53 %332 
                                       f32_4 %333 = OpLoad %53 
                                       f32_4 %334 = OpFDiv %331 %333 
                                                      OpStore %53 %334 
                                       f32_4 %335 = OpLoad %144 
                                       f32_4 %336 = OpLoad %276 
                                       f32_4 %337 = OpFMul %335 %336 
                                                      OpStore %144 %337 
                                       f32_4 %338 = OpLoad %144 
                                       f32_4 %341 = OpExtInst %1 40 %338 %340 
                                                      OpStore %144 %341 
                                       f32_4 %342 = OpLoad %53 
                                       f32_4 %343 = OpLoad %144 
                                       f32_4 %344 = OpFMul %342 %343 
                                                      OpStore %53 %344 
                                       f32_4 %345 = OpLoad %53 
                                       f32_3 %346 = OpVectorShuffle %345 %345 1 1 1 
                              Uniform f32_4* %348 = OpAccessChain %24 %347 %27 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFMul %346 %350 
                                       f32_4 %352 = OpLoad %144 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %144 %353 
                              Uniform f32_4* %354 = OpAccessChain %24 %347 %32 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_4 %357 = OpLoad %53 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
                                       f32_3 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %144 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %359 %361 
                                       f32_4 %363 = OpLoad %144 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %144 %364 
                              Uniform f32_4* %365 = OpAccessChain %24 %347 %40 
                                       f32_4 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %53 
                                       f32_3 %369 = OpVectorShuffle %368 %368 2 2 2 
                                       f32_3 %370 = OpFMul %367 %369 
                                       f32_4 %371 = OpLoad %144 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %370 %372 
                                       f32_4 %374 = OpLoad %53 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %53 %375 
                              Uniform f32_4* %376 = OpAccessChain %24 %347 %49 
                                       f32_4 %377 = OpLoad %376 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_4 %379 = OpLoad %53 
                                       f32_3 %380 = OpVectorShuffle %379 %379 3 3 3 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_4 %382 = OpLoad %53 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFAdd %381 %383 
                                       f32_4 %385 = OpLoad %53 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %53 %386 
                                Private f32* %387 = OpAccessChain %9 %74 
                                         f32 %388 = OpLoad %387 
                                Private f32* %389 = OpAccessChain %9 %74 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFMul %388 %390 
                                                      OpStore %248 %391 
                                Private f32* %392 = OpAccessChain %9 %232 
                                         f32 %393 = OpLoad %392 
                                Private f32* %394 = OpAccessChain %9 %232 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                         f32 %397 = OpLoad %248 
                                         f32 %398 = OpFNegate %397 
                                         f32 %399 = OpFAdd %396 %398 
                                                      OpStore %248 %399 
                                       f32_4 %400 = OpLoad %9 
                                       f32_4 %401 = OpVectorShuffle %400 %400 1 2 2 0 
                                       f32_4 %402 = OpLoad %9 
                                       f32_4 %403 = OpVectorShuffle %402 %402 0 1 2 2 
                                       f32_4 %404 = OpFMul %401 %403 
                                                      OpStore %144 %404 
                              Uniform f32_4* %406 = OpAccessChain %24 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_4 %408 = OpLoad %144 
                                         f32 %409 = OpDot %407 %408 
                                Private f32* %410 = OpAccessChain %9 %232 
                                                      OpStore %410 %409 
                              Uniform f32_4* %412 = OpAccessChain %24 %411 
                                       f32_4 %413 = OpLoad %412 
                                       f32_4 %414 = OpLoad %144 
                                         f32 %415 = OpDot %413 %414 
                                Private f32* %416 = OpAccessChain %9 %74 
                                                      OpStore %416 %415 
                              Uniform f32_4* %418 = OpAccessChain %24 %417 
                                       f32_4 %419 = OpLoad %418 
                                       f32_4 %420 = OpLoad %144 
                                         f32 %421 = OpDot %419 %420 
                                Private f32* %422 = OpAccessChain %9 %246 
                                                      OpStore %422 %421 
                              Uniform f32_4* %424 = OpAccessChain %24 %423 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                         f32 %427 = OpLoad %248 
                                       f32_3 %428 = OpCompositeConstruct %427 %427 %427 
                                       f32_3 %429 = OpFMul %426 %428 
                                       f32_4 %430 = OpLoad %9 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_3 %432 = OpFAdd %429 %431 
                                       f32_4 %433 = OpLoad %9 
                                       f32_4 %434 = OpVectorShuffle %433 %432 4 5 6 3 
                                                      OpStore %9 %434 
                                       f32_4 %436 = OpLoad %9 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32_4 %438 = OpLoad %53 
                                       f32_3 %439 = OpVectorShuffle %438 %438 0 1 2 
                                       f32_3 %440 = OpFAdd %437 %439 
                                                      OpStore vs_TEXCOORD4 %440 
                                                      OpStore vs_TEXCOORD7 %340 
                                 Output f32* %443 = OpAccessChain %78 %32 %74 
                                         f32 %444 = OpLoad %443 
                                         f32 %445 = OpFNegate %444 
                                 Output f32* %446 = OpAccessChain %78 %32 %74 
                                                      OpStore %446 %445 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 951
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %56 %75 %97 %119 %166 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpMemberDecorate %15 18 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate vs_TEXCOORD0 Location 56 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate vs_TEXCOORD3 Location 75 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate vs_TEXCOORD1 Location 119 
                                                      OpDecorate vs_TEXCOORD4 Location 166 
                                                      OpDecorate %319 DescriptorSet 319 
                                                      OpDecorate %319 Binding 319 
                                                      OpDecorate %321 DescriptorSet 321 
                                                      OpDecorate %321 Binding 321 
                                                      OpDecorate %474 DescriptorSet 474 
                                                      OpDecorate %474 Binding 474 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                               Private f32_4* %43 = OpVariable Private 
                                              %44 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %45 = OpTypePointer UniformConstant %44 
         UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
                                              %48 = OpTypeSampler 
                                              %49 = OpTypePointer UniformConstant %48 
                     UniformConstant sampler* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampledImage %44 
                                              %54 = OpTypeVector %6 2 
                                              %55 = OpTypePointer Input %54 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %59 = OpTypePointer Private %10 
                               Private f32_3* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 17 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                              %78 = OpTypeInt 32 0 
                                          u32 %79 = OpConstant 3 
                               Private f32_4* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 18 
                                              %96 = OpTypePointer Output %7 
                                Output f32_4* %97 = OpVariable Output 
                                             %100 = OpTypePointer Uniform %6 
                                             %107 = OpTypePointer Output %6 
                                         i32 %109 = OpConstant 14 
                                         f32 %113 = OpConstant 3.674022E-40 
                                Private f32* %115 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_4* %125 = OpVariable Private 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %143 = OpConstant 2 
                                         u32 %148 = OpConstant 0 
                                         i32 %150 = OpConstant 3 
                                         u32 %155 = OpConstant 1 
                                         i32 %157 = OpConstant 4 
                                         u32 %162 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                                         f32 %173 = OpConstant 3.674022E-40 
                                       f32_3 %174 = OpConstantComposite %173 %173 %173 
                                             %178 = OpTypeBool 
                                             %179 = OpTypePointer Private %178 
                               Private bool* %180 = OpVariable Private 
                                         i32 %181 = OpConstant 7 
                              Private f32_3* %202 = OpVariable Private 
                                         i32 %205 = OpConstant 5 
                              Private f32_3* %214 = OpVariable Private 
                                         i32 %217 = OpConstant 6 
                                             %226 = OpTypeVector %178 3 
                                             %227 = OpTypePointer Private %226 
                             Private bool_3* %228 = OpVariable Private 
                                       f32_4 %229 = OpConstantComposite %173 %173 %173 %173 
                                             %232 = OpTypeVector %178 4 
                                             %235 = OpTypePointer Function %10 
                                             %240 = OpTypePointer Function %6 
                                         f32 %307 = OpConstant 3.674022E-40 
                                         f32 %309 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                             %317 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %318 = OpTypePointer UniformConstant %317 
      UniformConstant read_only TextureCube* %319 = OpVariable UniformConstant 
                    UniformConstant sampler* %321 = OpVariable UniformConstant 
                                             %323 = OpTypeSampledImage %317 
                                Private f32* %329 = OpVariable Private 
                                         f32 %332 = OpConstant 3.674022E-40 
                                         i32 %334 = OpConstant 8 
                               Private bool* %357 = OpVariable Private 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         i32 %365 = OpConstant 11 
                                Private f32* %372 = OpVariable Private 
                              Private f32_3* %385 = OpVariable Private 
                                         i32 %388 = OpConstant 9 
                              Private f32_3* %396 = OpVariable Private 
                                         i32 %399 = OpConstant 10 
                             Private bool_3* %407 = OpVariable Private 
      UniformConstant read_only TextureCube* %474 = OpVariable UniformConstant 
                                         i32 %485 = OpConstant 12 
                                         f32 %547 = OpConstant 3.674022E-40 
                                       f32_3 %548 = OpConstantComposite %547 %547 %547 
                                         i32 %552 = OpConstant 15 
                                         f32 %567 = OpConstant 3.674022E-40 
                                       f32_3 %568 = OpConstantComposite %567 %567 %567 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         i32 %587 = OpConstant 1 
                                         f32 %600 = OpConstant 3.674022E-40 
                                Private f32* %627 = OpVariable Private 
                              Private f32_3* %646 = OpVariable Private 
                                         f32 %661 = OpConstant 3.674022E-40 
                                Private f32* %664 = OpVariable Private 
                                Private f32* %669 = OpVariable Private 
                                         f32 %712 = OpConstant 3.674022E-40 
                                         f32 %740 = OpConstant 3.674022E-40 
                                         f32 %742 = OpConstant 3.674022E-40 
                                         f32 %759 = OpConstant 3.674022E-40 
                                         f32 %764 = OpConstant 3.674022E-40 
                                         f32 %782 = OpConstant 3.674022E-40 
                               Private bool* %798 = OpVariable Private 
                                         i32 %823 = OpConstant 13 
                                       f32_3 %869 = OpConstantComposite %113 %113 %113 
                                         i32 %932 = OpConstant 16 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %236 = OpVariable Function 
                               Function f32* %241 = OpVariable Function 
                               Function f32* %253 = OpVariable Function 
                               Function f32* %265 = OpVariable Function 
                             Function f32_3* %412 = OpVariable Function 
                               Function f32* %416 = OpVariable Function 
                               Function f32* %428 = OpVariable Function 
                               Function f32* %440 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %47 = OpLoad %46 
                                      sampler %51 = OpLoad %50 
                   read_only Texture2DSampled %53 = OpSampledImage %47 %51 
                                        f32_2 %57 = OpLoad vs_TEXCOORD0 
                                        f32_4 %58 = OpImageSampleImplicitLod %53 %57 
                                                      OpStore %43 %58 
                                        f32_4 %61 = OpLoad %43 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %60 %68 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_2 %76 = OpLoad vs_TEXCOORD3 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                          f32 %80 = OpCompositeExtract %77 3 
                                                      OpStore %69 %80 
                                          f32 %82 = OpLoad %69 
                                        f32_4 %83 = OpCompositeConstruct %82 %82 %82 %82 
                               Uniform f32_4* %85 = OpAccessChain %17 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFMul %83 %86 
                                                      OpStore %81 %87 
                                        f32_4 %88 = OpLoad %81 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                               Uniform f32_4* %90 = OpAccessChain %17 %84 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 3 3 3 
                                        f32_3 %93 = OpFMul %89 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %81 %95 
                                 Private f32* %98 = OpAccessChain %43 %79 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %17 %63 %79 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %99 %102 
                                Private f32* %104 = OpAccessChain %81 %79 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFAdd %103 %105 
                                 Output f32* %108 = OpAccessChain %97 %79 
                                                      OpStore %108 %106 
                                Uniform f32* %110 = OpAccessChain %17 %109 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                         f32 %114 = OpFAdd %112 %113 
                                                      OpStore %69 %114 
                                       f32_4 %116 = OpLoad %35 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFNegate %117 
                                       f32_3 %120 = OpLoad vs_TEXCOORD1 
                                         f32 %121 = OpDot %118 %120 
                                                      OpStore %115 %121 
                                         f32 %122 = OpLoad %115 
                                         f32 %123 = OpLoad %115 
                                         f32 %124 = OpFAdd %122 %123 
                                                      OpStore %115 %124 
                                       f32_3 %126 = OpLoad vs_TEXCOORD1 
                                         f32 %127 = OpLoad %115 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFMul %126 %129 
                                       f32_4 %131 = OpLoad %35 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %130 %133 
                                       f32_4 %135 = OpLoad %125 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %125 %136 
                                       f32_3 %138 = OpLoad vs_TEXCOORD1 
                                       f32_4 %139 = OpLoad %137 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %137 %140 
                                Private f32* %141 = OpAccessChain %137 %79 
                                                      OpStore %141 %113 
                              Uniform f32_4* %144 = OpAccessChain %17 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpLoad %137 
                                         f32 %147 = OpDot %145 %146 
                                Private f32* %149 = OpAccessChain %142 %148 
                                                      OpStore %149 %147 
                              Uniform f32_4* %151 = OpAccessChain %17 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_4 %153 = OpLoad %137 
                                         f32 %154 = OpDot %152 %153 
                                Private f32* %156 = OpAccessChain %142 %155 
                                                      OpStore %156 %154 
                              Uniform f32_4* %158 = OpAccessChain %17 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpLoad %137 
                                         f32 %161 = OpDot %159 %160 
                                Private f32* %163 = OpAccessChain %142 %162 
                                                      OpStore %163 %161 
                                       f32_4 %164 = OpLoad %142 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %167 = OpLoad vs_TEXCOORD4 
                                       f32_3 %168 = OpFAdd %165 %167 
                                       f32_4 %169 = OpLoad %137 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %137 %170 
                                       f32_4 %171 = OpLoad %137 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %175 = OpExtInst %1 40 %172 %174 
                                       f32_4 %176 = OpLoad %137 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %137 %177 
                                Uniform f32* %182 = OpAccessChain %17 %181 %79 
                                         f32 %183 = OpLoad %182 
                                        bool %184 = OpFOrdLessThan %173 %183 
                                                      OpStore %180 %184 
                                        bool %185 = OpLoad %180 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %300 
                                             %186 = OpLabel 
                                       f32_4 %188 = OpLoad %125 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %125 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %189 %191 
                                                      OpStore %115 %192 
                                         f32 %193 = OpLoad %115 
                                         f32 %194 = OpExtInst %1 32 %193 
                                                      OpStore %115 %194 
                                         f32 %195 = OpLoad %115 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_4 %197 = OpLoad %125 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %142 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %142 %201 
                                       f32_3 %203 = OpLoad vs_TEXCOORD2 
                                       f32_3 %204 = OpFNegate %203 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFAdd %204 %208 
                                                      OpStore %202 %209 
                                       f32_3 %210 = OpLoad %202 
                                       f32_4 %211 = OpLoad %142 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFDiv %210 %212 
                                                      OpStore %202 %213 
                                       f32_3 %215 = OpLoad vs_TEXCOORD2 
                                       f32_3 %216 = OpFNegate %215 
                              Uniform f32_4* %218 = OpAccessChain %17 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFAdd %216 %220 
                                                      OpStore %214 %221 
                                       f32_3 %222 = OpLoad %214 
                                       f32_4 %223 = OpLoad %142 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_3 %225 = OpFDiv %222 %224 
                                                      OpStore %214 %225 
                                       f32_4 %230 = OpLoad %142 
                                       f32_4 %231 = OpVectorShuffle %230 %230 0 1 2 0 
                                      bool_4 %233 = OpFOrdLessThan %229 %231 
                                      bool_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                                      OpStore %228 %234 
                                       f32_3 %237 = OpLoad %202 
                                                      OpStore %236 %237 
                               Private bool* %238 = OpAccessChain %228 %148 
                                        bool %239 = OpLoad %238 
                                                      OpSelectionMerge %243 None 
                                                      OpBranchConditional %239 %242 %246 
                                             %242 = OpLabel 
                                Private f32* %244 = OpAccessChain %202 %148 
                                         f32 %245 = OpLoad %244 
                                                      OpStore %241 %245 
                                                      OpBranch %243 
                                             %246 = OpLabel 
                                Private f32* %247 = OpAccessChain %214 %148 
                                         f32 %248 = OpLoad %247 
                                                      OpStore %241 %248 
                                                      OpBranch %243 
                                             %243 = OpLabel 
                                         f32 %249 = OpLoad %241 
                               Function f32* %250 = OpAccessChain %236 %148 
                                                      OpStore %250 %249 
                               Private bool* %251 = OpAccessChain %228 %155 
                                        bool %252 = OpLoad %251 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %252 %254 %258 
                                             %254 = OpLabel 
                                Private f32* %256 = OpAccessChain %202 %155 
                                         f32 %257 = OpLoad %256 
                                                      OpStore %253 %257 
                                                      OpBranch %255 
                                             %258 = OpLabel 
                                Private f32* %259 = OpAccessChain %214 %155 
                                         f32 %260 = OpLoad %259 
                                                      OpStore %253 %260 
                                                      OpBranch %255 
                                             %255 = OpLabel 
                                         f32 %261 = OpLoad %253 
                               Function f32* %262 = OpAccessChain %236 %155 
                                                      OpStore %262 %261 
                               Private bool* %263 = OpAccessChain %228 %162 
                                        bool %264 = OpLoad %263 
                                                      OpSelectionMerge %267 None 
                                                      OpBranchConditional %264 %266 %270 
                                             %266 = OpLabel 
                                Private f32* %268 = OpAccessChain %202 %162 
                                         f32 %269 = OpLoad %268 
                                                      OpStore %265 %269 
                                                      OpBranch %267 
                                             %270 = OpLabel 
                                Private f32* %271 = OpAccessChain %214 %162 
                                         f32 %272 = OpLoad %271 
                                                      OpStore %265 %272 
                                                      OpBranch %267 
                                             %267 = OpLabel 
                                         f32 %273 = OpLoad %265 
                               Function f32* %274 = OpAccessChain %236 %162 
                                                      OpStore %274 %273 
                                       f32_3 %275 = OpLoad %236 
                                                      OpStore %202 %275 
                                Private f32* %276 = OpAccessChain %202 %155 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %202 %148 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpExtInst %1 37 %277 %279 
                                                      OpStore %115 %280 
                                Private f32* %281 = OpAccessChain %202 %162 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpLoad %115 
                                         f32 %284 = OpExtInst %1 37 %282 %283 
                                                      OpStore %115 %284 
                                       f32_3 %285 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %286 = OpAccessChain %17 %181 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFNegate %288 
                                       f32_3 %290 = OpFAdd %285 %289 
                                                      OpStore %202 %290 
                                       f32_4 %291 = OpLoad %142 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                         f32 %293 = OpLoad %115 
                                       f32_3 %294 = OpCompositeConstruct %293 %293 %293 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %202 
                                       f32_3 %297 = OpFAdd %295 %296 
                                       f32_4 %298 = OpLoad %142 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %142 %299 
                                                      OpBranch %187 
                                             %300 = OpLabel 
                                       f32_4 %301 = OpLoad %125 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %142 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %142 %304 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %305 = OpLoad %69 
                                         f32 %306 = OpFNegate %305 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %310 = OpFAdd %308 %309 
                                                      OpStore %115 %310 
                                         f32 %311 = OpLoad %69 
                                         f32 %312 = OpLoad %115 
                                         f32 %313 = OpFMul %311 %312 
                                                      OpStore %115 %313 
                                         f32 %314 = OpLoad %115 
                                         f32 %316 = OpFMul %314 %315 
                                                      OpStore %115 %316 
                       read_only TextureCube %320 = OpLoad %319 
                                     sampler %322 = OpLoad %321 
                read_only TextureCubeSampled %324 = OpSampledImage %320 %322 
                                       f32_4 %325 = OpLoad %142 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                         f32 %327 = OpLoad %115 
                                       f32_4 %328 = OpImageSampleExplicitLod %324 %326 Lod %7 
                                                      OpStore %142 %328 
                                Private f32* %330 = OpAccessChain %142 %79 
                                         f32 %331 = OpLoad %330 
                                         f32 %333 = OpFAdd %331 %332 
                                                      OpStore %329 %333 
                                Uniform f32* %335 = OpAccessChain %17 %334 %79 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpLoad %329 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpFAdd %338 %113 
                                                      OpStore %329 %339 
                                         f32 %340 = OpLoad %329 
                                         f32 %341 = OpExtInst %1 30 %340 
                                                      OpStore %329 %341 
                                         f32 %342 = OpLoad %329 
                                Uniform f32* %343 = OpAccessChain %17 %334 %155 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFMul %342 %344 
                                                      OpStore %329 %345 
                                         f32 %346 = OpLoad %329 
                                         f32 %347 = OpExtInst %1 29 %346 
                                                      OpStore %329 %347 
                                         f32 %348 = OpLoad %329 
                                Uniform f32* %349 = OpAccessChain %17 %334 %148 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %348 %350 
                                                      OpStore %329 %351 
                                       f32_4 %352 = OpLoad %142 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %354 = OpLoad %329 
                                       f32_3 %355 = OpCompositeConstruct %354 %354 %354 
                                       f32_3 %356 = OpFMul %353 %355 
                                                      OpStore %202 %356 
                                Uniform f32* %358 = OpAccessChain %17 %217 %79 
                                         f32 %359 = OpLoad %358 
                                        bool %361 = OpFOrdLessThan %359 %360 
                                                      OpStore %357 %361 
                                        bool %362 = OpLoad %357 
                                                      OpSelectionMerge %364 None 
                                                      OpBranchConditional %362 %363 %364 
                                             %363 = OpLabel 
                                Uniform f32* %366 = OpAccessChain %17 %365 %79 
                                         f32 %367 = OpLoad %366 
                                        bool %368 = OpFOrdLessThan %173 %367 
                                                      OpStore %357 %368 
                                        bool %369 = OpLoad %357 
                                                      OpSelectionMerge %371 None 
                                                      OpBranchConditional %369 %370 %371 
                                             %370 = OpLabel 
                                       f32_4 %373 = OpLoad %125 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_4 %375 = OpLoad %125 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                         f32 %377 = OpDot %374 %376 
                                                      OpStore %372 %377 
                                         f32 %378 = OpLoad %372 
                                         f32 %379 = OpExtInst %1 32 %378 
                                                      OpStore %372 %379 
                                         f32 %380 = OpLoad %372 
                                       f32_3 %381 = OpCompositeConstruct %380 %380 %380 
                                       f32_4 %382 = OpLoad %125 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFMul %381 %383 
                                                      OpStore %214 %384 
                                       f32_3 %386 = OpLoad vs_TEXCOORD2 
                                       f32_3 %387 = OpFNegate %386 
                              Uniform f32_4* %389 = OpAccessChain %17 %388 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %387 %391 
                                                      OpStore %385 %392 
                                       f32_3 %393 = OpLoad %385 
                                       f32_3 %394 = OpLoad %214 
                                       f32_3 %395 = OpFDiv %393 %394 
                                                      OpStore %385 %395 
                                       f32_3 %397 = OpLoad vs_TEXCOORD2 
                                       f32_3 %398 = OpFNegate %397 
                              Uniform f32_4* %400 = OpAccessChain %17 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %398 %402 
                                                      OpStore %396 %403 
                                       f32_3 %404 = OpLoad %396 
                                       f32_3 %405 = OpLoad %214 
                                       f32_3 %406 = OpFDiv %404 %405 
                                                      OpStore %396 %406 
                                       f32_3 %408 = OpLoad %214 
                                       f32_4 %409 = OpVectorShuffle %408 %408 0 1 2 0 
                                      bool_4 %410 = OpFOrdLessThan %229 %409 
                                      bool_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                                      OpStore %407 %411 
                                       f32_3 %413 = OpLoad %385 
                                                      OpStore %412 %413 
                               Private bool* %414 = OpAccessChain %407 %148 
                                        bool %415 = OpLoad %414 
                                                      OpSelectionMerge %418 None 
                                                      OpBranchConditional %415 %417 %421 
                                             %417 = OpLabel 
                                Private f32* %419 = OpAccessChain %385 %148 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %416 %420 
                                                      OpBranch %418 
                                             %421 = OpLabel 
                                Private f32* %422 = OpAccessChain %396 %148 
                                         f32 %423 = OpLoad %422 
                                                      OpStore %416 %423 
                                                      OpBranch %418 
                                             %418 = OpLabel 
                                         f32 %424 = OpLoad %416 
                               Function f32* %425 = OpAccessChain %412 %148 
                                                      OpStore %425 %424 
                               Private bool* %426 = OpAccessChain %407 %155 
                                        bool %427 = OpLoad %426 
                                                      OpSelectionMerge %430 None 
                                                      OpBranchConditional %427 %429 %433 
                                             %429 = OpLabel 
                                Private f32* %431 = OpAccessChain %385 %155 
                                         f32 %432 = OpLoad %431 
                                                      OpStore %428 %432 
                                                      OpBranch %430 
                                             %433 = OpLabel 
                                Private f32* %434 = OpAccessChain %396 %155 
                                         f32 %435 = OpLoad %434 
                                                      OpStore %428 %435 
                                                      OpBranch %430 
                                             %430 = OpLabel 
                                         f32 %436 = OpLoad %428 
                               Function f32* %437 = OpAccessChain %412 %155 
                                                      OpStore %437 %436 
                               Private bool* %438 = OpAccessChain %407 %162 
                                        bool %439 = OpLoad %438 
                                                      OpSelectionMerge %442 None 
                                                      OpBranchConditional %439 %441 %445 
                                             %441 = OpLabel 
                                Private f32* %443 = OpAccessChain %385 %162 
                                         f32 %444 = OpLoad %443 
                                                      OpStore %440 %444 
                                                      OpBranch %442 
                                             %445 = OpLabel 
                                Private f32* %446 = OpAccessChain %396 %162 
                                         f32 %447 = OpLoad %446 
                                                      OpStore %440 %447 
                                                      OpBranch %442 
                                             %442 = OpLabel 
                                         f32 %448 = OpLoad %440 
                               Function f32* %449 = OpAccessChain %412 %162 
                                                      OpStore %449 %448 
                                       f32_3 %450 = OpLoad %412 
                                                      OpStore %385 %450 
                                Private f32* %451 = OpAccessChain %385 %155 
                                         f32 %452 = OpLoad %451 
                                Private f32* %453 = OpAccessChain %385 %148 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 37 %452 %454 
                                                      OpStore %372 %455 
                                Private f32* %456 = OpAccessChain %385 %162 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpLoad %372 
                                         f32 %459 = OpExtInst %1 37 %457 %458 
                                                      OpStore %372 %459 
                                       f32_3 %460 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %461 = OpAccessChain %17 %365 
                                       f32_4 %462 = OpLoad %461 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpFNegate %463 
                                       f32_3 %465 = OpFAdd %460 %464 
                                                      OpStore %385 %465 
                                       f32_3 %466 = OpLoad %214 
                                         f32 %467 = OpLoad %372 
                                       f32_3 %468 = OpCompositeConstruct %467 %467 %467 
                                       f32_3 %469 = OpFMul %466 %468 
                                       f32_3 %470 = OpLoad %385 
                                       f32_3 %471 = OpFAdd %469 %470 
                                       f32_4 %472 = OpLoad %125 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %125 %473 
                                                      OpBranch %371 
                                             %371 = OpLabel 
                       read_only TextureCube %475 = OpLoad %474 
                                     sampler %476 = OpLoad %321 
                read_only TextureCubeSampled %477 = OpSampledImage %475 %476 
                                       f32_4 %478 = OpLoad %125 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                         f32 %480 = OpLoad %115 
                                       f32_4 %481 = OpImageSampleExplicitLod %477 %479 Lod %7 
                                                      OpStore %125 %481 
                                Private f32* %482 = OpAccessChain %125 %79 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFAdd %483 %332 
                                                      OpStore %115 %484 
                                Uniform f32* %486 = OpAccessChain %17 %485 %79 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpLoad %115 
                                         f32 %489 = OpFMul %487 %488 
                                         f32 %490 = OpFAdd %489 %113 
                                                      OpStore %115 %490 
                                         f32 %491 = OpLoad %115 
                                         f32 %492 = OpExtInst %1 30 %491 
                                                      OpStore %115 %492 
                                         f32 %493 = OpLoad %115 
                                Uniform f32* %494 = OpAccessChain %17 %485 %155 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %493 %495 
                                                      OpStore %115 %496 
                                         f32 %497 = OpLoad %115 
                                         f32 %498 = OpExtInst %1 29 %497 
                                                      OpStore %115 %498 
                                         f32 %499 = OpLoad %115 
                                Uniform f32* %500 = OpAccessChain %17 %485 %148 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpFMul %499 %501 
                                                      OpStore %115 %502 
                                       f32_4 %503 = OpLoad %125 
                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
                                         f32 %505 = OpLoad %115 
                                       f32_3 %506 = OpCompositeConstruct %505 %505 %505 
                                       f32_3 %507 = OpFMul %504 %506 
                                       f32_4 %508 = OpLoad %125 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
                                                      OpStore %125 %509 
                                         f32 %510 = OpLoad %329 
                                       f32_3 %511 = OpCompositeConstruct %510 %510 %510 
                                       f32_4 %512 = OpLoad %142 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                       f32_3 %514 = OpFMul %511 %513 
                                       f32_4 %515 = OpLoad %125 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFNegate %516 
                                       f32_3 %518 = OpFAdd %514 %517 
                                       f32_4 %519 = OpLoad %142 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %142 %520 
                              Uniform f32_4* %521 = OpAccessChain %17 %217 
                                       f32_4 %522 = OpLoad %521 
                                       f32_3 %523 = OpVectorShuffle %522 %522 3 3 3 
                                       f32_4 %524 = OpLoad %142 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_3 %526 = OpFMul %523 %525 
                                       f32_4 %527 = OpLoad %125 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFAdd %526 %528 
                                                      OpStore %202 %529 
                                                      OpBranch %364 
                                             %364 = OpLabel 
                                       f32_3 %530 = OpLoad vs_TEXCOORD1 
                                       f32_3 %531 = OpLoad vs_TEXCOORD1 
                                         f32 %532 = OpDot %530 %531 
                                                      OpStore %115 %532 
                                         f32 %533 = OpLoad %115 
                                         f32 %534 = OpExtInst %1 32 %533 
                                                      OpStore %115 %534 
                                         f32 %535 = OpLoad %115 
                                       f32_3 %536 = OpCompositeConstruct %535 %535 %535 
                                       f32_3 %537 = OpLoad vs_TEXCOORD1 
                                       f32_3 %538 = OpFMul %536 %537 
                                       f32_4 %539 = OpLoad %125 
                                       f32_4 %540 = OpVectorShuffle %539 %538 4 5 6 3 
                                                      OpStore %125 %540 
                                       f32_4 %541 = OpLoad %43 
                                       f32_3 %542 = OpVectorShuffle %541 %541 0 1 2 
                              Uniform f32_4* %543 = OpAccessChain %17 %63 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFMul %542 %545 
                                       f32_3 %549 = OpFAdd %546 %548 
                                       f32_4 %550 = OpLoad %43 
                                       f32_4 %551 = OpVectorShuffle %550 %549 4 5 6 3 
                                                      OpStore %43 %551 
                                Uniform f32* %553 = OpAccessChain %17 %552 
                                         f32 %554 = OpLoad %553 
                                Uniform f32* %555 = OpAccessChain %17 %552 
                                         f32 %556 = OpLoad %555 
                                Uniform f32* %557 = OpAccessChain %17 %552 
                                         f32 %558 = OpLoad %557 
                                       f32_3 %559 = OpCompositeConstruct %554 %556 %558 
                                         f32 %560 = OpCompositeExtract %559 0 
                                         f32 %561 = OpCompositeExtract %559 1 
                                         f32 %562 = OpCompositeExtract %559 2 
                                       f32_3 %563 = OpCompositeConstruct %560 %561 %562 
                                       f32_4 %564 = OpLoad %43 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                       f32_3 %566 = OpFMul %563 %565 
                                       f32_3 %569 = OpFAdd %566 %568 
                                       f32_4 %570 = OpLoad %43 
                                       f32_4 %571 = OpVectorShuffle %570 %569 4 5 6 3 
                                                      OpStore %43 %571 
                                Uniform f32* %572 = OpAccessChain %17 %552 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFNegate %573 
                                         f32 %576 = OpFMul %574 %575 
                                         f32 %577 = OpFAdd %576 %575 
                                                      OpStore %115 %577 
                                         f32 %578 = OpLoad %115 
                                       f32_3 %579 = OpCompositeConstruct %578 %578 %578 
                                       f32_3 %580 = OpLoad %60 
                                       f32_3 %581 = OpFMul %579 %580 
                                                      OpStore %60 %581 
                                       f32_4 %582 = OpLoad %9 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                         f32 %584 = OpLoad %27 
                                       f32_3 %585 = OpCompositeConstruct %584 %584 %584 
                                       f32_3 %586 = OpFMul %583 %585 
                              Uniform f32_4* %588 = OpAccessChain %17 %587 
                                       f32_4 %589 = OpLoad %588 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                       f32_3 %591 = OpFAdd %586 %590 
                                       f32_4 %592 = OpLoad %9 
                                       f32_4 %593 = OpVectorShuffle %592 %591 4 5 6 3 
                                                      OpStore %9 %593 
                                       f32_4 %594 = OpLoad %9 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                       f32_4 %596 = OpLoad %9 
                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
                                         f32 %598 = OpDot %595 %597 
                                                      OpStore %27 %598 
                                         f32 %599 = OpLoad %27 
                                         f32 %601 = OpExtInst %1 40 %599 %600 
                                                      OpStore %27 %601 
                                         f32 %602 = OpLoad %27 
                                         f32 %603 = OpExtInst %1 32 %602 
                                                      OpStore %27 %603 
                                         f32 %604 = OpLoad %27 
                                       f32_3 %605 = OpCompositeConstruct %604 %604 %604 
                                       f32_4 %606 = OpLoad %9 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 1 2 
                                       f32_3 %608 = OpFMul %605 %607 
                                       f32_4 %609 = OpLoad %9 
                                       f32_4 %610 = OpVectorShuffle %609 %608 4 5 6 3 
                                                      OpStore %9 %610 
                                       f32_4 %611 = OpLoad %125 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_4 %613 = OpLoad %35 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                         f32 %615 = OpDot %612 %614 
                                                      OpStore %27 %615 
                                       f32_4 %616 = OpLoad %125 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                              Uniform f32_4* %618 = OpAccessChain %17 %587 
                                       f32_4 %619 = OpLoad %618 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                                         f32 %621 = OpDot %617 %620 
                                Private f32* %622 = OpAccessChain %35 %148 
                                                      OpStore %622 %621 
                                Private f32* %623 = OpAccessChain %35 %148 
                                         f32 %624 = OpLoad %623 
                                         f32 %625 = OpExtInst %1 43 %624 %173 %113 
                                Private f32* %626 = OpAccessChain %35 %148 
                                                      OpStore %626 %625 
                                       f32_4 %628 = OpLoad %125 
                                       f32_3 %629 = OpVectorShuffle %628 %628 0 1 2 
                                       f32_4 %630 = OpLoad %9 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                                         f32 %632 = OpDot %629 %631 
                                                      OpStore %627 %632 
                                         f32 %633 = OpLoad %627 
                                         f32 %634 = OpExtInst %1 43 %633 %173 %113 
                                                      OpStore %627 %634 
                              Uniform f32_4* %635 = OpAccessChain %17 %587 
                                       f32_4 %636 = OpLoad %635 
                                       f32_3 %637 = OpVectorShuffle %636 %636 0 1 2 
                                       f32_4 %638 = OpLoad %9 
                                       f32_3 %639 = OpVectorShuffle %638 %638 0 1 2 
                                         f32 %640 = OpDot %637 %639 
                                Private f32* %641 = OpAccessChain %9 %148 
                                                      OpStore %641 %640 
                                Private f32* %642 = OpAccessChain %9 %148 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpExtInst %1 43 %643 %173 %113 
                                Private f32* %645 = OpAccessChain %9 %148 
                                                      OpStore %645 %644 
                                Private f32* %647 = OpAccessChain %9 %148 
                                         f32 %648 = OpLoad %647 
                                Private f32* %649 = OpAccessChain %9 %148 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpFMul %648 %650 
                                Private f32* %652 = OpAccessChain %646 %148 
                                                      OpStore %652 %651 
                                       f32_3 %653 = OpLoad %646 
                                       f32_2 %654 = OpVectorShuffle %653 %653 0 0 
                                         f32 %655 = OpLoad %69 
                                       f32_2 %656 = OpCompositeConstruct %655 %655 
                                         f32 %657 = OpDot %654 %656 
                                Private f32* %658 = OpAccessChain %646 %148 
                                                      OpStore %658 %657 
                                Private f32* %659 = OpAccessChain %646 %148 
                                         f32 %660 = OpLoad %659 
                                         f32 %662 = OpFAdd %660 %661 
                                Private f32* %663 = OpAccessChain %646 %148 
                                                      OpStore %663 %662 
                                Private f32* %665 = OpAccessChain %35 %148 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFNegate %666 
                                         f32 %668 = OpFAdd %667 %113 
                                                      OpStore %664 %668 
                                         f32 %670 = OpLoad %664 
                                         f32 %671 = OpLoad %664 
                                         f32 %672 = OpFMul %670 %671 
                                                      OpStore %669 %672 
                                         f32 %673 = OpLoad %669 
                                         f32 %674 = OpLoad %669 
                                         f32 %675 = OpFMul %673 %674 
                                                      OpStore %669 %675 
                                         f32 %676 = OpLoad %664 
                                         f32 %677 = OpLoad %669 
                                         f32 %678 = OpFMul %676 %677 
                                                      OpStore %664 %678 
                                Private f32* %679 = OpAccessChain %646 %148 
                                         f32 %680 = OpLoad %679 
                                         f32 %681 = OpLoad %664 
                                         f32 %682 = OpFMul %680 %681 
                                         f32 %683 = OpFAdd %682 %113 
                                                      OpStore %664 %683 
                                         f32 %684 = OpLoad %27 
                                         f32 %685 = OpExtInst %1 4 %684 
                                         f32 %686 = OpFNegate %685 
                                         f32 %687 = OpFAdd %686 %113 
                                                      OpStore %669 %687 
                                         f32 %688 = OpLoad %669 
                                         f32 %689 = OpLoad %669 
                                         f32 %690 = OpFMul %688 %689 
                                                      OpStore %329 %690 
                                         f32 %691 = OpLoad %329 
                                         f32 %692 = OpLoad %329 
                                         f32 %693 = OpFMul %691 %692 
                                                      OpStore %329 %693 
                                         f32 %694 = OpLoad %669 
                                         f32 %695 = OpLoad %329 
                                         f32 %696 = OpFMul %694 %695 
                                                      OpStore %669 %696 
                                Private f32* %697 = OpAccessChain %646 %148 
                                         f32 %698 = OpLoad %697 
                                         f32 %699 = OpLoad %669 
                                         f32 %700 = OpFMul %698 %699 
                                         f32 %701 = OpFAdd %700 %113 
                                Private f32* %702 = OpAccessChain %646 %148 
                                                      OpStore %702 %701 
                                Private f32* %703 = OpAccessChain %646 %148 
                                         f32 %704 = OpLoad %703 
                                         f32 %705 = OpLoad %664 
                                         f32 %706 = OpFMul %704 %705 
                                Private f32* %707 = OpAccessChain %646 %148 
                                                      OpStore %707 %706 
                                         f32 %708 = OpLoad %69 
                                         f32 %709 = OpLoad %69 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %664 %710 
                                         f32 %711 = OpLoad %664 
                                         f32 %713 = OpExtInst %1 40 %711 %712 
                                                      OpStore %664 %713 
                                         f32 %714 = OpLoad %664 
                                         f32 %715 = OpFNegate %714 
                                         f32 %716 = OpFAdd %715 %113 
                                                      OpStore %69 %716 
                                         f32 %717 = OpLoad %27 
                                         f32 %718 = OpExtInst %1 4 %717 
                                         f32 %719 = OpLoad %69 
                                         f32 %720 = OpFMul %718 %719 
                                         f32 %721 = OpLoad %664 
                                         f32 %722 = OpFAdd %720 %721 
                                                      OpStore %329 %722 
                                Private f32* %723 = OpAccessChain %35 %148 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpLoad %69 
                                         f32 %726 = OpFMul %724 %725 
                                         f32 %727 = OpLoad %664 
                                         f32 %728 = OpFAdd %726 %727 
                                                      OpStore %69 %728 
                                         f32 %729 = OpLoad %27 
                                         f32 %730 = OpExtInst %1 4 %729 
                                         f32 %731 = OpLoad %69 
                                         f32 %732 = OpFMul %730 %731 
                                                      OpStore %27 %732 
                                Private f32* %733 = OpAccessChain %35 %148 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpLoad %329 
                                         f32 %736 = OpFMul %734 %735 
                                         f32 %737 = OpLoad %27 
                                         f32 %738 = OpFAdd %736 %737 
                                                      OpStore %27 %738 
                                         f32 %739 = OpLoad %27 
                                         f32 %741 = OpFAdd %739 %740 
                                                      OpStore %27 %741 
                                         f32 %743 = OpLoad %27 
                                         f32 %744 = OpFDiv %742 %743 
                                                      OpStore %27 %744 
                                         f32 %745 = OpLoad %664 
                                         f32 %746 = OpLoad %664 
                                         f32 %747 = OpFMul %745 %746 
                                                      OpStore %69 %747 
                                         f32 %748 = OpLoad %627 
                                         f32 %749 = OpLoad %69 
                                         f32 %750 = OpFMul %748 %749 
                                         f32 %751 = OpLoad %627 
                                         f32 %752 = OpFNegate %751 
                                         f32 %753 = OpFAdd %750 %752 
                                                      OpStore %329 %753 
                                         f32 %754 = OpLoad %329 
                                         f32 %755 = OpLoad %627 
                                         f32 %756 = OpFMul %754 %755 
                                         f32 %757 = OpFAdd %756 %113 
                                                      OpStore %627 %757 
                                         f32 %758 = OpLoad %69 
                                         f32 %760 = OpFMul %758 %759 
                                                      OpStore %69 %760 
                                         f32 %761 = OpLoad %627 
                                         f32 %762 = OpLoad %627 
                                         f32 %763 = OpFMul %761 %762 
                                         f32 %765 = OpFAdd %763 %764 
                                                      OpStore %627 %765 
                                         f32 %766 = OpLoad %69 
                                         f32 %767 = OpLoad %627 
                                         f32 %768 = OpFDiv %766 %767 
                                                      OpStore %627 %768 
                                         f32 %769 = OpLoad %27 
                                         f32 %770 = OpLoad %627 
                                         f32 %771 = OpFMul %769 %770 
                                Private f32* %772 = OpAccessChain %646 %162 
                                                      OpStore %772 %771 
                                       f32_4 %773 = OpLoad %35 
                                       f32_2 %774 = OpVectorShuffle %773 %773 0 0 
                                       f32_3 %775 = OpLoad %646 
                                       f32_2 %776 = OpVectorShuffle %775 %775 0 2 
                                       f32_2 %777 = OpFMul %774 %776 
                                       f32_3 %778 = OpLoad %646 
                                       f32_3 %779 = OpVectorShuffle %778 %777 3 1 4 
                                                      OpStore %646 %779 
                                Private f32* %780 = OpAccessChain %646 %162 
                                         f32 %781 = OpLoad %780 
                                         f32 %783 = OpFMul %781 %782 
                                                      OpStore %27 %783 
                                         f32 %784 = OpLoad %27 
                                         f32 %785 = OpExtInst %1 40 %784 %173 
                                                      OpStore %27 %785 
                                         f32 %786 = OpLoad %664 
                                         f32 %787 = OpLoad %664 
                                         f32 %788 = OpFMul %786 %787 
                                         f32 %789 = OpFAdd %788 %113 
                                                      OpStore %664 %789 
                                         f32 %790 = OpLoad %664 
                                         f32 %791 = OpFDiv %113 %790 
                                                      OpStore %664 %791 
                                       f32_4 %792 = OpLoad %43 
                                       f32_3 %793 = OpVectorShuffle %792 %792 0 1 2 
                                       f32_4 %794 = OpLoad %43 
                                       f32_3 %795 = OpVectorShuffle %794 %794 0 1 2 
                                         f32 %796 = OpDot %793 %795 
                                Private f32* %797 = OpAccessChain %35 %148 
                                                      OpStore %797 %796 
                                Private f32* %799 = OpAccessChain %35 %148 
                                         f32 %800 = OpLoad %799 
                                        bool %801 = OpFOrdNotEqual %800 %173 
                                                      OpStore %798 %801 
                                        bool %802 = OpLoad %798 
                                         f32 %803 = OpSelect %802 %113 %173 
                                Private f32* %804 = OpAccessChain %35 %148 
                                                      OpStore %804 %803 
                                         f32 %805 = OpLoad %27 
                                Private f32* %806 = OpAccessChain %35 %148 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFMul %805 %807 
                                                      OpStore %27 %808 
                                         f32 %809 = OpLoad %115 
                                         f32 %810 = OpFNegate %809 
                                Uniform f32* %811 = OpAccessChain %17 %109 
                                         f32 %812 = OpLoad %811 
                                         f32 %813 = OpFAdd %810 %812 
                                Private f32* %814 = OpAccessChain %35 %148 
                                                      OpStore %814 %813 
                                Private f32* %815 = OpAccessChain %35 %148 
                                         f32 %816 = OpLoad %815 
                                         f32 %817 = OpFAdd %816 %113 
                                Private f32* %818 = OpAccessChain %35 %148 
                                                      OpStore %818 %817 
                                Private f32* %819 = OpAccessChain %35 %148 
                                         f32 %820 = OpLoad %819 
                                         f32 %821 = OpExtInst %1 43 %820 %173 %113 
                                Private f32* %822 = OpAccessChain %35 %148 
                                                      OpStore %822 %821 
                              Uniform f32_4* %824 = OpAccessChain %17 %823 
                                       f32_4 %825 = OpLoad %824 
                                       f32_3 %826 = OpVectorShuffle %825 %825 0 1 2 
                                       f32_3 %827 = OpLoad %646 
                                       f32_3 %828 = OpVectorShuffle %827 %827 0 0 0 
                                       f32_3 %829 = OpFMul %826 %828 
                                       f32_4 %830 = OpLoad %137 
                                       f32_3 %831 = OpVectorShuffle %830 %830 0 1 2 
                                       f32_3 %832 = OpFAdd %829 %831 
                                       f32_4 %833 = OpLoad %125 
                                       f32_4 %834 = OpVectorShuffle %833 %832 4 5 6 3 
                                                      OpStore %125 %834 
                                         f32 %835 = OpLoad %27 
                                       f32_3 %836 = OpCompositeConstruct %835 %835 %835 
                              Uniform f32_4* %837 = OpAccessChain %17 %823 
                                       f32_4 %838 = OpLoad %837 
                                       f32_3 %839 = OpVectorShuffle %838 %838 0 1 2 
                                       f32_3 %840 = OpFMul %836 %839 
                                       f32_4 %841 = OpLoad %137 
                                       f32_4 %842 = OpVectorShuffle %841 %840 4 5 6 3 
                                                      OpStore %137 %842 
                                Private f32* %843 = OpAccessChain %9 %148 
                                         f32 %844 = OpLoad %843 
                                         f32 %845 = OpFNegate %844 
                                         f32 %846 = OpFAdd %845 %113 
                                Private f32* %847 = OpAccessChain %9 %148 
                                                      OpStore %847 %846 
                                Private f32* %848 = OpAccessChain %9 %148 
                                         f32 %849 = OpLoad %848 
                                Private f32* %850 = OpAccessChain %9 %148 
                                         f32 %851 = OpLoad %850 
                                         f32 %852 = OpFMul %849 %851 
                                Private f32* %853 = OpAccessChain %646 %148 
                                                      OpStore %853 %852 
                                Private f32* %854 = OpAccessChain %646 %148 
                                         f32 %855 = OpLoad %854 
                                Private f32* %856 = OpAccessChain %646 %148 
                                         f32 %857 = OpLoad %856 
                                         f32 %858 = OpFMul %855 %857 
                                Private f32* %859 = OpAccessChain %646 %148 
                                                      OpStore %859 %858 
                                Private f32* %860 = OpAccessChain %9 %148 
                                         f32 %861 = OpLoad %860 
                                Private f32* %862 = OpAccessChain %646 %148 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFMul %861 %863 
                                Private f32* %865 = OpAccessChain %9 %148 
                                                      OpStore %865 %864 
                                       f32_4 %866 = OpLoad %43 
                                       f32_3 %867 = OpVectorShuffle %866 %866 0 1 2 
                                       f32_3 %868 = OpFNegate %867 
                                       f32_3 %870 = OpFAdd %868 %869 
                                       f32_4 %871 = OpLoad %142 
                                       f32_4 %872 = OpVectorShuffle %871 %870 4 5 6 3 
                                                      OpStore %142 %872 
                                       f32_4 %873 = OpLoad %142 
                                       f32_3 %874 = OpVectorShuffle %873 %873 0 1 2 
                                       f32_4 %875 = OpLoad %9 
                                       f32_3 %876 = OpVectorShuffle %875 %875 0 0 0 
                                       f32_3 %877 = OpFMul %874 %876 
                                       f32_4 %878 = OpLoad %43 
                                       f32_3 %879 = OpVectorShuffle %878 %878 0 1 2 
                                       f32_3 %880 = OpFAdd %877 %879 
                                       f32_4 %881 = OpLoad %9 
                                       f32_4 %882 = OpVectorShuffle %881 %880 4 5 2 6 
                                                      OpStore %9 %882 
                                       f32_4 %883 = OpLoad %9 
                                       f32_3 %884 = OpVectorShuffle %883 %883 0 1 3 
                                       f32_4 %885 = OpLoad %137 
                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 2 
                                       f32_3 %887 = OpFMul %884 %886 
                                       f32_4 %888 = OpLoad %9 
                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 2 6 
                                                      OpStore %9 %889 
                                       f32_3 %890 = OpLoad %60 
                                       f32_4 %891 = OpLoad %125 
                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
                                       f32_3 %893 = OpFMul %890 %892 
                                       f32_4 %894 = OpLoad %9 
                                       f32_3 %895 = OpVectorShuffle %894 %894 0 1 3 
                                       f32_3 %896 = OpFAdd %893 %895 
                                       f32_4 %897 = OpLoad %9 
                                       f32_4 %898 = OpVectorShuffle %897 %896 4 5 2 6 
                                                      OpStore %9 %898 
                                       f32_3 %899 = OpLoad %202 
                                         f32 %900 = OpLoad %664 
                                       f32_3 %901 = OpCompositeConstruct %900 %900 %900 
                                       f32_3 %902 = OpFMul %899 %901 
                                                      OpStore %60 %902 
                                       f32_4 %903 = OpLoad %43 
                                       f32_3 %904 = OpVectorShuffle %903 %903 0 1 2 
                                       f32_3 %905 = OpFNegate %904 
                                       f32_4 %906 = OpLoad %35 
                                       f32_3 %907 = OpVectorShuffle %906 %906 0 0 0 
                                       f32_3 %908 = OpFAdd %905 %907 
                                       f32_4 %909 = OpLoad %35 
                                       f32_4 %910 = OpVectorShuffle %909 %908 4 5 2 6 
                                                      OpStore %35 %910 
                                         f32 %911 = OpLoad %669 
                                       f32_3 %912 = OpCompositeConstruct %911 %911 %911 
                                       f32_4 %913 = OpLoad %35 
                                       f32_3 %914 = OpVectorShuffle %913 %913 0 1 3 
                                       f32_3 %915 = OpFMul %912 %914 
                                       f32_4 %916 = OpLoad %43 
                                       f32_3 %917 = OpVectorShuffle %916 %916 0 1 2 
                                       f32_3 %918 = OpFAdd %915 %917 
                                       f32_4 %919 = OpLoad %35 
                                       f32_4 %920 = OpVectorShuffle %919 %918 4 5 6 3 
                                                      OpStore %35 %920 
                                       f32_3 %921 = OpLoad %60 
                                       f32_4 %922 = OpLoad %35 
                                       f32_3 %923 = OpVectorShuffle %922 %922 0 1 2 
                                       f32_3 %924 = OpFMul %921 %923 
                                       f32_4 %925 = OpLoad %9 
                                       f32_3 %926 = OpVectorShuffle %925 %925 0 1 3 
                                       f32_3 %927 = OpFAdd %924 %926 
                                       f32_4 %928 = OpLoad %9 
                                       f32_4 %929 = OpVectorShuffle %928 %927 4 5 6 3 
                                                      OpStore %9 %929 
                                       f32_4 %930 = OpLoad %81 
                                       f32_3 %931 = OpVectorShuffle %930 %930 0 1 2 
                                Uniform f32* %933 = OpAccessChain %17 %932 
                                         f32 %934 = OpLoad %933 
                                Uniform f32* %935 = OpAccessChain %17 %932 
                                         f32 %936 = OpLoad %935 
                                Uniform f32* %937 = OpAccessChain %17 %932 
                                         f32 %938 = OpLoad %937 
                                       f32_3 %939 = OpCompositeConstruct %934 %936 %938 
                                         f32 %940 = OpCompositeExtract %939 0 
                                         f32 %941 = OpCompositeExtract %939 1 
                                         f32 %942 = OpCompositeExtract %939 2 
                                       f32_3 %943 = OpCompositeConstruct %940 %941 %942 
                                       f32_3 %944 = OpFMul %931 %943 
                                       f32_4 %945 = OpLoad %9 
                                       f32_3 %946 = OpVectorShuffle %945 %945 0 1 2 
                                       f32_3 %947 = OpFAdd %944 %946 
                                       f32_4 %948 = OpLoad %97 
                                       f32_4 %949 = OpVectorShuffle %948 %947 4 5 6 3 
                                                      OpStore %97 %949 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec2 u_xlat4;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat4.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat0.xy = (-u_xlat0.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat4.xy;
    u_xlat0.xy = u_xlat0.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat0.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	float _Emission;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat25;
float u_xlat36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat39;
float u_xlat40;
bool u_xlatb40;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    u_xlat4 = u_xlat4.wwww * _RedDotColor;
    u_xlat4.xyz = u_xlat4.xyz * _RedDotColor.www;
    SV_Target0.w = u_xlat2.w * _Color.w + u_xlat4.w;
    u_xlat37 = (-_Glossiness) + 1.0;
    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb38){
        u_xlat38 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat38 = inversesqrt(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat38) * u_xlat5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
        u_xlat38 = min(u_xlat7.z, u_xlat38);
        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat5.xyz;
    }
    u_xlat38 = (-u_xlat37) * 0.699999988 + 1.70000005;
    u_xlat38 = u_xlat37 * u_xlat38;
    u_xlat38 = u_xlat38 * 6.0;
    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat38);
    u_xlat39 = u_xlat6.w + -1.0;
    u_xlat39 = unity_SpecCube0_HDR.w * u_xlat39 + 1.0;
    u_xlat39 = log2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.y;
    u_xlat39 = exp2(u_xlat39);
    u_xlat39 = u_xlat39 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat39);
    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat40 = inversesqrt(u_xlat40);
            u_xlat8.xyz = vec3(u_xlat40) * u_xlat5.xyz;
            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;
        }
        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat38);
        u_xlat38 = u_xlat5.w + -1.0;
        u_xlat38 = unity_SpecCube1_HDR.w * u_xlat38 + 1.0;
        u_xlat38 = log2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.y;
        u_xlat38 = exp2(u_xlat38);
        u_xlat38 = u_xlat38 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat38);
        u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz + (-u_xlat5.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat5.xyz;
    }
    u_xlat38 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat5.xyz = vec3(u_xlat38) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat38 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat38) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat37));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat39 = u_xlat25 * u_xlat25;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat25 = u_xlat25 * u_xlat39;
    u_xlat12.x = u_xlat12.x * u_xlat25 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat37 * u_xlat37;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat37 = (-u_xlat24) + 1.0;
    u_xlat39 = abs(u_xlat36) * u_xlat37 + u_xlat24;
    u_xlat37 = u_xlat1.x * u_xlat37 + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat37;
    u_xlat36 = u_xlat1.x * u_xlat39 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat37 = u_xlat24 * u_xlat24;
    u_xlat39 = u_xlat13 * u_xlat37 + (-u_xlat13);
    u_xlat13 = u_xlat39 * u_xlat13 + 1.0;
    u_xlat37 = u_xlat37 * 0.318309873;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat13 = u_xlat37 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat12.z = u_xlat36 * 3.14159274;
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat36 = max(u_xlat12.z, 0.0);
    u_xlat24 = u_xlat24 * u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat36 * u_xlat1.x;
    u_xlat1.x = (-u_xlat38) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5.xyz = u_xlat12.xxx * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat8.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat8.xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat5.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat24);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyw + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat4.xyz * vec3(vec3(_Emission, _Emission, _Emission)) + u_xlat0.xyz;
    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 279
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %86 %142 %217 %223 %224 %237 %265 %271 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpMemberDecorate %20 7 Offset 20 
                                                      OpMemberDecorate %20 8 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 86 
                                                      OpDecorate vs_TEXCOORD2 Location 142 
                                                      OpDecorate vs_TEXCOORD3 Location 217 
                                                      OpDecorate vs_TEXCOORD0 Location 223 
                                                      OpDecorate %224 Location 224 
                                                      OpDecorate %237 Location 237 
                                                      OpDecorate vs_TEXCOORD1 Location 265 
                                                      OpDecorate vs_TEXCOORD7 Location 271 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeStruct %14 %17 %18 %19 %6 %6 %6 %6 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %50 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %83 = OpTypePointer Output %7 
                                              %85 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                          u32 %87 = OpConstant 2 
                                              %88 = OpTypePointer Private %6 
                                             %135 = OpTypePointer Uniform %14 
                                             %141 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %145 = OpTypeVector %6 2 
                                             %176 = OpTypePointer Private %145 
                              Private f32_2* %177 = OpVariable Private 
                                         i32 %180 = OpConstant 6 
                                             %181 = OpTypePointer Uniform %6 
                                         i32 %184 = OpConstant 7 
                                         i32 %193 = OpConstant 5 
                                         i32 %209 = OpConstant 4 
                                             %216 = OpTypePointer Output %145 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_2 %221 = OpConstantComposite %220 %220 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %224 = OpVariable Input 
                                         i32 %227 = OpConstant 8 
                                             %236 = OpTypePointer Input %14 
                                Input f32_3* %237 = OpVariable Input 
                                         u32 %243 = OpConstant 0 
                                Private f32* %257 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                         f32 %272 = OpConstant 3.674022E-40 
                                       f32_4 %273 = OpConstantComposite %272 %272 %272 %272 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %22 %24 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %9 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 1 1 1 1 
                               Uniform f32_4* %53 = OpAccessChain %22 %46 %24 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpFMul %52 %54 
                                                      OpStore %50 %55 
                               Uniform f32_4* %56 = OpAccessChain %22 %46 %29 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %50 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %50 %62 
                               Uniform f32_4* %63 = OpAccessChain %22 %46 %37 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %9 
                                        f32_4 %66 = OpVectorShuffle %65 %65 2 2 2 2 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %50 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %50 %69 
                               Uniform f32_4* %70 = OpAccessChain %22 %46 %46 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpVectorShuffle %72 %72 3 3 3 3 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %50 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %9 %76 
                                        f32_4 %82 = OpLoad %9 
                                Output f32_4* %84 = OpAccessChain %81 %29 
                                                      OpStore %84 %82 
                                 Private f32* %89 = OpAccessChain %9 %87 
                                          f32 %90 = OpLoad %89 
                                                      OpStore vs_TEXCOORD5 %90 
                                        f32_4 %91 = OpLoad %11 
                                        f32_3 %92 = OpVectorShuffle %91 %91 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %22 %24 %24 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %92 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %9 %98 
                               Uniform f32_4* %99 = OpAccessChain %22 %24 %29 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %102 = OpLoad %11 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFAdd %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %22 %24 %37 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %11 
                                       f32_3 %114 = OpVectorShuffle %113 %113 2 2 2 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFAdd %115 %117 
                                       f32_4 %119 = OpLoad %9 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %9 %120 
                              Uniform f32_4* %121 = OpAccessChain %22 %24 %46 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_4 %124 = OpLoad %11 
                                       f32_3 %125 = OpVectorShuffle %124 %124 3 3 3 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_3 %129 = OpFAdd %126 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %9 %131 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFNegate %133 
                              Uniform f32_3* %136 = OpAccessChain %22 %29 
                                       f32_3 %137 = OpLoad %136 
                                       f32_3 %138 = OpFAdd %134 %137 
                                       f32_4 %139 = OpLoad %50 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %50 %140 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                                      OpStore vs_TEXCOORD2 %144 
                                       f32_4 %146 = OpLoad %50 
                                       f32_2 %147 = OpVectorShuffle %146 %146 1 1 
                              Uniform f32_4* %148 = OpAccessChain %22 %37 %24 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %147 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 2 3 
                                                      OpStore %9 %153 
                              Uniform f32_4* %154 = OpAccessChain %22 %37 %29 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                                       f32_4 %157 = OpLoad %50 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 0 
                                       f32_2 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                       f32_2 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 2 3 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %22 %37 %37 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_4 %168 = OpLoad %50 
                                       f32_2 %169 = OpVectorShuffle %168 %168 2 2 
                                       f32_2 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_2 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 2 3 
                                                      OpStore %9 %175 
                                       f32_4 %178 = OpLoad %11 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                Uniform f32* %182 = OpAccessChain %22 %180 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %185 = OpAccessChain %22 %184 
                                         f32 %186 = OpLoad %185 
                                       f32_2 %187 = OpCompositeConstruct %183 %186 
                                       f32_2 %188 = OpFNegate %187 
                                       f32_2 %189 = OpFAdd %179 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFNegate %191 
                                Uniform f32* %194 = OpAccessChain %22 %193 
                                         f32 %195 = OpLoad %194 
                                Uniform f32* %196 = OpAccessChain %22 %193 
                                         f32 %197 = OpLoad %196 
                                       f32_2 %198 = OpCompositeConstruct %195 %197 
                                         f32 %199 = OpCompositeExtract %198 0 
                                         f32 %200 = OpCompositeExtract %198 1 
                                       f32_2 %201 = OpCompositeConstruct %199 %200 
                                       f32_2 %202 = OpFMul %192 %201 
                                       f32_2 %203 = OpLoad %177 
                                       f32_2 %204 = OpFAdd %202 %203 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %9 %206 
                                       f32_4 %207 = OpLoad %9 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                                Uniform f32* %210 = OpAccessChain %22 %209 
                                         f32 %211 = OpLoad %210 
                                       f32_2 %212 = OpCompositeConstruct %211 %211 
                                       f32_2 %213 = OpFDiv %208 %212 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %9 %215 
                                       f32_4 %218 = OpLoad %9 
                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
                                       f32_2 %222 = OpFAdd %219 %221 
                                                      OpStore vs_TEXCOORD3 %222 
                                       f32_4 %225 = OpLoad %224 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                              Uniform f32_4* %228 = OpAccessChain %22 %227 
                                       f32_4 %229 = OpLoad %228 
                                       f32_2 %230 = OpVectorShuffle %229 %229 0 1 
                                       f32_2 %231 = OpFMul %226 %230 
                              Uniform f32_4* %232 = OpAccessChain %22 %227 
                                       f32_4 %233 = OpLoad %232 
                                       f32_2 %234 = OpVectorShuffle %233 %233 2 3 
                                       f32_2 %235 = OpFAdd %231 %234 
                                                      OpStore vs_TEXCOORD0 %235 
                                       f32_3 %238 = OpLoad %237 
                              Uniform f32_4* %239 = OpAccessChain %22 %37 %29 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                         f32 %242 = OpDot %238 %241 
                                Private f32* %244 = OpAccessChain %9 %243 
                                                      OpStore %244 %242 
                                       f32_3 %245 = OpLoad %237 
                              Uniform f32_4* %246 = OpAccessChain %22 %37 %24 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %245 %248 
                                Private f32* %250 = OpAccessChain %9 %77 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %237 
                              Uniform f32_4* %252 = OpAccessChain %22 %37 %37 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                         f32 %255 = OpDot %251 %254 
                                Private f32* %256 = OpAccessChain %9 %87 
                                                      OpStore %256 %255 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_4 %260 = OpLoad %9 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                         f32 %262 = OpDot %259 %261 
                                                      OpStore %257 %262 
                                         f32 %263 = OpLoad %257 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %257 %264 
                                         f32 %266 = OpLoad %257 
                                       f32_3 %267 = OpCompositeConstruct %266 %266 %266 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFMul %267 %269 
                                                      OpStore vs_TEXCOORD1 %270 
                                                      OpStore vs_TEXCOORD7 %273 
                                 Output f32* %274 = OpAccessChain %81 %29 %77 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFNegate %275 
                                 Output f32* %277 = OpAccessChain %81 %29 %77 
                                                      OpStore %277 %276 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 956
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %56 %75 %97 %119 %909 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpMemberDecorate %15 18 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate vs_TEXCOORD0 Location 56 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate vs_TEXCOORD3 Location 75 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate vs_TEXCOORD1 Location 119 
                                                      OpDecorate %283 DescriptorSet 283 
                                                      OpDecorate %283 Binding 283 
                                                      OpDecorate %285 DescriptorSet 285 
                                                      OpDecorate %285 Binding 285 
                                                      OpDecorate %438 DescriptorSet 438 
                                                      OpDecorate %438 Binding 438 
                                                      OpDecorate vs_TEXCOORD5 Location 909 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                               Private f32_4* %43 = OpVariable Private 
                                              %44 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %45 = OpTypePointer UniformConstant %44 
         UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
                                              %48 = OpTypeSampler 
                                              %49 = OpTypePointer UniformConstant %48 
                     UniformConstant sampler* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampledImage %44 
                                              %54 = OpTypeVector %6 2 
                                              %55 = OpTypePointer Input %54 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %59 = OpTypePointer Private %10 
                               Private f32_3* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 17 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                              %78 = OpTypeInt 32 0 
                                          u32 %79 = OpConstant 3 
                               Private f32_4* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 18 
                                              %96 = OpTypePointer Output %7 
                                Output f32_4* %97 = OpVariable Output 
                                             %100 = OpTypePointer Uniform %6 
                                             %107 = OpTypePointer Output %6 
                                         i32 %109 = OpConstant 14 
                                         f32 %113 = OpConstant 3.674022E-40 
                                Private f32* %115 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_4* %125 = OpVariable Private 
                                             %137 = OpTypeBool 
                                             %138 = OpTypePointer Private %137 
                               Private bool* %139 = OpVariable Private 
                                         f32 %140 = OpConstant 3.674022E-40 
                                         i32 %141 = OpConstant 7 
                              Private f32_4* %155 = OpVariable Private 
                              Private f32_3* %163 = OpVariable Private 
                                         i32 %166 = OpConstant 5 
                              Private f32_3* %175 = OpVariable Private 
                                         i32 %178 = OpConstant 6 
                                             %187 = OpTypeVector %137 3 
                                             %188 = OpTypePointer Private %187 
                             Private bool_3* %189 = OpVariable Private 
                                       f32_4 %190 = OpConstantComposite %140 %140 %140 %140 
                                             %193 = OpTypeVector %137 4 
                                             %196 = OpTypePointer Function %10 
                                         u32 %199 = OpConstant 0 
                                             %202 = OpTypePointer Function %6 
                                         u32 %213 = OpConstant 1 
                                         u32 %226 = OpConstant 2 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %273 = OpConstant 3.674022E-40 
                                         f32 %279 = OpConstant 3.674022E-40 
                                             %281 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %282 = OpTypePointer UniformConstant %281 
      UniformConstant read_only TextureCube* %283 = OpVariable UniformConstant 
                    UniformConstant sampler* %285 = OpVariable UniformConstant 
                                             %287 = OpTypeSampledImage %281 
                                Private f32* %293 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         i32 %298 = OpConstant 8 
                               Private bool* %321 = OpVariable Private 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         i32 %329 = OpConstant 11 
                                Private f32* %336 = OpVariable Private 
                              Private f32_3* %349 = OpVariable Private 
                                         i32 %352 = OpConstant 9 
                              Private f32_3* %360 = OpVariable Private 
                                         i32 %363 = OpConstant 10 
                             Private bool_3* %371 = OpVariable Private 
      UniformConstant read_only TextureCube* %438 = OpVariable UniformConstant 
                                         i32 %449 = OpConstant 12 
                                         f32 %511 = OpConstant 3.674022E-40 
                                       f32_3 %512 = OpConstantComposite %511 %511 %511 
                                         i32 %516 = OpConstant 15 
                                         f32 %531 = OpConstant 3.674022E-40 
                                       f32_3 %532 = OpConstantComposite %531 %531 %531 
                                         f32 %539 = OpConstant 3.674022E-40 
                                         i32 %551 = OpConstant 2 
                                         f32 %564 = OpConstant 3.674022E-40 
                                Private f32* %591 = OpVariable Private 
                              Private f32_3* %610 = OpVariable Private 
                                         f32 %625 = OpConstant 3.674022E-40 
                                Private f32* %628 = OpVariable Private 
                                Private f32* %633 = OpVariable Private 
                                         f32 %676 = OpConstant 3.674022E-40 
                                         f32 %704 = OpConstant 3.674022E-40 
                                         f32 %706 = OpConstant 3.674022E-40 
                                         f32 %723 = OpConstant 3.674022E-40 
                                         f32 %728 = OpConstant 3.674022E-40 
                                         f32 %746 = OpConstant 3.674022E-40 
                               Private bool* %762 = OpVariable Private 
                                         i32 %789 = OpConstant 13 
                                       f32_3 %830 = OpConstantComposite %113 %113 %113 
                                         i32 %890 = OpConstant 16 
                                             %908 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         i32 %911 = OpConstant 1 
                                         i32 %925 = OpConstant 4 
                                         i32 %936 = OpConstant 3 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %197 = OpVariable Function 
                               Function f32* %203 = OpVariable Function 
                               Function f32* %216 = OpVariable Function 
                               Function f32* %229 = OpVariable Function 
                             Function f32_3* %376 = OpVariable Function 
                               Function f32* %380 = OpVariable Function 
                               Function f32* %392 = OpVariable Function 
                               Function f32* %404 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %47 = OpLoad %46 
                                      sampler %51 = OpLoad %50 
                   read_only Texture2DSampled %53 = OpSampledImage %47 %51 
                                        f32_2 %57 = OpLoad vs_TEXCOORD0 
                                        f32_4 %58 = OpImageSampleImplicitLod %53 %57 
                                                      OpStore %43 %58 
                                        f32_4 %61 = OpLoad %43 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %60 %68 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_2 %76 = OpLoad vs_TEXCOORD3 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                          f32 %80 = OpCompositeExtract %77 3 
                                                      OpStore %69 %80 
                                          f32 %82 = OpLoad %69 
                                        f32_4 %83 = OpCompositeConstruct %82 %82 %82 %82 
                               Uniform f32_4* %85 = OpAccessChain %17 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFMul %83 %86 
                                                      OpStore %81 %87 
                                        f32_4 %88 = OpLoad %81 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                               Uniform f32_4* %90 = OpAccessChain %17 %84 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 3 3 3 
                                        f32_3 %93 = OpFMul %89 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %81 %95 
                                 Private f32* %98 = OpAccessChain %43 %79 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %17 %63 %79 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %99 %102 
                                Private f32* %104 = OpAccessChain %81 %79 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFAdd %103 %105 
                                 Output f32* %108 = OpAccessChain %97 %79 
                                                      OpStore %108 %106 
                                Uniform f32* %110 = OpAccessChain %17 %109 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                         f32 %114 = OpFAdd %112 %113 
                                                      OpStore %69 %114 
                                       f32_4 %116 = OpLoad %35 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFNegate %117 
                                       f32_3 %120 = OpLoad vs_TEXCOORD1 
                                         f32 %121 = OpDot %118 %120 
                                                      OpStore %115 %121 
                                         f32 %122 = OpLoad %115 
                                         f32 %123 = OpLoad %115 
                                         f32 %124 = OpFAdd %122 %123 
                                                      OpStore %115 %124 
                                       f32_3 %126 = OpLoad vs_TEXCOORD1 
                                         f32 %127 = OpLoad %115 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFMul %126 %129 
                                       f32_4 %131 = OpLoad %35 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %130 %133 
                                       f32_4 %135 = OpLoad %125 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %125 %136 
                                Uniform f32* %142 = OpAccessChain %17 %141 %79 
                                         f32 %143 = OpLoad %142 
                                        bool %144 = OpFOrdLessThan %140 %143 
                                                      OpStore %139 %144 
                                        bool %145 = OpLoad %139 
                                                      OpSelectionMerge %147 None 
                                                      OpBranchConditional %145 %146 %264 
                                             %146 = OpLabel 
                                       f32_4 %148 = OpLoad %125 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %125 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %149 %151 
                                                      OpStore %115 %152 
                                         f32 %153 = OpLoad %115 
                                         f32 %154 = OpExtInst %1 32 %153 
                                                      OpStore %115 %154 
                                         f32 %156 = OpLoad %115 
                                       f32_3 %157 = OpCompositeConstruct %156 %156 %156 
                                       f32_4 %158 = OpLoad %125 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %155 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %155 %162 
                                       f32_3 %164 = OpLoad vs_TEXCOORD2 
                                       f32_3 %165 = OpFNegate %164 
                              Uniform f32_4* %167 = OpAccessChain %17 %166 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFAdd %165 %169 
                                                      OpStore %163 %170 
                                       f32_3 %171 = OpLoad %163 
                                       f32_4 %172 = OpLoad %155 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFDiv %171 %173 
                                                      OpStore %163 %174 
                                       f32_3 %176 = OpLoad vs_TEXCOORD2 
                                       f32_3 %177 = OpFNegate %176 
                              Uniform f32_4* %179 = OpAccessChain %17 %178 
                                       f32_4 %180 = OpLoad %179 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFAdd %177 %181 
                                                      OpStore %175 %182 
                                       f32_3 %183 = OpLoad %175 
                                       f32_4 %184 = OpLoad %155 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFDiv %183 %185 
                                                      OpStore %175 %186 
                                       f32_4 %191 = OpLoad %155 
                                       f32_4 %192 = OpVectorShuffle %191 %191 0 1 2 0 
                                      bool_4 %194 = OpFOrdLessThan %190 %192 
                                      bool_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                                      OpStore %189 %195 
                                       f32_3 %198 = OpLoad %163 
                                                      OpStore %197 %198 
                               Private bool* %200 = OpAccessChain %189 %199 
                                        bool %201 = OpLoad %200 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %201 %204 %208 
                                             %204 = OpLabel 
                                Private f32* %206 = OpAccessChain %163 %199 
                                         f32 %207 = OpLoad %206 
                                                      OpStore %203 %207 
                                                      OpBranch %205 
                                             %208 = OpLabel 
                                Private f32* %209 = OpAccessChain %175 %199 
                                         f32 %210 = OpLoad %209 
                                                      OpStore %203 %210 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                         f32 %211 = OpLoad %203 
                               Function f32* %212 = OpAccessChain %197 %199 
                                                      OpStore %212 %211 
                               Private bool* %214 = OpAccessChain %189 %213 
                                        bool %215 = OpLoad %214 
                                                      OpSelectionMerge %218 None 
                                                      OpBranchConditional %215 %217 %221 
                                             %217 = OpLabel 
                                Private f32* %219 = OpAccessChain %163 %213 
                                         f32 %220 = OpLoad %219 
                                                      OpStore %216 %220 
                                                      OpBranch %218 
                                             %221 = OpLabel 
                                Private f32* %222 = OpAccessChain %175 %213 
                                         f32 %223 = OpLoad %222 
                                                      OpStore %216 %223 
                                                      OpBranch %218 
                                             %218 = OpLabel 
                                         f32 %224 = OpLoad %216 
                               Function f32* %225 = OpAccessChain %197 %213 
                                                      OpStore %225 %224 
                               Private bool* %227 = OpAccessChain %189 %226 
                                        bool %228 = OpLoad %227 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %228 %230 %234 
                                             %230 = OpLabel 
                                Private f32* %232 = OpAccessChain %163 %226 
                                         f32 %233 = OpLoad %232 
                                                      OpStore %229 %233 
                                                      OpBranch %231 
                                             %234 = OpLabel 
                                Private f32* %235 = OpAccessChain %175 %226 
                                         f32 %236 = OpLoad %235 
                                                      OpStore %229 %236 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                         f32 %237 = OpLoad %229 
                               Function f32* %238 = OpAccessChain %197 %226 
                                                      OpStore %238 %237 
                                       f32_3 %239 = OpLoad %197 
                                                      OpStore %163 %239 
                                Private f32* %240 = OpAccessChain %163 %213 
                                         f32 %241 = OpLoad %240 
                                Private f32* %242 = OpAccessChain %163 %199 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpExtInst %1 37 %241 %243 
                                                      OpStore %115 %244 
                                Private f32* %245 = OpAccessChain %163 %226 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpLoad %115 
                                         f32 %248 = OpExtInst %1 37 %246 %247 
                                                      OpStore %115 %248 
                                       f32_3 %249 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %250 = OpAccessChain %17 %141 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFNegate %252 
                                       f32_3 %254 = OpFAdd %249 %253 
                                                      OpStore %163 %254 
                                       f32_4 %255 = OpLoad %155 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpLoad %115 
                                       f32_3 %258 = OpCompositeConstruct %257 %257 %257 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %163 
                                       f32_3 %261 = OpFAdd %259 %260 
                                       f32_4 %262 = OpLoad %155 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %155 %263 
                                                      OpBranch %147 
                                             %264 = OpLabel 
                                       f32_4 %265 = OpLoad %125 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %155 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %155 %268 
                                                      OpBranch %147 
                                             %147 = OpLabel 
                                         f32 %269 = OpLoad %69 
                                         f32 %270 = OpFNegate %269 
                                         f32 %272 = OpFMul %270 %271 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %115 %274 
                                         f32 %275 = OpLoad %69 
                                         f32 %276 = OpLoad %115 
                                         f32 %277 = OpFMul %275 %276 
                                                      OpStore %115 %277 
                                         f32 %278 = OpLoad %115 
                                         f32 %280 = OpFMul %278 %279 
                                                      OpStore %115 %280 
                       read_only TextureCube %284 = OpLoad %283 
                                     sampler %286 = OpLoad %285 
                read_only TextureCubeSampled %288 = OpSampledImage %284 %286 
                                       f32_4 %289 = OpLoad %155 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                         f32 %291 = OpLoad %115 
                                       f32_4 %292 = OpImageSampleExplicitLod %288 %290 Lod %7 
                                                      OpStore %155 %292 
                                Private f32* %294 = OpAccessChain %155 %79 
                                         f32 %295 = OpLoad %294 
                                         f32 %297 = OpFAdd %295 %296 
                                                      OpStore %293 %297 
                                Uniform f32* %299 = OpAccessChain %17 %298 %79 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpLoad %293 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpFAdd %302 %113 
                                                      OpStore %293 %303 
                                         f32 %304 = OpLoad %293 
                                         f32 %305 = OpExtInst %1 30 %304 
                                                      OpStore %293 %305 
                                         f32 %306 = OpLoad %293 
                                Uniform f32* %307 = OpAccessChain %17 %298 %213 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                                      OpStore %293 %309 
                                         f32 %310 = OpLoad %293 
                                         f32 %311 = OpExtInst %1 29 %310 
                                                      OpStore %293 %311 
                                         f32 %312 = OpLoad %293 
                                Uniform f32* %313 = OpAccessChain %17 %298 %199 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                                      OpStore %293 %315 
                                       f32_4 %316 = OpLoad %155 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                         f32 %318 = OpLoad %293 
                                       f32_3 %319 = OpCompositeConstruct %318 %318 %318 
                                       f32_3 %320 = OpFMul %317 %319 
                                                      OpStore %163 %320 
                                Uniform f32* %322 = OpAccessChain %17 %178 %79 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdLessThan %323 %324 
                                                      OpStore %321 %325 
                                        bool %326 = OpLoad %321 
                                                      OpSelectionMerge %328 None 
                                                      OpBranchConditional %326 %327 %328 
                                             %327 = OpLabel 
                                Uniform f32* %330 = OpAccessChain %17 %329 %79 
                                         f32 %331 = OpLoad %330 
                                        bool %332 = OpFOrdLessThan %140 %331 
                                                      OpStore %321 %332 
                                        bool %333 = OpLoad %321 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %335 
                                             %334 = OpLabel 
                                       f32_4 %337 = OpLoad %125 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_4 %339 = OpLoad %125 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                         f32 %341 = OpDot %338 %340 
                                                      OpStore %336 %341 
                                         f32 %342 = OpLoad %336 
                                         f32 %343 = OpExtInst %1 32 %342 
                                                      OpStore %336 %343 
                                         f32 %344 = OpLoad %336 
                                       f32_3 %345 = OpCompositeConstruct %344 %344 %344 
                                       f32_4 %346 = OpLoad %125 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFMul %345 %347 
                                                      OpStore %175 %348 
                                       f32_3 %350 = OpLoad vs_TEXCOORD2 
                                       f32_3 %351 = OpFNegate %350 
                              Uniform f32_4* %353 = OpAccessChain %17 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %351 %355 
                                                      OpStore %349 %356 
                                       f32_3 %357 = OpLoad %349 
                                       f32_3 %358 = OpLoad %175 
                                       f32_3 %359 = OpFDiv %357 %358 
                                                      OpStore %349 %359 
                                       f32_3 %361 = OpLoad vs_TEXCOORD2 
                                       f32_3 %362 = OpFNegate %361 
                              Uniform f32_4* %364 = OpAccessChain %17 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %362 %366 
                                                      OpStore %360 %367 
                                       f32_3 %368 = OpLoad %360 
                                       f32_3 %369 = OpLoad %175 
                                       f32_3 %370 = OpFDiv %368 %369 
                                                      OpStore %360 %370 
                                       f32_3 %372 = OpLoad %175 
                                       f32_4 %373 = OpVectorShuffle %372 %372 0 1 2 0 
                                      bool_4 %374 = OpFOrdLessThan %190 %373 
                                      bool_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                                      OpStore %371 %375 
                                       f32_3 %377 = OpLoad %349 
                                                      OpStore %376 %377 
                               Private bool* %378 = OpAccessChain %371 %199 
                                        bool %379 = OpLoad %378 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %379 %381 %385 
                                             %381 = OpLabel 
                                Private f32* %383 = OpAccessChain %349 %199 
                                         f32 %384 = OpLoad %383 
                                                      OpStore %380 %384 
                                                      OpBranch %382 
                                             %385 = OpLabel 
                                Private f32* %386 = OpAccessChain %360 %199 
                                         f32 %387 = OpLoad %386 
                                                      OpStore %380 %387 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                         f32 %388 = OpLoad %380 
                               Function f32* %389 = OpAccessChain %376 %199 
                                                      OpStore %389 %388 
                               Private bool* %390 = OpAccessChain %371 %213 
                                        bool %391 = OpLoad %390 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %391 %393 %397 
                                             %393 = OpLabel 
                                Private f32* %395 = OpAccessChain %349 %213 
                                         f32 %396 = OpLoad %395 
                                                      OpStore %392 %396 
                                                      OpBranch %394 
                                             %397 = OpLabel 
                                Private f32* %398 = OpAccessChain %360 %213 
                                         f32 %399 = OpLoad %398 
                                                      OpStore %392 %399 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %400 = OpLoad %392 
                               Function f32* %401 = OpAccessChain %376 %213 
                                                      OpStore %401 %400 
                               Private bool* %402 = OpAccessChain %371 %226 
                                        bool %403 = OpLoad %402 
                                                      OpSelectionMerge %406 None 
                                                      OpBranchConditional %403 %405 %409 
                                             %405 = OpLabel 
                                Private f32* %407 = OpAccessChain %349 %226 
                                         f32 %408 = OpLoad %407 
                                                      OpStore %404 %408 
                                                      OpBranch %406 
                                             %409 = OpLabel 
                                Private f32* %410 = OpAccessChain %360 %226 
                                         f32 %411 = OpLoad %410 
                                                      OpStore %404 %411 
                                                      OpBranch %406 
                                             %406 = OpLabel 
                                         f32 %412 = OpLoad %404 
                               Function f32* %413 = OpAccessChain %376 %226 
                                                      OpStore %413 %412 
                                       f32_3 %414 = OpLoad %376 
                                                      OpStore %349 %414 
                                Private f32* %415 = OpAccessChain %349 %213 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %349 %199 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpExtInst %1 37 %416 %418 
                                                      OpStore %336 %419 
                                Private f32* %420 = OpAccessChain %349 %226 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpLoad %336 
                                         f32 %423 = OpExtInst %1 37 %421 %422 
                                                      OpStore %336 %423 
                                       f32_3 %424 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %425 = OpAccessChain %17 %329 
                                       f32_4 %426 = OpLoad %425 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_3 %428 = OpFNegate %427 
                                       f32_3 %429 = OpFAdd %424 %428 
                                                      OpStore %349 %429 
                                       f32_3 %430 = OpLoad %175 
                                         f32 %431 = OpLoad %336 
                                       f32_3 %432 = OpCompositeConstruct %431 %431 %431 
                                       f32_3 %433 = OpFMul %430 %432 
                                       f32_3 %434 = OpLoad %349 
                                       f32_3 %435 = OpFAdd %433 %434 
                                       f32_4 %436 = OpLoad %125 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %125 %437 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                       read_only TextureCube %439 = OpLoad %438 
                                     sampler %440 = OpLoad %285 
                read_only TextureCubeSampled %441 = OpSampledImage %439 %440 
                                       f32_4 %442 = OpLoad %125 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                         f32 %444 = OpLoad %115 
                                       f32_4 %445 = OpImageSampleExplicitLod %441 %443 Lod %7 
                                                      OpStore %125 %445 
                                Private f32* %446 = OpAccessChain %125 %79 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFAdd %447 %296 
                                                      OpStore %115 %448 
                                Uniform f32* %450 = OpAccessChain %17 %449 %79 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpLoad %115 
                                         f32 %453 = OpFMul %451 %452 
                                         f32 %454 = OpFAdd %453 %113 
                                                      OpStore %115 %454 
                                         f32 %455 = OpLoad %115 
                                         f32 %456 = OpExtInst %1 30 %455 
                                                      OpStore %115 %456 
                                         f32 %457 = OpLoad %115 
                                Uniform f32* %458 = OpAccessChain %17 %449 %213 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFMul %457 %459 
                                                      OpStore %115 %460 
                                         f32 %461 = OpLoad %115 
                                         f32 %462 = OpExtInst %1 29 %461 
                                                      OpStore %115 %462 
                                         f32 %463 = OpLoad %115 
                                Uniform f32* %464 = OpAccessChain %17 %449 %199 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                                      OpStore %115 %466 
                                       f32_4 %467 = OpLoad %125 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                         f32 %469 = OpLoad %115 
                                       f32_3 %470 = OpCompositeConstruct %469 %469 %469 
                                       f32_3 %471 = OpFMul %468 %470 
                                       f32_4 %472 = OpLoad %125 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %125 %473 
                                         f32 %474 = OpLoad %293 
                                       f32_3 %475 = OpCompositeConstruct %474 %474 %474 
                                       f32_4 %476 = OpLoad %155 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %125 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpFNegate %480 
                                       f32_3 %482 = OpFAdd %478 %481 
                                       f32_4 %483 = OpLoad %155 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %155 %484 
                              Uniform f32_4* %485 = OpAccessChain %17 %178 
                                       f32_4 %486 = OpLoad %485 
                                       f32_3 %487 = OpVectorShuffle %486 %486 3 3 3 
                                       f32_4 %488 = OpLoad %155 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 2 
                                       f32_3 %490 = OpFMul %487 %489 
                                       f32_4 %491 = OpLoad %125 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFAdd %490 %492 
                                                      OpStore %163 %493 
                                                      OpBranch %328 
                                             %328 = OpLabel 
                                       f32_3 %494 = OpLoad vs_TEXCOORD1 
                                       f32_3 %495 = OpLoad vs_TEXCOORD1 
                                         f32 %496 = OpDot %494 %495 
                                                      OpStore %115 %496 
                                         f32 %497 = OpLoad %115 
                                         f32 %498 = OpExtInst %1 32 %497 
                                                      OpStore %115 %498 
                                         f32 %499 = OpLoad %115 
                                       f32_3 %500 = OpCompositeConstruct %499 %499 %499 
                                       f32_3 %501 = OpLoad vs_TEXCOORD1 
                                       f32_3 %502 = OpFMul %500 %501 
                                       f32_4 %503 = OpLoad %125 
                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 6 3 
                                                      OpStore %125 %504 
                                       f32_4 %505 = OpLoad %43 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
                              Uniform f32_4* %507 = OpAccessChain %17 %63 
                                       f32_4 %508 = OpLoad %507 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                       f32_3 %510 = OpFMul %506 %509 
                                       f32_3 %513 = OpFAdd %510 %512 
                                       f32_4 %514 = OpLoad %43 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 6 3 
                                                      OpStore %43 %515 
                                Uniform f32* %517 = OpAccessChain %17 %516 
                                         f32 %518 = OpLoad %517 
                                Uniform f32* %519 = OpAccessChain %17 %516 
                                         f32 %520 = OpLoad %519 
                                Uniform f32* %521 = OpAccessChain %17 %516 
                                         f32 %522 = OpLoad %521 
                                       f32_3 %523 = OpCompositeConstruct %518 %520 %522 
                                         f32 %524 = OpCompositeExtract %523 0 
                                         f32 %525 = OpCompositeExtract %523 1 
                                         f32 %526 = OpCompositeExtract %523 2 
                                       f32_3 %527 = OpCompositeConstruct %524 %525 %526 
                                       f32_4 %528 = OpLoad %43 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFMul %527 %529 
                                       f32_3 %533 = OpFAdd %530 %532 
                                       f32_4 %534 = OpLoad %43 
                                       f32_4 %535 = OpVectorShuffle %534 %533 4 5 6 3 
                                                      OpStore %43 %535 
                                Uniform f32* %536 = OpAccessChain %17 %516 
                                         f32 %537 = OpLoad %536 
                                         f32 %538 = OpFNegate %537 
                                         f32 %540 = OpFMul %538 %539 
                                         f32 %541 = OpFAdd %540 %539 
                                                      OpStore %115 %541 
                                         f32 %542 = OpLoad %115 
                                       f32_3 %543 = OpCompositeConstruct %542 %542 %542 
                                       f32_3 %544 = OpLoad %60 
                                       f32_3 %545 = OpFMul %543 %544 
                                                      OpStore %60 %545 
                                       f32_4 %546 = OpLoad %9 
                                       f32_3 %547 = OpVectorShuffle %546 %546 0 1 2 
                                         f32 %548 = OpLoad %27 
                                       f32_3 %549 = OpCompositeConstruct %548 %548 %548 
                                       f32_3 %550 = OpFMul %547 %549 
                              Uniform f32_4* %552 = OpAccessChain %17 %551 
                                       f32_4 %553 = OpLoad %552 
                                       f32_3 %554 = OpVectorShuffle %553 %553 0 1 2 
                                       f32_3 %555 = OpFAdd %550 %554 
                                       f32_4 %556 = OpLoad %9 
                                       f32_4 %557 = OpVectorShuffle %556 %555 4 5 6 3 
                                                      OpStore %9 %557 
                                       f32_4 %558 = OpLoad %9 
                                       f32_3 %559 = OpVectorShuffle %558 %558 0 1 2 
                                       f32_4 %560 = OpLoad %9 
                                       f32_3 %561 = OpVectorShuffle %560 %560 0 1 2 
                                         f32 %562 = OpDot %559 %561 
                                                      OpStore %27 %562 
                                         f32 %563 = OpLoad %27 
                                         f32 %565 = OpExtInst %1 40 %563 %564 
                                                      OpStore %27 %565 
                                         f32 %566 = OpLoad %27 
                                         f32 %567 = OpExtInst %1 32 %566 
                                                      OpStore %27 %567 
                                         f32 %568 = OpLoad %27 
                                       f32_3 %569 = OpCompositeConstruct %568 %568 %568 
                                       f32_4 %570 = OpLoad %9 
                                       f32_3 %571 = OpVectorShuffle %570 %570 0 1 2 
                                       f32_3 %572 = OpFMul %569 %571 
                                       f32_4 %573 = OpLoad %9 
                                       f32_4 %574 = OpVectorShuffle %573 %572 4 5 6 3 
                                                      OpStore %9 %574 
                                       f32_4 %575 = OpLoad %125 
                                       f32_3 %576 = OpVectorShuffle %575 %575 0 1 2 
                                       f32_4 %577 = OpLoad %35 
                                       f32_3 %578 = OpVectorShuffle %577 %577 0 1 2 
                                         f32 %579 = OpDot %576 %578 
                                                      OpStore %27 %579 
                                       f32_4 %580 = OpLoad %125 
                                       f32_3 %581 = OpVectorShuffle %580 %580 0 1 2 
                              Uniform f32_4* %582 = OpAccessChain %17 %551 
                                       f32_4 %583 = OpLoad %582 
                                       f32_3 %584 = OpVectorShuffle %583 %583 0 1 2 
                                         f32 %585 = OpDot %581 %584 
                                Private f32* %586 = OpAccessChain %35 %199 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %35 %199 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpExtInst %1 43 %588 %140 %113 
                                Private f32* %590 = OpAccessChain %35 %199 
                                                      OpStore %590 %589 
                                       f32_4 %592 = OpLoad %125 
                                       f32_3 %593 = OpVectorShuffle %592 %592 0 1 2 
                                       f32_4 %594 = OpLoad %9 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                         f32 %596 = OpDot %593 %595 
                                                      OpStore %591 %596 
                                         f32 %597 = OpLoad %591 
                                         f32 %598 = OpExtInst %1 43 %597 %140 %113 
                                                      OpStore %591 %598 
                              Uniform f32_4* %599 = OpAccessChain %17 %551 
                                       f32_4 %600 = OpLoad %599 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_4 %602 = OpLoad %9 
                                       f32_3 %603 = OpVectorShuffle %602 %602 0 1 2 
                                         f32 %604 = OpDot %601 %603 
                                Private f32* %605 = OpAccessChain %9 %199 
                                                      OpStore %605 %604 
                                Private f32* %606 = OpAccessChain %9 %199 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpExtInst %1 43 %607 %140 %113 
                                Private f32* %609 = OpAccessChain %9 %199 
                                                      OpStore %609 %608 
                                Private f32* %611 = OpAccessChain %9 %199 
                                         f32 %612 = OpLoad %611 
                                Private f32* %613 = OpAccessChain %9 %199 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpFMul %612 %614 
                                Private f32* %616 = OpAccessChain %610 %199 
                                                      OpStore %616 %615 
                                       f32_3 %617 = OpLoad %610 
                                       f32_2 %618 = OpVectorShuffle %617 %617 0 0 
                                         f32 %619 = OpLoad %69 
                                       f32_2 %620 = OpCompositeConstruct %619 %619 
                                         f32 %621 = OpDot %618 %620 
                                Private f32* %622 = OpAccessChain %610 %199 
                                                      OpStore %622 %621 
                                Private f32* %623 = OpAccessChain %610 %199 
                                         f32 %624 = OpLoad %623 
                                         f32 %626 = OpFAdd %624 %625 
                                Private f32* %627 = OpAccessChain %610 %199 
                                                      OpStore %627 %626 
                                Private f32* %629 = OpAccessChain %35 %199 
                                         f32 %630 = OpLoad %629 
                                         f32 %631 = OpFNegate %630 
                                         f32 %632 = OpFAdd %631 %113 
                                                      OpStore %628 %632 
                                         f32 %634 = OpLoad %628 
                                         f32 %635 = OpLoad %628 
                                         f32 %636 = OpFMul %634 %635 
                                                      OpStore %633 %636 
                                         f32 %637 = OpLoad %633 
                                         f32 %638 = OpLoad %633 
                                         f32 %639 = OpFMul %637 %638 
                                                      OpStore %633 %639 
                                         f32 %640 = OpLoad %628 
                                         f32 %641 = OpLoad %633 
                                         f32 %642 = OpFMul %640 %641 
                                                      OpStore %628 %642 
                                Private f32* %643 = OpAccessChain %610 %199 
                                         f32 %644 = OpLoad %643 
                                         f32 %645 = OpLoad %628 
                                         f32 %646 = OpFMul %644 %645 
                                         f32 %647 = OpFAdd %646 %113 
                                                      OpStore %628 %647 
                                         f32 %648 = OpLoad %27 
                                         f32 %649 = OpExtInst %1 4 %648 
                                         f32 %650 = OpFNegate %649 
                                         f32 %651 = OpFAdd %650 %113 
                                                      OpStore %633 %651 
                                         f32 %652 = OpLoad %633 
                                         f32 %653 = OpLoad %633 
                                         f32 %654 = OpFMul %652 %653 
                                                      OpStore %293 %654 
                                         f32 %655 = OpLoad %293 
                                         f32 %656 = OpLoad %293 
                                         f32 %657 = OpFMul %655 %656 
                                                      OpStore %293 %657 
                                         f32 %658 = OpLoad %633 
                                         f32 %659 = OpLoad %293 
                                         f32 %660 = OpFMul %658 %659 
                                                      OpStore %633 %660 
                                Private f32* %661 = OpAccessChain %610 %199 
                                         f32 %662 = OpLoad %661 
                                         f32 %663 = OpLoad %633 
                                         f32 %664 = OpFMul %662 %663 
                                         f32 %665 = OpFAdd %664 %113 
                                Private f32* %666 = OpAccessChain %610 %199 
                                                      OpStore %666 %665 
                                Private f32* %667 = OpAccessChain %610 %199 
                                         f32 %668 = OpLoad %667 
                                         f32 %669 = OpLoad %628 
                                         f32 %670 = OpFMul %668 %669 
                                Private f32* %671 = OpAccessChain %610 %199 
                                                      OpStore %671 %670 
                                         f32 %672 = OpLoad %69 
                                         f32 %673 = OpLoad %69 
                                         f32 %674 = OpFMul %672 %673 
                                                      OpStore %628 %674 
                                         f32 %675 = OpLoad %628 
                                         f32 %677 = OpExtInst %1 40 %675 %676 
                                                      OpStore %628 %677 
                                         f32 %678 = OpLoad %628 
                                         f32 %679 = OpFNegate %678 
                                         f32 %680 = OpFAdd %679 %113 
                                                      OpStore %69 %680 
                                         f32 %681 = OpLoad %27 
                                         f32 %682 = OpExtInst %1 4 %681 
                                         f32 %683 = OpLoad %69 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpLoad %628 
                                         f32 %686 = OpFAdd %684 %685 
                                                      OpStore %293 %686 
                                Private f32* %687 = OpAccessChain %35 %199 
                                         f32 %688 = OpLoad %687 
                                         f32 %689 = OpLoad %69 
                                         f32 %690 = OpFMul %688 %689 
                                         f32 %691 = OpLoad %628 
                                         f32 %692 = OpFAdd %690 %691 
                                                      OpStore %69 %692 
                                         f32 %693 = OpLoad %27 
                                         f32 %694 = OpExtInst %1 4 %693 
                                         f32 %695 = OpLoad %69 
                                         f32 %696 = OpFMul %694 %695 
                                                      OpStore %27 %696 
                                Private f32* %697 = OpAccessChain %35 %199 
                                         f32 %698 = OpLoad %697 
                                         f32 %699 = OpLoad %293 
                                         f32 %700 = OpFMul %698 %699 
                                         f32 %701 = OpLoad %27 
                                         f32 %702 = OpFAdd %700 %701 
                                                      OpStore %27 %702 
                                         f32 %703 = OpLoad %27 
                                         f32 %705 = OpFAdd %703 %704 
                                                      OpStore %27 %705 
                                         f32 %707 = OpLoad %27 
                                         f32 %708 = OpFDiv %706 %707 
                                                      OpStore %27 %708 
                                         f32 %709 = OpLoad %628 
                                         f32 %710 = OpLoad %628 
                                         f32 %711 = OpFMul %709 %710 
                                                      OpStore %69 %711 
                                         f32 %712 = OpLoad %591 
                                         f32 %713 = OpLoad %69 
                                         f32 %714 = OpFMul %712 %713 
                                         f32 %715 = OpLoad %591 
                                         f32 %716 = OpFNegate %715 
                                         f32 %717 = OpFAdd %714 %716 
                                                      OpStore %293 %717 
                                         f32 %718 = OpLoad %293 
                                         f32 %719 = OpLoad %591 
                                         f32 %720 = OpFMul %718 %719 
                                         f32 %721 = OpFAdd %720 %113 
                                                      OpStore %591 %721 
                                         f32 %722 = OpLoad %69 
                                         f32 %724 = OpFMul %722 %723 
                                                      OpStore %69 %724 
                                         f32 %725 = OpLoad %591 
                                         f32 %726 = OpLoad %591 
                                         f32 %727 = OpFMul %725 %726 
                                         f32 %729 = OpFAdd %727 %728 
                                                      OpStore %591 %729 
                                         f32 %730 = OpLoad %69 
                                         f32 %731 = OpLoad %591 
                                         f32 %732 = OpFDiv %730 %731 
                                                      OpStore %591 %732 
                                         f32 %733 = OpLoad %27 
                                         f32 %734 = OpLoad %591 
                                         f32 %735 = OpFMul %733 %734 
                                Private f32* %736 = OpAccessChain %610 %226 
                                                      OpStore %736 %735 
                                       f32_4 %737 = OpLoad %35 
                                       f32_2 %738 = OpVectorShuffle %737 %737 0 0 
                                       f32_3 %739 = OpLoad %610 
                                       f32_2 %740 = OpVectorShuffle %739 %739 0 2 
                                       f32_2 %741 = OpFMul %738 %740 
                                       f32_3 %742 = OpLoad %610 
                                       f32_3 %743 = OpVectorShuffle %742 %741 3 1 4 
                                                      OpStore %610 %743 
                                Private f32* %744 = OpAccessChain %610 %226 
                                         f32 %745 = OpLoad %744 
                                         f32 %747 = OpFMul %745 %746 
                                                      OpStore %27 %747 
                                         f32 %748 = OpLoad %27 
                                         f32 %749 = OpExtInst %1 40 %748 %140 
                                                      OpStore %27 %749 
                                         f32 %750 = OpLoad %628 
                                         f32 %751 = OpLoad %628 
                                         f32 %752 = OpFMul %750 %751 
                                         f32 %753 = OpFAdd %752 %113 
                                                      OpStore %628 %753 
                                         f32 %754 = OpLoad %628 
                                         f32 %755 = OpFDiv %113 %754 
                                                      OpStore %628 %755 
                                       f32_4 %756 = OpLoad %43 
                                       f32_3 %757 = OpVectorShuffle %756 %756 0 1 2 
                                       f32_4 %758 = OpLoad %43 
                                       f32_3 %759 = OpVectorShuffle %758 %758 0 1 2 
                                         f32 %760 = OpDot %757 %759 
                                Private f32* %761 = OpAccessChain %35 %199 
                                                      OpStore %761 %760 
                                Private f32* %763 = OpAccessChain %35 %199 
                                         f32 %764 = OpLoad %763 
                                        bool %765 = OpFOrdNotEqual %764 %140 
                                                      OpStore %762 %765 
                                        bool %766 = OpLoad %762 
                                         f32 %767 = OpSelect %766 %113 %140 
                                Private f32* %768 = OpAccessChain %35 %199 
                                                      OpStore %768 %767 
                                         f32 %769 = OpLoad %27 
                                Private f32* %770 = OpAccessChain %35 %199 
                                         f32 %771 = OpLoad %770 
                                         f32 %772 = OpFMul %769 %771 
                                                      OpStore %27 %772 
                                         f32 %773 = OpLoad %115 
                                         f32 %774 = OpFNegate %773 
                                Uniform f32* %775 = OpAccessChain %17 %109 
                                         f32 %776 = OpLoad %775 
                                         f32 %777 = OpFAdd %774 %776 
                                Private f32* %778 = OpAccessChain %35 %199 
                                                      OpStore %778 %777 
                                Private f32* %779 = OpAccessChain %35 %199 
                                         f32 %780 = OpLoad %779 
                                         f32 %781 = OpFAdd %780 %113 
                                Private f32* %782 = OpAccessChain %35 %199 
                                                      OpStore %782 %781 
                                Private f32* %783 = OpAccessChain %35 %199 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpExtInst %1 43 %784 %140 %113 
                                Private f32* %786 = OpAccessChain %35 %199 
                                                      OpStore %786 %785 
                                       f32_3 %787 = OpLoad %610 
                                       f32_3 %788 = OpVectorShuffle %787 %787 0 0 0 
                              Uniform f32_4* %790 = OpAccessChain %17 %789 
                                       f32_4 %791 = OpLoad %790 
                                       f32_3 %792 = OpVectorShuffle %791 %791 0 1 2 
                                       f32_3 %793 = OpFMul %788 %792 
                                       f32_4 %794 = OpLoad %125 
                                       f32_4 %795 = OpVectorShuffle %794 %793 4 5 6 3 
                                                      OpStore %125 %795 
                                         f32 %796 = OpLoad %27 
                                       f32_3 %797 = OpCompositeConstruct %796 %796 %796 
                              Uniform f32_4* %798 = OpAccessChain %17 %789 
                                       f32_4 %799 = OpLoad %798 
                                       f32_3 %800 = OpVectorShuffle %799 %799 0 1 2 
                                       f32_3 %801 = OpFMul %797 %800 
                                       f32_4 %802 = OpLoad %155 
                                       f32_4 %803 = OpVectorShuffle %802 %801 4 5 6 3 
                                                      OpStore %155 %803 
                                Private f32* %804 = OpAccessChain %9 %199 
                                         f32 %805 = OpLoad %804 
                                         f32 %806 = OpFNegate %805 
                                         f32 %807 = OpFAdd %806 %113 
                                Private f32* %808 = OpAccessChain %9 %199 
                                                      OpStore %808 %807 
                                Private f32* %809 = OpAccessChain %9 %199 
                                         f32 %810 = OpLoad %809 
                                Private f32* %811 = OpAccessChain %9 %199 
                                         f32 %812 = OpLoad %811 
                                         f32 %813 = OpFMul %810 %812 
                                Private f32* %814 = OpAccessChain %610 %199 
                                                      OpStore %814 %813 
                                Private f32* %815 = OpAccessChain %610 %199 
                                         f32 %816 = OpLoad %815 
                                Private f32* %817 = OpAccessChain %610 %199 
                                         f32 %818 = OpLoad %817 
                                         f32 %819 = OpFMul %816 %818 
                                Private f32* %820 = OpAccessChain %610 %199 
                                                      OpStore %820 %819 
                                Private f32* %821 = OpAccessChain %9 %199 
                                         f32 %822 = OpLoad %821 
                                Private f32* %823 = OpAccessChain %610 %199 
                                         f32 %824 = OpLoad %823 
                                         f32 %825 = OpFMul %822 %824 
                                Private f32* %826 = OpAccessChain %9 %199 
                                                      OpStore %826 %825 
                                       f32_4 %827 = OpLoad %43 
                                       f32_3 %828 = OpVectorShuffle %827 %827 0 1 2 
                                       f32_3 %829 = OpFNegate %828 
                                       f32_3 %831 = OpFAdd %829 %830 
                                                      OpStore %175 %831 
                                       f32_3 %832 = OpLoad %175 
                                       f32_4 %833 = OpLoad %9 
                                       f32_3 %834 = OpVectorShuffle %833 %833 0 0 0 
                                       f32_3 %835 = OpFMul %832 %834 
                                       f32_4 %836 = OpLoad %43 
                                       f32_3 %837 = OpVectorShuffle %836 %836 0 1 2 
                                       f32_3 %838 = OpFAdd %835 %837 
                                       f32_4 %839 = OpLoad %9 
                                       f32_4 %840 = OpVectorShuffle %839 %838 4 5 2 6 
                                                      OpStore %9 %840 
                                       f32_4 %841 = OpLoad %9 
                                       f32_3 %842 = OpVectorShuffle %841 %841 0 1 3 
                                       f32_4 %843 = OpLoad %155 
                                       f32_3 %844 = OpVectorShuffle %843 %843 0 1 2 
                                       f32_3 %845 = OpFMul %842 %844 
                                       f32_4 %846 = OpLoad %9 
                                       f32_4 %847 = OpVectorShuffle %846 %845 4 5 2 6 
                                                      OpStore %9 %847 
                                       f32_3 %848 = OpLoad %60 
                                       f32_4 %849 = OpLoad %125 
                                       f32_3 %850 = OpVectorShuffle %849 %849 0 1 2 
                                       f32_3 %851 = OpFMul %848 %850 
                                       f32_4 %852 = OpLoad %9 
                                       f32_3 %853 = OpVectorShuffle %852 %852 0 1 3 
                                       f32_3 %854 = OpFAdd %851 %853 
                                       f32_4 %855 = OpLoad %9 
                                       f32_4 %856 = OpVectorShuffle %855 %854 4 5 2 6 
                                                      OpStore %9 %856 
                                       f32_3 %857 = OpLoad %163 
                                         f32 %858 = OpLoad %628 
                                       f32_3 %859 = OpCompositeConstruct %858 %858 %858 
                                       f32_3 %860 = OpFMul %857 %859 
                                                      OpStore %60 %860 
                                       f32_4 %861 = OpLoad %43 
                                       f32_3 %862 = OpVectorShuffle %861 %861 0 1 2 
                                       f32_3 %863 = OpFNegate %862 
                                       f32_4 %864 = OpLoad %35 
                                       f32_3 %865 = OpVectorShuffle %864 %864 0 0 0 
                                       f32_3 %866 = OpFAdd %863 %865 
                                       f32_4 %867 = OpLoad %35 
                                       f32_4 %868 = OpVectorShuffle %867 %866 4 5 2 6 
                                                      OpStore %35 %868 
                                         f32 %869 = OpLoad %633 
                                       f32_3 %870 = OpCompositeConstruct %869 %869 %869 
                                       f32_4 %871 = OpLoad %35 
                                       f32_3 %872 = OpVectorShuffle %871 %871 0 1 3 
                                       f32_3 %873 = OpFMul %870 %872 
                                       f32_4 %874 = OpLoad %43 
                                       f32_3 %875 = OpVectorShuffle %874 %874 0 1 2 
                                       f32_3 %876 = OpFAdd %873 %875 
                                       f32_4 %877 = OpLoad %35 
                                       f32_4 %878 = OpVectorShuffle %877 %876 4 5 6 3 
                                                      OpStore %35 %878 
                                       f32_3 %879 = OpLoad %60 
                                       f32_4 %880 = OpLoad %35 
                                       f32_3 %881 = OpVectorShuffle %880 %880 0 1 2 
                                       f32_3 %882 = OpFMul %879 %881 
                                       f32_4 %883 = OpLoad %9 
                                       f32_3 %884 = OpVectorShuffle %883 %883 0 1 3 
                                       f32_3 %885 = OpFAdd %882 %884 
                                       f32_4 %886 = OpLoad %9 
                                       f32_4 %887 = OpVectorShuffle %886 %885 4 5 6 3 
                                                      OpStore %9 %887 
                                       f32_4 %888 = OpLoad %81 
                                       f32_3 %889 = OpVectorShuffle %888 %888 0 1 2 
                                Uniform f32* %891 = OpAccessChain %17 %890 
                                         f32 %892 = OpLoad %891 
                                Uniform f32* %893 = OpAccessChain %17 %890 
                                         f32 %894 = OpLoad %893 
                                Uniform f32* %895 = OpAccessChain %17 %890 
                                         f32 %896 = OpLoad %895 
                                       f32_3 %897 = OpCompositeConstruct %892 %894 %896 
                                         f32 %898 = OpCompositeExtract %897 0 
                                         f32 %899 = OpCompositeExtract %897 1 
                                         f32 %900 = OpCompositeExtract %897 2 
                                       f32_3 %901 = OpCompositeConstruct %898 %899 %900 
                                       f32_3 %902 = OpFMul %889 %901 
                                       f32_4 %903 = OpLoad %9 
                                       f32_3 %904 = OpVectorShuffle %903 %903 0 1 2 
                                       f32_3 %905 = OpFAdd %902 %904 
                                       f32_4 %906 = OpLoad %9 
                                       f32_4 %907 = OpVectorShuffle %906 %905 4 5 6 3 
                                                      OpStore %9 %907 
                                         f32 %910 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %912 = OpAccessChain %17 %911 %213 
                                         f32 %913 = OpLoad %912 
                                         f32 %914 = OpFDiv %910 %913 
                                                      OpStore %27 %914 
                                         f32 %915 = OpLoad %27 
                                         f32 %916 = OpFNegate %915 
                                         f32 %917 = OpFAdd %916 %113 
                                                      OpStore %27 %917 
                                         f32 %918 = OpLoad %27 
                                Uniform f32* %919 = OpAccessChain %17 %911 %226 
                                         f32 %920 = OpLoad %919 
                                         f32 %921 = OpFMul %918 %920 
                                                      OpStore %27 %921 
                                         f32 %922 = OpLoad %27 
                                         f32 %923 = OpExtInst %1 40 %922 %140 
                                                      OpStore %27 %923 
                                         f32 %924 = OpLoad %27 
                                Uniform f32* %926 = OpAccessChain %17 %925 %226 
                                         f32 %927 = OpLoad %926 
                                         f32 %928 = OpFMul %924 %927 
                                Uniform f32* %929 = OpAccessChain %17 %925 %79 
                                         f32 %930 = OpLoad %929 
                                         f32 %931 = OpFAdd %928 %930 
                                                      OpStore %27 %931 
                                         f32 %932 = OpLoad %27 
                                         f32 %933 = OpExtInst %1 43 %932 %140 %113 
                                                      OpStore %27 %933 
                                       f32_4 %934 = OpLoad %9 
                                       f32_3 %935 = OpVectorShuffle %934 %934 0 1 2 
                              Uniform f32_4* %937 = OpAccessChain %17 %936 
                                       f32_4 %938 = OpLoad %937 
                                       f32_3 %939 = OpVectorShuffle %938 %938 0 1 2 
                                       f32_3 %940 = OpFNegate %939 
                                       f32_3 %941 = OpFAdd %935 %940 
                                       f32_4 %942 = OpLoad %9 
                                       f32_4 %943 = OpVectorShuffle %942 %941 4 5 6 3 
                                                      OpStore %9 %943 
                                         f32 %944 = OpLoad %27 
                                       f32_3 %945 = OpCompositeConstruct %944 %944 %944 
                                       f32_4 %946 = OpLoad %9 
                                       f32_3 %947 = OpVectorShuffle %946 %946 0 1 2 
                                       f32_3 %948 = OpFMul %945 %947 
                              Uniform f32_4* %949 = OpAccessChain %17 %936 
                                       f32_4 %950 = OpLoad %949 
                                       f32_3 %951 = OpVectorShuffle %950 %950 0 1 2 
                                       f32_3 %952 = OpFAdd %948 %951 
                                       f32_4 %953 = OpLoad %97 
                                       f32_4 %954 = OpVectorShuffle %953 %952 4 5 6 3 
                                                      OpStore %97 %954 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec2 u_xlat4;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat4.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat0.xy = (-u_xlat0.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat4.xy;
    u_xlat0.xy = u_xlat0.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat0.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	float _Emission;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    u_xlat4 = u_xlat4.wwww * _RedDotColor;
    u_xlat4.xyz = u_xlat4.xyz * _RedDotColor.www;
    SV_Target0.w = u_xlat2.w * _Color.w + u_xlat4.w;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat41 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat41 = u_xlat41 + u_xlat41;
    u_xlat5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat41)) + (-u_xlat1.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz;
    u_xlat6.w = 1.0;
    u_xlat7.x = dot(unity_SHAr, u_xlat6);
    u_xlat7.y = dot(unity_SHAg, u_xlat6);
    u_xlat7.z = dot(unity_SHAb, u_xlat6);
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat41 = inversesqrt(u_xlat41);
        u_xlat7.xyz = vec3(u_xlat41) * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat41 = min(u_xlat8.y, u_xlat8.x);
        u_xlat41 = min(u_xlat8.z, u_xlat41);
        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat41) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    }
    u_xlat41 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat41 = u_xlat40 * u_xlat41;
    u_xlat41 = u_xlat41 * 6.0;
    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat41);
    u_xlat42 = u_xlat7.w + -1.0;
    u_xlat42 = unity_SpecCube0_HDR.w * u_xlat42 + 1.0;
    u_xlat42 = log2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat5.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        }
        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat41);
        u_xlat41 = u_xlat5.w + -1.0;
        u_xlat41 = unity_SpecCube1_HDR.w * u_xlat41 + 1.0;
        u_xlat41 = log2(u_xlat41);
        u_xlat41 = u_xlat41 * unity_SpecCube1_HDR.y;
        u_xlat41 = exp2(u_xlat41);
        u_xlat41 = u_xlat41 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat41);
        u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    }
    u_xlat41 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat5.xyz = vec3(u_xlat41) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat41 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat41) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat40));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat42 = u_xlat27 * u_xlat27;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat27 = u_xlat27 * u_xlat42;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat40 * u_xlat40;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat40 = (-u_xlat26) + 1.0;
    u_xlat42 = abs(u_xlat39) * u_xlat40 + u_xlat26;
    u_xlat40 = u_xlat1.x * u_xlat40 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat40;
    u_xlat39 = u_xlat1.x * u_xlat42 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat40 = u_xlat26 * u_xlat26;
    u_xlat42 = u_xlat14 * u_xlat40 + (-u_xlat14);
    u_xlat14 = u_xlat42 * u_xlat14 + 1.0;
    u_xlat40 = u_xlat40 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat40 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat13.z = u_xlat39 * 3.14159274;
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat39 = max(u_xlat13.z, 0.0);
    u_xlat26 = u_xlat26 * u_xlat26 + 1.0;
    u_xlat26 = float(1.0) / u_xlat26;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat1.x = (-u_xlat41) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat6.xyz = vec3(u_xlat39) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat7.xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat5.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat4.xyz * vec3(vec3(_Emission, _Emission, _Emission)) + u_xlat0.xyz;
    u_xlat39 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 330
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %83 %88 %144 %220 %226 %227 %240 %275 %311 %322 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpMemberDecorate %20 7 Offset 20 
                                                      OpMemberDecorate %20 8 Offset 20 
                                                      OpMemberDecorate %20 9 Offset 20 
                                                      OpMemberDecorate %20 10 Offset 20 
                                                      OpMemberDecorate %20 11 Offset 20 
                                                      OpMemberDecorate %20 12 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %81 0 BuiltIn 81 
                                                      OpMemberDecorate %81 1 BuiltIn 81 
                                                      OpMemberDecorate %81 2 BuiltIn 81 
                                                      OpDecorate %81 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 88 
                                                      OpDecorate vs_TEXCOORD2 Location 144 
                                                      OpDecorate vs_TEXCOORD3 Location 220 
                                                      OpDecorate vs_TEXCOORD0 Location 226 
                                                      OpDecorate %227 Location 227 
                                                      OpDecorate %240 Location 240 
                                                      OpDecorate vs_TEXCOORD1 Location 275 
                                                      OpDecorate vs_TEXCOORD4 Location 311 
                                                      OpDecorate vs_TEXCOORD7 Location 322 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %6 %6 %6 %6 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 5 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          i32 %54 = OpConstant 7 
                                          u32 %79 = OpConstant 1 
                                              %80 = OpTypeArray %6 %79 
                                              %81 = OpTypeStruct %7 %6 %80 
                                              %82 = OpTypePointer Output %81 
         Output struct {f32_4; f32; f32[1];}* %83 = OpVariable Output 
                                              %85 = OpTypePointer Output %7 
                                              %87 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                          u32 %89 = OpConstant 2 
                                              %90 = OpTypePointer Private %6 
                                             %137 = OpTypePointer Uniform %14 
                                             %143 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %147 = OpTypeVector %6 2 
                                         i32 %150 = OpConstant 6 
                                             %179 = OpTypePointer Private %147 
                              Private f32_2* %180 = OpVariable Private 
                                         i32 %183 = OpConstant 10 
                                             %184 = OpTypePointer Uniform %6 
                                         i32 %187 = OpConstant 11 
                                         i32 %196 = OpConstant 9 
                                         i32 %212 = OpConstant 8 
                                             %219 = OpTypePointer Output %147 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %223 = OpConstant 3.674022E-40 
                                       f32_2 %224 = OpConstantComposite %223 %223 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %227 = OpVariable Input 
                                         i32 %230 = OpConstant 12 
                                             %239 = OpTypePointer Input %14 
                                Input f32_3* %240 = OpVariable Input 
                                         u32 %246 = OpConstant 0 
                                Private f32* %260 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %312 = OpConstant 4 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                         f32 %323 = OpConstant 3.674022E-40 
                                       f32_4 %324 = OpConstantComposite %323 %323 %323 %323 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpLoad %11 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
                                        f32_4 %35 = OpFMul %32 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_4 %41 = OpLoad %11 
                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
                                        f32_4 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %9 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %55 = OpAccessChain %22 %54 %25 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpFMul %53 %56 
                                                      OpStore %51 %57 
                               Uniform f32_4* %58 = OpAccessChain %22 %54 %30 
                                        f32_4 %59 = OpLoad %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                                        f32_4 %62 = OpFMul %59 %61 
                                        f32_4 %63 = OpLoad %51 
                                        f32_4 %64 = OpFAdd %62 %63 
                                                      OpStore %51 %64 
                               Uniform f32_4* %65 = OpAccessChain %22 %54 %38 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %51 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %51 %71 
                               Uniform f32_4* %72 = OpAccessChain %22 %54 %47 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %74 3 3 3 3 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %51 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %9 %78 
                                        f32_4 %84 = OpLoad %9 
                                Output f32_4* %86 = OpAccessChain %83 %30 
                                                      OpStore %86 %84 
                                 Private f32* %91 = OpAccessChain %9 %89 
                                          f32 %92 = OpLoad %91 
                                                      OpStore vs_TEXCOORD5 %92 
                                        f32_4 %93 = OpLoad %11 
                                        f32_3 %94 = OpVectorShuffle %93 %93 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %22 %24 %25 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFMul %94 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %9 %100 
                              Uniform f32_4* %101 = OpAccessChain %22 %24 %30 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %11 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 0 0 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %9 %111 
                              Uniform f32_4* %112 = OpAccessChain %22 %24 %38 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_4 %115 = OpLoad %11 
                                       f32_3 %116 = OpVectorShuffle %115 %115 2 2 2 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %9 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %9 %122 
                              Uniform f32_4* %123 = OpAccessChain %22 %24 %47 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %11 
                                       f32_3 %127 = OpVectorShuffle %126 %126 3 3 3 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %22 %30 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                       f32_4 %141 = OpLoad %51 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %51 %142 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore vs_TEXCOORD2 %146 
                                       f32_4 %148 = OpLoad %51 
                                       f32_2 %149 = OpVectorShuffle %148 %148 1 1 
                              Uniform f32_4* %151 = OpAccessChain %22 %150 %25 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_2 %154 = OpFMul %149 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 2 3 
                                                      OpStore %9 %156 
                              Uniform f32_4* %157 = OpAccessChain %22 %150 %30 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_4 %160 = OpLoad %51 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 0 
                                       f32_2 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_2 %165 = OpFAdd %162 %164 
                                       f32_4 %166 = OpLoad %9 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 2 3 
                                                      OpStore %9 %167 
                              Uniform f32_4* %168 = OpAccessChain %22 %150 %38 
                                       f32_4 %169 = OpLoad %168 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                       f32_4 %171 = OpLoad %51 
                                       f32_2 %172 = OpVectorShuffle %171 %171 2 2 
                                       f32_2 %173 = OpFMul %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 1 
                                       f32_2 %176 = OpFAdd %173 %175 
                                       f32_4 %177 = OpLoad %9 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 2 3 
                                                      OpStore %9 %178 
                                       f32_4 %181 = OpLoad %11 
                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
                                Uniform f32* %185 = OpAccessChain %22 %183 
                                         f32 %186 = OpLoad %185 
                                Uniform f32* %188 = OpAccessChain %22 %187 
                                         f32 %189 = OpLoad %188 
                                       f32_2 %190 = OpCompositeConstruct %186 %189 
                                       f32_2 %191 = OpFNegate %190 
                                       f32_2 %192 = OpFAdd %182 %191 
                                                      OpStore %180 %192 
                                       f32_4 %193 = OpLoad %9 
                                       f32_2 %194 = OpVectorShuffle %193 %193 0 1 
                                       f32_2 %195 = OpFNegate %194 
                                Uniform f32* %197 = OpAccessChain %22 %196 
                                         f32 %198 = OpLoad %197 
                                Uniform f32* %199 = OpAccessChain %22 %196 
                                         f32 %200 = OpLoad %199 
                                       f32_2 %201 = OpCompositeConstruct %198 %200 
                                         f32 %202 = OpCompositeExtract %201 0 
                                         f32 %203 = OpCompositeExtract %201 1 
                                       f32_2 %204 = OpCompositeConstruct %202 %203 
                                       f32_2 %205 = OpFMul %195 %204 
                                       f32_2 %206 = OpLoad %180 
                                       f32_2 %207 = OpFAdd %205 %206 
                                       f32_4 %208 = OpLoad %9 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 2 3 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                Uniform f32* %213 = OpAccessChain %22 %212 
                                         f32 %214 = OpLoad %213 
                                       f32_2 %215 = OpCompositeConstruct %214 %214 
                                       f32_2 %216 = OpFDiv %211 %215 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 2 3 
                                                      OpStore %9 %218 
                                       f32_4 %221 = OpLoad %9 
                                       f32_2 %222 = OpVectorShuffle %221 %221 0 1 
                                       f32_2 %225 = OpFAdd %222 %224 
                                                      OpStore vs_TEXCOORD3 %225 
                                       f32_4 %228 = OpLoad %227 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                              Uniform f32_4* %231 = OpAccessChain %22 %230 
                                       f32_4 %232 = OpLoad %231 
                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
                                       f32_2 %234 = OpFMul %229 %233 
                              Uniform f32_4* %235 = OpAccessChain %22 %230 
                                       f32_4 %236 = OpLoad %235 
                                       f32_2 %237 = OpVectorShuffle %236 %236 2 3 
                                       f32_2 %238 = OpFAdd %234 %237 
                                                      OpStore vs_TEXCOORD0 %238 
                                       f32_3 %241 = OpLoad %240 
                              Uniform f32_4* %242 = OpAccessChain %22 %150 %30 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                         f32 %245 = OpDot %241 %244 
                                Private f32* %247 = OpAccessChain %9 %246 
                                                      OpStore %247 %245 
                                       f32_3 %248 = OpLoad %240 
                              Uniform f32_4* %249 = OpAccessChain %22 %150 %25 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpDot %248 %251 
                                Private f32* %253 = OpAccessChain %9 %79 
                                                      OpStore %253 %252 
                                       f32_3 %254 = OpLoad %240 
                              Uniform f32_4* %255 = OpAccessChain %22 %150 %38 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %259 = OpAccessChain %9 %89 
                                                      OpStore %259 %258 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_4 %263 = OpLoad %9 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                         f32 %265 = OpDot %262 %264 
                                                      OpStore %260 %265 
                                         f32 %266 = OpLoad %260 
                                         f32 %267 = OpExtInst %1 32 %266 
                                                      OpStore %260 %267 
                                         f32 %268 = OpLoad %260 
                                       f32_3 %269 = OpCompositeConstruct %268 %268 %268 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %9 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                                      OpStore vs_TEXCOORD1 %277 
                                Private f32* %278 = OpAccessChain %9 %79 
                                         f32 %279 = OpLoad %278 
                                Private f32* %280 = OpAccessChain %9 %79 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpFMul %279 %281 
                                                      OpStore %260 %282 
                                Private f32* %283 = OpAccessChain %9 %246 
                                         f32 %284 = OpLoad %283 
                                Private f32* %285 = OpAccessChain %9 %246 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                         f32 %288 = OpLoad %260 
                                         f32 %289 = OpFNegate %288 
                                         f32 %290 = OpFAdd %287 %289 
                                                      OpStore %260 %290 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpVectorShuffle %291 %291 1 2 2 0 
                                       f32_4 %293 = OpLoad %9 
                                       f32_4 %294 = OpVectorShuffle %293 %293 0 1 2 2 
                                       f32_4 %295 = OpFMul %292 %294 
                                                      OpStore %51 %295 
                              Uniform f32_4* %296 = OpAccessChain %22 %25 
                                       f32_4 %297 = OpLoad %296 
                                       f32_4 %298 = OpLoad %51 
                                         f32 %299 = OpDot %297 %298 
                                Private f32* %300 = OpAccessChain %9 %246 
                                                      OpStore %300 %299 
                              Uniform f32_4* %301 = OpAccessChain %22 %38 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %51 
                                         f32 %304 = OpDot %302 %303 
                                Private f32* %305 = OpAccessChain %9 %79 
                                                      OpStore %305 %304 
                              Uniform f32_4* %306 = OpAccessChain %22 %47 
                                       f32_4 %307 = OpLoad %306 
                                       f32_4 %308 = OpLoad %51 
                                         f32 %309 = OpDot %307 %308 
                                Private f32* %310 = OpAccessChain %9 %89 
                                                      OpStore %310 %309 
                              Uniform f32_4* %313 = OpAccessChain %22 %312 
                                       f32_4 %314 = OpLoad %313 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                         f32 %316 = OpLoad %260 
                                       f32_3 %317 = OpCompositeConstruct %316 %316 %316 
                                       f32_3 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %9 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFAdd %318 %320 
                                                      OpStore vs_TEXCOORD4 %321 
                                                      OpStore vs_TEXCOORD7 %324 
                                 Output f32* %325 = OpAccessChain %83 %30 %79 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFNegate %326 
                                 Output f32* %328 = OpAccessChain %83 %30 %79 
                                                      OpStore %328 %327 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 998
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %56 %75 %97 %119 %166 %951 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpMemberDecorate %15 18 Offset 15 
                                                      OpMemberDecorate %15 19 Offset 15 
                                                      OpMemberDecorate %15 20 Offset 15 
                                                      OpMemberDecorate %15 21 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate vs_TEXCOORD0 Location 56 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate vs_TEXCOORD3 Location 75 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate vs_TEXCOORD1 Location 119 
                                                      OpDecorate vs_TEXCOORD4 Location 166 
                                                      OpDecorate %319 DescriptorSet 319 
                                                      OpDecorate %319 Binding 319 
                                                      OpDecorate %321 DescriptorSet 321 
                                                      OpDecorate %321 Binding 321 
                                                      OpDecorate %474 DescriptorSet 474 
                                                      OpDecorate %474 Binding 474 
                                                      OpDecorate vs_TEXCOORD5 Location 951 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                               Private f32_4* %43 = OpVariable Private 
                                              %44 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %45 = OpTypePointer UniformConstant %44 
         UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
                                              %48 = OpTypeSampler 
                                              %49 = OpTypePointer UniformConstant %48 
                     UniformConstant sampler* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampledImage %44 
                                              %54 = OpTypeVector %6 2 
                                              %55 = OpTypePointer Input %54 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %59 = OpTypePointer Private %10 
                               Private f32_3* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 20 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                              %78 = OpTypeInt 32 0 
                                          u32 %79 = OpConstant 3 
                               Private f32_4* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 21 
                                              %96 = OpTypePointer Output %7 
                                Output f32_4* %97 = OpVariable Output 
                                             %100 = OpTypePointer Uniform %6 
                                             %107 = OpTypePointer Output %6 
                                         i32 %109 = OpConstant 17 
                                         f32 %113 = OpConstant 3.674022E-40 
                                Private f32* %115 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_4* %125 = OpVariable Private 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %143 = OpConstant 3 
                                         u32 %148 = OpConstant 0 
                                         i32 %150 = OpConstant 4 
                                         u32 %155 = OpConstant 1 
                                         i32 %157 = OpConstant 5 
                                         u32 %162 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                                         f32 %173 = OpConstant 3.674022E-40 
                                       f32_3 %174 = OpConstantComposite %173 %173 %173 
                                             %178 = OpTypeBool 
                                             %179 = OpTypePointer Private %178 
                               Private bool* %180 = OpVariable Private 
                                         i32 %181 = OpConstant 10 
                              Private f32_3* %202 = OpVariable Private 
                                         i32 %205 = OpConstant 8 
                              Private f32_3* %214 = OpVariable Private 
                                         i32 %217 = OpConstant 9 
                                             %226 = OpTypeVector %178 3 
                                             %227 = OpTypePointer Private %226 
                             Private bool_3* %228 = OpVariable Private 
                                       f32_4 %229 = OpConstantComposite %173 %173 %173 %173 
                                             %232 = OpTypeVector %178 4 
                                             %235 = OpTypePointer Function %10 
                                             %240 = OpTypePointer Function %6 
                                         f32 %307 = OpConstant 3.674022E-40 
                                         f32 %309 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                             %317 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %318 = OpTypePointer UniformConstant %317 
      UniformConstant read_only TextureCube* %319 = OpVariable UniformConstant 
                    UniformConstant sampler* %321 = OpVariable UniformConstant 
                                             %323 = OpTypeSampledImage %317 
                                Private f32* %329 = OpVariable Private 
                                         f32 %332 = OpConstant 3.674022E-40 
                                         i32 %334 = OpConstant 11 
                               Private bool* %357 = OpVariable Private 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         i32 %365 = OpConstant 14 
                                Private f32* %372 = OpVariable Private 
                              Private f32_3* %385 = OpVariable Private 
                                         i32 %388 = OpConstant 12 
                              Private f32_3* %396 = OpVariable Private 
                                         i32 %399 = OpConstant 13 
                             Private bool_3* %407 = OpVariable Private 
      UniformConstant read_only TextureCube* %474 = OpVariable UniformConstant 
                                         i32 %485 = OpConstant 15 
                                         f32 %547 = OpConstant 3.674022E-40 
                                       f32_3 %548 = OpConstantComposite %547 %547 %547 
                                         i32 %552 = OpConstant 18 
                                         f32 %567 = OpConstant 3.674022E-40 
                                       f32_3 %568 = OpConstantComposite %567 %567 %567 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         i32 %587 = OpConstant 2 
                                         f32 %600 = OpConstant 3.674022E-40 
                                Private f32* %627 = OpVariable Private 
                              Private f32_3* %646 = OpVariable Private 
                                         f32 %661 = OpConstant 3.674022E-40 
                                Private f32* %664 = OpVariable Private 
                                Private f32* %669 = OpVariable Private 
                                         f32 %712 = OpConstant 3.674022E-40 
                                         f32 %740 = OpConstant 3.674022E-40 
                                         f32 %742 = OpConstant 3.674022E-40 
                                         f32 %759 = OpConstant 3.674022E-40 
                                         f32 %764 = OpConstant 3.674022E-40 
                                         f32 %782 = OpConstant 3.674022E-40 
                               Private bool* %798 = OpVariable Private 
                                         i32 %823 = OpConstant 16 
                                       f32_3 %869 = OpConstantComposite %113 %113 %113 
                                         i32 %932 = OpConstant 19 
                                             %950 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         i32 %953 = OpConstant 1 
                                         i32 %967 = OpConstant 7 
                                         i32 %978 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %236 = OpVariable Function 
                               Function f32* %241 = OpVariable Function 
                               Function f32* %253 = OpVariable Function 
                               Function f32* %265 = OpVariable Function 
                             Function f32_3* %412 = OpVariable Function 
                               Function f32* %416 = OpVariable Function 
                               Function f32* %428 = OpVariable Function 
                               Function f32* %440 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %47 = OpLoad %46 
                                      sampler %51 = OpLoad %50 
                   read_only Texture2DSampled %53 = OpSampledImage %47 %51 
                                        f32_2 %57 = OpLoad vs_TEXCOORD0 
                                        f32_4 %58 = OpImageSampleImplicitLod %53 %57 
                                                      OpStore %43 %58 
                                        f32_4 %61 = OpLoad %43 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %60 %68 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_2 %76 = OpLoad vs_TEXCOORD3 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                          f32 %80 = OpCompositeExtract %77 3 
                                                      OpStore %69 %80 
                                          f32 %82 = OpLoad %69 
                                        f32_4 %83 = OpCompositeConstruct %82 %82 %82 %82 
                               Uniform f32_4* %85 = OpAccessChain %17 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFMul %83 %86 
                                                      OpStore %81 %87 
                                        f32_4 %88 = OpLoad %81 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                               Uniform f32_4* %90 = OpAccessChain %17 %84 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 3 3 3 
                                        f32_3 %93 = OpFMul %89 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %81 %95 
                                 Private f32* %98 = OpAccessChain %43 %79 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %17 %63 %79 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %99 %102 
                                Private f32* %104 = OpAccessChain %81 %79 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFAdd %103 %105 
                                 Output f32* %108 = OpAccessChain %97 %79 
                                                      OpStore %108 %106 
                                Uniform f32* %110 = OpAccessChain %17 %109 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                         f32 %114 = OpFAdd %112 %113 
                                                      OpStore %69 %114 
                                       f32_4 %116 = OpLoad %35 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFNegate %117 
                                       f32_3 %120 = OpLoad vs_TEXCOORD1 
                                         f32 %121 = OpDot %118 %120 
                                                      OpStore %115 %121 
                                         f32 %122 = OpLoad %115 
                                         f32 %123 = OpLoad %115 
                                         f32 %124 = OpFAdd %122 %123 
                                                      OpStore %115 %124 
                                       f32_3 %126 = OpLoad vs_TEXCOORD1 
                                         f32 %127 = OpLoad %115 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFMul %126 %129 
                                       f32_4 %131 = OpLoad %35 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %130 %133 
                                       f32_4 %135 = OpLoad %125 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %125 %136 
                                       f32_3 %138 = OpLoad vs_TEXCOORD1 
                                       f32_4 %139 = OpLoad %137 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %137 %140 
                                Private f32* %141 = OpAccessChain %137 %79 
                                                      OpStore %141 %113 
                              Uniform f32_4* %144 = OpAccessChain %17 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpLoad %137 
                                         f32 %147 = OpDot %145 %146 
                                Private f32* %149 = OpAccessChain %142 %148 
                                                      OpStore %149 %147 
                              Uniform f32_4* %151 = OpAccessChain %17 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_4 %153 = OpLoad %137 
                                         f32 %154 = OpDot %152 %153 
                                Private f32* %156 = OpAccessChain %142 %155 
                                                      OpStore %156 %154 
                              Uniform f32_4* %158 = OpAccessChain %17 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpLoad %137 
                                         f32 %161 = OpDot %159 %160 
                                Private f32* %163 = OpAccessChain %142 %162 
                                                      OpStore %163 %161 
                                       f32_4 %164 = OpLoad %142 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %167 = OpLoad vs_TEXCOORD4 
                                       f32_3 %168 = OpFAdd %165 %167 
                                       f32_4 %169 = OpLoad %137 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %137 %170 
                                       f32_4 %171 = OpLoad %137 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %175 = OpExtInst %1 40 %172 %174 
                                       f32_4 %176 = OpLoad %137 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %137 %177 
                                Uniform f32* %182 = OpAccessChain %17 %181 %79 
                                         f32 %183 = OpLoad %182 
                                        bool %184 = OpFOrdLessThan %173 %183 
                                                      OpStore %180 %184 
                                        bool %185 = OpLoad %180 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %300 
                                             %186 = OpLabel 
                                       f32_4 %188 = OpLoad %125 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %125 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %189 %191 
                                                      OpStore %115 %192 
                                         f32 %193 = OpLoad %115 
                                         f32 %194 = OpExtInst %1 32 %193 
                                                      OpStore %115 %194 
                                         f32 %195 = OpLoad %115 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_4 %197 = OpLoad %125 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %142 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %142 %201 
                                       f32_3 %203 = OpLoad vs_TEXCOORD2 
                                       f32_3 %204 = OpFNegate %203 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFAdd %204 %208 
                                                      OpStore %202 %209 
                                       f32_3 %210 = OpLoad %202 
                                       f32_4 %211 = OpLoad %142 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFDiv %210 %212 
                                                      OpStore %202 %213 
                                       f32_3 %215 = OpLoad vs_TEXCOORD2 
                                       f32_3 %216 = OpFNegate %215 
                              Uniform f32_4* %218 = OpAccessChain %17 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFAdd %216 %220 
                                                      OpStore %214 %221 
                                       f32_3 %222 = OpLoad %214 
                                       f32_4 %223 = OpLoad %142 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_3 %225 = OpFDiv %222 %224 
                                                      OpStore %214 %225 
                                       f32_4 %230 = OpLoad %142 
                                       f32_4 %231 = OpVectorShuffle %230 %230 0 1 2 0 
                                      bool_4 %233 = OpFOrdLessThan %229 %231 
                                      bool_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                                      OpStore %228 %234 
                                       f32_3 %237 = OpLoad %202 
                                                      OpStore %236 %237 
                               Private bool* %238 = OpAccessChain %228 %148 
                                        bool %239 = OpLoad %238 
                                                      OpSelectionMerge %243 None 
                                                      OpBranchConditional %239 %242 %246 
                                             %242 = OpLabel 
                                Private f32* %244 = OpAccessChain %202 %148 
                                         f32 %245 = OpLoad %244 
                                                      OpStore %241 %245 
                                                      OpBranch %243 
                                             %246 = OpLabel 
                                Private f32* %247 = OpAccessChain %214 %148 
                                         f32 %248 = OpLoad %247 
                                                      OpStore %241 %248 
                                                      OpBranch %243 
                                             %243 = OpLabel 
                                         f32 %249 = OpLoad %241 
                               Function f32* %250 = OpAccessChain %236 %148 
                                                      OpStore %250 %249 
                               Private bool* %251 = OpAccessChain %228 %155 
                                        bool %252 = OpLoad %251 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %252 %254 %258 
                                             %254 = OpLabel 
                                Private f32* %256 = OpAccessChain %202 %155 
                                         f32 %257 = OpLoad %256 
                                                      OpStore %253 %257 
                                                      OpBranch %255 
                                             %258 = OpLabel 
                                Private f32* %259 = OpAccessChain %214 %155 
                                         f32 %260 = OpLoad %259 
                                                      OpStore %253 %260 
                                                      OpBranch %255 
                                             %255 = OpLabel 
                                         f32 %261 = OpLoad %253 
                               Function f32* %262 = OpAccessChain %236 %155 
                                                      OpStore %262 %261 
                               Private bool* %263 = OpAccessChain %228 %162 
                                        bool %264 = OpLoad %263 
                                                      OpSelectionMerge %267 None 
                                                      OpBranchConditional %264 %266 %270 
                                             %266 = OpLabel 
                                Private f32* %268 = OpAccessChain %202 %162 
                                         f32 %269 = OpLoad %268 
                                                      OpStore %265 %269 
                                                      OpBranch %267 
                                             %270 = OpLabel 
                                Private f32* %271 = OpAccessChain %214 %162 
                                         f32 %272 = OpLoad %271 
                                                      OpStore %265 %272 
                                                      OpBranch %267 
                                             %267 = OpLabel 
                                         f32 %273 = OpLoad %265 
                               Function f32* %274 = OpAccessChain %236 %162 
                                                      OpStore %274 %273 
                                       f32_3 %275 = OpLoad %236 
                                                      OpStore %202 %275 
                                Private f32* %276 = OpAccessChain %202 %155 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %202 %148 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpExtInst %1 37 %277 %279 
                                                      OpStore %115 %280 
                                Private f32* %281 = OpAccessChain %202 %162 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpLoad %115 
                                         f32 %284 = OpExtInst %1 37 %282 %283 
                                                      OpStore %115 %284 
                                       f32_3 %285 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %286 = OpAccessChain %17 %181 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFNegate %288 
                                       f32_3 %290 = OpFAdd %285 %289 
                                                      OpStore %202 %290 
                                       f32_4 %291 = OpLoad %142 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                         f32 %293 = OpLoad %115 
                                       f32_3 %294 = OpCompositeConstruct %293 %293 %293 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %202 
                                       f32_3 %297 = OpFAdd %295 %296 
                                       f32_4 %298 = OpLoad %142 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %142 %299 
                                                      OpBranch %187 
                                             %300 = OpLabel 
                                       f32_4 %301 = OpLoad %125 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %142 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %142 %304 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %305 = OpLoad %69 
                                         f32 %306 = OpFNegate %305 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %310 = OpFAdd %308 %309 
                                                      OpStore %115 %310 
                                         f32 %311 = OpLoad %69 
                                         f32 %312 = OpLoad %115 
                                         f32 %313 = OpFMul %311 %312 
                                                      OpStore %115 %313 
                                         f32 %314 = OpLoad %115 
                                         f32 %316 = OpFMul %314 %315 
                                                      OpStore %115 %316 
                       read_only TextureCube %320 = OpLoad %319 
                                     sampler %322 = OpLoad %321 
                read_only TextureCubeSampled %324 = OpSampledImage %320 %322 
                                       f32_4 %325 = OpLoad %142 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                         f32 %327 = OpLoad %115 
                                       f32_4 %328 = OpImageSampleExplicitLod %324 %326 Lod %7 
                                                      OpStore %142 %328 
                                Private f32* %330 = OpAccessChain %142 %79 
                                         f32 %331 = OpLoad %330 
                                         f32 %333 = OpFAdd %331 %332 
                                                      OpStore %329 %333 
                                Uniform f32* %335 = OpAccessChain %17 %334 %79 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpLoad %329 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpFAdd %338 %113 
                                                      OpStore %329 %339 
                                         f32 %340 = OpLoad %329 
                                         f32 %341 = OpExtInst %1 30 %340 
                                                      OpStore %329 %341 
                                         f32 %342 = OpLoad %329 
                                Uniform f32* %343 = OpAccessChain %17 %334 %155 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFMul %342 %344 
                                                      OpStore %329 %345 
                                         f32 %346 = OpLoad %329 
                                         f32 %347 = OpExtInst %1 29 %346 
                                                      OpStore %329 %347 
                                         f32 %348 = OpLoad %329 
                                Uniform f32* %349 = OpAccessChain %17 %334 %148 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %348 %350 
                                                      OpStore %329 %351 
                                       f32_4 %352 = OpLoad %142 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %354 = OpLoad %329 
                                       f32_3 %355 = OpCompositeConstruct %354 %354 %354 
                                       f32_3 %356 = OpFMul %353 %355 
                                                      OpStore %202 %356 
                                Uniform f32* %358 = OpAccessChain %17 %217 %79 
                                         f32 %359 = OpLoad %358 
                                        bool %361 = OpFOrdLessThan %359 %360 
                                                      OpStore %357 %361 
                                        bool %362 = OpLoad %357 
                                                      OpSelectionMerge %364 None 
                                                      OpBranchConditional %362 %363 %364 
                                             %363 = OpLabel 
                                Uniform f32* %366 = OpAccessChain %17 %365 %79 
                                         f32 %367 = OpLoad %366 
                                        bool %368 = OpFOrdLessThan %173 %367 
                                                      OpStore %357 %368 
                                        bool %369 = OpLoad %357 
                                                      OpSelectionMerge %371 None 
                                                      OpBranchConditional %369 %370 %371 
                                             %370 = OpLabel 
                                       f32_4 %373 = OpLoad %125 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_4 %375 = OpLoad %125 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                         f32 %377 = OpDot %374 %376 
                                                      OpStore %372 %377 
                                         f32 %378 = OpLoad %372 
                                         f32 %379 = OpExtInst %1 32 %378 
                                                      OpStore %372 %379 
                                         f32 %380 = OpLoad %372 
                                       f32_3 %381 = OpCompositeConstruct %380 %380 %380 
                                       f32_4 %382 = OpLoad %125 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFMul %381 %383 
                                                      OpStore %214 %384 
                                       f32_3 %386 = OpLoad vs_TEXCOORD2 
                                       f32_3 %387 = OpFNegate %386 
                              Uniform f32_4* %389 = OpAccessChain %17 %388 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %387 %391 
                                                      OpStore %385 %392 
                                       f32_3 %393 = OpLoad %385 
                                       f32_3 %394 = OpLoad %214 
                                       f32_3 %395 = OpFDiv %393 %394 
                                                      OpStore %385 %395 
                                       f32_3 %397 = OpLoad vs_TEXCOORD2 
                                       f32_3 %398 = OpFNegate %397 
                              Uniform f32_4* %400 = OpAccessChain %17 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %398 %402 
                                                      OpStore %396 %403 
                                       f32_3 %404 = OpLoad %396 
                                       f32_3 %405 = OpLoad %214 
                                       f32_3 %406 = OpFDiv %404 %405 
                                                      OpStore %396 %406 
                                       f32_3 %408 = OpLoad %214 
                                       f32_4 %409 = OpVectorShuffle %408 %408 0 1 2 0 
                                      bool_4 %410 = OpFOrdLessThan %229 %409 
                                      bool_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                                      OpStore %407 %411 
                                       f32_3 %413 = OpLoad %385 
                                                      OpStore %412 %413 
                               Private bool* %414 = OpAccessChain %407 %148 
                                        bool %415 = OpLoad %414 
                                                      OpSelectionMerge %418 None 
                                                      OpBranchConditional %415 %417 %421 
                                             %417 = OpLabel 
                                Private f32* %419 = OpAccessChain %385 %148 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %416 %420 
                                                      OpBranch %418 
                                             %421 = OpLabel 
                                Private f32* %422 = OpAccessChain %396 %148 
                                         f32 %423 = OpLoad %422 
                                                      OpStore %416 %423 
                                                      OpBranch %418 
                                             %418 = OpLabel 
                                         f32 %424 = OpLoad %416 
                               Function f32* %425 = OpAccessChain %412 %148 
                                                      OpStore %425 %424 
                               Private bool* %426 = OpAccessChain %407 %155 
                                        bool %427 = OpLoad %426 
                                                      OpSelectionMerge %430 None 
                                                      OpBranchConditional %427 %429 %433 
                                             %429 = OpLabel 
                                Private f32* %431 = OpAccessChain %385 %155 
                                         f32 %432 = OpLoad %431 
                                                      OpStore %428 %432 
                                                      OpBranch %430 
                                             %433 = OpLabel 
                                Private f32* %434 = OpAccessChain %396 %155 
                                         f32 %435 = OpLoad %434 
                                                      OpStore %428 %435 
                                                      OpBranch %430 
                                             %430 = OpLabel 
                                         f32 %436 = OpLoad %428 
                               Function f32* %437 = OpAccessChain %412 %155 
                                                      OpStore %437 %436 
                               Private bool* %438 = OpAccessChain %407 %162 
                                        bool %439 = OpLoad %438 
                                                      OpSelectionMerge %442 None 
                                                      OpBranchConditional %439 %441 %445 
                                             %441 = OpLabel 
                                Private f32* %443 = OpAccessChain %385 %162 
                                         f32 %444 = OpLoad %443 
                                                      OpStore %440 %444 
                                                      OpBranch %442 
                                             %445 = OpLabel 
                                Private f32* %446 = OpAccessChain %396 %162 
                                         f32 %447 = OpLoad %446 
                                                      OpStore %440 %447 
                                                      OpBranch %442 
                                             %442 = OpLabel 
                                         f32 %448 = OpLoad %440 
                               Function f32* %449 = OpAccessChain %412 %162 
                                                      OpStore %449 %448 
                                       f32_3 %450 = OpLoad %412 
                                                      OpStore %385 %450 
                                Private f32* %451 = OpAccessChain %385 %155 
                                         f32 %452 = OpLoad %451 
                                Private f32* %453 = OpAccessChain %385 %148 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 37 %452 %454 
                                                      OpStore %372 %455 
                                Private f32* %456 = OpAccessChain %385 %162 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpLoad %372 
                                         f32 %459 = OpExtInst %1 37 %457 %458 
                                                      OpStore %372 %459 
                                       f32_3 %460 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %461 = OpAccessChain %17 %365 
                                       f32_4 %462 = OpLoad %461 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpFNegate %463 
                                       f32_3 %465 = OpFAdd %460 %464 
                                                      OpStore %385 %465 
                                       f32_3 %466 = OpLoad %214 
                                         f32 %467 = OpLoad %372 
                                       f32_3 %468 = OpCompositeConstruct %467 %467 %467 
                                       f32_3 %469 = OpFMul %466 %468 
                                       f32_3 %470 = OpLoad %385 
                                       f32_3 %471 = OpFAdd %469 %470 
                                       f32_4 %472 = OpLoad %125 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %125 %473 
                                                      OpBranch %371 
                                             %371 = OpLabel 
                       read_only TextureCube %475 = OpLoad %474 
                                     sampler %476 = OpLoad %321 
                read_only TextureCubeSampled %477 = OpSampledImage %475 %476 
                                       f32_4 %478 = OpLoad %125 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                         f32 %480 = OpLoad %115 
                                       f32_4 %481 = OpImageSampleExplicitLod %477 %479 Lod %7 
                                                      OpStore %125 %481 
                                Private f32* %482 = OpAccessChain %125 %79 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFAdd %483 %332 
                                                      OpStore %115 %484 
                                Uniform f32* %486 = OpAccessChain %17 %485 %79 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpLoad %115 
                                         f32 %489 = OpFMul %487 %488 
                                         f32 %490 = OpFAdd %489 %113 
                                                      OpStore %115 %490 
                                         f32 %491 = OpLoad %115 
                                         f32 %492 = OpExtInst %1 30 %491 
                                                      OpStore %115 %492 
                                         f32 %493 = OpLoad %115 
                                Uniform f32* %494 = OpAccessChain %17 %485 %155 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %493 %495 
                                                      OpStore %115 %496 
                                         f32 %497 = OpLoad %115 
                                         f32 %498 = OpExtInst %1 29 %497 
                                                      OpStore %115 %498 
                                         f32 %499 = OpLoad %115 
                                Uniform f32* %500 = OpAccessChain %17 %485 %148 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpFMul %499 %501 
                                                      OpStore %115 %502 
                                       f32_4 %503 = OpLoad %125 
                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
                                         f32 %505 = OpLoad %115 
                                       f32_3 %506 = OpCompositeConstruct %505 %505 %505 
                                       f32_3 %507 = OpFMul %504 %506 
                                       f32_4 %508 = OpLoad %125 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
                                                      OpStore %125 %509 
                                         f32 %510 = OpLoad %329 
                                       f32_3 %511 = OpCompositeConstruct %510 %510 %510 
                                       f32_4 %512 = OpLoad %142 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                       f32_3 %514 = OpFMul %511 %513 
                                       f32_4 %515 = OpLoad %125 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFNegate %516 
                                       f32_3 %518 = OpFAdd %514 %517 
                                       f32_4 %519 = OpLoad %142 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %142 %520 
                              Uniform f32_4* %521 = OpAccessChain %17 %217 
                                       f32_4 %522 = OpLoad %521 
                                       f32_3 %523 = OpVectorShuffle %522 %522 3 3 3 
                                       f32_4 %524 = OpLoad %142 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_3 %526 = OpFMul %523 %525 
                                       f32_4 %527 = OpLoad %125 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFAdd %526 %528 
                                                      OpStore %202 %529 
                                                      OpBranch %364 
                                             %364 = OpLabel 
                                       f32_3 %530 = OpLoad vs_TEXCOORD1 
                                       f32_3 %531 = OpLoad vs_TEXCOORD1 
                                         f32 %532 = OpDot %530 %531 
                                                      OpStore %115 %532 
                                         f32 %533 = OpLoad %115 
                                         f32 %534 = OpExtInst %1 32 %533 
                                                      OpStore %115 %534 
                                         f32 %535 = OpLoad %115 
                                       f32_3 %536 = OpCompositeConstruct %535 %535 %535 
                                       f32_3 %537 = OpLoad vs_TEXCOORD1 
                                       f32_3 %538 = OpFMul %536 %537 
                                       f32_4 %539 = OpLoad %125 
                                       f32_4 %540 = OpVectorShuffle %539 %538 4 5 6 3 
                                                      OpStore %125 %540 
                                       f32_4 %541 = OpLoad %43 
                                       f32_3 %542 = OpVectorShuffle %541 %541 0 1 2 
                              Uniform f32_4* %543 = OpAccessChain %17 %63 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFMul %542 %545 
                                       f32_3 %549 = OpFAdd %546 %548 
                                       f32_4 %550 = OpLoad %43 
                                       f32_4 %551 = OpVectorShuffle %550 %549 4 5 6 3 
                                                      OpStore %43 %551 
                                Uniform f32* %553 = OpAccessChain %17 %552 
                                         f32 %554 = OpLoad %553 
                                Uniform f32* %555 = OpAccessChain %17 %552 
                                         f32 %556 = OpLoad %555 
                                Uniform f32* %557 = OpAccessChain %17 %552 
                                         f32 %558 = OpLoad %557 
                                       f32_3 %559 = OpCompositeConstruct %554 %556 %558 
                                         f32 %560 = OpCompositeExtract %559 0 
                                         f32 %561 = OpCompositeExtract %559 1 
                                         f32 %562 = OpCompositeExtract %559 2 
                                       f32_3 %563 = OpCompositeConstruct %560 %561 %562 
                                       f32_4 %564 = OpLoad %43 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                       f32_3 %566 = OpFMul %563 %565 
                                       f32_3 %569 = OpFAdd %566 %568 
                                       f32_4 %570 = OpLoad %43 
                                       f32_4 %571 = OpVectorShuffle %570 %569 4 5 6 3 
                                                      OpStore %43 %571 
                                Uniform f32* %572 = OpAccessChain %17 %552 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFNegate %573 
                                         f32 %576 = OpFMul %574 %575 
                                         f32 %577 = OpFAdd %576 %575 
                                                      OpStore %115 %577 
                                         f32 %578 = OpLoad %115 
                                       f32_3 %579 = OpCompositeConstruct %578 %578 %578 
                                       f32_3 %580 = OpLoad %60 
                                       f32_3 %581 = OpFMul %579 %580 
                                                      OpStore %60 %581 
                                       f32_4 %582 = OpLoad %9 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                         f32 %584 = OpLoad %27 
                                       f32_3 %585 = OpCompositeConstruct %584 %584 %584 
                                       f32_3 %586 = OpFMul %583 %585 
                              Uniform f32_4* %588 = OpAccessChain %17 %587 
                                       f32_4 %589 = OpLoad %588 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                       f32_3 %591 = OpFAdd %586 %590 
                                       f32_4 %592 = OpLoad %9 
                                       f32_4 %593 = OpVectorShuffle %592 %591 4 5 6 3 
                                                      OpStore %9 %593 
                                       f32_4 %594 = OpLoad %9 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                       f32_4 %596 = OpLoad %9 
                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
                                         f32 %598 = OpDot %595 %597 
                                                      OpStore %27 %598 
                                         f32 %599 = OpLoad %27 
                                         f32 %601 = OpExtInst %1 40 %599 %600 
                                                      OpStore %27 %601 
                                         f32 %602 = OpLoad %27 
                                         f32 %603 = OpExtInst %1 32 %602 
                                                      OpStore %27 %603 
                                         f32 %604 = OpLoad %27 
                                       f32_3 %605 = OpCompositeConstruct %604 %604 %604 
                                       f32_4 %606 = OpLoad %9 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 1 2 
                                       f32_3 %608 = OpFMul %605 %607 
                                       f32_4 %609 = OpLoad %9 
                                       f32_4 %610 = OpVectorShuffle %609 %608 4 5 6 3 
                                                      OpStore %9 %610 
                                       f32_4 %611 = OpLoad %125 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_4 %613 = OpLoad %35 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                         f32 %615 = OpDot %612 %614 
                                                      OpStore %27 %615 
                                       f32_4 %616 = OpLoad %125 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                              Uniform f32_4* %618 = OpAccessChain %17 %587 
                                       f32_4 %619 = OpLoad %618 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                                         f32 %621 = OpDot %617 %620 
                                Private f32* %622 = OpAccessChain %35 %148 
                                                      OpStore %622 %621 
                                Private f32* %623 = OpAccessChain %35 %148 
                                         f32 %624 = OpLoad %623 
                                         f32 %625 = OpExtInst %1 43 %624 %173 %113 
                                Private f32* %626 = OpAccessChain %35 %148 
                                                      OpStore %626 %625 
                                       f32_4 %628 = OpLoad %125 
                                       f32_3 %629 = OpVectorShuffle %628 %628 0 1 2 
                                       f32_4 %630 = OpLoad %9 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                                         f32 %632 = OpDot %629 %631 
                                                      OpStore %627 %632 
                                         f32 %633 = OpLoad %627 
                                         f32 %634 = OpExtInst %1 43 %633 %173 %113 
                                                      OpStore %627 %634 
                              Uniform f32_4* %635 = OpAccessChain %17 %587 
                                       f32_4 %636 = OpLoad %635 
                                       f32_3 %637 = OpVectorShuffle %636 %636 0 1 2 
                                       f32_4 %638 = OpLoad %9 
                                       f32_3 %639 = OpVectorShuffle %638 %638 0 1 2 
                                         f32 %640 = OpDot %637 %639 
                                Private f32* %641 = OpAccessChain %9 %148 
                                                      OpStore %641 %640 
                                Private f32* %642 = OpAccessChain %9 %148 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpExtInst %1 43 %643 %173 %113 
                                Private f32* %645 = OpAccessChain %9 %148 
                                                      OpStore %645 %644 
                                Private f32* %647 = OpAccessChain %9 %148 
                                         f32 %648 = OpLoad %647 
                                Private f32* %649 = OpAccessChain %9 %148 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpFMul %648 %650 
                                Private f32* %652 = OpAccessChain %646 %148 
                                                      OpStore %652 %651 
                                       f32_3 %653 = OpLoad %646 
                                       f32_2 %654 = OpVectorShuffle %653 %653 0 0 
                                         f32 %655 = OpLoad %69 
                                       f32_2 %656 = OpCompositeConstruct %655 %655 
                                         f32 %657 = OpDot %654 %656 
                                Private f32* %658 = OpAccessChain %646 %148 
                                                      OpStore %658 %657 
                                Private f32* %659 = OpAccessChain %646 %148 
                                         f32 %660 = OpLoad %659 
                                         f32 %662 = OpFAdd %660 %661 
                                Private f32* %663 = OpAccessChain %646 %148 
                                                      OpStore %663 %662 
                                Private f32* %665 = OpAccessChain %35 %148 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFNegate %666 
                                         f32 %668 = OpFAdd %667 %113 
                                                      OpStore %664 %668 
                                         f32 %670 = OpLoad %664 
                                         f32 %671 = OpLoad %664 
                                         f32 %672 = OpFMul %670 %671 
                                                      OpStore %669 %672 
                                         f32 %673 = OpLoad %669 
                                         f32 %674 = OpLoad %669 
                                         f32 %675 = OpFMul %673 %674 
                                                      OpStore %669 %675 
                                         f32 %676 = OpLoad %664 
                                         f32 %677 = OpLoad %669 
                                         f32 %678 = OpFMul %676 %677 
                                                      OpStore %664 %678 
                                Private f32* %679 = OpAccessChain %646 %148 
                                         f32 %680 = OpLoad %679 
                                         f32 %681 = OpLoad %664 
                                         f32 %682 = OpFMul %680 %681 
                                         f32 %683 = OpFAdd %682 %113 
                                                      OpStore %664 %683 
                                         f32 %684 = OpLoad %27 
                                         f32 %685 = OpExtInst %1 4 %684 
                                         f32 %686 = OpFNegate %685 
                                         f32 %687 = OpFAdd %686 %113 
                                                      OpStore %669 %687 
                                         f32 %688 = OpLoad %669 
                                         f32 %689 = OpLoad %669 
                                         f32 %690 = OpFMul %688 %689 
                                                      OpStore %329 %690 
                                         f32 %691 = OpLoad %329 
                                         f32 %692 = OpLoad %329 
                                         f32 %693 = OpFMul %691 %692 
                                                      OpStore %329 %693 
                                         f32 %694 = OpLoad %669 
                                         f32 %695 = OpLoad %329 
                                         f32 %696 = OpFMul %694 %695 
                                                      OpStore %669 %696 
                                Private f32* %697 = OpAccessChain %646 %148 
                                         f32 %698 = OpLoad %697 
                                         f32 %699 = OpLoad %669 
                                         f32 %700 = OpFMul %698 %699 
                                         f32 %701 = OpFAdd %700 %113 
                                Private f32* %702 = OpAccessChain %646 %148 
                                                      OpStore %702 %701 
                                Private f32* %703 = OpAccessChain %646 %148 
                                         f32 %704 = OpLoad %703 
                                         f32 %705 = OpLoad %664 
                                         f32 %706 = OpFMul %704 %705 
                                Private f32* %707 = OpAccessChain %646 %148 
                                                      OpStore %707 %706 
                                         f32 %708 = OpLoad %69 
                                         f32 %709 = OpLoad %69 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %664 %710 
                                         f32 %711 = OpLoad %664 
                                         f32 %713 = OpExtInst %1 40 %711 %712 
                                                      OpStore %664 %713 
                                         f32 %714 = OpLoad %664 
                                         f32 %715 = OpFNegate %714 
                                         f32 %716 = OpFAdd %715 %113 
                                                      OpStore %69 %716 
                                         f32 %717 = OpLoad %27 
                                         f32 %718 = OpExtInst %1 4 %717 
                                         f32 %719 = OpLoad %69 
                                         f32 %720 = OpFMul %718 %719 
                                         f32 %721 = OpLoad %664 
                                         f32 %722 = OpFAdd %720 %721 
                                                      OpStore %329 %722 
                                Private f32* %723 = OpAccessChain %35 %148 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpLoad %69 
                                         f32 %726 = OpFMul %724 %725 
                                         f32 %727 = OpLoad %664 
                                         f32 %728 = OpFAdd %726 %727 
                                                      OpStore %69 %728 
                                         f32 %729 = OpLoad %27 
                                         f32 %730 = OpExtInst %1 4 %729 
                                         f32 %731 = OpLoad %69 
                                         f32 %732 = OpFMul %730 %731 
                                                      OpStore %27 %732 
                                Private f32* %733 = OpAccessChain %35 %148 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpLoad %329 
                                         f32 %736 = OpFMul %734 %735 
                                         f32 %737 = OpLoad %27 
                                         f32 %738 = OpFAdd %736 %737 
                                                      OpStore %27 %738 
                                         f32 %739 = OpLoad %27 
                                         f32 %741 = OpFAdd %739 %740 
                                                      OpStore %27 %741 
                                         f32 %743 = OpLoad %27 
                                         f32 %744 = OpFDiv %742 %743 
                                                      OpStore %27 %744 
                                         f32 %745 = OpLoad %664 
                                         f32 %746 = OpLoad %664 
                                         f32 %747 = OpFMul %745 %746 
                                                      OpStore %69 %747 
                                         f32 %748 = OpLoad %627 
                                         f32 %749 = OpLoad %69 
                                         f32 %750 = OpFMul %748 %749 
                                         f32 %751 = OpLoad %627 
                                         f32 %752 = OpFNegate %751 
                                         f32 %753 = OpFAdd %750 %752 
                                                      OpStore %329 %753 
                                         f32 %754 = OpLoad %329 
                                         f32 %755 = OpLoad %627 
                                         f32 %756 = OpFMul %754 %755 
                                         f32 %757 = OpFAdd %756 %113 
                                                      OpStore %627 %757 
                                         f32 %758 = OpLoad %69 
                                         f32 %760 = OpFMul %758 %759 
                                                      OpStore %69 %760 
                                         f32 %761 = OpLoad %627 
                                         f32 %762 = OpLoad %627 
                                         f32 %763 = OpFMul %761 %762 
                                         f32 %765 = OpFAdd %763 %764 
                                                      OpStore %627 %765 
                                         f32 %766 = OpLoad %69 
                                         f32 %767 = OpLoad %627 
                                         f32 %768 = OpFDiv %766 %767 
                                                      OpStore %627 %768 
                                         f32 %769 = OpLoad %27 
                                         f32 %770 = OpLoad %627 
                                         f32 %771 = OpFMul %769 %770 
                                Private f32* %772 = OpAccessChain %646 %162 
                                                      OpStore %772 %771 
                                       f32_4 %773 = OpLoad %35 
                                       f32_2 %774 = OpVectorShuffle %773 %773 0 0 
                                       f32_3 %775 = OpLoad %646 
                                       f32_2 %776 = OpVectorShuffle %775 %775 0 2 
                                       f32_2 %777 = OpFMul %774 %776 
                                       f32_3 %778 = OpLoad %646 
                                       f32_3 %779 = OpVectorShuffle %778 %777 3 1 4 
                                                      OpStore %646 %779 
                                Private f32* %780 = OpAccessChain %646 %162 
                                         f32 %781 = OpLoad %780 
                                         f32 %783 = OpFMul %781 %782 
                                                      OpStore %27 %783 
                                         f32 %784 = OpLoad %27 
                                         f32 %785 = OpExtInst %1 40 %784 %173 
                                                      OpStore %27 %785 
                                         f32 %786 = OpLoad %664 
                                         f32 %787 = OpLoad %664 
                                         f32 %788 = OpFMul %786 %787 
                                         f32 %789 = OpFAdd %788 %113 
                                                      OpStore %664 %789 
                                         f32 %790 = OpLoad %664 
                                         f32 %791 = OpFDiv %113 %790 
                                                      OpStore %664 %791 
                                       f32_4 %792 = OpLoad %43 
                                       f32_3 %793 = OpVectorShuffle %792 %792 0 1 2 
                                       f32_4 %794 = OpLoad %43 
                                       f32_3 %795 = OpVectorShuffle %794 %794 0 1 2 
                                         f32 %796 = OpDot %793 %795 
                                Private f32* %797 = OpAccessChain %35 %148 
                                                      OpStore %797 %796 
                                Private f32* %799 = OpAccessChain %35 %148 
                                         f32 %800 = OpLoad %799 
                                        bool %801 = OpFOrdNotEqual %800 %173 
                                                      OpStore %798 %801 
                                        bool %802 = OpLoad %798 
                                         f32 %803 = OpSelect %802 %113 %173 
                                Private f32* %804 = OpAccessChain %35 %148 
                                                      OpStore %804 %803 
                                         f32 %805 = OpLoad %27 
                                Private f32* %806 = OpAccessChain %35 %148 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFMul %805 %807 
                                                      OpStore %27 %808 
                                         f32 %809 = OpLoad %115 
                                         f32 %810 = OpFNegate %809 
                                Uniform f32* %811 = OpAccessChain %17 %109 
                                         f32 %812 = OpLoad %811 
                                         f32 %813 = OpFAdd %810 %812 
                                Private f32* %814 = OpAccessChain %35 %148 
                                                      OpStore %814 %813 
                                Private f32* %815 = OpAccessChain %35 %148 
                                         f32 %816 = OpLoad %815 
                                         f32 %817 = OpFAdd %816 %113 
                                Private f32* %818 = OpAccessChain %35 %148 
                                                      OpStore %818 %817 
                                Private f32* %819 = OpAccessChain %35 %148 
                                         f32 %820 = OpLoad %819 
                                         f32 %821 = OpExtInst %1 43 %820 %173 %113 
                                Private f32* %822 = OpAccessChain %35 %148 
                                                      OpStore %822 %821 
                              Uniform f32_4* %824 = OpAccessChain %17 %823 
                                       f32_4 %825 = OpLoad %824 
                                       f32_3 %826 = OpVectorShuffle %825 %825 0 1 2 
                                       f32_3 %827 = OpLoad %646 
                                       f32_3 %828 = OpVectorShuffle %827 %827 0 0 0 
                                       f32_3 %829 = OpFMul %826 %828 
                                       f32_4 %830 = OpLoad %137 
                                       f32_3 %831 = OpVectorShuffle %830 %830 0 1 2 
                                       f32_3 %832 = OpFAdd %829 %831 
                                       f32_4 %833 = OpLoad %125 
                                       f32_4 %834 = OpVectorShuffle %833 %832 4 5 6 3 
                                                      OpStore %125 %834 
                                         f32 %835 = OpLoad %27 
                                       f32_3 %836 = OpCompositeConstruct %835 %835 %835 
                              Uniform f32_4* %837 = OpAccessChain %17 %823 
                                       f32_4 %838 = OpLoad %837 
                                       f32_3 %839 = OpVectorShuffle %838 %838 0 1 2 
                                       f32_3 %840 = OpFMul %836 %839 
                                       f32_4 %841 = OpLoad %137 
                                       f32_4 %842 = OpVectorShuffle %841 %840 4 5 6 3 
                                                      OpStore %137 %842 
                                Private f32* %843 = OpAccessChain %9 %148 
                                         f32 %844 = OpLoad %843 
                                         f32 %845 = OpFNegate %844 
                                         f32 %846 = OpFAdd %845 %113 
                                Private f32* %847 = OpAccessChain %9 %148 
                                                      OpStore %847 %846 
                                Private f32* %848 = OpAccessChain %9 %148 
                                         f32 %849 = OpLoad %848 
                                Private f32* %850 = OpAccessChain %9 %148 
                                         f32 %851 = OpLoad %850 
                                         f32 %852 = OpFMul %849 %851 
                                Private f32* %853 = OpAccessChain %646 %148 
                                                      OpStore %853 %852 
                                Private f32* %854 = OpAccessChain %646 %148 
                                         f32 %855 = OpLoad %854 
                                Private f32* %856 = OpAccessChain %646 %148 
                                         f32 %857 = OpLoad %856 
                                         f32 %858 = OpFMul %855 %857 
                                Private f32* %859 = OpAccessChain %646 %148 
                                                      OpStore %859 %858 
                                Private f32* %860 = OpAccessChain %9 %148 
                                         f32 %861 = OpLoad %860 
                                Private f32* %862 = OpAccessChain %646 %148 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFMul %861 %863 
                                Private f32* %865 = OpAccessChain %9 %148 
                                                      OpStore %865 %864 
                                       f32_4 %866 = OpLoad %43 
                                       f32_3 %867 = OpVectorShuffle %866 %866 0 1 2 
                                       f32_3 %868 = OpFNegate %867 
                                       f32_3 %870 = OpFAdd %868 %869 
                                       f32_4 %871 = OpLoad %142 
                                       f32_4 %872 = OpVectorShuffle %871 %870 4 5 6 3 
                                                      OpStore %142 %872 
                                       f32_4 %873 = OpLoad %142 
                                       f32_3 %874 = OpVectorShuffle %873 %873 0 1 2 
                                       f32_4 %875 = OpLoad %9 
                                       f32_3 %876 = OpVectorShuffle %875 %875 0 0 0 
                                       f32_3 %877 = OpFMul %874 %876 
                                       f32_4 %878 = OpLoad %43 
                                       f32_3 %879 = OpVectorShuffle %878 %878 0 1 2 
                                       f32_3 %880 = OpFAdd %877 %879 
                                       f32_4 %881 = OpLoad %9 
                                       f32_4 %882 = OpVectorShuffle %881 %880 4 5 2 6 
                                                      OpStore %9 %882 
                                       f32_4 %883 = OpLoad %9 
                                       f32_3 %884 = OpVectorShuffle %883 %883 0 1 3 
                                       f32_4 %885 = OpLoad %137 
                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 2 
                                       f32_3 %887 = OpFMul %884 %886 
                                       f32_4 %888 = OpLoad %9 
                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 2 6 
                                                      OpStore %9 %889 
                                       f32_3 %890 = OpLoad %60 
                                       f32_4 %891 = OpLoad %125 
                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
                                       f32_3 %893 = OpFMul %890 %892 
                                       f32_4 %894 = OpLoad %9 
                                       f32_3 %895 = OpVectorShuffle %894 %894 0 1 3 
                                       f32_3 %896 = OpFAdd %893 %895 
                                       f32_4 %897 = OpLoad %9 
                                       f32_4 %898 = OpVectorShuffle %897 %896 4 5 2 6 
                                                      OpStore %9 %898 
                                       f32_3 %899 = OpLoad %202 
                                         f32 %900 = OpLoad %664 
                                       f32_3 %901 = OpCompositeConstruct %900 %900 %900 
                                       f32_3 %902 = OpFMul %899 %901 
                                                      OpStore %60 %902 
                                       f32_4 %903 = OpLoad %43 
                                       f32_3 %904 = OpVectorShuffle %903 %903 0 1 2 
                                       f32_3 %905 = OpFNegate %904 
                                       f32_4 %906 = OpLoad %35 
                                       f32_3 %907 = OpVectorShuffle %906 %906 0 0 0 
                                       f32_3 %908 = OpFAdd %905 %907 
                                       f32_4 %909 = OpLoad %35 
                                       f32_4 %910 = OpVectorShuffle %909 %908 4 5 2 6 
                                                      OpStore %35 %910 
                                         f32 %911 = OpLoad %669 
                                       f32_3 %912 = OpCompositeConstruct %911 %911 %911 
                                       f32_4 %913 = OpLoad %35 
                                       f32_3 %914 = OpVectorShuffle %913 %913 0 1 3 
                                       f32_3 %915 = OpFMul %912 %914 
                                       f32_4 %916 = OpLoad %43 
                                       f32_3 %917 = OpVectorShuffle %916 %916 0 1 2 
                                       f32_3 %918 = OpFAdd %915 %917 
                                       f32_4 %919 = OpLoad %35 
                                       f32_4 %920 = OpVectorShuffle %919 %918 4 5 6 3 
                                                      OpStore %35 %920 
                                       f32_3 %921 = OpLoad %60 
                                       f32_4 %922 = OpLoad %35 
                                       f32_3 %923 = OpVectorShuffle %922 %922 0 1 2 
                                       f32_3 %924 = OpFMul %921 %923 
                                       f32_4 %925 = OpLoad %9 
                                       f32_3 %926 = OpVectorShuffle %925 %925 0 1 3 
                                       f32_3 %927 = OpFAdd %924 %926 
                                       f32_4 %928 = OpLoad %9 
                                       f32_4 %929 = OpVectorShuffle %928 %927 4 5 6 3 
                                                      OpStore %9 %929 
                                       f32_4 %930 = OpLoad %81 
                                       f32_3 %931 = OpVectorShuffle %930 %930 0 1 2 
                                Uniform f32* %933 = OpAccessChain %17 %932 
                                         f32 %934 = OpLoad %933 
                                Uniform f32* %935 = OpAccessChain %17 %932 
                                         f32 %936 = OpLoad %935 
                                Uniform f32* %937 = OpAccessChain %17 %932 
                                         f32 %938 = OpLoad %937 
                                       f32_3 %939 = OpCompositeConstruct %934 %936 %938 
                                         f32 %940 = OpCompositeExtract %939 0 
                                         f32 %941 = OpCompositeExtract %939 1 
                                         f32 %942 = OpCompositeExtract %939 2 
                                       f32_3 %943 = OpCompositeConstruct %940 %941 %942 
                                       f32_3 %944 = OpFMul %931 %943 
                                       f32_4 %945 = OpLoad %9 
                                       f32_3 %946 = OpVectorShuffle %945 %945 0 1 2 
                                       f32_3 %947 = OpFAdd %944 %946 
                                       f32_4 %948 = OpLoad %9 
                                       f32_4 %949 = OpVectorShuffle %948 %947 4 5 6 3 
                                                      OpStore %9 %949 
                                         f32 %952 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %954 = OpAccessChain %17 %953 %155 
                                         f32 %955 = OpLoad %954 
                                         f32 %956 = OpFDiv %952 %955 
                                                      OpStore %27 %956 
                                         f32 %957 = OpLoad %27 
                                         f32 %958 = OpFNegate %957 
                                         f32 %959 = OpFAdd %958 %113 
                                                      OpStore %27 %959 
                                         f32 %960 = OpLoad %27 
                                Uniform f32* %961 = OpAccessChain %17 %953 %162 
                                         f32 %962 = OpLoad %961 
                                         f32 %963 = OpFMul %960 %962 
                                                      OpStore %27 %963 
                                         f32 %964 = OpLoad %27 
                                         f32 %965 = OpExtInst %1 40 %964 %173 
                                                      OpStore %27 %965 
                                         f32 %966 = OpLoad %27 
                                Uniform f32* %968 = OpAccessChain %17 %967 %162 
                                         f32 %969 = OpLoad %968 
                                         f32 %970 = OpFMul %966 %969 
                                Uniform f32* %971 = OpAccessChain %17 %967 %79 
                                         f32 %972 = OpLoad %971 
                                         f32 %973 = OpFAdd %970 %972 
                                                      OpStore %27 %973 
                                         f32 %974 = OpLoad %27 
                                         f32 %975 = OpExtInst %1 43 %974 %173 %113 
                                                      OpStore %27 %975 
                                       f32_4 %976 = OpLoad %9 
                                       f32_3 %977 = OpVectorShuffle %976 %976 0 1 2 
                              Uniform f32_4* %979 = OpAccessChain %17 %978 
                                       f32_4 %980 = OpLoad %979 
                                       f32_3 %981 = OpVectorShuffle %980 %980 0 1 2 
                                       f32_3 %982 = OpFNegate %981 
                                       f32_3 %983 = OpFAdd %977 %982 
                                       f32_4 %984 = OpLoad %9 
                                       f32_4 %985 = OpVectorShuffle %984 %983 4 5 6 3 
                                                      OpStore %9 %985 
                                         f32 %986 = OpLoad %27 
                                       f32_3 %987 = OpCompositeConstruct %986 %986 %986 
                                       f32_4 %988 = OpLoad %9 
                                       f32_3 %989 = OpVectorShuffle %988 %988 0 1 2 
                                       f32_3 %990 = OpFMul %987 %989 
                              Uniform f32_4* %991 = OpAccessChain %17 %978 
                                       f32_4 %992 = OpLoad %991 
                                       f32_3 %993 = OpVectorShuffle %992 %992 0 1 2 
                                       f32_3 %994 = OpFAdd %990 %993 
                                       f32_4 %995 = OpLoad %97 
                                       f32_4 %996 = OpVectorShuffle %995 %994 4 5 6 3 
                                                      OpStore %97 %996 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec2 u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z;
    u_xlat0.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat10.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat2.xx + u_xlat10.xy;
    u_xlat10.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat2.zz + u_xlat10.xy;
    u_xlat0.xy = (-u_xlat10.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat0.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat0.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat0.xxxx + u_xlat4;
    u_xlat2 = u_xlat1 * u_xlat0.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * u_xlat0.y;
    u_xlat15 = u_xlat0.x * u_xlat0.x + (-u_xlat15);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat2);
    u_xlat0.y = dot(unity_SHBg, u_xlat2);
    u_xlat0.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	float _Emission;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(3) uniform  samplerCube unity_SpecCube1;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat27;
float u_xlat39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat4 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    u_xlat4 = u_xlat4.wwww * _RedDotColor;
    u_xlat4.xyz = u_xlat4.xyz * _RedDotColor.www;
    SV_Target0.w = u_xlat2.w * _Color.w + u_xlat4.w;
    u_xlat40 = (-_Glossiness) + 1.0;
    u_xlat41 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
    u_xlat41 = u_xlat41 + u_xlat41;
    u_xlat5.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat41)) + (-u_xlat1.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz;
    u_xlat6.w = 1.0;
    u_xlat7.x = dot(unity_SHAr, u_xlat6);
    u_xlat7.y = dot(unity_SHAg, u_xlat6);
    u_xlat7.z = dot(unity_SHAb, u_xlat6);
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat41 = inversesqrt(u_xlat41);
        u_xlat7.xyz = vec3(u_xlat41) * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat41 = min(u_xlat8.y, u_xlat8.x);
        u_xlat41 = min(u_xlat8.z, u_xlat41);
        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat41) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    }
    u_xlat41 = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat41 = u_xlat40 * u_xlat41;
    u_xlat41 = u_xlat41 * 6.0;
    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat41);
    u_xlat42 = u_xlat7.w + -1.0;
    u_xlat42 = unity_SpecCube0_HDR.w * u_xlat42 + 1.0;
    u_xlat42 = log2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat5.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        }
        u_xlat5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat41);
        u_xlat41 = u_xlat5.w + -1.0;
        u_xlat41 = unity_SpecCube1_HDR.w * u_xlat41 + 1.0;
        u_xlat41 = log2(u_xlat41);
        u_xlat41 = u_xlat41 * unity_SpecCube1_HDR.y;
        u_xlat41 = exp2(u_xlat41);
        u_xlat41 = u_xlat41 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat41);
        u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    }
    u_xlat41 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat5.xyz = vec3(u_xlat41) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat41 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat3.xyz = vec3(u_xlat41) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat40));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat42 = u_xlat27 * u_xlat27;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat27 = u_xlat27 * u_xlat42;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat40 * u_xlat40;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat40 = (-u_xlat26) + 1.0;
    u_xlat42 = abs(u_xlat39) * u_xlat40 + u_xlat26;
    u_xlat40 = u_xlat1.x * u_xlat40 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat40;
    u_xlat39 = u_xlat1.x * u_xlat42 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat40 = u_xlat26 * u_xlat26;
    u_xlat42 = u_xlat14 * u_xlat40 + (-u_xlat14);
    u_xlat14 = u_xlat42 * u_xlat14 + 1.0;
    u_xlat40 = u_xlat40 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat40 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat13.z = u_xlat39 * 3.14159274;
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat39 = max(u_xlat13.z, 0.0);
    u_xlat26 = u_xlat26 * u_xlat26 + 1.0;
    u_xlat26 = float(1.0) / u_xlat26;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat1.x = (-u_xlat41) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat6.xyz = vec3(u_xlat39) * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat7.xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat5.xyz + u_xlat0.xyw;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat4.xyz * vec3(vec3(_Emission, _Emission, _Emission)) + u_xlat0.xyz;
    u_xlat39 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 452
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %85 %90 %213 %219 %220 %233 %269 %272 %440 %446 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 90 
                                                      OpDecorate vs_TEXCOORD3 Location 213 
                                                      OpDecorate vs_TEXCOORD0 Location 219 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %233 Location 233 
                                                      OpDecorate vs_TEXCOORD1 Location 269 
                                                      OpDecorate vs_TEXCOORD2 Location 272 
                                                      OpDecorate vs_TEXCOORD4 Location 440 
                                                      OpDecorate vs_TEXCOORD7 Location 446 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 8 
                                              %17 = OpTypeArray %7 %16 
                                          u32 %18 = OpConstant 4 
                                              %19 = OpTypeArray %7 %18 
                                              %20 = OpTypeArray %7 %18 
                                              %21 = OpTypeArray %7 %18 
                                              %22 = OpTypeStruct %14 %7 %7 %7 %7 %17 %7 %7 %7 %7 %19 %20 %21 %6 %6 %6 %6 %7 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 10 
                                          i32 %27 = OpConstant 1 
                                              %28 = OpTypePointer Uniform %7 
                                          i32 %32 = OpConstant 0 
                                          i32 %40 = OpConstant 2 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %53 = OpVariable Private 
                                          i32 %56 = OpConstant 12 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %87 = OpTypePointer Output %7 
                                              %89 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                          u32 %91 = OpConstant 2 
                                              %92 = OpTypePointer Private %6 
                                              %95 = OpTypeVector %6 2 
                                          i32 %98 = OpConstant 15 
                                              %99 = OpTypePointer Uniform %6 
                                         i32 %102 = OpConstant 16 
                              Private f32_4* %151 = OpVariable Private 
                                             %155 = OpTypePointer Uniform %14 
                                             %161 = OpTypePointer Private %95 
                              Private f32_2* %162 = OpVariable Private 
                                         i32 %165 = OpConstant 11 
                                         i32 %188 = OpConstant 14 
                                         i32 %205 = OpConstant 13 
                                             %212 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_2 %217 = OpConstantComposite %216 %216 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %220 = OpVariable Input 
                                         i32 %223 = OpConstant 17 
                                             %232 = OpTypePointer Input %14 
                                Input f32_3* %233 = OpVariable Input 
                                         u32 %239 = OpConstant 0 
                                Private f32* %253 = OpVariable Private 
                                             %268 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %281 = OpVariable Private 
                              Private f32_4* %294 = OpVariable Private 
                                         f32 %325 = OpConstant 3.674022E-40 
                                       f32_4 %326 = OpConstantComposite %325 %325 %325 %325 
                                         i32 %331 = OpConstant 4 
                                         f32 %335 = OpConstant 3.674022E-40 
                                       f32_4 %336 = OpConstantComposite %335 %335 %335 %335 
                                         f32 %344 = OpConstant 3.674022E-40 
                                       f32_4 %345 = OpConstantComposite %344 %344 %344 %344 
                                         i32 %352 = OpConstant 5 
                                         i32 %410 = OpConstant 6 
                                         i32 %416 = OpConstant 7 
                                         i32 %422 = OpConstant 8 
                                         i32 %428 = OpConstant 9 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %29 = OpAccessChain %24 %26 %27 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpFMul %13 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %33 = OpAccessChain %24 %26 %32 
                                        f32_4 %34 = OpLoad %33 
                                        f32_4 %35 = OpLoad %11 
                                        f32_4 %36 = OpVectorShuffle %35 %35 0 0 0 0 
                                        f32_4 %37 = OpFMul %34 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %24 %26 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_4 %43 = OpLoad %11 
                                        f32_4 %44 = OpVectorShuffle %43 %43 2 2 2 2 
                                        f32_4 %45 = OpFMul %42 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_4 %47 = OpFAdd %45 %46 
                                                      OpStore %9 %47 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %24 %26 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %57 = OpAccessChain %24 %56 %27 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpFMul %55 %58 
                                                      OpStore %53 %59 
                               Uniform f32_4* %60 = OpAccessChain %24 %56 %32 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_4 %63 = OpVectorShuffle %62 %62 0 0 0 0 
                                        f32_4 %64 = OpFMul %61 %63 
                                        f32_4 %65 = OpLoad %53 
                                        f32_4 %66 = OpFAdd %64 %65 
                                                      OpStore %53 %66 
                               Uniform f32_4* %67 = OpAccessChain %24 %56 %40 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %9 
                                        f32_4 %70 = OpVectorShuffle %69 %69 2 2 2 2 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %53 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %53 %73 
                               Uniform f32_4* %74 = OpAccessChain %24 %56 %49 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpVectorShuffle %76 %76 3 3 3 3 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %53 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %86 = OpLoad %9 
                                Output f32_4* %88 = OpAccessChain %85 %32 
                                                      OpStore %88 %86 
                                 Private f32* %93 = OpAccessChain %9 %91 
                                          f32 %94 = OpLoad %93 
                                                      OpStore vs_TEXCOORD5 %94 
                                        f32_4 %96 = OpLoad %11 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                                Uniform f32* %100 = OpAccessChain %24 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %24 %102 
                                         f32 %104 = OpLoad %103 
                                       f32_2 %105 = OpCompositeConstruct %101 %104 
                                       f32_2 %106 = OpFNegate %105 
                                       f32_2 %107 = OpFAdd %97 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %9 %109 
                                       f32_4 %110 = OpLoad %11 
                                       f32_3 %111 = OpVectorShuffle %110 %110 1 1 1 
                              Uniform f32_4* %112 = OpAccessChain %24 %26 %27 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %53 %117 
                              Uniform f32_4* %118 = OpAccessChain %24 %26 %32 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %11 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 0 0 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_4 %124 = OpLoad %53 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFAdd %123 %125 
                                       f32_4 %127 = OpLoad %53 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %53 %128 
                              Uniform f32_4* %129 = OpAccessChain %24 %26 %40 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %11 
                                       f32_3 %133 = OpVectorShuffle %132 %132 2 2 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %53 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFAdd %134 %136 
                                       f32_4 %138 = OpLoad %53 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
                                                      OpStore %53 %139 
                              Uniform f32_4* %140 = OpAccessChain %24 %26 %49 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %11 
                                       f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %53 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %53 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %53 %150 
                                       f32_4 %152 = OpLoad %53 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFNegate %153 
                              Uniform f32_3* %156 = OpAccessChain %24 %32 
                                       f32_3 %157 = OpLoad %156 
                                       f32_3 %158 = OpFAdd %154 %157 
                                       f32_4 %159 = OpLoad %151 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %151 %160 
                                       f32_4 %163 = OpLoad %151 
                                       f32_2 %164 = OpVectorShuffle %163 %163 1 1 
                              Uniform f32_4* %166 = OpAccessChain %24 %165 %27 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %169 = OpFMul %164 %168 
                                                      OpStore %162 %169 
                              Uniform f32_4* %170 = OpAccessChain %24 %165 %32 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_4 %173 = OpLoad %151 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 0 
                                       f32_2 %175 = OpFMul %172 %174 
                                       f32_2 %176 = OpLoad %162 
                                       f32_2 %177 = OpFAdd %175 %176 
                                                      OpStore %162 %177 
                              Uniform f32_4* %178 = OpAccessChain %24 %165 %40 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                                       f32_4 %181 = OpLoad %151 
                                       f32_2 %182 = OpVectorShuffle %181 %181 2 2 
                                       f32_2 %183 = OpFMul %180 %182 
                                       f32_2 %184 = OpLoad %162 
                                       f32_2 %185 = OpFAdd %183 %184 
                                                      OpStore %162 %185 
                                       f32_2 %186 = OpLoad %162 
                                       f32_2 %187 = OpFNegate %186 
                                Uniform f32* %189 = OpAccessChain %24 %188 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %191 = OpAccessChain %24 %188 
                                         f32 %192 = OpLoad %191 
                                       f32_2 %193 = OpCompositeConstruct %190 %192 
                                         f32 %194 = OpCompositeExtract %193 0 
                                         f32 %195 = OpCompositeExtract %193 1 
                                       f32_2 %196 = OpCompositeConstruct %194 %195 
                                       f32_2 %197 = OpFMul %187 %196 
                                       f32_4 %198 = OpLoad %9 
                                       f32_2 %199 = OpVectorShuffle %198 %198 0 1 
                                       f32_2 %200 = OpFAdd %197 %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 2 3 
                                                      OpStore %9 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_2 %204 = OpVectorShuffle %203 %203 0 1 
                                Uniform f32* %206 = OpAccessChain %24 %205 
                                         f32 %207 = OpLoad %206 
                                       f32_2 %208 = OpCompositeConstruct %207 %207 
                                       f32_2 %209 = OpFDiv %204 %208 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 2 3 
                                                      OpStore %9 %211 
                                       f32_4 %214 = OpLoad %9 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_2 %218 = OpFAdd %215 %217 
                                                      OpStore vs_TEXCOORD3 %218 
                                       f32_4 %221 = OpLoad %220 
                                       f32_2 %222 = OpVectorShuffle %221 %221 0 1 
                              Uniform f32_4* %224 = OpAccessChain %24 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_2 %227 = OpFMul %222 %226 
                              Uniform f32_4* %228 = OpAccessChain %24 %223 
                                       f32_4 %229 = OpLoad %228 
                                       f32_2 %230 = OpVectorShuffle %229 %229 2 3 
                                       f32_2 %231 = OpFAdd %227 %230 
                                                      OpStore vs_TEXCOORD0 %231 
                                       f32_3 %234 = OpLoad %233 
                              Uniform f32_4* %235 = OpAccessChain %24 %165 %32 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                         f32 %238 = OpDot %234 %237 
                                Private f32* %240 = OpAccessChain %9 %239 
                                                      OpStore %240 %238 
                                       f32_3 %241 = OpLoad %233 
                              Uniform f32_4* %242 = OpAccessChain %24 %165 %27 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                         f32 %245 = OpDot %241 %244 
                                Private f32* %246 = OpAccessChain %9 %81 
                                                      OpStore %246 %245 
                                       f32_3 %247 = OpLoad %233 
                              Uniform f32_4* %248 = OpAccessChain %24 %165 %40 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                         f32 %251 = OpDot %247 %250 
                                Private f32* %252 = OpAccessChain %9 %91 
                                                      OpStore %252 %251 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %255 %257 
                                                      OpStore %253 %258 
                                         f32 %259 = OpLoad %253 
                                         f32 %260 = OpExtInst %1 32 %259 
                                                      OpStore %253 %260 
                                         f32 %261 = OpLoad %253 
                                       f32_3 %262 = OpCompositeConstruct %261 %261 %261 
                                       f32_4 %263 = OpLoad %9 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                                      OpStore vs_TEXCOORD1 %271 
                                       f32_4 %273 = OpLoad %53 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                                      OpStore vs_TEXCOORD2 %274 
                                       f32_4 %275 = OpLoad %53 
                                       f32_4 %276 = OpVectorShuffle %275 %275 0 0 0 0 
                                       f32_4 %277 = OpFNegate %276 
                              Uniform f32_4* %278 = OpAccessChain %24 %27 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFAdd %277 %279 
                                                      OpStore %151 %280 
                                       f32_4 %282 = OpLoad %53 
                                       f32_4 %283 = OpVectorShuffle %282 %282 1 1 1 1 
                                       f32_4 %284 = OpFNegate %283 
                              Uniform f32_4* %285 = OpAccessChain %24 %40 
                                       f32_4 %286 = OpLoad %285 
                                       f32_4 %287 = OpFAdd %284 %286 
                                                      OpStore %281 %287 
                                       f32_4 %288 = OpLoad %53 
                                       f32_4 %289 = OpVectorShuffle %288 %288 2 2 2 2 
                                       f32_4 %290 = OpFNegate %289 
                              Uniform f32_4* %291 = OpAccessChain %24 %49 
                                       f32_4 %292 = OpLoad %291 
                                       f32_4 %293 = OpFAdd %290 %292 
                                                      OpStore %53 %293 
                                       f32_4 %295 = OpLoad %9 
                                       f32_4 %296 = OpVectorShuffle %295 %295 1 1 1 1 
                                       f32_4 %297 = OpLoad %281 
                                       f32_4 %298 = OpFMul %296 %297 
                                                      OpStore %294 %298 
                                       f32_4 %299 = OpLoad %281 
                                       f32_4 %300 = OpLoad %281 
                                       f32_4 %301 = OpFMul %299 %300 
                                                      OpStore %281 %301 
                                       f32_4 %302 = OpLoad %151 
                                       f32_4 %303 = OpLoad %151 
                                       f32_4 %304 = OpFMul %302 %303 
                                       f32_4 %305 = OpLoad %281 
                                       f32_4 %306 = OpFAdd %304 %305 
                                                      OpStore %281 %306 
                                       f32_4 %307 = OpLoad %151 
                                       f32_4 %308 = OpLoad %9 
                                       f32_4 %309 = OpVectorShuffle %308 %308 0 0 0 0 
                                       f32_4 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %294 
                                       f32_4 %312 = OpFAdd %310 %311 
                                                      OpStore %151 %312 
                                       f32_4 %313 = OpLoad %53 
                                       f32_4 %314 = OpLoad %9 
                                       f32_4 %315 = OpVectorShuffle %314 %314 2 2 2 2 
                                       f32_4 %316 = OpFMul %313 %315 
                                       f32_4 %317 = OpLoad %151 
                                       f32_4 %318 = OpFAdd %316 %317 
                                                      OpStore %151 %318 
                                       f32_4 %319 = OpLoad %53 
                                       f32_4 %320 = OpLoad %53 
                                       f32_4 %321 = OpFMul %319 %320 
                                       f32_4 %322 = OpLoad %281 
                                       f32_4 %323 = OpFAdd %321 %322 
                                                      OpStore %53 %323 
                                       f32_4 %324 = OpLoad %53 
                                       f32_4 %327 = OpExtInst %1 40 %324 %326 
                                                      OpStore %53 %327 
                                       f32_4 %328 = OpLoad %53 
                                       f32_4 %329 = OpExtInst %1 32 %328 
                                                      OpStore %281 %329 
                                       f32_4 %330 = OpLoad %53 
                              Uniform f32_4* %332 = OpAccessChain %24 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpFMul %330 %333 
                                       f32_4 %337 = OpFAdd %334 %336 
                                                      OpStore %53 %337 
                                       f32_4 %338 = OpLoad %53 
                                       f32_4 %339 = OpFDiv %336 %338 
                                                      OpStore %53 %339 
                                       f32_4 %340 = OpLoad %151 
                                       f32_4 %341 = OpLoad %281 
                                       f32_4 %342 = OpFMul %340 %341 
                                                      OpStore %151 %342 
                                       f32_4 %343 = OpLoad %151 
                                       f32_4 %346 = OpExtInst %1 40 %343 %345 
                                                      OpStore %151 %346 
                                       f32_4 %347 = OpLoad %53 
                                       f32_4 %348 = OpLoad %151 
                                       f32_4 %349 = OpFMul %347 %348 
                                                      OpStore %53 %349 
                                       f32_4 %350 = OpLoad %53 
                                       f32_3 %351 = OpVectorShuffle %350 %350 1 1 1 
                              Uniform f32_4* %353 = OpAccessChain %24 %352 %27 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFMul %351 %355 
                                       f32_4 %357 = OpLoad %151 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %151 %358 
                              Uniform f32_4* %359 = OpAccessChain %24 %352 %32 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_4 %362 = OpLoad %53 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 0 0 
                                       f32_3 %364 = OpFMul %361 %363 
                                       f32_4 %365 = OpLoad %151 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %364 %366 
                                       f32_4 %368 = OpLoad %151 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                                      OpStore %151 %369 
                              Uniform f32_4* %370 = OpAccessChain %24 %352 %40 
                                       f32_4 %371 = OpLoad %370 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_4 %373 = OpLoad %53 
                                       f32_3 %374 = OpVectorShuffle %373 %373 2 2 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %151 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %53 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %53 %380 
                              Uniform f32_4* %381 = OpAccessChain %24 %352 %49 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_4 %384 = OpLoad %53 
                                       f32_3 %385 = OpVectorShuffle %384 %384 3 3 3 
                                       f32_3 %386 = OpFMul %383 %385 
                                       f32_4 %387 = OpLoad %53 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %386 %388 
                                       f32_4 %390 = OpLoad %53 
                                       f32_4 %391 = OpVectorShuffle %390 %389 4 5 6 3 
                                                      OpStore %53 %391 
                                Private f32* %392 = OpAccessChain %9 %81 
                                         f32 %393 = OpLoad %392 
                                Private f32* %394 = OpAccessChain %9 %81 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %253 %396 
                                Private f32* %397 = OpAccessChain %9 %239 
                                         f32 %398 = OpLoad %397 
                                Private f32* %399 = OpAccessChain %9 %239 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFMul %398 %400 
                                         f32 %402 = OpLoad %253 
                                         f32 %403 = OpFNegate %402 
                                         f32 %404 = OpFAdd %401 %403 
                                                      OpStore %253 %404 
                                       f32_4 %405 = OpLoad %9 
                                       f32_4 %406 = OpVectorShuffle %405 %405 1 2 2 0 
                                       f32_4 %407 = OpLoad %9 
                                       f32_4 %408 = OpVectorShuffle %407 %407 0 1 2 2 
                                       f32_4 %409 = OpFMul %406 %408 
                                                      OpStore %151 %409 
                              Uniform f32_4* %411 = OpAccessChain %24 %410 
                                       f32_4 %412 = OpLoad %411 
                                       f32_4 %413 = OpLoad %151 
                                         f32 %414 = OpDot %412 %413 
                                Private f32* %415 = OpAccessChain %9 %239 
                                                      OpStore %415 %414 
                              Uniform f32_4* %417 = OpAccessChain %24 %416 
                                       f32_4 %418 = OpLoad %417 
                                       f32_4 %419 = OpLoad %151 
                                         f32 %420 = OpDot %418 %419 
                                Private f32* %421 = OpAccessChain %9 %81 
                                                      OpStore %421 %420 
                              Uniform f32_4* %423 = OpAccessChain %24 %422 
                                       f32_4 %424 = OpLoad %423 
                                       f32_4 %425 = OpLoad %151 
                                         f32 %426 = OpDot %424 %425 
                                Private f32* %427 = OpAccessChain %9 %91 
                                                      OpStore %427 %426 
                              Uniform f32_4* %429 = OpAccessChain %24 %428 
                                       f32_4 %430 = OpLoad %429 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                         f32 %432 = OpLoad %253 
                                       f32_3 %433 = OpCompositeConstruct %432 %432 %432 
                                       f32_3 %434 = OpFMul %431 %433 
                                       f32_4 %435 = OpLoad %9 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpFAdd %434 %436 
                                       f32_4 %438 = OpLoad %9 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %9 %439 
                                       f32_4 %441 = OpLoad %9 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_4 %443 = OpLoad %53 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_3 %445 = OpFAdd %442 %444 
                                                      OpStore vs_TEXCOORD4 %445 
                                                      OpStore vs_TEXCOORD7 %345 
                                 Output f32* %447 = OpAccessChain %85 %32 %81 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpFNegate %448 
                                 Output f32* %450 = OpAccessChain %85 %32 %81 
                                                      OpStore %450 %449 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 998
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %56 %75 %97 %119 %166 %951 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpMemberDecorate %15 18 Offset 15 
                                                      OpMemberDecorate %15 19 Offset 15 
                                                      OpMemberDecorate %15 20 Offset 15 
                                                      OpMemberDecorate %15 21 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate vs_TEXCOORD0 Location 56 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate vs_TEXCOORD3 Location 75 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate vs_TEXCOORD1 Location 119 
                                                      OpDecorate vs_TEXCOORD4 Location 166 
                                                      OpDecorate %319 DescriptorSet 319 
                                                      OpDecorate %319 Binding 319 
                                                      OpDecorate %321 DescriptorSet 321 
                                                      OpDecorate %321 Binding 321 
                                                      OpDecorate %474 DescriptorSet 474 
                                                      OpDecorate %474 Binding 474 
                                                      OpDecorate vs_TEXCOORD5 Location 951 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %10 
                                              %26 = OpTypePointer Private %6 
                                 Private f32* %27 = OpVariable Private 
                               Private f32_4* %35 = OpVariable Private 
                               Private f32_4* %43 = OpVariable Private 
                                              %44 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %45 = OpTypePointer UniformConstant %44 
         UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
                                              %48 = OpTypeSampler 
                                              %49 = OpTypePointer UniformConstant %48 
                     UniformConstant sampler* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampledImage %44 
                                              %54 = OpTypeVector %6 2 
                                              %55 = OpTypePointer Input %54 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %59 = OpTypePointer Private %10 
                               Private f32_3* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 20 
                                              %64 = OpTypePointer Uniform %7 
                                 Private f32* %69 = OpVariable Private 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                              %78 = OpTypeInt 32 0 
                                          u32 %79 = OpConstant 3 
                               Private f32_4* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 21 
                                              %96 = OpTypePointer Output %7 
                                Output f32_4* %97 = OpVariable Output 
                                             %100 = OpTypePointer Uniform %6 
                                             %107 = OpTypePointer Output %6 
                                         i32 %109 = OpConstant 17 
                                         f32 %113 = OpConstant 3.674022E-40 
                                Private f32* %115 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_4* %125 = OpVariable Private 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %142 = OpVariable Private 
                                         i32 %143 = OpConstant 3 
                                         u32 %148 = OpConstant 0 
                                         i32 %150 = OpConstant 4 
                                         u32 %155 = OpConstant 1 
                                         i32 %157 = OpConstant 5 
                                         u32 %162 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                                         f32 %173 = OpConstant 3.674022E-40 
                                       f32_3 %174 = OpConstantComposite %173 %173 %173 
                                             %178 = OpTypeBool 
                                             %179 = OpTypePointer Private %178 
                               Private bool* %180 = OpVariable Private 
                                         i32 %181 = OpConstant 10 
                              Private f32_3* %202 = OpVariable Private 
                                         i32 %205 = OpConstant 8 
                              Private f32_3* %214 = OpVariable Private 
                                         i32 %217 = OpConstant 9 
                                             %226 = OpTypeVector %178 3 
                                             %227 = OpTypePointer Private %226 
                             Private bool_3* %228 = OpVariable Private 
                                       f32_4 %229 = OpConstantComposite %173 %173 %173 %173 
                                             %232 = OpTypeVector %178 4 
                                             %235 = OpTypePointer Function %10 
                                             %240 = OpTypePointer Function %6 
                                         f32 %307 = OpConstant 3.674022E-40 
                                         f32 %309 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                             %317 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %318 = OpTypePointer UniformConstant %317 
      UniformConstant read_only TextureCube* %319 = OpVariable UniformConstant 
                    UniformConstant sampler* %321 = OpVariable UniformConstant 
                                             %323 = OpTypeSampledImage %317 
                                Private f32* %329 = OpVariable Private 
                                         f32 %332 = OpConstant 3.674022E-40 
                                         i32 %334 = OpConstant 11 
                               Private bool* %357 = OpVariable Private 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         i32 %365 = OpConstant 14 
                                Private f32* %372 = OpVariable Private 
                              Private f32_3* %385 = OpVariable Private 
                                         i32 %388 = OpConstant 12 
                              Private f32_3* %396 = OpVariable Private 
                                         i32 %399 = OpConstant 13 
                             Private bool_3* %407 = OpVariable Private 
      UniformConstant read_only TextureCube* %474 = OpVariable UniformConstant 
                                         i32 %485 = OpConstant 15 
                                         f32 %547 = OpConstant 3.674022E-40 
                                       f32_3 %548 = OpConstantComposite %547 %547 %547 
                                         i32 %552 = OpConstant 18 
                                         f32 %567 = OpConstant 3.674022E-40 
                                       f32_3 %568 = OpConstantComposite %567 %567 %567 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         i32 %587 = OpConstant 2 
                                         f32 %600 = OpConstant 3.674022E-40 
                                Private f32* %627 = OpVariable Private 
                              Private f32_3* %646 = OpVariable Private 
                                         f32 %661 = OpConstant 3.674022E-40 
                                Private f32* %664 = OpVariable Private 
                                Private f32* %669 = OpVariable Private 
                                         f32 %712 = OpConstant 3.674022E-40 
                                         f32 %740 = OpConstant 3.674022E-40 
                                         f32 %742 = OpConstant 3.674022E-40 
                                         f32 %759 = OpConstant 3.674022E-40 
                                         f32 %764 = OpConstant 3.674022E-40 
                                         f32 %782 = OpConstant 3.674022E-40 
                               Private bool* %798 = OpVariable Private 
                                         i32 %823 = OpConstant 16 
                                       f32_3 %869 = OpConstantComposite %113 %113 %113 
                                         i32 %932 = OpConstant 19 
                                             %950 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         i32 %953 = OpConstant 1 
                                         i32 %967 = OpConstant 7 
                                         i32 %978 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %236 = OpVariable Function 
                               Function f32* %241 = OpVariable Function 
                               Function f32* %253 = OpVariable Function 
                               Function f32* %265 = OpVariable Function 
                             Function f32_3* %412 = OpVariable Function 
                               Function f32* %416 = OpVariable Function 
                               Function f32* %428 = OpVariable Function 
                               Function f32* %440 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %14 %22 
                                        f32_4 %24 = OpLoad %9 
                                        f32_4 %25 = OpVectorShuffle %24 %23 4 5 6 3 
                                                      OpStore %9 %25 
                                        f32_4 %28 = OpLoad %9 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                          f32 %32 = OpDot %29 %31 
                                                      OpStore %27 %32 
                                          f32 %33 = OpLoad %27 
                                          f32 %34 = OpExtInst %1 32 %33 
                                                      OpStore %27 %34 
                                          f32 %36 = OpLoad %27 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %35 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %35 %42 
                          read_only Texture2D %47 = OpLoad %46 
                                      sampler %51 = OpLoad %50 
                   read_only Texture2DSampled %53 = OpSampledImage %47 %51 
                                        f32_2 %57 = OpLoad vs_TEXCOORD0 
                                        f32_4 %58 = OpImageSampleImplicitLod %53 %57 
                                                      OpStore %43 %58 
                                        f32_4 %61 = OpLoad %43 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %65 = OpAccessChain %17 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_3 %68 = OpFMul %62 %67 
                                                      OpStore %60 %68 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_2 %76 = OpLoad vs_TEXCOORD3 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                          f32 %80 = OpCompositeExtract %77 3 
                                                      OpStore %69 %80 
                                          f32 %82 = OpLoad %69 
                                        f32_4 %83 = OpCompositeConstruct %82 %82 %82 %82 
                               Uniform f32_4* %85 = OpAccessChain %17 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFMul %83 %86 
                                                      OpStore %81 %87 
                                        f32_4 %88 = OpLoad %81 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                               Uniform f32_4* %90 = OpAccessChain %17 %84 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 3 3 3 
                                        f32_3 %93 = OpFMul %89 %92 
                                        f32_4 %94 = OpLoad %81 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %81 %95 
                                 Private f32* %98 = OpAccessChain %43 %79 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %17 %63 %79 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %99 %102 
                                Private f32* %104 = OpAccessChain %81 %79 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFAdd %103 %105 
                                 Output f32* %108 = OpAccessChain %97 %79 
                                                      OpStore %108 %106 
                                Uniform f32* %110 = OpAccessChain %17 %109 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                         f32 %114 = OpFAdd %112 %113 
                                                      OpStore %69 %114 
                                       f32_4 %116 = OpLoad %35 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFNegate %117 
                                       f32_3 %120 = OpLoad vs_TEXCOORD1 
                                         f32 %121 = OpDot %118 %120 
                                                      OpStore %115 %121 
                                         f32 %122 = OpLoad %115 
                                         f32 %123 = OpLoad %115 
                                         f32 %124 = OpFAdd %122 %123 
                                                      OpStore %115 %124 
                                       f32_3 %126 = OpLoad vs_TEXCOORD1 
                                         f32 %127 = OpLoad %115 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFMul %126 %129 
                                       f32_4 %131 = OpLoad %35 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %130 %133 
                                       f32_4 %135 = OpLoad %125 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %125 %136 
                                       f32_3 %138 = OpLoad vs_TEXCOORD1 
                                       f32_4 %139 = OpLoad %137 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %137 %140 
                                Private f32* %141 = OpAccessChain %137 %79 
                                                      OpStore %141 %113 
                              Uniform f32_4* %144 = OpAccessChain %17 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpLoad %137 
                                         f32 %147 = OpDot %145 %146 
                                Private f32* %149 = OpAccessChain %142 %148 
                                                      OpStore %149 %147 
                              Uniform f32_4* %151 = OpAccessChain %17 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_4 %153 = OpLoad %137 
                                         f32 %154 = OpDot %152 %153 
                                Private f32* %156 = OpAccessChain %142 %155 
                                                      OpStore %156 %154 
                              Uniform f32_4* %158 = OpAccessChain %17 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpLoad %137 
                                         f32 %161 = OpDot %159 %160 
                                Private f32* %163 = OpAccessChain %142 %162 
                                                      OpStore %163 %161 
                                       f32_4 %164 = OpLoad %142 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %167 = OpLoad vs_TEXCOORD4 
                                       f32_3 %168 = OpFAdd %165 %167 
                                       f32_4 %169 = OpLoad %137 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %137 %170 
                                       f32_4 %171 = OpLoad %137 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %175 = OpExtInst %1 40 %172 %174 
                                       f32_4 %176 = OpLoad %137 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %137 %177 
                                Uniform f32* %182 = OpAccessChain %17 %181 %79 
                                         f32 %183 = OpLoad %182 
                                        bool %184 = OpFOrdLessThan %173 %183 
                                                      OpStore %180 %184 
                                        bool %185 = OpLoad %180 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %300 
                                             %186 = OpLabel 
                                       f32_4 %188 = OpLoad %125 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %125 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %189 %191 
                                                      OpStore %115 %192 
                                         f32 %193 = OpLoad %115 
                                         f32 %194 = OpExtInst %1 32 %193 
                                                      OpStore %115 %194 
                                         f32 %195 = OpLoad %115 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_4 %197 = OpLoad %125 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %142 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %142 %201 
                                       f32_3 %203 = OpLoad vs_TEXCOORD2 
                                       f32_3 %204 = OpFNegate %203 
                              Uniform f32_4* %206 = OpAccessChain %17 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFAdd %204 %208 
                                                      OpStore %202 %209 
                                       f32_3 %210 = OpLoad %202 
                                       f32_4 %211 = OpLoad %142 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFDiv %210 %212 
                                                      OpStore %202 %213 
                                       f32_3 %215 = OpLoad vs_TEXCOORD2 
                                       f32_3 %216 = OpFNegate %215 
                              Uniform f32_4* %218 = OpAccessChain %17 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFAdd %216 %220 
                                                      OpStore %214 %221 
                                       f32_3 %222 = OpLoad %214 
                                       f32_4 %223 = OpLoad %142 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_3 %225 = OpFDiv %222 %224 
                                                      OpStore %214 %225 
                                       f32_4 %230 = OpLoad %142 
                                       f32_4 %231 = OpVectorShuffle %230 %230 0 1 2 0 
                                      bool_4 %233 = OpFOrdLessThan %229 %231 
                                      bool_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                                      OpStore %228 %234 
                                       f32_3 %237 = OpLoad %202 
                                                      OpStore %236 %237 
                               Private bool* %238 = OpAccessChain %228 %148 
                                        bool %239 = OpLoad %238 
                                                      OpSelectionMerge %243 None 
                                                      OpBranchConditional %239 %242 %246 
                                             %242 = OpLabel 
                                Private f32* %244 = OpAccessChain %202 %148 
                                         f32 %245 = OpLoad %244 
                                                      OpStore %241 %245 
                                                      OpBranch %243 
                                             %246 = OpLabel 
                                Private f32* %247 = OpAccessChain %214 %148 
                                         f32 %248 = OpLoad %247 
                                                      OpStore %241 %248 
                                                      OpBranch %243 
                                             %243 = OpLabel 
                                         f32 %249 = OpLoad %241 
                               Function f32* %250 = OpAccessChain %236 %148 
                                                      OpStore %250 %249 
                               Private bool* %251 = OpAccessChain %228 %155 
                                        bool %252 = OpLoad %251 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %252 %254 %258 
                                             %254 = OpLabel 
                                Private f32* %256 = OpAccessChain %202 %155 
                                         f32 %257 = OpLoad %256 
                                                      OpStore %253 %257 
                                                      OpBranch %255 
                                             %258 = OpLabel 
                                Private f32* %259 = OpAccessChain %214 %155 
                                         f32 %260 = OpLoad %259 
                                                      OpStore %253 %260 
                                                      OpBranch %255 
                                             %255 = OpLabel 
                                         f32 %261 = OpLoad %253 
                               Function f32* %262 = OpAccessChain %236 %155 
                                                      OpStore %262 %261 
                               Private bool* %263 = OpAccessChain %228 %162 
                                        bool %264 = OpLoad %263 
                                                      OpSelectionMerge %267 None 
                                                      OpBranchConditional %264 %266 %270 
                                             %266 = OpLabel 
                                Private f32* %268 = OpAccessChain %202 %162 
                                         f32 %269 = OpLoad %268 
                                                      OpStore %265 %269 
                                                      OpBranch %267 
                                             %270 = OpLabel 
                                Private f32* %271 = OpAccessChain %214 %162 
                                         f32 %272 = OpLoad %271 
                                                      OpStore %265 %272 
                                                      OpBranch %267 
                                             %267 = OpLabel 
                                         f32 %273 = OpLoad %265 
                               Function f32* %274 = OpAccessChain %236 %162 
                                                      OpStore %274 %273 
                                       f32_3 %275 = OpLoad %236 
                                                      OpStore %202 %275 
                                Private f32* %276 = OpAccessChain %202 %155 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %202 %148 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpExtInst %1 37 %277 %279 
                                                      OpStore %115 %280 
                                Private f32* %281 = OpAccessChain %202 %162 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpLoad %115 
                                         f32 %284 = OpExtInst %1 37 %282 %283 
                                                      OpStore %115 %284 
                                       f32_3 %285 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %286 = OpAccessChain %17 %181 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFNegate %288 
                                       f32_3 %290 = OpFAdd %285 %289 
                                                      OpStore %202 %290 
                                       f32_4 %291 = OpLoad %142 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                         f32 %293 = OpLoad %115 
                                       f32_3 %294 = OpCompositeConstruct %293 %293 %293 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %202 
                                       f32_3 %297 = OpFAdd %295 %296 
                                       f32_4 %298 = OpLoad %142 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %142 %299 
                                                      OpBranch %187 
                                             %300 = OpLabel 
                                       f32_4 %301 = OpLoad %125 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %142 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %142 %304 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                         f32 %305 = OpLoad %69 
                                         f32 %306 = OpFNegate %305 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %310 = OpFAdd %308 %309 
                                                      OpStore %115 %310 
                                         f32 %311 = OpLoad %69 
                                         f32 %312 = OpLoad %115 
                                         f32 %313 = OpFMul %311 %312 
                                                      OpStore %115 %313 
                                         f32 %314 = OpLoad %115 
                                         f32 %316 = OpFMul %314 %315 
                                                      OpStore %115 %316 
                       read_only TextureCube %320 = OpLoad %319 
                                     sampler %322 = OpLoad %321 
                read_only TextureCubeSampled %324 = OpSampledImage %320 %322 
                                       f32_4 %325 = OpLoad %142 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                         f32 %327 = OpLoad %115 
                                       f32_4 %328 = OpImageSampleExplicitLod %324 %326 Lod %7 
                                                      OpStore %142 %328 
                                Private f32* %330 = OpAccessChain %142 %79 
                                         f32 %331 = OpLoad %330 
                                         f32 %333 = OpFAdd %331 %332 
                                                      OpStore %329 %333 
                                Uniform f32* %335 = OpAccessChain %17 %334 %79 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpLoad %329 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpFAdd %338 %113 
                                                      OpStore %329 %339 
                                         f32 %340 = OpLoad %329 
                                         f32 %341 = OpExtInst %1 30 %340 
                                                      OpStore %329 %341 
                                         f32 %342 = OpLoad %329 
                                Uniform f32* %343 = OpAccessChain %17 %334 %155 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFMul %342 %344 
                                                      OpStore %329 %345 
                                         f32 %346 = OpLoad %329 
                                         f32 %347 = OpExtInst %1 29 %346 
                                                      OpStore %329 %347 
                                         f32 %348 = OpLoad %329 
                                Uniform f32* %349 = OpAccessChain %17 %334 %148 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %348 %350 
                                                      OpStore %329 %351 
                                       f32_4 %352 = OpLoad %142 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %354 = OpLoad %329 
                                       f32_3 %355 = OpCompositeConstruct %354 %354 %354 
                                       f32_3 %356 = OpFMul %353 %355 
                                                      OpStore %202 %356 
                                Uniform f32* %358 = OpAccessChain %17 %217 %79 
                                         f32 %359 = OpLoad %358 
                                        bool %361 = OpFOrdLessThan %359 %360 
                                                      OpStore %357 %361 
                                        bool %362 = OpLoad %357 
                                                      OpSelectionMerge %364 None 
                                                      OpBranchConditional %362 %363 %364 
                                             %363 = OpLabel 
                                Uniform f32* %366 = OpAccessChain %17 %365 %79 
                                         f32 %367 = OpLoad %366 
                                        bool %368 = OpFOrdLessThan %173 %367 
                                                      OpStore %357 %368 
                                        bool %369 = OpLoad %357 
                                                      OpSelectionMerge %371 None 
                                                      OpBranchConditional %369 %370 %371 
                                             %370 = OpLabel 
                                       f32_4 %373 = OpLoad %125 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_4 %375 = OpLoad %125 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                         f32 %377 = OpDot %374 %376 
                                                      OpStore %372 %377 
                                         f32 %378 = OpLoad %372 
                                         f32 %379 = OpExtInst %1 32 %378 
                                                      OpStore %372 %379 
                                         f32 %380 = OpLoad %372 
                                       f32_3 %381 = OpCompositeConstruct %380 %380 %380 
                                       f32_4 %382 = OpLoad %125 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFMul %381 %383 
                                                      OpStore %214 %384 
                                       f32_3 %386 = OpLoad vs_TEXCOORD2 
                                       f32_3 %387 = OpFNegate %386 
                              Uniform f32_4* %389 = OpAccessChain %17 %388 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %387 %391 
                                                      OpStore %385 %392 
                                       f32_3 %393 = OpLoad %385 
                                       f32_3 %394 = OpLoad %214 
                                       f32_3 %395 = OpFDiv %393 %394 
                                                      OpStore %385 %395 
                                       f32_3 %397 = OpLoad vs_TEXCOORD2 
                                       f32_3 %398 = OpFNegate %397 
                              Uniform f32_4* %400 = OpAccessChain %17 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %398 %402 
                                                      OpStore %396 %403 
                                       f32_3 %404 = OpLoad %396 
                                       f32_3 %405 = OpLoad %214 
                                       f32_3 %406 = OpFDiv %404 %405 
                                                      OpStore %396 %406 
                                       f32_3 %408 = OpLoad %214 
                                       f32_4 %409 = OpVectorShuffle %408 %408 0 1 2 0 
                                      bool_4 %410 = OpFOrdLessThan %229 %409 
                                      bool_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                                      OpStore %407 %411 
                                       f32_3 %413 = OpLoad %385 
                                                      OpStore %412 %413 
                               Private bool* %414 = OpAccessChain %407 %148 
                                        bool %415 = OpLoad %414 
                                                      OpSelectionMerge %418 None 
                                                      OpBranchConditional %415 %417 %421 
                                             %417 = OpLabel 
                                Private f32* %419 = OpAccessChain %385 %148 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %416 %420 
                                                      OpBranch %418 
                                             %421 = OpLabel 
                                Private f32* %422 = OpAccessChain %396 %148 
                                         f32 %423 = OpLoad %422 
                                                      OpStore %416 %423 
                                                      OpBranch %418 
                                             %418 = OpLabel 
                                         f32 %424 = OpLoad %416 
                               Function f32* %425 = OpAccessChain %412 %148 
                                                      OpStore %425 %424 
                               Private bool* %426 = OpAccessChain %407 %155 
                                        bool %427 = OpLoad %426 
                                                      OpSelectionMerge %430 None 
                                                      OpBranchConditional %427 %429 %433 
                                             %429 = OpLabel 
                                Private f32* %431 = OpAccessChain %385 %155 
                                         f32 %432 = OpLoad %431 
                                                      OpStore %428 %432 
                                                      OpBranch %430 
                                             %433 = OpLabel 
                                Private f32* %434 = OpAccessChain %396 %155 
                                         f32 %435 = OpLoad %434 
                                                      OpStore %428 %435 
                                                      OpBranch %430 
                                             %430 = OpLabel 
                                         f32 %436 = OpLoad %428 
                               Function f32* %437 = OpAccessChain %412 %155 
                                                      OpStore %437 %436 
                               Private bool* %438 = OpAccessChain %407 %162 
                                        bool %439 = OpLoad %438 
                                                      OpSelectionMerge %442 None 
                                                      OpBranchConditional %439 %441 %445 
                                             %441 = OpLabel 
                                Private f32* %443 = OpAccessChain %385 %162 
                                         f32 %444 = OpLoad %443 
                                                      OpStore %440 %444 
                                                      OpBranch %442 
                                             %445 = OpLabel 
                                Private f32* %446 = OpAccessChain %396 %162 
                                         f32 %447 = OpLoad %446 
                                                      OpStore %440 %447 
                                                      OpBranch %442 
                                             %442 = OpLabel 
                                         f32 %448 = OpLoad %440 
                               Function f32* %449 = OpAccessChain %412 %162 
                                                      OpStore %449 %448 
                                       f32_3 %450 = OpLoad %412 
                                                      OpStore %385 %450 
                                Private f32* %451 = OpAccessChain %385 %155 
                                         f32 %452 = OpLoad %451 
                                Private f32* %453 = OpAccessChain %385 %148 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 37 %452 %454 
                                                      OpStore %372 %455 
                                Private f32* %456 = OpAccessChain %385 %162 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpLoad %372 
                                         f32 %459 = OpExtInst %1 37 %457 %458 
                                                      OpStore %372 %459 
                                       f32_3 %460 = OpLoad vs_TEXCOORD2 
                              Uniform f32_4* %461 = OpAccessChain %17 %365 
                                       f32_4 %462 = OpLoad %461 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpFNegate %463 
                                       f32_3 %465 = OpFAdd %460 %464 
                                                      OpStore %385 %465 
                                       f32_3 %466 = OpLoad %214 
                                         f32 %467 = OpLoad %372 
                                       f32_3 %468 = OpCompositeConstruct %467 %467 %467 
                                       f32_3 %469 = OpFMul %466 %468 
                                       f32_3 %470 = OpLoad %385 
                                       f32_3 %471 = OpFAdd %469 %470 
                                       f32_4 %472 = OpLoad %125 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %125 %473 
                                                      OpBranch %371 
                                             %371 = OpLabel 
                       read_only TextureCube %475 = OpLoad %474 
                                     sampler %476 = OpLoad %321 
                read_only TextureCubeSampled %477 = OpSampledImage %475 %476 
                                       f32_4 %478 = OpLoad %125 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                         f32 %480 = OpLoad %115 
                                       f32_4 %481 = OpImageSampleExplicitLod %477 %479 Lod %7 
                                                      OpStore %125 %481 
                                Private f32* %482 = OpAccessChain %125 %79 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFAdd %483 %332 
                                                      OpStore %115 %484 
                                Uniform f32* %486 = OpAccessChain %17 %485 %79 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpLoad %115 
                                         f32 %489 = OpFMul %487 %488 
                                         f32 %490 = OpFAdd %489 %113 
                                                      OpStore %115 %490 
                                         f32 %491 = OpLoad %115 
                                         f32 %492 = OpExtInst %1 30 %491 
                                                      OpStore %115 %492 
                                         f32 %493 = OpLoad %115 
                                Uniform f32* %494 = OpAccessChain %17 %485 %155 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %493 %495 
                                                      OpStore %115 %496 
                                         f32 %497 = OpLoad %115 
                                         f32 %498 = OpExtInst %1 29 %497 
                                                      OpStore %115 %498 
                                         f32 %499 = OpLoad %115 
                                Uniform f32* %500 = OpAccessChain %17 %485 %148 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpFMul %499 %501 
                                                      OpStore %115 %502 
                                       f32_4 %503 = OpLoad %125 
                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
                                         f32 %505 = OpLoad %115 
                                       f32_3 %506 = OpCompositeConstruct %505 %505 %505 
                                       f32_3 %507 = OpFMul %504 %506 
                                       f32_4 %508 = OpLoad %125 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
                                                      OpStore %125 %509 
                                         f32 %510 = OpLoad %329 
                                       f32_3 %511 = OpCompositeConstruct %510 %510 %510 
                                       f32_4 %512 = OpLoad %142 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                       f32_3 %514 = OpFMul %511 %513 
                                       f32_4 %515 = OpLoad %125 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFNegate %516 
                                       f32_3 %518 = OpFAdd %514 %517 
                                       f32_4 %519 = OpLoad %142 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %142 %520 
                              Uniform f32_4* %521 = OpAccessChain %17 %217 
                                       f32_4 %522 = OpLoad %521 
                                       f32_3 %523 = OpVectorShuffle %522 %522 3 3 3 
                                       f32_4 %524 = OpLoad %142 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_3 %526 = OpFMul %523 %525 
                                       f32_4 %527 = OpLoad %125 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFAdd %526 %528 
                                                      OpStore %202 %529 
                                                      OpBranch %364 
                                             %364 = OpLabel 
                                       f32_3 %530 = OpLoad vs_TEXCOORD1 
                                       f32_3 %531 = OpLoad vs_TEXCOORD1 
                                         f32 %532 = OpDot %530 %531 
                                                      OpStore %115 %532 
                                         f32 %533 = OpLoad %115 
                                         f32 %534 = OpExtInst %1 32 %533 
                                                      OpStore %115 %534 
                                         f32 %535 = OpLoad %115 
                                       f32_3 %536 = OpCompositeConstruct %535 %535 %535 
                                       f32_3 %537 = OpLoad vs_TEXCOORD1 
                                       f32_3 %538 = OpFMul %536 %537 
                                       f32_4 %539 = OpLoad %125 
                                       f32_4 %540 = OpVectorShuffle %539 %538 4 5 6 3 
                                                      OpStore %125 %540 
                                       f32_4 %541 = OpLoad %43 
                                       f32_3 %542 = OpVectorShuffle %541 %541 0 1 2 
                              Uniform f32_4* %543 = OpAccessChain %17 %63 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFMul %542 %545 
                                       f32_3 %549 = OpFAdd %546 %548 
                                       f32_4 %550 = OpLoad %43 
                                       f32_4 %551 = OpVectorShuffle %550 %549 4 5 6 3 
                                                      OpStore %43 %551 
                                Uniform f32* %553 = OpAccessChain %17 %552 
                                         f32 %554 = OpLoad %553 
                                Uniform f32* %555 = OpAccessChain %17 %552 
                                         f32 %556 = OpLoad %555 
                                Uniform f32* %557 = OpAccessChain %17 %552 
                                         f32 %558 = OpLoad %557 
                                       f32_3 %559 = OpCompositeConstruct %554 %556 %558 
                                         f32 %560 = OpCompositeExtract %559 0 
                                         f32 %561 = OpCompositeExtract %559 1 
                                         f32 %562 = OpCompositeExtract %559 2 
                                       f32_3 %563 = OpCompositeConstruct %560 %561 %562 
                                       f32_4 %564 = OpLoad %43 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                       f32_3 %566 = OpFMul %563 %565 
                                       f32_3 %569 = OpFAdd %566 %568 
                                       f32_4 %570 = OpLoad %43 
                                       f32_4 %571 = OpVectorShuffle %570 %569 4 5 6 3 
                                                      OpStore %43 %571 
                                Uniform f32* %572 = OpAccessChain %17 %552 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFNegate %573 
                                         f32 %576 = OpFMul %574 %575 
                                         f32 %577 = OpFAdd %576 %575 
                                                      OpStore %115 %577 
                                         f32 %578 = OpLoad %115 
                                       f32_3 %579 = OpCompositeConstruct %578 %578 %578 
                                       f32_3 %580 = OpLoad %60 
                                       f32_3 %581 = OpFMul %579 %580 
                                                      OpStore %60 %581 
                                       f32_4 %582 = OpLoad %9 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                         f32 %584 = OpLoad %27 
                                       f32_3 %585 = OpCompositeConstruct %584 %584 %584 
                                       f32_3 %586 = OpFMul %583 %585 
                              Uniform f32_4* %588 = OpAccessChain %17 %587 
                                       f32_4 %589 = OpLoad %588 
                                       f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                       f32_3 %591 = OpFAdd %586 %590 
                                       f32_4 %592 = OpLoad %9 
                                       f32_4 %593 = OpVectorShuffle %592 %591 4 5 6 3 
                                                      OpStore %9 %593 
                                       f32_4 %594 = OpLoad %9 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                       f32_4 %596 = OpLoad %9 
                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
                                         f32 %598 = OpDot %595 %597 
                                                      OpStore %27 %598 
                                         f32 %599 = OpLoad %27 
                                         f32 %601 = OpExtInst %1 40 %599 %600 
                                                      OpStore %27 %601 
                                         f32 %602 = OpLoad %27 
                                         f32 %603 = OpExtInst %1 32 %602 
                                                      OpStore %27 %603 
                                         f32 %604 = OpLoad %27 
                                       f32_3 %605 = OpCompositeConstruct %604 %604 %604 
                                       f32_4 %606 = OpLoad %9 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 1 2 
                                       f32_3 %608 = OpFMul %605 %607 
                                       f32_4 %609 = OpLoad %9 
                                       f32_4 %610 = OpVectorShuffle %609 %608 4 5 6 3 
                                                      OpStore %9 %610 
                                       f32_4 %611 = OpLoad %125 
                                       f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                       f32_4 %613 = OpLoad %35 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                         f32 %615 = OpDot %612 %614 
                                                      OpStore %27 %615 
                                       f32_4 %616 = OpLoad %125 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                              Uniform f32_4* %618 = OpAccessChain %17 %587 
                                       f32_4 %619 = OpLoad %618 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                                         f32 %621 = OpDot %617 %620 
                                Private f32* %622 = OpAccessChain %35 %148 
                                                      OpStore %622 %621 
                                Private f32* %623 = OpAccessChain %35 %148 
                                         f32 %624 = OpLoad %623 
                                         f32 %625 = OpExtInst %1 43 %624 %173 %113 
                                Private f32* %626 = OpAccessChain %35 %148 
                                                      OpStore %626 %625 
                                       f32_4 %628 = OpLoad %125 
                                       f32_3 %629 = OpVectorShuffle %628 %628 0 1 2 
                                       f32_4 %630 = OpLoad %9 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                                         f32 %632 = OpDot %629 %631 
                                                      OpStore %627 %632 
                                         f32 %633 = OpLoad %627 
                                         f32 %634 = OpExtInst %1 43 %633 %173 %113 
                                                      OpStore %627 %634 
                              Uniform f32_4* %635 = OpAccessChain %17 %587 
                                       f32_4 %636 = OpLoad %635 
                                       f32_3 %637 = OpVectorShuffle %636 %636 0 1 2 
                                       f32_4 %638 = OpLoad %9 
                                       f32_3 %639 = OpVectorShuffle %638 %638 0 1 2 
                                         f32 %640 = OpDot %637 %639 
                                Private f32* %641 = OpAccessChain %9 %148 
                                                      OpStore %641 %640 
                                Private f32* %642 = OpAccessChain %9 %148 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpExtInst %1 43 %643 %173 %113 
                                Private f32* %645 = OpAccessChain %9 %148 
                                                      OpStore %645 %644 
                                Private f32* %647 = OpAccessChain %9 %148 
                                         f32 %648 = OpLoad %647 
                                Private f32* %649 = OpAccessChain %9 %148 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpFMul %648 %650 
                                Private f32* %652 = OpAccessChain %646 %148 
                                                      OpStore %652 %651 
                                       f32_3 %653 = OpLoad %646 
                                       f32_2 %654 = OpVectorShuffle %653 %653 0 0 
                                         f32 %655 = OpLoad %69 
                                       f32_2 %656 = OpCompositeConstruct %655 %655 
                                         f32 %657 = OpDot %654 %656 
                                Private f32* %658 = OpAccessChain %646 %148 
                                                      OpStore %658 %657 
                                Private f32* %659 = OpAccessChain %646 %148 
                                         f32 %660 = OpLoad %659 
                                         f32 %662 = OpFAdd %660 %661 
                                Private f32* %663 = OpAccessChain %646 %148 
                                                      OpStore %663 %662 
                                Private f32* %665 = OpAccessChain %35 %148 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFNegate %666 
                                         f32 %668 = OpFAdd %667 %113 
                                                      OpStore %664 %668 
                                         f32 %670 = OpLoad %664 
                                         f32 %671 = OpLoad %664 
                                         f32 %672 = OpFMul %670 %671 
                                                      OpStore %669 %672 
                                         f32 %673 = OpLoad %669 
                                         f32 %674 = OpLoad %669 
                                         f32 %675 = OpFMul %673 %674 
                                                      OpStore %669 %675 
                                         f32 %676 = OpLoad %664 
                                         f32 %677 = OpLoad %669 
                                         f32 %678 = OpFMul %676 %677 
                                                      OpStore %664 %678 
                                Private f32* %679 = OpAccessChain %646 %148 
                                         f32 %680 = OpLoad %679 
                                         f32 %681 = OpLoad %664 
                                         f32 %682 = OpFMul %680 %681 
                                         f32 %683 = OpFAdd %682 %113 
                                                      OpStore %664 %683 
                                         f32 %684 = OpLoad %27 
                                         f32 %685 = OpExtInst %1 4 %684 
                                         f32 %686 = OpFNegate %685 
                                         f32 %687 = OpFAdd %686 %113 
                                                      OpStore %669 %687 
                                         f32 %688 = OpLoad %669 
                                         f32 %689 = OpLoad %669 
                                         f32 %690 = OpFMul %688 %689 
                                                      OpStore %329 %690 
                                         f32 %691 = OpLoad %329 
                                         f32 %692 = OpLoad %329 
                                         f32 %693 = OpFMul %691 %692 
                                                      OpStore %329 %693 
                                         f32 %694 = OpLoad %669 
                                         f32 %695 = OpLoad %329 
                                         f32 %696 = OpFMul %694 %695 
                                                      OpStore %669 %696 
                                Private f32* %697 = OpAccessChain %646 %148 
                                         f32 %698 = OpLoad %697 
                                         f32 %699 = OpLoad %669 
                                         f32 %700 = OpFMul %698 %699 
                                         f32 %701 = OpFAdd %700 %113 
                                Private f32* %702 = OpAccessChain %646 %148 
                                                      OpStore %702 %701 
                                Private f32* %703 = OpAccessChain %646 %148 
                                         f32 %704 = OpLoad %703 
                                         f32 %705 = OpLoad %664 
                                         f32 %706 = OpFMul %704 %705 
                                Private f32* %707 = OpAccessChain %646 %148 
                                                      OpStore %707 %706 
                                         f32 %708 = OpLoad %69 
                                         f32 %709 = OpLoad %69 
                                         f32 %710 = OpFMul %708 %709 
                                                      OpStore %664 %710 
                                         f32 %711 = OpLoad %664 
                                         f32 %713 = OpExtInst %1 40 %711 %712 
                                                      OpStore %664 %713 
                                         f32 %714 = OpLoad %664 
                                         f32 %715 = OpFNegate %714 
                                         f32 %716 = OpFAdd %715 %113 
                                                      OpStore %69 %716 
                                         f32 %717 = OpLoad %27 
                                         f32 %718 = OpExtInst %1 4 %717 
                                         f32 %719 = OpLoad %69 
                                         f32 %720 = OpFMul %718 %719 
                                         f32 %721 = OpLoad %664 
                                         f32 %722 = OpFAdd %720 %721 
                                                      OpStore %329 %722 
                                Private f32* %723 = OpAccessChain %35 %148 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpLoad %69 
                                         f32 %726 = OpFMul %724 %725 
                                         f32 %727 = OpLoad %664 
                                         f32 %728 = OpFAdd %726 %727 
                                                      OpStore %69 %728 
                                         f32 %729 = OpLoad %27 
                                         f32 %730 = OpExtInst %1 4 %729 
                                         f32 %731 = OpLoad %69 
                                         f32 %732 = OpFMul %730 %731 
                                                      OpStore %27 %732 
                                Private f32* %733 = OpAccessChain %35 %148 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpLoad %329 
                                         f32 %736 = OpFMul %734 %735 
                                         f32 %737 = OpLoad %27 
                                         f32 %738 = OpFAdd %736 %737 
                                                      OpStore %27 %738 
                                         f32 %739 = OpLoad %27 
                                         f32 %741 = OpFAdd %739 %740 
                                                      OpStore %27 %741 
                                         f32 %743 = OpLoad %27 
                                         f32 %744 = OpFDiv %742 %743 
                                                      OpStore %27 %744 
                                         f32 %745 = OpLoad %664 
                                         f32 %746 = OpLoad %664 
                                         f32 %747 = OpFMul %745 %746 
                                                      OpStore %69 %747 
                                         f32 %748 = OpLoad %627 
                                         f32 %749 = OpLoad %69 
                                         f32 %750 = OpFMul %748 %749 
                                         f32 %751 = OpLoad %627 
                                         f32 %752 = OpFNegate %751 
                                         f32 %753 = OpFAdd %750 %752 
                                                      OpStore %329 %753 
                                         f32 %754 = OpLoad %329 
                                         f32 %755 = OpLoad %627 
                                         f32 %756 = OpFMul %754 %755 
                                         f32 %757 = OpFAdd %756 %113 
                                                      OpStore %627 %757 
                                         f32 %758 = OpLoad %69 
                                         f32 %760 = OpFMul %758 %759 
                                                      OpStore %69 %760 
                                         f32 %761 = OpLoad %627 
                                         f32 %762 = OpLoad %627 
                                         f32 %763 = OpFMul %761 %762 
                                         f32 %765 = OpFAdd %763 %764 
                                                      OpStore %627 %765 
                                         f32 %766 = OpLoad %69 
                                         f32 %767 = OpLoad %627 
                                         f32 %768 = OpFDiv %766 %767 
                                                      OpStore %627 %768 
                                         f32 %769 = OpLoad %27 
                                         f32 %770 = OpLoad %627 
                                         f32 %771 = OpFMul %769 %770 
                                Private f32* %772 = OpAccessChain %646 %162 
                                                      OpStore %772 %771 
                                       f32_4 %773 = OpLoad %35 
                                       f32_2 %774 = OpVectorShuffle %773 %773 0 0 
                                       f32_3 %775 = OpLoad %646 
                                       f32_2 %776 = OpVectorShuffle %775 %775 0 2 
                                       f32_2 %777 = OpFMul %774 %776 
                                       f32_3 %778 = OpLoad %646 
                                       f32_3 %779 = OpVectorShuffle %778 %777 3 1 4 
                                                      OpStore %646 %779 
                                Private f32* %780 = OpAccessChain %646 %162 
                                         f32 %781 = OpLoad %780 
                                         f32 %783 = OpFMul %781 %782 
                                                      OpStore %27 %783 
                                         f32 %784 = OpLoad %27 
                                         f32 %785 = OpExtInst %1 40 %784 %173 
                                                      OpStore %27 %785 
                                         f32 %786 = OpLoad %664 
                                         f32 %787 = OpLoad %664 
                                         f32 %788 = OpFMul %786 %787 
                                         f32 %789 = OpFAdd %788 %113 
                                                      OpStore %664 %789 
                                         f32 %790 = OpLoad %664 
                                         f32 %791 = OpFDiv %113 %790 
                                                      OpStore %664 %791 
                                       f32_4 %792 = OpLoad %43 
                                       f32_3 %793 = OpVectorShuffle %792 %792 0 1 2 
                                       f32_4 %794 = OpLoad %43 
                                       f32_3 %795 = OpVectorShuffle %794 %794 0 1 2 
                                         f32 %796 = OpDot %793 %795 
                                Private f32* %797 = OpAccessChain %35 %148 
                                                      OpStore %797 %796 
                                Private f32* %799 = OpAccessChain %35 %148 
                                         f32 %800 = OpLoad %799 
                                        bool %801 = OpFOrdNotEqual %800 %173 
                                                      OpStore %798 %801 
                                        bool %802 = OpLoad %798 
                                         f32 %803 = OpSelect %802 %113 %173 
                                Private f32* %804 = OpAccessChain %35 %148 
                                                      OpStore %804 %803 
                                         f32 %805 = OpLoad %27 
                                Private f32* %806 = OpAccessChain %35 %148 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFMul %805 %807 
                                                      OpStore %27 %808 
                                         f32 %809 = OpLoad %115 
                                         f32 %810 = OpFNegate %809 
                                Uniform f32* %811 = OpAccessChain %17 %109 
                                         f32 %812 = OpLoad %811 
                                         f32 %813 = OpFAdd %810 %812 
                                Private f32* %814 = OpAccessChain %35 %148 
                                                      OpStore %814 %813 
                                Private f32* %815 = OpAccessChain %35 %148 
                                         f32 %816 = OpLoad %815 
                                         f32 %817 = OpFAdd %816 %113 
                                Private f32* %818 = OpAccessChain %35 %148 
                                                      OpStore %818 %817 
                                Private f32* %819 = OpAccessChain %35 %148 
                                         f32 %820 = OpLoad %819 
                                         f32 %821 = OpExtInst %1 43 %820 %173 %113 
                                Private f32* %822 = OpAccessChain %35 %148 
                                                      OpStore %822 %821 
                              Uniform f32_4* %824 = OpAccessChain %17 %823 
                                       f32_4 %825 = OpLoad %824 
                                       f32_3 %826 = OpVectorShuffle %825 %825 0 1 2 
                                       f32_3 %827 = OpLoad %646 
                                       f32_3 %828 = OpVectorShuffle %827 %827 0 0 0 
                                       f32_3 %829 = OpFMul %826 %828 
                                       f32_4 %830 = OpLoad %137 
                                       f32_3 %831 = OpVectorShuffle %830 %830 0 1 2 
                                       f32_3 %832 = OpFAdd %829 %831 
                                       f32_4 %833 = OpLoad %125 
                                       f32_4 %834 = OpVectorShuffle %833 %832 4 5 6 3 
                                                      OpStore %125 %834 
                                         f32 %835 = OpLoad %27 
                                       f32_3 %836 = OpCompositeConstruct %835 %835 %835 
                              Uniform f32_4* %837 = OpAccessChain %17 %823 
                                       f32_4 %838 = OpLoad %837 
                                       f32_3 %839 = OpVectorShuffle %838 %838 0 1 2 
                                       f32_3 %840 = OpFMul %836 %839 
                                       f32_4 %841 = OpLoad %137 
                                       f32_4 %842 = OpVectorShuffle %841 %840 4 5 6 3 
                                                      OpStore %137 %842 
                                Private f32* %843 = OpAccessChain %9 %148 
                                         f32 %844 = OpLoad %843 
                                         f32 %845 = OpFNegate %844 
                                         f32 %846 = OpFAdd %845 %113 
                                Private f32* %847 = OpAccessChain %9 %148 
                                                      OpStore %847 %846 
                                Private f32* %848 = OpAccessChain %9 %148 
                                         f32 %849 = OpLoad %848 
                                Private f32* %850 = OpAccessChain %9 %148 
                                         f32 %851 = OpLoad %850 
                                         f32 %852 = OpFMul %849 %851 
                                Private f32* %853 = OpAccessChain %646 %148 
                                                      OpStore %853 %852 
                                Private f32* %854 = OpAccessChain %646 %148 
                                         f32 %855 = OpLoad %854 
                                Private f32* %856 = OpAccessChain %646 %148 
                                         f32 %857 = OpLoad %856 
                                         f32 %858 = OpFMul %855 %857 
                                Private f32* %859 = OpAccessChain %646 %148 
                                                      OpStore %859 %858 
                                Private f32* %860 = OpAccessChain %9 %148 
                                         f32 %861 = OpLoad %860 
                                Private f32* %862 = OpAccessChain %646 %148 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFMul %861 %863 
                                Private f32* %865 = OpAccessChain %9 %148 
                                                      OpStore %865 %864 
                                       f32_4 %866 = OpLoad %43 
                                       f32_3 %867 = OpVectorShuffle %866 %866 0 1 2 
                                       f32_3 %868 = OpFNegate %867 
                                       f32_3 %870 = OpFAdd %868 %869 
                                       f32_4 %871 = OpLoad %142 
                                       f32_4 %872 = OpVectorShuffle %871 %870 4 5 6 3 
                                                      OpStore %142 %872 
                                       f32_4 %873 = OpLoad %142 
                                       f32_3 %874 = OpVectorShuffle %873 %873 0 1 2 
                                       f32_4 %875 = OpLoad %9 
                                       f32_3 %876 = OpVectorShuffle %875 %875 0 0 0 
                                       f32_3 %877 = OpFMul %874 %876 
                                       f32_4 %878 = OpLoad %43 
                                       f32_3 %879 = OpVectorShuffle %878 %878 0 1 2 
                                       f32_3 %880 = OpFAdd %877 %879 
                                       f32_4 %881 = OpLoad %9 
                                       f32_4 %882 = OpVectorShuffle %881 %880 4 5 2 6 
                                                      OpStore %9 %882 
                                       f32_4 %883 = OpLoad %9 
                                       f32_3 %884 = OpVectorShuffle %883 %883 0 1 3 
                                       f32_4 %885 = OpLoad %137 
                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 2 
                                       f32_3 %887 = OpFMul %884 %886 
                                       f32_4 %888 = OpLoad %9 
                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 2 6 
                                                      OpStore %9 %889 
                                       f32_3 %890 = OpLoad %60 
                                       f32_4 %891 = OpLoad %125 
                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
                                       f32_3 %893 = OpFMul %890 %892 
                                       f32_4 %894 = OpLoad %9 
                                       f32_3 %895 = OpVectorShuffle %894 %894 0 1 3 
                                       f32_3 %896 = OpFAdd %893 %895 
                                       f32_4 %897 = OpLoad %9 
                                       f32_4 %898 = OpVectorShuffle %897 %896 4 5 2 6 
                                                      OpStore %9 %898 
                                       f32_3 %899 = OpLoad %202 
                                         f32 %900 = OpLoad %664 
                                       f32_3 %901 = OpCompositeConstruct %900 %900 %900 
                                       f32_3 %902 = OpFMul %899 %901 
                                                      OpStore %60 %902 
                                       f32_4 %903 = OpLoad %43 
                                       f32_3 %904 = OpVectorShuffle %903 %903 0 1 2 
                                       f32_3 %905 = OpFNegate %904 
                                       f32_4 %906 = OpLoad %35 
                                       f32_3 %907 = OpVectorShuffle %906 %906 0 0 0 
                                       f32_3 %908 = OpFAdd %905 %907 
                                       f32_4 %909 = OpLoad %35 
                                       f32_4 %910 = OpVectorShuffle %909 %908 4 5 2 6 
                                                      OpStore %35 %910 
                                         f32 %911 = OpLoad %669 
                                       f32_3 %912 = OpCompositeConstruct %911 %911 %911 
                                       f32_4 %913 = OpLoad %35 
                                       f32_3 %914 = OpVectorShuffle %913 %913 0 1 3 
                                       f32_3 %915 = OpFMul %912 %914 
                                       f32_4 %916 = OpLoad %43 
                                       f32_3 %917 = OpVectorShuffle %916 %916 0 1 2 
                                       f32_3 %918 = OpFAdd %915 %917 
                                       f32_4 %919 = OpLoad %35 
                                       f32_4 %920 = OpVectorShuffle %919 %918 4 5 6 3 
                                                      OpStore %35 %920 
                                       f32_3 %921 = OpLoad %60 
                                       f32_4 %922 = OpLoad %35 
                                       f32_3 %923 = OpVectorShuffle %922 %922 0 1 2 
                                       f32_3 %924 = OpFMul %921 %923 
                                       f32_4 %925 = OpLoad %9 
                                       f32_3 %926 = OpVectorShuffle %925 %925 0 1 3 
                                       f32_3 %927 = OpFAdd %924 %926 
                                       f32_4 %928 = OpLoad %9 
                                       f32_4 %929 = OpVectorShuffle %928 %927 4 5 6 3 
                                                      OpStore %9 %929 
                                       f32_4 %930 = OpLoad %81 
                                       f32_3 %931 = OpVectorShuffle %930 %930 0 1 2 
                                Uniform f32* %933 = OpAccessChain %17 %932 
                                         f32 %934 = OpLoad %933 
                                Uniform f32* %935 = OpAccessChain %17 %932 
                                         f32 %936 = OpLoad %935 
                                Uniform f32* %937 = OpAccessChain %17 %932 
                                         f32 %938 = OpLoad %937 
                                       f32_3 %939 = OpCompositeConstruct %934 %936 %938 
                                         f32 %940 = OpCompositeExtract %939 0 
                                         f32 %941 = OpCompositeExtract %939 1 
                                         f32 %942 = OpCompositeExtract %939 2 
                                       f32_3 %943 = OpCompositeConstruct %940 %941 %942 
                                       f32_3 %944 = OpFMul %931 %943 
                                       f32_4 %945 = OpLoad %9 
                                       f32_3 %946 = OpVectorShuffle %945 %945 0 1 2 
                                       f32_3 %947 = OpFAdd %944 %946 
                                       f32_4 %948 = OpLoad %9 
                                       f32_4 %949 = OpVectorShuffle %948 %947 4 5 6 3 
                                                      OpStore %9 %949 
                                         f32 %952 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %954 = OpAccessChain %17 %953 %155 
                                         f32 %955 = OpLoad %954 
                                         f32 %956 = OpFDiv %952 %955 
                                                      OpStore %27 %956 
                                         f32 %957 = OpLoad %27 
                                         f32 %958 = OpFNegate %957 
                                         f32 %959 = OpFAdd %958 %113 
                                                      OpStore %27 %959 
                                         f32 %960 = OpLoad %27 
                                Uniform f32* %961 = OpAccessChain %17 %953 %162 
                                         f32 %962 = OpLoad %961 
                                         f32 %963 = OpFMul %960 %962 
                                                      OpStore %27 %963 
                                         f32 %964 = OpLoad %27 
                                         f32 %965 = OpExtInst %1 40 %964 %173 
                                                      OpStore %27 %965 
                                         f32 %966 = OpLoad %27 
                                Uniform f32* %968 = OpAccessChain %17 %967 %162 
                                         f32 %969 = OpLoad %968 
                                         f32 %970 = OpFMul %966 %969 
                                Uniform f32* %971 = OpAccessChain %17 %967 %79 
                                         f32 %972 = OpLoad %971 
                                         f32 %973 = OpFAdd %970 %972 
                                                      OpStore %27 %973 
                                         f32 %974 = OpLoad %27 
                                         f32 %975 = OpExtInst %1 43 %974 %173 %113 
                                                      OpStore %27 %975 
                                       f32_4 %976 = OpLoad %9 
                                       f32_3 %977 = OpVectorShuffle %976 %976 0 1 2 
                              Uniform f32_4* %979 = OpAccessChain %17 %978 
                                       f32_4 %980 = OpLoad %979 
                                       f32_3 %981 = OpVectorShuffle %980 %980 0 1 2 
                                       f32_3 %982 = OpFNegate %981 
                                       f32_3 %983 = OpFAdd %977 %982 
                                       f32_4 %984 = OpLoad %9 
                                       f32_4 %985 = OpVectorShuffle %984 %983 4 5 6 3 
                                                      OpStore %9 %985 
                                         f32 %986 = OpLoad %27 
                                       f32_3 %987 = OpCompositeConstruct %986 %986 %986 
                                       f32_4 %988 = OpLoad %9 
                                       f32_3 %989 = OpVectorShuffle %988 %988 0 1 2 
                                       f32_3 %990 = OpFMul %987 %989 
                              Uniform f32_4* %991 = OpAccessChain %17 %978 
                                       f32_4 %992 = OpLoad %991 
                                       f32_3 %993 = OpVectorShuffle %992 %992 0 1 2 
                                       f32_3 %994 = OpFAdd %990 %993 
                                       f32_4 %995 = OpLoad %97 
                                       f32_4 %996 = OpVectorShuffle %995 %994 4 5 6 3 
                                                      OpStore %97 %996 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Opaque" }
  Blend SrcAlpha One, SrcAlpha One
  ColorMask RGB 0
  ZWrite Off
  GpuProgramID 91464
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat7;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat1.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat2.zz + u_xlat1.xy;
    u_xlat7.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat1.xy = (-u_xlat1.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat7.xy;
    u_xlat1.xy = u_xlat1.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat1.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat6 = (-_Glossiness) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat6;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat7.x = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat18 * u_xlat7.x + (-u_xlat18);
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat7.x = u_xlat7.x * 0.318309873;
    u_xlat18 = u_xlat7.x / u_xlat18;
    u_xlat7.x = (-u_xlat12) + 1.0;
    u_xlat13 = abs(u_xlat0.x) * u_xlat7.x + u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2 = u_xlat2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4 = texture(_LightTexture0, vec2(u_xlat18));
    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat12 = (-u_xlat19) + 1.0;
    u_xlat18 = u_xlat19 * u_xlat19;
    u_xlat6 = dot(vec2(u_xlat18), vec2(u_xlat6));
    u_xlat6 = u_xlat6 + -0.5;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat7.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat5.xyz;
    u_xlat12 = u_xlat0.x * u_xlat0.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x + 1.0;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat6 = u_xlat6 * u_xlat12 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat0 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    SV_Target0.w = u_xlat0.w * _RedDotColor.w + u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 322
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %83 %144 %219 %225 %226 %239 %269 %306 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %81 0 BuiltIn 81 
                                                      OpMemberDecorate %81 1 BuiltIn 81 
                                                      OpMemberDecorate %81 2 BuiltIn 81 
                                                      OpDecorate %81 Block 
                                                      OpDecorate vs_TEXCOORD2 Location 144 
                                                      OpDecorate vs_TEXCOORD3 Location 219 
                                                      OpDecorate vs_TEXCOORD0 Location 225 
                                                      OpDecorate %226 Location 226 
                                                      OpDecorate %239 Location 239 
                                                      OpDecorate vs_TEXCOORD1 Location 269 
                                                      OpDecorate vs_TEXCOORD4 Location 306 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeStruct %14 %17 %18 %19 %20 %6 %6 %6 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                               Private f32_4* %46 = OpVariable Private 
                                          i32 %48 = OpConstant 3 
                               Private f32_4* %59 = OpVariable Private 
                                          u32 %79 = OpConstant 1 
                                              %80 = OpTypeArray %6 %79 
                                              %81 = OpTypeStruct %7 %6 %80 
                                              %82 = OpTypePointer Output %81 
         Output struct {f32_4; f32; f32[1];}* %83 = OpVariable Output 
                                              %91 = OpTypePointer Output %7 
                                             %137 = OpTypePointer Uniform %14 
                                             %143 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %147 = OpTypeVector %6 2 
                                             %178 = OpTypePointer Private %147 
                              Private f32_2* %179 = OpVariable Private 
                                         i32 %182 = OpConstant 7 
                                             %183 = OpTypePointer Uniform %6 
                                         i32 %186 = OpConstant 8 
                                         i32 %195 = OpConstant 6 
                                         i32 %211 = OpConstant 5 
                                             %218 = OpTypePointer Output %147 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                                       f32_2 %223 = OpConstantComposite %222 %222 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %226 = OpVariable Input 
                                         i32 %229 = OpConstant 9 
                                             %238 = OpTypePointer Input %14 
                                Input f32_3* %239 = OpVariable Input 
                                         u32 %245 = OpConstant 0 
                                             %246 = OpTypePointer Private %6 
                                         u32 %259 = OpConstant 2 
                                Private f32* %261 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %277 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %316 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %23 %25 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %31 = OpAccessChain %23 %25 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpLoad %11 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
                                        f32_4 %35 = OpFMul %32 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %23 %25 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_4 %41 = OpLoad %11 
                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
                                        f32_4 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_4 %47 = OpLoad %9 
                               Uniform f32_4* %49 = OpAccessChain %23 %25 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_4 %51 = OpFAdd %47 %50 
                                                      OpStore %46 %51 
                               Uniform f32_4* %52 = OpAccessChain %23 %25 %48 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %9 %58 
                                        f32_4 %60 = OpLoad %46 
                                        f32_4 %61 = OpVectorShuffle %60 %60 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %23 %48 %25 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %61 %63 
                                                      OpStore %59 %64 
                               Uniform f32_4* %65 = OpAccessChain %23 %48 %30 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %46 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %48 %38 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %46 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %59 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %59 %78 
                               Uniform f32_4* %84 = OpAccessChain %23 %48 %48 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpLoad %46 
                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
                                        f32_4 %88 = OpFMul %85 %87 
                                        f32_4 %89 = OpLoad %59 
                                        f32_4 %90 = OpFAdd %88 %89 
                                Output f32_4* %92 = OpAccessChain %83 %30 
                                                      OpStore %92 %90 
                                        f32_4 %93 = OpLoad %11 
                                        f32_3 %94 = OpVectorShuffle %93 %93 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %23 %25 %25 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFMul %94 %97 
                                        f32_4 %99 = OpLoad %46 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %46 %100 
                              Uniform f32_4* %101 = OpAccessChain %23 %25 %30 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %11 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 0 0 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %46 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %46 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %46 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %38 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_4 %115 = OpLoad %11 
                                       f32_3 %116 = OpVectorShuffle %115 %115 2 2 2 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %46 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %46 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %46 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %48 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %11 
                                       f32_3 %127 = OpVectorShuffle %126 %126 3 3 3 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %46 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %46 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %46 %133 
                                       f32_4 %134 = OpLoad %46 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %23 %30 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                       f32_4 %141 = OpLoad %59 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %59 %142 
                                       f32_4 %145 = OpLoad %46 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore vs_TEXCOORD2 %146 
                                       f32_4 %148 = OpLoad %59 
                                       f32_2 %149 = OpVectorShuffle %148 %148 1 1 
                              Uniform f32_4* %150 = OpAccessChain %23 %38 %25 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %149 %152 
                                       f32_4 %154 = OpLoad %46 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                                      OpStore %46 %155 
                              Uniform f32_4* %156 = OpAccessChain %23 %38 %30 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_4 %159 = OpLoad %59 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 0 
                                       f32_2 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %46 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
                                       f32_2 %164 = OpFAdd %161 %163 
                                       f32_4 %165 = OpLoad %46 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 5 2 3 
                                                      OpStore %46 %166 
                              Uniform f32_4* %167 = OpAccessChain %23 %38 %38 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 1 
                                       f32_4 %170 = OpLoad %59 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_2 %172 = OpFMul %169 %171 
                                       f32_4 %173 = OpLoad %46 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_2 %175 = OpFAdd %172 %174 
                                       f32_4 %176 = OpLoad %46 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 2 3 
                                                      OpStore %46 %177 
                                       f32_4 %180 = OpLoad %11 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                Uniform f32* %184 = OpAccessChain %23 %182 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %187 = OpAccessChain %23 %186 
                                         f32 %188 = OpLoad %187 
                                       f32_2 %189 = OpCompositeConstruct %185 %188 
                                       f32_2 %190 = OpFNegate %189 
                                       f32_2 %191 = OpFAdd %181 %190 
                                                      OpStore %179 %191 
                                       f32_4 %192 = OpLoad %46 
                                       f32_2 %193 = OpVectorShuffle %192 %192 0 1 
                                       f32_2 %194 = OpFNegate %193 
                                Uniform f32* %196 = OpAccessChain %23 %195 
                                         f32 %197 = OpLoad %196 
                                Uniform f32* %198 = OpAccessChain %23 %195 
                                         f32 %199 = OpLoad %198 
                                       f32_2 %200 = OpCompositeConstruct %197 %199 
                                         f32 %201 = OpCompositeExtract %200 0 
                                         f32 %202 = OpCompositeExtract %200 1 
                                       f32_2 %203 = OpCompositeConstruct %201 %202 
                                       f32_2 %204 = OpFMul %194 %203 
                                       f32_2 %205 = OpLoad %179 
                                       f32_2 %206 = OpFAdd %204 %205 
                                       f32_4 %207 = OpLoad %46 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 2 3 
                                                      OpStore %46 %208 
                                       f32_4 %209 = OpLoad %46 
                                       f32_2 %210 = OpVectorShuffle %209 %209 0 1 
                                Uniform f32* %212 = OpAccessChain %23 %211 
                                         f32 %213 = OpLoad %212 
                                       f32_2 %214 = OpCompositeConstruct %213 %213 
                                       f32_2 %215 = OpFDiv %210 %214 
                                       f32_4 %216 = OpLoad %46 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 2 3 
                                                      OpStore %46 %217 
                                       f32_4 %220 = OpLoad %46 
                                       f32_2 %221 = OpVectorShuffle %220 %220 0 1 
                                       f32_2 %224 = OpFAdd %221 %223 
                                                      OpStore vs_TEXCOORD3 %224 
                                       f32_4 %227 = OpLoad %226 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                              Uniform f32_4* %230 = OpAccessChain %23 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFMul %228 %232 
                              Uniform f32_4* %234 = OpAccessChain %23 %229 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 2 3 
                                       f32_2 %237 = OpFAdd %233 %236 
                                                      OpStore vs_TEXCOORD0 %237 
                                       f32_3 %240 = OpLoad %239 
                              Uniform f32_4* %241 = OpAccessChain %23 %38 %30 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                         f32 %244 = OpDot %240 %243 
                                Private f32* %247 = OpAccessChain %46 %245 
                                                      OpStore %247 %244 
                                       f32_3 %248 = OpLoad %239 
                              Uniform f32_4* %249 = OpAccessChain %23 %38 %25 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpDot %248 %251 
                                Private f32* %253 = OpAccessChain %46 %79 
                                                      OpStore %253 %252 
                                       f32_3 %254 = OpLoad %239 
                              Uniform f32_4* %255 = OpAccessChain %23 %38 %38 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %260 = OpAccessChain %46 %259 
                                                      OpStore %260 %258 
                                       f32_4 %262 = OpLoad %46 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %46 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                         f32 %266 = OpDot %263 %265 
                                                      OpStore %261 %266 
                                         f32 %267 = OpLoad %261 
                                         f32 %268 = OpExtInst %1 32 %267 
                                                      OpStore %261 %268 
                                         f32 %270 = OpLoad %261 
                                       f32_3 %271 = OpCompositeConstruct %270 %270 %270 
                                       f32_4 %272 = OpLoad %46 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFMul %271 %273 
                                                      OpStore vs_TEXCOORD1 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 1 1 1 
                              Uniform f32_4* %278 = OpAccessChain %23 %277 %25 
                                       f32_4 %279 = OpLoad %278 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFMul %276 %280 
                                       f32_4 %282 = OpLoad %46 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
                                                      OpStore %46 %283 
                              Uniform f32_4* %284 = OpAccessChain %23 %277 %30 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %46 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %46 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %46 %294 
                              Uniform f32_4* %295 = OpAccessChain %23 %277 %38 
                                       f32_4 %296 = OpLoad %295 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_4 %298 = OpLoad %9 
                                       f32_3 %299 = OpVectorShuffle %298 %298 2 2 2 
                                       f32_3 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %46 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %300 %302 
                                       f32_4 %304 = OpLoad %9 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %9 %305 
                              Uniform f32_4* %307 = OpAccessChain %23 %277 %48 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 3 3 3 
                                       f32_3 %312 = OpFMul %309 %311 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpFAdd %312 %314 
                                                      OpStore vs_TEXCOORD4 %315 
                                 Output f32* %317 = OpAccessChain %83 %30 %79 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFNegate %318 
                                 Output f32* %320 = OpAccessChain %83 %30 %79 
                                                      OpStore %320 %319 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 466
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %83 %233 %434 %448 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate vs_TEXCOORD1 Location 83 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %227 DescriptorSet 227 
                                                      OpDecorate %227 Binding 227 
                                                      OpDecorate vs_TEXCOORD0 Location 233 
                                                      OpDecorate %313 DescriptorSet 313 
                                                      OpDecorate %313 Binding 313 
                                                      OpDecorate %315 DescriptorSet 315 
                                                      OpDecorate %315 Binding 315 
                                                      OpDecorate %434 Location 434 
                                                      OpDecorate %443 DescriptorSet 443 
                                                      OpDecorate %443 Binding 443 
                                                      OpDecorate %445 DescriptorSet 445 
                                                      OpDecorate %445 Binding 445 
                                                      OpDecorate vs_TEXCOORD3 Location 448 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %17 %6 %6 %14 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 1 
                                              %42 = OpTypePointer Uniform %14 
                                              %52 = OpTypePointer Private %14 
                               Private f32_4* %53 = OpVariable Private 
                                          f32 %72 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_3* %89 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                Private f32* %102 = OpVariable Private 
                                         u32 %112 = OpConstant 0 
                                Private f32* %122 = OpVariable Private 
                                         i32 %123 = OpConstant 4 
                                             %124 = OpTypePointer Uniform %6 
                                Private f32* %129 = OpVariable Private 
                                         f32 %134 = OpConstant 3.674022E-40 
                              Private f32_3* %136 = OpVariable Private 
                                Private f32* %141 = OpVariable Private 
                                         f32 %156 = OpConstant 3.674022E-40 
                                         f32 %160 = OpConstant 3.674022E-40 
                                         f32 %204 = OpConstant 3.674022E-40 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         f32 %217 = OpConstant 3.674022E-40 
                                             %221 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %222 = OpTypePointer UniformConstant %221 
        UniformConstant read_only Texture2D* %223 = OpVariable UniformConstant 
                                             %225 = OpTypeSampler 
                                             %226 = OpTypePointer UniformConstant %225 
                    UniformConstant sampler* %227 = OpVariable UniformConstant 
                                             %229 = OpTypeSampledImage %221 
                                             %231 = OpTypeVector %6 2 
                                             %232 = OpTypePointer Input %231 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %238 = OpConstant 6 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_3 %244 = OpConstantComposite %243 %243 %243 
                                         i32 %250 = OpConstant 5 
                                         f32 %264 = OpConstant 3.674022E-40 
                                       f32_3 %265 = OpConstantComposite %264 %264 %264 
                                             %270 = OpTypeBool 
                                             %271 = OpTypePointer Private %270 
                               Private bool* %272 = OpVariable Private 
                              Private f32_3* %280 = OpVariable Private 
                                         i32 %283 = OpConstant 3 
                                         i32 %296 = OpConstant 2 
        UniformConstant read_only Texture2D* %313 = OpVariable UniformConstant 
                    UniformConstant sampler* %315 = OpVariable UniformConstant 
                              Private f32_3* %328 = OpVariable Private 
                                         f32 %345 = OpConstant 3.674022E-40 
                                       f32_3 %358 = OpConstantComposite %100 %100 %100 
                                         f32 %423 = OpConstant 3.674022E-40 
                                             %433 = OpTypePointer Output %14 
                               Output f32_4* %434 = OpVariable Output 
        UniformConstant read_only Texture2D* %443 = OpVariable UniformConstant 
                    UniformConstant sampler* %445 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                         u32 %451 = OpConstant 3 
                                         i32 %456 = OpConstant 7 
                                             %463 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                          f32 %34 = OpLoad %28 
                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFMul %35 %36 
                                                      OpStore %9 %37 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_4* %43 = OpAccessChain %20 %41 
                                        f32_4 %44 = OpLoad %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                        f32_3 %46 = OpFAdd %40 %45 
                                                      OpStore %38 %46 
                                        f32_3 %47 = OpLoad %38 
                                        f32_3 %48 = OpLoad %38 
                                          f32 %49 = OpDot %47 %48 
                                                      OpStore %28 %49 
                                          f32 %50 = OpLoad %28 
                                          f32 %51 = OpExtInst %1 32 %50 
                                                      OpStore %28 %51 
                                        f32_3 %54 = OpLoad %38 
                                          f32 %55 = OpLoad %28 
                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
                                        f32_3 %57 = OpFMul %54 %56 
                                        f32_3 %58 = OpLoad %9 
                                        f32_3 %59 = OpFAdd %57 %58 
                                        f32_4 %60 = OpLoad %53 
                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
                                                      OpStore %53 %61 
                                          f32 %62 = OpLoad %28 
                                        f32_3 %63 = OpCompositeConstruct %62 %62 %62 
                                        f32_3 %64 = OpLoad %38 
                                        f32_3 %65 = OpFMul %63 %64 
                                                      OpStore %38 %65 
                                        f32_4 %66 = OpLoad %53 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_4 %68 = OpLoad %53 
                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
                                          f32 %70 = OpDot %67 %69 
                                                      OpStore %28 %70 
                                          f32 %71 = OpLoad %28 
                                          f32 %73 = OpExtInst %1 40 %71 %72 
                                                      OpStore %28 %73 
                                          f32 %74 = OpLoad %28 
                                          f32 %75 = OpExtInst %1 32 %74 
                                                      OpStore %28 %75 
                                          f32 %76 = OpLoad %28 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_4 %78 = OpLoad %53 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %53 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %53 %82 
                                        f32_3 %84 = OpLoad vs_TEXCOORD1 
                                        f32_3 %85 = OpLoad vs_TEXCOORD1 
                                          f32 %86 = OpDot %84 %85 
                                                      OpStore %28 %86 
                                          f32 %87 = OpLoad %28 
                                          f32 %88 = OpExtInst %1 32 %87 
                                                      OpStore %28 %88 
                                          f32 %90 = OpLoad %28 
                                        f32_3 %91 = OpCompositeConstruct %90 %90 %90 
                                        f32_3 %92 = OpLoad vs_TEXCOORD1 
                                        f32_3 %93 = OpFMul %91 %92 
                                                      OpStore %89 %93 
                                        f32_3 %94 = OpLoad %89 
                                        f32_4 %95 = OpLoad %53 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                          f32 %97 = OpDot %94 %96 
                                                      OpStore %28 %97 
                                          f32 %98 = OpLoad %28 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                                      OpStore %28 %101 
                                       f32_3 %103 = OpLoad %38 
                                       f32_4 %104 = OpLoad %53 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %103 %105 
                                                      OpStore %102 %106 
                                         f32 %107 = OpLoad %102 
                                         f32 %108 = OpExtInst %1 43 %107 %99 %100 
                                                      OpStore %102 %108 
                                       f32_3 %109 = OpLoad %89 
                                       f32_3 %110 = OpLoad %38 
                                         f32 %111 = OpDot %109 %110 
                                Private f32* %113 = OpAccessChain %38 %112 
                                                      OpStore %113 %111 
                                Private f32* %114 = OpAccessChain %38 %112 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpExtInst %1 43 %115 %99 %100 
                                Private f32* %117 = OpAccessChain %38 %112 
                                                      OpStore %117 %116 
                                       f32_3 %118 = OpLoad %89 
                                       f32_3 %119 = OpLoad %9 
                                         f32 %120 = OpDot %118 %119 
                                Private f32* %121 = OpAccessChain %9 %112 
                                                      OpStore %121 %120 
                                Uniform f32* %125 = OpAccessChain %20 %123 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %100 
                                                      OpStore %122 %128 
                                         f32 %130 = OpLoad %122 
                                         f32 %131 = OpLoad %122 
                                         f32 %132 = OpFMul %130 %131 
                                                      OpStore %129 %132 
                                         f32 %133 = OpLoad %129 
                                         f32 %135 = OpExtInst %1 40 %133 %134 
                                                      OpStore %129 %135 
                                         f32 %137 = OpLoad %129 
                                         f32 %138 = OpLoad %129 
                                         f32 %139 = OpFMul %137 %138 
                                Private f32* %140 = OpAccessChain %136 %112 
                                                      OpStore %140 %139 
                                         f32 %142 = OpLoad %28 
                                Private f32* %143 = OpAccessChain %136 %112 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %142 %144 
                                         f32 %146 = OpLoad %28 
                                         f32 %147 = OpFNegate %146 
                                         f32 %148 = OpFAdd %145 %147 
                                                      OpStore %141 %148 
                                         f32 %149 = OpLoad %141 
                                         f32 %150 = OpLoad %28 
                                         f32 %151 = OpFMul %149 %150 
                                         f32 %152 = OpFAdd %151 %100 
                                                      OpStore %28 %152 
                                         f32 %153 = OpLoad %28 
                                         f32 %154 = OpLoad %28 
                                         f32 %155 = OpFMul %153 %154 
                                         f32 %157 = OpFAdd %155 %156 
                                                      OpStore %28 %157 
                                Private f32* %158 = OpAccessChain %136 %112 
                                         f32 %159 = OpLoad %158 
                                         f32 %161 = OpFMul %159 %160 
                                Private f32* %162 = OpAccessChain %136 %112 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %136 %112 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpLoad %28 
                                         f32 %166 = OpFDiv %164 %165 
                                                      OpStore %28 %166 
                                         f32 %167 = OpLoad %129 
                                         f32 %168 = OpFNegate %167 
                                         f32 %169 = OpFAdd %168 %100 
                                Private f32* %170 = OpAccessChain %136 %112 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %9 %112 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpExtInst %1 4 %172 
                                Private f32* %174 = OpAccessChain %136 %112 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFMul %173 %175 
                                         f32 %177 = OpLoad %129 
                                         f32 %178 = OpFAdd %176 %177 
                                                      OpStore %141 %178 
                                Private f32* %179 = OpAccessChain %38 %112 
                                         f32 %180 = OpLoad %179 
                                Private f32* %181 = OpAccessChain %136 %112 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                         f32 %184 = OpLoad %129 
                                         f32 %185 = OpFAdd %183 %184 
                                                      OpStore %129 %185 
                                         f32 %186 = OpLoad %129 
                                Private f32* %187 = OpAccessChain %9 %112 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 4 %188 
                                         f32 %190 = OpFMul %186 %189 
                                                      OpStore %129 %190 
                                Private f32* %191 = OpAccessChain %9 %112 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpExtInst %1 4 %192 
                                         f32 %194 = OpFNegate %193 
                                         f32 %195 = OpFAdd %194 %100 
                                Private f32* %196 = OpAccessChain %9 %112 
                                                      OpStore %196 %195 
                                Private f32* %197 = OpAccessChain %38 %112 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpLoad %141 
                                         f32 %200 = OpFMul %198 %199 
                                         f32 %201 = OpLoad %129 
                                         f32 %202 = OpFAdd %200 %201 
                                                      OpStore %129 %202 
                                         f32 %203 = OpLoad %129 
                                         f32 %205 = OpFAdd %203 %204 
                                                      OpStore %129 %205 
                                         f32 %207 = OpLoad %129 
                                         f32 %208 = OpFDiv %206 %207 
                                                      OpStore %129 %208 
                                         f32 %209 = OpLoad %28 
                                         f32 %210 = OpLoad %129 
                                         f32 %211 = OpFMul %209 %210 
                                                      OpStore %129 %211 
                                Private f32* %212 = OpAccessChain %38 %112 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpLoad %129 
                                         f32 %215 = OpFMul %213 %214 
                                                      OpStore %129 %215 
                                         f32 %216 = OpLoad %129 
                                         f32 %218 = OpFMul %216 %217 
                                                      OpStore %129 %218 
                                         f32 %219 = OpLoad %129 
                                         f32 %220 = OpExtInst %1 40 %219 %99 
                                                      OpStore %129 %220 
                         read_only Texture2D %224 = OpLoad %223 
                                     sampler %228 = OpLoad %227 
                  read_only Texture2DSampled %230 = OpSampledImage %224 %228 
                                       f32_2 %234 = OpLoad vs_TEXCOORD0 
                                       f32_4 %235 = OpImageSampleImplicitLod %230 %234 
                                                      OpStore %53 %235 
                                       f32_4 %236 = OpLoad %53 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                              Uniform f32_4* %239 = OpAccessChain %20 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %237 %241 
                                       f32_3 %245 = OpFAdd %242 %244 
                                                      OpStore %89 %245 
                                       f32_4 %246 = OpLoad %53 
                              Uniform f32_4* %247 = OpAccessChain %20 %238 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpFMul %246 %248 
                                                      OpStore %53 %249 
                                Uniform f32* %251 = OpAccessChain %20 %250 
                                         f32 %252 = OpLoad %251 
                                Uniform f32* %253 = OpAccessChain %20 %250 
                                         f32 %254 = OpLoad %253 
                                Uniform f32* %255 = OpAccessChain %20 %250 
                                         f32 %256 = OpLoad %255 
                                       f32_3 %257 = OpCompositeConstruct %252 %254 %256 
                                         f32 %258 = OpCompositeExtract %257 0 
                                         f32 %259 = OpCompositeExtract %257 1 
                                         f32 %260 = OpCompositeExtract %257 2 
                                       f32_3 %261 = OpCompositeConstruct %258 %259 %260 
                                       f32_3 %262 = OpLoad %89 
                                       f32_3 %263 = OpFMul %261 %262 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %89 %266 
                                       f32_3 %267 = OpLoad %89 
                                       f32_3 %268 = OpLoad %89 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %28 %269 
                                         f32 %273 = OpLoad %28 
                                        bool %274 = OpFOrdNotEqual %273 %99 
                                                      OpStore %272 %274 
                                        bool %275 = OpLoad %272 
                                         f32 %276 = OpSelect %275 %100 %99 
                                                      OpStore %28 %276 
                                         f32 %277 = OpLoad %28 
                                         f32 %278 = OpLoad %129 
                                         f32 %279 = OpFMul %277 %278 
                                                      OpStore %129 %279 
                                       f32_3 %281 = OpLoad vs_TEXCOORD2 
                                       f32_3 %282 = OpVectorShuffle %281 %281 1 1 1 
                              Uniform f32_4* %284 = OpAccessChain %20 %283 %41 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFMul %282 %286 
                                                      OpStore %280 %287 
                              Uniform f32_4* %288 = OpAccessChain %20 %283 %22 
                                       f32_4 %289 = OpLoad %288 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpLoad vs_TEXCOORD2 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 0 0 
                                       f32_3 %293 = OpFMul %290 %292 
                                       f32_3 %294 = OpLoad %280 
                                       f32_3 %295 = OpFAdd %293 %294 
                                                      OpStore %280 %295 
                              Uniform f32_4* %297 = OpAccessChain %20 %283 %296 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpLoad vs_TEXCOORD2 
                                       f32_3 %301 = OpVectorShuffle %300 %300 2 2 2 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_3 %303 = OpLoad %280 
                                       f32_3 %304 = OpFAdd %302 %303 
                                                      OpStore %280 %304 
                                       f32_3 %305 = OpLoad %280 
                              Uniform f32_4* %306 = OpAccessChain %20 %283 %283 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFAdd %305 %308 
                                                      OpStore %280 %309 
                                       f32_3 %310 = OpLoad %280 
                                       f32_3 %311 = OpLoad %280 
                                         f32 %312 = OpDot %310 %311 
                                                      OpStore %28 %312 
                         read_only Texture2D %314 = OpLoad %313 
                                     sampler %316 = OpLoad %315 
                  read_only Texture2DSampled %317 = OpSampledImage %314 %316 
                                         f32 %318 = OpLoad %28 
                                       f32_2 %319 = OpCompositeConstruct %318 %318 
                                       f32_4 %320 = OpImageSampleImplicitLod %317 %319 
                                         f32 %321 = OpCompositeExtract %320 0 
                                                      OpStore %28 %321 
                                         f32 %322 = OpLoad %28 
                                       f32_3 %323 = OpCompositeConstruct %322 %322 %322 
                              Uniform f32_4* %324 = OpAccessChain %20 %296 
                                       f32_4 %325 = OpLoad %324 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_3 %327 = OpFMul %323 %326 
                                                      OpStore %280 %327 
                                         f32 %329 = OpLoad %129 
                                       f32_3 %330 = OpCompositeConstruct %329 %329 %329 
                                       f32_3 %331 = OpLoad %280 
                                       f32_3 %332 = OpFMul %330 %331 
                                                      OpStore %328 %332 
                                         f32 %333 = OpLoad %102 
                                         f32 %334 = OpFNegate %333 
                                         f32 %335 = OpFAdd %334 %100 
                                                      OpStore %129 %335 
                                         f32 %336 = OpLoad %102 
                                         f32 %337 = OpLoad %102 
                                         f32 %338 = OpFMul %336 %337 
                                                      OpStore %28 %338 
                                         f32 %339 = OpLoad %28 
                                       f32_2 %340 = OpCompositeConstruct %339 %339 
                                         f32 %341 = OpLoad %122 
                                       f32_2 %342 = OpCompositeConstruct %341 %341 
                                         f32 %343 = OpDot %340 %342 
                                                      OpStore %122 %343 
                                         f32 %344 = OpLoad %122 
                                         f32 %346 = OpFAdd %344 %345 
                                                      OpStore %122 %346 
                                         f32 %347 = OpLoad %129 
                                         f32 %348 = OpLoad %129 
                                         f32 %349 = OpFMul %347 %348 
                                                      OpStore %28 %349 
                                         f32 %350 = OpLoad %28 
                                         f32 %351 = OpLoad %28 
                                         f32 %352 = OpFMul %350 %351 
                                                      OpStore %28 %352 
                                         f32 %353 = OpLoad %129 
                                         f32 %354 = OpLoad %28 
                                         f32 %355 = OpFMul %353 %354 
                                                      OpStore %129 %355 
                                       f32_3 %356 = OpLoad %89 
                                       f32_3 %357 = OpFNegate %356 
                                       f32_3 %359 = OpFAdd %357 %358 
                                                      OpStore %136 %359 
                                       f32_3 %360 = OpLoad %136 
                                         f32 %361 = OpLoad %129 
                                       f32_3 %362 = OpCompositeConstruct %361 %361 %361 
                                       f32_3 %363 = OpFMul %360 %362 
                                       f32_3 %364 = OpLoad %89 
                                       f32_3 %365 = OpFAdd %363 %364 
                                                      OpStore %136 %365 
                                       f32_3 %366 = OpLoad %136 
                                       f32_3 %367 = OpLoad %328 
                                       f32_3 %368 = OpFMul %366 %367 
                                                      OpStore %136 %368 
                                Private f32* %369 = OpAccessChain %9 %112 
                                         f32 %370 = OpLoad %369 
                                Private f32* %371 = OpAccessChain %9 %112 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpFMul %370 %372 
                                                      OpStore %129 %373 
                                         f32 %374 = OpLoad %129 
                                         f32 %375 = OpLoad %129 
                                         f32 %376 = OpFMul %374 %375 
                                                      OpStore %129 %376 
                                Private f32* %377 = OpAccessChain %9 %112 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpLoad %129 
                                         f32 %380 = OpFMul %378 %379 
                                Private f32* %381 = OpAccessChain %9 %112 
                                                      OpStore %381 %380 
                                         f32 %382 = OpLoad %122 
                                Private f32* %383 = OpAccessChain %9 %112 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFMul %382 %384 
                                         f32 %386 = OpFAdd %385 %100 
                                Private f32* %387 = OpAccessChain %9 %112 
                                                      OpStore %387 %386 
                                Private f32* %388 = OpAccessChain %38 %112 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFNegate %389 
                                         f32 %391 = OpFAdd %390 %100 
                                                      OpStore %129 %391 
                                         f32 %392 = OpLoad %129 
                                         f32 %393 = OpLoad %129 
                                         f32 %394 = OpFMul %392 %393 
                                                      OpStore %28 %394 
                                         f32 %395 = OpLoad %28 
                                         f32 %396 = OpLoad %28 
                                         f32 %397 = OpFMul %395 %396 
                                                      OpStore %28 %397 
                                         f32 %398 = OpLoad %129 
                                         f32 %399 = OpLoad %28 
                                         f32 %400 = OpFMul %398 %399 
                                                      OpStore %129 %400 
                                         f32 %401 = OpLoad %122 
                                         f32 %402 = OpLoad %129 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %100 
                                                      OpStore %122 %404 
                                Private f32* %405 = OpAccessChain %9 %112 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpLoad %122 
                                         f32 %408 = OpFMul %406 %407 
                                Private f32* %409 = OpAccessChain %9 %112 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %38 %112 
                                         f32 %411 = OpLoad %410 
                                Private f32* %412 = OpAccessChain %9 %112 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpFMul %411 %413 
                                Private f32* %415 = OpAccessChain %9 %112 
                                                      OpStore %415 %414 
                                       f32_3 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 0 0 
                                       f32_3 %418 = OpLoad %280 
                                       f32_3 %419 = OpFMul %417 %418 
                                                      OpStore %9 %419 
                                Uniform f32* %420 = OpAccessChain %20 %250 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFNegate %421 
                                         f32 %424 = OpFMul %422 %423 
                                         f32 %425 = OpFAdd %424 %423 
                                                      OpStore %28 %425 
                                         f32 %426 = OpLoad %28 
                                       f32_3 %427 = OpCompositeConstruct %426 %426 %426 
                                       f32_4 %428 = OpLoad %53 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                       f32_3 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %53 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                                      OpStore %53 %432 
                                       f32_4 %435 = OpLoad %53 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpLoad %9 
                                       f32_3 %438 = OpFMul %436 %437 
                                       f32_3 %439 = OpLoad %136 
                                       f32_3 %440 = OpFAdd %438 %439 
                                       f32_4 %441 = OpLoad %434 
                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 6 3 
                                                      OpStore %434 %442 
                         read_only Texture2D %444 = OpLoad %443 
                                     sampler %446 = OpLoad %445 
                  read_only Texture2DSampled %447 = OpSampledImage %444 %446 
                                       f32_2 %449 = OpLoad vs_TEXCOORD3 
                                       f32_4 %450 = OpImageSampleImplicitLod %447 %449 
                                         f32 %452 = OpCompositeExtract %450 3 
                                Private f32* %453 = OpAccessChain %9 %112 
                                                      OpStore %453 %452 
                                Private f32* %454 = OpAccessChain %9 %112 
                                         f32 %455 = OpLoad %454 
                                Uniform f32* %457 = OpAccessChain %20 %456 %451 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %455 %458 
                                Private f32* %460 = OpAccessChain %53 %451 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpFAdd %459 %461 
                                 Output f32* %464 = OpAccessChain %434 %451 
                                                      OpStore %464 %462 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec2 u_xlat4;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat4.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat0.xy = (-u_xlat0.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat4.xy;
    u_xlat0.xy = u_xlat0.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat0.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
float u_xlat17;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 0.00100000005);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = (-_Glossiness) + 1.0;
    u_xlat11 = u_xlat6 * u_xlat6;
    u_xlat11 = max(u_xlat11, 0.00200000009);
    u_xlat16 = u_xlat11 * u_xlat11;
    u_xlat17 = u_xlat15 * u_xlat16 + (-u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15 + 1.0;
    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat15 = u_xlat16 / u_xlat15;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat10 = (-u_xlat11) + 1.0;
    u_xlat16 = abs(u_xlat0.x) * u_xlat10 + u_xlat11;
    u_xlat10 = u_xlat5 * u_xlat10 + u_xlat11;
    u_xlat10 = u_xlat10 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat10 = u_xlat5 * u_xlat16 + u_xlat10;
    u_xlat10 = u_xlat10 + 9.99999975e-06;
    u_xlat10 = 0.5 / u_xlat10;
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat10 = u_xlat10 * 3.14159274;
    u_xlat10 = u_xlat5 * u_xlat10;
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2 = u_xlat2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb15 = u_xlat15!=0.0;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat4.xyz = vec3(u_xlat10) * _LightColor0.xyz;
    u_xlat10 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(vec2(u_xlat15), vec2(u_xlat6));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat1.x = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat1.x;
    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat10 = u_xlat0.x * u_xlat0.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat0.x = u_xlat0.x * u_xlat10;
    u_xlat0.x = u_xlat15 * u_xlat0.x + 1.0;
    u_xlat10 = (-u_xlat5) + 1.0;
    u_xlat16 = u_xlat10 * u_xlat10;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat10 * u_xlat16;
    u_xlat10 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10;
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat15 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    SV_Target0.w = u_xlat0.w * _RedDotColor.w + u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %74 %135 %210 %216 %217 %230 %260 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpMemberDecorate %20 7 Offset 20 
                                                      OpMemberDecorate %20 8 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %72 0 BuiltIn 72 
                                                      OpMemberDecorate %72 1 BuiltIn 72 
                                                      OpMemberDecorate %72 2 BuiltIn 72 
                                                      OpDecorate %72 Block 
                                                      OpDecorate vs_TEXCOORD2 Location 135 
                                                      OpDecorate vs_TEXCOORD3 Location 210 
                                                      OpDecorate vs_TEXCOORD0 Location 216 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %230 Location 230 
                                                      OpDecorate vs_TEXCOORD1 Location 260 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeStruct %14 %17 %18 %19 %6 %6 %6 %6 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %50 = OpVariable Private 
                                          u32 %70 = OpConstant 1 
                                              %71 = OpTypeArray %6 %70 
                                              %72 = OpTypeStruct %7 %6 %71 
                                              %73 = OpTypePointer Output %72 
         Output struct {f32_4; f32; f32[1];}* %74 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                             %128 = OpTypePointer Uniform %14 
                                             %134 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %138 = OpTypeVector %6 2 
                                             %169 = OpTypePointer Private %138 
                              Private f32_2* %170 = OpVariable Private 
                                         i32 %173 = OpConstant 6 
                                             %174 = OpTypePointer Uniform %6 
                                         i32 %177 = OpConstant 7 
                                         i32 %186 = OpConstant 5 
                                         i32 %202 = OpConstant 4 
                                             %209 = OpTypePointer Output %138 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %213 = OpConstant 3.674022E-40 
                                       f32_2 %214 = OpConstantComposite %213 %213 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %217 = OpVariable Input 
                                         i32 %220 = OpConstant 8 
                                             %229 = OpTypePointer Input %14 
                                Input f32_3* %230 = OpVariable Input 
                                         u32 %236 = OpConstant 0 
                                             %237 = OpTypePointer Private %6 
                                         u32 %250 = OpConstant 2 
                                Private f32* %252 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %22 %24 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %9 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 1 1 1 1 
                               Uniform f32_4* %53 = OpAccessChain %22 %46 %24 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpFMul %52 %54 
                                                      OpStore %50 %55 
                               Uniform f32_4* %56 = OpAccessChain %22 %46 %29 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %50 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %50 %62 
                               Uniform f32_4* %63 = OpAccessChain %22 %46 %37 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %9 
                                        f32_4 %66 = OpVectorShuffle %65 %65 2 2 2 2 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %50 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %50 %69 
                               Uniform f32_4* %75 = OpAccessChain %22 %46 %46 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_4 %78 = OpVectorShuffle %77 %77 3 3 3 3 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %50 
                                        f32_4 %81 = OpFAdd %79 %80 
                                Output f32_4* %83 = OpAccessChain %74 %29 
                                                      OpStore %83 %81 
                                        f32_4 %84 = OpLoad %11 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %22 %24 %24 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %85 %88 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 6 3 
                                                      OpStore %9 %91 
                               Uniform f32_4* %92 = OpAccessChain %22 %24 %29 
                                        f32_4 %93 = OpLoad %92 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_4 %95 = OpLoad %11 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFAdd %97 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 6 3 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %22 %24 %37 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %11 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                              Uniform f32_4* %114 = OpAccessChain %22 %24 %46 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_4 %117 = OpLoad %11 
                                       f32_3 %118 = OpVectorShuffle %117 %117 3 3 3 
                                       f32_3 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %119 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %9 %124 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFNegate %126 
                              Uniform f32_3* %129 = OpAccessChain %22 %29 
                                       f32_3 %130 = OpLoad %129 
                                       f32_3 %131 = OpFAdd %127 %130 
                                       f32_4 %132 = OpLoad %50 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %50 %133 
                                       f32_4 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                                      OpStore vs_TEXCOORD2 %137 
                                       f32_4 %139 = OpLoad %50 
                                       f32_2 %140 = OpVectorShuffle %139 %139 1 1 
                              Uniform f32_4* %141 = OpAccessChain %22 %37 %24 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %144 = OpFMul %140 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 2 3 
                                                      OpStore %9 %146 
                              Uniform f32_4* %147 = OpAccessChain %22 %37 %29 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_4 %150 = OpLoad %50 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 0 
                                       f32_2 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFAdd %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 2 3 
                                                      OpStore %9 %157 
                              Uniform f32_4* %158 = OpAccessChain %22 %37 %37 
                                       f32_4 %159 = OpLoad %158 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                       f32_4 %161 = OpLoad %50 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 2 
                                       f32_2 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %9 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFAdd %163 %165 
                                       f32_4 %167 = OpLoad %9 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 2 3 
                                                      OpStore %9 %168 
                                       f32_4 %171 = OpLoad %11 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                Uniform f32* %175 = OpAccessChain %22 %173 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %178 = OpAccessChain %22 %177 
                                         f32 %179 = OpLoad %178 
                                       f32_2 %180 = OpCompositeConstruct %176 %179 
                                       f32_2 %181 = OpFNegate %180 
                                       f32_2 %182 = OpFAdd %172 %181 
                                                      OpStore %170 %182 
                                       f32_4 %183 = OpLoad %9 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFNegate %184 
                                Uniform f32* %187 = OpAccessChain %22 %186 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %22 %186 
                                         f32 %190 = OpLoad %189 
                                       f32_2 %191 = OpCompositeConstruct %188 %190 
                                         f32 %192 = OpCompositeExtract %191 0 
                                         f32 %193 = OpCompositeExtract %191 1 
                                       f32_2 %194 = OpCompositeConstruct %192 %193 
                                       f32_2 %195 = OpFMul %185 %194 
                                       f32_2 %196 = OpLoad %170 
                                       f32_2 %197 = OpFAdd %195 %196 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %9 %199 
                                       f32_4 %200 = OpLoad %9 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                Uniform f32* %203 = OpAccessChain %22 %202 
                                         f32 %204 = OpLoad %203 
                                       f32_2 %205 = OpCompositeConstruct %204 %204 
                                       f32_2 %206 = OpFDiv %201 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 2 3 
                                                      OpStore %9 %208 
                                       f32_4 %211 = OpLoad %9 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %215 = OpFAdd %212 %214 
                                                      OpStore vs_TEXCOORD3 %215 
                                       f32_4 %218 = OpLoad %217 
                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
                              Uniform f32_4* %221 = OpAccessChain %22 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_2 %223 = OpVectorShuffle %222 %222 0 1 
                                       f32_2 %224 = OpFMul %219 %223 
                              Uniform f32_4* %225 = OpAccessChain %22 %220 
                                       f32_4 %226 = OpLoad %225 
                                       f32_2 %227 = OpVectorShuffle %226 %226 2 3 
                                       f32_2 %228 = OpFAdd %224 %227 
                                                      OpStore vs_TEXCOORD0 %228 
                                       f32_3 %231 = OpLoad %230 
                              Uniform f32_4* %232 = OpAccessChain %22 %37 %29 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %231 %234 
                                Private f32* %238 = OpAccessChain %9 %236 
                                                      OpStore %238 %235 
                                       f32_3 %239 = OpLoad %230 
                              Uniform f32_4* %240 = OpAccessChain %22 %37 %24 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                         f32 %243 = OpDot %239 %242 
                                Private f32* %244 = OpAccessChain %9 %70 
                                                      OpStore %244 %243 
                                       f32_3 %245 = OpLoad %230 
                              Uniform f32_4* %246 = OpAccessChain %22 %37 %37 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %245 %248 
                                Private f32* %251 = OpAccessChain %9 %250 
                                                      OpStore %251 %249 
                                       f32_4 %253 = OpLoad %9 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpDot %254 %256 
                                                      OpStore %252 %257 
                                         f32 %258 = OpLoad %252 
                                         f32 %259 = OpExtInst %1 32 %258 
                                                      OpStore %252 %259 
                                         f32 %261 = OpLoad %252 
                                       f32_3 %262 = OpCompositeConstruct %261 %261 %261 
                                       f32_4 %263 = OpLoad %9 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                                      OpStore vs_TEXCOORD1 %265 
                                 Output f32* %267 = OpAccessChain %74 %29 %70 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %74 %29 %70 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 404
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %58 %207 %372 %386 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 58 
                                                      OpDecorate %197 DescriptorSet 197 
                                                      OpDecorate %197 Binding 197 
                                                      OpDecorate %201 DescriptorSet 201 
                                                      OpDecorate %201 Binding 201 
                                                      OpDecorate vs_TEXCOORD0 Location 207 
                                                      OpDecorate %372 Location 372 
                                                      OpDecorate %381 DescriptorSet 381 
                                                      OpDecorate %381 Binding 381 
                                                      OpDecorate %383 DescriptorSet 383 
                                                      OpDecorate %383 Binding 383 
                                                      OpDecorate vs_TEXCOORD3 Location 386 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %7 %14 %14 %6 %6 %14 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %7 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                               Private f32_3* %31 = OpVariable Private 
                                          i32 %36 = OpConstant 1 
                                              %37 = OpTypePointer Uniform %14 
                                          f32 %50 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %64 = OpTypePointer Private %14 
                               Private f32_4* %65 = OpVariable Private 
                                          f32 %77 = OpConstant 3.674022E-40 
                                          f32 %78 = OpConstant 3.674022E-40 
                                              %85 = OpTypeInt 32 0 
                                          u32 %86 = OpConstant 0 
                                 Private f32* %92 = OpVariable Private 
                                          i32 %93 = OpConstant 3 
                                              %94 = OpTypePointer Uniform %6 
                                 Private f32* %99 = OpVariable Private 
                                         f32 %104 = OpConstant 3.674022E-40 
                                Private f32* %106 = OpVariable Private 
                                Private f32* %110 = OpVariable Private 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %127 = OpConstant 3.674022E-40 
                                Private f32* %137 = OpVariable Private 
                                Private f32* %146 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                         f32 %181 = OpConstant 3.674022E-40 
                                         f32 %191 = OpConstant 3.674022E-40 
                                             %195 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %196 = OpTypePointer UniformConstant %195 
        UniformConstant read_only Texture2D* %197 = OpVariable UniformConstant 
                                             %199 = OpTypeSampler 
                                             %200 = OpTypePointer UniformConstant %199 
                    UniformConstant sampler* %201 = OpVariable UniformConstant 
                                             %203 = OpTypeSampledImage %195 
                                             %205 = OpTypeVector %6 2 
                                             %206 = OpTypePointer Input %205 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                              Private f32_3* %210 = OpVariable Private 
                                         i32 %213 = OpConstant 5 
                                         f32 %218 = OpConstant 3.674022E-40 
                                       f32_3 %219 = OpConstantComposite %218 %218 %218 
                                         i32 %225 = OpConstant 4 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                             %245 = OpTypeBool 
                                             %246 = OpTypePointer Private %245 
                               Private bool* %247 = OpVariable Private 
                              Private f32_3* %255 = OpVariable Private 
                                         i32 %258 = OpConstant 2 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %296 = OpConstantComposite %78 %78 %78 
                                         f32 %361 = OpConstant 3.674022E-40 
                                             %371 = OpTypePointer Output %14 
                               Output f32_4* %372 = OpVariable Output 
        UniformConstant read_only Texture2D* %381 = OpVariable UniformConstant 
                    UniformConstant sampler* %383 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                         u32 %389 = OpConstant 3 
                                         i32 %394 = OpConstant 6 
                                             %401 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %13 %22 
                                                      OpStore %9 %23 
                                        f32_3 %26 = OpLoad %9 
                                        f32_3 %27 = OpLoad %9 
                                          f32 %28 = OpDot %26 %27 
                                                      OpStore %25 %28 
                                          f32 %29 = OpLoad %25 
                                          f32 %30 = OpExtInst %1 32 %29 
                                                      OpStore %25 %30 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpLoad %25 
                                        f32_3 %34 = OpCompositeConstruct %33 %33 %33 
                                        f32_3 %35 = OpFMul %32 %34 
                               Uniform f32_4* %38 = OpAccessChain %17 %36 
                                        f32_4 %39 = OpLoad %38 
                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                        f32_3 %41 = OpFAdd %35 %40 
                                                      OpStore %31 %41 
                                          f32 %42 = OpLoad %25 
                                        f32_3 %43 = OpCompositeConstruct %42 %42 %42 
                                        f32_3 %44 = OpLoad %9 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %9 %45 
                                        f32_3 %46 = OpLoad %31 
                                        f32_3 %47 = OpLoad %31 
                                          f32 %48 = OpDot %46 %47 
                                                      OpStore %25 %48 
                                          f32 %49 = OpLoad %25 
                                          f32 %51 = OpExtInst %1 40 %49 %50 
                                                      OpStore %25 %51 
                                          f32 %52 = OpLoad %25 
                                          f32 %53 = OpExtInst %1 32 %52 
                                                      OpStore %25 %53 
                                          f32 %54 = OpLoad %25 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpLoad %31 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %31 %57 
                                        f32_3 %59 = OpLoad vs_TEXCOORD1 
                                        f32_3 %60 = OpLoad vs_TEXCOORD1 
                                          f32 %61 = OpDot %59 %60 
                                                      OpStore %25 %61 
                                          f32 %62 = OpLoad %25 
                                          f32 %63 = OpExtInst %1 32 %62 
                                                      OpStore %25 %63 
                                          f32 %66 = OpLoad %25 
                                        f32_3 %67 = OpCompositeConstruct %66 %66 %66 
                                        f32_3 %68 = OpLoad vs_TEXCOORD1 
                                        f32_3 %69 = OpFMul %67 %68 
                                        f32_4 %70 = OpLoad %65 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                                      OpStore %65 %71 
                                        f32_4 %72 = OpLoad %65 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpLoad %31 
                                          f32 %75 = OpDot %73 %74 
                                                      OpStore %25 %75 
                                          f32 %76 = OpLoad %25 
                                          f32 %79 = OpExtInst %1 43 %76 %77 %78 
                                                      OpStore %25 %79 
                               Uniform f32_4* %80 = OpAccessChain %17 %36 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpLoad %31 
                                          f32 %84 = OpDot %82 %83 
                                 Private f32* %87 = OpAccessChain %31 %86 
                                                      OpStore %87 %84 
                                 Private f32* %88 = OpAccessChain %31 %86 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpExtInst %1 43 %89 %77 %78 
                                 Private f32* %91 = OpAccessChain %31 %86 
                                                      OpStore %91 %90 
                                 Uniform f32* %95 = OpAccessChain %17 %93 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFNegate %96 
                                          f32 %98 = OpFAdd %97 %78 
                                                      OpStore %92 %98 
                                         f32 %100 = OpLoad %92 
                                         f32 %101 = OpLoad %92 
                                         f32 %102 = OpFMul %100 %101 
                                                      OpStore %99 %102 
                                         f32 %103 = OpLoad %99 
                                         f32 %105 = OpExtInst %1 40 %103 %104 
                                                      OpStore %99 %105 
                                         f32 %107 = OpLoad %99 
                                         f32 %108 = OpLoad %99 
                                         f32 %109 = OpFMul %107 %108 
                                                      OpStore %106 %109 
                                         f32 %111 = OpLoad %25 
                                         f32 %112 = OpLoad %106 
                                         f32 %113 = OpFMul %111 %112 
                                         f32 %114 = OpLoad %25 
                                         f32 %115 = OpFNegate %114 
                                         f32 %116 = OpFAdd %113 %115 
                                                      OpStore %110 %116 
                                         f32 %117 = OpLoad %110 
                                         f32 %118 = OpLoad %25 
                                         f32 %119 = OpFMul %117 %118 
                                         f32 %120 = OpFAdd %119 %78 
                                                      OpStore %25 %120 
                                         f32 %121 = OpLoad %25 
                                         f32 %122 = OpLoad %25 
                                         f32 %123 = OpFMul %121 %122 
                                         f32 %125 = OpFAdd %123 %124 
                                                      OpStore %25 %125 
                                         f32 %126 = OpLoad %106 
                                         f32 %128 = OpFMul %126 %127 
                                                      OpStore %106 %128 
                                         f32 %129 = OpLoad %106 
                                         f32 %130 = OpLoad %25 
                                         f32 %131 = OpFDiv %129 %130 
                                                      OpStore %25 %131 
                                       f32_4 %132 = OpLoad %65 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpLoad %9 
                                         f32 %135 = OpDot %133 %134 
                                Private f32* %136 = OpAccessChain %9 %86 
                                                      OpStore %136 %135 
                                       f32_4 %138 = OpLoad %65 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %17 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %139 %142 
                                                      OpStore %137 %143 
                                         f32 %144 = OpLoad %137 
                                         f32 %145 = OpExtInst %1 43 %144 %77 %78 
                                                      OpStore %137 %145 
                                         f32 %147 = OpLoad %99 
                                         f32 %148 = OpFNegate %147 
                                         f32 %149 = OpFAdd %148 %78 
                                                      OpStore %146 %149 
                                Private f32* %150 = OpAccessChain %9 %86 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpExtInst %1 4 %151 
                                         f32 %153 = OpLoad %146 
                                         f32 %154 = OpFMul %152 %153 
                                         f32 %155 = OpLoad %99 
                                         f32 %156 = OpFAdd %154 %155 
                                                      OpStore %106 %156 
                                         f32 %157 = OpLoad %137 
                                         f32 %158 = OpLoad %146 
                                         f32 %159 = OpFMul %157 %158 
                                         f32 %160 = OpLoad %99 
                                         f32 %161 = OpFAdd %159 %160 
                                                      OpStore %146 %161 
                                         f32 %162 = OpLoad %146 
                                Private f32* %163 = OpAccessChain %9 %86 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpExtInst %1 4 %164 
                                         f32 %166 = OpFMul %162 %165 
                                                      OpStore %146 %166 
                                Private f32* %167 = OpAccessChain %9 %86 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpExtInst %1 4 %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %170 %78 
                                Private f32* %172 = OpAccessChain %9 %86 
                                                      OpStore %172 %171 
                                         f32 %173 = OpLoad %137 
                                         f32 %174 = OpLoad %106 
                                         f32 %175 = OpFMul %173 %174 
                                         f32 %176 = OpLoad %146 
                                         f32 %177 = OpFAdd %175 %176 
                                                      OpStore %146 %177 
                                         f32 %178 = OpLoad %146 
                                         f32 %180 = OpFAdd %178 %179 
                                                      OpStore %146 %180 
                                         f32 %182 = OpLoad %146 
                                         f32 %183 = OpFDiv %181 %182 
                                                      OpStore %146 %183 
                                         f32 %184 = OpLoad %25 
                                         f32 %185 = OpLoad %146 
                                         f32 %186 = OpFMul %184 %185 
                                                      OpStore %146 %186 
                                         f32 %187 = OpLoad %137 
                                         f32 %188 = OpLoad %146 
                                         f32 %189 = OpFMul %187 %188 
                                                      OpStore %146 %189 
                                         f32 %190 = OpLoad %146 
                                         f32 %192 = OpFMul %190 %191 
                                                      OpStore %146 %192 
                                         f32 %193 = OpLoad %146 
                                         f32 %194 = OpExtInst %1 40 %193 %77 
                                                      OpStore %146 %194 
                         read_only Texture2D %198 = OpLoad %197 
                                     sampler %202 = OpLoad %201 
                  read_only Texture2DSampled %204 = OpSampledImage %198 %202 
                                       f32_2 %208 = OpLoad vs_TEXCOORD0 
                                       f32_4 %209 = OpImageSampleImplicitLod %204 %208 
                                                      OpStore %65 %209 
                                       f32_4 %211 = OpLoad %65 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                              Uniform f32_4* %214 = OpAccessChain %17 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFMul %212 %216 
                                       f32_3 %220 = OpFAdd %217 %219 
                                                      OpStore %210 %220 
                                       f32_4 %221 = OpLoad %65 
                              Uniform f32_4* %222 = OpAccessChain %17 %213 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpFMul %221 %223 
                                                      OpStore %65 %224 
                                Uniform f32* %226 = OpAccessChain %17 %225 
                                         f32 %227 = OpLoad %226 
                                Uniform f32* %228 = OpAccessChain %17 %225 
                                         f32 %229 = OpLoad %228 
                                Uniform f32* %230 = OpAccessChain %17 %225 
                                         f32 %231 = OpLoad %230 
                                       f32_3 %232 = OpCompositeConstruct %227 %229 %231 
                                         f32 %233 = OpCompositeExtract %232 0 
                                         f32 %234 = OpCompositeExtract %232 1 
                                         f32 %235 = OpCompositeExtract %232 2 
                                       f32_3 %236 = OpCompositeConstruct %233 %234 %235 
                                       f32_3 %237 = OpLoad %210 
                                       f32_3 %238 = OpFMul %236 %237 
                                       f32_3 %241 = OpFAdd %238 %240 
                                                      OpStore %210 %241 
                                       f32_3 %242 = OpLoad %210 
                                       f32_3 %243 = OpLoad %210 
                                         f32 %244 = OpDot %242 %243 
                                                      OpStore %25 %244 
                                         f32 %248 = OpLoad %25 
                                        bool %249 = OpFOrdNotEqual %248 %77 
                                                      OpStore %247 %249 
                                        bool %250 = OpLoad %247 
                                         f32 %251 = OpSelect %250 %78 %77 
                                                      OpStore %25 %251 
                                         f32 %252 = OpLoad %25 
                                         f32 %253 = OpLoad %146 
                                         f32 %254 = OpFMul %252 %253 
                                                      OpStore %146 %254 
                                         f32 %256 = OpLoad %146 
                                       f32_3 %257 = OpCompositeConstruct %256 %256 %256 
                              Uniform f32_4* %259 = OpAccessChain %17 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpFMul %257 %261 
                                                      OpStore %255 %262 
                                Private f32* %263 = OpAccessChain %31 %86 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                         f32 %266 = OpFAdd %265 %78 
                                                      OpStore %146 %266 
                                Private f32* %267 = OpAccessChain %31 %86 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %31 %86 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFMul %268 %270 
                                                      OpStore %25 %271 
                                         f32 %272 = OpLoad %25 
                                       f32_2 %273 = OpCompositeConstruct %272 %272 
                                         f32 %274 = OpLoad %92 
                                       f32_2 %275 = OpCompositeConstruct %274 %274 
                                         f32 %276 = OpDot %273 %275 
                                                      OpStore %25 %276 
                                         f32 %277 = OpLoad %25 
                                         f32 %279 = OpFAdd %277 %278 
                                                      OpStore %25 %279 
                                         f32 %280 = OpLoad %146 
                                         f32 %281 = OpLoad %146 
                                         f32 %282 = OpFMul %280 %281 
                                Private f32* %283 = OpAccessChain %31 %86 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %31 %86 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %31 %86 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpFMul %285 %287 
                                Private f32* %289 = OpAccessChain %31 %86 
                                                      OpStore %289 %288 
                                         f32 %290 = OpLoad %146 
                                Private f32* %291 = OpAccessChain %31 %86 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFMul %290 %292 
                                                      OpStore %146 %293 
                                       f32_3 %294 = OpLoad %210 
                                       f32_3 %295 = OpFNegate %294 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %31 %297 
                                       f32_3 %298 = OpLoad %31 
                                         f32 %299 = OpLoad %146 
                                       f32_3 %300 = OpCompositeConstruct %299 %299 %299 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_3 %302 = OpLoad %210 
                                       f32_3 %303 = OpFAdd %301 %302 
                                                      OpStore %31 %303 
                                       f32_3 %304 = OpLoad %31 
                                       f32_3 %305 = OpLoad %255 
                                       f32_3 %306 = OpFMul %304 %305 
                                                      OpStore %31 %306 
                                Private f32* %307 = OpAccessChain %9 %86 
                                         f32 %308 = OpLoad %307 
                                Private f32* %309 = OpAccessChain %9 %86 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFMul %308 %310 
                                                      OpStore %146 %311 
                                         f32 %312 = OpLoad %146 
                                         f32 %313 = OpLoad %146 
                                         f32 %314 = OpFMul %312 %313 
                                                      OpStore %146 %314 
                                Private f32* %315 = OpAccessChain %9 %86 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpLoad %146 
                                         f32 %318 = OpFMul %316 %317 
                                Private f32* %319 = OpAccessChain %9 %86 
                                                      OpStore %319 %318 
                                         f32 %320 = OpLoad %25 
                                Private f32* %321 = OpAccessChain %9 %86 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                         f32 %324 = OpFAdd %323 %78 
                                Private f32* %325 = OpAccessChain %9 %86 
                                                      OpStore %325 %324 
                                         f32 %326 = OpLoad %137 
                                         f32 %327 = OpFNegate %326 
                                         f32 %328 = OpFAdd %327 %78 
                                                      OpStore %146 %328 
                                         f32 %329 = OpLoad %146 
                                         f32 %330 = OpLoad %146 
                                         f32 %331 = OpFMul %329 %330 
                                                      OpStore %106 %331 
                                         f32 %332 = OpLoad %106 
                                         f32 %333 = OpLoad %106 
                                         f32 %334 = OpFMul %332 %333 
                                                      OpStore %106 %334 
                                         f32 %335 = OpLoad %146 
                                         f32 %336 = OpLoad %106 
                                         f32 %337 = OpFMul %335 %336 
                                                      OpStore %146 %337 
                                         f32 %338 = OpLoad %25 
                                         f32 %339 = OpLoad %146 
                                         f32 %340 = OpFMul %338 %339 
                                         f32 %341 = OpFAdd %340 %78 
                                                      OpStore %146 %341 
                                Private f32* %342 = OpAccessChain %9 %86 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpLoad %146 
                                         f32 %345 = OpFMul %343 %344 
                                Private f32* %346 = OpAccessChain %9 %86 
                                                      OpStore %346 %345 
                                         f32 %347 = OpLoad %137 
                                Private f32* %348 = OpAccessChain %9 %86 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFMul %347 %349 
                                Private f32* %351 = OpAccessChain %9 %86 
                                                      OpStore %351 %350 
                                       f32_3 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                              Uniform f32_4* %354 = OpAccessChain %17 %258 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFMul %353 %356 
                                                      OpStore %9 %357 
                                Uniform f32* %358 = OpAccessChain %17 %225 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFNegate %359 
                                         f32 %362 = OpFMul %360 %361 
                                         f32 %363 = OpFAdd %362 %361 
                                                      OpStore %25 %363 
                                         f32 %364 = OpLoad %25 
                                       f32_3 %365 = OpCompositeConstruct %364 %364 %364 
                                       f32_4 %366 = OpLoad %65 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpFMul %365 %367 
                                       f32_4 %369 = OpLoad %65 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %65 %370 
                                       f32_4 %373 = OpLoad %65 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpLoad %9 
                                       f32_3 %376 = OpFMul %374 %375 
                                       f32_3 %377 = OpLoad %31 
                                       f32_3 %378 = OpFAdd %376 %377 
                                       f32_4 %379 = OpLoad %372 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %372 %380 
                         read_only Texture2D %382 = OpLoad %381 
                                     sampler %384 = OpLoad %383 
                  read_only Texture2DSampled %385 = OpSampledImage %382 %384 
                                       f32_2 %387 = OpLoad vs_TEXCOORD3 
                                       f32_4 %388 = OpImageSampleImplicitLod %385 %387 
                                         f32 %390 = OpCompositeExtract %388 3 
                                Private f32* %391 = OpAccessChain %9 %86 
                                                      OpStore %391 %390 
                                Private f32* %392 = OpAccessChain %9 %86 
                                         f32 %393 = OpLoad %392 
                                Uniform f32* %395 = OpAccessChain %17 %394 %389 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFMul %393 %396 
                                Private f32* %398 = OpAccessChain %65 %389 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFAdd %397 %399 
                                 Output f32* %402 = OpAccessChain %372 %389 
                                                      OpStore %402 %400 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat7;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat1.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat2.zz + u_xlat1.xy;
    u_xlat7.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat1.xy = (-u_xlat1.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat7.xy;
    u_xlat1.xy = u_xlat1.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat1.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _LightTextureB0;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
bool u_xlatb13;
float u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb18 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat8.x = u_xlat13 * u_xlat13;
    u_xlat14 = u_xlat18 * u_xlat8.x + (-u_xlat18);
    u_xlat18 = u_xlat14 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat8.x = u_xlat8.x * 0.318309873;
    u_xlat18 = u_xlat8.x / u_xlat18;
    u_xlat8.x = (-u_xlat13) + 1.0;
    u_xlat14 = abs(u_xlat1.x) * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat13 * abs(u_xlat1.x);
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
    u_xlat13 = u_xlat13 + 9.99999975e-06;
    u_xlat13 = 0.5 / u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat3 = u_xlat3 * _Color;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat19 * u_xlat19;
    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
    u_xlat7 = u_xlat7 + -0.5;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
    u_xlat0 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    SV_Target0.w = u_xlat0.w * _RedDotColor.w + u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 309
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %83 %144 %219 %225 %226 %239 %269 %295 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %81 0 BuiltIn 81 
                                                      OpMemberDecorate %81 1 BuiltIn 81 
                                                      OpMemberDecorate %81 2 BuiltIn 81 
                                                      OpDecorate %81 Block 
                                                      OpDecorate vs_TEXCOORD2 Location 144 
                                                      OpDecorate vs_TEXCOORD3 Location 219 
                                                      OpDecorate vs_TEXCOORD0 Location 225 
                                                      OpDecorate %226 Location 226 
                                                      OpDecorate %239 Location 239 
                                                      OpDecorate vs_TEXCOORD1 Location 269 
                                                      OpDecorate vs_TEXCOORD4 Location 295 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeStruct %14 %17 %18 %19 %20 %6 %6 %6 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                               Private f32_4* %46 = OpVariable Private 
                                          i32 %48 = OpConstant 3 
                               Private f32_4* %59 = OpVariable Private 
                                          u32 %79 = OpConstant 1 
                                              %80 = OpTypeArray %6 %79 
                                              %81 = OpTypeStruct %7 %6 %80 
                                              %82 = OpTypePointer Output %81 
         Output struct {f32_4; f32; f32[1];}* %83 = OpVariable Output 
                                              %91 = OpTypePointer Output %7 
                                             %137 = OpTypePointer Uniform %14 
                                             %143 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %147 = OpTypeVector %6 2 
                                             %178 = OpTypePointer Private %147 
                              Private f32_2* %179 = OpVariable Private 
                                         i32 %182 = OpConstant 7 
                                             %183 = OpTypePointer Uniform %6 
                                         i32 %186 = OpConstant 8 
                                         i32 %195 = OpConstant 6 
                                         i32 %211 = OpConstant 5 
                                             %218 = OpTypePointer Output %147 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                                       f32_2 %223 = OpConstantComposite %222 %222 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %226 = OpVariable Input 
                                         i32 %229 = OpConstant 9 
                                             %238 = OpTypePointer Input %14 
                                Input f32_3* %239 = OpVariable Input 
                                         u32 %245 = OpConstant 0 
                                             %246 = OpTypePointer Private %6 
                                         u32 %259 = OpConstant 2 
                                Private f32* %261 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %277 = OpConstant 4 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                             %303 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %23 %25 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %31 = OpAccessChain %23 %25 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpLoad %11 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
                                        f32_4 %35 = OpFMul %32 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %23 %25 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_4 %41 = OpLoad %11 
                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
                                        f32_4 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_4 %47 = OpLoad %9 
                               Uniform f32_4* %49 = OpAccessChain %23 %25 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_4 %51 = OpFAdd %47 %50 
                                                      OpStore %46 %51 
                               Uniform f32_4* %52 = OpAccessChain %23 %25 %48 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %9 %58 
                                        f32_4 %60 = OpLoad %46 
                                        f32_4 %61 = OpVectorShuffle %60 %60 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %23 %48 %25 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %61 %63 
                                                      OpStore %59 %64 
                               Uniform f32_4* %65 = OpAccessChain %23 %48 %30 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %46 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %48 %38 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %46 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %59 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %59 %78 
                               Uniform f32_4* %84 = OpAccessChain %23 %48 %48 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpLoad %46 
                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
                                        f32_4 %88 = OpFMul %85 %87 
                                        f32_4 %89 = OpLoad %59 
                                        f32_4 %90 = OpFAdd %88 %89 
                                Output f32_4* %92 = OpAccessChain %83 %30 
                                                      OpStore %92 %90 
                                        f32_4 %93 = OpLoad %11 
                                        f32_3 %94 = OpVectorShuffle %93 %93 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %23 %25 %25 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFMul %94 %97 
                                        f32_4 %99 = OpLoad %46 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %46 %100 
                              Uniform f32_4* %101 = OpAccessChain %23 %25 %30 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %11 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 0 0 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %46 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %46 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %46 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %38 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_4 %115 = OpLoad %11 
                                       f32_3 %116 = OpVectorShuffle %115 %115 2 2 2 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %46 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %46 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %46 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %48 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %11 
                                       f32_3 %127 = OpVectorShuffle %126 %126 3 3 3 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %46 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %46 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %46 %133 
                                       f32_4 %134 = OpLoad %46 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %23 %30 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                       f32_4 %141 = OpLoad %59 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %59 %142 
                                       f32_4 %145 = OpLoad %46 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore vs_TEXCOORD2 %146 
                                       f32_4 %148 = OpLoad %59 
                                       f32_2 %149 = OpVectorShuffle %148 %148 1 1 
                              Uniform f32_4* %150 = OpAccessChain %23 %38 %25 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %149 %152 
                                       f32_4 %154 = OpLoad %46 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                                      OpStore %46 %155 
                              Uniform f32_4* %156 = OpAccessChain %23 %38 %30 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_4 %159 = OpLoad %59 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 0 
                                       f32_2 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %46 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
                                       f32_2 %164 = OpFAdd %161 %163 
                                       f32_4 %165 = OpLoad %46 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 5 2 3 
                                                      OpStore %46 %166 
                              Uniform f32_4* %167 = OpAccessChain %23 %38 %38 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 1 
                                       f32_4 %170 = OpLoad %59 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_2 %172 = OpFMul %169 %171 
                                       f32_4 %173 = OpLoad %46 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_2 %175 = OpFAdd %172 %174 
                                       f32_4 %176 = OpLoad %46 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 2 3 
                                                      OpStore %46 %177 
                                       f32_4 %180 = OpLoad %11 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                Uniform f32* %184 = OpAccessChain %23 %182 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %187 = OpAccessChain %23 %186 
                                         f32 %188 = OpLoad %187 
                                       f32_2 %189 = OpCompositeConstruct %185 %188 
                                       f32_2 %190 = OpFNegate %189 
                                       f32_2 %191 = OpFAdd %181 %190 
                                                      OpStore %179 %191 
                                       f32_4 %192 = OpLoad %46 
                                       f32_2 %193 = OpVectorShuffle %192 %192 0 1 
                                       f32_2 %194 = OpFNegate %193 
                                Uniform f32* %196 = OpAccessChain %23 %195 
                                         f32 %197 = OpLoad %196 
                                Uniform f32* %198 = OpAccessChain %23 %195 
                                         f32 %199 = OpLoad %198 
                                       f32_2 %200 = OpCompositeConstruct %197 %199 
                                         f32 %201 = OpCompositeExtract %200 0 
                                         f32 %202 = OpCompositeExtract %200 1 
                                       f32_2 %203 = OpCompositeConstruct %201 %202 
                                       f32_2 %204 = OpFMul %194 %203 
                                       f32_2 %205 = OpLoad %179 
                                       f32_2 %206 = OpFAdd %204 %205 
                                       f32_4 %207 = OpLoad %46 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 2 3 
                                                      OpStore %46 %208 
                                       f32_4 %209 = OpLoad %46 
                                       f32_2 %210 = OpVectorShuffle %209 %209 0 1 
                                Uniform f32* %212 = OpAccessChain %23 %211 
                                         f32 %213 = OpLoad %212 
                                       f32_2 %214 = OpCompositeConstruct %213 %213 
                                       f32_2 %215 = OpFDiv %210 %214 
                                       f32_4 %216 = OpLoad %46 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 2 3 
                                                      OpStore %46 %217 
                                       f32_4 %220 = OpLoad %46 
                                       f32_2 %221 = OpVectorShuffle %220 %220 0 1 
                                       f32_2 %224 = OpFAdd %221 %223 
                                                      OpStore vs_TEXCOORD3 %224 
                                       f32_4 %227 = OpLoad %226 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                              Uniform f32_4* %230 = OpAccessChain %23 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFMul %228 %232 
                              Uniform f32_4* %234 = OpAccessChain %23 %229 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 2 3 
                                       f32_2 %237 = OpFAdd %233 %236 
                                                      OpStore vs_TEXCOORD0 %237 
                                       f32_3 %240 = OpLoad %239 
                              Uniform f32_4* %241 = OpAccessChain %23 %38 %30 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                         f32 %244 = OpDot %240 %243 
                                Private f32* %247 = OpAccessChain %46 %245 
                                                      OpStore %247 %244 
                                       f32_3 %248 = OpLoad %239 
                              Uniform f32_4* %249 = OpAccessChain %23 %38 %25 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpDot %248 %251 
                                Private f32* %253 = OpAccessChain %46 %79 
                                                      OpStore %253 %252 
                                       f32_3 %254 = OpLoad %239 
                              Uniform f32_4* %255 = OpAccessChain %23 %38 %38 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %260 = OpAccessChain %46 %259 
                                                      OpStore %260 %258 
                                       f32_4 %262 = OpLoad %46 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %46 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                         f32 %266 = OpDot %263 %265 
                                                      OpStore %261 %266 
                                         f32 %267 = OpLoad %261 
                                         f32 %268 = OpExtInst %1 32 %267 
                                                      OpStore %261 %268 
                                         f32 %270 = OpLoad %261 
                                       f32_3 %271 = OpCompositeConstruct %270 %270 %270 
                                       f32_4 %272 = OpLoad %46 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFMul %271 %273 
                                                      OpStore vs_TEXCOORD1 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %275 1 1 1 1 
                              Uniform f32_4* %278 = OpAccessChain %23 %277 %25 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFMul %276 %279 
                                                      OpStore %46 %280 
                              Uniform f32_4* %281 = OpAccessChain %23 %277 %30 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpVectorShuffle %283 %283 0 0 0 0 
                                       f32_4 %285 = OpFMul %282 %284 
                                       f32_4 %286 = OpLoad %46 
                                       f32_4 %287 = OpFAdd %285 %286 
                                                      OpStore %46 %287 
                              Uniform f32_4* %288 = OpAccessChain %23 %277 %38 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpVectorShuffle %290 %290 2 2 2 2 
                                       f32_4 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %46 
                                       f32_4 %294 = OpFAdd %292 %293 
                                                      OpStore %46 %294 
                              Uniform f32_4* %296 = OpAccessChain %23 %277 %48 
                                       f32_4 %297 = OpLoad %296 
                                       f32_4 %298 = OpLoad %9 
                                       f32_4 %299 = OpVectorShuffle %298 %298 3 3 3 3 
                                       f32_4 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %46 
                                       f32_4 %302 = OpFAdd %300 %301 
                                                      OpStore vs_TEXCOORD4 %302 
                                 Output f32* %304 = OpAccessChain %83 %30 %79 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFNegate %305 
                                 Output f32* %307 = OpAccessChain %83 %30 %79 
                                                      OpStore %307 %306 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 509
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %184 %324 %478 %492 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %73 DescriptorSet 73 
                                                      OpDecorate %73 Binding 73 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate vs_TEXCOORD1 Location 184 
                                                      OpDecorate %318 DescriptorSet 318 
                                                      OpDecorate %318 Binding 318 
                                                      OpDecorate %320 DescriptorSet 320 
                                                      OpDecorate %320 Binding 320 
                                                      OpDecorate vs_TEXCOORD0 Location 324 
                                                      OpDecorate %478 Location 478 
                                                      OpDecorate %487 DescriptorSet 487 
                                                      OpDecorate %487 Binding 487 
                                                      OpDecorate %489 DescriptorSet 489 
                                                      OpDecorate %489 Binding 489 
                                                      OpDecorate vs_TEXCOORD3 Location 492 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %17 %6 %6 %7 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 3 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                              %48 = OpTypePointer Private %10 
                               Private f32_3* %49 = OpVariable Private 
                                              %50 = OpTypeVector %6 2 
                                          f32 %60 = OpConstant 3.674022E-40 
                                        f32_2 %61 = OpConstantComposite %60 %60 
                                              %65 = OpTypePointer Private %6 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %68 = OpTypePointer UniformConstant %67 
         UniformConstant read_only Texture2D* %69 = OpVariable UniformConstant 
                                              %71 = OpTypeSampler 
                                              %72 = OpTypePointer UniformConstant %71 
                     UniformConstant sampler* %73 = OpVariable UniformConstant 
                                              %75 = OpTypeSampledImage %67 
                                          u32 %80 = OpConstant 3 
                                              %82 = OpTypeBool 
                                              %83 = OpTypePointer Private %82 
                                Private bool* %84 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          u32 %86 = OpConstant 2 
                                          u32 %95 = OpConstant 0 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                     UniformConstant sampler* %99 = OpVariable UniformConstant 
                                Private f32* %107 = OpVariable Private 
                                         f32 %109 = OpConstant 3.674022E-40 
                                             %129 = OpTypePointer Uniform %10 
                              Private f32_3* %142 = OpVariable Private 
                              Private f32_4* %154 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %190 = OpVariable Private 
                                Private f32* %201 = OpVariable Private 
                                Private f32* %220 = OpVariable Private 
                                         i32 %221 = OpConstant 4 
                                             %222 = OpTypePointer Uniform %6 
                                Private f32* %227 = OpVariable Private 
                                         f32 %232 = OpConstant 3.674022E-40 
                              Private f32_3* %234 = OpVariable Private 
                                Private f32* %239 = OpVariable Private 
                                         f32 %254 = OpConstant 3.674022E-40 
                                         f32 %258 = OpConstant 3.674022E-40 
                                         f32 %302 = OpConstant 3.674022E-40 
                                         f32 %314 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %318 = OpVariable UniformConstant 
                    UniformConstant sampler* %320 = OpVariable UniformConstant 
                                             %323 = OpTypePointer Input %50 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %329 = OpConstant 6 
                                         f32 %334 = OpConstant 3.674022E-40 
                                       f32_3 %335 = OpConstantComposite %334 %334 %334 
                                         i32 %341 = OpConstant 5 
                                         f32 %355 = OpConstant 3.674022E-40 
                                       f32_3 %356 = OpConstantComposite %355 %355 %355 
                               Private bool* %361 = OpVariable Private 
                                         f32 %386 = OpConstant 3.674022E-40 
                              Private f32_3* %397 = OpVariable Private 
                                       f32_3 %400 = OpConstantComposite %109 %109 %109 
                                         f32 %469 = OpConstant 3.674022E-40 
                                             %477 = OpTypePointer Output %7 
                               Output f32_4* %478 = OpVariable Output 
        UniformConstant read_only Texture2D* %487 = OpVariable UniformConstant 
                    UniformConstant sampler* %489 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                         i32 %499 = OpConstant 7 
                                             %506 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %14 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpLoad vs_TEXCOORD2 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %20 %22 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %20 %22 %22 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFAdd %44 %46 
                                                      OpStore %9 %47 
                                        f32_4 %51 = OpLoad %9 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpLoad %9 
                                        f32_2 %54 = OpVectorShuffle %53 %53 3 3 
                                        f32_2 %55 = OpFDiv %52 %54 
                                        f32_3 %56 = OpLoad %49 
                                        f32_3 %57 = OpVectorShuffle %56 %55 3 4 2 
                                                      OpStore %49 %57 
                                        f32_3 %58 = OpLoad %49 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_2 %62 = OpFAdd %59 %61 
                                        f32_3 %63 = OpLoad %49 
                                        f32_3 %64 = OpVectorShuffle %63 %62 3 4 2 
                                                      OpStore %49 %64 
                          read_only Texture2D %70 = OpLoad %69 
                                      sampler %74 = OpLoad %73 
                   read_only Texture2DSampled %76 = OpSampledImage %70 %74 
                                        f32_3 %77 = OpLoad %49 
                                        f32_2 %78 = OpVectorShuffle %77 %77 0 1 
                                        f32_4 %79 = OpImageSampleImplicitLod %76 %78 
                                          f32 %81 = OpCompositeExtract %79 3 
                                                      OpStore %66 %81 
                                 Private f32* %87 = OpAccessChain %9 %86 
                                          f32 %88 = OpLoad %87 
                                         bool %89 = OpFOrdLessThan %85 %88 
                                                      OpStore %84 %89 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                 Private f32* %96 = OpAccessChain %9 %95 
                                                      OpStore %96 %94 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %100 = OpLoad %99 
                  read_only Texture2DSampled %101 = OpSampledImage %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 0 
                                       f32_4 %104 = OpImageSampleImplicitLod %101 %103 
                                         f32 %105 = OpCompositeExtract %104 0 
                                Private f32* %106 = OpAccessChain %9 %95 
                                                      OpStore %106 %105 
                                        bool %108 = OpLoad %84 
                                         f32 %110 = OpSelect %108 %109 %85 
                                                      OpStore %107 %110 
                                         f32 %111 = OpLoad %66 
                                         f32 %112 = OpLoad %107 
                                         f32 %113 = OpFMul %111 %112 
                                                      OpStore %107 %113 
                                Private f32* %114 = OpAccessChain %9 %95 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpLoad %107 
                                         f32 %117 = OpFMul %115 %116 
                                Private f32* %118 = OpAccessChain %9 %95 
                                                      OpStore %118 %117 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                              Uniform f32_4* %121 = OpAccessChain %20 %36 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %120 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %9 %126 
                                       f32_3 %127 = OpLoad vs_TEXCOORD2 
                                       f32_3 %128 = OpFNegate %127 
                              Uniform f32_3* %130 = OpAccessChain %20 %28 
                                       f32_3 %131 = OpLoad %130 
                                       f32_3 %132 = OpFAdd %128 %131 
                                                      OpStore %49 %132 
                                       f32_3 %133 = OpLoad %49 
                                       f32_3 %134 = OpLoad %49 
                                         f32 %135 = OpDot %133 %134 
                                                      OpStore %66 %135 
                                         f32 %136 = OpLoad %66 
                                         f32 %137 = OpExtInst %1 32 %136 
                                                      OpStore %66 %137 
                                         f32 %138 = OpLoad %66 
                                       f32_3 %139 = OpCompositeConstruct %138 %138 %138 
                                       f32_3 %140 = OpLoad %49 
                                       f32_3 %141 = OpFMul %139 %140 
                                                      OpStore %49 %141 
                                       f32_3 %143 = OpLoad vs_TEXCOORD2 
                                       f32_3 %144 = OpFNegate %143 
                              Uniform f32_4* %145 = OpAccessChain %20 %23 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %144 %147 
                                                      OpStore %142 %148 
                                       f32_3 %149 = OpLoad %142 
                                       f32_3 %150 = OpLoad %142 
                                         f32 %151 = OpDot %149 %150 
                                                      OpStore %66 %151 
                                         f32 %152 = OpLoad %66 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %66 %153 
                                       f32_3 %155 = OpLoad %142 
                                         f32 %156 = OpLoad %66 
                                       f32_3 %157 = OpCompositeConstruct %156 %156 %156 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_3 %159 = OpLoad %49 
                                       f32_3 %160 = OpFAdd %158 %159 
                                       f32_4 %161 = OpLoad %154 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %154 %162 
                                         f32 %163 = OpLoad %66 
                                       f32_3 %164 = OpCompositeConstruct %163 %163 %163 
                                       f32_3 %165 = OpLoad %142 
                                       f32_3 %166 = OpFMul %164 %165 
                                                      OpStore %142 %166 
                                       f32_4 %167 = OpLoad %154 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %154 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %66 %171 
                                         f32 %172 = OpLoad %66 
                                         f32 %174 = OpExtInst %1 40 %172 %173 
                                                      OpStore %66 %174 
                                         f32 %175 = OpLoad %66 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %66 %176 
                                         f32 %177 = OpLoad %66 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_4 %179 = OpLoad %154 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %154 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %154 %183 
                                       f32_3 %185 = OpLoad vs_TEXCOORD1 
                                       f32_3 %186 = OpLoad vs_TEXCOORD1 
                                         f32 %187 = OpDot %185 %186 
                                                      OpStore %66 %187 
                                         f32 %188 = OpLoad %66 
                                         f32 %189 = OpExtInst %1 32 %188 
                                                      OpStore %66 %189 
                                         f32 %191 = OpLoad %66 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpLoad vs_TEXCOORD1 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %190 %194 
                                       f32_3 %195 = OpLoad %190 
                                       f32_4 %196 = OpLoad %154 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %195 %197 
                                                      OpStore %66 %198 
                                         f32 %199 = OpLoad %66 
                                         f32 %200 = OpExtInst %1 43 %199 %85 %109 
                                                      OpStore %66 %200 
                                       f32_3 %202 = OpLoad %142 
                                       f32_4 %203 = OpLoad %154 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpDot %202 %204 
                                                      OpStore %201 %205 
                                         f32 %206 = OpLoad %201 
                                         f32 %207 = OpExtInst %1 43 %206 %85 %109 
                                                      OpStore %201 %207 
                                       f32_3 %208 = OpLoad %190 
                                       f32_3 %209 = OpLoad %142 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %142 %95 
                                                      OpStore %211 %210 
                                Private f32* %212 = OpAccessChain %142 %95 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpExtInst %1 43 %213 %85 %109 
                                Private f32* %215 = OpAccessChain %142 %95 
                                                      OpStore %215 %214 
                                       f32_3 %216 = OpLoad %190 
                                       f32_3 %217 = OpLoad %49 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %49 %95 
                                                      OpStore %219 %218 
                                Uniform f32* %223 = OpAccessChain %20 %221 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %109 
                                                      OpStore %220 %226 
                                         f32 %228 = OpLoad %220 
                                         f32 %229 = OpLoad %220 
                                         f32 %230 = OpFMul %228 %229 
                                                      OpStore %227 %230 
                                         f32 %231 = OpLoad %227 
                                         f32 %233 = OpExtInst %1 40 %231 %232 
                                                      OpStore %227 %233 
                                         f32 %235 = OpLoad %227 
                                         f32 %236 = OpLoad %227 
                                         f32 %237 = OpFMul %235 %236 
                                Private f32* %238 = OpAccessChain %234 %95 
                                                      OpStore %238 %237 
                                         f32 %240 = OpLoad %66 
                                Private f32* %241 = OpAccessChain %234 %95 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %240 %242 
                                         f32 %244 = OpLoad %66 
                                         f32 %245 = OpFNegate %244 
                                         f32 %246 = OpFAdd %243 %245 
                                                      OpStore %239 %246 
                                         f32 %247 = OpLoad %239 
                                         f32 %248 = OpLoad %66 
                                         f32 %249 = OpFMul %247 %248 
                                         f32 %250 = OpFAdd %249 %109 
                                                      OpStore %66 %250 
                                         f32 %251 = OpLoad %66 
                                         f32 %252 = OpLoad %66 
                                         f32 %253 = OpFMul %251 %252 
                                         f32 %255 = OpFAdd %253 %254 
                                                      OpStore %66 %255 
                                Private f32* %256 = OpAccessChain %234 %95 
                                         f32 %257 = OpLoad %256 
                                         f32 %259 = OpFMul %257 %258 
                                Private f32* %260 = OpAccessChain %234 %95 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %234 %95 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpLoad %66 
                                         f32 %264 = OpFDiv %262 %263 
                                                      OpStore %66 %264 
                                         f32 %265 = OpLoad %227 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %109 
                                Private f32* %268 = OpAccessChain %234 %95 
                                                      OpStore %268 %267 
                                Private f32* %269 = OpAccessChain %49 %95 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpExtInst %1 4 %270 
                                Private f32* %272 = OpAccessChain %234 %95 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                         f32 %275 = OpLoad %227 
                                         f32 %276 = OpFAdd %274 %275 
                                                      OpStore %239 %276 
                                Private f32* %277 = OpAccessChain %142 %95 
                                         f32 %278 = OpLoad %277 
                                Private f32* %279 = OpAccessChain %234 %95 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFMul %278 %280 
                                         f32 %282 = OpLoad %227 
                                         f32 %283 = OpFAdd %281 %282 
                                                      OpStore %227 %283 
                                         f32 %284 = OpLoad %227 
                                Private f32* %285 = OpAccessChain %49 %95 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpExtInst %1 4 %286 
                                         f32 %288 = OpFMul %284 %287 
                                                      OpStore %227 %288 
                                Private f32* %289 = OpAccessChain %49 %95 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpExtInst %1 4 %290 
                                         f32 %292 = OpFNegate %291 
                                         f32 %293 = OpFAdd %292 %109 
                                Private f32* %294 = OpAccessChain %49 %95 
                                                      OpStore %294 %293 
                                Private f32* %295 = OpAccessChain %142 %95 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpLoad %239 
                                         f32 %298 = OpFMul %296 %297 
                                         f32 %299 = OpLoad %227 
                                         f32 %300 = OpFAdd %298 %299 
                                                      OpStore %227 %300 
                                         f32 %301 = OpLoad %227 
                                         f32 %303 = OpFAdd %301 %302 
                                                      OpStore %227 %303 
                                         f32 %304 = OpLoad %227 
                                         f32 %305 = OpFDiv %60 %304 
                                                      OpStore %227 %305 
                                         f32 %306 = OpLoad %66 
                                         f32 %307 = OpLoad %227 
                                         f32 %308 = OpFMul %306 %307 
                                                      OpStore %66 %308 
                                Private f32* %309 = OpAccessChain %142 %95 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpLoad %66 
                                         f32 %312 = OpFMul %310 %311 
                                                      OpStore %66 %312 
                                         f32 %313 = OpLoad %66 
                                         f32 %315 = OpFMul %313 %314 
                                                      OpStore %66 %315 
                                         f32 %316 = OpLoad %66 
                                         f32 %317 = OpExtInst %1 40 %316 %85 
                                                      OpStore %66 %317 
                         read_only Texture2D %319 = OpLoad %318 
                                     sampler %321 = OpLoad %320 
                  read_only Texture2DSampled %322 = OpSampledImage %319 %321 
                                       f32_2 %325 = OpLoad vs_TEXCOORD0 
                                       f32_4 %326 = OpImageSampleImplicitLod %322 %325 
                                                      OpStore %154 %326 
                                       f32_4 %327 = OpLoad %154 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                              Uniform f32_4* %330 = OpAccessChain %20 %329 
                                       f32_4 %331 = OpLoad %330 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                                       f32_3 %333 = OpFMul %328 %332 
                                       f32_3 %336 = OpFAdd %333 %335 
                                                      OpStore %234 %336 
                                       f32_4 %337 = OpLoad %154 
                              Uniform f32_4* %338 = OpAccessChain %20 %329 
                                       f32_4 %339 = OpLoad %338 
                                       f32_4 %340 = OpFMul %337 %339 
                                                      OpStore %154 %340 
                                Uniform f32* %342 = OpAccessChain %20 %341 
                                         f32 %343 = OpLoad %342 
                                Uniform f32* %344 = OpAccessChain %20 %341 
                                         f32 %345 = OpLoad %344 
                                Uniform f32* %346 = OpAccessChain %20 %341 
                                         f32 %347 = OpLoad %346 
                                       f32_3 %348 = OpCompositeConstruct %343 %345 %347 
                                         f32 %349 = OpCompositeExtract %348 0 
                                         f32 %350 = OpCompositeExtract %348 1 
                                         f32 %351 = OpCompositeExtract %348 2 
                                       f32_3 %352 = OpCompositeConstruct %349 %350 %351 
                                       f32_3 %353 = OpLoad %234 
                                       f32_3 %354 = OpFMul %352 %353 
                                       f32_3 %357 = OpFAdd %354 %356 
                                                      OpStore %234 %357 
                                       f32_3 %358 = OpLoad %234 
                                       f32_3 %359 = OpLoad %234 
                                         f32 %360 = OpDot %358 %359 
                                                      OpStore %227 %360 
                                         f32 %362 = OpLoad %227 
                                        bool %363 = OpFOrdNotEqual %362 %85 
                                                      OpStore %361 %363 
                                        bool %364 = OpLoad %361 
                                         f32 %365 = OpSelect %364 %109 %85 
                                                      OpStore %227 %365 
                                         f32 %366 = OpLoad %66 
                                         f32 %367 = OpLoad %227 
                                         f32 %368 = OpFMul %366 %367 
                                                      OpStore %66 %368 
                                       f32_4 %369 = OpLoad %9 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                         f32 %371 = OpLoad %66 
                                       f32_3 %372 = OpCompositeConstruct %371 %371 %371 
                                       f32_3 %373 = OpFMul %370 %372 
                                                      OpStore %190 %373 
                                         f32 %374 = OpLoad %201 
                                         f32 %375 = OpFNegate %374 
                                         f32 %376 = OpFAdd %375 %109 
                                                      OpStore %66 %376 
                                         f32 %377 = OpLoad %201 
                                         f32 %378 = OpLoad %201 
                                         f32 %379 = OpFMul %377 %378 
                                                      OpStore %227 %379 
                                         f32 %380 = OpLoad %227 
                                       f32_2 %381 = OpCompositeConstruct %380 %380 
                                         f32 %382 = OpLoad %220 
                                       f32_2 %383 = OpCompositeConstruct %382 %382 
                                         f32 %384 = OpDot %381 %383 
                                                      OpStore %220 %384 
                                         f32 %385 = OpLoad %220 
                                         f32 %387 = OpFAdd %385 %386 
                                                      OpStore %220 %387 
                                         f32 %388 = OpLoad %66 
                                         f32 %389 = OpLoad %66 
                                         f32 %390 = OpFMul %388 %389 
                                                      OpStore %227 %390 
                                         f32 %391 = OpLoad %227 
                                         f32 %392 = OpLoad %227 
                                         f32 %393 = OpFMul %391 %392 
                                                      OpStore %227 %393 
                                         f32 %394 = OpLoad %66 
                                         f32 %395 = OpLoad %227 
                                         f32 %396 = OpFMul %394 %395 
                                                      OpStore %66 %396 
                                       f32_3 %398 = OpLoad %234 
                                       f32_3 %399 = OpFNegate %398 
                                       f32_3 %401 = OpFAdd %399 %400 
                                                      OpStore %397 %401 
                                       f32_3 %402 = OpLoad %397 
                                         f32 %403 = OpLoad %66 
                                       f32_3 %404 = OpCompositeConstruct %403 %403 %403 
                                       f32_3 %405 = OpFMul %402 %404 
                                       f32_3 %406 = OpLoad %234 
                                       f32_3 %407 = OpFAdd %405 %406 
                                                      OpStore %234 %407 
                                       f32_3 %408 = OpLoad %234 
                                       f32_3 %409 = OpLoad %190 
                                       f32_3 %410 = OpFMul %408 %409 
                                                      OpStore %234 %410 
                                Private f32* %411 = OpAccessChain %49 %95 
                                         f32 %412 = OpLoad %411 
                                Private f32* %413 = OpAccessChain %49 %95 
                                         f32 %414 = OpLoad %413 
                                         f32 %415 = OpFMul %412 %414 
                                                      OpStore %66 %415 
                                         f32 %416 = OpLoad %66 
                                         f32 %417 = OpLoad %66 
                                         f32 %418 = OpFMul %416 %417 
                                                      OpStore %66 %418 
                                Private f32* %419 = OpAccessChain %49 %95 
                                         f32 %420 = OpLoad %419 
                                         f32 %421 = OpLoad %66 
                                         f32 %422 = OpFMul %420 %421 
                                                      OpStore %66 %422 
                                         f32 %423 = OpLoad %220 
                                         f32 %424 = OpLoad %66 
                                         f32 %425 = OpFMul %423 %424 
                                         f32 %426 = OpFAdd %425 %109 
                                                      OpStore %66 %426 
                                Private f32* %427 = OpAccessChain %142 %95 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFNegate %428 
                                         f32 %430 = OpFAdd %429 %109 
                                Private f32* %431 = OpAccessChain %49 %95 
                                                      OpStore %431 %430 
                                Private f32* %432 = OpAccessChain %49 %95 
                                         f32 %433 = OpLoad %432 
                                Private f32* %434 = OpAccessChain %49 %95 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpFMul %433 %435 
                                                      OpStore %227 %436 
                                         f32 %437 = OpLoad %227 
                                         f32 %438 = OpLoad %227 
                                         f32 %439 = OpFMul %437 %438 
                                                      OpStore %227 %439 
                                Private f32* %440 = OpAccessChain %49 %95 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpLoad %227 
                                         f32 %443 = OpFMul %441 %442 
                                Private f32* %444 = OpAccessChain %49 %95 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %220 
                                Private f32* %446 = OpAccessChain %49 %95 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                         f32 %449 = OpFAdd %448 %109 
                                Private f32* %450 = OpAccessChain %49 %95 
                                                      OpStore %450 %449 
                                         f32 %451 = OpLoad %66 
                                Private f32* %452 = OpAccessChain %49 %95 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                                      OpStore %66 %454 
                                Private f32* %455 = OpAccessChain %142 %95 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpLoad %66 
                                         f32 %458 = OpFMul %456 %457 
                                                      OpStore %66 %458 
                                         f32 %459 = OpLoad %66 
                                       f32_3 %460 = OpCompositeConstruct %459 %459 %459 
                                       f32_4 %461 = OpLoad %9 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                       f32_3 %463 = OpFMul %460 %462 
                                       f32_4 %464 = OpLoad %9 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %9 %465 
                                Uniform f32* %466 = OpAccessChain %20 %341 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFNegate %467 
                                         f32 %470 = OpFMul %468 %469 
                                         f32 %471 = OpFAdd %470 %469 
                                                      OpStore %66 %471 
                                         f32 %472 = OpLoad %66 
                                       f32_3 %473 = OpCompositeConstruct %472 %472 %472 
                                       f32_4 %474 = OpLoad %154 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 1 2 
                                       f32_3 %476 = OpFMul %473 %475 
                                                      OpStore %49 %476 
                                       f32_3 %479 = OpLoad %49 
                                       f32_4 %480 = OpLoad %9 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %234 
                                       f32_3 %484 = OpFAdd %482 %483 
                                       f32_4 %485 = OpLoad %478 
                                       f32_4 %486 = OpVectorShuffle %485 %484 4 5 6 3 
                                                      OpStore %478 %486 
                         read_only Texture2D %488 = OpLoad %487 
                                     sampler %490 = OpLoad %489 
                  read_only Texture2DSampled %491 = OpSampledImage %488 %490 
                                       f32_2 %493 = OpLoad vs_TEXCOORD3 
                                       f32_4 %494 = OpImageSampleImplicitLod %491 %493 
                                         f32 %495 = OpCompositeExtract %494 3 
                                Private f32* %496 = OpAccessChain %9 %95 
                                                      OpStore %496 %495 
                                Private f32* %497 = OpAccessChain %9 %95 
                                         f32 %498 = OpLoad %497 
                                Uniform f32* %500 = OpAccessChain %20 %499 %80 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpFMul %498 %501 
                                Private f32* %503 = OpAccessChain %154 %80 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpFAdd %502 %504 
                                 Output f32* %507 = OpAccessChain %478 %80 
                                                      OpStore %507 %505 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat7;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat1.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat2.zz + u_xlat1.xy;
    u_xlat7.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat1.xy = (-u_xlat1.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat7.xy;
    u_xlat1.xy = u_xlat1.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat1.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  samplerCube _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
bool u_xlatb13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat8.x = u_xlat13 * u_xlat13;
    u_xlat14 = u_xlat18 * u_xlat8.x + (-u_xlat18);
    u_xlat18 = u_xlat14 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat8.x = u_xlat8.x * 0.318309873;
    u_xlat18 = u_xlat8.x / u_xlat18;
    u_xlat8.x = (-u_xlat13) + 1.0;
    u_xlat14 = abs(u_xlat1.x) * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat13 * abs(u_xlat1.x);
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
    u_xlat13 = u_xlat13 + 9.99999975e-06;
    u_xlat13 = 0.5 / u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat3 = u_xlat3 * _Color;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat19 * u_xlat19;
    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
    u_xlat7 = u_xlat7 + -0.5;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
    u_xlat0 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    SV_Target0.w = u_xlat0.w * _RedDotColor.w + u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 322
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %83 %144 %219 %225 %226 %239 %269 %306 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %81 0 BuiltIn 81 
                                                      OpMemberDecorate %81 1 BuiltIn 81 
                                                      OpMemberDecorate %81 2 BuiltIn 81 
                                                      OpDecorate %81 Block 
                                                      OpDecorate vs_TEXCOORD2 Location 144 
                                                      OpDecorate vs_TEXCOORD3 Location 219 
                                                      OpDecorate vs_TEXCOORD0 Location 225 
                                                      OpDecorate %226 Location 226 
                                                      OpDecorate %239 Location 239 
                                                      OpDecorate vs_TEXCOORD1 Location 269 
                                                      OpDecorate vs_TEXCOORD4 Location 306 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeStruct %14 %17 %18 %19 %20 %6 %6 %6 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                               Private f32_4* %46 = OpVariable Private 
                                          i32 %48 = OpConstant 3 
                               Private f32_4* %59 = OpVariable Private 
                                          u32 %79 = OpConstant 1 
                                              %80 = OpTypeArray %6 %79 
                                              %81 = OpTypeStruct %7 %6 %80 
                                              %82 = OpTypePointer Output %81 
         Output struct {f32_4; f32; f32[1];}* %83 = OpVariable Output 
                                              %91 = OpTypePointer Output %7 
                                             %137 = OpTypePointer Uniform %14 
                                             %143 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %147 = OpTypeVector %6 2 
                                             %178 = OpTypePointer Private %147 
                              Private f32_2* %179 = OpVariable Private 
                                         i32 %182 = OpConstant 7 
                                             %183 = OpTypePointer Uniform %6 
                                         i32 %186 = OpConstant 8 
                                         i32 %195 = OpConstant 6 
                                         i32 %211 = OpConstant 5 
                                             %218 = OpTypePointer Output %147 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                                       f32_2 %223 = OpConstantComposite %222 %222 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %226 = OpVariable Input 
                                         i32 %229 = OpConstant 9 
                                             %238 = OpTypePointer Input %14 
                                Input f32_3* %239 = OpVariable Input 
                                         u32 %245 = OpConstant 0 
                                             %246 = OpTypePointer Private %6 
                                         u32 %259 = OpConstant 2 
                                Private f32* %261 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %277 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %316 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %23 %25 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %31 = OpAccessChain %23 %25 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpLoad %11 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
                                        f32_4 %35 = OpFMul %32 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %23 %25 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_4 %41 = OpLoad %11 
                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
                                        f32_4 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_4 %47 = OpLoad %9 
                               Uniform f32_4* %49 = OpAccessChain %23 %25 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_4 %51 = OpFAdd %47 %50 
                                                      OpStore %46 %51 
                               Uniform f32_4* %52 = OpAccessChain %23 %25 %48 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %9 %58 
                                        f32_4 %60 = OpLoad %46 
                                        f32_4 %61 = OpVectorShuffle %60 %60 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %23 %48 %25 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %61 %63 
                                                      OpStore %59 %64 
                               Uniform f32_4* %65 = OpAccessChain %23 %48 %30 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %46 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %48 %38 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %46 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %59 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %59 %78 
                               Uniform f32_4* %84 = OpAccessChain %23 %48 %48 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpLoad %46 
                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
                                        f32_4 %88 = OpFMul %85 %87 
                                        f32_4 %89 = OpLoad %59 
                                        f32_4 %90 = OpFAdd %88 %89 
                                Output f32_4* %92 = OpAccessChain %83 %30 
                                                      OpStore %92 %90 
                                        f32_4 %93 = OpLoad %11 
                                        f32_3 %94 = OpVectorShuffle %93 %93 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %23 %25 %25 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFMul %94 %97 
                                        f32_4 %99 = OpLoad %46 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %46 %100 
                              Uniform f32_4* %101 = OpAccessChain %23 %25 %30 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %11 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 0 0 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %46 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %46 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %46 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %38 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_4 %115 = OpLoad %11 
                                       f32_3 %116 = OpVectorShuffle %115 %115 2 2 2 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %46 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %46 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %46 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %48 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %11 
                                       f32_3 %127 = OpVectorShuffle %126 %126 3 3 3 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %46 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %46 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %46 %133 
                                       f32_4 %134 = OpLoad %46 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %23 %30 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                       f32_4 %141 = OpLoad %59 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %59 %142 
                                       f32_4 %145 = OpLoad %46 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore vs_TEXCOORD2 %146 
                                       f32_4 %148 = OpLoad %59 
                                       f32_2 %149 = OpVectorShuffle %148 %148 1 1 
                              Uniform f32_4* %150 = OpAccessChain %23 %38 %25 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %149 %152 
                                       f32_4 %154 = OpLoad %46 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                                      OpStore %46 %155 
                              Uniform f32_4* %156 = OpAccessChain %23 %38 %30 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_4 %159 = OpLoad %59 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 0 
                                       f32_2 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %46 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
                                       f32_2 %164 = OpFAdd %161 %163 
                                       f32_4 %165 = OpLoad %46 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 5 2 3 
                                                      OpStore %46 %166 
                              Uniform f32_4* %167 = OpAccessChain %23 %38 %38 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 1 
                                       f32_4 %170 = OpLoad %59 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_2 %172 = OpFMul %169 %171 
                                       f32_4 %173 = OpLoad %46 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_2 %175 = OpFAdd %172 %174 
                                       f32_4 %176 = OpLoad %46 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 2 3 
                                                      OpStore %46 %177 
                                       f32_4 %180 = OpLoad %11 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                Uniform f32* %184 = OpAccessChain %23 %182 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %187 = OpAccessChain %23 %186 
                                         f32 %188 = OpLoad %187 
                                       f32_2 %189 = OpCompositeConstruct %185 %188 
                                       f32_2 %190 = OpFNegate %189 
                                       f32_2 %191 = OpFAdd %181 %190 
                                                      OpStore %179 %191 
                                       f32_4 %192 = OpLoad %46 
                                       f32_2 %193 = OpVectorShuffle %192 %192 0 1 
                                       f32_2 %194 = OpFNegate %193 
                                Uniform f32* %196 = OpAccessChain %23 %195 
                                         f32 %197 = OpLoad %196 
                                Uniform f32* %198 = OpAccessChain %23 %195 
                                         f32 %199 = OpLoad %198 
                                       f32_2 %200 = OpCompositeConstruct %197 %199 
                                         f32 %201 = OpCompositeExtract %200 0 
                                         f32 %202 = OpCompositeExtract %200 1 
                                       f32_2 %203 = OpCompositeConstruct %201 %202 
                                       f32_2 %204 = OpFMul %194 %203 
                                       f32_2 %205 = OpLoad %179 
                                       f32_2 %206 = OpFAdd %204 %205 
                                       f32_4 %207 = OpLoad %46 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 2 3 
                                                      OpStore %46 %208 
                                       f32_4 %209 = OpLoad %46 
                                       f32_2 %210 = OpVectorShuffle %209 %209 0 1 
                                Uniform f32* %212 = OpAccessChain %23 %211 
                                         f32 %213 = OpLoad %212 
                                       f32_2 %214 = OpCompositeConstruct %213 %213 
                                       f32_2 %215 = OpFDiv %210 %214 
                                       f32_4 %216 = OpLoad %46 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 2 3 
                                                      OpStore %46 %217 
                                       f32_4 %220 = OpLoad %46 
                                       f32_2 %221 = OpVectorShuffle %220 %220 0 1 
                                       f32_2 %224 = OpFAdd %221 %223 
                                                      OpStore vs_TEXCOORD3 %224 
                                       f32_4 %227 = OpLoad %226 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                              Uniform f32_4* %230 = OpAccessChain %23 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFMul %228 %232 
                              Uniform f32_4* %234 = OpAccessChain %23 %229 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 2 3 
                                       f32_2 %237 = OpFAdd %233 %236 
                                                      OpStore vs_TEXCOORD0 %237 
                                       f32_3 %240 = OpLoad %239 
                              Uniform f32_4* %241 = OpAccessChain %23 %38 %30 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                         f32 %244 = OpDot %240 %243 
                                Private f32* %247 = OpAccessChain %46 %245 
                                                      OpStore %247 %244 
                                       f32_3 %248 = OpLoad %239 
                              Uniform f32_4* %249 = OpAccessChain %23 %38 %25 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpDot %248 %251 
                                Private f32* %253 = OpAccessChain %46 %79 
                                                      OpStore %253 %252 
                                       f32_3 %254 = OpLoad %239 
                              Uniform f32_4* %255 = OpAccessChain %23 %38 %38 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %260 = OpAccessChain %46 %259 
                                                      OpStore %260 %258 
                                       f32_4 %262 = OpLoad %46 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %46 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                         f32 %266 = OpDot %263 %265 
                                                      OpStore %261 %266 
                                         f32 %267 = OpLoad %261 
                                         f32 %268 = OpExtInst %1 32 %267 
                                                      OpStore %261 %268 
                                         f32 %270 = OpLoad %261 
                                       f32_3 %271 = OpCompositeConstruct %270 %270 %270 
                                       f32_4 %272 = OpLoad %46 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFMul %271 %273 
                                                      OpStore vs_TEXCOORD1 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 1 1 1 
                              Uniform f32_4* %278 = OpAccessChain %23 %277 %25 
                                       f32_4 %279 = OpLoad %278 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFMul %276 %280 
                                       f32_4 %282 = OpLoad %46 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
                                                      OpStore %46 %283 
                              Uniform f32_4* %284 = OpAccessChain %23 %277 %30 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %46 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %46 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %46 %294 
                              Uniform f32_4* %295 = OpAccessChain %23 %277 %38 
                                       f32_4 %296 = OpLoad %295 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_4 %298 = OpLoad %9 
                                       f32_3 %299 = OpVectorShuffle %298 %298 2 2 2 
                                       f32_3 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %46 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %300 %302 
                                       f32_4 %304 = OpLoad %9 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %9 %305 
                              Uniform f32_4* %307 = OpAccessChain %23 %277 %48 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 3 3 3 
                                       f32_3 %312 = OpFMul %309 %311 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpFAdd %312 %314 
                                                      OpStore vs_TEXCOORD4 %315 
                                 Output f32* %317 = OpAccessChain %83 %30 %79 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFNegate %318 
                                 Output f32* %320 = OpAccessChain %83 %30 %79 
                                                      OpStore %320 %319 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 482
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %157 %300 %452 %465 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %76 DescriptorSet 76 
                                                      OpDecorate %76 Binding 76 
                                                      OpDecorate %78 DescriptorSet 78 
                                                      OpDecorate %78 Binding 78 
                                                      OpDecorate vs_TEXCOORD1 Location 157 
                                                      OpDecorate %294 DescriptorSet 294 
                                                      OpDecorate %294 Binding 294 
                                                      OpDecorate %296 DescriptorSet 296 
                                                      OpDecorate %296 Binding 296 
                                                      OpDecorate vs_TEXCOORD0 Location 300 
                                                      OpDecorate %452 Location 452 
                                                      OpDecorate %460 DescriptorSet 460 
                                                      OpDecorate %460 Binding 460 
                                                      OpDecorate %462 DescriptorSet 462 
                                                      OpDecorate %462 Binding 462 
                                                      OpDecorate vs_TEXCOORD3 Location 465 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %17 %6 %6 %14 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 3 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %14 
                                          i32 %29 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                                              %52 = OpTypePointer Private %6 
                                 Private f32* %53 = OpVariable Private 
                                              %57 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                              %58 = OpTypePointer UniformConstant %57 
       UniformConstant read_only TextureCube* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeSampler 
                                              %62 = OpTypePointer UniformConstant %61 
                     UniformConstant sampler* %63 = OpVariable UniformConstant 
                                              %65 = OpTypeSampledImage %57 
                                          u32 %69 = OpConstant 3 
                                          u32 %71 = OpConstant 0 
                                 Private f32* %73 = OpVariable Private 
                                              %74 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %75 = OpTypePointer UniformConstant %74 
         UniformConstant read_only Texture2D* %76 = OpVariable UniformConstant 
                     UniformConstant sampler* %78 = OpVariable UniformConstant 
                                              %80 = OpTypeSampledImage %74 
                                              %83 = OpTypeVector %6 2 
                               Private f32_3* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                              Private f32_3* %114 = OpVariable Private 
                                             %126 = OpTypePointer Private %14 
                              Private f32_4* %127 = OpVariable Private 
                                         f32 %146 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %163 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                                         f32 %174 = OpConstant 3.674022E-40 
                                Private f32* %176 = OpVariable Private 
                                Private f32* %195 = OpVariable Private 
                                         i32 %196 = OpConstant 4 
                                             %197 = OpTypePointer Uniform %6 
                                Private f32* %202 = OpVariable Private 
                                         f32 %207 = OpConstant 3.674022E-40 
                              Private f32_3* %209 = OpVariable Private 
                                Private f32* %214 = OpVariable Private 
                                         f32 %229 = OpConstant 3.674022E-40 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         f32 %277 = OpConstant 3.674022E-40 
                                         f32 %279 = OpConstant 3.674022E-40 
                                         f32 %290 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %294 = OpVariable UniformConstant 
                    UniformConstant sampler* %296 = OpVariable UniformConstant 
                                             %299 = OpTypePointer Input %83 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %305 = OpConstant 6 
                                         f32 %310 = OpConstant 3.674022E-40 
                                       f32_3 %311 = OpConstantComposite %310 %310 %310 
                                         i32 %317 = OpConstant 5 
                                         f32 %331 = OpConstant 3.674022E-40 
                                       f32_3 %332 = OpConstantComposite %331 %331 %331 
                                             %337 = OpTypeBool 
                                             %338 = OpTypePointer Private %337 
                               Private bool* %339 = OpVariable Private 
                                         f32 %363 = OpConstant 3.674022E-40 
                              Private f32_3* %374 = OpVariable Private 
                                       f32_3 %377 = OpConstantComposite %174 %174 %174 
                                         f32 %443 = OpConstant 3.674022E-40 
                                             %451 = OpTypePointer Output %14 
                               Output f32_4* %452 = OpVariable Output 
        UniformConstant read_only Texture2D* %460 = OpVariable UniformConstant 
                    UniformConstant sampler* %462 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                         i32 %472 = OpConstant 7 
                                             %479 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_3 %33 = OpLoad vs_TEXCOORD2 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpFMul %32 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %20 %22 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpLoad vs_TEXCOORD2 
                                        f32_3 %43 = OpVectorShuffle %42 %42 2 2 2 
                                        f32_3 %44 = OpFMul %41 %43 
                                        f32_3 %45 = OpLoad %9 
                                        f32_3 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_3 %47 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %20 %22 %22 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFAdd %47 %50 
                                                      OpStore %9 %51 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpLoad %9 
                                          f32 %56 = OpDot %54 %55 
                                                      OpStore %53 %56 
                        read_only TextureCube %60 = OpLoad %59 
                                      sampler %64 = OpLoad %63 
                 read_only TextureCubeSampled %66 = OpSampledImage %60 %64 
                                        f32_3 %67 = OpLoad %9 
                                        f32_4 %68 = OpImageSampleImplicitLod %66 %67 
                                          f32 %70 = OpCompositeExtract %68 3 
                                 Private f32* %72 = OpAccessChain %9 %71 
                                                      OpStore %72 %70 
                          read_only Texture2D %77 = OpLoad %76 
                                      sampler %79 = OpLoad %78 
                   read_only Texture2DSampled %81 = OpSampledImage %77 %79 
                                          f32 %82 = OpLoad %53 
                                        f32_2 %84 = OpCompositeConstruct %82 %82 
                                        f32_4 %85 = OpImageSampleImplicitLod %81 %84 
                                          f32 %86 = OpCompositeExtract %85 0 
                                                      OpStore %73 %86 
                                 Private f32* %87 = OpAccessChain %9 %71 
                                          f32 %88 = OpLoad %87 
                                          f32 %89 = OpLoad %73 
                                          f32 %90 = OpFMul %88 %89 
                                 Private f32* %91 = OpAccessChain %9 %71 
                                                      OpStore %91 %90 
                                        f32_3 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                               Uniform f32_4* %94 = OpAccessChain %20 %38 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFMul %93 %96 
                                                      OpStore %9 %97 
                                        f32_3 %99 = OpLoad vs_TEXCOORD2 
                                       f32_3 %100 = OpFNegate %99 
                              Uniform f32_3* %102 = OpAccessChain %20 %29 
                                       f32_3 %103 = OpLoad %102 
                                       f32_3 %104 = OpFAdd %100 %103 
                                                      OpStore %98 %104 
                                       f32_3 %105 = OpLoad %98 
                                       f32_3 %106 = OpLoad %98 
                                         f32 %107 = OpDot %105 %106 
                                                      OpStore %53 %107 
                                         f32 %108 = OpLoad %53 
                                         f32 %109 = OpExtInst %1 32 %108 
                                                      OpStore %53 %109 
                                         f32 %110 = OpLoad %53 
                                       f32_3 %111 = OpCompositeConstruct %110 %110 %110 
                                       f32_3 %112 = OpLoad %98 
                                       f32_3 %113 = OpFMul %111 %112 
                                                      OpStore %98 %113 
                                       f32_3 %115 = OpLoad vs_TEXCOORD2 
                                       f32_3 %116 = OpFNegate %115 
                              Uniform f32_4* %117 = OpAccessChain %20 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %116 %119 
                                                      OpStore %114 %120 
                                       f32_3 %121 = OpLoad %114 
                                       f32_3 %122 = OpLoad %114 
                                         f32 %123 = OpDot %121 %122 
                                                      OpStore %53 %123 
                                         f32 %124 = OpLoad %53 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %53 %125 
                                       f32_3 %128 = OpLoad %114 
                                         f32 %129 = OpLoad %53 
                                       f32_3 %130 = OpCompositeConstruct %129 %129 %129 
                                       f32_3 %131 = OpFMul %128 %130 
                                       f32_3 %132 = OpLoad %98 
                                       f32_3 %133 = OpFAdd %131 %132 
                                       f32_4 %134 = OpLoad %127 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %127 %135 
                                         f32 %136 = OpLoad %53 
                                       f32_3 %137 = OpCompositeConstruct %136 %136 %136 
                                       f32_3 %138 = OpLoad %114 
                                       f32_3 %139 = OpFMul %137 %138 
                                                      OpStore %114 %139 
                                       f32_4 %140 = OpLoad %127 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %127 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %53 %144 
                                         f32 %145 = OpLoad %53 
                                         f32 %147 = OpExtInst %1 40 %145 %146 
                                                      OpStore %53 %147 
                                         f32 %148 = OpLoad %53 
                                         f32 %149 = OpExtInst %1 32 %148 
                                                      OpStore %53 %149 
                                         f32 %150 = OpLoad %53 
                                       f32_3 %151 = OpCompositeConstruct %150 %150 %150 
                                       f32_4 %152 = OpLoad %127 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %151 %153 
                                       f32_4 %155 = OpLoad %127 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %127 %156 
                                       f32_3 %158 = OpLoad vs_TEXCOORD1 
                                       f32_3 %159 = OpLoad vs_TEXCOORD1 
                                         f32 %160 = OpDot %158 %159 
                                                      OpStore %53 %160 
                                         f32 %161 = OpLoad %53 
                                         f32 %162 = OpExtInst %1 32 %161 
                                                      OpStore %53 %162 
                                         f32 %164 = OpLoad %53 
                                       f32_3 %165 = OpCompositeConstruct %164 %164 %164 
                                       f32_3 %166 = OpLoad vs_TEXCOORD1 
                                       f32_3 %167 = OpFMul %165 %166 
                                                      OpStore %163 %167 
                                       f32_3 %168 = OpLoad %163 
                                       f32_4 %169 = OpLoad %127 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %53 %171 
                                         f32 %172 = OpLoad %53 
                                         f32 %175 = OpExtInst %1 43 %172 %173 %174 
                                                      OpStore %53 %175 
                                       f32_3 %177 = OpLoad %114 
                                       f32_4 %178 = OpLoad %127 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                         f32 %180 = OpDot %177 %179 
                                                      OpStore %176 %180 
                                         f32 %181 = OpLoad %176 
                                         f32 %182 = OpExtInst %1 43 %181 %173 %174 
                                                      OpStore %176 %182 
                                       f32_3 %183 = OpLoad %163 
                                       f32_3 %184 = OpLoad %114 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %114 %71 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %114 %71 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 43 %188 %173 %174 
                                Private f32* %190 = OpAccessChain %114 %71 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %163 
                                       f32_3 %192 = OpLoad %98 
                                         f32 %193 = OpDot %191 %192 
                                Private f32* %194 = OpAccessChain %98 %71 
                                                      OpStore %194 %193 
                                Uniform f32* %198 = OpAccessChain %20 %196 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %200 %174 
                                                      OpStore %195 %201 
                                         f32 %203 = OpLoad %195 
                                         f32 %204 = OpLoad %195 
                                         f32 %205 = OpFMul %203 %204 
                                                      OpStore %202 %205 
                                         f32 %206 = OpLoad %202 
                                         f32 %208 = OpExtInst %1 40 %206 %207 
                                                      OpStore %202 %208 
                                         f32 %210 = OpLoad %202 
                                         f32 %211 = OpLoad %202 
                                         f32 %212 = OpFMul %210 %211 
                                Private f32* %213 = OpAccessChain %209 %71 
                                                      OpStore %213 %212 
                                         f32 %215 = OpLoad %53 
                                Private f32* %216 = OpAccessChain %209 %71 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFMul %215 %217 
                                         f32 %219 = OpLoad %53 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %218 %220 
                                                      OpStore %214 %221 
                                         f32 %222 = OpLoad %214 
                                         f32 %223 = OpLoad %53 
                                         f32 %224 = OpFMul %222 %223 
                                         f32 %225 = OpFAdd %224 %174 
                                                      OpStore %53 %225 
                                         f32 %226 = OpLoad %53 
                                         f32 %227 = OpLoad %53 
                                         f32 %228 = OpFMul %226 %227 
                                         f32 %230 = OpFAdd %228 %229 
                                                      OpStore %53 %230 
                                Private f32* %231 = OpAccessChain %209 %71 
                                         f32 %232 = OpLoad %231 
                                         f32 %234 = OpFMul %232 %233 
                                Private f32* %235 = OpAccessChain %209 %71 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %209 %71 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpLoad %53 
                                         f32 %239 = OpFDiv %237 %238 
                                                      OpStore %53 %239 
                                         f32 %240 = OpLoad %202 
                                         f32 %241 = OpFNegate %240 
                                         f32 %242 = OpFAdd %241 %174 
                                Private f32* %243 = OpAccessChain %209 %71 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %98 %71 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpExtInst %1 4 %245 
                                Private f32* %247 = OpAccessChain %209 %71 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                         f32 %250 = OpLoad %202 
                                         f32 %251 = OpFAdd %249 %250 
                                                      OpStore %214 %251 
                                Private f32* %252 = OpAccessChain %114 %71 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %209 %71 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %253 %255 
                                         f32 %257 = OpLoad %202 
                                         f32 %258 = OpFAdd %256 %257 
                                                      OpStore %202 %258 
                                         f32 %259 = OpLoad %202 
                                Private f32* %260 = OpAccessChain %98 %71 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpExtInst %1 4 %261 
                                         f32 %263 = OpFMul %259 %262 
                                                      OpStore %202 %263 
                                Private f32* %264 = OpAccessChain %98 %71 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpExtInst %1 4 %265 
                                         f32 %267 = OpFNegate %266 
                                         f32 %268 = OpFAdd %267 %174 
                                Private f32* %269 = OpAccessChain %98 %71 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %114 %71 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpLoad %214 
                                         f32 %273 = OpFMul %271 %272 
                                         f32 %274 = OpLoad %202 
                                         f32 %275 = OpFAdd %273 %274 
                                                      OpStore %202 %275 
                                         f32 %276 = OpLoad %202 
                                         f32 %278 = OpFAdd %276 %277 
                                                      OpStore %202 %278 
                                         f32 %280 = OpLoad %202 
                                         f32 %281 = OpFDiv %279 %280 
                                                      OpStore %202 %281 
                                         f32 %282 = OpLoad %53 
                                         f32 %283 = OpLoad %202 
                                         f32 %284 = OpFMul %282 %283 
                                                      OpStore %53 %284 
                                Private f32* %285 = OpAccessChain %114 %71 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpLoad %53 
                                         f32 %288 = OpFMul %286 %287 
                                                      OpStore %53 %288 
                                         f32 %289 = OpLoad %53 
                                         f32 %291 = OpFMul %289 %290 
                                                      OpStore %53 %291 
                                         f32 %292 = OpLoad %53 
                                         f32 %293 = OpExtInst %1 40 %292 %173 
                                                      OpStore %53 %293 
                         read_only Texture2D %295 = OpLoad %294 
                                     sampler %297 = OpLoad %296 
                  read_only Texture2DSampled %298 = OpSampledImage %295 %297 
                                       f32_2 %301 = OpLoad vs_TEXCOORD0 
                                       f32_4 %302 = OpImageSampleImplicitLod %298 %301 
                                                      OpStore %127 %302 
                                       f32_4 %303 = OpLoad %127 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                              Uniform f32_4* %306 = OpAccessChain %20 %305 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFMul %304 %308 
                                       f32_3 %312 = OpFAdd %309 %311 
                                                      OpStore %209 %312 
                                       f32_4 %313 = OpLoad %127 
                              Uniform f32_4* %314 = OpAccessChain %20 %305 
                                       f32_4 %315 = OpLoad %314 
                                       f32_4 %316 = OpFMul %313 %315 
                                                      OpStore %127 %316 
                                Uniform f32* %318 = OpAccessChain %20 %317 
                                         f32 %319 = OpLoad %318 
                                Uniform f32* %320 = OpAccessChain %20 %317 
                                         f32 %321 = OpLoad %320 
                                Uniform f32* %322 = OpAccessChain %20 %317 
                                         f32 %323 = OpLoad %322 
                                       f32_3 %324 = OpCompositeConstruct %319 %321 %323 
                                         f32 %325 = OpCompositeExtract %324 0 
                                         f32 %326 = OpCompositeExtract %324 1 
                                         f32 %327 = OpCompositeExtract %324 2 
                                       f32_3 %328 = OpCompositeConstruct %325 %326 %327 
                                       f32_3 %329 = OpLoad %209 
                                       f32_3 %330 = OpFMul %328 %329 
                                       f32_3 %333 = OpFAdd %330 %332 
                                                      OpStore %209 %333 
                                       f32_3 %334 = OpLoad %209 
                                       f32_3 %335 = OpLoad %209 
                                         f32 %336 = OpDot %334 %335 
                                                      OpStore %202 %336 
                                         f32 %340 = OpLoad %202 
                                        bool %341 = OpFOrdNotEqual %340 %173 
                                                      OpStore %339 %341 
                                        bool %342 = OpLoad %339 
                                         f32 %343 = OpSelect %342 %174 %173 
                                                      OpStore %202 %343 
                                         f32 %344 = OpLoad %53 
                                         f32 %345 = OpLoad %202 
                                         f32 %346 = OpFMul %344 %345 
                                                      OpStore %53 %346 
                                       f32_3 %347 = OpLoad %9 
                                         f32 %348 = OpLoad %53 
                                       f32_3 %349 = OpCompositeConstruct %348 %348 %348 
                                       f32_3 %350 = OpFMul %347 %349 
                                                      OpStore %163 %350 
                                         f32 %351 = OpLoad %176 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %174 
                                                      OpStore %53 %353 
                                         f32 %354 = OpLoad %176 
                                         f32 %355 = OpLoad %176 
                                         f32 %356 = OpFMul %354 %355 
                                                      OpStore %202 %356 
                                         f32 %357 = OpLoad %202 
                                       f32_2 %358 = OpCompositeConstruct %357 %357 
                                         f32 %359 = OpLoad %195 
                                       f32_2 %360 = OpCompositeConstruct %359 %359 
                                         f32 %361 = OpDot %358 %360 
                                                      OpStore %195 %361 
                                         f32 %362 = OpLoad %195 
                                         f32 %364 = OpFAdd %362 %363 
                                                      OpStore %195 %364 
                                         f32 %365 = OpLoad %53 
                                         f32 %366 = OpLoad %53 
                                         f32 %367 = OpFMul %365 %366 
                                                      OpStore %202 %367 
                                         f32 %368 = OpLoad %202 
                                         f32 %369 = OpLoad %202 
                                         f32 %370 = OpFMul %368 %369 
                                                      OpStore %202 %370 
                                         f32 %371 = OpLoad %53 
                                         f32 %372 = OpLoad %202 
                                         f32 %373 = OpFMul %371 %372 
                                                      OpStore %53 %373 
                                       f32_3 %375 = OpLoad %209 
                                       f32_3 %376 = OpFNegate %375 
                                       f32_3 %378 = OpFAdd %376 %377 
                                                      OpStore %374 %378 
                                       f32_3 %379 = OpLoad %374 
                                         f32 %380 = OpLoad %53 
                                       f32_3 %381 = OpCompositeConstruct %380 %380 %380 
                                       f32_3 %382 = OpFMul %379 %381 
                                       f32_3 %383 = OpLoad %209 
                                       f32_3 %384 = OpFAdd %382 %383 
                                                      OpStore %209 %384 
                                       f32_3 %385 = OpLoad %209 
                                       f32_3 %386 = OpLoad %163 
                                       f32_3 %387 = OpFMul %385 %386 
                                                      OpStore %209 %387 
                                Private f32* %388 = OpAccessChain %98 %71 
                                         f32 %389 = OpLoad %388 
                                Private f32* %390 = OpAccessChain %98 %71 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFMul %389 %391 
                                                      OpStore %53 %392 
                                         f32 %393 = OpLoad %53 
                                         f32 %394 = OpLoad %53 
                                         f32 %395 = OpFMul %393 %394 
                                                      OpStore %53 %395 
                                Private f32* %396 = OpAccessChain %98 %71 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpLoad %53 
                                         f32 %399 = OpFMul %397 %398 
                                                      OpStore %53 %399 
                                         f32 %400 = OpLoad %195 
                                         f32 %401 = OpLoad %53 
                                         f32 %402 = OpFMul %400 %401 
                                         f32 %403 = OpFAdd %402 %174 
                                                      OpStore %53 %403 
                                Private f32* %404 = OpAccessChain %114 %71 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFNegate %405 
                                         f32 %407 = OpFAdd %406 %174 
                                Private f32* %408 = OpAccessChain %98 %71 
                                                      OpStore %408 %407 
                                Private f32* %409 = OpAccessChain %98 %71 
                                         f32 %410 = OpLoad %409 
                                Private f32* %411 = OpAccessChain %98 %71 
                                         f32 %412 = OpLoad %411 
                                         f32 %413 = OpFMul %410 %412 
                                                      OpStore %202 %413 
                                         f32 %414 = OpLoad %202 
                                         f32 %415 = OpLoad %202 
                                         f32 %416 = OpFMul %414 %415 
                                                      OpStore %202 %416 
                                Private f32* %417 = OpAccessChain %98 %71 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpLoad %202 
                                         f32 %420 = OpFMul %418 %419 
                                Private f32* %421 = OpAccessChain %98 %71 
                                                      OpStore %421 %420 
                                         f32 %422 = OpLoad %195 
                                Private f32* %423 = OpAccessChain %98 %71 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpFMul %422 %424 
                                         f32 %426 = OpFAdd %425 %174 
                                Private f32* %427 = OpAccessChain %98 %71 
                                                      OpStore %427 %426 
                                         f32 %428 = OpLoad %53 
                                Private f32* %429 = OpAccessChain %98 %71 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpFMul %428 %430 
                                                      OpStore %53 %431 
                                Private f32* %432 = OpAccessChain %114 %71 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpLoad %53 
                                         f32 %435 = OpFMul %433 %434 
                                                      OpStore %53 %435 
                                         f32 %436 = OpLoad %53 
                                       f32_3 %437 = OpCompositeConstruct %436 %436 %436 
                                       f32_3 %438 = OpLoad %9 
                                       f32_3 %439 = OpFMul %437 %438 
                                                      OpStore %9 %439 
                                Uniform f32* %440 = OpAccessChain %20 %317 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFNegate %441 
                                         f32 %444 = OpFMul %442 %443 
                                         f32 %445 = OpFAdd %444 %443 
                                                      OpStore %53 %445 
                                         f32 %446 = OpLoad %53 
                                       f32_3 %447 = OpCompositeConstruct %446 %446 %446 
                                       f32_4 %448 = OpLoad %127 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
                                       f32_3 %450 = OpFMul %447 %449 
                                                      OpStore %98 %450 
                                       f32_3 %453 = OpLoad %98 
                                       f32_3 %454 = OpLoad %9 
                                       f32_3 %455 = OpFMul %453 %454 
                                       f32_3 %456 = OpLoad %209 
                                       f32_3 %457 = OpFAdd %455 %456 
                                       f32_4 %458 = OpLoad %452 
                                       f32_4 %459 = OpVectorShuffle %458 %457 4 5 6 3 
                                                      OpStore %452 %459 
                         read_only Texture2D %461 = OpLoad %460 
                                     sampler %463 = OpLoad %462 
                  read_only Texture2DSampled %464 = OpSampledImage %461 %463 
                                       f32_2 %466 = OpLoad vs_TEXCOORD3 
                                       f32_4 %467 = OpImageSampleImplicitLod %464 %466 
                                         f32 %468 = OpCompositeExtract %467 3 
                                Private f32* %469 = OpAccessChain %9 %71 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %9 %71 
                                         f32 %471 = OpLoad %470 
                                Uniform f32* %473 = OpAccessChain %20 %472 %69 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %471 %474 
                                Private f32* %476 = OpAccessChain %127 %69 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpFAdd %475 %477 
                                 Output f32* %480 = OpAccessChain %452 %69 
                                                      OpStore %480 %478 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec2 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat7;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat1.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat2.zz + u_xlat1.xy;
    u_xlat7.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat1.xy = (-u_xlat1.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat7.xy;
    u_xlat1.xy = u_xlat1.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat1.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat12;
vec2 u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13.x = u_xlat7 * u_xlat7;
    u_xlat13.x = max(u_xlat13.x, 0.00200000009);
    u_xlat19 = u_xlat13.x * u_xlat13.x;
    u_xlat20 = u_xlat18 * u_xlat19 + (-u_xlat18);
    u_xlat18 = u_xlat20 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat19 = u_xlat19 * 0.318309873;
    u_xlat18 = u_xlat19 / u_xlat18;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat12 = (-u_xlat13.x) + 1.0;
    u_xlat19 = abs(u_xlat0.x) * u_xlat12 + u_xlat13.x;
    u_xlat12 = u_xlat6 * u_xlat12 + u_xlat13.x;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat19 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat6 * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2 = u_xlat2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat13.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat13.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat13.xy;
    u_xlat13.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat13.xy;
    u_xlat13.xy = u_xlat13.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4 = texture(_LightTexture0, u_xlat13.xy);
    u_xlat4.xyz = u_xlat4.www * _LightColor0.xyz;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = dot(vec2(u_xlat18), vec2(u_xlat7));
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
    u_xlat12 = u_xlat0.x * u_xlat0.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat18 * u_xlat0.x + 1.0;
    u_xlat12 = (-u_xlat6) + 1.0;
    u_xlat19 = u_xlat12 * u_xlat12;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat12 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    SV_Target0.w = u_xlat0.w * _RedDotColor.w + u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 322
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %83 %144 %219 %225 %226 %239 %269 %306 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %81 0 BuiltIn 81 
                                                      OpMemberDecorate %81 1 BuiltIn 81 
                                                      OpMemberDecorate %81 2 BuiltIn 81 
                                                      OpDecorate %81 Block 
                                                      OpDecorate vs_TEXCOORD2 Location 144 
                                                      OpDecorate vs_TEXCOORD3 Location 219 
                                                      OpDecorate vs_TEXCOORD0 Location 225 
                                                      OpDecorate %226 Location 226 
                                                      OpDecorate %239 Location 239 
                                                      OpDecorate vs_TEXCOORD1 Location 269 
                                                      OpDecorate vs_TEXCOORD4 Location 306 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeStruct %14 %17 %18 %19 %20 %6 %6 %6 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                               Private f32_4* %46 = OpVariable Private 
                                          i32 %48 = OpConstant 3 
                               Private f32_4* %59 = OpVariable Private 
                                          u32 %79 = OpConstant 1 
                                              %80 = OpTypeArray %6 %79 
                                              %81 = OpTypeStruct %7 %6 %80 
                                              %82 = OpTypePointer Output %81 
         Output struct {f32_4; f32; f32[1];}* %83 = OpVariable Output 
                                              %91 = OpTypePointer Output %7 
                                             %137 = OpTypePointer Uniform %14 
                                             %143 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %147 = OpTypeVector %6 2 
                                             %178 = OpTypePointer Private %147 
                              Private f32_2* %179 = OpVariable Private 
                                         i32 %182 = OpConstant 7 
                                             %183 = OpTypePointer Uniform %6 
                                         i32 %186 = OpConstant 8 
                                         i32 %195 = OpConstant 6 
                                         i32 %211 = OpConstant 5 
                                             %218 = OpTypePointer Output %147 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                                       f32_2 %223 = OpConstantComposite %222 %222 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %226 = OpVariable Input 
                                         i32 %229 = OpConstant 9 
                                             %238 = OpTypePointer Input %14 
                                Input f32_3* %239 = OpVariable Input 
                                         u32 %245 = OpConstant 0 
                                             %246 = OpTypePointer Private %6 
                                         u32 %259 = OpConstant 2 
                                Private f32* %261 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %277 = OpConstant 4 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                             %316 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %23 %25 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %31 = OpAccessChain %23 %25 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpLoad %11 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
                                        f32_4 %35 = OpFMul %32 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %23 %25 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_4 %41 = OpLoad %11 
                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
                                        f32_4 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_4 %47 = OpLoad %9 
                               Uniform f32_4* %49 = OpAccessChain %23 %25 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_4 %51 = OpFAdd %47 %50 
                                                      OpStore %46 %51 
                               Uniform f32_4* %52 = OpAccessChain %23 %25 %48 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %9 %58 
                                        f32_4 %60 = OpLoad %46 
                                        f32_4 %61 = OpVectorShuffle %60 %60 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %23 %48 %25 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %61 %63 
                                                      OpStore %59 %64 
                               Uniform f32_4* %65 = OpAccessChain %23 %48 %30 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %46 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %48 %38 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %46 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %59 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %59 %78 
                               Uniform f32_4* %84 = OpAccessChain %23 %48 %48 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpLoad %46 
                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
                                        f32_4 %88 = OpFMul %85 %87 
                                        f32_4 %89 = OpLoad %59 
                                        f32_4 %90 = OpFAdd %88 %89 
                                Output f32_4* %92 = OpAccessChain %83 %30 
                                                      OpStore %92 %90 
                                        f32_4 %93 = OpLoad %11 
                                        f32_3 %94 = OpVectorShuffle %93 %93 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %23 %25 %25 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFMul %94 %97 
                                        f32_4 %99 = OpLoad %46 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %46 %100 
                              Uniform f32_4* %101 = OpAccessChain %23 %25 %30 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %11 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 0 0 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %46 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %46 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %46 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %38 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_4 %115 = OpLoad %11 
                                       f32_3 %116 = OpVectorShuffle %115 %115 2 2 2 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %46 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %46 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %46 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %48 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %11 
                                       f32_3 %127 = OpVectorShuffle %126 %126 3 3 3 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %46 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %46 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %46 %133 
                                       f32_4 %134 = OpLoad %46 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %23 %30 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                       f32_4 %141 = OpLoad %59 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %59 %142 
                                       f32_4 %145 = OpLoad %46 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore vs_TEXCOORD2 %146 
                                       f32_4 %148 = OpLoad %59 
                                       f32_2 %149 = OpVectorShuffle %148 %148 1 1 
                              Uniform f32_4* %150 = OpAccessChain %23 %38 %25 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %149 %152 
                                       f32_4 %154 = OpLoad %46 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                                      OpStore %46 %155 
                              Uniform f32_4* %156 = OpAccessChain %23 %38 %30 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_4 %159 = OpLoad %59 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 0 
                                       f32_2 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %46 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
                                       f32_2 %164 = OpFAdd %161 %163 
                                       f32_4 %165 = OpLoad %46 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 5 2 3 
                                                      OpStore %46 %166 
                              Uniform f32_4* %167 = OpAccessChain %23 %38 %38 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 1 
                                       f32_4 %170 = OpLoad %59 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_2 %172 = OpFMul %169 %171 
                                       f32_4 %173 = OpLoad %46 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_2 %175 = OpFAdd %172 %174 
                                       f32_4 %176 = OpLoad %46 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 2 3 
                                                      OpStore %46 %177 
                                       f32_4 %180 = OpLoad %11 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                Uniform f32* %184 = OpAccessChain %23 %182 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %187 = OpAccessChain %23 %186 
                                         f32 %188 = OpLoad %187 
                                       f32_2 %189 = OpCompositeConstruct %185 %188 
                                       f32_2 %190 = OpFNegate %189 
                                       f32_2 %191 = OpFAdd %181 %190 
                                                      OpStore %179 %191 
                                       f32_4 %192 = OpLoad %46 
                                       f32_2 %193 = OpVectorShuffle %192 %192 0 1 
                                       f32_2 %194 = OpFNegate %193 
                                Uniform f32* %196 = OpAccessChain %23 %195 
                                         f32 %197 = OpLoad %196 
                                Uniform f32* %198 = OpAccessChain %23 %195 
                                         f32 %199 = OpLoad %198 
                                       f32_2 %200 = OpCompositeConstruct %197 %199 
                                         f32 %201 = OpCompositeExtract %200 0 
                                         f32 %202 = OpCompositeExtract %200 1 
                                       f32_2 %203 = OpCompositeConstruct %201 %202 
                                       f32_2 %204 = OpFMul %194 %203 
                                       f32_2 %205 = OpLoad %179 
                                       f32_2 %206 = OpFAdd %204 %205 
                                       f32_4 %207 = OpLoad %46 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 2 3 
                                                      OpStore %46 %208 
                                       f32_4 %209 = OpLoad %46 
                                       f32_2 %210 = OpVectorShuffle %209 %209 0 1 
                                Uniform f32* %212 = OpAccessChain %23 %211 
                                         f32 %213 = OpLoad %212 
                                       f32_2 %214 = OpCompositeConstruct %213 %213 
                                       f32_2 %215 = OpFDiv %210 %214 
                                       f32_4 %216 = OpLoad %46 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 2 3 
                                                      OpStore %46 %217 
                                       f32_4 %220 = OpLoad %46 
                                       f32_2 %221 = OpVectorShuffle %220 %220 0 1 
                                       f32_2 %224 = OpFAdd %221 %223 
                                                      OpStore vs_TEXCOORD3 %224 
                                       f32_4 %227 = OpLoad %226 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                              Uniform f32_4* %230 = OpAccessChain %23 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFMul %228 %232 
                              Uniform f32_4* %234 = OpAccessChain %23 %229 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 2 3 
                                       f32_2 %237 = OpFAdd %233 %236 
                                                      OpStore vs_TEXCOORD0 %237 
                                       f32_3 %240 = OpLoad %239 
                              Uniform f32_4* %241 = OpAccessChain %23 %38 %30 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                         f32 %244 = OpDot %240 %243 
                                Private f32* %247 = OpAccessChain %46 %245 
                                                      OpStore %247 %244 
                                       f32_3 %248 = OpLoad %239 
                              Uniform f32_4* %249 = OpAccessChain %23 %38 %25 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpDot %248 %251 
                                Private f32* %253 = OpAccessChain %46 %79 
                                                      OpStore %253 %252 
                                       f32_3 %254 = OpLoad %239 
                              Uniform f32_4* %255 = OpAccessChain %23 %38 %38 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %260 = OpAccessChain %46 %259 
                                                      OpStore %260 %258 
                                       f32_4 %262 = OpLoad %46 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %46 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                         f32 %266 = OpDot %263 %265 
                                                      OpStore %261 %266 
                                         f32 %267 = OpLoad %261 
                                         f32 %268 = OpExtInst %1 32 %267 
                                                      OpStore %261 %268 
                                         f32 %270 = OpLoad %261 
                                       f32_3 %271 = OpCompositeConstruct %270 %270 %270 
                                       f32_4 %272 = OpLoad %46 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFMul %271 %273 
                                                      OpStore vs_TEXCOORD1 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_2 %276 = OpVectorShuffle %275 %275 1 1 
                              Uniform f32_4* %278 = OpAccessChain %23 %277 %25 
                                       f32_4 %279 = OpLoad %278 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_2 %281 = OpFMul %276 %280 
                                       f32_4 %282 = OpLoad %46 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 2 3 
                                                      OpStore %46 %283 
                              Uniform f32_4* %284 = OpAccessChain %23 %277 %30 
                                       f32_4 %285 = OpLoad %284 
                                       f32_2 %286 = OpVectorShuffle %285 %285 0 1 
                                       f32_4 %287 = OpLoad %9 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 0 
                                       f32_2 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %46 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 1 
                                       f32_2 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %9 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 2 3 
                                                      OpStore %9 %294 
                              Uniform f32_4* %295 = OpAccessChain %23 %277 %38 
                                       f32_4 %296 = OpLoad %295 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                       f32_4 %298 = OpLoad %9 
                                       f32_2 %299 = OpVectorShuffle %298 %298 2 2 
                                       f32_2 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %9 
                                       f32_2 %302 = OpVectorShuffle %301 %301 0 1 
                                       f32_2 %303 = OpFAdd %300 %302 
                                       f32_4 %304 = OpLoad %9 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 2 3 
                                                      OpStore %9 %305 
                              Uniform f32_4* %307 = OpAccessChain %23 %277 %48 
                                       f32_4 %308 = OpLoad %307 
                                       f32_2 %309 = OpVectorShuffle %308 %308 0 1 
                                       f32_4 %310 = OpLoad %9 
                                       f32_2 %311 = OpVectorShuffle %310 %310 3 3 
                                       f32_2 %312 = OpFMul %309 %311 
                                       f32_4 %313 = OpLoad %9 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_2 %315 = OpFAdd %312 %314 
                                                      OpStore vs_TEXCOORD4 %315 
                                 Output f32* %317 = OpAccessChain %83 %30 %79 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFNegate %318 
                                 Output f32* %320 = OpAccessChain %83 %30 %79 
                                                      OpStore %320 %319 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 454
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %61 %218 %423 %437 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate vs_TEXCOORD1 Location 61 
                                                      OpDecorate %209 DescriptorSet 209 
                                                      OpDecorate %209 Binding 209 
                                                      OpDecorate %213 DescriptorSet 213 
                                                      OpDecorate %213 Binding 213 
                                                      OpDecorate vs_TEXCOORD0 Location 218 
                                                      OpDecorate %295 DescriptorSet 295 
                                                      OpDecorate %295 Binding 295 
                                                      OpDecorate %297 DescriptorSet 297 
                                                      OpDecorate %297 Binding 297 
                                                      OpDecorate %423 Location 423 
                                                      OpDecorate %432 DescriptorSet 432 
                                                      OpDecorate %432 Binding 432 
                                                      OpDecorate %434 DescriptorSet 434 
                                                      OpDecorate %434 Binding 434 
                                                      OpDecorate vs_TEXCOORD3 Location 437 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %17 %6 %6 %14 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %34 = OpVariable Private 
                                          i32 %39 = OpConstant 1 
                                              %40 = OpTypePointer Uniform %14 
                                          f32 %53 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %67 = OpTypePointer Private %14 
                               Private f32_4* %68 = OpVariable Private 
                                          f32 %80 = OpConstant 3.674022E-40 
                                          f32 %81 = OpConstant 3.674022E-40 
                                          u32 %88 = OpConstant 0 
                                 Private f32* %94 = OpVariable Private 
                                          i32 %95 = OpConstant 4 
                                              %96 = OpTypePointer Uniform %6 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Private %101 
                              Private f32_2* %103 = OpVariable Private 
                                         f32 %110 = OpConstant 3.674022E-40 
                                Private f32* %113 = OpVariable Private 
                                Private f32* %119 = OpVariable Private 
                                         f32 %133 = OpConstant 3.674022E-40 
                                         f32 %136 = OpConstant 3.674022E-40 
                                Private f32* %146 = OpVariable Private 
                                Private f32* %155 = OpVariable Private 
                                         f32 %191 = OpConstant 3.674022E-40 
                                         f32 %193 = OpConstant 3.674022E-40 
                                         f32 %203 = OpConstant 3.674022E-40 
                                             %207 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %208 = OpTypePointer UniformConstant %207 
        UniformConstant read_only Texture2D* %209 = OpVariable UniformConstant 
                                             %211 = OpTypeSampler 
                                             %212 = OpTypePointer UniformConstant %211 
                    UniformConstant sampler* %213 = OpVariable UniformConstant 
                                             %215 = OpTypeSampledImage %207 
                                             %217 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                              Private f32_3* %221 = OpVariable Private 
                                         i32 %224 = OpConstant 6 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_3 %230 = OpConstantComposite %229 %229 %229 
                                         i32 %236 = OpConstant 5 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                             %256 = OpTypeBool 
                                             %257 = OpTypePointer Private %256 
                               Private bool* %258 = OpVariable Private 
                                         i32 %268 = OpConstant 3 
                                         i32 %281 = OpConstant 2 
        UniformConstant read_only Texture2D* %295 = OpVariable UniformConstant 
                    UniformConstant sampler* %297 = OpVariable UniformConstant 
                                         u32 %302 = OpConstant 3 
                              Private f32_3* %304 = OpVariable Private 
                              Private f32_3* %311 = OpVariable Private 
                                         f32 %331 = OpConstant 3.674022E-40 
                                       f32_3 %349 = OpConstantComposite %81 %81 %81 
                                         f32 %412 = OpConstant 3.674022E-40 
                                             %422 = OpTypePointer Output %14 
                               Output f32_4* %423 = OpVariable Output 
        UniformConstant read_only Texture2D* %432 = OpVariable UniformConstant 
                    UniformConstant sampler* %434 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                         i32 %444 = OpConstant 7 
                                             %451 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                        f32_3 %35 = OpLoad %9 
                                          f32 %36 = OpLoad %28 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_3 %38 = OpFMul %35 %37 
                               Uniform f32_4* %41 = OpAccessChain %20 %39 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_3 %44 = OpFAdd %38 %43 
                                                      OpStore %34 %44 
                                          f32 %45 = OpLoad %28 
                                        f32_3 %46 = OpCompositeConstruct %45 %45 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFMul %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %34 
                                        f32_3 %50 = OpLoad %34 
                                          f32 %51 = OpDot %49 %50 
                                                      OpStore %28 %51 
                                          f32 %52 = OpLoad %28 
                                          f32 %54 = OpExtInst %1 40 %52 %53 
                                                      OpStore %28 %54 
                                          f32 %55 = OpLoad %28 
                                          f32 %56 = OpExtInst %1 32 %55 
                                                      OpStore %28 %56 
                                          f32 %57 = OpLoad %28 
                                        f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                                        f32_3 %59 = OpLoad %34 
                                        f32_3 %60 = OpFMul %58 %59 
                                                      OpStore %34 %60 
                                        f32_3 %62 = OpLoad vs_TEXCOORD1 
                                        f32_3 %63 = OpLoad vs_TEXCOORD1 
                                          f32 %64 = OpDot %62 %63 
                                                      OpStore %28 %64 
                                          f32 %65 = OpLoad %28 
                                          f32 %66 = OpExtInst %1 32 %65 
                                                      OpStore %28 %66 
                                          f32 %69 = OpLoad %28 
                                        f32_3 %70 = OpCompositeConstruct %69 %69 %69 
                                        f32_3 %71 = OpLoad vs_TEXCOORD1 
                                        f32_3 %72 = OpFMul %70 %71 
                                        f32_4 %73 = OpLoad %68 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 6 3 
                                                      OpStore %68 %74 
                                        f32_4 %75 = OpLoad %68 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpLoad %34 
                                          f32 %78 = OpDot %76 %77 
                                                      OpStore %28 %78 
                                          f32 %79 = OpLoad %28 
                                          f32 %82 = OpExtInst %1 43 %79 %80 %81 
                                                      OpStore %28 %82 
                               Uniform f32_4* %83 = OpAccessChain %20 %39 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpLoad %34 
                                          f32 %87 = OpDot %85 %86 
                                 Private f32* %89 = OpAccessChain %34 %88 
                                                      OpStore %89 %87 
                                 Private f32* %90 = OpAccessChain %34 %88 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpExtInst %1 43 %91 %80 %81 
                                 Private f32* %93 = OpAccessChain %34 %88 
                                                      OpStore %93 %92 
                                 Uniform f32* %97 = OpAccessChain %20 %95 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFNegate %98 
                                         f32 %100 = OpFAdd %99 %81 
                                                      OpStore %94 %100 
                                         f32 %104 = OpLoad %94 
                                         f32 %105 = OpLoad %94 
                                         f32 %106 = OpFMul %104 %105 
                                Private f32* %107 = OpAccessChain %103 %88 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %103 %88 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpExtInst %1 40 %109 %110 
                                Private f32* %112 = OpAccessChain %103 %88 
                                                      OpStore %112 %111 
                                Private f32* %114 = OpAccessChain %103 %88 
                                         f32 %115 = OpLoad %114 
                                Private f32* %116 = OpAccessChain %103 %88 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                                      OpStore %113 %118 
                                         f32 %120 = OpLoad %28 
                                         f32 %121 = OpLoad %113 
                                         f32 %122 = OpFMul %120 %121 
                                         f32 %123 = OpLoad %28 
                                         f32 %124 = OpFNegate %123 
                                         f32 %125 = OpFAdd %122 %124 
                                                      OpStore %119 %125 
                                         f32 %126 = OpLoad %119 
                                         f32 %127 = OpLoad %28 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %129 = OpFAdd %128 %81 
                                                      OpStore %28 %129 
                                         f32 %130 = OpLoad %28 
                                         f32 %131 = OpLoad %28 
                                         f32 %132 = OpFMul %130 %131 
                                         f32 %134 = OpFAdd %132 %133 
                                                      OpStore %28 %134 
                                         f32 %135 = OpLoad %113 
                                         f32 %137 = OpFMul %135 %136 
                                                      OpStore %113 %137 
                                         f32 %138 = OpLoad %113 
                                         f32 %139 = OpLoad %28 
                                         f32 %140 = OpFDiv %138 %139 
                                                      OpStore %28 %140 
                                       f32_4 %141 = OpLoad %68 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpLoad %9 
                                         f32 %144 = OpDot %142 %143 
                                Private f32* %145 = OpAccessChain %9 %88 
                                                      OpStore %145 %144 
                                       f32_4 %147 = OpLoad %68 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %20 %39 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %148 %151 
                                                      OpStore %146 %152 
                                         f32 %153 = OpLoad %146 
                                         f32 %154 = OpExtInst %1 43 %153 %80 %81 
                                                      OpStore %146 %154 
                                Private f32* %156 = OpAccessChain %103 %88 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFNegate %157 
                                         f32 %159 = OpFAdd %158 %81 
                                                      OpStore %155 %159 
                                Private f32* %160 = OpAccessChain %9 %88 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpExtInst %1 4 %161 
                                         f32 %163 = OpLoad %155 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %165 = OpAccessChain %103 %88 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFAdd %164 %166 
                                                      OpStore %113 %167 
                                         f32 %168 = OpLoad %146 
                                         f32 %169 = OpLoad %155 
                                         f32 %170 = OpFMul %168 %169 
                                Private f32* %171 = OpAccessChain %103 %88 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFAdd %170 %172 
                                                      OpStore %155 %173 
                                         f32 %174 = OpLoad %155 
                                Private f32* %175 = OpAccessChain %9 %88 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpExtInst %1 4 %176 
                                         f32 %178 = OpFMul %174 %177 
                                                      OpStore %155 %178 
                                Private f32* %179 = OpAccessChain %9 %88 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 4 %180 
                                         f32 %182 = OpFNegate %181 
                                         f32 %183 = OpFAdd %182 %81 
                                Private f32* %184 = OpAccessChain %9 %88 
                                                      OpStore %184 %183 
                                         f32 %185 = OpLoad %146 
                                         f32 %186 = OpLoad %113 
                                         f32 %187 = OpFMul %185 %186 
                                         f32 %188 = OpLoad %155 
                                         f32 %189 = OpFAdd %187 %188 
                                                      OpStore %155 %189 
                                         f32 %190 = OpLoad %155 
                                         f32 %192 = OpFAdd %190 %191 
                                                      OpStore %155 %192 
                                         f32 %194 = OpLoad %155 
                                         f32 %195 = OpFDiv %193 %194 
                                                      OpStore %155 %195 
                                         f32 %196 = OpLoad %28 
                                         f32 %197 = OpLoad %155 
                                         f32 %198 = OpFMul %196 %197 
                                                      OpStore %155 %198 
                                         f32 %199 = OpLoad %146 
                                         f32 %200 = OpLoad %155 
                                         f32 %201 = OpFMul %199 %200 
                                                      OpStore %155 %201 
                                         f32 %202 = OpLoad %155 
                                         f32 %204 = OpFMul %202 %203 
                                                      OpStore %155 %204 
                                         f32 %205 = OpLoad %155 
                                         f32 %206 = OpExtInst %1 40 %205 %80 
                                                      OpStore %155 %206 
                         read_only Texture2D %210 = OpLoad %209 
                                     sampler %214 = OpLoad %213 
                  read_only Texture2DSampled %216 = OpSampledImage %210 %214 
                                       f32_2 %219 = OpLoad vs_TEXCOORD0 
                                       f32_4 %220 = OpImageSampleImplicitLod %216 %219 
                                                      OpStore %68 %220 
                                       f32_4 %222 = OpLoad %68 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                              Uniform f32_4* %225 = OpAccessChain %20 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %223 %227 
                                       f32_3 %231 = OpFAdd %228 %230 
                                                      OpStore %221 %231 
                                       f32_4 %232 = OpLoad %68 
                              Uniform f32_4* %233 = OpAccessChain %20 %224 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpFMul %232 %234 
                                                      OpStore %68 %235 
                                Uniform f32* %237 = OpAccessChain %20 %236 
                                         f32 %238 = OpLoad %237 
                                Uniform f32* %239 = OpAccessChain %20 %236 
                                         f32 %240 = OpLoad %239 
                                Uniform f32* %241 = OpAccessChain %20 %236 
                                         f32 %242 = OpLoad %241 
                                       f32_3 %243 = OpCompositeConstruct %238 %240 %242 
                                         f32 %244 = OpCompositeExtract %243 0 
                                         f32 %245 = OpCompositeExtract %243 1 
                                         f32 %246 = OpCompositeExtract %243 2 
                                       f32_3 %247 = OpCompositeConstruct %244 %245 %246 
                                       f32_3 %248 = OpLoad %221 
                                       f32_3 %249 = OpFMul %247 %248 
                                       f32_3 %252 = OpFAdd %249 %251 
                                                      OpStore %221 %252 
                                       f32_3 %253 = OpLoad %221 
                                       f32_3 %254 = OpLoad %221 
                                         f32 %255 = OpDot %253 %254 
                                                      OpStore %28 %255 
                                         f32 %259 = OpLoad %28 
                                        bool %260 = OpFOrdNotEqual %259 %80 
                                                      OpStore %258 %260 
                                        bool %261 = OpLoad %258 
                                         f32 %262 = OpSelect %261 %81 %80 
                                                      OpStore %28 %262 
                                         f32 %263 = OpLoad %28 
                                         f32 %264 = OpLoad %155 
                                         f32 %265 = OpFMul %263 %264 
                                                      OpStore %155 %265 
                                       f32_3 %266 = OpLoad vs_TEXCOORD2 
                                       f32_2 %267 = OpVectorShuffle %266 %266 1 1 
                              Uniform f32_4* %269 = OpAccessChain %20 %268 %39 
                                       f32_4 %270 = OpLoad %269 
                                       f32_2 %271 = OpVectorShuffle %270 %270 0 1 
                                       f32_2 %272 = OpFMul %267 %271 
                                                      OpStore %103 %272 
                              Uniform f32_4* %273 = OpAccessChain %20 %268 %22 
                                       f32_4 %274 = OpLoad %273 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_3 %276 = OpLoad vs_TEXCOORD2 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 0 
                                       f32_2 %278 = OpFMul %275 %277 
                                       f32_2 %279 = OpLoad %103 
                                       f32_2 %280 = OpFAdd %278 %279 
                                                      OpStore %103 %280 
                              Uniform f32_4* %282 = OpAccessChain %20 %268 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_3 %285 = OpLoad vs_TEXCOORD2 
                                       f32_2 %286 = OpVectorShuffle %285 %285 2 2 
                                       f32_2 %287 = OpFMul %284 %286 
                                       f32_2 %288 = OpLoad %103 
                                       f32_2 %289 = OpFAdd %287 %288 
                                                      OpStore %103 %289 
                                       f32_2 %290 = OpLoad %103 
                              Uniform f32_4* %291 = OpAccessChain %20 %268 %268 
                                       f32_4 %292 = OpLoad %291 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                       f32_2 %294 = OpFAdd %290 %293 
                                                      OpStore %103 %294 
                         read_only Texture2D %296 = OpLoad %295 
                                     sampler %298 = OpLoad %297 
                  read_only Texture2DSampled %299 = OpSampledImage %296 %298 
                                       f32_2 %300 = OpLoad %103 
                                       f32_4 %301 = OpImageSampleImplicitLod %299 %300 
                                         f32 %303 = OpCompositeExtract %301 3 
                                                      OpStore %28 %303 
                                         f32 %305 = OpLoad %28 
                                       f32_3 %306 = OpCompositeConstruct %305 %305 %305 
                              Uniform f32_4* %307 = OpAccessChain %20 %281 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFMul %306 %309 
                                                      OpStore %304 %310 
                                         f32 %312 = OpLoad %155 
                                       f32_3 %313 = OpCompositeConstruct %312 %312 %312 
                                       f32_3 %314 = OpLoad %304 
                                       f32_3 %315 = OpFMul %313 %314 
                                                      OpStore %311 %315 
                                Private f32* %316 = OpAccessChain %34 %88 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFNegate %317 
                                         f32 %319 = OpFAdd %318 %81 
                                                      OpStore %155 %319 
                                Private f32* %320 = OpAccessChain %34 %88 
                                         f32 %321 = OpLoad %320 
                                Private f32* %322 = OpAccessChain %34 %88 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFMul %321 %323 
                                                      OpStore %28 %324 
                                         f32 %325 = OpLoad %28 
                                       f32_2 %326 = OpCompositeConstruct %325 %325 
                                         f32 %327 = OpLoad %94 
                                       f32_2 %328 = OpCompositeConstruct %327 %327 
                                         f32 %329 = OpDot %326 %328 
                                                      OpStore %28 %329 
                                         f32 %330 = OpLoad %28 
                                         f32 %332 = OpFAdd %330 %331 
                                                      OpStore %28 %332 
                                         f32 %333 = OpLoad %155 
                                         f32 %334 = OpLoad %155 
                                         f32 %335 = OpFMul %333 %334 
                                Private f32* %336 = OpAccessChain %34 %88 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %34 %88 
                                         f32 %338 = OpLoad %337 
                                Private f32* %339 = OpAccessChain %34 %88 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %338 %340 
                                Private f32* %342 = OpAccessChain %34 %88 
                                                      OpStore %342 %341 
                                         f32 %343 = OpLoad %155 
                                Private f32* %344 = OpAccessChain %34 %88 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFMul %343 %345 
                                                      OpStore %155 %346 
                                       f32_3 %347 = OpLoad %221 
                                       f32_3 %348 = OpFNegate %347 
                                       f32_3 %350 = OpFAdd %348 %349 
                                                      OpStore %34 %350 
                                       f32_3 %351 = OpLoad %34 
                                         f32 %352 = OpLoad %155 
                                       f32_3 %353 = OpCompositeConstruct %352 %352 %352 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_3 %355 = OpLoad %221 
                                       f32_3 %356 = OpFAdd %354 %355 
                                                      OpStore %34 %356 
                                       f32_3 %357 = OpLoad %34 
                                       f32_3 %358 = OpLoad %311 
                                       f32_3 %359 = OpFMul %357 %358 
                                                      OpStore %34 %359 
                                Private f32* %360 = OpAccessChain %9 %88 
                                         f32 %361 = OpLoad %360 
                                Private f32* %362 = OpAccessChain %9 %88 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %361 %363 
                                                      OpStore %155 %364 
                                         f32 %365 = OpLoad %155 
                                         f32 %366 = OpLoad %155 
                                         f32 %367 = OpFMul %365 %366 
                                                      OpStore %155 %367 
                                Private f32* %368 = OpAccessChain %9 %88 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpLoad %155 
                                         f32 %371 = OpFMul %369 %370 
                                Private f32* %372 = OpAccessChain %9 %88 
                                                      OpStore %372 %371 
                                         f32 %373 = OpLoad %28 
                                Private f32* %374 = OpAccessChain %9 %88 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFMul %373 %375 
                                         f32 %377 = OpFAdd %376 %81 
                                Private f32* %378 = OpAccessChain %9 %88 
                                                      OpStore %378 %377 
                                         f32 %379 = OpLoad %146 
                                         f32 %380 = OpFNegate %379 
                                         f32 %381 = OpFAdd %380 %81 
                                                      OpStore %155 %381 
                                         f32 %382 = OpLoad %155 
                                         f32 %383 = OpLoad %155 
                                         f32 %384 = OpFMul %382 %383 
                                                      OpStore %113 %384 
                                         f32 %385 = OpLoad %113 
                                         f32 %386 = OpLoad %113 
                                         f32 %387 = OpFMul %385 %386 
                                                      OpStore %113 %387 
                                         f32 %388 = OpLoad %155 
                                         f32 %389 = OpLoad %113 
                                         f32 %390 = OpFMul %388 %389 
                                                      OpStore %155 %390 
                                         f32 %391 = OpLoad %28 
                                         f32 %392 = OpLoad %155 
                                         f32 %393 = OpFMul %391 %392 
                                         f32 %394 = OpFAdd %393 %81 
                                                      OpStore %155 %394 
                                Private f32* %395 = OpAccessChain %9 %88 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpLoad %155 
                                         f32 %398 = OpFMul %396 %397 
                                Private f32* %399 = OpAccessChain %9 %88 
                                                      OpStore %399 %398 
                                         f32 %400 = OpLoad %146 
                                Private f32* %401 = OpAccessChain %9 %88 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpFMul %400 %402 
                                Private f32* %404 = OpAccessChain %9 %88 
                                                      OpStore %404 %403 
                                       f32_3 %405 = OpLoad %9 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 0 0 
                                       f32_3 %407 = OpLoad %304 
                                       f32_3 %408 = OpFMul %406 %407 
                                                      OpStore %9 %408 
                                Uniform f32* %409 = OpAccessChain %20 %236 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpFNegate %410 
                                         f32 %413 = OpFMul %411 %412 
                                         f32 %414 = OpFAdd %413 %412 
                                                      OpStore %28 %414 
                                         f32 %415 = OpLoad %28 
                                       f32_3 %416 = OpCompositeConstruct %415 %415 %415 
                                       f32_4 %417 = OpLoad %68 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_3 %419 = OpFMul %416 %418 
                                       f32_4 %420 = OpLoad %68 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 6 3 
                                                      OpStore %68 %421 
                                       f32_4 %424 = OpLoad %68 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpFMul %425 %426 
                                       f32_3 %428 = OpLoad %34 
                                       f32_3 %429 = OpFAdd %427 %428 
                                       f32_4 %430 = OpLoad %423 
                                       f32_4 %431 = OpVectorShuffle %430 %429 4 5 6 3 
                                                      OpStore %423 %431 
                         read_only Texture2D %433 = OpLoad %432 
                                     sampler %435 = OpLoad %434 
                  read_only Texture2DSampled %436 = OpSampledImage %433 %435 
                                       f32_2 %438 = OpLoad vs_TEXCOORD3 
                                       f32_4 %439 = OpImageSampleImplicitLod %436 %438 
                                         f32 %440 = OpCompositeExtract %439 3 
                                Private f32* %441 = OpAccessChain %9 %88 
                                                      OpStore %441 %440 
                                Private f32* %442 = OpAccessChain %9 %88 
                                         f32 %443 = OpLoad %442 
                                Uniform f32* %445 = OpAccessChain %20 %444 %302 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpFMul %443 %446 
                                Private f32* %448 = OpAccessChain %68 %302 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpFAdd %447 %449 
                                 Output f32* %452 = OpAccessChain %423 %302 
                                                      OpStore %452 %450 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat7;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat1.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat2.zz + u_xlat1.xy;
    u_xlat7.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat1.xy = (-u_xlat1.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat7.xy;
    u_xlat1.xy = u_xlat1.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat1.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat6 = (-_Glossiness) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat6;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat7.x = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat18 * u_xlat7.x + (-u_xlat18);
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat7.x = u_xlat7.x * 0.318309873;
    u_xlat18 = u_xlat7.x / u_xlat18;
    u_xlat7.x = (-u_xlat12) + 1.0;
    u_xlat13 = abs(u_xlat0.x) * u_xlat7.x + u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2 = u_xlat2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4 = texture(_LightTexture0, vec2(u_xlat18));
    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat12 = (-u_xlat19) + 1.0;
    u_xlat18 = u_xlat19 * u_xlat19;
    u_xlat6 = dot(vec2(u_xlat18), vec2(u_xlat6));
    u_xlat6 = u_xlat6 + -0.5;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat7.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat5.xyz;
    u_xlat12 = u_xlat0.x * u_xlat0.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x + 1.0;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat6 = u_xlat6 * u_xlat12 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat18 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat0 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    SV_Target0.w = u_xlat0.w * _RedDotColor.w + u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 326
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %95 %151 %226 %232 %233 %246 %274 %311 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 95 
                                                      OpDecorate vs_TEXCOORD2 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 226 
                                                      OpDecorate vs_TEXCOORD0 Location 232 
                                                      OpDecorate %233 Location 233 
                                                      OpDecorate %246 Location 246 
                                                      OpDecorate vs_TEXCOORD1 Location 274 
                                                      OpDecorate vs_TEXCOORD4 Location 311 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeStruct %14 %17 %18 %19 %20 %6 %6 %6 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                               Private f32_4* %46 = OpVariable Private 
                                          i32 %48 = OpConstant 3 
                               Private f32_4* %59 = OpVariable Private 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %92 = OpTypePointer Output %7 
                                              %94 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                          u32 %96 = OpConstant 2 
                                              %97 = OpTypePointer Private %6 
                                             %144 = OpTypePointer Uniform %14 
                                             %150 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %154 = OpTypeVector %6 2 
                                             %185 = OpTypePointer Private %154 
                              Private f32_2* %186 = OpVariable Private 
                                         i32 %189 = OpConstant 7 
                                             %190 = OpTypePointer Uniform %6 
                                         i32 %193 = OpConstant 8 
                                         i32 %202 = OpConstant 6 
                                         i32 %218 = OpConstant 5 
                                             %225 = OpTypePointer Output %154 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_2 %230 = OpConstantComposite %229 %229 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %233 = OpVariable Input 
                                         i32 %236 = OpConstant 9 
                                             %245 = OpTypePointer Input %14 
                                Input f32_3* %246 = OpVariable Input 
                                         u32 %252 = OpConstant 0 
                                Private f32* %266 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %282 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %23 %25 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %31 = OpAccessChain %23 %25 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpLoad %11 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
                                        f32_4 %35 = OpFMul %32 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %23 %25 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_4 %41 = OpLoad %11 
                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
                                        f32_4 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_4 %47 = OpLoad %9 
                               Uniform f32_4* %49 = OpAccessChain %23 %25 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_4 %51 = OpFAdd %47 %50 
                                                      OpStore %46 %51 
                               Uniform f32_4* %52 = OpAccessChain %23 %25 %48 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %9 %58 
                                        f32_4 %60 = OpLoad %46 
                                        f32_4 %61 = OpVectorShuffle %60 %60 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %23 %48 %25 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %61 %63 
                                                      OpStore %59 %64 
                               Uniform f32_4* %65 = OpAccessChain %23 %48 %30 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %46 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %48 %38 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %46 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %59 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %59 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %48 %48 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %46 
                                        f32_4 %82 = OpVectorShuffle %81 %81 3 3 3 3 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %59 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %46 %85 
                                        f32_4 %91 = OpLoad %46 
                                Output f32_4* %93 = OpAccessChain %90 %30 
                                                      OpStore %93 %91 
                                 Private f32* %98 = OpAccessChain %46 %96 
                                          f32 %99 = OpLoad %98 
                                                      OpStore vs_TEXCOORD5 %99 
                                       f32_4 %100 = OpLoad %11 
                                       f32_3 %101 = OpVectorShuffle %100 %100 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %25 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFMul %101 %104 
                                       f32_4 %106 = OpLoad %46 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %46 %107 
                              Uniform f32_4* %108 = OpAccessChain %23 %25 %30 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_4 %111 = OpLoad %11 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %46 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFAdd %113 %115 
                                       f32_4 %117 = OpLoad %46 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %46 %118 
                              Uniform f32_4* %119 = OpAccessChain %23 %25 %38 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %11 
                                       f32_3 %123 = OpVectorShuffle %122 %122 2 2 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %46 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %46 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %46 %129 
                              Uniform f32_4* %130 = OpAccessChain %23 %25 %48 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %11 
                                       f32_3 %134 = OpVectorShuffle %133 %133 3 3 3 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %46 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %46 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %46 %140 
                                       f32_4 %141 = OpLoad %46 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %23 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                       f32_4 %148 = OpLoad %59 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %59 %149 
                                       f32_4 %152 = OpLoad %46 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD2 %153 
                                       f32_4 %155 = OpLoad %59 
                                       f32_2 %156 = OpVectorShuffle %155 %155 1 1 
                              Uniform f32_4* %157 = OpAccessChain %23 %38 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %160 = OpFMul %156 %159 
                                       f32_4 %161 = OpLoad %46 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 2 3 
                                                      OpStore %46 %162 
                              Uniform f32_4* %163 = OpAccessChain %23 %38 %30 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_4 %166 = OpLoad %59 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 0 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %46 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %46 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %46 %173 
                              Uniform f32_4* %174 = OpAccessChain %23 %38 %38 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_4 %177 = OpLoad %59 
                                       f32_2 %178 = OpVectorShuffle %177 %177 2 2 
                                       f32_2 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %46 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad %46 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore %46 %184 
                                       f32_4 %187 = OpLoad %11 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 1 
                                Uniform f32* %191 = OpAccessChain %23 %189 
                                         f32 %192 = OpLoad %191 
                                Uniform f32* %194 = OpAccessChain %23 %193 
                                         f32 %195 = OpLoad %194 
                                       f32_2 %196 = OpCompositeConstruct %192 %195 
                                       f32_2 %197 = OpFNegate %196 
                                       f32_2 %198 = OpFAdd %188 %197 
                                                      OpStore %186 %198 
                                       f32_4 %199 = OpLoad %46 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFNegate %200 
                                Uniform f32* %203 = OpAccessChain %23 %202 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %205 = OpAccessChain %23 %202 
                                         f32 %206 = OpLoad %205 
                                       f32_2 %207 = OpCompositeConstruct %204 %206 
                                         f32 %208 = OpCompositeExtract %207 0 
                                         f32 %209 = OpCompositeExtract %207 1 
                                       f32_2 %210 = OpCompositeConstruct %208 %209 
                                       f32_2 %211 = OpFMul %201 %210 
                                       f32_2 %212 = OpLoad %186 
                                       f32_2 %213 = OpFAdd %211 %212 
                                       f32_4 %214 = OpLoad %46 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %46 %215 
                                       f32_4 %216 = OpLoad %46 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                Uniform f32* %219 = OpAccessChain %23 %218 
                                         f32 %220 = OpLoad %219 
                                       f32_2 %221 = OpCompositeConstruct %220 %220 
                                       f32_2 %222 = OpFDiv %217 %221 
                                       f32_4 %223 = OpLoad %46 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 2 3 
                                                      OpStore %46 %224 
                                       f32_4 %227 = OpLoad %46 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                                       f32_2 %231 = OpFAdd %228 %230 
                                                      OpStore vs_TEXCOORD3 %231 
                                       f32_4 %234 = OpLoad %233 
                                       f32_2 %235 = OpVectorShuffle %234 %234 0 1 
                              Uniform f32_4* %237 = OpAccessChain %23 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                                       f32_2 %240 = OpFMul %235 %239 
                              Uniform f32_4* %241 = OpAccessChain %23 %236 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 2 3 
                                       f32_2 %244 = OpFAdd %240 %243 
                                                      OpStore vs_TEXCOORD0 %244 
                                       f32_3 %247 = OpLoad %246 
                              Uniform f32_4* %248 = OpAccessChain %23 %38 %30 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                         f32 %251 = OpDot %247 %250 
                                Private f32* %253 = OpAccessChain %46 %252 
                                                      OpStore %253 %251 
                                       f32_3 %254 = OpLoad %246 
                              Uniform f32_4* %255 = OpAccessChain %23 %38 %25 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %259 = OpAccessChain %46 %86 
                                                      OpStore %259 %258 
                                       f32_3 %260 = OpLoad %246 
                              Uniform f32_4* %261 = OpAccessChain %23 %38 %38 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %260 %263 
                                Private f32* %265 = OpAccessChain %46 %96 
                                                      OpStore %265 %264 
                                       f32_4 %267 = OpLoad %46 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %46 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                         f32 %271 = OpDot %268 %270 
                                                      OpStore %266 %271 
                                         f32 %272 = OpLoad %266 
                                         f32 %273 = OpExtInst %1 32 %272 
                                                      OpStore %266 %273 
                                         f32 %275 = OpLoad %266 
                                       f32_3 %276 = OpCompositeConstruct %275 %275 %275 
                                       f32_4 %277 = OpLoad %46 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                                      OpStore vs_TEXCOORD1 %279 
                                       f32_4 %280 = OpLoad %9 
                                       f32_3 %281 = OpVectorShuffle %280 %280 1 1 1 
                              Uniform f32_4* %283 = OpAccessChain %23 %282 %25 
                                       f32_4 %284 = OpLoad %283 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpFMul %281 %285 
                                       f32_4 %287 = OpLoad %46 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %46 %288 
                              Uniform f32_4* %289 = OpAccessChain %23 %282 %30 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_4 %292 = OpLoad %9 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 0 0 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_4 %295 = OpLoad %46 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFAdd %294 %296 
                                       f32_4 %298 = OpLoad %46 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %46 %299 
                              Uniform f32_4* %300 = OpAccessChain %23 %282 %38 
                                       f32_4 %301 = OpLoad %300 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %9 
                                       f32_3 %304 = OpVectorShuffle %303 %303 2 2 2 
                                       f32_3 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %46 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFAdd %305 %307 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %9 %310 
                              Uniform f32_4* %312 = OpAccessChain %23 %282 %48 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 3 3 3 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %9 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %317 %319 
                                                      OpStore vs_TEXCOORD4 %320 
                                 Output f32* %321 = OpAccessChain %90 %30 %86 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                 Output f32* %324 = OpAccessChain %90 %30 %86 
                                                      OpStore %324 %323 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 498
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %83 %233 %442 %469 %481 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate vs_TEXCOORD1 Location 83 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %227 DescriptorSet 227 
                                                      OpDecorate %227 Binding 227 
                                                      OpDecorate vs_TEXCOORD0 Location 233 
                                                      OpDecorate %314 DescriptorSet 314 
                                                      OpDecorate %314 Binding 314 
                                                      OpDecorate %316 DescriptorSet 316 
                                                      OpDecorate %316 Binding 316 
                                                      OpDecorate vs_TEXCOORD5 Location 442 
                                                      OpDecorate %469 Location 469 
                                                      OpDecorate %476 DescriptorSet 476 
                                                      OpDecorate %476 Binding 476 
                                                      OpDecorate %478 DescriptorSet 478 
                                                      OpDecorate %478 Binding 478 
                                                      OpDecorate vs_TEXCOORD3 Location 481 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %14 %14 %17 %6 %6 %14 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 2 
                                              %42 = OpTypePointer Uniform %14 
                                              %52 = OpTypePointer Private %14 
                               Private f32_4* %53 = OpVariable Private 
                                          f32 %72 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                               Private f32_3* %89 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                Private f32* %102 = OpVariable Private 
                                         u32 %112 = OpConstant 0 
                                Private f32* %122 = OpVariable Private 
                                         i32 %123 = OpConstant 6 
                                             %124 = OpTypePointer Uniform %6 
                                Private f32* %129 = OpVariable Private 
                                         f32 %134 = OpConstant 3.674022E-40 
                              Private f32_3* %136 = OpVariable Private 
                                Private f32* %141 = OpVariable Private 
                                         f32 %156 = OpConstant 3.674022E-40 
                                         f32 %160 = OpConstant 3.674022E-40 
                                         f32 %204 = OpConstant 3.674022E-40 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         f32 %217 = OpConstant 3.674022E-40 
                                             %221 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %222 = OpTypePointer UniformConstant %221 
        UniformConstant read_only Texture2D* %223 = OpVariable UniformConstant 
                                             %225 = OpTypeSampler 
                                             %226 = OpTypePointer UniformConstant %225 
                    UniformConstant sampler* %227 = OpVariable UniformConstant 
                                             %229 = OpTypeSampledImage %221 
                                             %231 = OpTypeVector %6 2 
                                             %232 = OpTypePointer Input %231 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %238 = OpConstant 8 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_3 %244 = OpConstantComposite %243 %243 %243 
                                         i32 %250 = OpConstant 7 
                                         f32 %264 = OpConstant 3.674022E-40 
                                       f32_3 %265 = OpConstantComposite %264 %264 %264 
                                             %270 = OpTypeBool 
                                             %271 = OpTypePointer Private %270 
                               Private bool* %272 = OpVariable Private 
                              Private f32_3* %280 = OpVariable Private 
                                         i32 %283 = OpConstant 5 
                                         i32 %284 = OpConstant 1 
                                         i32 %306 = OpConstant 3 
        UniformConstant read_only Texture2D* %314 = OpVariable UniformConstant 
                    UniformConstant sampler* %316 = OpVariable UniformConstant 
                                         i32 %325 = OpConstant 4 
                              Private f32_3* %330 = OpVariable Private 
                                         f32 %347 = OpConstant 3.674022E-40 
                                       f32_3 %360 = OpConstantComposite %100 %100 %100 
                                         f32 %425 = OpConstant 3.674022E-40 
                                             %441 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %444 = OpConstant 1 
                                         u32 %452 = OpConstant 2 
                                         u32 %462 = OpConstant 3 
                                             %468 = OpTypePointer Output %14 
                               Output f32_4* %469 = OpVariable Output 
        UniformConstant read_only Texture2D* %476 = OpVariable UniformConstant 
                    UniformConstant sampler* %478 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                         i32 %488 = OpConstant 9 
                                             %495 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                          f32 %34 = OpLoad %28 
                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFMul %35 %36 
                                                      OpStore %9 %37 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_4* %43 = OpAccessChain %20 %41 
                                        f32_4 %44 = OpLoad %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                        f32_3 %46 = OpFAdd %40 %45 
                                                      OpStore %38 %46 
                                        f32_3 %47 = OpLoad %38 
                                        f32_3 %48 = OpLoad %38 
                                          f32 %49 = OpDot %47 %48 
                                                      OpStore %28 %49 
                                          f32 %50 = OpLoad %28 
                                          f32 %51 = OpExtInst %1 32 %50 
                                                      OpStore %28 %51 
                                        f32_3 %54 = OpLoad %38 
                                          f32 %55 = OpLoad %28 
                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
                                        f32_3 %57 = OpFMul %54 %56 
                                        f32_3 %58 = OpLoad %9 
                                        f32_3 %59 = OpFAdd %57 %58 
                                        f32_4 %60 = OpLoad %53 
                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
                                                      OpStore %53 %61 
                                          f32 %62 = OpLoad %28 
                                        f32_3 %63 = OpCompositeConstruct %62 %62 %62 
                                        f32_3 %64 = OpLoad %38 
                                        f32_3 %65 = OpFMul %63 %64 
                                                      OpStore %38 %65 
                                        f32_4 %66 = OpLoad %53 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                        f32_4 %68 = OpLoad %53 
                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
                                          f32 %70 = OpDot %67 %69 
                                                      OpStore %28 %70 
                                          f32 %71 = OpLoad %28 
                                          f32 %73 = OpExtInst %1 40 %71 %72 
                                                      OpStore %28 %73 
                                          f32 %74 = OpLoad %28 
                                          f32 %75 = OpExtInst %1 32 %74 
                                                      OpStore %28 %75 
                                          f32 %76 = OpLoad %28 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_4 %78 = OpLoad %53 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %53 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %53 %82 
                                        f32_3 %84 = OpLoad vs_TEXCOORD1 
                                        f32_3 %85 = OpLoad vs_TEXCOORD1 
                                          f32 %86 = OpDot %84 %85 
                                                      OpStore %28 %86 
                                          f32 %87 = OpLoad %28 
                                          f32 %88 = OpExtInst %1 32 %87 
                                                      OpStore %28 %88 
                                          f32 %90 = OpLoad %28 
                                        f32_3 %91 = OpCompositeConstruct %90 %90 %90 
                                        f32_3 %92 = OpLoad vs_TEXCOORD1 
                                        f32_3 %93 = OpFMul %91 %92 
                                                      OpStore %89 %93 
                                        f32_3 %94 = OpLoad %89 
                                        f32_4 %95 = OpLoad %53 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                          f32 %97 = OpDot %94 %96 
                                                      OpStore %28 %97 
                                          f32 %98 = OpLoad %28 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                                      OpStore %28 %101 
                                       f32_3 %103 = OpLoad %38 
                                       f32_4 %104 = OpLoad %53 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                         f32 %106 = OpDot %103 %105 
                                                      OpStore %102 %106 
                                         f32 %107 = OpLoad %102 
                                         f32 %108 = OpExtInst %1 43 %107 %99 %100 
                                                      OpStore %102 %108 
                                       f32_3 %109 = OpLoad %89 
                                       f32_3 %110 = OpLoad %38 
                                         f32 %111 = OpDot %109 %110 
                                Private f32* %113 = OpAccessChain %38 %112 
                                                      OpStore %113 %111 
                                Private f32* %114 = OpAccessChain %38 %112 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpExtInst %1 43 %115 %99 %100 
                                Private f32* %117 = OpAccessChain %38 %112 
                                                      OpStore %117 %116 
                                       f32_3 %118 = OpLoad %89 
                                       f32_3 %119 = OpLoad %9 
                                         f32 %120 = OpDot %118 %119 
                                Private f32* %121 = OpAccessChain %9 %112 
                                                      OpStore %121 %120 
                                Uniform f32* %125 = OpAccessChain %20 %123 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %100 
                                                      OpStore %122 %128 
                                         f32 %130 = OpLoad %122 
                                         f32 %131 = OpLoad %122 
                                         f32 %132 = OpFMul %130 %131 
                                                      OpStore %129 %132 
                                         f32 %133 = OpLoad %129 
                                         f32 %135 = OpExtInst %1 40 %133 %134 
                                                      OpStore %129 %135 
                                         f32 %137 = OpLoad %129 
                                         f32 %138 = OpLoad %129 
                                         f32 %139 = OpFMul %137 %138 
                                Private f32* %140 = OpAccessChain %136 %112 
                                                      OpStore %140 %139 
                                         f32 %142 = OpLoad %28 
                                Private f32* %143 = OpAccessChain %136 %112 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %142 %144 
                                         f32 %146 = OpLoad %28 
                                         f32 %147 = OpFNegate %146 
                                         f32 %148 = OpFAdd %145 %147 
                                                      OpStore %141 %148 
                                         f32 %149 = OpLoad %141 
                                         f32 %150 = OpLoad %28 
                                         f32 %151 = OpFMul %149 %150 
                                         f32 %152 = OpFAdd %151 %100 
                                                      OpStore %28 %152 
                                         f32 %153 = OpLoad %28 
                                         f32 %154 = OpLoad %28 
                                         f32 %155 = OpFMul %153 %154 
                                         f32 %157 = OpFAdd %155 %156 
                                                      OpStore %28 %157 
                                Private f32* %158 = OpAccessChain %136 %112 
                                         f32 %159 = OpLoad %158 
                                         f32 %161 = OpFMul %159 %160 
                                Private f32* %162 = OpAccessChain %136 %112 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %136 %112 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpLoad %28 
                                         f32 %166 = OpFDiv %164 %165 
                                                      OpStore %28 %166 
                                         f32 %167 = OpLoad %129 
                                         f32 %168 = OpFNegate %167 
                                         f32 %169 = OpFAdd %168 %100 
                                Private f32* %170 = OpAccessChain %136 %112 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %9 %112 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpExtInst %1 4 %172 
                                Private f32* %174 = OpAccessChain %136 %112 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFMul %173 %175 
                                         f32 %177 = OpLoad %129 
                                         f32 %178 = OpFAdd %176 %177 
                                                      OpStore %141 %178 
                                Private f32* %179 = OpAccessChain %38 %112 
                                         f32 %180 = OpLoad %179 
                                Private f32* %181 = OpAccessChain %136 %112 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                         f32 %184 = OpLoad %129 
                                         f32 %185 = OpFAdd %183 %184 
                                                      OpStore %129 %185 
                                         f32 %186 = OpLoad %129 
                                Private f32* %187 = OpAccessChain %9 %112 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 4 %188 
                                         f32 %190 = OpFMul %186 %189 
                                                      OpStore %129 %190 
                                Private f32* %191 = OpAccessChain %9 %112 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpExtInst %1 4 %192 
                                         f32 %194 = OpFNegate %193 
                                         f32 %195 = OpFAdd %194 %100 
                                Private f32* %196 = OpAccessChain %9 %112 
                                                      OpStore %196 %195 
                                Private f32* %197 = OpAccessChain %38 %112 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpLoad %141 
                                         f32 %200 = OpFMul %198 %199 
                                         f32 %201 = OpLoad %129 
                                         f32 %202 = OpFAdd %200 %201 
                                                      OpStore %129 %202 
                                         f32 %203 = OpLoad %129 
                                         f32 %205 = OpFAdd %203 %204 
                                                      OpStore %129 %205 
                                         f32 %207 = OpLoad %129 
                                         f32 %208 = OpFDiv %206 %207 
                                                      OpStore %129 %208 
                                         f32 %209 = OpLoad %28 
                                         f32 %210 = OpLoad %129 
                                         f32 %211 = OpFMul %209 %210 
                                                      OpStore %129 %211 
                                Private f32* %212 = OpAccessChain %38 %112 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpLoad %129 
                                         f32 %215 = OpFMul %213 %214 
                                                      OpStore %129 %215 
                                         f32 %216 = OpLoad %129 
                                         f32 %218 = OpFMul %216 %217 
                                                      OpStore %129 %218 
                                         f32 %219 = OpLoad %129 
                                         f32 %220 = OpExtInst %1 40 %219 %99 
                                                      OpStore %129 %220 
                         read_only Texture2D %224 = OpLoad %223 
                                     sampler %228 = OpLoad %227 
                  read_only Texture2DSampled %230 = OpSampledImage %224 %228 
                                       f32_2 %234 = OpLoad vs_TEXCOORD0 
                                       f32_4 %235 = OpImageSampleImplicitLod %230 %234 
                                                      OpStore %53 %235 
                                       f32_4 %236 = OpLoad %53 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                              Uniform f32_4* %239 = OpAccessChain %20 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %237 %241 
                                       f32_3 %245 = OpFAdd %242 %244 
                                                      OpStore %89 %245 
                                       f32_4 %246 = OpLoad %53 
                              Uniform f32_4* %247 = OpAccessChain %20 %238 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpFMul %246 %248 
                                                      OpStore %53 %249 
                                Uniform f32* %251 = OpAccessChain %20 %250 
                                         f32 %252 = OpLoad %251 
                                Uniform f32* %253 = OpAccessChain %20 %250 
                                         f32 %254 = OpLoad %253 
                                Uniform f32* %255 = OpAccessChain %20 %250 
                                         f32 %256 = OpLoad %255 
                                       f32_3 %257 = OpCompositeConstruct %252 %254 %256 
                                         f32 %258 = OpCompositeExtract %257 0 
                                         f32 %259 = OpCompositeExtract %257 1 
                                         f32 %260 = OpCompositeExtract %257 2 
                                       f32_3 %261 = OpCompositeConstruct %258 %259 %260 
                                       f32_3 %262 = OpLoad %89 
                                       f32_3 %263 = OpFMul %261 %262 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %89 %266 
                                       f32_3 %267 = OpLoad %89 
                                       f32_3 %268 = OpLoad %89 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %28 %269 
                                         f32 %273 = OpLoad %28 
                                        bool %274 = OpFOrdNotEqual %273 %99 
                                                      OpStore %272 %274 
                                        bool %275 = OpLoad %272 
                                         f32 %276 = OpSelect %275 %100 %99 
                                                      OpStore %28 %276 
                                         f32 %277 = OpLoad %28 
                                         f32 %278 = OpLoad %129 
                                         f32 %279 = OpFMul %277 %278 
                                                      OpStore %129 %279 
                                       f32_3 %281 = OpLoad vs_TEXCOORD2 
                                       f32_3 %282 = OpVectorShuffle %281 %281 1 1 1 
                              Uniform f32_4* %285 = OpAccessChain %20 %283 %284 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFMul %282 %287 
                                                      OpStore %280 %288 
                              Uniform f32_4* %289 = OpAccessChain %20 %283 %22 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpLoad vs_TEXCOORD2 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 0 0 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_3 %295 = OpLoad %280 
                                       f32_3 %296 = OpFAdd %294 %295 
                                                      OpStore %280 %296 
                              Uniform f32_4* %297 = OpAccessChain %20 %283 %41 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpLoad vs_TEXCOORD2 
                                       f32_3 %301 = OpVectorShuffle %300 %300 2 2 2 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_3 %303 = OpLoad %280 
                                       f32_3 %304 = OpFAdd %302 %303 
                                                      OpStore %280 %304 
                                       f32_3 %305 = OpLoad %280 
                              Uniform f32_4* %307 = OpAccessChain %20 %283 %306 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %305 %309 
                                                      OpStore %280 %310 
                                       f32_3 %311 = OpLoad %280 
                                       f32_3 %312 = OpLoad %280 
                                         f32 %313 = OpDot %311 %312 
                                                      OpStore %28 %313 
                         read_only Texture2D %315 = OpLoad %314 
                                     sampler %317 = OpLoad %316 
                  read_only Texture2DSampled %318 = OpSampledImage %315 %317 
                                         f32 %319 = OpLoad %28 
                                       f32_2 %320 = OpCompositeConstruct %319 %319 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                         f32 %322 = OpCompositeExtract %321 0 
                                                      OpStore %28 %322 
                                         f32 %323 = OpLoad %28 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                              Uniform f32_4* %326 = OpAccessChain %20 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFMul %324 %328 
                                                      OpStore %280 %329 
                                         f32 %331 = OpLoad %129 
                                       f32_3 %332 = OpCompositeConstruct %331 %331 %331 
                                       f32_3 %333 = OpLoad %280 
                                       f32_3 %334 = OpFMul %332 %333 
                                                      OpStore %330 %334 
                                         f32 %335 = OpLoad %102 
                                         f32 %336 = OpFNegate %335 
                                         f32 %337 = OpFAdd %336 %100 
                                                      OpStore %129 %337 
                                         f32 %338 = OpLoad %102 
                                         f32 %339 = OpLoad %102 
                                         f32 %340 = OpFMul %338 %339 
                                                      OpStore %28 %340 
                                         f32 %341 = OpLoad %28 
                                       f32_2 %342 = OpCompositeConstruct %341 %341 
                                         f32 %343 = OpLoad %122 
                                       f32_2 %344 = OpCompositeConstruct %343 %343 
                                         f32 %345 = OpDot %342 %344 
                                                      OpStore %122 %345 
                                         f32 %346 = OpLoad %122 
                                         f32 %348 = OpFAdd %346 %347 
                                                      OpStore %122 %348 
                                         f32 %349 = OpLoad %129 
                                         f32 %350 = OpLoad %129 
                                         f32 %351 = OpFMul %349 %350 
                                                      OpStore %28 %351 
                                         f32 %352 = OpLoad %28 
                                         f32 %353 = OpLoad %28 
                                         f32 %354 = OpFMul %352 %353 
                                                      OpStore %28 %354 
                                         f32 %355 = OpLoad %129 
                                         f32 %356 = OpLoad %28 
                                         f32 %357 = OpFMul %355 %356 
                                                      OpStore %129 %357 
                                       f32_3 %358 = OpLoad %89 
                                       f32_3 %359 = OpFNegate %358 
                                       f32_3 %361 = OpFAdd %359 %360 
                                                      OpStore %136 %361 
                                       f32_3 %362 = OpLoad %136 
                                         f32 %363 = OpLoad %129 
                                       f32_3 %364 = OpCompositeConstruct %363 %363 %363 
                                       f32_3 %365 = OpFMul %362 %364 
                                       f32_3 %366 = OpLoad %89 
                                       f32_3 %367 = OpFAdd %365 %366 
                                                      OpStore %136 %367 
                                       f32_3 %368 = OpLoad %136 
                                       f32_3 %369 = OpLoad %330 
                                       f32_3 %370 = OpFMul %368 %369 
                                                      OpStore %136 %370 
                                Private f32* %371 = OpAccessChain %9 %112 
                                         f32 %372 = OpLoad %371 
                                Private f32* %373 = OpAccessChain %9 %112 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFMul %372 %374 
                                                      OpStore %129 %375 
                                         f32 %376 = OpLoad %129 
                                         f32 %377 = OpLoad %129 
                                         f32 %378 = OpFMul %376 %377 
                                                      OpStore %129 %378 
                                Private f32* %379 = OpAccessChain %9 %112 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpLoad %129 
                                         f32 %382 = OpFMul %380 %381 
                                Private f32* %383 = OpAccessChain %9 %112 
                                                      OpStore %383 %382 
                                         f32 %384 = OpLoad %122 
                                Private f32* %385 = OpAccessChain %9 %112 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                         f32 %388 = OpFAdd %387 %100 
                                Private f32* %389 = OpAccessChain %9 %112 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %38 %112 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFNegate %391 
                                         f32 %393 = OpFAdd %392 %100 
                                                      OpStore %129 %393 
                                         f32 %394 = OpLoad %129 
                                         f32 %395 = OpLoad %129 
                                         f32 %396 = OpFMul %394 %395 
                                                      OpStore %28 %396 
                                         f32 %397 = OpLoad %28 
                                         f32 %398 = OpLoad %28 
                                         f32 %399 = OpFMul %397 %398 
                                                      OpStore %28 %399 
                                         f32 %400 = OpLoad %129 
                                         f32 %401 = OpLoad %28 
                                         f32 %402 = OpFMul %400 %401 
                                                      OpStore %129 %402 
                                         f32 %403 = OpLoad %122 
                                         f32 %404 = OpLoad %129 
                                         f32 %405 = OpFMul %403 %404 
                                         f32 %406 = OpFAdd %405 %100 
                                                      OpStore %122 %406 
                                Private f32* %407 = OpAccessChain %9 %112 
                                         f32 %408 = OpLoad %407 
                                         f32 %409 = OpLoad %122 
                                         f32 %410 = OpFMul %408 %409 
                                Private f32* %411 = OpAccessChain %9 %112 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %38 %112 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %9 %112 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFMul %413 %415 
                                Private f32* %417 = OpAccessChain %9 %112 
                                                      OpStore %417 %416 
                                       f32_3 %418 = OpLoad %9 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 0 0 
                                       f32_3 %420 = OpLoad %280 
                                       f32_3 %421 = OpFMul %419 %420 
                                                      OpStore %9 %421 
                                Uniform f32* %422 = OpAccessChain %20 %250 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFNegate %423 
                                         f32 %426 = OpFMul %424 %425 
                                         f32 %427 = OpFAdd %426 %425 
                                                      OpStore %28 %427 
                                         f32 %428 = OpLoad %28 
                                       f32_3 %429 = OpCompositeConstruct %428 %428 %428 
                                       f32_4 %430 = OpLoad %53 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_3 %432 = OpFMul %429 %431 
                                       f32_4 %433 = OpLoad %53 
                                       f32_4 %434 = OpVectorShuffle %433 %432 4 5 6 3 
                                                      OpStore %53 %434 
                                       f32_4 %435 = OpLoad %53 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpLoad %9 
                                       f32_3 %438 = OpFMul %436 %437 
                                       f32_3 %439 = OpLoad %136 
                                       f32_3 %440 = OpFAdd %438 %439 
                                                      OpStore %9 %440 
                                         f32 %443 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %445 = OpAccessChain %20 %284 %444 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpFDiv %443 %446 
                                                      OpStore %28 %447 
                                         f32 %448 = OpLoad %28 
                                         f32 %449 = OpFNegate %448 
                                         f32 %450 = OpFAdd %449 %100 
                                                      OpStore %28 %450 
                                         f32 %451 = OpLoad %28 
                                Uniform f32* %453 = OpAccessChain %20 %284 %452 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpFMul %451 %454 
                                                      OpStore %28 %455 
                                         f32 %456 = OpLoad %28 
                                         f32 %457 = OpExtInst %1 40 %456 %99 
                                                      OpStore %28 %457 
                                         f32 %458 = OpLoad %28 
                                Uniform f32* %459 = OpAccessChain %20 %306 %452 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFMul %458 %460 
                                Uniform f32* %463 = OpAccessChain %20 %306 %462 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpFAdd %461 %464 
                                                      OpStore %28 %465 
                                         f32 %466 = OpLoad %28 
                                         f32 %467 = OpExtInst %1 43 %466 %99 %100 
                                                      OpStore %28 %467 
                                       f32_3 %470 = OpLoad %9 
                                         f32 %471 = OpLoad %28 
                                       f32_3 %472 = OpCompositeConstruct %471 %471 %471 
                                       f32_3 %473 = OpFMul %470 %472 
                                       f32_4 %474 = OpLoad %469 
                                       f32_4 %475 = OpVectorShuffle %474 %473 4 5 6 3 
                                                      OpStore %469 %475 
                         read_only Texture2D %477 = OpLoad %476 
                                     sampler %479 = OpLoad %478 
                  read_only Texture2DSampled %480 = OpSampledImage %477 %479 
                                       f32_2 %482 = OpLoad vs_TEXCOORD3 
                                       f32_4 %483 = OpImageSampleImplicitLod %480 %482 
                                         f32 %484 = OpCompositeExtract %483 3 
                                Private f32* %485 = OpAccessChain %9 %112 
                                                      OpStore %485 %484 
                                Private f32* %486 = OpAccessChain %9 %112 
                                         f32 %487 = OpLoad %486 
                                Uniform f32* %489 = OpAccessChain %20 %488 %462 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFMul %487 %490 
                                Private f32* %492 = OpAccessChain %53 %462 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFAdd %491 %493 
                                 Output f32* %496 = OpAccessChain %469 %462 
                                                      OpStore %496 %494 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec2 u_xlat4;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat1.zz + u_xlat0.xy;
    u_xlat4.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat0.xy = (-u_xlat0.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat4.xy;
    u_xlat0.xy = u_xlat0.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat0.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
float u_xlat17;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 0.00100000005);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = (-_Glossiness) + 1.0;
    u_xlat11 = u_xlat6 * u_xlat6;
    u_xlat11 = max(u_xlat11, 0.00200000009);
    u_xlat16 = u_xlat11 * u_xlat11;
    u_xlat17 = u_xlat15 * u_xlat16 + (-u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15 + 1.0;
    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat15 = u_xlat16 / u_xlat15;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
    u_xlat10 = (-u_xlat11) + 1.0;
    u_xlat16 = abs(u_xlat0.x) * u_xlat10 + u_xlat11;
    u_xlat10 = u_xlat5 * u_xlat10 + u_xlat11;
    u_xlat10 = u_xlat10 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat10 = u_xlat5 * u_xlat16 + u_xlat10;
    u_xlat10 = u_xlat10 + 9.99999975e-06;
    u_xlat10 = 0.5 / u_xlat10;
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat10 = u_xlat10 * 3.14159274;
    u_xlat10 = u_xlat5 * u_xlat10;
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2 = u_xlat2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb15 = u_xlat15!=0.0;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat10 = u_xlat15 * u_xlat10;
    u_xlat4.xyz = vec3(u_xlat10) * _LightColor0.xyz;
    u_xlat10 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(vec2(u_xlat15), vec2(u_xlat6));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat1.x = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat1.x;
    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat10 = u_xlat0.x * u_xlat0.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat0.x = u_xlat0.x * u_xlat10;
    u_xlat0.x = u_xlat15 * u_xlat0.x + 1.0;
    u_xlat10 = (-u_xlat5) + 1.0;
    u_xlat16 = u_xlat10 * u_xlat10;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat10 * u_xlat16;
    u_xlat10 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10;
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat15 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat15 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat0 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    SV_Target0.w = u_xlat0.w * _RedDotColor.w + u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 276
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %86 %142 %217 %223 %224 %237 %265 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpMemberDecorate %20 7 Offset 20 
                                                      OpMemberDecorate %20 8 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 86 
                                                      OpDecorate vs_TEXCOORD2 Location 142 
                                                      OpDecorate vs_TEXCOORD3 Location 217 
                                                      OpDecorate vs_TEXCOORD0 Location 223 
                                                      OpDecorate %224 Location 224 
                                                      OpDecorate %237 Location 237 
                                                      OpDecorate vs_TEXCOORD1 Location 265 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeStruct %14 %17 %18 %19 %6 %6 %6 %6 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %50 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %83 = OpTypePointer Output %7 
                                              %85 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                          u32 %87 = OpConstant 2 
                                              %88 = OpTypePointer Private %6 
                                             %135 = OpTypePointer Uniform %14 
                                             %141 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %145 = OpTypeVector %6 2 
                                             %176 = OpTypePointer Private %145 
                              Private f32_2* %177 = OpVariable Private 
                                         i32 %180 = OpConstant 6 
                                             %181 = OpTypePointer Uniform %6 
                                         i32 %184 = OpConstant 7 
                                         i32 %193 = OpConstant 5 
                                         i32 %209 = OpConstant 4 
                                             %216 = OpTypePointer Output %145 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_2 %221 = OpConstantComposite %220 %220 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %224 = OpVariable Input 
                                         i32 %227 = OpConstant 8 
                                             %236 = OpTypePointer Input %14 
                                Input f32_3* %237 = OpVariable Input 
                                         u32 %243 = OpConstant 0 
                                Private f32* %257 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %22 %24 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %9 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %51 1 1 1 1 
                               Uniform f32_4* %53 = OpAccessChain %22 %46 %24 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpFMul %52 %54 
                                                      OpStore %50 %55 
                               Uniform f32_4* %56 = OpAccessChain %22 %46 %29 
                                        f32_4 %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                                        f32_4 %60 = OpFMul %57 %59 
                                        f32_4 %61 = OpLoad %50 
                                        f32_4 %62 = OpFAdd %60 %61 
                                                      OpStore %50 %62 
                               Uniform f32_4* %63 = OpAccessChain %22 %46 %37 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %9 
                                        f32_4 %66 = OpVectorShuffle %65 %65 2 2 2 2 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %50 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %50 %69 
                               Uniform f32_4* %70 = OpAccessChain %22 %46 %46 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpVectorShuffle %72 %72 3 3 3 3 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %50 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %9 %76 
                                        f32_4 %82 = OpLoad %9 
                                Output f32_4* %84 = OpAccessChain %81 %29 
                                                      OpStore %84 %82 
                                 Private f32* %89 = OpAccessChain %9 %87 
                                          f32 %90 = OpLoad %89 
                                                      OpStore vs_TEXCOORD5 %90 
                                        f32_4 %91 = OpLoad %11 
                                        f32_3 %92 = OpVectorShuffle %91 %91 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %22 %24 %24 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %92 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %9 %98 
                               Uniform f32_4* %99 = OpAccessChain %22 %24 %29 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %102 = OpLoad %11 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFAdd %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %22 %24 %37 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %11 
                                       f32_3 %114 = OpVectorShuffle %113 %113 2 2 2 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFAdd %115 %117 
                                       f32_4 %119 = OpLoad %9 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %9 %120 
                              Uniform f32_4* %121 = OpAccessChain %22 %24 %46 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_4 %124 = OpLoad %11 
                                       f32_3 %125 = OpVectorShuffle %124 %124 3 3 3 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_3 %129 = OpFAdd %126 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %9 %131 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFNegate %133 
                              Uniform f32_3* %136 = OpAccessChain %22 %29 
                                       f32_3 %137 = OpLoad %136 
                                       f32_3 %138 = OpFAdd %134 %137 
                                       f32_4 %139 = OpLoad %50 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %50 %140 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                                      OpStore vs_TEXCOORD2 %144 
                                       f32_4 %146 = OpLoad %50 
                                       f32_2 %147 = OpVectorShuffle %146 %146 1 1 
                              Uniform f32_4* %148 = OpAccessChain %22 %37 %24 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %147 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 2 3 
                                                      OpStore %9 %153 
                              Uniform f32_4* %154 = OpAccessChain %22 %37 %29 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                                       f32_4 %157 = OpLoad %50 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 0 
                                       f32_2 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                       f32_2 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 2 3 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %22 %37 %37 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_4 %168 = OpLoad %50 
                                       f32_2 %169 = OpVectorShuffle %168 %168 2 2 
                                       f32_2 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_2 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 2 3 
                                                      OpStore %9 %175 
                                       f32_4 %178 = OpLoad %11 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                Uniform f32* %182 = OpAccessChain %22 %180 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %185 = OpAccessChain %22 %184 
                                         f32 %186 = OpLoad %185 
                                       f32_2 %187 = OpCompositeConstruct %183 %186 
                                       f32_2 %188 = OpFNegate %187 
                                       f32_2 %189 = OpFAdd %179 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFNegate %191 
                                Uniform f32* %194 = OpAccessChain %22 %193 
                                         f32 %195 = OpLoad %194 
                                Uniform f32* %196 = OpAccessChain %22 %193 
                                         f32 %197 = OpLoad %196 
                                       f32_2 %198 = OpCompositeConstruct %195 %197 
                                         f32 %199 = OpCompositeExtract %198 0 
                                         f32 %200 = OpCompositeExtract %198 1 
                                       f32_2 %201 = OpCompositeConstruct %199 %200 
                                       f32_2 %202 = OpFMul %192 %201 
                                       f32_2 %203 = OpLoad %177 
                                       f32_2 %204 = OpFAdd %202 %203 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %9 %206 
                                       f32_4 %207 = OpLoad %9 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                                Uniform f32* %210 = OpAccessChain %22 %209 
                                         f32 %211 = OpLoad %210 
                                       f32_2 %212 = OpCompositeConstruct %211 %211 
                                       f32_2 %213 = OpFDiv %208 %212 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %9 %215 
                                       f32_4 %218 = OpLoad %9 
                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
                                       f32_2 %222 = OpFAdd %219 %221 
                                                      OpStore vs_TEXCOORD3 %222 
                                       f32_4 %225 = OpLoad %224 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                              Uniform f32_4* %228 = OpAccessChain %22 %227 
                                       f32_4 %229 = OpLoad %228 
                                       f32_2 %230 = OpVectorShuffle %229 %229 0 1 
                                       f32_2 %231 = OpFMul %226 %230 
                              Uniform f32_4* %232 = OpAccessChain %22 %227 
                                       f32_4 %233 = OpLoad %232 
                                       f32_2 %234 = OpVectorShuffle %233 %233 2 3 
                                       f32_2 %235 = OpFAdd %231 %234 
                                                      OpStore vs_TEXCOORD0 %235 
                                       f32_3 %238 = OpLoad %237 
                              Uniform f32_4* %239 = OpAccessChain %22 %37 %29 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                         f32 %242 = OpDot %238 %241 
                                Private f32* %244 = OpAccessChain %9 %243 
                                                      OpStore %244 %242 
                                       f32_3 %245 = OpLoad %237 
                              Uniform f32_4* %246 = OpAccessChain %22 %37 %24 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %245 %248 
                                Private f32* %250 = OpAccessChain %9 %77 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %237 
                              Uniform f32_4* %252 = OpAccessChain %22 %37 %37 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                         f32 %255 = OpDot %251 %254 
                                Private f32* %256 = OpAccessChain %9 %87 
                                                      OpStore %256 %255 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_4 %260 = OpLoad %9 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                         f32 %262 = OpDot %259 %261 
                                                      OpStore %257 %262 
                                         f32 %263 = OpLoad %257 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %257 %264 
                                         f32 %266 = OpLoad %257 
                                       f32_3 %267 = OpCompositeConstruct %266 %266 %266 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFMul %267 %269 
                                                      OpStore vs_TEXCOORD1 %270 
                                 Output f32* %271 = OpAccessChain %81 %29 %77 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFNegate %272 
                                 Output f32* %274 = OpAccessChain %81 %29 %77 
                                                      OpStore %274 %273 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 436
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %58 %207 %378 %407 %419 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 58 
                                                      OpDecorate %197 DescriptorSet 197 
                                                      OpDecorate %197 Binding 197 
                                                      OpDecorate %201 DescriptorSet 201 
                                                      OpDecorate %201 Binding 201 
                                                      OpDecorate vs_TEXCOORD0 Location 207 
                                                      OpDecorate vs_TEXCOORD5 Location 378 
                                                      OpDecorate %407 Location 407 
                                                      OpDecorate %414 DescriptorSet 414 
                                                      OpDecorate %414 Binding 414 
                                                      OpDecorate %416 DescriptorSet 416 
                                                      OpDecorate %416 Binding 416 
                                                      OpDecorate vs_TEXCOORD3 Location 419 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %7 %14 %14 %14 %14 %6 %6 %14 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %7 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                               Private f32_3* %31 = OpVariable Private 
                                          i32 %36 = OpConstant 2 
                                              %37 = OpTypePointer Uniform %14 
                                          f32 %50 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %64 = OpTypePointer Private %14 
                               Private f32_4* %65 = OpVariable Private 
                                          f32 %77 = OpConstant 3.674022E-40 
                                          f32 %78 = OpConstant 3.674022E-40 
                                              %85 = OpTypeInt 32 0 
                                          u32 %86 = OpConstant 0 
                                 Private f32* %92 = OpVariable Private 
                                          i32 %93 = OpConstant 5 
                                              %94 = OpTypePointer Uniform %6 
                                 Private f32* %99 = OpVariable Private 
                                         f32 %104 = OpConstant 3.674022E-40 
                                Private f32* %106 = OpVariable Private 
                                Private f32* %110 = OpVariable Private 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %127 = OpConstant 3.674022E-40 
                                Private f32* %137 = OpVariable Private 
                                Private f32* %146 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                         f32 %181 = OpConstant 3.674022E-40 
                                         f32 %191 = OpConstant 3.674022E-40 
                                             %195 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %196 = OpTypePointer UniformConstant %195 
        UniformConstant read_only Texture2D* %197 = OpVariable UniformConstant 
                                             %199 = OpTypeSampler 
                                             %200 = OpTypePointer UniformConstant %199 
                    UniformConstant sampler* %201 = OpVariable UniformConstant 
                                             %203 = OpTypeSampledImage %195 
                                             %205 = OpTypeVector %6 2 
                                             %206 = OpTypePointer Input %205 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                              Private f32_3* %210 = OpVariable Private 
                                         i32 %213 = OpConstant 7 
                                         f32 %218 = OpConstant 3.674022E-40 
                                       f32_3 %219 = OpConstantComposite %218 %218 %218 
                                         i32 %225 = OpConstant 6 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                             %245 = OpTypeBool 
                                             %246 = OpTypePointer Private %245 
                               Private bool* %247 = OpVariable Private 
                              Private f32_3* %255 = OpVariable Private 
                                         i32 %258 = OpConstant 4 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %296 = OpConstantComposite %78 %78 %78 
                                         f32 %361 = OpConstant 3.674022E-40 
                                             %377 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         i32 %380 = OpConstant 1 
                                         u32 %381 = OpConstant 1 
                                         u32 %389 = OpConstant 2 
                                         i32 %396 = OpConstant 3 
                                         u32 %400 = OpConstant 3 
                                             %406 = OpTypePointer Output %14 
                               Output f32_4* %407 = OpVariable Output 
        UniformConstant read_only Texture2D* %414 = OpVariable UniformConstant 
                    UniformConstant sampler* %416 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                         i32 %426 = OpConstant 8 
                                             %433 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %13 %22 
                                                      OpStore %9 %23 
                                        f32_3 %26 = OpLoad %9 
                                        f32_3 %27 = OpLoad %9 
                                          f32 %28 = OpDot %26 %27 
                                                      OpStore %25 %28 
                                          f32 %29 = OpLoad %25 
                                          f32 %30 = OpExtInst %1 32 %29 
                                                      OpStore %25 %30 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpLoad %25 
                                        f32_3 %34 = OpCompositeConstruct %33 %33 %33 
                                        f32_3 %35 = OpFMul %32 %34 
                               Uniform f32_4* %38 = OpAccessChain %17 %36 
                                        f32_4 %39 = OpLoad %38 
                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                        f32_3 %41 = OpFAdd %35 %40 
                                                      OpStore %31 %41 
                                          f32 %42 = OpLoad %25 
                                        f32_3 %43 = OpCompositeConstruct %42 %42 %42 
                                        f32_3 %44 = OpLoad %9 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %9 %45 
                                        f32_3 %46 = OpLoad %31 
                                        f32_3 %47 = OpLoad %31 
                                          f32 %48 = OpDot %46 %47 
                                                      OpStore %25 %48 
                                          f32 %49 = OpLoad %25 
                                          f32 %51 = OpExtInst %1 40 %49 %50 
                                                      OpStore %25 %51 
                                          f32 %52 = OpLoad %25 
                                          f32 %53 = OpExtInst %1 32 %52 
                                                      OpStore %25 %53 
                                          f32 %54 = OpLoad %25 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpLoad %31 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %31 %57 
                                        f32_3 %59 = OpLoad vs_TEXCOORD1 
                                        f32_3 %60 = OpLoad vs_TEXCOORD1 
                                          f32 %61 = OpDot %59 %60 
                                                      OpStore %25 %61 
                                          f32 %62 = OpLoad %25 
                                          f32 %63 = OpExtInst %1 32 %62 
                                                      OpStore %25 %63 
                                          f32 %66 = OpLoad %25 
                                        f32_3 %67 = OpCompositeConstruct %66 %66 %66 
                                        f32_3 %68 = OpLoad vs_TEXCOORD1 
                                        f32_3 %69 = OpFMul %67 %68 
                                        f32_4 %70 = OpLoad %65 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                                      OpStore %65 %71 
                                        f32_4 %72 = OpLoad %65 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpLoad %31 
                                          f32 %75 = OpDot %73 %74 
                                                      OpStore %25 %75 
                                          f32 %76 = OpLoad %25 
                                          f32 %79 = OpExtInst %1 43 %76 %77 %78 
                                                      OpStore %25 %79 
                               Uniform f32_4* %80 = OpAccessChain %17 %36 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpLoad %31 
                                          f32 %84 = OpDot %82 %83 
                                 Private f32* %87 = OpAccessChain %31 %86 
                                                      OpStore %87 %84 
                                 Private f32* %88 = OpAccessChain %31 %86 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpExtInst %1 43 %89 %77 %78 
                                 Private f32* %91 = OpAccessChain %31 %86 
                                                      OpStore %91 %90 
                                 Uniform f32* %95 = OpAccessChain %17 %93 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFNegate %96 
                                          f32 %98 = OpFAdd %97 %78 
                                                      OpStore %92 %98 
                                         f32 %100 = OpLoad %92 
                                         f32 %101 = OpLoad %92 
                                         f32 %102 = OpFMul %100 %101 
                                                      OpStore %99 %102 
                                         f32 %103 = OpLoad %99 
                                         f32 %105 = OpExtInst %1 40 %103 %104 
                                                      OpStore %99 %105 
                                         f32 %107 = OpLoad %99 
                                         f32 %108 = OpLoad %99 
                                         f32 %109 = OpFMul %107 %108 
                                                      OpStore %106 %109 
                                         f32 %111 = OpLoad %25 
                                         f32 %112 = OpLoad %106 
                                         f32 %113 = OpFMul %111 %112 
                                         f32 %114 = OpLoad %25 
                                         f32 %115 = OpFNegate %114 
                                         f32 %116 = OpFAdd %113 %115 
                                                      OpStore %110 %116 
                                         f32 %117 = OpLoad %110 
                                         f32 %118 = OpLoad %25 
                                         f32 %119 = OpFMul %117 %118 
                                         f32 %120 = OpFAdd %119 %78 
                                                      OpStore %25 %120 
                                         f32 %121 = OpLoad %25 
                                         f32 %122 = OpLoad %25 
                                         f32 %123 = OpFMul %121 %122 
                                         f32 %125 = OpFAdd %123 %124 
                                                      OpStore %25 %125 
                                         f32 %126 = OpLoad %106 
                                         f32 %128 = OpFMul %126 %127 
                                                      OpStore %106 %128 
                                         f32 %129 = OpLoad %106 
                                         f32 %130 = OpLoad %25 
                                         f32 %131 = OpFDiv %129 %130 
                                                      OpStore %25 %131 
                                       f32_4 %132 = OpLoad %65 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpLoad %9 
                                         f32 %135 = OpDot %133 %134 
                                Private f32* %136 = OpAccessChain %9 %86 
                                                      OpStore %136 %135 
                                       f32_4 %138 = OpLoad %65 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %17 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %139 %142 
                                                      OpStore %137 %143 
                                         f32 %144 = OpLoad %137 
                                         f32 %145 = OpExtInst %1 43 %144 %77 %78 
                                                      OpStore %137 %145 
                                         f32 %147 = OpLoad %99 
                                         f32 %148 = OpFNegate %147 
                                         f32 %149 = OpFAdd %148 %78 
                                                      OpStore %146 %149 
                                Private f32* %150 = OpAccessChain %9 %86 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpExtInst %1 4 %151 
                                         f32 %153 = OpLoad %146 
                                         f32 %154 = OpFMul %152 %153 
                                         f32 %155 = OpLoad %99 
                                         f32 %156 = OpFAdd %154 %155 
                                                      OpStore %106 %156 
                                         f32 %157 = OpLoad %137 
                                         f32 %158 = OpLoad %146 
                                         f32 %159 = OpFMul %157 %158 
                                         f32 %160 = OpLoad %99 
                                         f32 %161 = OpFAdd %159 %160 
                                                      OpStore %146 %161 
                                         f32 %162 = OpLoad %146 
                                Private f32* %163 = OpAccessChain %9 %86 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpExtInst %1 4 %164 
                                         f32 %166 = OpFMul %162 %165 
                                                      OpStore %146 %166 
                                Private f32* %167 = OpAccessChain %9 %86 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpExtInst %1 4 %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %170 %78 
                                Private f32* %172 = OpAccessChain %9 %86 
                                                      OpStore %172 %171 
                                         f32 %173 = OpLoad %137 
                                         f32 %174 = OpLoad %106 
                                         f32 %175 = OpFMul %173 %174 
                                         f32 %176 = OpLoad %146 
                                         f32 %177 = OpFAdd %175 %176 
                                                      OpStore %146 %177 
                                         f32 %178 = OpLoad %146 
                                         f32 %180 = OpFAdd %178 %179 
                                                      OpStore %146 %180 
                                         f32 %182 = OpLoad %146 
                                         f32 %183 = OpFDiv %181 %182 
                                                      OpStore %146 %183 
                                         f32 %184 = OpLoad %25 
                                         f32 %185 = OpLoad %146 
                                         f32 %186 = OpFMul %184 %185 
                                                      OpStore %146 %186 
                                         f32 %187 = OpLoad %137 
                                         f32 %188 = OpLoad %146 
                                         f32 %189 = OpFMul %187 %188 
                                                      OpStore %146 %189 
                                         f32 %190 = OpLoad %146 
                                         f32 %192 = OpFMul %190 %191 
                                                      OpStore %146 %192 
                                         f32 %193 = OpLoad %146 
                                         f32 %194 = OpExtInst %1 40 %193 %77 
                                                      OpStore %146 %194 
                         read_only Texture2D %198 = OpLoad %197 
                                     sampler %202 = OpLoad %201 
                  read_only Texture2DSampled %204 = OpSampledImage %198 %202 
                                       f32_2 %208 = OpLoad vs_TEXCOORD0 
                                       f32_4 %209 = OpImageSampleImplicitLod %204 %208 
                                                      OpStore %65 %209 
                                       f32_4 %211 = OpLoad %65 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                              Uniform f32_4* %214 = OpAccessChain %17 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFMul %212 %216 
                                       f32_3 %220 = OpFAdd %217 %219 
                                                      OpStore %210 %220 
                                       f32_4 %221 = OpLoad %65 
                              Uniform f32_4* %222 = OpAccessChain %17 %213 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpFMul %221 %223 
                                                      OpStore %65 %224 
                                Uniform f32* %226 = OpAccessChain %17 %225 
                                         f32 %227 = OpLoad %226 
                                Uniform f32* %228 = OpAccessChain %17 %225 
                                         f32 %229 = OpLoad %228 
                                Uniform f32* %230 = OpAccessChain %17 %225 
                                         f32 %231 = OpLoad %230 
                                       f32_3 %232 = OpCompositeConstruct %227 %229 %231 
                                         f32 %233 = OpCompositeExtract %232 0 
                                         f32 %234 = OpCompositeExtract %232 1 
                                         f32 %235 = OpCompositeExtract %232 2 
                                       f32_3 %236 = OpCompositeConstruct %233 %234 %235 
                                       f32_3 %237 = OpLoad %210 
                                       f32_3 %238 = OpFMul %236 %237 
                                       f32_3 %241 = OpFAdd %238 %240 
                                                      OpStore %210 %241 
                                       f32_3 %242 = OpLoad %210 
                                       f32_3 %243 = OpLoad %210 
                                         f32 %244 = OpDot %242 %243 
                                                      OpStore %25 %244 
                                         f32 %248 = OpLoad %25 
                                        bool %249 = OpFOrdNotEqual %248 %77 
                                                      OpStore %247 %249 
                                        bool %250 = OpLoad %247 
                                         f32 %251 = OpSelect %250 %78 %77 
                                                      OpStore %25 %251 
                                         f32 %252 = OpLoad %25 
                                         f32 %253 = OpLoad %146 
                                         f32 %254 = OpFMul %252 %253 
                                                      OpStore %146 %254 
                                         f32 %256 = OpLoad %146 
                                       f32_3 %257 = OpCompositeConstruct %256 %256 %256 
                              Uniform f32_4* %259 = OpAccessChain %17 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpFMul %257 %261 
                                                      OpStore %255 %262 
                                Private f32* %263 = OpAccessChain %31 %86 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                         f32 %266 = OpFAdd %265 %78 
                                                      OpStore %146 %266 
                                Private f32* %267 = OpAccessChain %31 %86 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %31 %86 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFMul %268 %270 
                                                      OpStore %25 %271 
                                         f32 %272 = OpLoad %25 
                                       f32_2 %273 = OpCompositeConstruct %272 %272 
                                         f32 %274 = OpLoad %92 
                                       f32_2 %275 = OpCompositeConstruct %274 %274 
                                         f32 %276 = OpDot %273 %275 
                                                      OpStore %25 %276 
                                         f32 %277 = OpLoad %25 
                                         f32 %279 = OpFAdd %277 %278 
                                                      OpStore %25 %279 
                                         f32 %280 = OpLoad %146 
                                         f32 %281 = OpLoad %146 
                                         f32 %282 = OpFMul %280 %281 
                                Private f32* %283 = OpAccessChain %31 %86 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %31 %86 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %31 %86 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpFMul %285 %287 
                                Private f32* %289 = OpAccessChain %31 %86 
                                                      OpStore %289 %288 
                                         f32 %290 = OpLoad %146 
                                Private f32* %291 = OpAccessChain %31 %86 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFMul %290 %292 
                                                      OpStore %146 %293 
                                       f32_3 %294 = OpLoad %210 
                                       f32_3 %295 = OpFNegate %294 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %31 %297 
                                       f32_3 %298 = OpLoad %31 
                                         f32 %299 = OpLoad %146 
                                       f32_3 %300 = OpCompositeConstruct %299 %299 %299 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_3 %302 = OpLoad %210 
                                       f32_3 %303 = OpFAdd %301 %302 
                                                      OpStore %31 %303 
                                       f32_3 %304 = OpLoad %31 
                                       f32_3 %305 = OpLoad %255 
                                       f32_3 %306 = OpFMul %304 %305 
                                                      OpStore %31 %306 
                                Private f32* %307 = OpAccessChain %9 %86 
                                         f32 %308 = OpLoad %307 
                                Private f32* %309 = OpAccessChain %9 %86 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFMul %308 %310 
                                                      OpStore %146 %311 
                                         f32 %312 = OpLoad %146 
                                         f32 %313 = OpLoad %146 
                                         f32 %314 = OpFMul %312 %313 
                                                      OpStore %146 %314 
                                Private f32* %315 = OpAccessChain %9 %86 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpLoad %146 
                                         f32 %318 = OpFMul %316 %317 
                                Private f32* %319 = OpAccessChain %9 %86 
                                                      OpStore %319 %318 
                                         f32 %320 = OpLoad %25 
                                Private f32* %321 = OpAccessChain %9 %86 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                         f32 %324 = OpFAdd %323 %78 
                                Private f32* %325 = OpAccessChain %9 %86 
                                                      OpStore %325 %324 
                                         f32 %326 = OpLoad %137 
                                         f32 %327 = OpFNegate %326 
                                         f32 %328 = OpFAdd %327 %78 
                                                      OpStore %146 %328 
                                         f32 %329 = OpLoad %146 
                                         f32 %330 = OpLoad %146 
                                         f32 %331 = OpFMul %329 %330 
                                                      OpStore %106 %331 
                                         f32 %332 = OpLoad %106 
                                         f32 %333 = OpLoad %106 
                                         f32 %334 = OpFMul %332 %333 
                                                      OpStore %106 %334 
                                         f32 %335 = OpLoad %146 
                                         f32 %336 = OpLoad %106 
                                         f32 %337 = OpFMul %335 %336 
                                                      OpStore %146 %337 
                                         f32 %338 = OpLoad %25 
                                         f32 %339 = OpLoad %146 
                                         f32 %340 = OpFMul %338 %339 
                                         f32 %341 = OpFAdd %340 %78 
                                                      OpStore %146 %341 
                                Private f32* %342 = OpAccessChain %9 %86 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpLoad %146 
                                         f32 %345 = OpFMul %343 %344 
                                Private f32* %346 = OpAccessChain %9 %86 
                                                      OpStore %346 %345 
                                         f32 %347 = OpLoad %137 
                                Private f32* %348 = OpAccessChain %9 %86 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFMul %347 %349 
                                Private f32* %351 = OpAccessChain %9 %86 
                                                      OpStore %351 %350 
                                       f32_3 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                              Uniform f32_4* %354 = OpAccessChain %17 %258 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFMul %353 %356 
                                                      OpStore %9 %357 
                                Uniform f32* %358 = OpAccessChain %17 %225 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFNegate %359 
                                         f32 %362 = OpFMul %360 %361 
                                         f32 %363 = OpFAdd %362 %361 
                                                      OpStore %25 %363 
                                         f32 %364 = OpLoad %25 
                                       f32_3 %365 = OpCompositeConstruct %364 %364 %364 
                                       f32_4 %366 = OpLoad %65 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpFMul %365 %367 
                                       f32_4 %369 = OpLoad %65 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %65 %370 
                                       f32_4 %371 = OpLoad %65 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpLoad %9 
                                       f32_3 %374 = OpFMul %372 %373 
                                       f32_3 %375 = OpLoad %31 
                                       f32_3 %376 = OpFAdd %374 %375 
                                                      OpStore %9 %376 
                                         f32 %379 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %382 = OpAccessChain %17 %380 %381 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpFDiv %379 %383 
                                                      OpStore %25 %384 
                                         f32 %385 = OpLoad %25 
                                         f32 %386 = OpFNegate %385 
                                         f32 %387 = OpFAdd %386 %78 
                                                      OpStore %25 %387 
                                         f32 %388 = OpLoad %25 
                                Uniform f32* %390 = OpAccessChain %17 %380 %389 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFMul %388 %391 
                                                      OpStore %25 %392 
                                         f32 %393 = OpLoad %25 
                                         f32 %394 = OpExtInst %1 40 %393 %77 
                                                      OpStore %25 %394 
                                         f32 %395 = OpLoad %25 
                                Uniform f32* %397 = OpAccessChain %17 %396 %389 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %395 %398 
                                Uniform f32* %401 = OpAccessChain %17 %396 %400 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpFAdd %399 %402 
                                                      OpStore %25 %403 
                                         f32 %404 = OpLoad %25 
                                         f32 %405 = OpExtInst %1 43 %404 %77 %78 
                                                      OpStore %25 %405 
                                       f32_3 %408 = OpLoad %9 
                                         f32 %409 = OpLoad %25 
                                       f32_3 %410 = OpCompositeConstruct %409 %409 %409 
                                       f32_3 %411 = OpFMul %408 %410 
                                       f32_4 %412 = OpLoad %407 
                                       f32_4 %413 = OpVectorShuffle %412 %411 4 5 6 3 
                                                      OpStore %407 %413 
                         read_only Texture2D %415 = OpLoad %414 
                                     sampler %417 = OpLoad %416 
                  read_only Texture2DSampled %418 = OpSampledImage %415 %417 
                                       f32_2 %420 = OpLoad vs_TEXCOORD3 
                                       f32_4 %421 = OpImageSampleImplicitLod %418 %420 
                                         f32 %422 = OpCompositeExtract %421 3 
                                Private f32* %423 = OpAccessChain %9 %86 
                                                      OpStore %423 %422 
                                Private f32* %424 = OpAccessChain %9 %86 
                                         f32 %425 = OpLoad %424 
                                Uniform f32* %427 = OpAccessChain %17 %426 %400 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %425 %428 
                                Private f32* %430 = OpAccessChain %65 %400 
                                         f32 %431 = OpLoad %430 
                                         f32 %432 = OpFAdd %429 %431 
                                 Output f32* %434 = OpAccessChain %407 %400 
                                                      OpStore %434 %432 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat7;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat1.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat2.zz + u_xlat1.xy;
    u_xlat7.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat1.xy = (-u_xlat1.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat7.xy;
    u_xlat1.xy = u_xlat1.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat1.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _LightTextureB0;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
bool u_xlatb13;
float u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb18 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat8.x = u_xlat13 * u_xlat13;
    u_xlat14 = u_xlat18 * u_xlat8.x + (-u_xlat18);
    u_xlat18 = u_xlat14 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat8.x = u_xlat8.x * 0.318309873;
    u_xlat18 = u_xlat8.x / u_xlat18;
    u_xlat8.x = (-u_xlat13) + 1.0;
    u_xlat14 = abs(u_xlat1.x) * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat13 * abs(u_xlat1.x);
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
    u_xlat13 = u_xlat13 + 9.99999975e-06;
    u_xlat13 = 0.5 / u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat3 = u_xlat3 * _Color;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat19 * u_xlat19;
    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
    u_xlat7 = u_xlat7 + -0.5;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
    u_xlat18 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat0 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    SV_Target0.w = u_xlat0.w * _RedDotColor.w + u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 313
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %95 %151 %226 %232 %233 %246 %274 %300 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 95 
                                                      OpDecorate vs_TEXCOORD2 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 226 
                                                      OpDecorate vs_TEXCOORD0 Location 232 
                                                      OpDecorate %233 Location 233 
                                                      OpDecorate %246 Location 246 
                                                      OpDecorate vs_TEXCOORD1 Location 274 
                                                      OpDecorate vs_TEXCOORD4 Location 300 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeStruct %14 %17 %18 %19 %20 %6 %6 %6 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                               Private f32_4* %46 = OpVariable Private 
                                          i32 %48 = OpConstant 3 
                               Private f32_4* %59 = OpVariable Private 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %92 = OpTypePointer Output %7 
                                              %94 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                          u32 %96 = OpConstant 2 
                                              %97 = OpTypePointer Private %6 
                                             %144 = OpTypePointer Uniform %14 
                                             %150 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %154 = OpTypeVector %6 2 
                                             %185 = OpTypePointer Private %154 
                              Private f32_2* %186 = OpVariable Private 
                                         i32 %189 = OpConstant 7 
                                             %190 = OpTypePointer Uniform %6 
                                         i32 %193 = OpConstant 8 
                                         i32 %202 = OpConstant 6 
                                         i32 %218 = OpConstant 5 
                                             %225 = OpTypePointer Output %154 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_2 %230 = OpConstantComposite %229 %229 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %233 = OpVariable Input 
                                         i32 %236 = OpConstant 9 
                                             %245 = OpTypePointer Input %14 
                                Input f32_3* %246 = OpVariable Input 
                                         u32 %252 = OpConstant 0 
                                Private f32* %266 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %282 = OpConstant 4 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %23 %25 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %31 = OpAccessChain %23 %25 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpLoad %11 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
                                        f32_4 %35 = OpFMul %32 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %23 %25 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_4 %41 = OpLoad %11 
                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
                                        f32_4 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_4 %47 = OpLoad %9 
                               Uniform f32_4* %49 = OpAccessChain %23 %25 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_4 %51 = OpFAdd %47 %50 
                                                      OpStore %46 %51 
                               Uniform f32_4* %52 = OpAccessChain %23 %25 %48 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %9 %58 
                                        f32_4 %60 = OpLoad %46 
                                        f32_4 %61 = OpVectorShuffle %60 %60 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %23 %48 %25 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %61 %63 
                                                      OpStore %59 %64 
                               Uniform f32_4* %65 = OpAccessChain %23 %48 %30 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %46 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %48 %38 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %46 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %59 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %59 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %48 %48 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %46 
                                        f32_4 %82 = OpVectorShuffle %81 %81 3 3 3 3 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %59 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %46 %85 
                                        f32_4 %91 = OpLoad %46 
                                Output f32_4* %93 = OpAccessChain %90 %30 
                                                      OpStore %93 %91 
                                 Private f32* %98 = OpAccessChain %46 %96 
                                          f32 %99 = OpLoad %98 
                                                      OpStore vs_TEXCOORD5 %99 
                                       f32_4 %100 = OpLoad %11 
                                       f32_3 %101 = OpVectorShuffle %100 %100 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %25 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFMul %101 %104 
                                       f32_4 %106 = OpLoad %46 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %46 %107 
                              Uniform f32_4* %108 = OpAccessChain %23 %25 %30 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_4 %111 = OpLoad %11 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %46 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFAdd %113 %115 
                                       f32_4 %117 = OpLoad %46 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %46 %118 
                              Uniform f32_4* %119 = OpAccessChain %23 %25 %38 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %11 
                                       f32_3 %123 = OpVectorShuffle %122 %122 2 2 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %46 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %46 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %46 %129 
                              Uniform f32_4* %130 = OpAccessChain %23 %25 %48 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %11 
                                       f32_3 %134 = OpVectorShuffle %133 %133 3 3 3 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %46 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %46 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %46 %140 
                                       f32_4 %141 = OpLoad %46 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %23 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                       f32_4 %148 = OpLoad %59 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %59 %149 
                                       f32_4 %152 = OpLoad %46 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD2 %153 
                                       f32_4 %155 = OpLoad %59 
                                       f32_2 %156 = OpVectorShuffle %155 %155 1 1 
                              Uniform f32_4* %157 = OpAccessChain %23 %38 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %160 = OpFMul %156 %159 
                                       f32_4 %161 = OpLoad %46 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 2 3 
                                                      OpStore %46 %162 
                              Uniform f32_4* %163 = OpAccessChain %23 %38 %30 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_4 %166 = OpLoad %59 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 0 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %46 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %46 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %46 %173 
                              Uniform f32_4* %174 = OpAccessChain %23 %38 %38 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_4 %177 = OpLoad %59 
                                       f32_2 %178 = OpVectorShuffle %177 %177 2 2 
                                       f32_2 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %46 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad %46 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore %46 %184 
                                       f32_4 %187 = OpLoad %11 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 1 
                                Uniform f32* %191 = OpAccessChain %23 %189 
                                         f32 %192 = OpLoad %191 
                                Uniform f32* %194 = OpAccessChain %23 %193 
                                         f32 %195 = OpLoad %194 
                                       f32_2 %196 = OpCompositeConstruct %192 %195 
                                       f32_2 %197 = OpFNegate %196 
                                       f32_2 %198 = OpFAdd %188 %197 
                                                      OpStore %186 %198 
                                       f32_4 %199 = OpLoad %46 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFNegate %200 
                                Uniform f32* %203 = OpAccessChain %23 %202 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %205 = OpAccessChain %23 %202 
                                         f32 %206 = OpLoad %205 
                                       f32_2 %207 = OpCompositeConstruct %204 %206 
                                         f32 %208 = OpCompositeExtract %207 0 
                                         f32 %209 = OpCompositeExtract %207 1 
                                       f32_2 %210 = OpCompositeConstruct %208 %209 
                                       f32_2 %211 = OpFMul %201 %210 
                                       f32_2 %212 = OpLoad %186 
                                       f32_2 %213 = OpFAdd %211 %212 
                                       f32_4 %214 = OpLoad %46 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %46 %215 
                                       f32_4 %216 = OpLoad %46 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                Uniform f32* %219 = OpAccessChain %23 %218 
                                         f32 %220 = OpLoad %219 
                                       f32_2 %221 = OpCompositeConstruct %220 %220 
                                       f32_2 %222 = OpFDiv %217 %221 
                                       f32_4 %223 = OpLoad %46 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 2 3 
                                                      OpStore %46 %224 
                                       f32_4 %227 = OpLoad %46 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                                       f32_2 %231 = OpFAdd %228 %230 
                                                      OpStore vs_TEXCOORD3 %231 
                                       f32_4 %234 = OpLoad %233 
                                       f32_2 %235 = OpVectorShuffle %234 %234 0 1 
                              Uniform f32_4* %237 = OpAccessChain %23 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                                       f32_2 %240 = OpFMul %235 %239 
                              Uniform f32_4* %241 = OpAccessChain %23 %236 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 2 3 
                                       f32_2 %244 = OpFAdd %240 %243 
                                                      OpStore vs_TEXCOORD0 %244 
                                       f32_3 %247 = OpLoad %246 
                              Uniform f32_4* %248 = OpAccessChain %23 %38 %30 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                         f32 %251 = OpDot %247 %250 
                                Private f32* %253 = OpAccessChain %46 %252 
                                                      OpStore %253 %251 
                                       f32_3 %254 = OpLoad %246 
                              Uniform f32_4* %255 = OpAccessChain %23 %38 %25 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %259 = OpAccessChain %46 %86 
                                                      OpStore %259 %258 
                                       f32_3 %260 = OpLoad %246 
                              Uniform f32_4* %261 = OpAccessChain %23 %38 %38 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %260 %263 
                                Private f32* %265 = OpAccessChain %46 %96 
                                                      OpStore %265 %264 
                                       f32_4 %267 = OpLoad %46 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %46 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                         f32 %271 = OpDot %268 %270 
                                                      OpStore %266 %271 
                                         f32 %272 = OpLoad %266 
                                         f32 %273 = OpExtInst %1 32 %272 
                                                      OpStore %266 %273 
                                         f32 %275 = OpLoad %266 
                                       f32_3 %276 = OpCompositeConstruct %275 %275 %275 
                                       f32_4 %277 = OpLoad %46 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                                      OpStore vs_TEXCOORD1 %279 
                                       f32_4 %280 = OpLoad %9 
                                       f32_4 %281 = OpVectorShuffle %280 %280 1 1 1 1 
                              Uniform f32_4* %283 = OpAccessChain %23 %282 %25 
                                       f32_4 %284 = OpLoad %283 
                                       f32_4 %285 = OpFMul %281 %284 
                                                      OpStore %46 %285 
                              Uniform f32_4* %286 = OpAccessChain %23 %282 %30 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 0 0 0 0 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %46 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %46 %292 
                              Uniform f32_4* %293 = OpAccessChain %23 %282 %38 
                                       f32_4 %294 = OpLoad %293 
                                       f32_4 %295 = OpLoad %9 
                                       f32_4 %296 = OpVectorShuffle %295 %295 2 2 2 2 
                                       f32_4 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %46 
                                       f32_4 %299 = OpFAdd %297 %298 
                                                      OpStore %46 %299 
                              Uniform f32_4* %301 = OpAccessChain %23 %282 %48 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %9 
                                       f32_4 %304 = OpVectorShuffle %303 %303 3 3 3 3 
                                       f32_4 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %46 
                                       f32_4 %307 = OpFAdd %305 %306 
                                                      OpStore vs_TEXCOORD4 %307 
                                 Output f32* %308 = OpAccessChain %90 %30 %86 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFNegate %309 
                                 Output f32* %311 = OpAccessChain %90 %30 %86 
                                                      OpStore %311 %310 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 543
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %186 %326 %488 %513 %526 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %74 DescriptorSet 74 
                                                      OpDecorate %74 Binding 74 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate vs_TEXCOORD1 Location 186 
                                                      OpDecorate %320 DescriptorSet 320 
                                                      OpDecorate %320 Binding 320 
                                                      OpDecorate %322 DescriptorSet 322 
                                                      OpDecorate %322 Binding 322 
                                                      OpDecorate vs_TEXCOORD0 Location 326 
                                                      OpDecorate vs_TEXCOORD5 Location 488 
                                                      OpDecorate %513 Location 513 
                                                      OpDecorate %521 DescriptorSet 521 
                                                      OpDecorate %521 Binding 521 
                                                      OpDecorate %523 DescriptorSet 523 
                                                      OpDecorate %523 Binding 523 
                                                      OpDecorate vs_TEXCOORD3 Location 526 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %10 %7 %7 %7 %7 %17 %6 %6 %7 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 5 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                                              %49 = OpTypePointer Private %10 
                               Private f32_3* %50 = OpVariable Private 
                                              %51 = OpTypeVector %6 2 
                                          f32 %61 = OpConstant 3.674022E-40 
                                        f32_2 %62 = OpConstantComposite %61 %61 
                                              %66 = OpTypePointer Private %6 
                                 Private f32* %67 = OpVariable Private 
                                              %68 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %69 = OpTypePointer UniformConstant %68 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                                              %72 = OpTypeSampler 
                                              %73 = OpTypePointer UniformConstant %72 
                     UniformConstant sampler* %74 = OpVariable UniformConstant 
                                              %76 = OpTypeSampledImage %68 
                                          u32 %81 = OpConstant 3 
                                              %83 = OpTypeBool 
                                              %84 = OpTypePointer Private %83 
                                Private bool* %85 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          u32 %87 = OpConstant 2 
                                          u32 %96 = OpConstant 0 
         UniformConstant read_only Texture2D* %98 = OpVariable UniformConstant 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                                Private f32* %108 = OpVariable Private 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         i32 %122 = OpConstant 4 
                                             %131 = OpTypePointer Uniform %10 
                              Private f32_3* %144 = OpVariable Private 
                              Private f32_4* %156 = OpVariable Private 
                                         f32 %175 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %192 = OpVariable Private 
                                Private f32* %203 = OpVariable Private 
                                Private f32* %222 = OpVariable Private 
                                         i32 %223 = OpConstant 6 
                                             %224 = OpTypePointer Uniform %6 
                                Private f32* %229 = OpVariable Private 
                                         f32 %234 = OpConstant 3.674022E-40 
                              Private f32_3* %236 = OpVariable Private 
                                Private f32* %241 = OpVariable Private 
                                         f32 %256 = OpConstant 3.674022E-40 
                                         f32 %260 = OpConstant 3.674022E-40 
                                         f32 %304 = OpConstant 3.674022E-40 
                                         f32 %316 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %320 = OpVariable UniformConstant 
                    UniformConstant sampler* %322 = OpVariable UniformConstant 
                                             %325 = OpTypePointer Input %51 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %331 = OpConstant 8 
                                         f32 %336 = OpConstant 3.674022E-40 
                                       f32_3 %337 = OpConstantComposite %336 %336 %336 
                                         i32 %343 = OpConstant 7 
                                         f32 %357 = OpConstant 3.674022E-40 
                                       f32_3 %358 = OpConstantComposite %357 %357 %357 
                               Private bool* %363 = OpVariable Private 
                                         f32 %388 = OpConstant 3.674022E-40 
                              Private f32_3* %399 = OpVariable Private 
                                       f32_3 %402 = OpConstantComposite %110 %110 %110 
                                         f32 %471 = OpConstant 3.674022E-40 
                                             %487 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %490 = OpConstant 1 
                                             %512 = OpTypePointer Output %7 
                               Output f32_4* %513 = OpVariable Output 
        UniformConstant read_only Texture2D* %521 = OpVariable UniformConstant 
                    UniformConstant sampler* %523 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                         i32 %533 = OpConstant 9 
                                             %540 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %14 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpLoad vs_TEXCOORD2 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %20 %22 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %20 %22 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %52 = OpLoad %9 
                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 3 3 
                                        f32_2 %56 = OpFDiv %53 %55 
                                        f32_3 %57 = OpLoad %50 
                                        f32_3 %58 = OpVectorShuffle %57 %56 3 4 2 
                                                      OpStore %50 %58 
                                        f32_3 %59 = OpLoad %50 
                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                        f32_2 %63 = OpFAdd %60 %62 
                                        f32_3 %64 = OpLoad %50 
                                        f32_3 %65 = OpVectorShuffle %64 %63 3 4 2 
                                                      OpStore %50 %65 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %75 = OpLoad %74 
                   read_only Texture2DSampled %77 = OpSampledImage %71 %75 
                                        f32_3 %78 = OpLoad %50 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_4 %80 = OpImageSampleImplicitLod %77 %79 
                                          f32 %82 = OpCompositeExtract %80 3 
                                                      OpStore %67 %82 
                                 Private f32* %88 = OpAccessChain %9 %87 
                                          f32 %89 = OpLoad %88 
                                         bool %90 = OpFOrdLessThan %86 %89 
                                                      OpStore %85 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                          f32 %95 = OpDot %92 %94 
                                 Private f32* %97 = OpAccessChain %9 %96 
                                                      OpStore %97 %95 
                          read_only Texture2D %99 = OpLoad %98 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %102 = OpSampledImage %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 0 
                                       f32_4 %105 = OpImageSampleImplicitLod %102 %104 
                                         f32 %106 = OpCompositeExtract %105 0 
                                Private f32* %107 = OpAccessChain %9 %96 
                                                      OpStore %107 %106 
                                        bool %109 = OpLoad %85 
                                         f32 %111 = OpSelect %109 %110 %86 
                                                      OpStore %108 %111 
                                         f32 %112 = OpLoad %67 
                                         f32 %113 = OpLoad %108 
                                         f32 %114 = OpFMul %112 %113 
                                                      OpStore %108 %114 
                                Private f32* %115 = OpAccessChain %9 %96 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpLoad %108 
                                         f32 %118 = OpFMul %116 %117 
                                Private f32* %119 = OpAccessChain %9 %96 
                                                      OpStore %119 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
                              Uniform f32_4* %123 = OpAccessChain %20 %122 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFMul %121 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %9 %128 
                                       f32_3 %129 = OpLoad vs_TEXCOORD2 
                                       f32_3 %130 = OpFNegate %129 
                              Uniform f32_3* %132 = OpAccessChain %20 %28 
                                       f32_3 %133 = OpLoad %132 
                                       f32_3 %134 = OpFAdd %130 %133 
                                                      OpStore %50 %134 
                                       f32_3 %135 = OpLoad %50 
                                       f32_3 %136 = OpLoad %50 
                                         f32 %137 = OpDot %135 %136 
                                                      OpStore %67 %137 
                                         f32 %138 = OpLoad %67 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %67 %139 
                                         f32 %140 = OpLoad %67 
                                       f32_3 %141 = OpCompositeConstruct %140 %140 %140 
                                       f32_3 %142 = OpLoad %50 
                                       f32_3 %143 = OpFMul %141 %142 
                                                      OpStore %50 %143 
                                       f32_3 %145 = OpLoad vs_TEXCOORD2 
                                       f32_3 %146 = OpFNegate %145 
                              Uniform f32_4* %147 = OpAccessChain %20 %36 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFAdd %146 %149 
                                                      OpStore %144 %150 
                                       f32_3 %151 = OpLoad %144 
                                       f32_3 %152 = OpLoad %144 
                                         f32 %153 = OpDot %151 %152 
                                                      OpStore %67 %153 
                                         f32 %154 = OpLoad %67 
                                         f32 %155 = OpExtInst %1 32 %154 
                                                      OpStore %67 %155 
                                       f32_3 %157 = OpLoad %144 
                                         f32 %158 = OpLoad %67 
                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_3 %161 = OpLoad %50 
                                       f32_3 %162 = OpFAdd %160 %161 
                                       f32_4 %163 = OpLoad %156 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %156 %164 
                                         f32 %165 = OpLoad %67 
                                       f32_3 %166 = OpCompositeConstruct %165 %165 %165 
                                       f32_3 %167 = OpLoad %144 
                                       f32_3 %168 = OpFMul %166 %167 
                                                      OpStore %144 %168 
                                       f32_4 %169 = OpLoad %156 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %156 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %170 %172 
                                                      OpStore %67 %173 
                                         f32 %174 = OpLoad %67 
                                         f32 %176 = OpExtInst %1 40 %174 %175 
                                                      OpStore %67 %176 
                                         f32 %177 = OpLoad %67 
                                         f32 %178 = OpExtInst %1 32 %177 
                                                      OpStore %67 %178 
                                         f32 %179 = OpLoad %67 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_4 %181 = OpLoad %156 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFMul %180 %182 
                                       f32_4 %184 = OpLoad %156 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                      OpStore %156 %185 
                                       f32_3 %187 = OpLoad vs_TEXCOORD1 
                                       f32_3 %188 = OpLoad vs_TEXCOORD1 
                                         f32 %189 = OpDot %187 %188 
                                                      OpStore %67 %189 
                                         f32 %190 = OpLoad %67 
                                         f32 %191 = OpExtInst %1 32 %190 
                                                      OpStore %67 %191 
                                         f32 %193 = OpLoad %67 
                                       f32_3 %194 = OpCompositeConstruct %193 %193 %193 
                                       f32_3 %195 = OpLoad vs_TEXCOORD1 
                                       f32_3 %196 = OpFMul %194 %195 
                                                      OpStore %192 %196 
                                       f32_3 %197 = OpLoad %192 
                                       f32_4 %198 = OpLoad %156 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                         f32 %200 = OpDot %197 %199 
                                                      OpStore %67 %200 
                                         f32 %201 = OpLoad %67 
                                         f32 %202 = OpExtInst %1 43 %201 %86 %110 
                                                      OpStore %67 %202 
                                       f32_3 %204 = OpLoad %144 
                                       f32_4 %205 = OpLoad %156 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                         f32 %207 = OpDot %204 %206 
                                                      OpStore %203 %207 
                                         f32 %208 = OpLoad %203 
                                         f32 %209 = OpExtInst %1 43 %208 %86 %110 
                                                      OpStore %203 %209 
                                       f32_3 %210 = OpLoad %192 
                                       f32_3 %211 = OpLoad %144 
                                         f32 %212 = OpDot %210 %211 
                                Private f32* %213 = OpAccessChain %144 %96 
                                                      OpStore %213 %212 
                                Private f32* %214 = OpAccessChain %144 %96 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 43 %215 %86 %110 
                                Private f32* %217 = OpAccessChain %144 %96 
                                                      OpStore %217 %216 
                                       f32_3 %218 = OpLoad %192 
                                       f32_3 %219 = OpLoad %50 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %50 %96 
                                                      OpStore %221 %220 
                                Uniform f32* %225 = OpAccessChain %20 %223 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %227 %110 
                                                      OpStore %222 %228 
                                         f32 %230 = OpLoad %222 
                                         f32 %231 = OpLoad %222 
                                         f32 %232 = OpFMul %230 %231 
                                                      OpStore %229 %232 
                                         f32 %233 = OpLoad %229 
                                         f32 %235 = OpExtInst %1 40 %233 %234 
                                                      OpStore %229 %235 
                                         f32 %237 = OpLoad %229 
                                         f32 %238 = OpLoad %229 
                                         f32 %239 = OpFMul %237 %238 
                                Private f32* %240 = OpAccessChain %236 %96 
                                                      OpStore %240 %239 
                                         f32 %242 = OpLoad %67 
                                Private f32* %243 = OpAccessChain %236 %96 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %242 %244 
                                         f32 %246 = OpLoad %67 
                                         f32 %247 = OpFNegate %246 
                                         f32 %248 = OpFAdd %245 %247 
                                                      OpStore %241 %248 
                                         f32 %249 = OpLoad %241 
                                         f32 %250 = OpLoad %67 
                                         f32 %251 = OpFMul %249 %250 
                                         f32 %252 = OpFAdd %251 %110 
                                                      OpStore %67 %252 
                                         f32 %253 = OpLoad %67 
                                         f32 %254 = OpLoad %67 
                                         f32 %255 = OpFMul %253 %254 
                                         f32 %257 = OpFAdd %255 %256 
                                                      OpStore %67 %257 
                                Private f32* %258 = OpAccessChain %236 %96 
                                         f32 %259 = OpLoad %258 
                                         f32 %261 = OpFMul %259 %260 
                                Private f32* %262 = OpAccessChain %236 %96 
                                                      OpStore %262 %261 
                                Private f32* %263 = OpAccessChain %236 %96 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpLoad %67 
                                         f32 %266 = OpFDiv %264 %265 
                                                      OpStore %67 %266 
                                         f32 %267 = OpLoad %229 
                                         f32 %268 = OpFNegate %267 
                                         f32 %269 = OpFAdd %268 %110 
                                Private f32* %270 = OpAccessChain %236 %96 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %50 %96 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 4 %272 
                                Private f32* %274 = OpAccessChain %236 %96 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFMul %273 %275 
                                         f32 %277 = OpLoad %229 
                                         f32 %278 = OpFAdd %276 %277 
                                                      OpStore %241 %278 
                                Private f32* %279 = OpAccessChain %144 %96 
                                         f32 %280 = OpLoad %279 
                                Private f32* %281 = OpAccessChain %236 %96 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %280 %282 
                                         f32 %284 = OpLoad %229 
                                         f32 %285 = OpFAdd %283 %284 
                                                      OpStore %229 %285 
                                         f32 %286 = OpLoad %229 
                                Private f32* %287 = OpAccessChain %50 %96 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 4 %288 
                                         f32 %290 = OpFMul %286 %289 
                                                      OpStore %229 %290 
                                Private f32* %291 = OpAccessChain %50 %96 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpExtInst %1 4 %292 
                                         f32 %294 = OpFNegate %293 
                                         f32 %295 = OpFAdd %294 %110 
                                Private f32* %296 = OpAccessChain %50 %96 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %144 %96 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpLoad %241 
                                         f32 %300 = OpFMul %298 %299 
                                         f32 %301 = OpLoad %229 
                                         f32 %302 = OpFAdd %300 %301 
                                                      OpStore %229 %302 
                                         f32 %303 = OpLoad %229 
                                         f32 %305 = OpFAdd %303 %304 
                                                      OpStore %229 %305 
                                         f32 %306 = OpLoad %229 
                                         f32 %307 = OpFDiv %61 %306 
                                                      OpStore %229 %307 
                                         f32 %308 = OpLoad %67 
                                         f32 %309 = OpLoad %229 
                                         f32 %310 = OpFMul %308 %309 
                                                      OpStore %67 %310 
                                Private f32* %311 = OpAccessChain %144 %96 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpLoad %67 
                                         f32 %314 = OpFMul %312 %313 
                                                      OpStore %67 %314 
                                         f32 %315 = OpLoad %67 
                                         f32 %317 = OpFMul %315 %316 
                                                      OpStore %67 %317 
                                         f32 %318 = OpLoad %67 
                                         f32 %319 = OpExtInst %1 40 %318 %86 
                                                      OpStore %67 %319 
                         read_only Texture2D %321 = OpLoad %320 
                                     sampler %323 = OpLoad %322 
                  read_only Texture2DSampled %324 = OpSampledImage %321 %323 
                                       f32_2 %327 = OpLoad vs_TEXCOORD0 
                                       f32_4 %328 = OpImageSampleImplicitLod %324 %327 
                                                      OpStore %156 %328 
                                       f32_4 %329 = OpLoad %156 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                              Uniform f32_4* %332 = OpAccessChain %20 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_3 %335 = OpFMul %330 %334 
                                       f32_3 %338 = OpFAdd %335 %337 
                                                      OpStore %236 %338 
                                       f32_4 %339 = OpLoad %156 
                              Uniform f32_4* %340 = OpAccessChain %20 %331 
                                       f32_4 %341 = OpLoad %340 
                                       f32_4 %342 = OpFMul %339 %341 
                                                      OpStore %156 %342 
                                Uniform f32* %344 = OpAccessChain %20 %343 
                                         f32 %345 = OpLoad %344 
                                Uniform f32* %346 = OpAccessChain %20 %343 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %348 = OpAccessChain %20 %343 
                                         f32 %349 = OpLoad %348 
                                       f32_3 %350 = OpCompositeConstruct %345 %347 %349 
                                         f32 %351 = OpCompositeExtract %350 0 
                                         f32 %352 = OpCompositeExtract %350 1 
                                         f32 %353 = OpCompositeExtract %350 2 
                                       f32_3 %354 = OpCompositeConstruct %351 %352 %353 
                                       f32_3 %355 = OpLoad %236 
                                       f32_3 %356 = OpFMul %354 %355 
                                       f32_3 %359 = OpFAdd %356 %358 
                                                      OpStore %236 %359 
                                       f32_3 %360 = OpLoad %236 
                                       f32_3 %361 = OpLoad %236 
                                         f32 %362 = OpDot %360 %361 
                                                      OpStore %229 %362 
                                         f32 %364 = OpLoad %229 
                                        bool %365 = OpFOrdNotEqual %364 %86 
                                                      OpStore %363 %365 
                                        bool %366 = OpLoad %363 
                                         f32 %367 = OpSelect %366 %110 %86 
                                                      OpStore %229 %367 
                                         f32 %368 = OpLoad %67 
                                         f32 %369 = OpLoad %229 
                                         f32 %370 = OpFMul %368 %369 
                                                      OpStore %67 %370 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                         f32 %373 = OpLoad %67 
                                       f32_3 %374 = OpCompositeConstruct %373 %373 %373 
                                       f32_3 %375 = OpFMul %372 %374 
                                                      OpStore %192 %375 
                                         f32 %376 = OpLoad %203 
                                         f32 %377 = OpFNegate %376 
                                         f32 %378 = OpFAdd %377 %110 
                                                      OpStore %67 %378 
                                         f32 %379 = OpLoad %203 
                                         f32 %380 = OpLoad %203 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %229 %381 
                                         f32 %382 = OpLoad %229 
                                       f32_2 %383 = OpCompositeConstruct %382 %382 
                                         f32 %384 = OpLoad %222 
                                       f32_2 %385 = OpCompositeConstruct %384 %384 
                                         f32 %386 = OpDot %383 %385 
                                                      OpStore %222 %386 
                                         f32 %387 = OpLoad %222 
                                         f32 %389 = OpFAdd %387 %388 
                                                      OpStore %222 %389 
                                         f32 %390 = OpLoad %67 
                                         f32 %391 = OpLoad %67 
                                         f32 %392 = OpFMul %390 %391 
                                                      OpStore %229 %392 
                                         f32 %393 = OpLoad %229 
                                         f32 %394 = OpLoad %229 
                                         f32 %395 = OpFMul %393 %394 
                                                      OpStore %229 %395 
                                         f32 %396 = OpLoad %67 
                                         f32 %397 = OpLoad %229 
                                         f32 %398 = OpFMul %396 %397 
                                                      OpStore %67 %398 
                                       f32_3 %400 = OpLoad %236 
                                       f32_3 %401 = OpFNegate %400 
                                       f32_3 %403 = OpFAdd %401 %402 
                                                      OpStore %399 %403 
                                       f32_3 %404 = OpLoad %399 
                                         f32 %405 = OpLoad %67 
                                       f32_3 %406 = OpCompositeConstruct %405 %405 %405 
                                       f32_3 %407 = OpFMul %404 %406 
                                       f32_3 %408 = OpLoad %236 
                                       f32_3 %409 = OpFAdd %407 %408 
                                                      OpStore %236 %409 
                                       f32_3 %410 = OpLoad %236 
                                       f32_3 %411 = OpLoad %192 
                                       f32_3 %412 = OpFMul %410 %411 
                                                      OpStore %236 %412 
                                Private f32* %413 = OpAccessChain %50 %96 
                                         f32 %414 = OpLoad %413 
                                Private f32* %415 = OpAccessChain %50 %96 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFMul %414 %416 
                                                      OpStore %67 %417 
                                         f32 %418 = OpLoad %67 
                                         f32 %419 = OpLoad %67 
                                         f32 %420 = OpFMul %418 %419 
                                                      OpStore %67 %420 
                                Private f32* %421 = OpAccessChain %50 %96 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpLoad %67 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %67 %424 
                                         f32 %425 = OpLoad %222 
                                         f32 %426 = OpLoad %67 
                                         f32 %427 = OpFMul %425 %426 
                                         f32 %428 = OpFAdd %427 %110 
                                                      OpStore %67 %428 
                                Private f32* %429 = OpAccessChain %144 %96 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpFNegate %430 
                                         f32 %432 = OpFAdd %431 %110 
                                Private f32* %433 = OpAccessChain %50 %96 
                                                      OpStore %433 %432 
                                Private f32* %434 = OpAccessChain %50 %96 
                                         f32 %435 = OpLoad %434 
                                Private f32* %436 = OpAccessChain %50 %96 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpFMul %435 %437 
                                                      OpStore %229 %438 
                                         f32 %439 = OpLoad %229 
                                         f32 %440 = OpLoad %229 
                                         f32 %441 = OpFMul %439 %440 
                                                      OpStore %229 %441 
                                Private f32* %442 = OpAccessChain %50 %96 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpLoad %229 
                                         f32 %445 = OpFMul %443 %444 
                                Private f32* %446 = OpAccessChain %50 %96 
                                                      OpStore %446 %445 
                                         f32 %447 = OpLoad %222 
                                Private f32* %448 = OpAccessChain %50 %96 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpFMul %447 %449 
                                         f32 %451 = OpFAdd %450 %110 
                                Private f32* %452 = OpAccessChain %50 %96 
                                                      OpStore %452 %451 
                                         f32 %453 = OpLoad %67 
                                Private f32* %454 = OpAccessChain %50 %96 
                                         f32 %455 = OpLoad %454 
                                         f32 %456 = OpFMul %453 %455 
                                                      OpStore %67 %456 
                                Private f32* %457 = OpAccessChain %144 %96 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpLoad %67 
                                         f32 %460 = OpFMul %458 %459 
                                                      OpStore %67 %460 
                                         f32 %461 = OpLoad %67 
                                       f32_3 %462 = OpCompositeConstruct %461 %461 %461 
                                       f32_4 %463 = OpLoad %9 
                                       f32_3 %464 = OpVectorShuffle %463 %463 0 1 2 
                                       f32_3 %465 = OpFMul %462 %464 
                                       f32_4 %466 = OpLoad %9 
                                       f32_4 %467 = OpVectorShuffle %466 %465 4 5 6 3 
                                                      OpStore %9 %467 
                                Uniform f32* %468 = OpAccessChain %20 %343 
                                         f32 %469 = OpLoad %468 
                                         f32 %470 = OpFNegate %469 
                                         f32 %472 = OpFMul %470 %471 
                                         f32 %473 = OpFAdd %472 %471 
                                                      OpStore %67 %473 
                                         f32 %474 = OpLoad %67 
                                       f32_3 %475 = OpCompositeConstruct %474 %474 %474 
                                       f32_4 %476 = OpLoad %156 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                                      OpStore %50 %478 
                                       f32_3 %479 = OpLoad %50 
                                       f32_4 %480 = OpLoad %9 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpFMul %479 %481 
                                       f32_3 %483 = OpLoad %236 
                                       f32_3 %484 = OpFAdd %482 %483 
                                       f32_4 %485 = OpLoad %9 
                                       f32_4 %486 = OpVectorShuffle %485 %484 4 5 6 3 
                                                      OpStore %9 %486 
                                         f32 %489 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %491 = OpAccessChain %20 %23 %490 
                                         f32 %492 = OpLoad %491 
                                         f32 %493 = OpFDiv %489 %492 
                                                      OpStore %67 %493 
                                         f32 %494 = OpLoad %67 
                                         f32 %495 = OpFNegate %494 
                                         f32 %496 = OpFAdd %495 %110 
                                                      OpStore %67 %496 
                                         f32 %497 = OpLoad %67 
                                Uniform f32* %498 = OpAccessChain %20 %23 %87 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                                      OpStore %67 %500 
                                         f32 %501 = OpLoad %67 
                                         f32 %502 = OpExtInst %1 40 %501 %86 
                                                      OpStore %67 %502 
                                         f32 %503 = OpLoad %67 
                                Uniform f32* %504 = OpAccessChain %20 %45 %87 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpFMul %503 %505 
                                Uniform f32* %507 = OpAccessChain %20 %45 %81 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpFAdd %506 %508 
                                                      OpStore %67 %509 
                                         f32 %510 = OpLoad %67 
                                         f32 %511 = OpExtInst %1 43 %510 %86 %110 
                                                      OpStore %67 %511 
                                       f32_4 %514 = OpLoad %9 
                                       f32_3 %515 = OpVectorShuffle %514 %514 0 1 2 
                                         f32 %516 = OpLoad %67 
                                       f32_3 %517 = OpCompositeConstruct %516 %516 %516 
                                       f32_3 %518 = OpFMul %515 %517 
                                       f32_4 %519 = OpLoad %513 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %513 %520 
                         read_only Texture2D %522 = OpLoad %521 
                                     sampler %524 = OpLoad %523 
                  read_only Texture2DSampled %525 = OpSampledImage %522 %524 
                                       f32_2 %527 = OpLoad vs_TEXCOORD3 
                                       f32_4 %528 = OpImageSampleImplicitLod %525 %527 
                                         f32 %529 = OpCompositeExtract %528 3 
                                Private f32* %530 = OpAccessChain %9 %96 
                                                      OpStore %530 %529 
                                Private f32* %531 = OpAccessChain %9 %96 
                                         f32 %532 = OpLoad %531 
                                Uniform f32* %534 = OpAccessChain %20 %533 %81 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpFMul %532 %535 
                                Private f32* %537 = OpAccessChain %156 %81 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpFAdd %536 %538 
                                 Output f32* %541 = OpAccessChain %513 %81 
                                                      OpStore %541 %539 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat7;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat1.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat2.zz + u_xlat1.xy;
    u_xlat7.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat1.xy = (-u_xlat1.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat7.xy;
    u_xlat1.xy = u_xlat1.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat1.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  samplerCube _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
float u_xlat13;
bool u_xlatb13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat19 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = max(u_xlat13, 0.00200000009);
    u_xlat8.x = u_xlat13 * u_xlat13;
    u_xlat14 = u_xlat18 * u_xlat8.x + (-u_xlat18);
    u_xlat18 = u_xlat14 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat8.x = u_xlat8.x * 0.318309873;
    u_xlat18 = u_xlat8.x / u_xlat18;
    u_xlat8.x = (-u_xlat13) + 1.0;
    u_xlat14 = abs(u_xlat1.x) * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
    u_xlat13 = u_xlat13 * abs(u_xlat1.x);
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
    u_xlat13 = u_xlat13 + 9.99999975e-06;
    u_xlat13 = 0.5 / u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat3 = u_xlat3 * _Color;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat19 * u_xlat19;
    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
    u_xlat7 = u_xlat7 + -0.5;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat2.x * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
    u_xlat18 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat0 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    SV_Target0.w = u_xlat0.w * _RedDotColor.w + u_xlat3.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 326
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %95 %151 %226 %232 %233 %246 %274 %311 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 95 
                                                      OpDecorate vs_TEXCOORD2 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 226 
                                                      OpDecorate vs_TEXCOORD0 Location 232 
                                                      OpDecorate %233 Location 233 
                                                      OpDecorate %246 Location 246 
                                                      OpDecorate vs_TEXCOORD1 Location 274 
                                                      OpDecorate vs_TEXCOORD4 Location 311 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeStruct %14 %17 %18 %19 %20 %6 %6 %6 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                               Private f32_4* %46 = OpVariable Private 
                                          i32 %48 = OpConstant 3 
                               Private f32_4* %59 = OpVariable Private 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %92 = OpTypePointer Output %7 
                                              %94 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                          u32 %96 = OpConstant 2 
                                              %97 = OpTypePointer Private %6 
                                             %144 = OpTypePointer Uniform %14 
                                             %150 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %154 = OpTypeVector %6 2 
                                             %185 = OpTypePointer Private %154 
                              Private f32_2* %186 = OpVariable Private 
                                         i32 %189 = OpConstant 7 
                                             %190 = OpTypePointer Uniform %6 
                                         i32 %193 = OpConstant 8 
                                         i32 %202 = OpConstant 6 
                                         i32 %218 = OpConstant 5 
                                             %225 = OpTypePointer Output %154 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_2 %230 = OpConstantComposite %229 %229 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %233 = OpVariable Input 
                                         i32 %236 = OpConstant 9 
                                             %245 = OpTypePointer Input %14 
                                Input f32_3* %246 = OpVariable Input 
                                         u32 %252 = OpConstant 0 
                                Private f32* %266 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %282 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %23 %25 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %31 = OpAccessChain %23 %25 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpLoad %11 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
                                        f32_4 %35 = OpFMul %32 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %23 %25 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_4 %41 = OpLoad %11 
                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
                                        f32_4 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_4 %47 = OpLoad %9 
                               Uniform f32_4* %49 = OpAccessChain %23 %25 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_4 %51 = OpFAdd %47 %50 
                                                      OpStore %46 %51 
                               Uniform f32_4* %52 = OpAccessChain %23 %25 %48 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %9 %58 
                                        f32_4 %60 = OpLoad %46 
                                        f32_4 %61 = OpVectorShuffle %60 %60 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %23 %48 %25 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %61 %63 
                                                      OpStore %59 %64 
                               Uniform f32_4* %65 = OpAccessChain %23 %48 %30 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %46 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %48 %38 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %46 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %59 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %59 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %48 %48 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %46 
                                        f32_4 %82 = OpVectorShuffle %81 %81 3 3 3 3 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %59 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %46 %85 
                                        f32_4 %91 = OpLoad %46 
                                Output f32_4* %93 = OpAccessChain %90 %30 
                                                      OpStore %93 %91 
                                 Private f32* %98 = OpAccessChain %46 %96 
                                          f32 %99 = OpLoad %98 
                                                      OpStore vs_TEXCOORD5 %99 
                                       f32_4 %100 = OpLoad %11 
                                       f32_3 %101 = OpVectorShuffle %100 %100 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %25 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFMul %101 %104 
                                       f32_4 %106 = OpLoad %46 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %46 %107 
                              Uniform f32_4* %108 = OpAccessChain %23 %25 %30 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_4 %111 = OpLoad %11 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %46 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFAdd %113 %115 
                                       f32_4 %117 = OpLoad %46 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %46 %118 
                              Uniform f32_4* %119 = OpAccessChain %23 %25 %38 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %11 
                                       f32_3 %123 = OpVectorShuffle %122 %122 2 2 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %46 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %46 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %46 %129 
                              Uniform f32_4* %130 = OpAccessChain %23 %25 %48 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %11 
                                       f32_3 %134 = OpVectorShuffle %133 %133 3 3 3 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %46 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %46 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %46 %140 
                                       f32_4 %141 = OpLoad %46 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %23 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                       f32_4 %148 = OpLoad %59 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %59 %149 
                                       f32_4 %152 = OpLoad %46 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD2 %153 
                                       f32_4 %155 = OpLoad %59 
                                       f32_2 %156 = OpVectorShuffle %155 %155 1 1 
                              Uniform f32_4* %157 = OpAccessChain %23 %38 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %160 = OpFMul %156 %159 
                                       f32_4 %161 = OpLoad %46 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 2 3 
                                                      OpStore %46 %162 
                              Uniform f32_4* %163 = OpAccessChain %23 %38 %30 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_4 %166 = OpLoad %59 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 0 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %46 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %46 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %46 %173 
                              Uniform f32_4* %174 = OpAccessChain %23 %38 %38 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_4 %177 = OpLoad %59 
                                       f32_2 %178 = OpVectorShuffle %177 %177 2 2 
                                       f32_2 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %46 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad %46 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore %46 %184 
                                       f32_4 %187 = OpLoad %11 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 1 
                                Uniform f32* %191 = OpAccessChain %23 %189 
                                         f32 %192 = OpLoad %191 
                                Uniform f32* %194 = OpAccessChain %23 %193 
                                         f32 %195 = OpLoad %194 
                                       f32_2 %196 = OpCompositeConstruct %192 %195 
                                       f32_2 %197 = OpFNegate %196 
                                       f32_2 %198 = OpFAdd %188 %197 
                                                      OpStore %186 %198 
                                       f32_4 %199 = OpLoad %46 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFNegate %200 
                                Uniform f32* %203 = OpAccessChain %23 %202 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %205 = OpAccessChain %23 %202 
                                         f32 %206 = OpLoad %205 
                                       f32_2 %207 = OpCompositeConstruct %204 %206 
                                         f32 %208 = OpCompositeExtract %207 0 
                                         f32 %209 = OpCompositeExtract %207 1 
                                       f32_2 %210 = OpCompositeConstruct %208 %209 
                                       f32_2 %211 = OpFMul %201 %210 
                                       f32_2 %212 = OpLoad %186 
                                       f32_2 %213 = OpFAdd %211 %212 
                                       f32_4 %214 = OpLoad %46 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %46 %215 
                                       f32_4 %216 = OpLoad %46 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                Uniform f32* %219 = OpAccessChain %23 %218 
                                         f32 %220 = OpLoad %219 
                                       f32_2 %221 = OpCompositeConstruct %220 %220 
                                       f32_2 %222 = OpFDiv %217 %221 
                                       f32_4 %223 = OpLoad %46 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 2 3 
                                                      OpStore %46 %224 
                                       f32_4 %227 = OpLoad %46 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                                       f32_2 %231 = OpFAdd %228 %230 
                                                      OpStore vs_TEXCOORD3 %231 
                                       f32_4 %234 = OpLoad %233 
                                       f32_2 %235 = OpVectorShuffle %234 %234 0 1 
                              Uniform f32_4* %237 = OpAccessChain %23 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                                       f32_2 %240 = OpFMul %235 %239 
                              Uniform f32_4* %241 = OpAccessChain %23 %236 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 2 3 
                                       f32_2 %244 = OpFAdd %240 %243 
                                                      OpStore vs_TEXCOORD0 %244 
                                       f32_3 %247 = OpLoad %246 
                              Uniform f32_4* %248 = OpAccessChain %23 %38 %30 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                         f32 %251 = OpDot %247 %250 
                                Private f32* %253 = OpAccessChain %46 %252 
                                                      OpStore %253 %251 
                                       f32_3 %254 = OpLoad %246 
                              Uniform f32_4* %255 = OpAccessChain %23 %38 %25 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %259 = OpAccessChain %46 %86 
                                                      OpStore %259 %258 
                                       f32_3 %260 = OpLoad %246 
                              Uniform f32_4* %261 = OpAccessChain %23 %38 %38 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %260 %263 
                                Private f32* %265 = OpAccessChain %46 %96 
                                                      OpStore %265 %264 
                                       f32_4 %267 = OpLoad %46 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %46 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                         f32 %271 = OpDot %268 %270 
                                                      OpStore %266 %271 
                                         f32 %272 = OpLoad %266 
                                         f32 %273 = OpExtInst %1 32 %272 
                                                      OpStore %266 %273 
                                         f32 %275 = OpLoad %266 
                                       f32_3 %276 = OpCompositeConstruct %275 %275 %275 
                                       f32_4 %277 = OpLoad %46 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                                      OpStore vs_TEXCOORD1 %279 
                                       f32_4 %280 = OpLoad %9 
                                       f32_3 %281 = OpVectorShuffle %280 %280 1 1 1 
                              Uniform f32_4* %283 = OpAccessChain %23 %282 %25 
                                       f32_4 %284 = OpLoad %283 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpFMul %281 %285 
                                       f32_4 %287 = OpLoad %46 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %46 %288 
                              Uniform f32_4* %289 = OpAccessChain %23 %282 %30 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_4 %292 = OpLoad %9 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 0 0 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_4 %295 = OpLoad %46 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFAdd %294 %296 
                                       f32_4 %298 = OpLoad %46 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %46 %299 
                              Uniform f32_4* %300 = OpAccessChain %23 %282 %38 
                                       f32_4 %301 = OpLoad %300 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %9 
                                       f32_3 %304 = OpVectorShuffle %303 %303 2 2 2 
                                       f32_3 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %46 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFAdd %305 %307 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %9 %310 
                              Uniform f32_4* %312 = OpAccessChain %23 %282 %48 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 3 3 3 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %9 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %317 %319 
                                                      OpStore vs_TEXCOORD4 %320 
                                 Output f32* %321 = OpAccessChain %90 %30 %86 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                 Output f32* %324 = OpAccessChain %90 %30 %86 
                                                      OpStore %324 %323 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 514
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %159 %302 %459 %485 %497 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %77 DescriptorSet 77 
                                                      OpDecorate %77 Binding 77 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate vs_TEXCOORD1 Location 159 
                                                      OpDecorate %296 DescriptorSet 296 
                                                      OpDecorate %296 Binding 296 
                                                      OpDecorate %298 DescriptorSet 298 
                                                      OpDecorate %298 Binding 298 
                                                      OpDecorate vs_TEXCOORD0 Location 302 
                                                      OpDecorate vs_TEXCOORD5 Location 459 
                                                      OpDecorate %485 Location 485 
                                                      OpDecorate %492 DescriptorSet 492 
                                                      OpDecorate %492 Binding 492 
                                                      OpDecorate %494 DescriptorSet 494 
                                                      OpDecorate %494 Binding 494 
                                                      OpDecorate vs_TEXCOORD3 Location 497 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %14 %14 %17 %6 %6 %14 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 5 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %14 
                                          i32 %29 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                                          i32 %48 = OpConstant 3 
                                              %53 = OpTypePointer Private %6 
                                 Private f32* %54 = OpVariable Private 
                                              %58 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                              %59 = OpTypePointer UniformConstant %58 
       UniformConstant read_only TextureCube* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeSampler 
                                              %63 = OpTypePointer UniformConstant %62 
                     UniformConstant sampler* %64 = OpVariable UniformConstant 
                                              %66 = OpTypeSampledImage %58 
                                          u32 %70 = OpConstant 3 
                                          u32 %72 = OpConstant 0 
                                 Private f32* %74 = OpVariable Private 
                                              %75 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %76 = OpTypePointer UniformConstant %75 
         UniformConstant read_only Texture2D* %77 = OpVariable UniformConstant 
                     UniformConstant sampler* %79 = OpVariable UniformConstant 
                                              %81 = OpTypeSampledImage %75 
                                              %84 = OpTypeVector %6 2 
                                          i32 %95 = OpConstant 4 
                              Private f32_3* %100 = OpVariable Private 
                                             %103 = OpTypePointer Uniform %7 
                              Private f32_3* %116 = OpVariable Private 
                                             %128 = OpTypePointer Private %14 
                              Private f32_4* %129 = OpVariable Private 
                                         f32 %148 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %165 = OpVariable Private 
                                         f32 %175 = OpConstant 3.674022E-40 
                                         f32 %176 = OpConstant 3.674022E-40 
                                Private f32* %178 = OpVariable Private 
                                Private f32* %197 = OpVariable Private 
                                         i32 %198 = OpConstant 6 
                                             %199 = OpTypePointer Uniform %6 
                                Private f32* %204 = OpVariable Private 
                                         f32 %209 = OpConstant 3.674022E-40 
                              Private f32_3* %211 = OpVariable Private 
                                Private f32* %216 = OpVariable Private 
                                         f32 %231 = OpConstant 3.674022E-40 
                                         f32 %235 = OpConstant 3.674022E-40 
                                         f32 %279 = OpConstant 3.674022E-40 
                                         f32 %281 = OpConstant 3.674022E-40 
                                         f32 %292 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %296 = OpVariable UniformConstant 
                    UniformConstant sampler* %298 = OpVariable UniformConstant 
                                             %301 = OpTypePointer Input %84 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %307 = OpConstant 8 
                                         f32 %312 = OpConstant 3.674022E-40 
                                       f32_3 %313 = OpConstantComposite %312 %312 %312 
                                         i32 %319 = OpConstant 7 
                                         f32 %333 = OpConstant 3.674022E-40 
                                       f32_3 %334 = OpConstantComposite %333 %333 %333 
                                             %339 = OpTypeBool 
                                             %340 = OpTypePointer Private %339 
                               Private bool* %341 = OpVariable Private 
                                         f32 %365 = OpConstant 3.674022E-40 
                              Private f32_3* %376 = OpVariable Private 
                                       f32_3 %379 = OpConstantComposite %176 %176 %176 
                                         f32 %445 = OpConstant 3.674022E-40 
                                             %458 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %461 = OpConstant 1 
                                         u32 %469 = OpConstant 2 
                                             %484 = OpTypePointer Output %14 
                               Output f32_4* %485 = OpVariable Output 
        UniformConstant read_only Texture2D* %492 = OpVariable UniformConstant 
                    UniformConstant sampler* %494 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                         i32 %504 = OpConstant 9 
                                             %511 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_3 %33 = OpLoad vs_TEXCOORD2 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpFMul %32 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %20 %22 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpLoad vs_TEXCOORD2 
                                        f32_3 %43 = OpVectorShuffle %42 %42 2 2 2 
                                        f32_3 %44 = OpFMul %41 %43 
                                        f32_3 %45 = OpLoad %9 
                                        f32_3 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_3 %47 = OpLoad %9 
                               Uniform f32_4* %49 = OpAccessChain %20 %22 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
                                        f32_3 %52 = OpFAdd %47 %51 
                                                      OpStore %9 %52 
                                        f32_3 %55 = OpLoad %9 
                                        f32_3 %56 = OpLoad %9 
                                          f32 %57 = OpDot %55 %56 
                                                      OpStore %54 %57 
                        read_only TextureCube %61 = OpLoad %60 
                                      sampler %65 = OpLoad %64 
                 read_only TextureCubeSampled %67 = OpSampledImage %61 %65 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpImageSampleImplicitLod %67 %68 
                                          f32 %71 = OpCompositeExtract %69 3 
                                 Private f32* %73 = OpAccessChain %9 %72 
                                                      OpStore %73 %71 
                          read_only Texture2D %78 = OpLoad %77 
                                      sampler %80 = OpLoad %79 
                   read_only Texture2DSampled %82 = OpSampledImage %78 %80 
                                          f32 %83 = OpLoad %54 
                                        f32_2 %85 = OpCompositeConstruct %83 %83 
                                        f32_4 %86 = OpImageSampleImplicitLod %82 %85 
                                          f32 %87 = OpCompositeExtract %86 0 
                                                      OpStore %74 %87 
                                 Private f32* %88 = OpAccessChain %9 %72 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpLoad %74 
                                          f32 %91 = OpFMul %89 %90 
                                 Private f32* %92 = OpAccessChain %9 %72 
                                                      OpStore %92 %91 
                                        f32_3 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 0 0 
                               Uniform f32_4* %96 = OpAccessChain %20 %95 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFMul %94 %98 
                                                      OpStore %9 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD2 
                                       f32_3 %102 = OpFNegate %101 
                              Uniform f32_3* %104 = OpAccessChain %20 %29 
                                       f32_3 %105 = OpLoad %104 
                                       f32_3 %106 = OpFAdd %102 %105 
                                                      OpStore %100 %106 
                                       f32_3 %107 = OpLoad %100 
                                       f32_3 %108 = OpLoad %100 
                                         f32 %109 = OpDot %107 %108 
                                                      OpStore %54 %109 
                                         f32 %110 = OpLoad %54 
                                         f32 %111 = OpExtInst %1 32 %110 
                                                      OpStore %54 %111 
                                         f32 %112 = OpLoad %54 
                                       f32_3 %113 = OpCompositeConstruct %112 %112 %112 
                                       f32_3 %114 = OpLoad %100 
                                       f32_3 %115 = OpFMul %113 %114 
                                                      OpStore %100 %115 
                                       f32_3 %117 = OpLoad vs_TEXCOORD2 
                                       f32_3 %118 = OpFNegate %117 
                              Uniform f32_4* %119 = OpAccessChain %20 %38 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                                      OpStore %116 %122 
                                       f32_3 %123 = OpLoad %116 
                                       f32_3 %124 = OpLoad %116 
                                         f32 %125 = OpDot %123 %124 
                                                      OpStore %54 %125 
                                         f32 %126 = OpLoad %54 
                                         f32 %127 = OpExtInst %1 32 %126 
                                                      OpStore %54 %127 
                                       f32_3 %130 = OpLoad %116 
                                         f32 %131 = OpLoad %54 
                                       f32_3 %132 = OpCompositeConstruct %131 %131 %131 
                                       f32_3 %133 = OpFMul %130 %132 
                                       f32_3 %134 = OpLoad %100 
                                       f32_3 %135 = OpFAdd %133 %134 
                                       f32_4 %136 = OpLoad %129 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
                                                      OpStore %129 %137 
                                         f32 %138 = OpLoad %54 
                                       f32_3 %139 = OpCompositeConstruct %138 %138 %138 
                                       f32_3 %140 = OpLoad %116 
                                       f32_3 %141 = OpFMul %139 %140 
                                                      OpStore %116 %141 
                                       f32_4 %142 = OpLoad %129 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %129 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                         f32 %146 = OpDot %143 %145 
                                                      OpStore %54 %146 
                                         f32 %147 = OpLoad %54 
                                         f32 %149 = OpExtInst %1 40 %147 %148 
                                                      OpStore %54 %149 
                                         f32 %150 = OpLoad %54 
                                         f32 %151 = OpExtInst %1 32 %150 
                                                      OpStore %54 %151 
                                         f32 %152 = OpLoad %54 
                                       f32_3 %153 = OpCompositeConstruct %152 %152 %152 
                                       f32_4 %154 = OpLoad %129 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %153 %155 
                                       f32_4 %157 = OpLoad %129 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %129 %158 
                                       f32_3 %160 = OpLoad vs_TEXCOORD1 
                                       f32_3 %161 = OpLoad vs_TEXCOORD1 
                                         f32 %162 = OpDot %160 %161 
                                                      OpStore %54 %162 
                                         f32 %163 = OpLoad %54 
                                         f32 %164 = OpExtInst %1 32 %163 
                                                      OpStore %54 %164 
                                         f32 %166 = OpLoad %54 
                                       f32_3 %167 = OpCompositeConstruct %166 %166 %166 
                                       f32_3 %168 = OpLoad vs_TEXCOORD1 
                                       f32_3 %169 = OpFMul %167 %168 
                                                      OpStore %165 %169 
                                       f32_3 %170 = OpLoad %165 
                                       f32_4 %171 = OpLoad %129 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %170 %172 
                                                      OpStore %54 %173 
                                         f32 %174 = OpLoad %54 
                                         f32 %177 = OpExtInst %1 43 %174 %175 %176 
                                                      OpStore %54 %177 
                                       f32_3 %179 = OpLoad %116 
                                       f32_4 %180 = OpLoad %129 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                         f32 %182 = OpDot %179 %181 
                                                      OpStore %178 %182 
                                         f32 %183 = OpLoad %178 
                                         f32 %184 = OpExtInst %1 43 %183 %175 %176 
                                                      OpStore %178 %184 
                                       f32_3 %185 = OpLoad %165 
                                       f32_3 %186 = OpLoad %116 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %116 %72 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %116 %72 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpExtInst %1 43 %190 %175 %176 
                                Private f32* %192 = OpAccessChain %116 %72 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %165 
                                       f32_3 %194 = OpLoad %100 
                                         f32 %195 = OpDot %193 %194 
                                Private f32* %196 = OpAccessChain %100 %72 
                                                      OpStore %196 %195 
                                Uniform f32* %200 = OpAccessChain %20 %198 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFNegate %201 
                                         f32 %203 = OpFAdd %202 %176 
                                                      OpStore %197 %203 
                                         f32 %205 = OpLoad %197 
                                         f32 %206 = OpLoad %197 
                                         f32 %207 = OpFMul %205 %206 
                                                      OpStore %204 %207 
                                         f32 %208 = OpLoad %204 
                                         f32 %210 = OpExtInst %1 40 %208 %209 
                                                      OpStore %204 %210 
                                         f32 %212 = OpLoad %204 
                                         f32 %213 = OpLoad %204 
                                         f32 %214 = OpFMul %212 %213 
                                Private f32* %215 = OpAccessChain %211 %72 
                                                      OpStore %215 %214 
                                         f32 %217 = OpLoad %54 
                                Private f32* %218 = OpAccessChain %211 %72 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %217 %219 
                                         f32 %221 = OpLoad %54 
                                         f32 %222 = OpFNegate %221 
                                         f32 %223 = OpFAdd %220 %222 
                                                      OpStore %216 %223 
                                         f32 %224 = OpLoad %216 
                                         f32 %225 = OpLoad %54 
                                         f32 %226 = OpFMul %224 %225 
                                         f32 %227 = OpFAdd %226 %176 
                                                      OpStore %54 %227 
                                         f32 %228 = OpLoad %54 
                                         f32 %229 = OpLoad %54 
                                         f32 %230 = OpFMul %228 %229 
                                         f32 %232 = OpFAdd %230 %231 
                                                      OpStore %54 %232 
                                Private f32* %233 = OpAccessChain %211 %72 
                                         f32 %234 = OpLoad %233 
                                         f32 %236 = OpFMul %234 %235 
                                Private f32* %237 = OpAccessChain %211 %72 
                                                      OpStore %237 %236 
                                Private f32* %238 = OpAccessChain %211 %72 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpLoad %54 
                                         f32 %241 = OpFDiv %239 %240 
                                                      OpStore %54 %241 
                                         f32 %242 = OpLoad %204 
                                         f32 %243 = OpFNegate %242 
                                         f32 %244 = OpFAdd %243 %176 
                                Private f32* %245 = OpAccessChain %211 %72 
                                                      OpStore %245 %244 
                                Private f32* %246 = OpAccessChain %100 %72 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpExtInst %1 4 %247 
                                Private f32* %249 = OpAccessChain %211 %72 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFMul %248 %250 
                                         f32 %252 = OpLoad %204 
                                         f32 %253 = OpFAdd %251 %252 
                                                      OpStore %216 %253 
                                Private f32* %254 = OpAccessChain %116 %72 
                                         f32 %255 = OpLoad %254 
                                Private f32* %256 = OpAccessChain %211 %72 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                         f32 %259 = OpLoad %204 
                                         f32 %260 = OpFAdd %258 %259 
                                                      OpStore %204 %260 
                                         f32 %261 = OpLoad %204 
                                Private f32* %262 = OpAccessChain %100 %72 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpExtInst %1 4 %263 
                                         f32 %265 = OpFMul %261 %264 
                                                      OpStore %204 %265 
                                Private f32* %266 = OpAccessChain %100 %72 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpExtInst %1 4 %267 
                                         f32 %269 = OpFNegate %268 
                                         f32 %270 = OpFAdd %269 %176 
                                Private f32* %271 = OpAccessChain %100 %72 
                                                      OpStore %271 %270 
                                Private f32* %272 = OpAccessChain %116 %72 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpLoad %216 
                                         f32 %275 = OpFMul %273 %274 
                                         f32 %276 = OpLoad %204 
                                         f32 %277 = OpFAdd %275 %276 
                                                      OpStore %204 %277 
                                         f32 %278 = OpLoad %204 
                                         f32 %280 = OpFAdd %278 %279 
                                                      OpStore %204 %280 
                                         f32 %282 = OpLoad %204 
                                         f32 %283 = OpFDiv %281 %282 
                                                      OpStore %204 %283 
                                         f32 %284 = OpLoad %54 
                                         f32 %285 = OpLoad %204 
                                         f32 %286 = OpFMul %284 %285 
                                                      OpStore %54 %286 
                                Private f32* %287 = OpAccessChain %116 %72 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpLoad %54 
                                         f32 %290 = OpFMul %288 %289 
                                                      OpStore %54 %290 
                                         f32 %291 = OpLoad %54 
                                         f32 %293 = OpFMul %291 %292 
                                                      OpStore %54 %293 
                                         f32 %294 = OpLoad %54 
                                         f32 %295 = OpExtInst %1 40 %294 %175 
                                                      OpStore %54 %295 
                         read_only Texture2D %297 = OpLoad %296 
                                     sampler %299 = OpLoad %298 
                  read_only Texture2DSampled %300 = OpSampledImage %297 %299 
                                       f32_2 %303 = OpLoad vs_TEXCOORD0 
                                       f32_4 %304 = OpImageSampleImplicitLod %300 %303 
                                                      OpStore %129 %304 
                                       f32_4 %305 = OpLoad %129 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                              Uniform f32_4* %308 = OpAccessChain %20 %307 
                                       f32_4 %309 = OpLoad %308 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %311 = OpFMul %306 %310 
                                       f32_3 %314 = OpFAdd %311 %313 
                                                      OpStore %211 %314 
                                       f32_4 %315 = OpLoad %129 
                              Uniform f32_4* %316 = OpAccessChain %20 %307 
                                       f32_4 %317 = OpLoad %316 
                                       f32_4 %318 = OpFMul %315 %317 
                                                      OpStore %129 %318 
                                Uniform f32* %320 = OpAccessChain %20 %319 
                                         f32 %321 = OpLoad %320 
                                Uniform f32* %322 = OpAccessChain %20 %319 
                                         f32 %323 = OpLoad %322 
                                Uniform f32* %324 = OpAccessChain %20 %319 
                                         f32 %325 = OpLoad %324 
                                       f32_3 %326 = OpCompositeConstruct %321 %323 %325 
                                         f32 %327 = OpCompositeExtract %326 0 
                                         f32 %328 = OpCompositeExtract %326 1 
                                         f32 %329 = OpCompositeExtract %326 2 
                                       f32_3 %330 = OpCompositeConstruct %327 %328 %329 
                                       f32_3 %331 = OpLoad %211 
                                       f32_3 %332 = OpFMul %330 %331 
                                       f32_3 %335 = OpFAdd %332 %334 
                                                      OpStore %211 %335 
                                       f32_3 %336 = OpLoad %211 
                                       f32_3 %337 = OpLoad %211 
                                         f32 %338 = OpDot %336 %337 
                                                      OpStore %204 %338 
                                         f32 %342 = OpLoad %204 
                                        bool %343 = OpFOrdNotEqual %342 %175 
                                                      OpStore %341 %343 
                                        bool %344 = OpLoad %341 
                                         f32 %345 = OpSelect %344 %176 %175 
                                                      OpStore %204 %345 
                                         f32 %346 = OpLoad %54 
                                         f32 %347 = OpLoad %204 
                                         f32 %348 = OpFMul %346 %347 
                                                      OpStore %54 %348 
                                       f32_3 %349 = OpLoad %9 
                                         f32 %350 = OpLoad %54 
                                       f32_3 %351 = OpCompositeConstruct %350 %350 %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                                      OpStore %165 %352 
                                         f32 %353 = OpLoad %178 
                                         f32 %354 = OpFNegate %353 
                                         f32 %355 = OpFAdd %354 %176 
                                                      OpStore %54 %355 
                                         f32 %356 = OpLoad %178 
                                         f32 %357 = OpLoad %178 
                                         f32 %358 = OpFMul %356 %357 
                                                      OpStore %204 %358 
                                         f32 %359 = OpLoad %204 
                                       f32_2 %360 = OpCompositeConstruct %359 %359 
                                         f32 %361 = OpLoad %197 
                                       f32_2 %362 = OpCompositeConstruct %361 %361 
                                         f32 %363 = OpDot %360 %362 
                                                      OpStore %197 %363 
                                         f32 %364 = OpLoad %197 
                                         f32 %366 = OpFAdd %364 %365 
                                                      OpStore %197 %366 
                                         f32 %367 = OpLoad %54 
                                         f32 %368 = OpLoad %54 
                                         f32 %369 = OpFMul %367 %368 
                                                      OpStore %204 %369 
                                         f32 %370 = OpLoad %204 
                                         f32 %371 = OpLoad %204 
                                         f32 %372 = OpFMul %370 %371 
                                                      OpStore %204 %372 
                                         f32 %373 = OpLoad %54 
                                         f32 %374 = OpLoad %204 
                                         f32 %375 = OpFMul %373 %374 
                                                      OpStore %54 %375 
                                       f32_3 %377 = OpLoad %211 
                                       f32_3 %378 = OpFNegate %377 
                                       f32_3 %380 = OpFAdd %378 %379 
                                                      OpStore %376 %380 
                                       f32_3 %381 = OpLoad %376 
                                         f32 %382 = OpLoad %54 
                                       f32_3 %383 = OpCompositeConstruct %382 %382 %382 
                                       f32_3 %384 = OpFMul %381 %383 
                                       f32_3 %385 = OpLoad %211 
                                       f32_3 %386 = OpFAdd %384 %385 
                                                      OpStore %211 %386 
                                       f32_3 %387 = OpLoad %211 
                                       f32_3 %388 = OpLoad %165 
                                       f32_3 %389 = OpFMul %387 %388 
                                                      OpStore %211 %389 
                                Private f32* %390 = OpAccessChain %100 %72 
                                         f32 %391 = OpLoad %390 
                                Private f32* %392 = OpAccessChain %100 %72 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                                      OpStore %54 %394 
                                         f32 %395 = OpLoad %54 
                                         f32 %396 = OpLoad %54 
                                         f32 %397 = OpFMul %395 %396 
                                                      OpStore %54 %397 
                                Private f32* %398 = OpAccessChain %100 %72 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpLoad %54 
                                         f32 %401 = OpFMul %399 %400 
                                                      OpStore %54 %401 
                                         f32 %402 = OpLoad %197 
                                         f32 %403 = OpLoad %54 
                                         f32 %404 = OpFMul %402 %403 
                                         f32 %405 = OpFAdd %404 %176 
                                                      OpStore %54 %405 
                                Private f32* %406 = OpAccessChain %116 %72 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpFNegate %407 
                                         f32 %409 = OpFAdd %408 %176 
                                Private f32* %410 = OpAccessChain %100 %72 
                                                      OpStore %410 %409 
                                Private f32* %411 = OpAccessChain %100 %72 
                                         f32 %412 = OpLoad %411 
                                Private f32* %413 = OpAccessChain %100 %72 
                                         f32 %414 = OpLoad %413 
                                         f32 %415 = OpFMul %412 %414 
                                                      OpStore %204 %415 
                                         f32 %416 = OpLoad %204 
                                         f32 %417 = OpLoad %204 
                                         f32 %418 = OpFMul %416 %417 
                                                      OpStore %204 %418 
                                Private f32* %419 = OpAccessChain %100 %72 
                                         f32 %420 = OpLoad %419 
                                         f32 %421 = OpLoad %204 
                                         f32 %422 = OpFMul %420 %421 
                                Private f32* %423 = OpAccessChain %100 %72 
                                                      OpStore %423 %422 
                                         f32 %424 = OpLoad %197 
                                Private f32* %425 = OpAccessChain %100 %72 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFMul %424 %426 
                                         f32 %428 = OpFAdd %427 %176 
                                Private f32* %429 = OpAccessChain %100 %72 
                                                      OpStore %429 %428 
                                         f32 %430 = OpLoad %54 
                                Private f32* %431 = OpAccessChain %100 %72 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFMul %430 %432 
                                                      OpStore %54 %433 
                                Private f32* %434 = OpAccessChain %116 %72 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpLoad %54 
                                         f32 %437 = OpFMul %435 %436 
                                                      OpStore %54 %437 
                                         f32 %438 = OpLoad %54 
                                       f32_3 %439 = OpCompositeConstruct %438 %438 %438 
                                       f32_3 %440 = OpLoad %9 
                                       f32_3 %441 = OpFMul %439 %440 
                                                      OpStore %9 %441 
                                Uniform f32* %442 = OpAccessChain %20 %319 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFNegate %443 
                                         f32 %446 = OpFMul %444 %445 
                                         f32 %447 = OpFAdd %446 %445 
                                                      OpStore %54 %447 
                                         f32 %448 = OpLoad %54 
                                       f32_3 %449 = OpCompositeConstruct %448 %448 %448 
                                       f32_4 %450 = OpLoad %129 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 1 2 
                                       f32_3 %452 = OpFMul %449 %451 
                                                      OpStore %100 %452 
                                       f32_3 %453 = OpLoad %100 
                                       f32_3 %454 = OpLoad %9 
                                       f32_3 %455 = OpFMul %453 %454 
                                       f32_3 %456 = OpLoad %211 
                                       f32_3 %457 = OpFAdd %455 %456 
                                                      OpStore %9 %457 
                                         f32 %460 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %462 = OpAccessChain %20 %23 %461 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpFDiv %460 %463 
                                                      OpStore %54 %464 
                                         f32 %465 = OpLoad %54 
                                         f32 %466 = OpFNegate %465 
                                         f32 %467 = OpFAdd %466 %176 
                                                      OpStore %54 %467 
                                         f32 %468 = OpLoad %54 
                                Uniform f32* %470 = OpAccessChain %20 %23 %469 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFMul %468 %471 
                                                      OpStore %54 %472 
                                         f32 %473 = OpLoad %54 
                                         f32 %474 = OpExtInst %1 40 %473 %175 
                                                      OpStore %54 %474 
                                         f32 %475 = OpLoad %54 
                                Uniform f32* %476 = OpAccessChain %20 %48 %469 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpFMul %475 %477 
                                Uniform f32* %479 = OpAccessChain %20 %48 %70 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFAdd %478 %480 
                                                      OpStore %54 %481 
                                         f32 %482 = OpLoad %54 
                                         f32 %483 = OpExtInst %1 43 %482 %175 %176 
                                                      OpStore %54 %483 
                                       f32_3 %486 = OpLoad %9 
                                         f32 %487 = OpLoad %54 
                                       f32_3 %488 = OpCompositeConstruct %487 %487 %487 
                                       f32_3 %489 = OpFMul %486 %488 
                                       f32_4 %490 = OpLoad %485 
                                       f32_4 %491 = OpVectorShuffle %490 %489 4 5 6 3 
                                                      OpStore %485 %491 
                         read_only Texture2D %493 = OpLoad %492 
                                     sampler %495 = OpLoad %494 
                  read_only Texture2DSampled %496 = OpSampledImage %493 %495 
                                       f32_2 %498 = OpLoad vs_TEXCOORD3 
                                       f32_4 %499 = OpImageSampleImplicitLod %496 %498 
                                         f32 %500 = OpCompositeExtract %499 3 
                                Private f32* %501 = OpAccessChain %9 %72 
                                                      OpStore %501 %500 
                                Private f32* %502 = OpAccessChain %9 %72 
                                         f32 %503 = OpLoad %502 
                                Uniform f32* %505 = OpAccessChain %20 %504 %70 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %503 %506 
                                Private f32* %508 = OpAccessChain %129 %70 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpFAdd %507 %509 
                                 Output f32* %512 = OpAccessChain %485 %70 
                                                      OpStore %512 %510 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _RedDotSize;
uniform 	float _RedDotDist;
uniform 	float _OffsetX;
uniform 	float _OffsetY;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec2 vs_TEXCOORD4;
out float vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat7;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat1.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToObject[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[0].xy * u_xlat2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToObject[2].xy * u_xlat2.zz + u_xlat1.xy;
    u_xlat7.xy = in_POSITION0.xy + (-vec2(_OffsetX, _OffsetY));
    u_xlat1.xy = (-u_xlat1.xy) * vec2(vec2(_RedDotDist, _RedDotDist)) + u_xlat7.xy;
    u_xlat1.xy = u_xlat1.xy / vec2(_RedDotSize);
    vs_TEXCOORD3.xy = u_xlat1.xy + vec2(0.5, 0.5);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Glossiness;
uniform 	float _Metallic;
uniform 	vec4 _Color;
uniform 	vec4 _RedDotColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _RedDotTex;
UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  float vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat12;
vec2 u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = (-_Glossiness) + 1.0;
    u_xlat13.x = u_xlat7 * u_xlat7;
    u_xlat13.x = max(u_xlat13.x, 0.00200000009);
    u_xlat19 = u_xlat13.x * u_xlat13.x;
    u_xlat20 = u_xlat18 * u_xlat19 + (-u_xlat18);
    u_xlat18 = u_xlat20 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat19 = u_xlat19 * 0.318309873;
    u_xlat18 = u_xlat19 / u_xlat18;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat12 = (-u_xlat13.x) + 1.0;
    u_xlat19 = abs(u_xlat0.x) * u_xlat12 + u_xlat13.x;
    u_xlat12 = u_xlat6 * u_xlat12 + u_xlat13.x;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat19 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat6 * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2 = u_xlat2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat13.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat13.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat13.xy;
    u_xlat13.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat13.xy;
    u_xlat13.xy = u_xlat13.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4 = texture(_LightTexture0, u_xlat13.xy);
    u_xlat4.xyz = u_xlat4.www * _LightColor0.xyz;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = dot(vec2(u_xlat18), vec2(u_xlat7));
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
    u_xlat12 = u_xlat0.x * u_xlat0.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat18 * u_xlat0.x + 1.0;
    u_xlat12 = (-u_xlat6) + 1.0;
    u_xlat19 = u_xlat12 * u_xlat12;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat12 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat18 = (-_Metallic) * 0.959999979 + 0.959999979;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat0 = texture(_RedDotTex, vs_TEXCOORD3.xy);
    SV_Target0.w = u_xlat0.w * _RedDotColor.w + u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 326
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %95 %151 %226 %232 %233 %246 %274 %311 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 95 
                                                      OpDecorate vs_TEXCOORD2 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 226 
                                                      OpDecorate vs_TEXCOORD0 Location 232 
                                                      OpDecorate %233 Location 233 
                                                      OpDecorate %246 Location 246 
                                                      OpDecorate vs_TEXCOORD1 Location 274 
                                                      OpDecorate vs_TEXCOORD4 Location 311 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeStruct %14 %17 %18 %19 %20 %6 %6 %6 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %38 = OpConstant 2 
                               Private f32_4* %46 = OpVariable Private 
                                          i32 %48 = OpConstant 3 
                               Private f32_4* %59 = OpVariable Private 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %92 = OpTypePointer Output %7 
                                              %94 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                          u32 %96 = OpConstant 2 
                                              %97 = OpTypePointer Private %6 
                                             %144 = OpTypePointer Uniform %14 
                                             %150 = OpTypePointer Output %14 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %154 = OpTypeVector %6 2 
                                             %185 = OpTypePointer Private %154 
                              Private f32_2* %186 = OpVariable Private 
                                         i32 %189 = OpConstant 7 
                                             %190 = OpTypePointer Uniform %6 
                                         i32 %193 = OpConstant 8 
                                         i32 %202 = OpConstant 6 
                                         i32 %218 = OpConstant 5 
                                             %225 = OpTypePointer Output %154 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_2 %230 = OpConstantComposite %229 %229 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %233 = OpVariable Input 
                                         i32 %236 = OpConstant 9 
                                             %245 = OpTypePointer Input %14 
                                Input f32_3* %246 = OpVariable Input 
                                         u32 %252 = OpConstant 0 
                                Private f32* %266 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %282 = OpConstant 4 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %23 %25 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %31 = OpAccessChain %23 %25 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpLoad %11 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
                                        f32_4 %35 = OpFMul %32 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %39 = OpAccessChain %23 %25 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_4 %41 = OpLoad %11 
                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
                                        f32_4 %43 = OpFMul %40 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_4 %47 = OpLoad %9 
                               Uniform f32_4* %49 = OpAccessChain %23 %25 %48 
                                        f32_4 %50 = OpLoad %49 
                                        f32_4 %51 = OpFAdd %47 %50 
                                                      OpStore %46 %51 
                               Uniform f32_4* %52 = OpAccessChain %23 %25 %48 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpLoad %11 
                                        f32_4 %55 = OpVectorShuffle %54 %54 3 3 3 3 
                                        f32_4 %56 = OpFMul %53 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpFAdd %56 %57 
                                                      OpStore %9 %58 
                                        f32_4 %60 = OpLoad %46 
                                        f32_4 %61 = OpVectorShuffle %60 %60 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %23 %48 %25 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %61 %63 
                                                      OpStore %59 %64 
                               Uniform f32_4* %65 = OpAccessChain %23 %48 %30 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %46 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %59 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %59 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %48 %38 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %46 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %59 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %59 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %48 %48 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %46 
                                        f32_4 %82 = OpVectorShuffle %81 %81 3 3 3 3 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %59 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %46 %85 
                                        f32_4 %91 = OpLoad %46 
                                Output f32_4* %93 = OpAccessChain %90 %30 
                                                      OpStore %93 %91 
                                 Private f32* %98 = OpAccessChain %46 %96 
                                          f32 %99 = OpLoad %98 
                                                      OpStore vs_TEXCOORD5 %99 
                                       f32_4 %100 = OpLoad %11 
                                       f32_3 %101 = OpVectorShuffle %100 %100 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %25 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFMul %101 %104 
                                       f32_4 %106 = OpLoad %46 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %46 %107 
                              Uniform f32_4* %108 = OpAccessChain %23 %25 %30 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_4 %111 = OpLoad %11 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %46 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFAdd %113 %115 
                                       f32_4 %117 = OpLoad %46 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %46 %118 
                              Uniform f32_4* %119 = OpAccessChain %23 %25 %38 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %11 
                                       f32_3 %123 = OpVectorShuffle %122 %122 2 2 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %46 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %46 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %46 %129 
                              Uniform f32_4* %130 = OpAccessChain %23 %25 %48 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %11 
                                       f32_3 %134 = OpVectorShuffle %133 %133 3 3 3 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %46 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %46 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %46 %140 
                                       f32_4 %141 = OpLoad %46 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %23 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                       f32_4 %148 = OpLoad %59 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %59 %149 
                                       f32_4 %152 = OpLoad %46 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD2 %153 
                                       f32_4 %155 = OpLoad %59 
                                       f32_2 %156 = OpVectorShuffle %155 %155 1 1 
                              Uniform f32_4* %157 = OpAccessChain %23 %38 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %160 = OpFMul %156 %159 
                                       f32_4 %161 = OpLoad %46 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 2 3 
                                                      OpStore %46 %162 
                              Uniform f32_4* %163 = OpAccessChain %23 %38 %30 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_4 %166 = OpLoad %59 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 0 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %46 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %46 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %46 %173 
                              Uniform f32_4* %174 = OpAccessChain %23 %38 %38 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_4 %177 = OpLoad %59 
                                       f32_2 %178 = OpVectorShuffle %177 %177 2 2 
                                       f32_2 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %46 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad %46 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore %46 %184 
                                       f32_4 %187 = OpLoad %11 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 1 
                                Uniform f32* %191 = OpAccessChain %23 %189 
                                         f32 %192 = OpLoad %191 
                                Uniform f32* %194 = OpAccessChain %23 %193 
                                         f32 %195 = OpLoad %194 
                                       f32_2 %196 = OpCompositeConstruct %192 %195 
                                       f32_2 %197 = OpFNegate %196 
                                       f32_2 %198 = OpFAdd %188 %197 
                                                      OpStore %186 %198 
                                       f32_4 %199 = OpLoad %46 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFNegate %200 
                                Uniform f32* %203 = OpAccessChain %23 %202 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %205 = OpAccessChain %23 %202 
                                         f32 %206 = OpLoad %205 
                                       f32_2 %207 = OpCompositeConstruct %204 %206 
                                         f32 %208 = OpCompositeExtract %207 0 
                                         f32 %209 = OpCompositeExtract %207 1 
                                       f32_2 %210 = OpCompositeConstruct %208 %209 
                                       f32_2 %211 = OpFMul %201 %210 
                                       f32_2 %212 = OpLoad %186 
                                       f32_2 %213 = OpFAdd %211 %212 
                                       f32_4 %214 = OpLoad %46 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %46 %215 
                                       f32_4 %216 = OpLoad %46 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                Uniform f32* %219 = OpAccessChain %23 %218 
                                         f32 %220 = OpLoad %219 
                                       f32_2 %221 = OpCompositeConstruct %220 %220 
                                       f32_2 %222 = OpFDiv %217 %221 
                                       f32_4 %223 = OpLoad %46 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 2 3 
                                                      OpStore %46 %224 
                                       f32_4 %227 = OpLoad %46 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                                       f32_2 %231 = OpFAdd %228 %230 
                                                      OpStore vs_TEXCOORD3 %231 
                                       f32_4 %234 = OpLoad %233 
                                       f32_2 %235 = OpVectorShuffle %234 %234 0 1 
                              Uniform f32_4* %237 = OpAccessChain %23 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                                       f32_2 %240 = OpFMul %235 %239 
                              Uniform f32_4* %241 = OpAccessChain %23 %236 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 2 3 
                                       f32_2 %244 = OpFAdd %240 %243 
                                                      OpStore vs_TEXCOORD0 %244 
                                       f32_3 %247 = OpLoad %246 
                              Uniform f32_4* %248 = OpAccessChain %23 %38 %30 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                         f32 %251 = OpDot %247 %250 
                                Private f32* %253 = OpAccessChain %46 %252 
                                                      OpStore %253 %251 
                                       f32_3 %254 = OpLoad %246 
                              Uniform f32_4* %255 = OpAccessChain %23 %38 %25 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %259 = OpAccessChain %46 %86 
                                                      OpStore %259 %258 
                                       f32_3 %260 = OpLoad %246 
                              Uniform f32_4* %261 = OpAccessChain %23 %38 %38 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %260 %263 
                                Private f32* %265 = OpAccessChain %46 %96 
                                                      OpStore %265 %264 
                                       f32_4 %267 = OpLoad %46 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %46 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                         f32 %271 = OpDot %268 %270 
                                                      OpStore %266 %271 
                                         f32 %272 = OpLoad %266 
                                         f32 %273 = OpExtInst %1 32 %272 
                                                      OpStore %266 %273 
                                         f32 %275 = OpLoad %266 
                                       f32_3 %276 = OpCompositeConstruct %275 %275 %275 
                                       f32_4 %277 = OpLoad %46 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                                      OpStore vs_TEXCOORD1 %279 
                                       f32_4 %280 = OpLoad %9 
                                       f32_2 %281 = OpVectorShuffle %280 %280 1 1 
                              Uniform f32_4* %283 = OpAccessChain %23 %282 %25 
                                       f32_4 %284 = OpLoad %283 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 1 
                                       f32_2 %286 = OpFMul %281 %285 
                                       f32_4 %287 = OpLoad %46 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 2 3 
                                                      OpStore %46 %288 
                              Uniform f32_4* %289 = OpAccessChain %23 %282 %30 
                                       f32_4 %290 = OpLoad %289 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 1 
                                       f32_4 %292 = OpLoad %9 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 0 
                                       f32_2 %294 = OpFMul %291 %293 
                                       f32_4 %295 = OpLoad %46 
                                       f32_2 %296 = OpVectorShuffle %295 %295 0 1 
                                       f32_2 %297 = OpFAdd %294 %296 
                                       f32_4 %298 = OpLoad %9 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 2 3 
                                                      OpStore %9 %299 
                              Uniform f32_4* %300 = OpAccessChain %23 %282 %38 
                                       f32_4 %301 = OpLoad %300 
                                       f32_2 %302 = OpVectorShuffle %301 %301 0 1 
                                       f32_4 %303 = OpLoad %9 
                                       f32_2 %304 = OpVectorShuffle %303 %303 2 2 
                                       f32_2 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %9 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                       f32_2 %308 = OpFAdd %305 %307 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 2 3 
                                                      OpStore %9 %310 
                              Uniform f32_4* %312 = OpAccessChain %23 %282 %48 
                                       f32_4 %313 = OpLoad %312 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_4 %315 = OpLoad %9 
                                       f32_2 %316 = OpVectorShuffle %315 %315 3 3 
                                       f32_2 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %9 
                                       f32_2 %319 = OpVectorShuffle %318 %318 0 1 
                                       f32_2 %320 = OpFAdd %317 %319 
                                                      OpStore vs_TEXCOORD4 %320 
                                 Output f32* %321 = OpAccessChain %90 %30 %86 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                 Output f32* %324 = OpAccessChain %90 %30 %86 
                                                      OpStore %324 %323 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 486
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %61 %218 %431 %457 %469 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate vs_TEXCOORD1 Location 61 
                                                      OpDecorate %209 DescriptorSet 209 
                                                      OpDecorate %209 Binding 209 
                                                      OpDecorate %213 DescriptorSet 213 
                                                      OpDecorate %213 Binding 213 
                                                      OpDecorate vs_TEXCOORD0 Location 218 
                                                      OpDecorate %296 DescriptorSet 296 
                                                      OpDecorate %296 Binding 296 
                                                      OpDecorate %298 DescriptorSet 298 
                                                      OpDecorate %298 Binding 298 
                                                      OpDecorate vs_TEXCOORD5 Location 431 
                                                      OpDecorate %457 Location 457 
                                                      OpDecorate %464 DescriptorSet 464 
                                                      OpDecorate %464 Binding 464 
                                                      OpDecorate %466 DescriptorSet 466 
                                                      OpDecorate %466 Binding 466 
                                                      OpDecorate vs_TEXCOORD3 Location 469 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %14 %14 %17 %6 %6 %14 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %34 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                              %40 = OpTypePointer Uniform %14 
                                          f32 %53 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %67 = OpTypePointer Private %14 
                               Private f32_4* %68 = OpVariable Private 
                                          f32 %80 = OpConstant 3.674022E-40 
                                          f32 %81 = OpConstant 3.674022E-40 
                                          u32 %88 = OpConstant 0 
                                 Private f32* %94 = OpVariable Private 
                                          i32 %95 = OpConstant 6 
                                              %96 = OpTypePointer Uniform %6 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Private %101 
                              Private f32_2* %103 = OpVariable Private 
                                         f32 %110 = OpConstant 3.674022E-40 
                                Private f32* %113 = OpVariable Private 
                                Private f32* %119 = OpVariable Private 
                                         f32 %133 = OpConstant 3.674022E-40 
                                         f32 %136 = OpConstant 3.674022E-40 
                                Private f32* %146 = OpVariable Private 
                                Private f32* %155 = OpVariable Private 
                                         f32 %191 = OpConstant 3.674022E-40 
                                         f32 %193 = OpConstant 3.674022E-40 
                                         f32 %203 = OpConstant 3.674022E-40 
                                             %207 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %208 = OpTypePointer UniformConstant %207 
        UniformConstant read_only Texture2D* %209 = OpVariable UniformConstant 
                                             %211 = OpTypeSampler 
                                             %212 = OpTypePointer UniformConstant %211 
                    UniformConstant sampler* %213 = OpVariable UniformConstant 
                                             %215 = OpTypeSampledImage %207 
                                             %217 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                              Private f32_3* %221 = OpVariable Private 
                                         i32 %224 = OpConstant 8 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_3 %230 = OpConstantComposite %229 %229 %229 
                                         i32 %236 = OpConstant 7 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                             %256 = OpTypeBool 
                                             %257 = OpTypePointer Private %256 
                               Private bool* %258 = OpVariable Private 
                                         i32 %268 = OpConstant 5 
                                         i32 %269 = OpConstant 1 
                                         i32 %291 = OpConstant 3 
        UniformConstant read_only Texture2D* %296 = OpVariable UniformConstant 
                    UniformConstant sampler* %298 = OpVariable UniformConstant 
                                         u32 %303 = OpConstant 3 
                              Private f32_3* %305 = OpVariable Private 
                                         i32 %308 = OpConstant 4 
                              Private f32_3* %313 = OpVariable Private 
                                         f32 %333 = OpConstant 3.674022E-40 
                                       f32_3 %351 = OpConstantComposite %81 %81 %81 
                                         f32 %414 = OpConstant 3.674022E-40 
                                             %430 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %433 = OpConstant 1 
                                         u32 %441 = OpConstant 2 
                                             %456 = OpTypePointer Output %14 
                               Output f32_4* %457 = OpVariable Output 
        UniformConstant read_only Texture2D* %464 = OpVariable UniformConstant 
                    UniformConstant sampler* %466 = OpVariable UniformConstant 
                        Input f32_2* vs_TEXCOORD3 = OpVariable Input 
                                         i32 %476 = OpConstant 9 
                                             %483 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                        f32_3 %35 = OpLoad %9 
                                          f32 %36 = OpLoad %28 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_3 %38 = OpFMul %35 %37 
                               Uniform f32_4* %41 = OpAccessChain %20 %39 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_3 %44 = OpFAdd %38 %43 
                                                      OpStore %34 %44 
                                          f32 %45 = OpLoad %28 
                                        f32_3 %46 = OpCompositeConstruct %45 %45 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFMul %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %34 
                                        f32_3 %50 = OpLoad %34 
                                          f32 %51 = OpDot %49 %50 
                                                      OpStore %28 %51 
                                          f32 %52 = OpLoad %28 
                                          f32 %54 = OpExtInst %1 40 %52 %53 
                                                      OpStore %28 %54 
                                          f32 %55 = OpLoad %28 
                                          f32 %56 = OpExtInst %1 32 %55 
                                                      OpStore %28 %56 
                                          f32 %57 = OpLoad %28 
                                        f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                                        f32_3 %59 = OpLoad %34 
                                        f32_3 %60 = OpFMul %58 %59 
                                                      OpStore %34 %60 
                                        f32_3 %62 = OpLoad vs_TEXCOORD1 
                                        f32_3 %63 = OpLoad vs_TEXCOORD1 
                                          f32 %64 = OpDot %62 %63 
                                                      OpStore %28 %64 
                                          f32 %65 = OpLoad %28 
                                          f32 %66 = OpExtInst %1 32 %65 
                                                      OpStore %28 %66 
                                          f32 %69 = OpLoad %28 
                                        f32_3 %70 = OpCompositeConstruct %69 %69 %69 
                                        f32_3 %71 = OpLoad vs_TEXCOORD1 
                                        f32_3 %72 = OpFMul %70 %71 
                                        f32_4 %73 = OpLoad %68 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 6 3 
                                                      OpStore %68 %74 
                                        f32_4 %75 = OpLoad %68 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpLoad %34 
                                          f32 %78 = OpDot %76 %77 
                                                      OpStore %28 %78 
                                          f32 %79 = OpLoad %28 
                                          f32 %82 = OpExtInst %1 43 %79 %80 %81 
                                                      OpStore %28 %82 
                               Uniform f32_4* %83 = OpAccessChain %20 %39 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpLoad %34 
                                          f32 %87 = OpDot %85 %86 
                                 Private f32* %89 = OpAccessChain %34 %88 
                                                      OpStore %89 %87 
                                 Private f32* %90 = OpAccessChain %34 %88 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpExtInst %1 43 %91 %80 %81 
                                 Private f32* %93 = OpAccessChain %34 %88 
                                                      OpStore %93 %92 
                                 Uniform f32* %97 = OpAccessChain %20 %95 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFNegate %98 
                                         f32 %100 = OpFAdd %99 %81 
                                                      OpStore %94 %100 
                                         f32 %104 = OpLoad %94 
                                         f32 %105 = OpLoad %94 
                                         f32 %106 = OpFMul %104 %105 
                                Private f32* %107 = OpAccessChain %103 %88 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %103 %88 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpExtInst %1 40 %109 %110 
                                Private f32* %112 = OpAccessChain %103 %88 
                                                      OpStore %112 %111 
                                Private f32* %114 = OpAccessChain %103 %88 
                                         f32 %115 = OpLoad %114 
                                Private f32* %116 = OpAccessChain %103 %88 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                                      OpStore %113 %118 
                                         f32 %120 = OpLoad %28 
                                         f32 %121 = OpLoad %113 
                                         f32 %122 = OpFMul %120 %121 
                                         f32 %123 = OpLoad %28 
                                         f32 %124 = OpFNegate %123 
                                         f32 %125 = OpFAdd %122 %124 
                                                      OpStore %119 %125 
                                         f32 %126 = OpLoad %119 
                                         f32 %127 = OpLoad %28 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %129 = OpFAdd %128 %81 
                                                      OpStore %28 %129 
                                         f32 %130 = OpLoad %28 
                                         f32 %131 = OpLoad %28 
                                         f32 %132 = OpFMul %130 %131 
                                         f32 %134 = OpFAdd %132 %133 
                                                      OpStore %28 %134 
                                         f32 %135 = OpLoad %113 
                                         f32 %137 = OpFMul %135 %136 
                                                      OpStore %113 %137 
                                         f32 %138 = OpLoad %113 
                                         f32 %139 = OpLoad %28 
                                         f32 %140 = OpFDiv %138 %139 
                                                      OpStore %28 %140 
                                       f32_4 %141 = OpLoad %68 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpLoad %9 
                                         f32 %144 = OpDot %142 %143 
                                Private f32* %145 = OpAccessChain %9 %88 
                                                      OpStore %145 %144 
                                       f32_4 %147 = OpLoad %68 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %20 %39 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %148 %151 
                                                      OpStore %146 %152 
                                         f32 %153 = OpLoad %146 
                                         f32 %154 = OpExtInst %1 43 %153 %80 %81 
                                                      OpStore %146 %154 
                                Private f32* %156 = OpAccessChain %103 %88 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFNegate %157 
                                         f32 %159 = OpFAdd %158 %81 
                                                      OpStore %155 %159 
                                Private f32* %160 = OpAccessChain %9 %88 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpExtInst %1 4 %161 
                                         f32 %163 = OpLoad %155 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %165 = OpAccessChain %103 %88 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFAdd %164 %166 
                                                      OpStore %113 %167 
                                         f32 %168 = OpLoad %146 
                                         f32 %169 = OpLoad %155 
                                         f32 %170 = OpFMul %168 %169 
                                Private f32* %171 = OpAccessChain %103 %88 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFAdd %170 %172 
                                                      OpStore %155 %173 
                                         f32 %174 = OpLoad %155 
                                Private f32* %175 = OpAccessChain %9 %88 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpExtInst %1 4 %176 
                                         f32 %178 = OpFMul %174 %177 
                                                      OpStore %155 %178 
                                Private f32* %179 = OpAccessChain %9 %88 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpExtInst %1 4 %180 
                                         f32 %182 = OpFNegate %181 
                                         f32 %183 = OpFAdd %182 %81 
                                Private f32* %184 = OpAccessChain %9 %88 
                                                      OpStore %184 %183 
                                         f32 %185 = OpLoad %146 
                                         f32 %186 = OpLoad %113 
                                         f32 %187 = OpFMul %185 %186 
                                         f32 %188 = OpLoad %155 
                                         f32 %189 = OpFAdd %187 %188 
                                                      OpStore %155 %189 
                                         f32 %190 = OpLoad %155 
                                         f32 %192 = OpFAdd %190 %191 
                                                      OpStore %155 %192 
                                         f32 %194 = OpLoad %155 
                                         f32 %195 = OpFDiv %193 %194 
                                                      OpStore %155 %195 
                                         f32 %196 = OpLoad %28 
                                         f32 %197 = OpLoad %155 
                                         f32 %198 = OpFMul %196 %197 
                                                      OpStore %155 %198 
                                         f32 %199 = OpLoad %146 
                                         f32 %200 = OpLoad %155 
                                         f32 %201 = OpFMul %199 %200 
                                                      OpStore %155 %201 
                                         f32 %202 = OpLoad %155 
                                         f32 %204 = OpFMul %202 %203 
                                                      OpStore %155 %204 
                                         f32 %205 = OpLoad %155 
                                         f32 %206 = OpExtInst %1 40 %205 %80 
                                                      OpStore %155 %206 
                         read_only Texture2D %210 = OpLoad %209 
                                     sampler %214 = OpLoad %213 
                  read_only Texture2DSampled %216 = OpSampledImage %210 %214 
                                       f32_2 %219 = OpLoad vs_TEXCOORD0 
                                       f32_4 %220 = OpImageSampleImplicitLod %216 %219 
                                                      OpStore %68 %220 
                                       f32_4 %222 = OpLoad %68 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                              Uniform f32_4* %225 = OpAccessChain %20 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %223 %227 
                                       f32_3 %231 = OpFAdd %228 %230 
                                                      OpStore %221 %231 
                                       f32_4 %232 = OpLoad %68 
                              Uniform f32_4* %233 = OpAccessChain %20 %224 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpFMul %232 %234 
                                                      OpStore %68 %235 
                                Uniform f32* %237 = OpAccessChain %20 %236 
                                         f32 %238 = OpLoad %237 
                                Uniform f32* %239 = OpAccessChain %20 %236 
                                         f32 %240 = OpLoad %239 
                                Uniform f32* %241 = OpAccessChain %20 %236 
                                         f32 %242 = OpLoad %241 
                                       f32_3 %243 = OpCompositeConstruct %238 %240 %242 
                                         f32 %244 = OpCompositeExtract %243 0 
                                         f32 %245 = OpCompositeExtract %243 1 
                                         f32 %246 = OpCompositeExtract %243 2 
                                       f32_3 %247 = OpCompositeConstruct %244 %245 %246 
                                       f32_3 %248 = OpLoad %221 
                                       f32_3 %249 = OpFMul %247 %248 
                                       f32_3 %252 = OpFAdd %249 %251 
                                                      OpStore %221 %252 
                                       f32_3 %253 = OpLoad %221 
                                       f32_3 %254 = OpLoad %221 
                                         f32 %255 = OpDot %253 %254 
                                                      OpStore %28 %255 
                                         f32 %259 = OpLoad %28 
                                        bool %260 = OpFOrdNotEqual %259 %80 
                                                      OpStore %258 %260 
                                        bool %261 = OpLoad %258 
                                         f32 %262 = OpSelect %261 %81 %80 
                                                      OpStore %28 %262 
                                         f32 %263 = OpLoad %28 
                                         f32 %264 = OpLoad %155 
                                         f32 %265 = OpFMul %263 %264 
                                                      OpStore %155 %265 
                                       f32_3 %266 = OpLoad vs_TEXCOORD2 
                                       f32_2 %267 = OpVectorShuffle %266 %266 1 1 
                              Uniform f32_4* %270 = OpAccessChain %20 %268 %269 
                                       f32_4 %271 = OpLoad %270 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                       f32_2 %273 = OpFMul %267 %272 
                                                      OpStore %103 %273 
                              Uniform f32_4* %274 = OpAccessChain %20 %268 %22 
                                       f32_4 %275 = OpLoad %274 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_3 %277 = OpLoad vs_TEXCOORD2 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 0 
                                       f32_2 %279 = OpFMul %276 %278 
                                       f32_2 %280 = OpLoad %103 
                                       f32_2 %281 = OpFAdd %279 %280 
                                                      OpStore %103 %281 
                              Uniform f32_4* %282 = OpAccessChain %20 %268 %39 
                                       f32_4 %283 = OpLoad %282 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_3 %285 = OpLoad vs_TEXCOORD2 
                                       f32_2 %286 = OpVectorShuffle %285 %285 2 2 
                                       f32_2 %287 = OpFMul %284 %286 
                                       f32_2 %288 = OpLoad %103 
                                       f32_2 %289 = OpFAdd %287 %288 
                                                      OpStore %103 %289 
                                       f32_2 %290 = OpLoad %103 
                              Uniform f32_4* %292 = OpAccessChain %20 %268 %291 
                                       f32_4 %293 = OpLoad %292 
                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
                                       f32_2 %295 = OpFAdd %290 %294 
                                                      OpStore %103 %295 
                         read_only Texture2D %297 = OpLoad %296 
                                     sampler %299 = OpLoad %298 
                  read_only Texture2DSampled %300 = OpSampledImage %297 %299 
                                       f32_2 %301 = OpLoad %103 
                                       f32_4 %302 = OpImageSampleImplicitLod %300 %301 
                                         f32 %304 = OpCompositeExtract %302 3 
                                                      OpStore %28 %304 
                                         f32 %306 = OpLoad %28 
                                       f32_3 %307 = OpCompositeConstruct %306 %306 %306 
                              Uniform f32_4* %309 = OpAccessChain %20 %308 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFMul %307 %311 
                                                      OpStore %305 %312 
                                         f32 %314 = OpLoad %155 
                                       f32_3 %315 = OpCompositeConstruct %314 %314 %314 
                                       f32_3 %316 = OpLoad %305 
                                       f32_3 %317 = OpFMul %315 %316 
                                                      OpStore %313 %317 
                                Private f32* %318 = OpAccessChain %34 %88 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFNegate %319 
                                         f32 %321 = OpFAdd %320 %81 
                                                      OpStore %155 %321 
                                Private f32* %322 = OpAccessChain %34 %88 
                                         f32 %323 = OpLoad %322 
                                Private f32* %324 = OpAccessChain %34 %88 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                                      OpStore %28 %326 
                                         f32 %327 = OpLoad %28 
                                       f32_2 %328 = OpCompositeConstruct %327 %327 
                                         f32 %329 = OpLoad %94 
                                       f32_2 %330 = OpCompositeConstruct %329 %329 
                                         f32 %331 = OpDot %328 %330 
                                                      OpStore %28 %331 
                                         f32 %332 = OpLoad %28 
                                         f32 %334 = OpFAdd %332 %333 
                                                      OpStore %28 %334 
                                         f32 %335 = OpLoad %155 
                                         f32 %336 = OpLoad %155 
                                         f32 %337 = OpFMul %335 %336 
                                Private f32* %338 = OpAccessChain %34 %88 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %34 %88 
                                         f32 %340 = OpLoad %339 
                                Private f32* %341 = OpAccessChain %34 %88 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpFMul %340 %342 
                                Private f32* %344 = OpAccessChain %34 %88 
                                                      OpStore %344 %343 
                                         f32 %345 = OpLoad %155 
                                Private f32* %346 = OpAccessChain %34 %88 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpFMul %345 %347 
                                                      OpStore %155 %348 
                                       f32_3 %349 = OpLoad %221 
                                       f32_3 %350 = OpFNegate %349 
                                       f32_3 %352 = OpFAdd %350 %351 
                                                      OpStore %34 %352 
                                       f32_3 %353 = OpLoad %34 
                                         f32 %354 = OpLoad %155 
                                       f32_3 %355 = OpCompositeConstruct %354 %354 %354 
                                       f32_3 %356 = OpFMul %353 %355 
                                       f32_3 %357 = OpLoad %221 
                                       f32_3 %358 = OpFAdd %356 %357 
                                                      OpStore %34 %358 
                                       f32_3 %359 = OpLoad %34 
                                       f32_3 %360 = OpLoad %313 
                                       f32_3 %361 = OpFMul %359 %360 
                                                      OpStore %34 %361 
                                Private f32* %362 = OpAccessChain %9 %88 
                                         f32 %363 = OpLoad %362 
                                Private f32* %364 = OpAccessChain %9 %88 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFMul %363 %365 
                                                      OpStore %155 %366 
                                         f32 %367 = OpLoad %155 
                                         f32 %368 = OpLoad %155 
                                         f32 %369 = OpFMul %367 %368 
                                                      OpStore %155 %369 
                                Private f32* %370 = OpAccessChain %9 %88 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpLoad %155 
                                         f32 %373 = OpFMul %371 %372 
                                Private f32* %374 = OpAccessChain %9 %88 
                                                      OpStore %374 %373 
                                         f32 %375 = OpLoad %28 
                                Private f32* %376 = OpAccessChain %9 %88 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpFMul %375 %377 
                                         f32 %379 = OpFAdd %378 %81 
                                Private f32* %380 = OpAccessChain %9 %88 
                                                      OpStore %380 %379 
                                         f32 %381 = OpLoad %146 
                                         f32 %382 = OpFNegate %381 
                                         f32 %383 = OpFAdd %382 %81 
                                                      OpStore %155 %383 
                                         f32 %384 = OpLoad %155 
                                         f32 %385 = OpLoad %155 
                                         f32 %386 = OpFMul %384 %385 
                                                      OpStore %113 %386 
                                         f32 %387 = OpLoad %113 
                                         f32 %388 = OpLoad %113 
                                         f32 %389 = OpFMul %387 %388 
                                                      OpStore %113 %389 
                                         f32 %390 = OpLoad %155 
                                         f32 %391 = OpLoad %113 
                                         f32 %392 = OpFMul %390 %391 
                                                      OpStore %155 %392 
                                         f32 %393 = OpLoad %28 
                                         f32 %394 = OpLoad %155 
                                         f32 %395 = OpFMul %393 %394 
                                         f32 %396 = OpFAdd %395 %81 
                                                      OpStore %155 %396 
                                Private f32* %397 = OpAccessChain %9 %88 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %155 
                                         f32 %400 = OpFMul %398 %399 
                                Private f32* %401 = OpAccessChain %9 %88 
                                                      OpStore %401 %400 
                                         f32 %402 = OpLoad %146 
                                Private f32* %403 = OpAccessChain %9 %88 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFMul %402 %404 
                                Private f32* %406 = OpAccessChain %9 %88 
                                                      OpStore %406 %405 
                                       f32_3 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 0 0 
                                       f32_3 %409 = OpLoad %305 
                                       f32_3 %410 = OpFMul %408 %409 
                                                      OpStore %9 %410 
                                Uniform f32* %411 = OpAccessChain %20 %236 
                                         f32 %412 = OpLoad %411 
                                         f32 %413 = OpFNegate %412 
                                         f32 %415 = OpFMul %413 %414 
                                         f32 %416 = OpFAdd %415 %414 
                                                      OpStore %28 %416 
                                         f32 %417 = OpLoad %28 
                                       f32_3 %418 = OpCompositeConstruct %417 %417 %417 
                                       f32_4 %419 = OpLoad %68 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
                                       f32_3 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %68 
                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 6 3 
                                                      OpStore %68 %423 
                                       f32_4 %424 = OpLoad %68 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                       f32_3 %426 = OpLoad %9 
                                       f32_3 %427 = OpFMul %425 %426 
                                       f32_3 %428 = OpLoad %34 
                                       f32_3 %429 = OpFAdd %427 %428 
                                                      OpStore %9 %429 
                                         f32 %432 = OpLoad vs_TEXCOORD5 
                                Uniform f32* %434 = OpAccessChain %20 %269 %433 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpFDiv %432 %435 
                                                      OpStore %28 %436 
                                         f32 %437 = OpLoad %28 
                                         f32 %438 = OpFNegate %437 
                                         f32 %439 = OpFAdd %438 %81 
                                                      OpStore %28 %439 
                                         f32 %440 = OpLoad %28 
                                Uniform f32* %442 = OpAccessChain %20 %269 %441 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFMul %440 %443 
                                                      OpStore %28 %444 
                                         f32 %445 = OpLoad %28 
                                         f32 %446 = OpExtInst %1 40 %445 %80 
                                                      OpStore %28 %446 
                                         f32 %447 = OpLoad %28 
                                Uniform f32* %448 = OpAccessChain %20 %291 %441 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpFMul %447 %449 
                                Uniform f32* %451 = OpAccessChain %20 %291 %303 
                                         f32 %452 = OpLoad %451 
                                         f32 %453 = OpFAdd %450 %452 
                                                      OpStore %28 %453 
                                         f32 %454 = OpLoad %28 
                                         f32 %455 = OpExtInst %1 43 %454 %80 %81 
                                                      OpStore %28 %455 
                                       f32_3 %458 = OpLoad %9 
                                         f32 %459 = OpLoad %28 
                                       f32_3 %460 = OpCompositeConstruct %459 %459 %459 
                                       f32_3 %461 = OpFMul %458 %460 
                                       f32_4 %462 = OpLoad %457 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %457 %463 
                         read_only Texture2D %465 = OpLoad %464 
                                     sampler %467 = OpLoad %466 
                  read_only Texture2DSampled %468 = OpSampledImage %465 %467 
                                       f32_2 %470 = OpLoad vs_TEXCOORD3 
                                       f32_4 %471 = OpImageSampleImplicitLod %468 %470 
                                         f32 %472 = OpCompositeExtract %471 3 
                                Private f32* %473 = OpAccessChain %9 %88 
                                                      OpStore %473 %472 
                                Private f32* %474 = OpAccessChain %9 %88 
                                         f32 %475 = OpLoad %474 
                                Uniform f32* %477 = OpAccessChain %20 %476 %303 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpFMul %475 %478 
                                Private f32* %480 = OpAccessChain %68 %303 
                                         f32 %481 = OpLoad %480 
                                         f32 %482 = OpFAdd %479 %481 
                                 Output f32* %484 = OpAccessChain %457 %303 
                                                      OpStore %484 %482 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
}
}
}
Fallback "Diffuse"
}