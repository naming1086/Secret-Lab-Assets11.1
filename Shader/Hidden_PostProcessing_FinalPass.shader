//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/PostProcessing/FinalPass" {
Properties {
}
SubShader {
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 42806
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0.x = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0.x = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0.x = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0.x = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0.x = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0.x = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0.x = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0.x = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0.x = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).w;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).w;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).w;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).w;
    u_xlat2.x = max(u_xlat0.w, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.w, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.063000001;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0311999992);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).w;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).w;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).w;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).w;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.w * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.w * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7.x = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.w);
        u_xlat8.xz = (-u_xlat0.ww) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.ww + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7.x = (u_xlatb3) ? (-u_xlat7.x) : u_xlat7.x;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = u_xlat7.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).w;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).w;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.w;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                    u_xlati10.xz = ~(u_xlati15.xy);
                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                    if(u_xlati10.x != 0) {
                        if(u_xlati15.x == 0) {
                            u_xlat10.xz = u_xlat4.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                        }
                        if(u_xlati15.y == 0) {
                            u_xlat10.xz = u_xlat5.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                        }
                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                        u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                        u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                        u_xlati10.xz = ~(u_xlati15.xy);
                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                        u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                        u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                        if(u_xlati10.x != 0) {
                            if(u_xlati15.x == 0) {
                                u_xlat10.xz = u_xlat4.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                            }
                            if(u_xlati15.y == 0) {
                                u_xlat10.xz = u_xlat5.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                            }
                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                            u_xlati10.xz = ~(u_xlati15.xy);
                            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                            if(u_xlati10.x != 0) {
                                if(u_xlati15.x == 0) {
                                    u_xlat10.xz = u_xlat4.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                }
                                if(u_xlati15.y == 0) {
                                    u_xlat10.xz = u_xlat5.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                }
                                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                u_xlati10.xz = ~(u_xlati15.xy);
                                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                if(u_xlati10.x != 0) {
                                    if(u_xlati15.x == 0) {
                                        u_xlat10.xz = u_xlat4.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                    }
                                    if(u_xlati15.y == 0) {
                                        u_xlat10.xz = u_xlat5.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                    }
                                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                    u_xlati10.xz = ~(u_xlati15.xy);
                                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                    if(u_xlati10.x != 0) {
                                        if(u_xlati15.x == 0) {
                                            u_xlat10.xz = u_xlat4.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                        }
                                        if(u_xlati15.y == 0) {
                                            u_xlat10.xz = u_xlat5.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                        }
                                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                        u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                        u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                        u_xlati10.xz = ~(u_xlati15.xy);
                                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                        u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                        u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                        if(u_xlati10.x != 0) {
                                            if(u_xlati15.x == 0) {
                                                u_xlat10.xz = u_xlat4.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                            }
                                            if(u_xlati15.y == 0) {
                                                u_xlat10.xz = u_xlat5.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                            }
                                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                            u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                                            u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                                            u_xlat15.x = (-u_xlat2.x) * 8.0 + u_xlat4.x;
                                            u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                                            u_xlat15.x = (-u_xlat2.w) * 8.0 + u_xlat4.z;
                                            u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                                            u_xlat1.x = u_xlat2.x * 8.0 + u_xlat5.x;
                                            u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                                            u_xlat1.x = u_xlat2.w * 8.0 + u_xlat5.z;
                                            u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * u_xlat7.xx + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).w;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).w;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).w;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).w;
    u_xlat2.x = max(u_xlat0.w, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.w, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.063000001;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0311999992);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).w;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).w;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).w;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).w;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.w * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.w * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7.x = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.w);
        u_xlat8.xz = (-u_xlat0.ww) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.ww + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7.x = (u_xlatb3) ? (-u_xlat7.x) : u_xlat7.x;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = u_xlat7.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).w;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).w;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.w;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                    u_xlati10.xz = ~(u_xlati15.xy);
                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                    if(u_xlati10.x != 0) {
                        if(u_xlati15.x == 0) {
                            u_xlat10.xz = u_xlat4.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                        }
                        if(u_xlati15.y == 0) {
                            u_xlat10.xz = u_xlat5.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                        }
                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                        u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                        u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                        u_xlati10.xz = ~(u_xlati15.xy);
                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                        u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                        u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                        if(u_xlati10.x != 0) {
                            if(u_xlati15.x == 0) {
                                u_xlat10.xz = u_xlat4.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                            }
                            if(u_xlati15.y == 0) {
                                u_xlat10.xz = u_xlat5.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                            }
                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                            u_xlati10.xz = ~(u_xlati15.xy);
                            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                            if(u_xlati10.x != 0) {
                                if(u_xlati15.x == 0) {
                                    u_xlat10.xz = u_xlat4.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                }
                                if(u_xlati15.y == 0) {
                                    u_xlat10.xz = u_xlat5.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                }
                                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                u_xlati10.xz = ~(u_xlati15.xy);
                                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                if(u_xlati10.x != 0) {
                                    if(u_xlati15.x == 0) {
                                        u_xlat10.xz = u_xlat4.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                    }
                                    if(u_xlati15.y == 0) {
                                        u_xlat10.xz = u_xlat5.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                    }
                                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                    u_xlati10.xz = ~(u_xlati15.xy);
                                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                    if(u_xlati10.x != 0) {
                                        if(u_xlati15.x == 0) {
                                            u_xlat10.xz = u_xlat4.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                        }
                                        if(u_xlati15.y == 0) {
                                            u_xlat10.xz = u_xlat5.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                        }
                                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                        u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                        u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                        u_xlati10.xz = ~(u_xlati15.xy);
                                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                        u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                        u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                        if(u_xlati10.x != 0) {
                                            if(u_xlati15.x == 0) {
                                                u_xlat10.xz = u_xlat4.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                            }
                                            if(u_xlati15.y == 0) {
                                                u_xlat10.xz = u_xlat5.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                            }
                                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                            u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                                            u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                                            u_xlat15.x = (-u_xlat2.x) * 8.0 + u_xlat4.x;
                                            u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                                            u_xlat15.x = (-u_xlat2.w) * 8.0 + u_xlat4.z;
                                            u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                                            u_xlat1.x = u_xlat2.x * 8.0 + u_xlat5.x;
                                            u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                                            u_xlat1.x = u_xlat2.w * 8.0 + u_xlat5.z;
                                            u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * u_xlat7.xx + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).w;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).w;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).w;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).w;
    u_xlat2.x = max(u_xlat0.w, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.w, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.063000001;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0311999992);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).w;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).w;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).w;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).w;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.w * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.w * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7.x = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.w);
        u_xlat8.xz = (-u_xlat0.ww) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.ww + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7.x = (u_xlatb3) ? (-u_xlat7.x) : u_xlat7.x;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = u_xlat7.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).w;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).w;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.w;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                    u_xlati10.xz = ~(u_xlati15.xy);
                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                    if(u_xlati10.x != 0) {
                        if(u_xlati15.x == 0) {
                            u_xlat10.xz = u_xlat4.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                        }
                        if(u_xlati15.y == 0) {
                            u_xlat10.xz = u_xlat5.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                        }
                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                        u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                        u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                        u_xlati10.xz = ~(u_xlati15.xy);
                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                        u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                        u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                        if(u_xlati10.x != 0) {
                            if(u_xlati15.x == 0) {
                                u_xlat10.xz = u_xlat4.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                            }
                            if(u_xlati15.y == 0) {
                                u_xlat10.xz = u_xlat5.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                            }
                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                            u_xlati10.xz = ~(u_xlati15.xy);
                            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                            if(u_xlati10.x != 0) {
                                if(u_xlati15.x == 0) {
                                    u_xlat10.xz = u_xlat4.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                }
                                if(u_xlati15.y == 0) {
                                    u_xlat10.xz = u_xlat5.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                }
                                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                u_xlati10.xz = ~(u_xlati15.xy);
                                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                if(u_xlati10.x != 0) {
                                    if(u_xlati15.x == 0) {
                                        u_xlat10.xz = u_xlat4.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                    }
                                    if(u_xlati15.y == 0) {
                                        u_xlat10.xz = u_xlat5.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                    }
                                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                    u_xlati10.xz = ~(u_xlati15.xy);
                                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                    if(u_xlati10.x != 0) {
                                        if(u_xlati15.x == 0) {
                                            u_xlat10.xz = u_xlat4.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                        }
                                        if(u_xlati15.y == 0) {
                                            u_xlat10.xz = u_xlat5.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                        }
                                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                        u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                        u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                        u_xlati10.xz = ~(u_xlati15.xy);
                                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                        u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                        u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                        if(u_xlati10.x != 0) {
                                            if(u_xlati15.x == 0) {
                                                u_xlat10.xz = u_xlat4.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                            }
                                            if(u_xlati15.y == 0) {
                                                u_xlat10.xz = u_xlat5.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                                            }
                                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                            u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                                            u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                                            u_xlat15.x = (-u_xlat2.x) * 8.0 + u_xlat4.x;
                                            u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                                            u_xlat15.x = (-u_xlat2.w) * 8.0 + u_xlat4.z;
                                            u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                                            u_xlat1.x = u_xlat2.x * 8.0 + u_xlat5.x;
                                            u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                                            u_xlat1.x = u_xlat2.w * 8.0 + u_xlat5.z;
                                            u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * u_xlat7.xx + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
vec2 u_xlat5;
ivec2 u_xlati5;
vec3 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
float u_xlat14;
ivec2 u_xlati14;
vec2 u_xlat15;
ivec2 u_xlati15;
bvec2 u_xlatb15;
float u_xlat18;
float u_xlat19;
float u_xlat20;
int u_xlati20;
bool u_xlatb20;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat18 = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.x = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat7.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat13 = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat19 = max(u_xlat0.y, u_xlat18);
    u_xlat2.x = min(u_xlat0.y, u_xlat18);
    u_xlat19 = max(u_xlat19, u_xlat1.x);
    u_xlat2.x = min(u_xlat1.x, u_xlat2.x);
    u_xlat8.x = max(u_xlat13, u_xlat7.x);
    u_xlat14 = min(u_xlat13, u_xlat7.x);
    u_xlat19 = max(u_xlat19, u_xlat8.x);
    u_xlat2.x = min(u_xlat2.x, u_xlat14);
    u_xlat8.x = u_xlat19 * 0.063000001;
    u_xlat19 = u_xlat19 + (-u_xlat2.x);
    u_xlat2.x = max(u_xlat8.x, 0.0311999992);
    u_xlatb2.x = u_xlat19>=u_xlat2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
        u_xlat2.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
        u_xlat8.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.y = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat14 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat2.w = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat3.x = u_xlat18 + u_xlat7.x;
        u_xlat9.x = u_xlat1.x + u_xlat13;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlat15.x = u_xlat9.x + u_xlat3.x;
        u_xlat3.x = u_xlat0.y * -2.0 + u_xlat3.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat21 = u_xlat2.y + u_xlat14;
        u_xlat14 = u_xlat14 + u_xlat2.x;
        u_xlat4.x = u_xlat1.x * -2.0 + u_xlat21;
        u_xlat14 = u_xlat7.x * -2.0 + u_xlat14;
        u_xlat2.xy = u_xlat2.wy + u_xlat2.xw;
        u_xlat20 = abs(u_xlat3.x) * 2.0 + abs(u_xlat4.x);
        u_xlat14 = abs(u_xlat9.x) * 2.0 + abs(u_xlat14);
        u_xlat3.x = u_xlat13 * -2.0 + u_xlat2.x;
        u_xlat8.x = u_xlat18 * -2.0 + u_xlat2.y;
        u_xlat20 = u_xlat20 + abs(u_xlat3.x);
        u_xlat8.x = u_xlat14 + abs(u_xlat8.x);
        u_xlat2.x = u_xlat21 + u_xlat2.x;
        u_xlatb8 = u_xlat20>=u_xlat8.x;
        u_xlat2.x = u_xlat15.x * 2.0 + u_xlat2.x;
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat13;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat1.x;
        u_xlat1.x = (u_xlatb8) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat13 = u_xlat2.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat2.x = (-u_xlat0.y) + u_xlat7.x;
        u_xlat14 = (-u_xlat0.y) + u_xlat18;
        u_xlat7.x = u_xlat0.y + u_xlat7.x;
        u_xlat18 = u_xlat0.y + u_xlat18;
        u_xlatb20 = abs(u_xlat2.x)>=abs(u_xlat14);
        u_xlat2.x = max(abs(u_xlat14), abs(u_xlat2.x));
        u_xlat1.x = (u_xlatb20) ? (-u_xlat1.x) : u_xlat1.x;
        u_xlat13 = u_xlat19 * abs(u_xlat13);
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
        u_xlat19 = u_xlatb8 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat14 = (u_xlatb8) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat3.xy = u_xlat1.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat3.x;
        u_xlat9.x = (u_xlatb8) ? u_xlat3.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat3.x;
        u_xlat4.y = (-u_xlat14) + u_xlat9.x;
        u_xlat5.x = u_xlat19 + u_xlat3.x;
        u_xlat5.y = u_xlat14 + u_xlat9.x;
        u_xlat3.x = u_xlat13 * -2.0 + 3.0;
        u_xlat9.xy = u_xlat4.xy;
        u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
        u_xlat9.xy = u_xlat9.xy * vec2(_RenderViewportScaleFactor);
        u_xlat9.x = textureLod(_MainTex, u_xlat9.xy, 0.0).y;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat15.xy = u_xlat5.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat18 = (u_xlatb20) ? u_xlat7.x : u_xlat18;
        u_xlat7.x = u_xlat2.x * 0.25;
        u_xlat2.x = (-u_xlat18) * 0.5 + u_xlat0.y;
        u_xlat13 = u_xlat13 * u_xlat3.x;
        u_xlati2 = int((u_xlat2.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat18) * 0.5 + u_xlat9.x;
        u_xlat3.y = (-u_xlat18) * 0.5 + u_xlat15.x;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat20 = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
        u_xlat20 = (-u_xlat14) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat20;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati20 = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat10.x = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat10.x;
        u_xlat5.x = u_xlat14 * 1.5 + u_xlat5.y;
        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat5.x;
        if(u_xlati20 != 0) {
            if(u_xlati15.x == 0) {
                u_xlat5.xy = u_xlat4.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat5.xy = u_xlat10.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
            u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
            u_xlati5.xy = ~(u_xlati15.xy);
            u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
            u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
            u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
            u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
            u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
            if(u_xlati20 != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat5.xy = u_xlat4.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat5.xy = u_xlat10.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                u_xlati5.xy = ~(u_xlati15.xy);
                u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                if(u_xlati20 != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat5.xy = u_xlat4.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat5.xy = u_xlat10.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                    u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                    u_xlati5.xy = ~(u_xlati15.xy);
                    u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                    u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                    u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                    u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                    u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                    if(u_xlati20 != 0) {
                        if(u_xlati15.x == 0) {
                            u_xlat5.xy = u_xlat4.xz;
                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                        }
                        if(u_xlati15.y == 0) {
                            u_xlat5.xy = u_xlat10.xz;
                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                        }
                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                        u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                        u_xlati5.xy = ~(u_xlati15.xy);
                        u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                        u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                        u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                        if(u_xlati20 != 0) {
                            if(u_xlati15.x == 0) {
                                u_xlat5.xy = u_xlat4.xz;
                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                            }
                            if(u_xlati15.y == 0) {
                                u_xlat5.xy = u_xlat10.xz;
                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                            }
                            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                            u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                            u_xlati5.xy = ~(u_xlati15.xy);
                            u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                            u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                            u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                            u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                            u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                            if(u_xlati20 != 0) {
                                if(u_xlati15.x == 0) {
                                    u_xlat5.xy = u_xlat4.xz;
                                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                }
                                if(u_xlati15.y == 0) {
                                    u_xlat5.xy = u_xlat10.xz;
                                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                }
                                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                                u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                                u_xlati5.xy = ~(u_xlati15.xy);
                                u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                                u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                                u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                                u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                                u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                                if(u_xlati20 != 0) {
                                    if(u_xlati15.x == 0) {
                                        u_xlat5.xy = u_xlat4.xz;
                                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                    }
                                    if(u_xlati15.y == 0) {
                                        u_xlat5.xy = u_xlat10.xz;
                                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                    }
                                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                                    u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                                    u_xlati5.xy = ~(u_xlati15.xy);
                                    u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                                    u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                                    u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                                    u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                                    u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                                    if(u_xlati20 != 0) {
                                        if(u_xlati15.x == 0) {
                                            u_xlat5.xy = u_xlat4.xz;
                                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                        }
                                        if(u_xlati15.y == 0) {
                                            u_xlat5.xy = u_xlat10.xz;
                                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                        }
                                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat20 = (-u_xlat19) * 4.0 + u_xlat4.x;
                                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                                        u_xlat20 = (-u_xlat14) * 4.0 + u_xlat4.z;
                                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                                        u_xlati5.xy = ~(u_xlati15.xy);
                                        u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                                        u_xlat5.x = u_xlat19 * 4.0 + u_xlat10.x;
                                        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                                        u_xlat5.x = u_xlat14 * 4.0 + u_xlat10.z;
                                        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                                        if(u_xlati20 != 0) {
                                            if(u_xlati15.x == 0) {
                                                u_xlat5.xy = u_xlat4.xz;
                                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                            }
                                            if(u_xlati15.y == 0) {
                                                u_xlat5.xy = u_xlat10.xz;
                                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                            }
                                            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                            u_xlat18 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat18;
                                            u_xlatb15.xy = greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy;
                                            u_xlat18 = (-u_xlat19) * 8.0 + u_xlat4.x;
                                            u_xlat4.x = (u_xlatb15.x) ? u_xlat4.x : u_xlat18;
                                            u_xlat18 = (-u_xlat14) * 8.0 + u_xlat4.z;
                                            u_xlat4.z = (u_xlatb15.x) ? u_xlat4.z : u_xlat18;
                                            u_xlat18 = u_xlat19 * 8.0 + u_xlat10.x;
                                            u_xlat10.x = (u_xlatb15.y) ? u_xlat10.x : u_xlat18;
                                            u_xlat18 = u_xlat14 * 8.0 + u_xlat10.z;
                                            u_xlat10.z = (u_xlatb15.y) ? u_xlat10.z : u_xlat18;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat18 = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat19 = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat19;
        u_xlat7.xz = u_xlat10.xz + (-vs_TEXCOORD0.xy);
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat7.z;
        u_xlati14.xy = ivec2(uvec2(lessThan(u_xlat3.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
        u_xlat19 = u_xlat18 + u_xlat7.x;
        u_xlatb2.xz = notEqual(ivec4(u_xlati2), u_xlati14.xxyx).xz;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlatb20 = u_xlat18<u_xlat7.x;
        u_xlat18 = min(u_xlat18, u_xlat7.x);
        u_xlatb7 = (u_xlatb20) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat18 = u_xlat18 * (-u_xlat19) + 0.5;
        u_xlat18 = u_xlatb7 ? u_xlat18 : float(0.0);
        u_xlat18 = max(u_xlat13, u_xlat18);
        u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xx + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
        u_xlat3.y = (u_xlatb8) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat18 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat18;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
vec2 u_xlat5;
ivec2 u_xlati5;
vec3 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
float u_xlat14;
ivec2 u_xlati14;
vec2 u_xlat15;
ivec2 u_xlati15;
bvec2 u_xlatb15;
float u_xlat18;
float u_xlat19;
float u_xlat20;
int u_xlati20;
bool u_xlatb20;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat18 = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.x = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat7.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat13 = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat19 = max(u_xlat0.y, u_xlat18);
    u_xlat2.x = min(u_xlat0.y, u_xlat18);
    u_xlat19 = max(u_xlat19, u_xlat1.x);
    u_xlat2.x = min(u_xlat1.x, u_xlat2.x);
    u_xlat8.x = max(u_xlat13, u_xlat7.x);
    u_xlat14 = min(u_xlat13, u_xlat7.x);
    u_xlat19 = max(u_xlat19, u_xlat8.x);
    u_xlat2.x = min(u_xlat2.x, u_xlat14);
    u_xlat8.x = u_xlat19 * 0.063000001;
    u_xlat19 = u_xlat19 + (-u_xlat2.x);
    u_xlat2.x = max(u_xlat8.x, 0.0311999992);
    u_xlatb2.x = u_xlat19>=u_xlat2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
        u_xlat2.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
        u_xlat8.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.y = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat14 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat2.w = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat3.x = u_xlat18 + u_xlat7.x;
        u_xlat9.x = u_xlat1.x + u_xlat13;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlat15.x = u_xlat9.x + u_xlat3.x;
        u_xlat3.x = u_xlat0.y * -2.0 + u_xlat3.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat21 = u_xlat2.y + u_xlat14;
        u_xlat14 = u_xlat14 + u_xlat2.x;
        u_xlat4.x = u_xlat1.x * -2.0 + u_xlat21;
        u_xlat14 = u_xlat7.x * -2.0 + u_xlat14;
        u_xlat2.xy = u_xlat2.wy + u_xlat2.xw;
        u_xlat20 = abs(u_xlat3.x) * 2.0 + abs(u_xlat4.x);
        u_xlat14 = abs(u_xlat9.x) * 2.0 + abs(u_xlat14);
        u_xlat3.x = u_xlat13 * -2.0 + u_xlat2.x;
        u_xlat8.x = u_xlat18 * -2.0 + u_xlat2.y;
        u_xlat20 = u_xlat20 + abs(u_xlat3.x);
        u_xlat8.x = u_xlat14 + abs(u_xlat8.x);
        u_xlat2.x = u_xlat21 + u_xlat2.x;
        u_xlatb8 = u_xlat20>=u_xlat8.x;
        u_xlat2.x = u_xlat15.x * 2.0 + u_xlat2.x;
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat13;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat1.x;
        u_xlat1.x = (u_xlatb8) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat13 = u_xlat2.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat2.x = (-u_xlat0.y) + u_xlat7.x;
        u_xlat14 = (-u_xlat0.y) + u_xlat18;
        u_xlat7.x = u_xlat0.y + u_xlat7.x;
        u_xlat18 = u_xlat0.y + u_xlat18;
        u_xlatb20 = abs(u_xlat2.x)>=abs(u_xlat14);
        u_xlat2.x = max(abs(u_xlat14), abs(u_xlat2.x));
        u_xlat1.x = (u_xlatb20) ? (-u_xlat1.x) : u_xlat1.x;
        u_xlat13 = u_xlat19 * abs(u_xlat13);
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
        u_xlat19 = u_xlatb8 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat14 = (u_xlatb8) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat3.xy = u_xlat1.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat3.x;
        u_xlat9.x = (u_xlatb8) ? u_xlat3.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat3.x;
        u_xlat4.y = (-u_xlat14) + u_xlat9.x;
        u_xlat5.x = u_xlat19 + u_xlat3.x;
        u_xlat5.y = u_xlat14 + u_xlat9.x;
        u_xlat3.x = u_xlat13 * -2.0 + 3.0;
        u_xlat9.xy = u_xlat4.xy;
        u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
        u_xlat9.xy = u_xlat9.xy * vec2(_RenderViewportScaleFactor);
        u_xlat9.x = textureLod(_MainTex, u_xlat9.xy, 0.0).y;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat15.xy = u_xlat5.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat18 = (u_xlatb20) ? u_xlat7.x : u_xlat18;
        u_xlat7.x = u_xlat2.x * 0.25;
        u_xlat2.x = (-u_xlat18) * 0.5 + u_xlat0.y;
        u_xlat13 = u_xlat13 * u_xlat3.x;
        u_xlati2 = int((u_xlat2.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat18) * 0.5 + u_xlat9.x;
        u_xlat3.y = (-u_xlat18) * 0.5 + u_xlat15.x;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat20 = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
        u_xlat20 = (-u_xlat14) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat20;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati20 = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat10.x = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat10.x;
        u_xlat5.x = u_xlat14 * 1.5 + u_xlat5.y;
        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat5.x;
        if(u_xlati20 != 0) {
            if(u_xlati15.x == 0) {
                u_xlat5.xy = u_xlat4.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat5.xy = u_xlat10.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
            u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
            u_xlati5.xy = ~(u_xlati15.xy);
            u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
            u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
            u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
            u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
            u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
            if(u_xlati20 != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat5.xy = u_xlat4.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat5.xy = u_xlat10.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                u_xlati5.xy = ~(u_xlati15.xy);
                u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                if(u_xlati20 != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat5.xy = u_xlat4.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat5.xy = u_xlat10.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                    u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                    u_xlati5.xy = ~(u_xlati15.xy);
                    u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                    u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                    u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                    u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                    u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                    if(u_xlati20 != 0) {
                        if(u_xlati15.x == 0) {
                            u_xlat5.xy = u_xlat4.xz;
                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                        }
                        if(u_xlati15.y == 0) {
                            u_xlat5.xy = u_xlat10.xz;
                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                        }
                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                        u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                        u_xlati5.xy = ~(u_xlati15.xy);
                        u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                        u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                        u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                        if(u_xlati20 != 0) {
                            if(u_xlati15.x == 0) {
                                u_xlat5.xy = u_xlat4.xz;
                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                            }
                            if(u_xlati15.y == 0) {
                                u_xlat5.xy = u_xlat10.xz;
                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                            }
                            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                            u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                            u_xlati5.xy = ~(u_xlati15.xy);
                            u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                            u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                            u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                            u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                            u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                            if(u_xlati20 != 0) {
                                if(u_xlati15.x == 0) {
                                    u_xlat5.xy = u_xlat4.xz;
                                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                }
                                if(u_xlati15.y == 0) {
                                    u_xlat5.xy = u_xlat10.xz;
                                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                }
                                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                                u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                                u_xlati5.xy = ~(u_xlati15.xy);
                                u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                                u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                                u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                                u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                                u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                                if(u_xlati20 != 0) {
                                    if(u_xlati15.x == 0) {
                                        u_xlat5.xy = u_xlat4.xz;
                                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                    }
                                    if(u_xlati15.y == 0) {
                                        u_xlat5.xy = u_xlat10.xz;
                                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                    }
                                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                                    u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                                    u_xlati5.xy = ~(u_xlati15.xy);
                                    u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                                    u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                                    u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                                    u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                                    u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                                    if(u_xlati20 != 0) {
                                        if(u_xlati15.x == 0) {
                                            u_xlat5.xy = u_xlat4.xz;
                                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                        }
                                        if(u_xlati15.y == 0) {
                                            u_xlat5.xy = u_xlat10.xz;
                                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                        }
                                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat20 = (-u_xlat19) * 4.0 + u_xlat4.x;
                                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                                        u_xlat20 = (-u_xlat14) * 4.0 + u_xlat4.z;
                                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                                        u_xlati5.xy = ~(u_xlati15.xy);
                                        u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                                        u_xlat5.x = u_xlat19 * 4.0 + u_xlat10.x;
                                        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                                        u_xlat5.x = u_xlat14 * 4.0 + u_xlat10.z;
                                        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                                        if(u_xlati20 != 0) {
                                            if(u_xlati15.x == 0) {
                                                u_xlat5.xy = u_xlat4.xz;
                                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                            }
                                            if(u_xlati15.y == 0) {
                                                u_xlat5.xy = u_xlat10.xz;
                                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                            }
                                            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                            u_xlat18 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat18;
                                            u_xlatb15.xy = greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy;
                                            u_xlat18 = (-u_xlat19) * 8.0 + u_xlat4.x;
                                            u_xlat4.x = (u_xlatb15.x) ? u_xlat4.x : u_xlat18;
                                            u_xlat18 = (-u_xlat14) * 8.0 + u_xlat4.z;
                                            u_xlat4.z = (u_xlatb15.x) ? u_xlat4.z : u_xlat18;
                                            u_xlat18 = u_xlat19 * 8.0 + u_xlat10.x;
                                            u_xlat10.x = (u_xlatb15.y) ? u_xlat10.x : u_xlat18;
                                            u_xlat18 = u_xlat14 * 8.0 + u_xlat10.z;
                                            u_xlat10.z = (u_xlatb15.y) ? u_xlat10.z : u_xlat18;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat18 = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat19 = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat19;
        u_xlat7.xz = u_xlat10.xz + (-vs_TEXCOORD0.xy);
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat7.z;
        u_xlati14.xy = ivec2(uvec2(lessThan(u_xlat3.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
        u_xlat19 = u_xlat18 + u_xlat7.x;
        u_xlatb2.xz = notEqual(ivec4(u_xlati2), u_xlati14.xxyx).xz;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlatb20 = u_xlat18<u_xlat7.x;
        u_xlat18 = min(u_xlat18, u_xlat7.x);
        u_xlatb7 = (u_xlatb20) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat18 = u_xlat18 * (-u_xlat19) + 0.5;
        u_xlat18 = u_xlatb7 ? u_xlat18 : float(0.0);
        u_xlat18 = max(u_xlat13, u_xlat18);
        u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xx + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
        u_xlat3.y = (u_xlatb8) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat18 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat18;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
vec2 u_xlat5;
ivec2 u_xlati5;
vec3 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
float u_xlat14;
ivec2 u_xlati14;
vec2 u_xlat15;
ivec2 u_xlati15;
bvec2 u_xlatb15;
float u_xlat18;
float u_xlat19;
float u_xlat20;
int u_xlati20;
bool u_xlatb20;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat18 = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.x = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat7.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat13 = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat19 = max(u_xlat0.y, u_xlat18);
    u_xlat2.x = min(u_xlat0.y, u_xlat18);
    u_xlat19 = max(u_xlat19, u_xlat1.x);
    u_xlat2.x = min(u_xlat1.x, u_xlat2.x);
    u_xlat8.x = max(u_xlat13, u_xlat7.x);
    u_xlat14 = min(u_xlat13, u_xlat7.x);
    u_xlat19 = max(u_xlat19, u_xlat8.x);
    u_xlat2.x = min(u_xlat2.x, u_xlat14);
    u_xlat8.x = u_xlat19 * 0.063000001;
    u_xlat19 = u_xlat19 + (-u_xlat2.x);
    u_xlat2.x = max(u_xlat8.x, 0.0311999992);
    u_xlatb2.x = u_xlat19>=u_xlat2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
        u_xlat2.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
        u_xlat8.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.y = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat14 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat2.w = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat3.x = u_xlat18 + u_xlat7.x;
        u_xlat9.x = u_xlat1.x + u_xlat13;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlat15.x = u_xlat9.x + u_xlat3.x;
        u_xlat3.x = u_xlat0.y * -2.0 + u_xlat3.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat21 = u_xlat2.y + u_xlat14;
        u_xlat14 = u_xlat14 + u_xlat2.x;
        u_xlat4.x = u_xlat1.x * -2.0 + u_xlat21;
        u_xlat14 = u_xlat7.x * -2.0 + u_xlat14;
        u_xlat2.xy = u_xlat2.wy + u_xlat2.xw;
        u_xlat20 = abs(u_xlat3.x) * 2.0 + abs(u_xlat4.x);
        u_xlat14 = abs(u_xlat9.x) * 2.0 + abs(u_xlat14);
        u_xlat3.x = u_xlat13 * -2.0 + u_xlat2.x;
        u_xlat8.x = u_xlat18 * -2.0 + u_xlat2.y;
        u_xlat20 = u_xlat20 + abs(u_xlat3.x);
        u_xlat8.x = u_xlat14 + abs(u_xlat8.x);
        u_xlat2.x = u_xlat21 + u_xlat2.x;
        u_xlatb8 = u_xlat20>=u_xlat8.x;
        u_xlat2.x = u_xlat15.x * 2.0 + u_xlat2.x;
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat13;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat1.x;
        u_xlat1.x = (u_xlatb8) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat13 = u_xlat2.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat2.x = (-u_xlat0.y) + u_xlat7.x;
        u_xlat14 = (-u_xlat0.y) + u_xlat18;
        u_xlat7.x = u_xlat0.y + u_xlat7.x;
        u_xlat18 = u_xlat0.y + u_xlat18;
        u_xlatb20 = abs(u_xlat2.x)>=abs(u_xlat14);
        u_xlat2.x = max(abs(u_xlat14), abs(u_xlat2.x));
        u_xlat1.x = (u_xlatb20) ? (-u_xlat1.x) : u_xlat1.x;
        u_xlat13 = u_xlat19 * abs(u_xlat13);
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
        u_xlat19 = u_xlatb8 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat14 = (u_xlatb8) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat3.xy = u_xlat1.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat3.x;
        u_xlat9.x = (u_xlatb8) ? u_xlat3.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat3.x;
        u_xlat4.y = (-u_xlat14) + u_xlat9.x;
        u_xlat5.x = u_xlat19 + u_xlat3.x;
        u_xlat5.y = u_xlat14 + u_xlat9.x;
        u_xlat3.x = u_xlat13 * -2.0 + 3.0;
        u_xlat9.xy = u_xlat4.xy;
        u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
        u_xlat9.xy = u_xlat9.xy * vec2(_RenderViewportScaleFactor);
        u_xlat9.x = textureLod(_MainTex, u_xlat9.xy, 0.0).y;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat15.xy = u_xlat5.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat18 = (u_xlatb20) ? u_xlat7.x : u_xlat18;
        u_xlat7.x = u_xlat2.x * 0.25;
        u_xlat2.x = (-u_xlat18) * 0.5 + u_xlat0.y;
        u_xlat13 = u_xlat13 * u_xlat3.x;
        u_xlati2 = int((u_xlat2.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat18) * 0.5 + u_xlat9.x;
        u_xlat3.y = (-u_xlat18) * 0.5 + u_xlat15.x;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat20 = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
        u_xlat20 = (-u_xlat14) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat20;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati20 = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat10.x = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat10.x;
        u_xlat5.x = u_xlat14 * 1.5 + u_xlat5.y;
        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat5.x;
        if(u_xlati20 != 0) {
            if(u_xlati15.x == 0) {
                u_xlat5.xy = u_xlat4.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat5.xy = u_xlat10.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
            u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
            u_xlati5.xy = ~(u_xlati15.xy);
            u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
            u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
            u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
            u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
            u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
            if(u_xlati20 != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat5.xy = u_xlat4.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat5.xy = u_xlat10.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                u_xlati5.xy = ~(u_xlati15.xy);
                u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                if(u_xlati20 != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat5.xy = u_xlat4.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat5.xy = u_xlat10.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                    u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                    u_xlati5.xy = ~(u_xlati15.xy);
                    u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                    u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                    u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                    u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                    u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                    if(u_xlati20 != 0) {
                        if(u_xlati15.x == 0) {
                            u_xlat5.xy = u_xlat4.xz;
                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                        }
                        if(u_xlati15.y == 0) {
                            u_xlat5.xy = u_xlat10.xz;
                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                        }
                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                        u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                        u_xlati5.xy = ~(u_xlati15.xy);
                        u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                        u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                        u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                        if(u_xlati20 != 0) {
                            if(u_xlati15.x == 0) {
                                u_xlat5.xy = u_xlat4.xz;
                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                            }
                            if(u_xlati15.y == 0) {
                                u_xlat5.xy = u_xlat10.xz;
                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                            }
                            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                            u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                            u_xlati5.xy = ~(u_xlati15.xy);
                            u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                            u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                            u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                            u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                            u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                            if(u_xlati20 != 0) {
                                if(u_xlati15.x == 0) {
                                    u_xlat5.xy = u_xlat4.xz;
                                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                }
                                if(u_xlati15.y == 0) {
                                    u_xlat5.xy = u_xlat10.xz;
                                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                }
                                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                                u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                                u_xlati5.xy = ~(u_xlati15.xy);
                                u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                                u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                                u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                                u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                                u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                                if(u_xlati20 != 0) {
                                    if(u_xlati15.x == 0) {
                                        u_xlat5.xy = u_xlat4.xz;
                                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                    }
                                    if(u_xlati15.y == 0) {
                                        u_xlat5.xy = u_xlat10.xz;
                                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                    }
                                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
                                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                                    u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
                                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                                    u_xlati5.xy = ~(u_xlati15.xy);
                                    u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                                    u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
                                    u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                                    u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
                                    u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                                    if(u_xlati20 != 0) {
                                        if(u_xlati15.x == 0) {
                                            u_xlat5.xy = u_xlat4.xz;
                                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                        }
                                        if(u_xlati15.y == 0) {
                                            u_xlat5.xy = u_xlat10.xz;
                                            u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                            u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                        }
                                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                        u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat20 = (-u_xlat19) * 4.0 + u_xlat4.x;
                                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                                        u_xlat20 = (-u_xlat14) * 4.0 + u_xlat4.z;
                                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                                        u_xlati5.xy = ~(u_xlati15.xy);
                                        u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                                        u_xlat5.x = u_xlat19 * 4.0 + u_xlat10.x;
                                        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                                        u_xlat5.x = u_xlat14 * 4.0 + u_xlat10.z;
                                        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                                        if(u_xlati20 != 0) {
                                            if(u_xlati15.x == 0) {
                                                u_xlat5.xy = u_xlat4.xz;
                                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                            }
                                            if(u_xlati15.y == 0) {
                                                u_xlat5.xy = u_xlat10.xz;
                                                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                                                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                                            }
                                            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                                            u_xlat18 = (-u_xlat18) * 0.5 + u_xlat3.y;
                                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat18;
                                            u_xlatb15.xy = greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy;
                                            u_xlat18 = (-u_xlat19) * 8.0 + u_xlat4.x;
                                            u_xlat4.x = (u_xlatb15.x) ? u_xlat4.x : u_xlat18;
                                            u_xlat18 = (-u_xlat14) * 8.0 + u_xlat4.z;
                                            u_xlat4.z = (u_xlatb15.x) ? u_xlat4.z : u_xlat18;
                                            u_xlat18 = u_xlat19 * 8.0 + u_xlat10.x;
                                            u_xlat10.x = (u_xlatb15.y) ? u_xlat10.x : u_xlat18;
                                            u_xlat18 = u_xlat14 * 8.0 + u_xlat10.z;
                                            u_xlat10.z = (u_xlatb15.y) ? u_xlat10.z : u_xlat18;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat18 = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat19 = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat19;
        u_xlat7.xz = u_xlat10.xz + (-vs_TEXCOORD0.xy);
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat7.z;
        u_xlati14.xy = ivec2(uvec2(lessThan(u_xlat3.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
        u_xlat19 = u_xlat18 + u_xlat7.x;
        u_xlatb2.xz = notEqual(ivec4(u_xlati2), u_xlati14.xxyx).xz;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlatb20 = u_xlat18<u_xlat7.x;
        u_xlat18 = min(u_xlat18, u_xlat7.x);
        u_xlatb7 = (u_xlatb20) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat18 = u_xlat18 * (-u_xlat19) + 0.5;
        u_xlat18 = u_xlatb7 ? u_xlat18 : float(0.0);
        u_xlat18 = max(u_xlat13, u_xlat18);
        u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xx + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
        u_xlat3.y = (u_xlatb8) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat18 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat18;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat2.x = max(u_xlat0.y, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.y, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.063000001;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0311999992);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.y * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7 = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat8.xz = (-u_xlat0.yy) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.yy + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7 = (u_xlatb3) ? (-u_xlat7) : u_xlat7;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = vec2(u_xlat7) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).y;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.y;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                    u_xlati10.xz = ~(u_xlati15.xy);
                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                    if(u_xlati10.x != 0) {
                        if(u_xlati15.x == 0) {
                            u_xlat10.xz = u_xlat4.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                        }
                        if(u_xlati15.y == 0) {
                            u_xlat10.xz = u_xlat5.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                        }
                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                        u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                        u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                        u_xlati10.xz = ~(u_xlati15.xy);
                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                        u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                        u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                        if(u_xlati10.x != 0) {
                            if(u_xlati15.x == 0) {
                                u_xlat10.xz = u_xlat4.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                            }
                            if(u_xlati15.y == 0) {
                                u_xlat10.xz = u_xlat5.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                            }
                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                            u_xlati10.xz = ~(u_xlati15.xy);
                            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                            if(u_xlati10.x != 0) {
                                if(u_xlati15.x == 0) {
                                    u_xlat10.xz = u_xlat4.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                }
                                if(u_xlati15.y == 0) {
                                    u_xlat10.xz = u_xlat5.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                }
                                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                u_xlati10.xz = ~(u_xlati15.xy);
                                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                if(u_xlati10.x != 0) {
                                    if(u_xlati15.x == 0) {
                                        u_xlat10.xz = u_xlat4.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                    }
                                    if(u_xlati15.y == 0) {
                                        u_xlat10.xz = u_xlat5.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                    }
                                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                    u_xlati10.xz = ~(u_xlati15.xy);
                                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                    if(u_xlati10.x != 0) {
                                        if(u_xlati15.x == 0) {
                                            u_xlat10.xz = u_xlat4.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                        }
                                        if(u_xlati15.y == 0) {
                                            u_xlat10.xz = u_xlat5.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                        }
                                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                        u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                        u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                        u_xlati10.xz = ~(u_xlati15.xy);
                                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                        u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                        u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                        if(u_xlati10.x != 0) {
                                            if(u_xlati15.x == 0) {
                                                u_xlat10.xz = u_xlat4.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                            }
                                            if(u_xlati15.y == 0) {
                                                u_xlat10.xz = u_xlat5.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                            }
                                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                            u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                                            u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                                            u_xlat15.x = (-u_xlat2.x) * 8.0 + u_xlat4.x;
                                            u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                                            u_xlat15.x = (-u_xlat2.w) * 8.0 + u_xlat4.z;
                                            u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                                            u_xlat1.x = u_xlat2.x * 8.0 + u_xlat5.x;
                                            u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                                            u_xlat1.x = u_xlat2.w * 8.0 + u_xlat5.z;
                                            u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat7) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat19 = texture(_DitheringTex, u_xlat2.xy).w;
    u_xlat19 = u_xlat19 * 2.0 + -1.0;
    u_xlat2.x = u_xlat19 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat19 = -abs(u_xlat19) + 1.0;
    u_xlat19 = sqrt(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat19) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat2.x = max(u_xlat0.y, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.y, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.063000001;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0311999992);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.y * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7 = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat8.xz = (-u_xlat0.yy) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.yy + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7 = (u_xlatb3) ? (-u_xlat7) : u_xlat7;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = vec2(u_xlat7) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).y;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.y;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                    u_xlati10.xz = ~(u_xlati15.xy);
                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                    if(u_xlati10.x != 0) {
                        if(u_xlati15.x == 0) {
                            u_xlat10.xz = u_xlat4.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                        }
                        if(u_xlati15.y == 0) {
                            u_xlat10.xz = u_xlat5.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                        }
                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                        u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                        u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                        u_xlati10.xz = ~(u_xlati15.xy);
                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                        u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                        u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                        if(u_xlati10.x != 0) {
                            if(u_xlati15.x == 0) {
                                u_xlat10.xz = u_xlat4.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                            }
                            if(u_xlati15.y == 0) {
                                u_xlat10.xz = u_xlat5.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                            }
                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                            u_xlati10.xz = ~(u_xlati15.xy);
                            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                            if(u_xlati10.x != 0) {
                                if(u_xlati15.x == 0) {
                                    u_xlat10.xz = u_xlat4.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                }
                                if(u_xlati15.y == 0) {
                                    u_xlat10.xz = u_xlat5.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                }
                                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                u_xlati10.xz = ~(u_xlati15.xy);
                                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                if(u_xlati10.x != 0) {
                                    if(u_xlati15.x == 0) {
                                        u_xlat10.xz = u_xlat4.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                    }
                                    if(u_xlati15.y == 0) {
                                        u_xlat10.xz = u_xlat5.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                    }
                                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                    u_xlati10.xz = ~(u_xlati15.xy);
                                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                    if(u_xlati10.x != 0) {
                                        if(u_xlati15.x == 0) {
                                            u_xlat10.xz = u_xlat4.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                        }
                                        if(u_xlati15.y == 0) {
                                            u_xlat10.xz = u_xlat5.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                        }
                                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                        u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                        u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                        u_xlati10.xz = ~(u_xlati15.xy);
                                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                        u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                        u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                        if(u_xlati10.x != 0) {
                                            if(u_xlati15.x == 0) {
                                                u_xlat10.xz = u_xlat4.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                            }
                                            if(u_xlati15.y == 0) {
                                                u_xlat10.xz = u_xlat5.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                            }
                                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                            u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                                            u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                                            u_xlat15.x = (-u_xlat2.x) * 8.0 + u_xlat4.x;
                                            u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                                            u_xlat15.x = (-u_xlat2.w) * 8.0 + u_xlat4.z;
                                            u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                                            u_xlat1.x = u_xlat2.x * 8.0 + u_xlat5.x;
                                            u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                                            u_xlat1.x = u_xlat2.w * 8.0 + u_xlat5.z;
                                            u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat7) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat19 = texture(_DitheringTex, u_xlat2.xy).w;
    u_xlat19 = u_xlat19 * 2.0 + -1.0;
    u_xlat2.x = u_xlat19 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat19 = -abs(u_xlat19) + 1.0;
    u_xlat19 = sqrt(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat19) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat2.x = max(u_xlat0.y, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.y, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.063000001;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0311999992);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.y * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7 = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat8.xz = (-u_xlat0.yy) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.yy + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7 = (u_xlatb3) ? (-u_xlat7) : u_xlat7;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = vec2(u_xlat7) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).y;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.y;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                    u_xlati10.xz = ~(u_xlati15.xy);
                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                    if(u_xlati10.x != 0) {
                        if(u_xlati15.x == 0) {
                            u_xlat10.xz = u_xlat4.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                        }
                        if(u_xlati15.y == 0) {
                            u_xlat10.xz = u_xlat5.xz;
                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                        }
                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                        u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                        u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                        u_xlati10.xz = ~(u_xlati15.xy);
                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                        u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                        u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                        if(u_xlati10.x != 0) {
                            if(u_xlati15.x == 0) {
                                u_xlat10.xz = u_xlat4.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                            }
                            if(u_xlati15.y == 0) {
                                u_xlat10.xz = u_xlat5.xz;
                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                            }
                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                            u_xlati10.xz = ~(u_xlati15.xy);
                            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                            if(u_xlati10.x != 0) {
                                if(u_xlati15.x == 0) {
                                    u_xlat10.xz = u_xlat4.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                }
                                if(u_xlati15.y == 0) {
                                    u_xlat10.xz = u_xlat5.xz;
                                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                }
                                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                u_xlati10.xz = ~(u_xlati15.xy);
                                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                if(u_xlati10.x != 0) {
                                    if(u_xlati15.x == 0) {
                                        u_xlat10.xz = u_xlat4.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                    }
                                    if(u_xlati15.y == 0) {
                                        u_xlat10.xz = u_xlat5.xz;
                                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                    }
                                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                    u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                    u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                    u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
                                    u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                    u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
                                    u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                    u_xlati10.xz = ~(u_xlati15.xy);
                                    u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                    u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
                                    u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                    u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
                                    u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                    if(u_xlati10.x != 0) {
                                        if(u_xlati15.x == 0) {
                                            u_xlat10.xz = u_xlat4.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                        }
                                        if(u_xlati15.y == 0) {
                                            u_xlat10.xz = u_xlat5.xz;
                                            u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                            u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                            u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                        }
                                        u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                        u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                        u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                                        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                                        u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                                        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                                        u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                                        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                                        u_xlati10.xz = ~(u_xlati15.xy);
                                        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                                        u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                                        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                                        u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                                        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                                        if(u_xlati10.x != 0) {
                                            if(u_xlati15.x == 0) {
                                                u_xlat10.xz = u_xlat4.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                            }
                                            if(u_xlati15.y == 0) {
                                                u_xlat10.xz = u_xlat5.xz;
                                                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                                                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                                                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                                            }
                                            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                                            u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                                            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                                            u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                                            u_xlat15.x = (-u_xlat2.x) * 8.0 + u_xlat4.x;
                                            u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                                            u_xlat15.x = (-u_xlat2.w) * 8.0 + u_xlat4.z;
                                            u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                                            u_xlat1.x = u_xlat2.x * 8.0 + u_xlat5.x;
                                            u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                                            u_xlat1.x = u_xlat2.w * 8.0 + u_xlat5.z;
                                            u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat7) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat19 = texture(_DitheringTex, u_xlat2.xy).w;
    u_xlat19 = u_xlat19 * 2.0 + -1.0;
    u_xlat2.x = u_xlat19 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat19 = -abs(u_xlat19) + 1.0;
    u_xlat19 = sqrt(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat19) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).w;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).w;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).w;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).w;
    u_xlat2.x = max(u_xlat0.w, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.w, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.165999994;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0625);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).w;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).w;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).w;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).w;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.w * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.w * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7.x = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.w);
        u_xlat8.xz = (-u_xlat0.ww) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.ww + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7.x = (u_xlatb3) ? (-u_xlat7.x) : u_xlat7.x;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = u_xlat7.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).w;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).w;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.w;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                    u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                    u_xlat15.x = (-u_xlat2.x) * 12.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                    u_xlat15.x = (-u_xlat2.w) * 12.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                    u_xlat1.x = u_xlat2.x * 12.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                    u_xlat1.x = u_xlat2.w * 12.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * u_xlat7.xx + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).w;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).w;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).w;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).w;
    u_xlat2.x = max(u_xlat0.w, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.w, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.165999994;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0625);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).w;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).w;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).w;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).w;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.w * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.w * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7.x = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.w);
        u_xlat8.xz = (-u_xlat0.ww) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.ww + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7.x = (u_xlatb3) ? (-u_xlat7.x) : u_xlat7.x;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = u_xlat7.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).w;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).w;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.w;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                    u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                    u_xlat15.x = (-u_xlat2.x) * 12.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                    u_xlat15.x = (-u_xlat2.w) * 12.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                    u_xlat1.x = u_xlat2.x * 12.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                    u_xlat1.x = u_xlat2.w * 12.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * u_xlat7.xx + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).w;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).w;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).w;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).w;
    u_xlat2.x = max(u_xlat0.w, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.w, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.165999994;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0625);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).w;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).w;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).w;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).w;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.w * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.w * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7.x = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.w);
        u_xlat8.xz = (-u_xlat0.ww) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.ww + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7.x = (u_xlatb3) ? (-u_xlat7.x) : u_xlat7.x;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = u_xlat7.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).w;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).w;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.w;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).w;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                    u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                    u_xlat15.x = (-u_xlat2.x) * 12.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                    u_xlat15.x = (-u_xlat2.w) * 12.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                    u_xlat1.x = u_xlat2.x * 12.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                    u_xlat1.x = u_xlat2.w * 12.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * u_xlat7.xx + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
vec2 u_xlat5;
ivec2 u_xlati5;
vec3 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
float u_xlat14;
ivec2 u_xlati14;
vec2 u_xlat15;
ivec2 u_xlati15;
bvec2 u_xlatb15;
float u_xlat18;
float u_xlat19;
float u_xlat20;
int u_xlati20;
bool u_xlatb20;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat18 = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.x = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat7.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat13 = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat19 = max(u_xlat0.y, u_xlat18);
    u_xlat2.x = min(u_xlat0.y, u_xlat18);
    u_xlat19 = max(u_xlat19, u_xlat1.x);
    u_xlat2.x = min(u_xlat1.x, u_xlat2.x);
    u_xlat8.x = max(u_xlat13, u_xlat7.x);
    u_xlat14 = min(u_xlat13, u_xlat7.x);
    u_xlat19 = max(u_xlat19, u_xlat8.x);
    u_xlat2.x = min(u_xlat2.x, u_xlat14);
    u_xlat8.x = u_xlat19 * 0.165999994;
    u_xlat19 = u_xlat19 + (-u_xlat2.x);
    u_xlat2.x = max(u_xlat8.x, 0.0625);
    u_xlatb2.x = u_xlat19>=u_xlat2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
        u_xlat2.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
        u_xlat8.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.y = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat14 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat2.w = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat3.x = u_xlat18 + u_xlat7.x;
        u_xlat9.x = u_xlat1.x + u_xlat13;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlat15.x = u_xlat9.x + u_xlat3.x;
        u_xlat3.x = u_xlat0.y * -2.0 + u_xlat3.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat21 = u_xlat2.y + u_xlat14;
        u_xlat14 = u_xlat14 + u_xlat2.x;
        u_xlat4.x = u_xlat1.x * -2.0 + u_xlat21;
        u_xlat14 = u_xlat7.x * -2.0 + u_xlat14;
        u_xlat2.xy = u_xlat2.wy + u_xlat2.xw;
        u_xlat20 = abs(u_xlat3.x) * 2.0 + abs(u_xlat4.x);
        u_xlat14 = abs(u_xlat9.x) * 2.0 + abs(u_xlat14);
        u_xlat3.x = u_xlat13 * -2.0 + u_xlat2.x;
        u_xlat8.x = u_xlat18 * -2.0 + u_xlat2.y;
        u_xlat20 = u_xlat20 + abs(u_xlat3.x);
        u_xlat8.x = u_xlat14 + abs(u_xlat8.x);
        u_xlat2.x = u_xlat21 + u_xlat2.x;
        u_xlatb8 = u_xlat20>=u_xlat8.x;
        u_xlat2.x = u_xlat15.x * 2.0 + u_xlat2.x;
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat13;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat1.x;
        u_xlat1.x = (u_xlatb8) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat13 = u_xlat2.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat2.x = (-u_xlat0.y) + u_xlat7.x;
        u_xlat14 = (-u_xlat0.y) + u_xlat18;
        u_xlat7.x = u_xlat0.y + u_xlat7.x;
        u_xlat18 = u_xlat0.y + u_xlat18;
        u_xlatb20 = abs(u_xlat2.x)>=abs(u_xlat14);
        u_xlat2.x = max(abs(u_xlat14), abs(u_xlat2.x));
        u_xlat1.x = (u_xlatb20) ? (-u_xlat1.x) : u_xlat1.x;
        u_xlat13 = u_xlat19 * abs(u_xlat13);
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
        u_xlat19 = u_xlatb8 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat14 = (u_xlatb8) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat3.xy = u_xlat1.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat3.x;
        u_xlat9.x = (u_xlatb8) ? u_xlat3.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat3.x;
        u_xlat4.y = (-u_xlat14) + u_xlat9.x;
        u_xlat5.x = u_xlat19 + u_xlat3.x;
        u_xlat5.y = u_xlat14 + u_xlat9.x;
        u_xlat3.x = u_xlat13 * -2.0 + 3.0;
        u_xlat9.xy = u_xlat4.xy;
        u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
        u_xlat9.xy = u_xlat9.xy * vec2(_RenderViewportScaleFactor);
        u_xlat9.x = textureLod(_MainTex, u_xlat9.xy, 0.0).y;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat15.xy = u_xlat5.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat18 = (u_xlatb20) ? u_xlat7.x : u_xlat18;
        u_xlat7.x = u_xlat2.x * 0.25;
        u_xlat2.x = (-u_xlat18) * 0.5 + u_xlat0.y;
        u_xlat13 = u_xlat13 * u_xlat3.x;
        u_xlati2 = int((u_xlat2.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat18) * 0.5 + u_xlat9.x;
        u_xlat3.y = (-u_xlat18) * 0.5 + u_xlat15.x;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat20 = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
        u_xlat20 = (-u_xlat14) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat20;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati20 = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat10.x = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat10.x;
        u_xlat5.x = u_xlat14 * 1.5 + u_xlat5.y;
        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat5.x;
        if(u_xlati20 != 0) {
            if(u_xlati15.x == 0) {
                u_xlat5.xy = u_xlat4.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat5.xy = u_xlat10.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
            u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
            u_xlati5.xy = ~(u_xlati15.xy);
            u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
            u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
            u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
            u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
            u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
            if(u_xlati20 != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat5.xy = u_xlat4.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat5.xy = u_xlat10.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat20 = (-u_xlat19) * 4.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                u_xlat20 = (-u_xlat14) * 4.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                u_xlati5.xy = ~(u_xlati15.xy);
                u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                u_xlat5.x = u_xlat19 * 4.0 + u_xlat10.x;
                u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                u_xlat5.x = u_xlat14 * 4.0 + u_xlat10.z;
                u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                if(u_xlati20 != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat5.xy = u_xlat4.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat5.xy = u_xlat10.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                    u_xlat18 = (-u_xlat18) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat18;
                    u_xlatb15.xy = greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy;
                    u_xlat18 = (-u_xlat19) * 12.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlatb15.x) ? u_xlat4.x : u_xlat18;
                    u_xlat18 = (-u_xlat14) * 12.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlatb15.x) ? u_xlat4.z : u_xlat18;
                    u_xlat18 = u_xlat19 * 12.0 + u_xlat10.x;
                    u_xlat10.x = (u_xlatb15.y) ? u_xlat10.x : u_xlat18;
                    u_xlat18 = u_xlat14 * 12.0 + u_xlat10.z;
                    u_xlat10.z = (u_xlatb15.y) ? u_xlat10.z : u_xlat18;
                }
            }
        }
        u_xlat18 = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat19 = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat19;
        u_xlat7.xz = u_xlat10.xz + (-vs_TEXCOORD0.xy);
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat7.z;
        u_xlati14.xy = ivec2(uvec2(lessThan(u_xlat3.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
        u_xlat19 = u_xlat18 + u_xlat7.x;
        u_xlatb2.xz = notEqual(ivec4(u_xlati2), u_xlati14.xxyx).xz;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlatb20 = u_xlat18<u_xlat7.x;
        u_xlat18 = min(u_xlat18, u_xlat7.x);
        u_xlatb7 = (u_xlatb20) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat18 = u_xlat18 * (-u_xlat19) + 0.5;
        u_xlat18 = u_xlatb7 ? u_xlat18 : float(0.0);
        u_xlat18 = max(u_xlat13, u_xlat18);
        u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xx + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
        u_xlat3.y = (u_xlatb8) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat18 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat18;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
vec2 u_xlat5;
ivec2 u_xlati5;
vec3 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
float u_xlat14;
ivec2 u_xlati14;
vec2 u_xlat15;
ivec2 u_xlati15;
bvec2 u_xlatb15;
float u_xlat18;
float u_xlat19;
float u_xlat20;
int u_xlati20;
bool u_xlatb20;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat18 = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.x = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat7.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat13 = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat19 = max(u_xlat0.y, u_xlat18);
    u_xlat2.x = min(u_xlat0.y, u_xlat18);
    u_xlat19 = max(u_xlat19, u_xlat1.x);
    u_xlat2.x = min(u_xlat1.x, u_xlat2.x);
    u_xlat8.x = max(u_xlat13, u_xlat7.x);
    u_xlat14 = min(u_xlat13, u_xlat7.x);
    u_xlat19 = max(u_xlat19, u_xlat8.x);
    u_xlat2.x = min(u_xlat2.x, u_xlat14);
    u_xlat8.x = u_xlat19 * 0.165999994;
    u_xlat19 = u_xlat19 + (-u_xlat2.x);
    u_xlat2.x = max(u_xlat8.x, 0.0625);
    u_xlatb2.x = u_xlat19>=u_xlat2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
        u_xlat2.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
        u_xlat8.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.y = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat14 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat2.w = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat3.x = u_xlat18 + u_xlat7.x;
        u_xlat9.x = u_xlat1.x + u_xlat13;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlat15.x = u_xlat9.x + u_xlat3.x;
        u_xlat3.x = u_xlat0.y * -2.0 + u_xlat3.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat21 = u_xlat2.y + u_xlat14;
        u_xlat14 = u_xlat14 + u_xlat2.x;
        u_xlat4.x = u_xlat1.x * -2.0 + u_xlat21;
        u_xlat14 = u_xlat7.x * -2.0 + u_xlat14;
        u_xlat2.xy = u_xlat2.wy + u_xlat2.xw;
        u_xlat20 = abs(u_xlat3.x) * 2.0 + abs(u_xlat4.x);
        u_xlat14 = abs(u_xlat9.x) * 2.0 + abs(u_xlat14);
        u_xlat3.x = u_xlat13 * -2.0 + u_xlat2.x;
        u_xlat8.x = u_xlat18 * -2.0 + u_xlat2.y;
        u_xlat20 = u_xlat20 + abs(u_xlat3.x);
        u_xlat8.x = u_xlat14 + abs(u_xlat8.x);
        u_xlat2.x = u_xlat21 + u_xlat2.x;
        u_xlatb8 = u_xlat20>=u_xlat8.x;
        u_xlat2.x = u_xlat15.x * 2.0 + u_xlat2.x;
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat13;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat1.x;
        u_xlat1.x = (u_xlatb8) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat13 = u_xlat2.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat2.x = (-u_xlat0.y) + u_xlat7.x;
        u_xlat14 = (-u_xlat0.y) + u_xlat18;
        u_xlat7.x = u_xlat0.y + u_xlat7.x;
        u_xlat18 = u_xlat0.y + u_xlat18;
        u_xlatb20 = abs(u_xlat2.x)>=abs(u_xlat14);
        u_xlat2.x = max(abs(u_xlat14), abs(u_xlat2.x));
        u_xlat1.x = (u_xlatb20) ? (-u_xlat1.x) : u_xlat1.x;
        u_xlat13 = u_xlat19 * abs(u_xlat13);
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
        u_xlat19 = u_xlatb8 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat14 = (u_xlatb8) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat3.xy = u_xlat1.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat3.x;
        u_xlat9.x = (u_xlatb8) ? u_xlat3.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat3.x;
        u_xlat4.y = (-u_xlat14) + u_xlat9.x;
        u_xlat5.x = u_xlat19 + u_xlat3.x;
        u_xlat5.y = u_xlat14 + u_xlat9.x;
        u_xlat3.x = u_xlat13 * -2.0 + 3.0;
        u_xlat9.xy = u_xlat4.xy;
        u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
        u_xlat9.xy = u_xlat9.xy * vec2(_RenderViewportScaleFactor);
        u_xlat9.x = textureLod(_MainTex, u_xlat9.xy, 0.0).y;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat15.xy = u_xlat5.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat18 = (u_xlatb20) ? u_xlat7.x : u_xlat18;
        u_xlat7.x = u_xlat2.x * 0.25;
        u_xlat2.x = (-u_xlat18) * 0.5 + u_xlat0.y;
        u_xlat13 = u_xlat13 * u_xlat3.x;
        u_xlati2 = int((u_xlat2.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat18) * 0.5 + u_xlat9.x;
        u_xlat3.y = (-u_xlat18) * 0.5 + u_xlat15.x;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat20 = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
        u_xlat20 = (-u_xlat14) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat20;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati20 = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat10.x = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat10.x;
        u_xlat5.x = u_xlat14 * 1.5 + u_xlat5.y;
        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat5.x;
        if(u_xlati20 != 0) {
            if(u_xlati15.x == 0) {
                u_xlat5.xy = u_xlat4.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat5.xy = u_xlat10.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
            u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
            u_xlati5.xy = ~(u_xlati15.xy);
            u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
            u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
            u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
            u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
            u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
            if(u_xlati20 != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat5.xy = u_xlat4.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat5.xy = u_xlat10.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat20 = (-u_xlat19) * 4.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                u_xlat20 = (-u_xlat14) * 4.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                u_xlati5.xy = ~(u_xlati15.xy);
                u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                u_xlat5.x = u_xlat19 * 4.0 + u_xlat10.x;
                u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                u_xlat5.x = u_xlat14 * 4.0 + u_xlat10.z;
                u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                if(u_xlati20 != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat5.xy = u_xlat4.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat5.xy = u_xlat10.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                    u_xlat18 = (-u_xlat18) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat18;
                    u_xlatb15.xy = greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy;
                    u_xlat18 = (-u_xlat19) * 12.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlatb15.x) ? u_xlat4.x : u_xlat18;
                    u_xlat18 = (-u_xlat14) * 12.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlatb15.x) ? u_xlat4.z : u_xlat18;
                    u_xlat18 = u_xlat19 * 12.0 + u_xlat10.x;
                    u_xlat10.x = (u_xlatb15.y) ? u_xlat10.x : u_xlat18;
                    u_xlat18 = u_xlat14 * 12.0 + u_xlat10.z;
                    u_xlat10.z = (u_xlatb15.y) ? u_xlat10.z : u_xlat18;
                }
            }
        }
        u_xlat18 = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat19 = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat19;
        u_xlat7.xz = u_xlat10.xz + (-vs_TEXCOORD0.xy);
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat7.z;
        u_xlati14.xy = ivec2(uvec2(lessThan(u_xlat3.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
        u_xlat19 = u_xlat18 + u_xlat7.x;
        u_xlatb2.xz = notEqual(ivec4(u_xlati2), u_xlati14.xxyx).xz;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlatb20 = u_xlat18<u_xlat7.x;
        u_xlat18 = min(u_xlat18, u_xlat7.x);
        u_xlatb7 = (u_xlatb20) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat18 = u_xlat18 * (-u_xlat19) + 0.5;
        u_xlat18 = u_xlatb7 ? u_xlat18 : float(0.0);
        u_xlat18 = max(u_xlat13, u_xlat18);
        u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xx + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
        u_xlat3.y = (u_xlatb8) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat18 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat18;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 1) in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
vec2 u_xlat5;
ivec2 u_xlati5;
vec3 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
float u_xlat14;
ivec2 u_xlati14;
vec2 u_xlat15;
ivec2 u_xlati15;
bvec2 u_xlatb15;
float u_xlat18;
float u_xlat19;
float u_xlat20;
int u_xlati20;
bool u_xlatb20;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat18 = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.x = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat7.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat13 = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat19 = max(u_xlat0.y, u_xlat18);
    u_xlat2.x = min(u_xlat0.y, u_xlat18);
    u_xlat19 = max(u_xlat19, u_xlat1.x);
    u_xlat2.x = min(u_xlat1.x, u_xlat2.x);
    u_xlat8.x = max(u_xlat13, u_xlat7.x);
    u_xlat14 = min(u_xlat13, u_xlat7.x);
    u_xlat19 = max(u_xlat19, u_xlat8.x);
    u_xlat2.x = min(u_xlat2.x, u_xlat14);
    u_xlat8.x = u_xlat19 * 0.165999994;
    u_xlat19 = u_xlat19 + (-u_xlat2.x);
    u_xlat2.x = max(u_xlat8.x, 0.0625);
    u_xlatb2.x = u_xlat19>=u_xlat2.x;
    if(u_xlatb2.x){
        u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
        u_xlat2.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.x = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
        u_xlat8.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat2.y = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat14 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat2.w = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat3.x = u_xlat18 + u_xlat7.x;
        u_xlat9.x = u_xlat1.x + u_xlat13;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlat15.x = u_xlat9.x + u_xlat3.x;
        u_xlat3.x = u_xlat0.y * -2.0 + u_xlat3.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat21 = u_xlat2.y + u_xlat14;
        u_xlat14 = u_xlat14 + u_xlat2.x;
        u_xlat4.x = u_xlat1.x * -2.0 + u_xlat21;
        u_xlat14 = u_xlat7.x * -2.0 + u_xlat14;
        u_xlat2.xy = u_xlat2.wy + u_xlat2.xw;
        u_xlat20 = abs(u_xlat3.x) * 2.0 + abs(u_xlat4.x);
        u_xlat14 = abs(u_xlat9.x) * 2.0 + abs(u_xlat14);
        u_xlat3.x = u_xlat13 * -2.0 + u_xlat2.x;
        u_xlat8.x = u_xlat18 * -2.0 + u_xlat2.y;
        u_xlat20 = u_xlat20 + abs(u_xlat3.x);
        u_xlat8.x = u_xlat14 + abs(u_xlat8.x);
        u_xlat2.x = u_xlat21 + u_xlat2.x;
        u_xlatb8 = u_xlat20>=u_xlat8.x;
        u_xlat2.x = u_xlat15.x * 2.0 + u_xlat2.x;
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat13;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat1.x;
        u_xlat1.x = (u_xlatb8) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat13 = u_xlat2.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat2.x = (-u_xlat0.y) + u_xlat7.x;
        u_xlat14 = (-u_xlat0.y) + u_xlat18;
        u_xlat7.x = u_xlat0.y + u_xlat7.x;
        u_xlat18 = u_xlat0.y + u_xlat18;
        u_xlatb20 = abs(u_xlat2.x)>=abs(u_xlat14);
        u_xlat2.x = max(abs(u_xlat14), abs(u_xlat2.x));
        u_xlat1.x = (u_xlatb20) ? (-u_xlat1.x) : u_xlat1.x;
        u_xlat13 = u_xlat19 * abs(u_xlat13);
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
        u_xlat19 = u_xlatb8 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat14 = (u_xlatb8) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat3.xy = u_xlat1.xx * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat3.x;
        u_xlat9.x = (u_xlatb8) ? u_xlat3.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat3.x;
        u_xlat4.y = (-u_xlat14) + u_xlat9.x;
        u_xlat5.x = u_xlat19 + u_xlat3.x;
        u_xlat5.y = u_xlat14 + u_xlat9.x;
        u_xlat3.x = u_xlat13 * -2.0 + 3.0;
        u_xlat9.xy = u_xlat4.xy;
        u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
        u_xlat9.xy = u_xlat9.xy * vec2(_RenderViewportScaleFactor);
        u_xlat9.x = textureLod(_MainTex, u_xlat9.xy, 0.0).y;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat15.xy = u_xlat5.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat18 = (u_xlatb20) ? u_xlat7.x : u_xlat18;
        u_xlat7.x = u_xlat2.x * 0.25;
        u_xlat2.x = (-u_xlat18) * 0.5 + u_xlat0.y;
        u_xlat13 = u_xlat13 * u_xlat3.x;
        u_xlati2 = int((u_xlat2.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat18) * 0.5 + u_xlat9.x;
        u_xlat3.y = (-u_xlat18) * 0.5 + u_xlat15.x;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat20 = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
        u_xlat20 = (-u_xlat14) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat20;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati20 = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat10.x = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat10.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat10.x;
        u_xlat5.x = u_xlat14 * 1.5 + u_xlat5.y;
        u_xlat10.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat5.x;
        if(u_xlati20 != 0) {
            if(u_xlati15.x == 0) {
                u_xlat5.xy = u_xlat4.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat5.xy = u_xlat10.xz;
                u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
            }
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
            u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat20 = (-u_xlat19) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
            u_xlat20 = (-u_xlat14) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
            u_xlati5.xy = ~(u_xlati15.xy);
            u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
            u_xlat5.x = u_xlat19 * 2.0 + u_xlat10.x;
            u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
            u_xlat5.x = u_xlat14 * 2.0 + u_xlat10.z;
            u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
            if(u_xlati20 != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat5.xy = u_xlat4.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat5.xy = u_xlat10.xz;
                    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                    u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                }
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat20;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat20 = (-u_xlat19) * 4.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat20;
                u_xlat20 = (-u_xlat14) * 4.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat20;
                u_xlati5.xy = ~(u_xlati15.xy);
                u_xlati20 = int(uint(u_xlati5.y) | uint(u_xlati5.x));
                u_xlat5.x = u_xlat19 * 4.0 + u_xlat10.x;
                u_xlat10.x = (u_xlati15.y != 0) ? u_xlat10.x : u_xlat5.x;
                u_xlat5.x = u_xlat14 * 4.0 + u_xlat10.z;
                u_xlat10.z = (u_xlati15.y != 0) ? u_xlat10.z : u_xlat5.x;
                if(u_xlati20 != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat5.xy = u_xlat4.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat5.xy = u_xlat10.xz;
                        u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
                        u_xlat5.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat5.xy, 0.0).y;
                    }
                    u_xlat20 = (-u_xlat18) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat20;
                    u_xlat18 = (-u_xlat18) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat18;
                    u_xlatb15.xy = greaterThanEqual(abs(u_xlat3.xyxy), u_xlat7.xxxx).xy;
                    u_xlat18 = (-u_xlat19) * 12.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlatb15.x) ? u_xlat4.x : u_xlat18;
                    u_xlat18 = (-u_xlat14) * 12.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlatb15.x) ? u_xlat4.z : u_xlat18;
                    u_xlat18 = u_xlat19 * 12.0 + u_xlat10.x;
                    u_xlat10.x = (u_xlatb15.y) ? u_xlat10.x : u_xlat18;
                    u_xlat18 = u_xlat14 * 12.0 + u_xlat10.z;
                    u_xlat10.z = (u_xlatb15.y) ? u_xlat10.z : u_xlat18;
                }
            }
        }
        u_xlat18 = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat19 = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat18 = (u_xlatb8) ? u_xlat18 : u_xlat19;
        u_xlat7.xz = u_xlat10.xz + (-vs_TEXCOORD0.xy);
        u_xlat7.x = (u_xlatb8) ? u_xlat7.x : u_xlat7.z;
        u_xlati14.xy = ivec2(uvec2(lessThan(u_xlat3.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
        u_xlat19 = u_xlat18 + u_xlat7.x;
        u_xlatb2.xz = notEqual(ivec4(u_xlati2), u_xlati14.xxyx).xz;
        u_xlat19 = float(1.0) / u_xlat19;
        u_xlatb20 = u_xlat18<u_xlat7.x;
        u_xlat18 = min(u_xlat18, u_xlat7.x);
        u_xlatb7 = (u_xlatb20) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat13 = u_xlat13 * u_xlat13;
        u_xlat18 = u_xlat18 * (-u_xlat19) + 0.5;
        u_xlat18 = u_xlatb7 ? u_xlat18 : float(0.0);
        u_xlat18 = max(u_xlat13, u_xlat18);
        u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xx + vs_TEXCOORD0.xy;
        u_xlat3.x = (u_xlatb8) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
        u_xlat3.y = (u_xlatb8) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    }
    u_xlat18 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1.x = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat7.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat7.x;
    u_xlat7.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat7.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat7.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat7.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat18;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat2.x = max(u_xlat0.y, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.y, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.165999994;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0625);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.y * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7 = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat8.xz = (-u_xlat0.yy) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.yy + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7 = (u_xlatb3) ? (-u_xlat7) : u_xlat7;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = vec2(u_xlat7) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).y;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.y;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                    u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                    u_xlat15.x = (-u_xlat2.x) * 12.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                    u_xlat15.x = (-u_xlat2.w) * 12.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                    u_xlat1.x = u_xlat2.x * 12.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                    u_xlat1.x = u_xlat2.w * 12.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat7) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat19 = texture(_DitheringTex, u_xlat2.xy).w;
    u_xlat19 = u_xlat19 * 2.0 + -1.0;
    u_xlat2.x = u_xlat19 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat19 = -abs(u_xlat19) + 1.0;
    u_xlat19 = sqrt(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat19) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat2.x = max(u_xlat0.y, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.y, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.165999994;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0625);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.y * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7 = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat8.xz = (-u_xlat0.yy) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.yy + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7 = (u_xlatb3) ? (-u_xlat7) : u_xlat7;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = vec2(u_xlat7) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).y;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.y;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                    u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                    u_xlat15.x = (-u_xlat2.x) * 12.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                    u_xlat15.x = (-u_xlat2.w) * 12.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                    u_xlat1.x = u_xlat2.x * 12.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                    u_xlat1.x = u_xlat2.w * 12.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat7) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat19 = texture(_DitheringTex, u_xlat2.xy).w;
    u_xlat19 = u_xlat19 * 2.0 + -1.0;
    u_xlat2.x = u_xlat19 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat19 = -abs(u_xlat19) + 1.0;
    u_xlat19 = sqrt(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat19) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
layout(location = 0) out vec2 vs_TEXCOORD0;
layout(location = 1) out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
layout(location = 0) in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec2 u_xlat9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat13;
bool u_xlatb13;
vec2 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
ivec2 u_xlati15;
vec2 u_xlat16;
float u_xlat19;
float u_xlat20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat1.x = textureLod(_MainTex, u_xlat1.xy, 0.0).y;
    u_xlat1.y = textureLod(_MainTex, u_xlat1.zw, 0.0).y;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat1.z = textureLod(_MainTex, u_xlat2.xy, 0.0).y;
    u_xlat1.w = textureLod(_MainTex, u_xlat2.zw, 0.0).y;
    u_xlat2.x = max(u_xlat0.y, u_xlat1.x);
    u_xlat8.x = min(u_xlat0.y, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.y, u_xlat2.x);
    u_xlat8.x = min(u_xlat1.y, u_xlat8.x);
    u_xlat14.x = max(u_xlat1.w, u_xlat1.z);
    u_xlat20 = min(u_xlat1.w, u_xlat1.z);
    u_xlat2.x = max(u_xlat2.x, u_xlat14.x);
    u_xlat8.x = min(u_xlat8.x, u_xlat20);
    u_xlat14.x = u_xlat2.x * 0.165999994;
    u_xlat2.x = (-u_xlat8.x) + u_xlat2.x;
    u_xlat8.x = max(u_xlat14.x, 0.0625);
    u_xlatb8 = u_xlat2.x>=u_xlat8.x;
    if(u_xlatb8){
        u_xlat8.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
        u_xlat8.xy = u_xlat8.xy * vec2(_RenderViewportScaleFactor);
        u_xlat8.x = textureLod(_MainTex, u_xlat8.xy, 0.0).y;
        u_xlat14.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
        u_xlat14.xy = u_xlat14.xy * vec2(_RenderViewportScaleFactor);
        u_xlat14.x = textureLod(_MainTex, u_xlat14.xy, 0.0).y;
        u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
        u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
        u_xlat20 = textureLod(_MainTex, u_xlat3.xy, 0.0).y;
        u_xlat3.x = textureLod(_MainTex, u_xlat3.zw, 0.0).y;
        u_xlat9.xy = u_xlat1.xy + u_xlat1.zw;
        u_xlat2.x = float(1.0) / u_xlat2.x;
        u_xlat21 = u_xlat9.y + u_xlat9.x;
        u_xlat9.x = u_xlat0.y * -2.0 + u_xlat9.x;
        u_xlat15.x = u_xlat0.y * -2.0 + u_xlat9.y;
        u_xlat4.x = u_xlat14.x + u_xlat20;
        u_xlat20 = u_xlat20 + u_xlat8.x;
        u_xlat10.x = u_xlat1.y * -2.0 + u_xlat4.x;
        u_xlat20 = u_xlat1.z * -2.0 + u_xlat20;
        u_xlat8.x = u_xlat8.x + u_xlat3.x;
        u_xlat14.x = u_xlat14.x + u_xlat3.x;
        u_xlat3.x = abs(u_xlat9.x) * 2.0 + abs(u_xlat10.x);
        u_xlat20 = abs(u_xlat15.x) * 2.0 + abs(u_xlat20);
        u_xlat9.x = u_xlat1.w * -2.0 + u_xlat8.x;
        u_xlat14.x = u_xlat1.x * -2.0 + u_xlat14.x;
        u_xlat3.x = u_xlat3.x + abs(u_xlat9.x);
        u_xlat14.x = u_xlat20 + abs(u_xlat14.x);
        u_xlat8.x = u_xlat4.x + u_xlat8.x;
        u_xlatb14 = u_xlat3.x>=u_xlat14.x;
        u_xlat8.x = u_xlat21 * 2.0 + u_xlat8.x;
        u_xlat1.xz = (bool(u_xlatb14)) ? u_xlat1.xz : u_xlat1.yw;
        u_xlat7 = (u_xlatb14) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat8.x * 0.0833333358 + (-u_xlat0.y);
        u_xlat8.xz = (-u_xlat0.yy) + u_xlat1.zx;
        u_xlat1.xz = u_xlat0.yy + u_xlat1.xz;
        u_xlatb3 = abs(u_xlat8.x)>=abs(u_xlat8.z);
        u_xlat8.x = max(abs(u_xlat8.z), abs(u_xlat8.x));
        u_xlat7 = (u_xlatb3) ? (-u_xlat7) : u_xlat7;
        u_xlat19 = u_xlat2.x * abs(u_xlat19);
        u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
        u_xlat2.x = u_xlatb14 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat2.w = (u_xlatb14) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat9.xy = vec2(u_xlat7) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat9.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat9.x;
        u_xlat9.y = (u_xlatb14) ? u_xlat9.y : vs_TEXCOORD0.y;
        u_xlat4.xy = (-u_xlat2.xw) + u_xlat9.xy;
        u_xlat5.xy = u_xlat2.xw + u_xlat9.xy;
        u_xlat9.x = u_xlat19 * -2.0 + 3.0;
        u_xlat15.xy = u_xlat4.xy;
        u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
        u_xlat15.xy = u_xlat15.xy * vec2(_RenderViewportScaleFactor);
        u_xlat15.x = textureLod(_MainTex, u_xlat15.xy, 0.0).y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat16.xy = u_xlat5.xy;
        u_xlat16.xy = clamp(u_xlat16.xy, 0.0, 1.0);
        u_xlat16.xy = u_xlat16.xy * vec2(_RenderViewportScaleFactor);
        u_xlat21 = textureLod(_MainTex, u_xlat16.xy, 0.0).y;
        u_xlat1.x = (u_xlatb3) ? u_xlat1.z : u_xlat1.x;
        u_xlat13 = u_xlat8.x * 0.25;
        u_xlat8.x = (-u_xlat1.x) * 0.5 + u_xlat0.y;
        u_xlat19 = u_xlat19 * u_xlat9.x;
        u_xlati8 = int((u_xlat8.x<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.x = (-u_xlat1.x) * 0.5 + u_xlat15.x;
        u_xlat3.y = (-u_xlat1.x) * 0.5 + u_xlat21;
        u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
        u_xlat16.x = (-u_xlat2.x) * 1.5 + u_xlat4.x;
        u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat16.x;
        u_xlat22 = (-u_xlat2.w) * 1.5 + u_xlat4.y;
        u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.y : u_xlat22;
        u_xlati10.xz = ~(u_xlati15.xy);
        u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
        u_xlat22 = u_xlat2.x * 1.5 + u_xlat5.x;
        u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
        u_xlat22 = u_xlat2.w * 1.5 + u_xlat5.y;
        u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.y : u_xlat22;
        if(u_xlati10.x != 0) {
            if(u_xlati15.x == 0) {
                u_xlat10.xz = u_xlat4.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            if(u_xlati15.y == 0) {
                u_xlat10.xz = u_xlat5.xz;
                u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
            }
            u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
            u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
            u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
            u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
            u_xlat10.x = (-u_xlat2.x) * 2.0 + u_xlat4.x;
            u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
            u_xlat10.x = (-u_xlat2.w) * 2.0 + u_xlat4.z;
            u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
            u_xlati10.xz = ~(u_xlati15.xy);
            u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
            u_xlat22 = u_xlat2.x * 2.0 + u_xlat5.x;
            u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
            u_xlat22 = u_xlat2.w * 2.0 + u_xlat5.z;
            u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
            if(u_xlati10.x != 0) {
                if(u_xlati15.x == 0) {
                    u_xlat10.xz = u_xlat4.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                if(u_xlati15.y == 0) {
                    u_xlat10.xz = u_xlat5.xz;
                    u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                    u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                    u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                }
                u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                u_xlat15.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat15.x;
                u_xlati15.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.xyxy), vec4(u_xlat13)).xy) * 0xFFFFFFFFu);
                u_xlat10.x = (-u_xlat2.x) * 4.0 + u_xlat4.x;
                u_xlat4.x = (u_xlati15.x != 0) ? u_xlat4.x : u_xlat10.x;
                u_xlat10.x = (-u_xlat2.w) * 4.0 + u_xlat4.z;
                u_xlat4.z = (u_xlati15.x != 0) ? u_xlat4.z : u_xlat10.x;
                u_xlati10.xz = ~(u_xlati15.xy);
                u_xlati10.x = int(uint(u_xlati10.z) | uint(u_xlati10.x));
                u_xlat22 = u_xlat2.x * 4.0 + u_xlat5.x;
                u_xlat5.x = (u_xlati15.y != 0) ? u_xlat5.x : u_xlat22;
                u_xlat22 = u_xlat2.w * 4.0 + u_xlat5.z;
                u_xlat5.z = (u_xlati15.y != 0) ? u_xlat5.z : u_xlat22;
                if(u_xlati10.x != 0) {
                    if(u_xlati15.x == 0) {
                        u_xlat10.xz = u_xlat4.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.x = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    if(u_xlati15.y == 0) {
                        u_xlat10.xz = u_xlat5.xz;
                        u_xlat10.xz = clamp(u_xlat10.xz, 0.0, 1.0);
                        u_xlat10.xz = u_xlat10.xz * vec2(_RenderViewportScaleFactor);
                        u_xlat3.y = textureLod(_MainTex, u_xlat10.xz, 0.0).y;
                    }
                    u_xlat10.x = (-u_xlat1.x) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati15.x != 0) ? u_xlat3.x : u_xlat10.x;
                    u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat3.y;
                    u_xlat3.y = (u_xlati15.y != 0) ? u_xlat3.y : u_xlat1.x;
                    u_xlatb1.xz = greaterThanEqual(abs(u_xlat3.xxyx), vec4(u_xlat13)).xz;
                    u_xlat15.x = (-u_xlat2.x) * 12.0 + u_xlat4.x;
                    u_xlat4.x = (u_xlatb1.x) ? u_xlat4.x : u_xlat15.x;
                    u_xlat15.x = (-u_xlat2.w) * 12.0 + u_xlat4.z;
                    u_xlat4.z = (u_xlatb1.x) ? u_xlat4.z : u_xlat15.x;
                    u_xlat1.x = u_xlat2.x * 12.0 + u_xlat5.x;
                    u_xlat5.x = (u_xlatb1.z) ? u_xlat5.x : u_xlat1.x;
                    u_xlat1.x = u_xlat2.w * 12.0 + u_xlat5.z;
                    u_xlat5.z = (u_xlatb1.z) ? u_xlat5.z : u_xlat1.x;
                }
            }
        }
        u_xlat1.x = (-u_xlat4.x) + vs_TEXCOORD0.x;
        u_xlat13 = u_xlat5.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat4.z) + vs_TEXCOORD0.y;
        u_xlat1.x = (u_xlatb14) ? u_xlat1.x : u_xlat2.x;
        u_xlat2.x = u_xlat5.z + (-vs_TEXCOORD0.y);
        u_xlat13 = (u_xlatb14) ? u_xlat13 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.xxxy, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat1.x + u_xlat13;
        u_xlatb2.xy = notEqual(ivec4(u_xlati8), u_xlati2.xwxx).xy;
        u_xlat20 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat1.x<u_xlat13;
        u_xlat1.x = min(u_xlat13, u_xlat1.x);
        u_xlatb13 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.y;
        u_xlat19 = u_xlat19 * u_xlat19;
        u_xlat1.x = u_xlat1.x * (-u_xlat20) + 0.5;
        u_xlat1.x = u_xlatb13 ? u_xlat1.x : float(0.0);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat7) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb14) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb14) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat19 = texture(_DitheringTex, u_xlat2.xy).w;
    u_xlat19 = u_xlat19 * 2.0 + -1.0;
    u_xlat2.x = u_xlat19 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat19 = -abs(u_xlat19) + 1.0;
    u_xlat19 = sqrt(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat19) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "d3d11 " {
Keywords { "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
}
}
}
SubShader {
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 68055
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0 = texture(_DitheringTex, u_xlat0.xy);
    u_xlat0.x = u_xlat0.w * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0 = texture(_DitheringTex, u_xlat0.xy);
    u_xlat0.x = u_xlat0.w * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0 = texture(_DitheringTex, u_xlat0.xy);
    u_xlat0.x = u_xlat0.w * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0 = texture(_DitheringTex, u_xlat0.xy);
    u_xlat0.x = u_xlat0.w * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0 = texture(_DitheringTex, u_xlat0.xy);
    u_xlat0.x = u_xlat0.w * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0 = texture(_DitheringTex, u_xlat0.xy);
    u_xlat0.x = u_xlat0.w * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0 = texture(_DitheringTex, u_xlat0.xy);
    u_xlat0.x = u_xlat0.w * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0 = texture(_DitheringTex, u_xlat0.xy);
    u_xlat0.x = u_xlat0.w * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Dithering_Coords;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat0 = texture(_DitheringTex, u_xlat0.xy);
    u_xlat0.x = u_xlat0.w * 2.0 + -1.0;
    u_xlat3.x = -abs(u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * 3.40282347e+38 + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    SV_Target0.w = u_xlat1.w;
    {
        vec3 hlslcc_movcTemp = u_xlat3;
        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat3 = hlslcc_movcTemp;
    }
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat1.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat2.x : u_xlat1.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat2.y : u_xlat1.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat2.z : u_xlat1.z;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
float u_xlat19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.w, u_xlat2.w);
    u_xlat10.x = min(u_xlat0.w, u_xlat2.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.w);
    u_xlat10.x = min(u_xlat10.x, u_xlat1.w);
    u_xlat19 = max(u_xlat3.w, u_xlat4.w);
    u_xlat2.x = min(u_xlat3.w, u_xlat4.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat19);
    u_xlat10.x = min(u_xlat10.x, u_xlat2.x);
    u_xlat19 = u_xlat1.x * 0.063000001;
    u_xlat1.x = (-u_xlat10.x) + u_xlat1.x;
    u_xlat10.x = max(u_xlat19, 0.0311999992);
    u_xlatb10 = u_xlat1.x>=u_xlat10.x;
    if(u_xlatb10){
        u_xlat10.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat10.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat10.x = u_xlat2.w + u_xlat4.w;
        u_xlat19 = u_xlat1.w + u_xlat3.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat19 + u_xlat10.x;
        u_xlat10.x = u_xlat0.w * -2.0 + u_xlat10.x;
        u_xlat19 = u_xlat0.w * -2.0 + u_xlat19;
        u_xlat11 = u_xlat6.w + u_xlat8.w;
        u_xlat20 = u_xlat5.w + u_xlat8.w;
        u_xlat3.x = u_xlat1.w * -2.0 + u_xlat11;
        u_xlat20 = u_xlat4.w * -2.0 + u_xlat20;
        u_xlat12.x = u_xlat5.w + u_xlat7.w;
        u_xlat21.x = u_xlat6.w + u_xlat7.w;
        u_xlat10.x = abs(u_xlat10.x) * 2.0 + abs(u_xlat3.x);
        u_xlat19 = abs(u_xlat19) * 2.0 + abs(u_xlat20);
        u_xlat20 = u_xlat3.w * -2.0 + u_xlat12.x;
        u_xlat3.x = u_xlat2.w * -2.0 + u_xlat21.x;
        u_xlat10.x = u_xlat10.x + abs(u_xlat20);
        u_xlat19 = u_xlat19 + abs(u_xlat3.x);
        u_xlat11 = u_xlat11 + u_xlat12.x;
        u_xlatb10 = u_xlat10.x>=u_xlat19;
        u_xlat19 = u_xlat2.x * 2.0 + u_xlat11;
        u_xlat2.x = (u_xlatb10) ? u_xlat4.w : u_xlat3.w;
        u_xlat28 = (u_xlatb10) ? u_xlat2.w : u_xlat1.w;
        u_xlat11 = (u_xlatb10) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat19 * 0.0833333358 + (-u_xlat0.w);
        u_xlat20 = (-u_xlat0.w) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.w) + u_xlat28;
        u_xlat2.x = u_xlat0.w + u_xlat2.x;
        u_xlat28 = u_xlat0.w + u_xlat28;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat19);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat19 = u_xlatb10 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb10) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb10) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat19 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat28 = (u_xlatb3) ? u_xlat2.x : u_xlat28;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat28) * 0.5 + u_xlat0.w;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat28) * 0.5 + u_xlat6.w;
        u_xlat3.x = (-u_xlat28) * 0.5 + u_xlat7.w;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            }
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                }
                u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    }
                    u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                    u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                    u_xlati22.xy = ~(u_xlati4.xy);
                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                    u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                    if(u_xlati22.x != 0) {
                        if(u_xlati4.x == 0) {
                            u_xlat22.xy = u_xlat23.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                        } else {
                            u_xlat7.x = u_xlat3.y;
                        }
                        if(u_xlati4.y == 0) {
                            u_xlat22.xy = u_xlat6.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                        }
                        u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                        u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                        u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                        u_xlati22.xy = ~(u_xlati4.xy);
                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                        u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                        if(u_xlati22.x != 0) {
                            if(u_xlati4.x == 0) {
                                u_xlat22.xy = u_xlat23.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                            } else {
                                u_xlat7.x = u_xlat3.y;
                            }
                            if(u_xlati4.y == 0) {
                                u_xlat22.xy = u_xlat6.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                            }
                            u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                            u_xlati22.xy = ~(u_xlati4.xy);
                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                            u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                            if(u_xlati22.x != 0) {
                                if(u_xlati4.x == 0) {
                                    u_xlat22.xy = u_xlat23.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                } else {
                                    u_xlat7.x = u_xlat3.y;
                                }
                                if(u_xlati4.y == 0) {
                                    u_xlat22.xy = u_xlat6.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                }
                                u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                u_xlati22.xy = ~(u_xlati4.xy);
                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                if(u_xlati22.x != 0) {
                                    if(u_xlati4.x == 0) {
                                        u_xlat22.xy = u_xlat23.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                    } else {
                                        u_xlat7.x = u_xlat3.y;
                                    }
                                    if(u_xlati4.y == 0) {
                                        u_xlat22.xy = u_xlat6.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                    }
                                    u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                    u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                    u_xlati22.xy = ~(u_xlati4.xy);
                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                    u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                    if(u_xlati22.x != 0) {
                                        if(u_xlati4.x == 0) {
                                            u_xlat22.xy = u_xlat23.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                        } else {
                                            u_xlat7.x = u_xlat3.y;
                                        }
                                        if(u_xlati4.y == 0) {
                                            u_xlat22.xy = u_xlat6.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                        }
                                        u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                        u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat22.x = (-u_xlat19) * 4.0 + u_xlat23.x;
                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                        u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                        u_xlati22.xy = ~(u_xlati4.xy);
                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                        u_xlat31 = u_xlat19 * 4.0 + u_xlat6.x;
                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                        u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                        if(u_xlati22.x != 0) {
                                            if(u_xlati4.x == 0) {
                                                u_xlat22.xy = u_xlat23.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                            } else {
                                                u_xlat7.x = u_xlat3.y;
                                            }
                                            if(u_xlati4.y == 0) {
                                                u_xlat22.xy = u_xlat6.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                            }
                                            u_xlat21.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                                            u_xlat28 = (-u_xlat28) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat28;
                                            u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                                            u_xlat28 = (-u_xlat19) * 8.0 + u_xlat23.x;
                                            u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat28;
                                            u_xlat28 = (-u_xlat29) * 8.0 + u_xlat23.y;
                                            u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat28;
                                            u_xlat19 = u_xlat19 * 8.0 + u_xlat6.x;
                                            u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat19;
                                            u_xlat19 = u_xlat29 * 8.0 + u_xlat6.y;
                                            u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat19;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat19 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat19 = (u_xlatb10) ? u_xlat19 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb10) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat19 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat19<u_xlat28;
        u_xlat19 = min(u_xlat28, u_xlat19);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat19 = u_xlat19 * (-u_xlat29) + 0.5;
        u_xlat19 = u_xlatb28 ? u_xlat19 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat19);
        u_xlat1.xz = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb10) ? u_xlat1.z : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.xyz = u_xlat1.xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat1.x = u_xlat1.w * 2.0 + -1.0;
    u_xlat10.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat10.x = u_xlat10.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat10.x;
    u_xlat10.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat10.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat10.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat10.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
float u_xlat19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.w, u_xlat2.w);
    u_xlat10.x = min(u_xlat0.w, u_xlat2.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.w);
    u_xlat10.x = min(u_xlat10.x, u_xlat1.w);
    u_xlat19 = max(u_xlat3.w, u_xlat4.w);
    u_xlat2.x = min(u_xlat3.w, u_xlat4.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat19);
    u_xlat10.x = min(u_xlat10.x, u_xlat2.x);
    u_xlat19 = u_xlat1.x * 0.063000001;
    u_xlat1.x = (-u_xlat10.x) + u_xlat1.x;
    u_xlat10.x = max(u_xlat19, 0.0311999992);
    u_xlatb10 = u_xlat1.x>=u_xlat10.x;
    if(u_xlatb10){
        u_xlat10.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat10.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat10.x = u_xlat2.w + u_xlat4.w;
        u_xlat19 = u_xlat1.w + u_xlat3.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat19 + u_xlat10.x;
        u_xlat10.x = u_xlat0.w * -2.0 + u_xlat10.x;
        u_xlat19 = u_xlat0.w * -2.0 + u_xlat19;
        u_xlat11 = u_xlat6.w + u_xlat8.w;
        u_xlat20 = u_xlat5.w + u_xlat8.w;
        u_xlat3.x = u_xlat1.w * -2.0 + u_xlat11;
        u_xlat20 = u_xlat4.w * -2.0 + u_xlat20;
        u_xlat12.x = u_xlat5.w + u_xlat7.w;
        u_xlat21.x = u_xlat6.w + u_xlat7.w;
        u_xlat10.x = abs(u_xlat10.x) * 2.0 + abs(u_xlat3.x);
        u_xlat19 = abs(u_xlat19) * 2.0 + abs(u_xlat20);
        u_xlat20 = u_xlat3.w * -2.0 + u_xlat12.x;
        u_xlat3.x = u_xlat2.w * -2.0 + u_xlat21.x;
        u_xlat10.x = u_xlat10.x + abs(u_xlat20);
        u_xlat19 = u_xlat19 + abs(u_xlat3.x);
        u_xlat11 = u_xlat11 + u_xlat12.x;
        u_xlatb10 = u_xlat10.x>=u_xlat19;
        u_xlat19 = u_xlat2.x * 2.0 + u_xlat11;
        u_xlat2.x = (u_xlatb10) ? u_xlat4.w : u_xlat3.w;
        u_xlat28 = (u_xlatb10) ? u_xlat2.w : u_xlat1.w;
        u_xlat11 = (u_xlatb10) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat19 * 0.0833333358 + (-u_xlat0.w);
        u_xlat20 = (-u_xlat0.w) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.w) + u_xlat28;
        u_xlat2.x = u_xlat0.w + u_xlat2.x;
        u_xlat28 = u_xlat0.w + u_xlat28;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat19);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat19 = u_xlatb10 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb10) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb10) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat19 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat28 = (u_xlatb3) ? u_xlat2.x : u_xlat28;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat28) * 0.5 + u_xlat0.w;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat28) * 0.5 + u_xlat6.w;
        u_xlat3.x = (-u_xlat28) * 0.5 + u_xlat7.w;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            }
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                }
                u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    }
                    u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                    u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                    u_xlati22.xy = ~(u_xlati4.xy);
                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                    u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                    if(u_xlati22.x != 0) {
                        if(u_xlati4.x == 0) {
                            u_xlat22.xy = u_xlat23.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                        } else {
                            u_xlat7.x = u_xlat3.y;
                        }
                        if(u_xlati4.y == 0) {
                            u_xlat22.xy = u_xlat6.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                        }
                        u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                        u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                        u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                        u_xlati22.xy = ~(u_xlati4.xy);
                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                        u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                        if(u_xlati22.x != 0) {
                            if(u_xlati4.x == 0) {
                                u_xlat22.xy = u_xlat23.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                            } else {
                                u_xlat7.x = u_xlat3.y;
                            }
                            if(u_xlati4.y == 0) {
                                u_xlat22.xy = u_xlat6.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                            }
                            u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                            u_xlati22.xy = ~(u_xlati4.xy);
                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                            u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                            if(u_xlati22.x != 0) {
                                if(u_xlati4.x == 0) {
                                    u_xlat22.xy = u_xlat23.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                } else {
                                    u_xlat7.x = u_xlat3.y;
                                }
                                if(u_xlati4.y == 0) {
                                    u_xlat22.xy = u_xlat6.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                }
                                u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                u_xlati22.xy = ~(u_xlati4.xy);
                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                if(u_xlati22.x != 0) {
                                    if(u_xlati4.x == 0) {
                                        u_xlat22.xy = u_xlat23.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                    } else {
                                        u_xlat7.x = u_xlat3.y;
                                    }
                                    if(u_xlati4.y == 0) {
                                        u_xlat22.xy = u_xlat6.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                    }
                                    u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                    u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                    u_xlati22.xy = ~(u_xlati4.xy);
                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                    u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                    if(u_xlati22.x != 0) {
                                        if(u_xlati4.x == 0) {
                                            u_xlat22.xy = u_xlat23.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                        } else {
                                            u_xlat7.x = u_xlat3.y;
                                        }
                                        if(u_xlati4.y == 0) {
                                            u_xlat22.xy = u_xlat6.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                        }
                                        u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                        u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat22.x = (-u_xlat19) * 4.0 + u_xlat23.x;
                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                        u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                        u_xlati22.xy = ~(u_xlati4.xy);
                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                        u_xlat31 = u_xlat19 * 4.0 + u_xlat6.x;
                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                        u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                        if(u_xlati22.x != 0) {
                                            if(u_xlati4.x == 0) {
                                                u_xlat22.xy = u_xlat23.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                            } else {
                                                u_xlat7.x = u_xlat3.y;
                                            }
                                            if(u_xlati4.y == 0) {
                                                u_xlat22.xy = u_xlat6.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                            }
                                            u_xlat21.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                                            u_xlat28 = (-u_xlat28) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat28;
                                            u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                                            u_xlat28 = (-u_xlat19) * 8.0 + u_xlat23.x;
                                            u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat28;
                                            u_xlat28 = (-u_xlat29) * 8.0 + u_xlat23.y;
                                            u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat28;
                                            u_xlat19 = u_xlat19 * 8.0 + u_xlat6.x;
                                            u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat19;
                                            u_xlat19 = u_xlat29 * 8.0 + u_xlat6.y;
                                            u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat19;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat19 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat19 = (u_xlatb10) ? u_xlat19 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb10) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat19 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat19<u_xlat28;
        u_xlat19 = min(u_xlat28, u_xlat19);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat19 = u_xlat19 * (-u_xlat29) + 0.5;
        u_xlat19 = u_xlatb28 ? u_xlat19 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat19);
        u_xlat1.xz = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb10) ? u_xlat1.z : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.xyz = u_xlat1.xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat1.x = u_xlat1.w * 2.0 + -1.0;
    u_xlat10.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat10.x = u_xlat10.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat10.x;
    u_xlat10.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat10.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat10.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat10.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
float u_xlat19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.w, u_xlat2.w);
    u_xlat10.x = min(u_xlat0.w, u_xlat2.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.w);
    u_xlat10.x = min(u_xlat10.x, u_xlat1.w);
    u_xlat19 = max(u_xlat3.w, u_xlat4.w);
    u_xlat2.x = min(u_xlat3.w, u_xlat4.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat19);
    u_xlat10.x = min(u_xlat10.x, u_xlat2.x);
    u_xlat19 = u_xlat1.x * 0.063000001;
    u_xlat1.x = (-u_xlat10.x) + u_xlat1.x;
    u_xlat10.x = max(u_xlat19, 0.0311999992);
    u_xlatb10 = u_xlat1.x>=u_xlat10.x;
    if(u_xlatb10){
        u_xlat10.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat10.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat10.x = u_xlat2.w + u_xlat4.w;
        u_xlat19 = u_xlat1.w + u_xlat3.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat19 + u_xlat10.x;
        u_xlat10.x = u_xlat0.w * -2.0 + u_xlat10.x;
        u_xlat19 = u_xlat0.w * -2.0 + u_xlat19;
        u_xlat11 = u_xlat6.w + u_xlat8.w;
        u_xlat20 = u_xlat5.w + u_xlat8.w;
        u_xlat3.x = u_xlat1.w * -2.0 + u_xlat11;
        u_xlat20 = u_xlat4.w * -2.0 + u_xlat20;
        u_xlat12.x = u_xlat5.w + u_xlat7.w;
        u_xlat21.x = u_xlat6.w + u_xlat7.w;
        u_xlat10.x = abs(u_xlat10.x) * 2.0 + abs(u_xlat3.x);
        u_xlat19 = abs(u_xlat19) * 2.0 + abs(u_xlat20);
        u_xlat20 = u_xlat3.w * -2.0 + u_xlat12.x;
        u_xlat3.x = u_xlat2.w * -2.0 + u_xlat21.x;
        u_xlat10.x = u_xlat10.x + abs(u_xlat20);
        u_xlat19 = u_xlat19 + abs(u_xlat3.x);
        u_xlat11 = u_xlat11 + u_xlat12.x;
        u_xlatb10 = u_xlat10.x>=u_xlat19;
        u_xlat19 = u_xlat2.x * 2.0 + u_xlat11;
        u_xlat2.x = (u_xlatb10) ? u_xlat4.w : u_xlat3.w;
        u_xlat28 = (u_xlatb10) ? u_xlat2.w : u_xlat1.w;
        u_xlat11 = (u_xlatb10) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat19 * 0.0833333358 + (-u_xlat0.w);
        u_xlat20 = (-u_xlat0.w) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.w) + u_xlat28;
        u_xlat2.x = u_xlat0.w + u_xlat2.x;
        u_xlat28 = u_xlat0.w + u_xlat28;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat19);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat19 = u_xlatb10 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb10) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb10) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat19 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat28 = (u_xlatb3) ? u_xlat2.x : u_xlat28;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat28) * 0.5 + u_xlat0.w;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat28) * 0.5 + u_xlat6.w;
        u_xlat3.x = (-u_xlat28) * 0.5 + u_xlat7.w;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            }
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                }
                u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    }
                    u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                    u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                    u_xlati22.xy = ~(u_xlati4.xy);
                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                    u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                    if(u_xlati22.x != 0) {
                        if(u_xlati4.x == 0) {
                            u_xlat22.xy = u_xlat23.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                        } else {
                            u_xlat7.x = u_xlat3.y;
                        }
                        if(u_xlati4.y == 0) {
                            u_xlat22.xy = u_xlat6.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                        }
                        u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                        u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                        u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                        u_xlati22.xy = ~(u_xlati4.xy);
                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                        u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                        if(u_xlati22.x != 0) {
                            if(u_xlati4.x == 0) {
                                u_xlat22.xy = u_xlat23.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                            } else {
                                u_xlat7.x = u_xlat3.y;
                            }
                            if(u_xlati4.y == 0) {
                                u_xlat22.xy = u_xlat6.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                            }
                            u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                            u_xlati22.xy = ~(u_xlati4.xy);
                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                            u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                            if(u_xlati22.x != 0) {
                                if(u_xlati4.x == 0) {
                                    u_xlat22.xy = u_xlat23.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                } else {
                                    u_xlat7.x = u_xlat3.y;
                                }
                                if(u_xlati4.y == 0) {
                                    u_xlat22.xy = u_xlat6.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                }
                                u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                u_xlati22.xy = ~(u_xlati4.xy);
                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                if(u_xlati22.x != 0) {
                                    if(u_xlati4.x == 0) {
                                        u_xlat22.xy = u_xlat23.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                    } else {
                                        u_xlat7.x = u_xlat3.y;
                                    }
                                    if(u_xlati4.y == 0) {
                                        u_xlat22.xy = u_xlat6.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                    }
                                    u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                    u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                    u_xlati22.xy = ~(u_xlati4.xy);
                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                    u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                    if(u_xlati22.x != 0) {
                                        if(u_xlati4.x == 0) {
                                            u_xlat22.xy = u_xlat23.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                        } else {
                                            u_xlat7.x = u_xlat3.y;
                                        }
                                        if(u_xlati4.y == 0) {
                                            u_xlat22.xy = u_xlat6.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                        }
                                        u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                        u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat22.x = (-u_xlat19) * 4.0 + u_xlat23.x;
                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                        u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                        u_xlati22.xy = ~(u_xlati4.xy);
                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                        u_xlat31 = u_xlat19 * 4.0 + u_xlat6.x;
                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                        u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                        if(u_xlati22.x != 0) {
                                            if(u_xlati4.x == 0) {
                                                u_xlat22.xy = u_xlat23.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                            } else {
                                                u_xlat7.x = u_xlat3.y;
                                            }
                                            if(u_xlati4.y == 0) {
                                                u_xlat22.xy = u_xlat6.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                                            }
                                            u_xlat21.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                                            u_xlat28 = (-u_xlat28) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat28;
                                            u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                                            u_xlat28 = (-u_xlat19) * 8.0 + u_xlat23.x;
                                            u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat28;
                                            u_xlat28 = (-u_xlat29) * 8.0 + u_xlat23.y;
                                            u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat28;
                                            u_xlat19 = u_xlat19 * 8.0 + u_xlat6.x;
                                            u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat19;
                                            u_xlat19 = u_xlat29 * 8.0 + u_xlat6.y;
                                            u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat19;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat19 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat19 = (u_xlatb10) ? u_xlat19 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb10) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat19 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat19<u_xlat28;
        u_xlat19 = min(u_xlat28, u_xlat19);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat19 = u_xlat19 * (-u_xlat29) + 0.5;
        u_xlat19 = u_xlatb28 ? u_xlat19 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat19);
        u_xlat1.xz = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb10) ? u_xlat1.z : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.xyz = u_xlat1.xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat1.x = u_xlat1.w * 2.0 + -1.0;
    u_xlat10.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat10.x = u_xlat10.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat10.x;
    u_xlat10.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat10.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat10.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat10.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.063000001;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0311999992);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                    u_xlati22.xy = ~(u_xlati4.xy);
                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                    if(u_xlati22.x != 0) {
                        if(u_xlati4.x == 0) {
                            u_xlat22.xy = u_xlat23.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        } else {
                            u_xlat7.x = u_xlat3.y;
                        }
                        if(u_xlati4.y == 0) {
                            u_xlat22.xy = u_xlat6.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        }
                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                        u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                        u_xlati22.xy = ~(u_xlati4.xy);
                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                        u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                        if(u_xlati22.x != 0) {
                            if(u_xlati4.x == 0) {
                                u_xlat22.xy = u_xlat23.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            } else {
                                u_xlat7.x = u_xlat3.y;
                            }
                            if(u_xlati4.y == 0) {
                                u_xlat22.xy = u_xlat6.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            }
                            u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                            u_xlati22.xy = ~(u_xlati4.xy);
                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                            if(u_xlati22.x != 0) {
                                if(u_xlati4.x == 0) {
                                    u_xlat22.xy = u_xlat23.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                } else {
                                    u_xlat7.x = u_xlat3.y;
                                }
                                if(u_xlati4.y == 0) {
                                    u_xlat22.xy = u_xlat6.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                }
                                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                u_xlati22.xy = ~(u_xlati4.xy);
                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                if(u_xlati22.x != 0) {
                                    if(u_xlati4.x == 0) {
                                        u_xlat22.xy = u_xlat23.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    } else {
                                        u_xlat7.x = u_xlat3.y;
                                    }
                                    if(u_xlati4.y == 0) {
                                        u_xlat22.xy = u_xlat6.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    }
                                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                    u_xlati22.xy = ~(u_xlati4.xy);
                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                    if(u_xlati22.x != 0) {
                                        if(u_xlati4.x == 0) {
                                            u_xlat22.xy = u_xlat23.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        } else {
                                            u_xlat7.x = u_xlat3.y;
                                        }
                                        if(u_xlati4.y == 0) {
                                            u_xlat22.xy = u_xlat6.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        }
                                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                        u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                        u_xlati22.xy = ~(u_xlati4.xy);
                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                        u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                        u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                        if(u_xlati22.x != 0) {
                                            if(u_xlati4.x == 0) {
                                                u_xlat22.xy = u_xlat23.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            } else {
                                                u_xlat7.x = u_xlat3.y;
                                            }
                                            if(u_xlati4.y == 0) {
                                                u_xlat22.xy = u_xlat6.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            }
                                            u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                                            u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                                            u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                                            u_xlat10 = (-u_xlat28) * 8.0 + u_xlat23.x;
                                            u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                                            u_xlat10 = (-u_xlat29) * 8.0 + u_xlat23.y;
                                            u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                                            u_xlat10 = u_xlat28 * 8.0 + u_xlat6.x;
                                            u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                                            u_xlat10 = u_xlat29 * 8.0 + u_xlat6.y;
                                            u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    }
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat27 = u_xlat2.w * 2.0 + -1.0;
    u_xlat1.x = u_xlat27 * 3.40282347e+38 + 0.5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat27 = -abs(u_xlat27) + 1.0;
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat1.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    u_xlat0.xyz = vec3(u_xlat27) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.063000001;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0311999992);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                    u_xlati22.xy = ~(u_xlati4.xy);
                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                    if(u_xlati22.x != 0) {
                        if(u_xlati4.x == 0) {
                            u_xlat22.xy = u_xlat23.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        } else {
                            u_xlat7.x = u_xlat3.y;
                        }
                        if(u_xlati4.y == 0) {
                            u_xlat22.xy = u_xlat6.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        }
                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                        u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                        u_xlati22.xy = ~(u_xlati4.xy);
                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                        u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                        if(u_xlati22.x != 0) {
                            if(u_xlati4.x == 0) {
                                u_xlat22.xy = u_xlat23.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            } else {
                                u_xlat7.x = u_xlat3.y;
                            }
                            if(u_xlati4.y == 0) {
                                u_xlat22.xy = u_xlat6.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            }
                            u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                            u_xlati22.xy = ~(u_xlati4.xy);
                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                            if(u_xlati22.x != 0) {
                                if(u_xlati4.x == 0) {
                                    u_xlat22.xy = u_xlat23.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                } else {
                                    u_xlat7.x = u_xlat3.y;
                                }
                                if(u_xlati4.y == 0) {
                                    u_xlat22.xy = u_xlat6.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                }
                                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                u_xlati22.xy = ~(u_xlati4.xy);
                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                if(u_xlati22.x != 0) {
                                    if(u_xlati4.x == 0) {
                                        u_xlat22.xy = u_xlat23.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    } else {
                                        u_xlat7.x = u_xlat3.y;
                                    }
                                    if(u_xlati4.y == 0) {
                                        u_xlat22.xy = u_xlat6.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    }
                                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                    u_xlati22.xy = ~(u_xlati4.xy);
                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                    if(u_xlati22.x != 0) {
                                        if(u_xlati4.x == 0) {
                                            u_xlat22.xy = u_xlat23.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        } else {
                                            u_xlat7.x = u_xlat3.y;
                                        }
                                        if(u_xlati4.y == 0) {
                                            u_xlat22.xy = u_xlat6.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        }
                                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                        u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                        u_xlati22.xy = ~(u_xlati4.xy);
                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                        u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                        u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                        if(u_xlati22.x != 0) {
                                            if(u_xlati4.x == 0) {
                                                u_xlat22.xy = u_xlat23.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            } else {
                                                u_xlat7.x = u_xlat3.y;
                                            }
                                            if(u_xlati4.y == 0) {
                                                u_xlat22.xy = u_xlat6.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            }
                                            u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                                            u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                                            u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                                            u_xlat10 = (-u_xlat28) * 8.0 + u_xlat23.x;
                                            u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                                            u_xlat10 = (-u_xlat29) * 8.0 + u_xlat23.y;
                                            u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                                            u_xlat10 = u_xlat28 * 8.0 + u_xlat6.x;
                                            u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                                            u_xlat10 = u_xlat29 * 8.0 + u_xlat6.y;
                                            u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    }
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat27 = u_xlat2.w * 2.0 + -1.0;
    u_xlat1.x = u_xlat27 * 3.40282347e+38 + 0.5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat27 = -abs(u_xlat27) + 1.0;
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat1.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    u_xlat0.xyz = vec3(u_xlat27) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.063000001;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0311999992);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                    u_xlati22.xy = ~(u_xlati4.xy);
                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                    if(u_xlati22.x != 0) {
                        if(u_xlati4.x == 0) {
                            u_xlat22.xy = u_xlat23.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        } else {
                            u_xlat7.x = u_xlat3.y;
                        }
                        if(u_xlati4.y == 0) {
                            u_xlat22.xy = u_xlat6.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        }
                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                        u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                        u_xlati22.xy = ~(u_xlati4.xy);
                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                        u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                        if(u_xlati22.x != 0) {
                            if(u_xlati4.x == 0) {
                                u_xlat22.xy = u_xlat23.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            } else {
                                u_xlat7.x = u_xlat3.y;
                            }
                            if(u_xlati4.y == 0) {
                                u_xlat22.xy = u_xlat6.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            }
                            u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                            u_xlati22.xy = ~(u_xlati4.xy);
                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                            if(u_xlati22.x != 0) {
                                if(u_xlati4.x == 0) {
                                    u_xlat22.xy = u_xlat23.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                } else {
                                    u_xlat7.x = u_xlat3.y;
                                }
                                if(u_xlati4.y == 0) {
                                    u_xlat22.xy = u_xlat6.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                }
                                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                u_xlati22.xy = ~(u_xlati4.xy);
                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                if(u_xlati22.x != 0) {
                                    if(u_xlati4.x == 0) {
                                        u_xlat22.xy = u_xlat23.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    } else {
                                        u_xlat7.x = u_xlat3.y;
                                    }
                                    if(u_xlati4.y == 0) {
                                        u_xlat22.xy = u_xlat6.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    }
                                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                    u_xlati22.xy = ~(u_xlati4.xy);
                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                    if(u_xlati22.x != 0) {
                                        if(u_xlati4.x == 0) {
                                            u_xlat22.xy = u_xlat23.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        } else {
                                            u_xlat7.x = u_xlat3.y;
                                        }
                                        if(u_xlati4.y == 0) {
                                            u_xlat22.xy = u_xlat6.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        }
                                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                        u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                        u_xlati22.xy = ~(u_xlati4.xy);
                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                        u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                        u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                        if(u_xlati22.x != 0) {
                                            if(u_xlati4.x == 0) {
                                                u_xlat22.xy = u_xlat23.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            } else {
                                                u_xlat7.x = u_xlat3.y;
                                            }
                                            if(u_xlati4.y == 0) {
                                                u_xlat22.xy = u_xlat6.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            }
                                            u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                                            u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                                            u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                                            u_xlat10 = (-u_xlat28) * 8.0 + u_xlat23.x;
                                            u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                                            u_xlat10 = (-u_xlat29) * 8.0 + u_xlat23.y;
                                            u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                                            u_xlat10 = u_xlat28 * 8.0 + u_xlat6.x;
                                            u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                                            u_xlat10 = u_xlat29 * 8.0 + u_xlat6.y;
                                            u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    }
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat27 = u_xlat2.w * 2.0 + -1.0;
    u_xlat1.x = u_xlat27 * 3.40282347e+38 + 0.5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat27 = -abs(u_xlat27) + 1.0;
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat1.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    u_xlat0.xyz = vec3(u_xlat27) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.063000001;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0311999992);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                    u_xlati22.xy = ~(u_xlati4.xy);
                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                    if(u_xlati22.x != 0) {
                        if(u_xlati4.x == 0) {
                            u_xlat22.xy = u_xlat23.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        } else {
                            u_xlat7.x = u_xlat3.y;
                        }
                        if(u_xlati4.y == 0) {
                            u_xlat22.xy = u_xlat6.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        }
                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                        u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                        u_xlati22.xy = ~(u_xlati4.xy);
                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                        u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                        if(u_xlati22.x != 0) {
                            if(u_xlati4.x == 0) {
                                u_xlat22.xy = u_xlat23.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            } else {
                                u_xlat7.x = u_xlat3.y;
                            }
                            if(u_xlati4.y == 0) {
                                u_xlat22.xy = u_xlat6.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            }
                            u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                            u_xlati22.xy = ~(u_xlati4.xy);
                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                            if(u_xlati22.x != 0) {
                                if(u_xlati4.x == 0) {
                                    u_xlat22.xy = u_xlat23.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                } else {
                                    u_xlat7.x = u_xlat3.y;
                                }
                                if(u_xlati4.y == 0) {
                                    u_xlat22.xy = u_xlat6.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                }
                                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                u_xlati22.xy = ~(u_xlati4.xy);
                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                if(u_xlati22.x != 0) {
                                    if(u_xlati4.x == 0) {
                                        u_xlat22.xy = u_xlat23.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    } else {
                                        u_xlat7.x = u_xlat3.y;
                                    }
                                    if(u_xlati4.y == 0) {
                                        u_xlat22.xy = u_xlat6.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    }
                                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                    u_xlati22.xy = ~(u_xlati4.xy);
                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                    if(u_xlati22.x != 0) {
                                        if(u_xlati4.x == 0) {
                                            u_xlat22.xy = u_xlat23.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        } else {
                                            u_xlat7.x = u_xlat3.y;
                                        }
                                        if(u_xlati4.y == 0) {
                                            u_xlat22.xy = u_xlat6.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        }
                                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                        u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                        u_xlati22.xy = ~(u_xlati4.xy);
                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                        u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                        u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                        if(u_xlati22.x != 0) {
                                            if(u_xlati4.x == 0) {
                                                u_xlat22.xy = u_xlat23.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            } else {
                                                u_xlat7.x = u_xlat3.y;
                                            }
                                            if(u_xlati4.y == 0) {
                                                u_xlat22.xy = u_xlat6.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            }
                                            u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                                            u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                                            u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                                            u_xlat10 = (-u_xlat28) * 8.0 + u_xlat23.x;
                                            u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                                            u_xlat10 = (-u_xlat29) * 8.0 + u_xlat23.y;
                                            u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                                            u_xlat10 = u_xlat28 * 8.0 + u_xlat6.x;
                                            u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                                            u_xlat10 = u_xlat29 * 8.0 + u_xlat6.y;
                                            u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat2.xy);
    u_xlat28 = u_xlat2.w * 2.0 + -1.0;
    u_xlat2.x = u_xlat28 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat28 = -abs(u_xlat28) + 1.0;
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat28) + 1.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat28) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.063000001;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0311999992);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                    u_xlati22.xy = ~(u_xlati4.xy);
                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                    if(u_xlati22.x != 0) {
                        if(u_xlati4.x == 0) {
                            u_xlat22.xy = u_xlat23.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        } else {
                            u_xlat7.x = u_xlat3.y;
                        }
                        if(u_xlati4.y == 0) {
                            u_xlat22.xy = u_xlat6.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        }
                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                        u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                        u_xlati22.xy = ~(u_xlati4.xy);
                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                        u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                        if(u_xlati22.x != 0) {
                            if(u_xlati4.x == 0) {
                                u_xlat22.xy = u_xlat23.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            } else {
                                u_xlat7.x = u_xlat3.y;
                            }
                            if(u_xlati4.y == 0) {
                                u_xlat22.xy = u_xlat6.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            }
                            u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                            u_xlati22.xy = ~(u_xlati4.xy);
                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                            if(u_xlati22.x != 0) {
                                if(u_xlati4.x == 0) {
                                    u_xlat22.xy = u_xlat23.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                } else {
                                    u_xlat7.x = u_xlat3.y;
                                }
                                if(u_xlati4.y == 0) {
                                    u_xlat22.xy = u_xlat6.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                }
                                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                u_xlati22.xy = ~(u_xlati4.xy);
                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                if(u_xlati22.x != 0) {
                                    if(u_xlati4.x == 0) {
                                        u_xlat22.xy = u_xlat23.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    } else {
                                        u_xlat7.x = u_xlat3.y;
                                    }
                                    if(u_xlati4.y == 0) {
                                        u_xlat22.xy = u_xlat6.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    }
                                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                    u_xlati22.xy = ~(u_xlati4.xy);
                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                    if(u_xlati22.x != 0) {
                                        if(u_xlati4.x == 0) {
                                            u_xlat22.xy = u_xlat23.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        } else {
                                            u_xlat7.x = u_xlat3.y;
                                        }
                                        if(u_xlati4.y == 0) {
                                            u_xlat22.xy = u_xlat6.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        }
                                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                        u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                        u_xlati22.xy = ~(u_xlati4.xy);
                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                        u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                        u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                        if(u_xlati22.x != 0) {
                                            if(u_xlati4.x == 0) {
                                                u_xlat22.xy = u_xlat23.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            } else {
                                                u_xlat7.x = u_xlat3.y;
                                            }
                                            if(u_xlati4.y == 0) {
                                                u_xlat22.xy = u_xlat6.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            }
                                            u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                                            u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                                            u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                                            u_xlat10 = (-u_xlat28) * 8.0 + u_xlat23.x;
                                            u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                                            u_xlat10 = (-u_xlat29) * 8.0 + u_xlat23.y;
                                            u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                                            u_xlat10 = u_xlat28 * 8.0 + u_xlat6.x;
                                            u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                                            u_xlat10 = u_xlat29 * 8.0 + u_xlat6.y;
                                            u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat2.xy);
    u_xlat28 = u_xlat2.w * 2.0 + -1.0;
    u_xlat2.x = u_xlat28 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat28 = -abs(u_xlat28) + 1.0;
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat28) + 1.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat28) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.063000001;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0311999992);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                    u_xlati22.xy = ~(u_xlati4.xy);
                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                    if(u_xlati22.x != 0) {
                        if(u_xlati4.x == 0) {
                            u_xlat22.xy = u_xlat23.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        } else {
                            u_xlat7.x = u_xlat3.y;
                        }
                        if(u_xlati4.y == 0) {
                            u_xlat22.xy = u_xlat6.xy;
                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                        }
                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                        u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                        u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                        u_xlati22.xy = ~(u_xlati4.xy);
                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                        u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                        u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                        if(u_xlati22.x != 0) {
                            if(u_xlati4.x == 0) {
                                u_xlat22.xy = u_xlat23.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            } else {
                                u_xlat7.x = u_xlat3.y;
                            }
                            if(u_xlati4.y == 0) {
                                u_xlat22.xy = u_xlat6.xy;
                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                            }
                            u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                            u_xlati22.xy = ~(u_xlati4.xy);
                            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                            if(u_xlati22.x != 0) {
                                if(u_xlati4.x == 0) {
                                    u_xlat22.xy = u_xlat23.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                } else {
                                    u_xlat7.x = u_xlat3.y;
                                }
                                if(u_xlati4.y == 0) {
                                    u_xlat22.xy = u_xlat6.xy;
                                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                }
                                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                u_xlati22.xy = ~(u_xlati4.xy);
                                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                if(u_xlati22.x != 0) {
                                    if(u_xlati4.x == 0) {
                                        u_xlat22.xy = u_xlat23.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    } else {
                                        u_xlat7.x = u_xlat3.y;
                                    }
                                    if(u_xlati4.y == 0) {
                                        u_xlat22.xy = u_xlat6.xy;
                                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                    }
                                    u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                    u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                    u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                    u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
                                    u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                    u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
                                    u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                    u_xlati22.xy = ~(u_xlati4.xy);
                                    u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                    u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
                                    u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                    u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
                                    u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                    if(u_xlati22.x != 0) {
                                        if(u_xlati4.x == 0) {
                                            u_xlat22.xy = u_xlat23.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        } else {
                                            u_xlat7.x = u_xlat3.y;
                                        }
                                        if(u_xlati4.y == 0) {
                                            u_xlat22.xy = u_xlat6.xy;
                                            u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                            u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                            u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                        }
                                        u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                        u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                                        u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                                        u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                                        u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                                        u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                                        u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                                        u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                                        u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                                        u_xlati22.xy = ~(u_xlati4.xy);
                                        u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                                        u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                                        u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                                        u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                                        u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                                        if(u_xlati22.x != 0) {
                                            if(u_xlati4.x == 0) {
                                                u_xlat22.xy = u_xlat23.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            } else {
                                                u_xlat7.x = u_xlat3.y;
                                            }
                                            if(u_xlati4.y == 0) {
                                                u_xlat22.xy = u_xlat6.xy;
                                                u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                                                u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                                                u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                                            }
                                            u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                                            u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                                            u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                                            u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                                            u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                                            u_xlat10 = (-u_xlat28) * 8.0 + u_xlat23.x;
                                            u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                                            u_xlat10 = (-u_xlat29) * 8.0 + u_xlat23.y;
                                            u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                                            u_xlat10 = u_xlat28 * 8.0 + u_xlat6.x;
                                            u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                                            u_xlat10 = u_xlat29 * 8.0 + u_xlat6.y;
                                            u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat2.xy);
    u_xlat28 = u_xlat2.w * 2.0 + -1.0;
    u_xlat2.x = u_xlat28 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat28 = -abs(u_xlat28) + 1.0;
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat28) + 1.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat28) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
float u_xlat19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.w, u_xlat2.w);
    u_xlat10.x = min(u_xlat0.w, u_xlat2.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.w);
    u_xlat10.x = min(u_xlat10.x, u_xlat1.w);
    u_xlat19 = max(u_xlat3.w, u_xlat4.w);
    u_xlat2.x = min(u_xlat3.w, u_xlat4.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat19);
    u_xlat10.x = min(u_xlat10.x, u_xlat2.x);
    u_xlat19 = u_xlat1.x * 0.165999994;
    u_xlat1.x = (-u_xlat10.x) + u_xlat1.x;
    u_xlat10.x = max(u_xlat19, 0.0625);
    u_xlatb10 = u_xlat1.x>=u_xlat10.x;
    if(u_xlatb10){
        u_xlat10.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat10.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat10.x = u_xlat2.w + u_xlat4.w;
        u_xlat19 = u_xlat1.w + u_xlat3.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat19 + u_xlat10.x;
        u_xlat10.x = u_xlat0.w * -2.0 + u_xlat10.x;
        u_xlat19 = u_xlat0.w * -2.0 + u_xlat19;
        u_xlat11 = u_xlat6.w + u_xlat8.w;
        u_xlat20 = u_xlat5.w + u_xlat8.w;
        u_xlat3.x = u_xlat1.w * -2.0 + u_xlat11;
        u_xlat20 = u_xlat4.w * -2.0 + u_xlat20;
        u_xlat12.x = u_xlat5.w + u_xlat7.w;
        u_xlat21.x = u_xlat6.w + u_xlat7.w;
        u_xlat10.x = abs(u_xlat10.x) * 2.0 + abs(u_xlat3.x);
        u_xlat19 = abs(u_xlat19) * 2.0 + abs(u_xlat20);
        u_xlat20 = u_xlat3.w * -2.0 + u_xlat12.x;
        u_xlat3.x = u_xlat2.w * -2.0 + u_xlat21.x;
        u_xlat10.x = u_xlat10.x + abs(u_xlat20);
        u_xlat19 = u_xlat19 + abs(u_xlat3.x);
        u_xlat11 = u_xlat11 + u_xlat12.x;
        u_xlatb10 = u_xlat10.x>=u_xlat19;
        u_xlat19 = u_xlat2.x * 2.0 + u_xlat11;
        u_xlat2.x = (u_xlatb10) ? u_xlat4.w : u_xlat3.w;
        u_xlat28 = (u_xlatb10) ? u_xlat2.w : u_xlat1.w;
        u_xlat11 = (u_xlatb10) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat19 * 0.0833333358 + (-u_xlat0.w);
        u_xlat20 = (-u_xlat0.w) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.w) + u_xlat28;
        u_xlat2.x = u_xlat0.w + u_xlat2.x;
        u_xlat28 = u_xlat0.w + u_xlat28;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat19);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat19 = u_xlatb10 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb10) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb10) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat19 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat28 = (u_xlatb3) ? u_xlat2.x : u_xlat28;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat28) * 0.5 + u_xlat0.w;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat28) * 0.5 + u_xlat6.w;
        u_xlat3.x = (-u_xlat28) * 0.5 + u_xlat7.w;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            }
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                }
                u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat19) * 4.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat19 * 4.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    }
                    u_xlat21.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                    u_xlat28 = (-u_xlat28) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat28;
                    u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                    u_xlat28 = (-u_xlat19) * 12.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat28;
                    u_xlat28 = (-u_xlat29) * 12.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat28;
                    u_xlat19 = u_xlat19 * 12.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat19;
                    u_xlat19 = u_xlat29 * 12.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat19;
                }
            }
        }
        u_xlat19 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat19 = (u_xlatb10) ? u_xlat19 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb10) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat19 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat19<u_xlat28;
        u_xlat19 = min(u_xlat28, u_xlat19);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat19 = u_xlat19 * (-u_xlat29) + 0.5;
        u_xlat19 = u_xlatb28 ? u_xlat19 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat19);
        u_xlat1.xz = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb10) ? u_xlat1.z : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.xyz = u_xlat1.xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat1.x = u_xlat1.w * 2.0 + -1.0;
    u_xlat10.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat10.x = u_xlat10.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat10.x;
    u_xlat10.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat10.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat10.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat10.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
float u_xlat19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.w, u_xlat2.w);
    u_xlat10.x = min(u_xlat0.w, u_xlat2.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.w);
    u_xlat10.x = min(u_xlat10.x, u_xlat1.w);
    u_xlat19 = max(u_xlat3.w, u_xlat4.w);
    u_xlat2.x = min(u_xlat3.w, u_xlat4.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat19);
    u_xlat10.x = min(u_xlat10.x, u_xlat2.x);
    u_xlat19 = u_xlat1.x * 0.165999994;
    u_xlat1.x = (-u_xlat10.x) + u_xlat1.x;
    u_xlat10.x = max(u_xlat19, 0.0625);
    u_xlatb10 = u_xlat1.x>=u_xlat10.x;
    if(u_xlatb10){
        u_xlat10.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat10.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat10.x = u_xlat2.w + u_xlat4.w;
        u_xlat19 = u_xlat1.w + u_xlat3.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat19 + u_xlat10.x;
        u_xlat10.x = u_xlat0.w * -2.0 + u_xlat10.x;
        u_xlat19 = u_xlat0.w * -2.0 + u_xlat19;
        u_xlat11 = u_xlat6.w + u_xlat8.w;
        u_xlat20 = u_xlat5.w + u_xlat8.w;
        u_xlat3.x = u_xlat1.w * -2.0 + u_xlat11;
        u_xlat20 = u_xlat4.w * -2.0 + u_xlat20;
        u_xlat12.x = u_xlat5.w + u_xlat7.w;
        u_xlat21.x = u_xlat6.w + u_xlat7.w;
        u_xlat10.x = abs(u_xlat10.x) * 2.0 + abs(u_xlat3.x);
        u_xlat19 = abs(u_xlat19) * 2.0 + abs(u_xlat20);
        u_xlat20 = u_xlat3.w * -2.0 + u_xlat12.x;
        u_xlat3.x = u_xlat2.w * -2.0 + u_xlat21.x;
        u_xlat10.x = u_xlat10.x + abs(u_xlat20);
        u_xlat19 = u_xlat19 + abs(u_xlat3.x);
        u_xlat11 = u_xlat11 + u_xlat12.x;
        u_xlatb10 = u_xlat10.x>=u_xlat19;
        u_xlat19 = u_xlat2.x * 2.0 + u_xlat11;
        u_xlat2.x = (u_xlatb10) ? u_xlat4.w : u_xlat3.w;
        u_xlat28 = (u_xlatb10) ? u_xlat2.w : u_xlat1.w;
        u_xlat11 = (u_xlatb10) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat19 * 0.0833333358 + (-u_xlat0.w);
        u_xlat20 = (-u_xlat0.w) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.w) + u_xlat28;
        u_xlat2.x = u_xlat0.w + u_xlat2.x;
        u_xlat28 = u_xlat0.w + u_xlat28;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat19);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat19 = u_xlatb10 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb10) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb10) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat19 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat28 = (u_xlatb3) ? u_xlat2.x : u_xlat28;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat28) * 0.5 + u_xlat0.w;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat28) * 0.5 + u_xlat6.w;
        u_xlat3.x = (-u_xlat28) * 0.5 + u_xlat7.w;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            }
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                }
                u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat19) * 4.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat19 * 4.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    }
                    u_xlat21.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                    u_xlat28 = (-u_xlat28) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat28;
                    u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                    u_xlat28 = (-u_xlat19) * 12.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat28;
                    u_xlat28 = (-u_xlat29) * 12.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat28;
                    u_xlat19 = u_xlat19 * 12.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat19;
                    u_xlat19 = u_xlat29 * 12.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat19;
                }
            }
        }
        u_xlat19 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat19 = (u_xlatb10) ? u_xlat19 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb10) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat19 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat19<u_xlat28;
        u_xlat19 = min(u_xlat28, u_xlat19);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat19 = u_xlat19 * (-u_xlat29) + 0.5;
        u_xlat19 = u_xlatb28 ? u_xlat19 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat19);
        u_xlat1.xz = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb10) ? u_xlat1.z : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.xyz = u_xlat1.xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat1.x = u_xlat1.w * 2.0 + -1.0;
    u_xlat10.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat10.x = u_xlat10.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat10.x;
    u_xlat10.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat10.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat10.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat10.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
float u_xlat19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.w, u_xlat2.w);
    u_xlat10.x = min(u_xlat0.w, u_xlat2.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.w);
    u_xlat10.x = min(u_xlat10.x, u_xlat1.w);
    u_xlat19 = max(u_xlat3.w, u_xlat4.w);
    u_xlat2.x = min(u_xlat3.w, u_xlat4.w);
    u_xlat1.x = max(u_xlat1.x, u_xlat19);
    u_xlat10.x = min(u_xlat10.x, u_xlat2.x);
    u_xlat19 = u_xlat1.x * 0.165999994;
    u_xlat1.x = (-u_xlat10.x) + u_xlat1.x;
    u_xlat10.x = max(u_xlat19, 0.0625);
    u_xlatb10 = u_xlat1.x>=u_xlat10.x;
    if(u_xlatb10){
        u_xlat10.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat10.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat10.xy = clamp(u_xlat10.xy, 0.0, 1.0);
        u_xlat10.xy = u_xlat10.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat10.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat10.x = u_xlat2.w + u_xlat4.w;
        u_xlat19 = u_xlat1.w + u_xlat3.w;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat19 + u_xlat10.x;
        u_xlat10.x = u_xlat0.w * -2.0 + u_xlat10.x;
        u_xlat19 = u_xlat0.w * -2.0 + u_xlat19;
        u_xlat11 = u_xlat6.w + u_xlat8.w;
        u_xlat20 = u_xlat5.w + u_xlat8.w;
        u_xlat3.x = u_xlat1.w * -2.0 + u_xlat11;
        u_xlat20 = u_xlat4.w * -2.0 + u_xlat20;
        u_xlat12.x = u_xlat5.w + u_xlat7.w;
        u_xlat21.x = u_xlat6.w + u_xlat7.w;
        u_xlat10.x = abs(u_xlat10.x) * 2.0 + abs(u_xlat3.x);
        u_xlat19 = abs(u_xlat19) * 2.0 + abs(u_xlat20);
        u_xlat20 = u_xlat3.w * -2.0 + u_xlat12.x;
        u_xlat3.x = u_xlat2.w * -2.0 + u_xlat21.x;
        u_xlat10.x = u_xlat10.x + abs(u_xlat20);
        u_xlat19 = u_xlat19 + abs(u_xlat3.x);
        u_xlat11 = u_xlat11 + u_xlat12.x;
        u_xlatb10 = u_xlat10.x>=u_xlat19;
        u_xlat19 = u_xlat2.x * 2.0 + u_xlat11;
        u_xlat2.x = (u_xlatb10) ? u_xlat4.w : u_xlat3.w;
        u_xlat28 = (u_xlatb10) ? u_xlat2.w : u_xlat1.w;
        u_xlat11 = (u_xlatb10) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat19 = u_xlat19 * 0.0833333358 + (-u_xlat0.w);
        u_xlat20 = (-u_xlat0.w) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.w) + u_xlat28;
        u_xlat2.x = u_xlat0.w + u_xlat2.x;
        u_xlat28 = u_xlat0.w + u_xlat28;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat19);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat19 = u_xlatb10 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb10) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb10) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat19) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat19 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat28 = (u_xlatb3) ? u_xlat2.x : u_xlat28;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat28) * 0.5 + u_xlat0.w;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat28) * 0.5 + u_xlat6.w;
        u_xlat3.x = (-u_xlat28) * 0.5 + u_xlat7.w;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat19) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat19 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).wxyz;
            }
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat19) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat19 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                }
                u_xlat22.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat28) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat19) * 4.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat19 * 4.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).wxyz;
                    }
                    u_xlat21.x = (-u_xlat28) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                    u_xlat28 = (-u_xlat28) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat28;
                    u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                    u_xlat28 = (-u_xlat19) * 12.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat28;
                    u_xlat28 = (-u_xlat29) * 12.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat28;
                    u_xlat19 = u_xlat19 * 12.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat19;
                    u_xlat19 = u_xlat29 * 12.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat19;
                }
            }
        }
        u_xlat19 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat19 = (u_xlatb10) ? u_xlat19 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb10) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat19 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat19<u_xlat28;
        u_xlat19 = min(u_xlat28, u_xlat19);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat19 = u_xlat19 * (-u_xlat29) + 0.5;
        u_xlat19 = u_xlatb28 ? u_xlat19 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat19);
        u_xlat1.xz = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb10) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb10) ? u_xlat1.z : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.xyz = u_xlat1.xyz;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat1 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat1.x = u_xlat1.w * 2.0 + -1.0;
    u_xlat10.x = u_xlat1.x * 3.40282347e+38 + 0.5;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat10.x = u_xlat10.x * 2.0 + -1.0;
    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * u_xlat10.x;
    u_xlat10.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat10.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat10.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat10.z : u_xlat2.z;
    u_xlat0.xyz = u_xlat1.xxx * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.165999994;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0625);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                    u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                    u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                    u_xlat10 = (-u_xlat28) * 12.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                    u_xlat10 = (-u_xlat29) * 12.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                    u_xlat10 = u_xlat28 * 12.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                    u_xlat10 = u_xlat29 * 12.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    }
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat27 = u_xlat2.w * 2.0 + -1.0;
    u_xlat1.x = u_xlat27 * 3.40282347e+38 + 0.5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat27 = -abs(u_xlat27) + 1.0;
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat1.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    u_xlat0.xyz = vec3(u_xlat27) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.165999994;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0625);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                    u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                    u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                    u_xlat10 = (-u_xlat28) * 12.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                    u_xlat10 = (-u_xlat29) * 12.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                    u_xlat10 = u_xlat28 * 12.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                    u_xlat10 = u_xlat29 * 12.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    }
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat27 = u_xlat2.w * 2.0 + -1.0;
    u_xlat1.x = u_xlat27 * 3.40282347e+38 + 0.5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat27 = -abs(u_xlat27) + 1.0;
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat1.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    u_xlat0.xyz = vec3(u_xlat27) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.165999994;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0625);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                    u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                    u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                    u_xlat10 = (-u_xlat28) * 12.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                    u_xlat10 = (-u_xlat29) * 12.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                    u_xlat10 = u_xlat28 * 12.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                    u_xlat10 = u_xlat29 * 12.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat0 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    }
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat1.xy);
    u_xlat27 = u_xlat2.w * 2.0 + -1.0;
    u_xlat1.x = u_xlat27 * 3.40282347e+38 + 0.5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * 2.0 + -1.0;
    u_xlat27 = -abs(u_xlat27) + 1.0;
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat1.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat2.xyz = max(abs(u_xlat0.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    u_xlat0.xyz = vec3(u_xlat27) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat2.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat2.xyz = max(abs(u_xlat2.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlatb0.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
    SV_Target0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat2.x;
    SV_Target0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat2.y;
    SV_Target0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat2.z;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.165999994;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0625);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                    u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                    u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                    u_xlat10 = (-u_xlat28) * 12.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                    u_xlat10 = (-u_xlat29) * 12.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                    u_xlat10 = u_xlat28 * 12.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                    u_xlat10 = u_xlat29 * 12.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat2.xy);
    u_xlat28 = u_xlat2.w * 2.0 + -1.0;
    u_xlat2.x = u_xlat28 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat28 = -abs(u_xlat28) + 1.0;
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat28) + 1.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat28) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	float _DepthSlice;
uniform 	vec4 _UVTransform;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    gl_Layer = int(uint(_DepthSlice));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.165999994;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0625);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                    u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                    u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                    u_xlat10 = (-u_xlat28) * 12.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                    u_xlat10 = (-u_xlat29) * 12.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                    u_xlat10 = u_xlat28 * 12.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                    u_xlat10 = u_xlat29 * 12.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat2.xy);
    u_xlat28 = u_xlat2.w * 2.0 + -1.0;
    u_xlat2.x = u_xlat28 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat28 = -abs(u_xlat28) + 1.0;
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat28) + 1.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat28) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
uniform 	vec4 _PosScaleOffset;
in  vec3 in_POSITION0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy * _PosScaleOffset.xy + _PosScaleOffset.zw;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _DitheringTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec4 u_xlat2;
ivec4 u_xlati2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
ivec2 u_xlati4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat13;
vec2 u_xlat19;
bool u_xlatb19;
float u_xlat20;
int u_xlati20;
vec2 u_xlat21;
bvec2 u_xlatb21;
vec2 u_xlat22;
ivec2 u_xlati22;
vec2 u_xlat23;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
    u_xlat1.x = max(u_xlat0.y, u_xlat2.y);
    u_xlat19.x = min(u_xlat0.y, u_xlat2.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat1.y);
    u_xlat19.x = min(u_xlat19.x, u_xlat1.y);
    u_xlat28 = max(u_xlat3.y, u_xlat4.y);
    u_xlat2.x = min(u_xlat3.y, u_xlat4.y);
    u_xlat1.x = max(u_xlat1.x, u_xlat28);
    u_xlat19.x = min(u_xlat19.x, u_xlat2.x);
    u_xlat28 = u_xlat1.x * 0.165999994;
    u_xlat1.x = (-u_xlat19.x) + u_xlat1.x;
    u_xlat19.x = max(u_xlat28, 0.0625);
    u_xlatb19 = u_xlat1.x>=u_xlat19.x;
    if(u_xlatb19){
        u_xlat19.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat5 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat19.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
        u_xlat19.xy = clamp(u_xlat19.xy, 0.0, 1.0);
        u_xlat19.xy = u_xlat19.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
        u_xlat7 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
        u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
        u_xlat7 = u_xlat7 * vec4(_RenderViewportScaleFactor);
        u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
        u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
        u_xlat19.x = u_xlat2.y + u_xlat4.y;
        u_xlat28 = u_xlat1.y + u_xlat3.y;
        u_xlat1.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat28 + u_xlat19.x;
        u_xlat19.x = u_xlat0.y * -2.0 + u_xlat19.x;
        u_xlat28 = u_xlat0.y * -2.0 + u_xlat28;
        u_xlat20 = u_xlat6.y + u_xlat8.y;
        u_xlat29 = u_xlat5.y + u_xlat8.y;
        u_xlat3.x = u_xlat1.y * -2.0 + u_xlat20;
        u_xlat29 = u_xlat4.y * -2.0 + u_xlat29;
        u_xlat21.x = u_xlat5.y + u_xlat7.y;
        u_xlat30 = u_xlat6.y + u_xlat7.y;
        u_xlat19.x = abs(u_xlat19.x) * 2.0 + abs(u_xlat3.x);
        u_xlat28 = abs(u_xlat28) * 2.0 + abs(u_xlat29);
        u_xlat29 = u_xlat3.y * -2.0 + u_xlat21.x;
        u_xlat3.x = u_xlat2.y * -2.0 + u_xlat30;
        u_xlat19.x = u_xlat19.x + abs(u_xlat29);
        u_xlat28 = u_xlat28 + abs(u_xlat3.x);
        u_xlat20 = u_xlat20 + u_xlat21.x;
        u_xlatb19 = u_xlat19.x>=u_xlat28;
        u_xlat28 = u_xlat2.x * 2.0 + u_xlat20;
        u_xlat2.x = (u_xlatb19) ? u_xlat4.y : u_xlat3.y;
        u_xlat10 = (u_xlatb19) ? u_xlat2.y : u_xlat1.y;
        u_xlat11 = (u_xlatb19) ? _MainTex_TexelSize.y : _MainTex_TexelSize.x;
        u_xlat28 = u_xlat28 * 0.0833333358 + (-u_xlat0.y);
        u_xlat20 = (-u_xlat0.y) + u_xlat2.x;
        u_xlat29 = (-u_xlat0.y) + u_xlat10;
        u_xlat2.x = u_xlat0.y + u_xlat2.x;
        u_xlat10 = u_xlat0.y + u_xlat10;
        u_xlatb3 = abs(u_xlat20)>=abs(u_xlat29);
        u_xlat20 = max(abs(u_xlat29), abs(u_xlat20));
        u_xlat11 = (u_xlatb3) ? (-u_xlat11) : u_xlat11;
        u_xlat1.x = u_xlat1.x * abs(u_xlat28);
        u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
        u_xlat28 = u_xlatb19 ? _MainTex_TexelSize.x : float(0.0);
        u_xlat29 = (u_xlatb19) ? 0.0 : _MainTex_TexelSize.y;
        u_xlat12.xy = vec2(u_xlat11) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
        u_xlat12.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat12.x;
        u_xlat21.x = (u_xlatb19) ? u_xlat12.y : vs_TEXCOORD0.y;
        u_xlat4.x = (-u_xlat28) + u_xlat12.x;
        u_xlat4.y = (-u_xlat29) + u_xlat21.x;
        u_xlat5.x = u_xlat28 + u_xlat12.x;
        u_xlat5.y = u_xlat29 + u_xlat21.x;
        u_xlat12.x = u_xlat1.x * -2.0 + 3.0;
        u_xlat21.xy = u_xlat4.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat6 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat21.xy = u_xlat5.xy;
        u_xlat21.xy = clamp(u_xlat21.xy, 0.0, 1.0);
        u_xlat21.xy = u_xlat21.xy * vec2(_RenderViewportScaleFactor);
        u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
        u_xlat10 = (u_xlatb3) ? u_xlat2.x : u_xlat10;
        u_xlat2.x = u_xlat20 * 0.25;
        u_xlat20 = (-u_xlat10) * 0.5 + u_xlat0.y;
        u_xlat1.x = u_xlat1.x * u_xlat12.x;
        u_xlati20 = int((u_xlat20<0.0) ? 0xFFFFFFFFu : uint(0));
        u_xlat3.y = (-u_xlat10) * 0.5 + u_xlat6.y;
        u_xlat3.x = (-u_xlat10) * 0.5 + u_xlat7.y;
        u_xlati22.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
        u_xlat23.x = (-u_xlat28) * 1.5 + u_xlat4.x;
        u_xlat23.x = (u_xlati22.x != 0) ? u_xlat4.x : u_xlat23.x;
        u_xlat4.x = (-u_xlat29) * 1.5 + u_xlat4.y;
        u_xlat23.y = (u_xlati22.x != 0) ? u_xlat4.y : u_xlat4.x;
        u_xlati4.xy = ~(u_xlati22.xy);
        u_xlati4.x = int(uint(u_xlati4.y) | uint(u_xlati4.x));
        u_xlat13 = u_xlat28 * 1.5 + u_xlat5.x;
        u_xlat6.x = (u_xlati22.y != 0) ? u_xlat5.x : u_xlat13;
        u_xlat13 = u_xlat29 * 1.5 + u_xlat5.y;
        u_xlat6.y = (u_xlati22.y != 0) ? u_xlat5.y : u_xlat13;
        if(u_xlati4.x != 0) {
            if(u_xlati22.x == 0) {
                u_xlat4.xy = u_xlat23.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            } else {
                u_xlat7.x = u_xlat3.y;
            }
            if(u_xlati22.y == 0) {
                u_xlat4.xy = u_xlat6.xy;
                u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
                u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
                u_xlat3 = textureLod(_MainTex, u_xlat4.xy, 0.0).yxzw;
            }
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat7.x;
            u_xlat3.y = (u_xlati22.x != 0) ? u_xlat7.x : u_xlat4.x;
            u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
            u_xlat3.x = (u_xlati22.y != 0) ? u_xlat3.x : u_xlat4.x;
            u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
            u_xlat22.x = (-u_xlat28) * 2.0 + u_xlat23.x;
            u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
            u_xlat22.x = (-u_xlat29) * 2.0 + u_xlat23.y;
            u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
            u_xlati22.xy = ~(u_xlati4.xy);
            u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
            u_xlat31 = u_xlat28 * 2.0 + u_xlat6.x;
            u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
            u_xlat31 = u_xlat29 * 2.0 + u_xlat6.y;
            u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
            if(u_xlati22.x != 0) {
                if(u_xlati4.x == 0) {
                    u_xlat22.xy = u_xlat23.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                } else {
                    u_xlat7.x = u_xlat3.y;
                }
                if(u_xlati4.y == 0) {
                    u_xlat22.xy = u_xlat6.xy;
                    u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                    u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                    u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                }
                u_xlat22.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat22.x;
                u_xlat4.x = (-u_xlat10) * 0.5 + u_xlat3.x;
                u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat4.x;
                u_xlati4.xy = ivec2(uvec2(greaterThanEqual(abs(u_xlat3.yxyy), u_xlat2.xxxx).xy) * 0xFFFFFFFFu);
                u_xlat22.x = (-u_xlat28) * 4.0 + u_xlat23.x;
                u_xlat23.x = (u_xlati4.x != 0) ? u_xlat23.x : u_xlat22.x;
                u_xlat22.x = (-u_xlat29) * 4.0 + u_xlat23.y;
                u_xlat23.y = (u_xlati4.x != 0) ? u_xlat23.y : u_xlat22.x;
                u_xlati22.xy = ~(u_xlati4.xy);
                u_xlati22.x = int(uint(u_xlati22.y) | uint(u_xlati22.x));
                u_xlat31 = u_xlat28 * 4.0 + u_xlat6.x;
                u_xlat6.x = (u_xlati4.y != 0) ? u_xlat6.x : u_xlat31;
                u_xlat31 = u_xlat29 * 4.0 + u_xlat6.y;
                u_xlat6.y = (u_xlati4.y != 0) ? u_xlat6.y : u_xlat31;
                if(u_xlati22.x != 0) {
                    if(u_xlati4.x == 0) {
                        u_xlat22.xy = u_xlat23.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat7 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    } else {
                        u_xlat7.x = u_xlat3.y;
                    }
                    if(u_xlati4.y == 0) {
                        u_xlat22.xy = u_xlat6.xy;
                        u_xlat22.xy = clamp(u_xlat22.xy, 0.0, 1.0);
                        u_xlat22.xy = u_xlat22.xy * vec2(_RenderViewportScaleFactor);
                        u_xlat3 = textureLod(_MainTex, u_xlat22.xy, 0.0).yxzw;
                    }
                    u_xlat21.x = (-u_xlat10) * 0.5 + u_xlat7.x;
                    u_xlat3.y = (u_xlati4.x != 0) ? u_xlat7.x : u_xlat21.x;
                    u_xlat10 = (-u_xlat10) * 0.5 + u_xlat3.x;
                    u_xlat3.x = (u_xlati4.y != 0) ? u_xlat3.x : u_xlat10;
                    u_xlatb21.xy = greaterThanEqual(abs(u_xlat3.yxyx), u_xlat2.xxxx).xy;
                    u_xlat10 = (-u_xlat28) * 12.0 + u_xlat23.x;
                    u_xlat23.x = (u_xlatb21.x) ? u_xlat23.x : u_xlat10;
                    u_xlat10 = (-u_xlat29) * 12.0 + u_xlat23.y;
                    u_xlat23.y = (u_xlatb21.x) ? u_xlat23.y : u_xlat10;
                    u_xlat10 = u_xlat28 * 12.0 + u_xlat6.x;
                    u_xlat6.x = (u_xlatb21.y) ? u_xlat6.x : u_xlat10;
                    u_xlat10 = u_xlat29 * 12.0 + u_xlat6.y;
                    u_xlat6.y = (u_xlatb21.y) ? u_xlat6.y : u_xlat10;
                }
            }
        }
        u_xlat10 = (-u_xlat23.x) + vs_TEXCOORD0.x;
        u_xlat28 = u_xlat6.x + (-vs_TEXCOORD0.x);
        u_xlat2.x = (-u_xlat23.y) + vs_TEXCOORD0.y;
        u_xlat10 = (u_xlatb19) ? u_xlat10 : u_xlat2.x;
        u_xlat2.x = u_xlat6.y + (-vs_TEXCOORD0.y);
        u_xlat28 = (u_xlatb19) ? u_xlat28 : u_xlat2.x;
        u_xlati2.xw = ivec2(uvec2(lessThan(u_xlat3.yyyx, vec4(0.0, 0.0, 0.0, 0.0)).xw) * 0xFFFFFFFFu);
        u_xlat3.x = u_xlat10 + u_xlat28;
        u_xlatb2.xz = notEqual(ivec4(u_xlati20), u_xlati2.xxwx).xz;
        u_xlat29 = float(1.0) / u_xlat3.x;
        u_xlatb3 = u_xlat10<u_xlat28;
        u_xlat10 = min(u_xlat28, u_xlat10);
        u_xlatb28 = (u_xlatb3) ? u_xlatb2.x : u_xlatb2.z;
        u_xlat1.x = u_xlat1.x * u_xlat1.x;
        u_xlat10 = u_xlat10 * (-u_xlat29) + 0.5;
        u_xlat10 = u_xlatb28 ? u_xlat10 : float(0.0);
        u_xlat1.x = max(u_xlat1.x, u_xlat10);
        u_xlat1.xy = u_xlat1.xx * vec2(u_xlat11) + vs_TEXCOORD0.xy;
        u_xlat2.x = (u_xlatb19) ? vs_TEXCOORD0.x : u_xlat1.x;
        u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
        u_xlat2.y = (u_xlatb19) ? u_xlat1.y : vs_TEXCOORD0.y;
        u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
        u_xlat1.xy = u_xlat2.xy * vec2(_RenderViewportScaleFactor);
        u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
        u_xlat0.w = u_xlat0.y;
    } else {
        u_xlat1.xyz = u_xlat0.xyz;
    }
    u_xlat2.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat2 = texture(_DitheringTex, u_xlat2.xy);
    u_xlat28 = u_xlat2.w * 2.0 + -1.0;
    u_xlat2.x = u_xlat28 * 3.40282347e+38 + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat28 = -abs(u_xlat28) + 1.0;
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat28) + 1.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.xyz = u_xlat1.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
    u_xlat3.xyz = max(abs(u_xlat1.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat1.xyzx).xyz;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    u_xlat1.xyz = vec3(u_xlat28) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
    u_xlat3.xyz = u_xlat1.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
    u_xlat3.xyz = max(abs(u_xlat3.xyz), vec3(1.1920929e-07, 1.1920929e-07, 1.1920929e-07));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
    u_xlat0.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
    u_xlat0.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "d3d11 " {
Keywords { "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_INSTANCING_ENABLED" }
""
}
SubProgram "d3d11 " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
}
}
}
SubShader {
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 150441
}
}
SubShader {
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 214353
Program "vp" {
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %57 %64 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %39 0 Offset 39 
                                             OpMemberDecorate %39 1 Offset 39 
                                             OpDecorate %39 Block 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate vs_TEXCOORD1 Location 57 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypePointer Output %7 
                                 f32 %26 = OpConstant 3.674022E-40 
                                 f32 %27 = OpConstant 3.674022E-40 
                               f32_2 %28 = OpConstantComposite %26 %27 
                                     %32 = OpTypePointer Private %19 
                      Private f32_2* %33 = OpVariable Private 
                               f32_2 %36 = OpConstantComposite %27 %27 
                                     %39 = OpTypeStruct %6 %7 
                                     %40 = OpTypePointer Uniform %39 
       Uniform struct {f32; f32_4;}* %41 = OpVariable Uniform 
                                 i32 %42 = OpConstant 1 
                                     %43 = OpTypePointer Uniform %7 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_2 %50 = OpConstantComposite %49 %49 
                                     %56 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %59 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                       Output f32_4* %23 = OpAccessChain %13 %15 
                               f32_4 %24 = OpLoad %23 
                               f32_4 %25 = OpVectorShuffle %24 %21 4 5 2 3 
                                             OpStore %23 %25 
                       Output f32_4* %29 = OpAccessChain %13 %15 
                               f32_4 %30 = OpLoad %29 
                               f32_4 %31 = OpVectorShuffle %30 %28 0 1 4 5 
                                             OpStore %29 %31 
                               f32_3 %34 = OpLoad %18 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %37 = OpFAdd %35 %36 
                                             OpStore %33 %37 
                               f32_2 %38 = OpLoad %33 
                      Uniform f32_4* %44 = OpAccessChain %41 %42 
                               f32_4 %45 = OpLoad %44 
                               f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                               f32_2 %47 = OpFMul %38 %46 
                                             OpStore %33 %47 
                               f32_2 %48 = OpLoad %33 
                               f32_2 %51 = OpFMul %48 %50 
                      Uniform f32_4* %52 = OpAccessChain %41 %42 
                               f32_4 %53 = OpLoad %52 
                               f32_2 %54 = OpVectorShuffle %53 %53 2 3 
                               f32_2 %55 = OpFAdd %51 %54 
                                             OpStore %33 %55 
                               f32_2 %58 = OpLoad %33 
                        Uniform f32* %60 = OpAccessChain %41 %15 
                                 f32 %61 = OpLoad %60 
                               f32_2 %62 = OpCompositeConstruct %61 %61 
                               f32_2 %63 = OpFMul %58 %62 
                                             OpStore vs_TEXCOORD1 %63 
                               f32_2 %65 = OpLoad %33 
                                             OpStore vs_TEXCOORD0 %65 
                         Output f32* %67 = OpAccessChain %13 %15 %9 
                                 f32 %68 = OpLoad %67 
                                 f32 %69 = OpFNegate %68 
                         Output f32* %70 = OpAccessChain %13 %15 %9 
                                             OpStore %70 %69 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 286
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %104 %146 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %15 0 Offset 15 
                                             OpDecorate %15 Block 
                                             OpDecorate %17 DescriptorSet 17 
                                             OpDecorate %17 Binding 17 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %99 DescriptorSet 99 
                                             OpDecorate %99 Binding 99 
                                             OpDecorate %101 DescriptorSet 101 
                                             OpDecorate %101 Binding 101 
                                             OpDecorate vs_TEXCOORD1 Location 104 
                                             OpDecorate %146 Location 146 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeVector %6 4 
                                     %15 = OpTypeStruct %14 
                                     %16 = OpTypePointer Uniform %15 
            Uniform struct {f32_4;}* %17 = OpVariable Uniform 
                                     %18 = OpTypeInt 32 1 
                                 i32 %19 = OpConstant 0 
                                     %20 = OpTypePointer Uniform %14 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                                     %44 = OpTypeInt 32 0 
                                 u32 %45 = OpConstant 3 
                                 u32 %47 = OpConstant 0 
                                     %48 = OpTypePointer Private %6 
                                 f32 %52 = OpConstant 3.674022E-40 
                                 f32 %54 = OpConstant 3.674022E-40 
                      Private f32_3* %57 = OpVariable Private 
                                 f32 %62 = OpConstant 3.674022E-40 
                                 f32 %67 = OpConstant 3.674022E-40 
                                 f32 %69 = OpConstant 3.674022E-40 
                                 f32 %74 = OpConstant 3.674022E-40 
                                     %97 = OpTypePointer Private %14 
                      Private f32_4* %98 = OpVariable Private 
UniformConstant read_only Texture2D* %99 = OpVariable UniformConstant 
           UniformConstant sampler* %101 = OpVariable UniformConstant 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                f32 %110 = OpConstant 3.674022E-40 
                              f32_3 %111 = OpConstantComposite %110 %110 %110 
                                f32 %116 = OpConstant 3.674022E-40 
                              f32_3 %117 = OpConstantComposite %116 %116 %116 
                                f32 %122 = OpConstant 3.674022E-40 
                              f32_3 %123 = OpConstantComposite %122 %122 %122 
                                f32 %125 = OpConstant 3.674022E-40 
                              f32_3 %126 = OpConstantComposite %125 %125 %125 
                     Private f32_3* %128 = OpVariable Private 
                                f32 %131 = OpConstant 3.674022E-40 
                              f32_3 %132 = OpConstantComposite %131 %131 %131 
                                    %134 = OpTypeBool 
                                    %135 = OpTypeVector %134 3 
                                    %136 = OpTypePointer Private %135 
                    Private bool_3* %137 = OpVariable Private 
                                f32 %138 = OpConstant 3.674022E-40 
                              f32_4 %139 = OpConstantComposite %138 %138 %138 %74 
                                    %142 = OpTypeVector %134 4 
                                    %145 = OpTypePointer Output %14 
                      Output f32_4* %146 = OpVariable Output 
                                    %149 = OpTypePointer Output %6 
                                    %151 = OpTypePointer Function %7 
                                    %154 = OpTypePointer Private %134 
                                    %157 = OpTypePointer Function %6 
                                u32 %168 = OpConstant 1 
                                u32 %181 = OpConstant 2 
                                f32 %197 = OpConstant 3.674022E-40 
                              f32_3 %198 = OpConstantComposite %197 %197 %197 
                                f32 %203 = OpConstant 3.674022E-40 
                              f32_3 %204 = OpConstantComposite %203 %203 %203 
                                f32 %210 = OpConstant 3.674022E-40 
                              f32_3 %211 = OpConstantComposite %210 %210 %210 
                                f32 %228 = OpConstant 3.674022E-40 
                              f32_3 %229 = OpConstantComposite %228 %228 %228 
                                f32 %239 = OpConstant 3.674022E-40 
                              f32_3 %240 = OpConstantComposite %239 %239 %239 
                    Private bool_3* %242 = OpVariable Private 
                                f32 %243 = OpConstant 3.674022E-40 
                              f32_4 %244 = OpConstantComposite %243 %243 %243 %74 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                    Function f32_3* %152 = OpVariable Function 
                      Function f32* %158 = OpVariable Function 
                      Function f32* %171 = OpVariable Function 
                      Function f32* %184 = OpVariable Function 
                      Function f32* %251 = OpVariable Function 
                      Function f32* %263 = OpVariable Function 
                      Function f32* %275 = OpVariable Function 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %21 = OpAccessChain %17 %19 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               f32_2 %24 = OpFMul %13 %23 
                      Uniform f32_4* %25 = OpAccessChain %17 %19 
                               f32_4 %26 = OpLoad %25 
                               f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                               f32_2 %28 = OpFAdd %24 %27 
                               f32_3 %29 = OpLoad %9 
                               f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                             OpStore %9 %30 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_3 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                 f32 %46 = OpCompositeExtract %43 3 
                        Private f32* %49 = OpAccessChain %9 %47 
                                             OpStore %49 %46 
                        Private f32* %50 = OpAccessChain %9 %47 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                                 f32 %55 = OpFAdd %53 %54 
                        Private f32* %56 = OpAccessChain %9 %47 
                                             OpStore %56 %55 
                        Private f32* %58 = OpAccessChain %9 %47 
                                 f32 %59 = OpLoad %58 
                                 f32 %60 = OpExtInst %1 4 %59 
                                 f32 %61 = OpFNegate %60 
                                 f32 %63 = OpFAdd %61 %62 
                        Private f32* %64 = OpAccessChain %57 %47 
                                             OpStore %64 %63 
                        Private f32* %65 = OpAccessChain %9 %47 
                                 f32 %66 = OpLoad %65 
                                 f32 %68 = OpFMul %66 %67 
                                 f32 %70 = OpFAdd %68 %69 
                        Private f32* %71 = OpAccessChain %9 %47 
                                             OpStore %71 %70 
                        Private f32* %72 = OpAccessChain %9 %47 
                                 f32 %73 = OpLoad %72 
                                 f32 %75 = OpExtInst %1 43 %73 %74 %62 
                        Private f32* %76 = OpAccessChain %9 %47 
                                             OpStore %76 %75 
                        Private f32* %77 = OpAccessChain %9 %47 
                                 f32 %78 = OpLoad %77 
                                 f32 %79 = OpFMul %78 %52 
                                 f32 %80 = OpFAdd %79 %54 
                        Private f32* %81 = OpAccessChain %9 %47 
                                             OpStore %81 %80 
                        Private f32* %82 = OpAccessChain %57 %47 
                                 f32 %83 = OpLoad %82 
                                 f32 %84 = OpExtInst %1 31 %83 
                        Private f32* %85 = OpAccessChain %57 %47 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %57 %47 
                                 f32 %87 = OpLoad %86 
                                 f32 %88 = OpFNegate %87 
                                 f32 %89 = OpFAdd %88 %62 
                        Private f32* %90 = OpAccessChain %57 %47 
                                             OpStore %90 %89 
                        Private f32* %91 = OpAccessChain %57 %47 
                                 f32 %92 = OpLoad %91 
                        Private f32* %93 = OpAccessChain %9 %47 
                                 f32 %94 = OpLoad %93 
                                 f32 %95 = OpFMul %92 %94 
                        Private f32* %96 = OpAccessChain %9 %47 
                                             OpStore %96 %95 
                read_only Texture2D %100 = OpLoad %99 
                            sampler %102 = OpLoad %101 
         read_only Texture2DSampled %103 = OpSampledImage %100 %102 
                              f32_2 %105 = OpLoad vs_TEXCOORD1 
                              f32_4 %106 = OpImageSampleImplicitLod %103 %105 
                                             OpStore %98 %106 
                              f32_4 %107 = OpLoad %98 
                              f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                              f32_3 %109 = OpExtInst %1 4 %108 
                              f32_3 %112 = OpExtInst %1 40 %109 %111 
                                             OpStore %57 %112 
                              f32_3 %113 = OpLoad %57 
                              f32_3 %114 = OpExtInst %1 30 %113 
                                             OpStore %57 %114 
                              f32_3 %115 = OpLoad %57 
                              f32_3 %118 = OpFMul %115 %117 
                                             OpStore %57 %118 
                              f32_3 %119 = OpLoad %57 
                              f32_3 %120 = OpExtInst %1 29 %119 
                                             OpStore %57 %120 
                              f32_3 %121 = OpLoad %57 
                              f32_3 %124 = OpFMul %121 %123 
                              f32_3 %127 = OpFAdd %124 %126 
                                             OpStore %57 %127 
                              f32_4 %129 = OpLoad %98 
                              f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                              f32_3 %133 = OpFMul %130 %132 
                                             OpStore %128 %133 
                              f32_4 %140 = OpLoad %98 
                              f32_4 %141 = OpVectorShuffle %140 %140 0 1 2 0 
                             bool_4 %143 = OpFOrdGreaterThanEqual %139 %141 
                             bool_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                             OpStore %137 %144 
                       Private f32* %147 = OpAccessChain %98 %45 
                                f32 %148 = OpLoad %147 
                        Output f32* %150 = OpAccessChain %146 %45 
                                             OpStore %150 %148 
                              f32_3 %153 = OpLoad %57 
                                             OpStore %152 %153 
                      Private bool* %155 = OpAccessChain %137 %47 
                               bool %156 = OpLoad %155 
                                             OpSelectionMerge %160 None 
                                             OpBranchConditional %156 %159 %163 
                                    %159 = OpLabel 
                       Private f32* %161 = OpAccessChain %128 %47 
                                f32 %162 = OpLoad %161 
                                             OpStore %158 %162 
                                             OpBranch %160 
                                    %163 = OpLabel 
                       Private f32* %164 = OpAccessChain %57 %47 
                                f32 %165 = OpLoad %164 
                                             OpStore %158 %165 
                                             OpBranch %160 
                                    %160 = OpLabel 
                                f32 %166 = OpLoad %158 
                      Function f32* %167 = OpAccessChain %152 %47 
                                             OpStore %167 %166 
                      Private bool* %169 = OpAccessChain %137 %168 
                               bool %170 = OpLoad %169 
                                             OpSelectionMerge %173 None 
                                             OpBranchConditional %170 %172 %176 
                                    %172 = OpLabel 
                       Private f32* %174 = OpAccessChain %128 %168 
                                f32 %175 = OpLoad %174 
                                             OpStore %171 %175 
                                             OpBranch %173 
                                    %176 = OpLabel 
                       Private f32* %177 = OpAccessChain %57 %168 
                                f32 %178 = OpLoad %177 
                                             OpStore %171 %178 
                                             OpBranch %173 
                                    %173 = OpLabel 
                                f32 %179 = OpLoad %171 
                      Function f32* %180 = OpAccessChain %152 %168 
                                             OpStore %180 %179 
                      Private bool* %182 = OpAccessChain %137 %181 
                               bool %183 = OpLoad %182 
                                             OpSelectionMerge %186 None 
                                             OpBranchConditional %183 %185 %189 
                                    %185 = OpLabel 
                       Private f32* %187 = OpAccessChain %128 %181 
                                f32 %188 = OpLoad %187 
                                             OpStore %184 %188 
                                             OpBranch %186 
                                    %189 = OpLabel 
                       Private f32* %190 = OpAccessChain %57 %181 
                                f32 %191 = OpLoad %190 
                                             OpStore %184 %191 
                                             OpBranch %186 
                                    %186 = OpLabel 
                                f32 %192 = OpLoad %184 
                      Function f32* %193 = OpAccessChain %152 %181 
                                             OpStore %193 %192 
                              f32_3 %194 = OpLoad %152 
                                             OpStore %57 %194 
                              f32_3 %195 = OpLoad %9 
                              f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                              f32_3 %199 = OpFMul %196 %198 
                              f32_3 %200 = OpLoad %57 
                              f32_3 %201 = OpFAdd %199 %200 
                                             OpStore %9 %201 
                              f32_3 %202 = OpLoad %9 
                              f32_3 %205 = OpFAdd %202 %204 
                              f32_4 %206 = OpLoad %98 
                              f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                             OpStore %98 %207 
                              f32_4 %208 = OpLoad %98 
                              f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                              f32_3 %212 = OpFMul %209 %211 
                              f32_4 %213 = OpLoad %98 
                              f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                             OpStore %98 %214 
                              f32_4 %215 = OpLoad %98 
                              f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              f32_3 %217 = OpExtInst %1 4 %216 
                              f32_3 %218 = OpExtInst %1 40 %217 %111 
                              f32_4 %219 = OpLoad %98 
                              f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                             OpStore %98 %220 
                              f32_4 %221 = OpLoad %98 
                              f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                              f32_3 %223 = OpExtInst %1 30 %222 
                              f32_4 %224 = OpLoad %98 
                              f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                             OpStore %98 %225 
                              f32_4 %226 = OpLoad %98 
                              f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                              f32_3 %230 = OpFMul %227 %229 
                              f32_4 %231 = OpLoad %98 
                              f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                             OpStore %98 %232 
                              f32_4 %233 = OpLoad %98 
                              f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                              f32_3 %235 = OpExtInst %1 29 %234 
                              f32_4 %236 = OpLoad %98 
                              f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                             OpStore %98 %237 
                              f32_3 %238 = OpLoad %9 
                              f32_3 %241 = OpFMul %238 %240 
                                             OpStore %128 %241 
                              f32_3 %245 = OpLoad %9 
                              f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 0 
                             bool_4 %247 = OpFOrdGreaterThanEqual %244 %246 
                             bool_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                             OpStore %242 %248 
                      Private bool* %249 = OpAccessChain %242 %47 
                               bool %250 = OpLoad %249 
                                             OpSelectionMerge %253 None 
                                             OpBranchConditional %250 %252 %256 
                                    %252 = OpLabel 
                       Private f32* %254 = OpAccessChain %128 %47 
                                f32 %255 = OpLoad %254 
                                             OpStore %251 %255 
                                             OpBranch %253 
                                    %256 = OpLabel 
                       Private f32* %257 = OpAccessChain %98 %47 
                                f32 %258 = OpLoad %257 
                                             OpStore %251 %258 
                                             OpBranch %253 
                                    %253 = OpLabel 
                                f32 %259 = OpLoad %251 
                        Output f32* %260 = OpAccessChain %146 %47 
                                             OpStore %260 %259 
                      Private bool* %261 = OpAccessChain %242 %168 
                               bool %262 = OpLoad %261 
                                             OpSelectionMerge %265 None 
                                             OpBranchConditional %262 %264 %268 
                                    %264 = OpLabel 
                       Private f32* %266 = OpAccessChain %128 %168 
                                f32 %267 = OpLoad %266 
                                             OpStore %263 %267 
                                             OpBranch %265 
                                    %268 = OpLabel 
                       Private f32* %269 = OpAccessChain %98 %168 
                                f32 %270 = OpLoad %269 
                                             OpStore %263 %270 
                                             OpBranch %265 
                                    %265 = OpLabel 
                                f32 %271 = OpLoad %263 
                        Output f32* %272 = OpAccessChain %146 %168 
                                             OpStore %272 %271 
                      Private bool* %273 = OpAccessChain %242 %181 
                               bool %274 = OpLoad %273 
                                             OpSelectionMerge %277 None 
                                             OpBranchConditional %274 %276 %280 
                                    %276 = OpLabel 
                       Private f32* %278 = OpAccessChain %128 %181 
                                f32 %279 = OpLoad %278 
                                             OpStore %275 %279 
                                             OpBranch %277 
                                    %280 = OpLabel 
                       Private f32* %281 = OpAccessChain %98 %181 
                                f32 %282 = OpLoad %281 
                                             OpStore %275 %282 
                                             OpBranch %277 
                                    %277 = OpLabel 
                                f32 %283 = OpLoad %275 
                        Output f32* %284 = OpAccessChain %146 %181 
                                             OpStore %284 %283 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "STEREO_DOUBLEWIDE_TARGET" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %66 %73 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %22 0 Offset 22 
                                             OpMemberDecorate %22 1 Offset 22 
                                             OpMemberDecorate %22 2 Offset 22 
                                             OpDecorate %22 Block 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate vs_TEXCOORD1 Location 66 
                                             OpDecorate vs_TEXCOORD0 Location 73 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypeStruct %6 %7 %7 
                                     %23 = OpTypePointer Uniform %22 
Uniform struct {f32; f32_4; f32_4;}* %24 = OpVariable Uniform 
                                 i32 %25 = OpConstant 2 
                                     %26 = OpTypePointer Uniform %7 
                                     %35 = OpTypePointer Output %7 
                                 f32 %39 = OpConstant 3.674022E-40 
                                 f32 %40 = OpConstant 3.674022E-40 
                               f32_2 %41 = OpConstantComposite %39 %40 
                                     %45 = OpTypePointer Private %19 
                      Private f32_2* %46 = OpVariable Private 
                               f32_2 %49 = OpConstantComposite %40 %40 
                                 i32 %52 = OpConstant 1 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %58 %58 
                                     %65 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %68 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                      Uniform f32_4* %27 = OpAccessChain %24 %25 
                               f32_4 %28 = OpLoad %27 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpFMul %21 %29 
                      Uniform f32_4* %31 = OpAccessChain %24 %25 
                               f32_4 %32 = OpLoad %31 
                               f32_2 %33 = OpVectorShuffle %32 %32 2 3 
                               f32_2 %34 = OpFAdd %30 %33 
                       Output f32_4* %36 = OpAccessChain %13 %15 
                               f32_4 %37 = OpLoad %36 
                               f32_4 %38 = OpVectorShuffle %37 %34 4 5 2 3 
                                             OpStore %36 %38 
                       Output f32_4* %42 = OpAccessChain %13 %15 
                               f32_4 %43 = OpLoad %42 
                               f32_4 %44 = OpVectorShuffle %43 %41 0 1 4 5 
                                             OpStore %42 %44 
                               f32_3 %47 = OpLoad %18 
                               f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                               f32_2 %50 = OpFAdd %48 %49 
                                             OpStore %46 %50 
                               f32_2 %51 = OpLoad %46 
                      Uniform f32_4* %53 = OpAccessChain %24 %52 
                               f32_4 %54 = OpLoad %53 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               f32_2 %56 = OpFMul %51 %55 
                                             OpStore %46 %56 
                               f32_2 %57 = OpLoad %46 
                               f32_2 %60 = OpFMul %57 %59 
                      Uniform f32_4* %61 = OpAccessChain %24 %52 
                               f32_4 %62 = OpLoad %61 
                               f32_2 %63 = OpVectorShuffle %62 %62 2 3 
                               f32_2 %64 = OpFAdd %60 %63 
                                             OpStore %46 %64 
                               f32_2 %67 = OpLoad %46 
                        Uniform f32* %69 = OpAccessChain %24 %15 
                                 f32 %70 = OpLoad %69 
                               f32_2 %71 = OpCompositeConstruct %70 %70 
                               f32_2 %72 = OpFMul %67 %71 
                                             OpStore vs_TEXCOORD1 %72 
                               f32_2 %74 = OpLoad %46 
                                             OpStore vs_TEXCOORD0 %74 
                         Output f32* %76 = OpAccessChain %13 %15 %9 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                         Output f32* %79 = OpAccessChain %13 %15 %9 
                                             OpStore %79 %78 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 286
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %104 %146 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %15 0 Offset 15 
                                             OpDecorate %15 Block 
                                             OpDecorate %17 DescriptorSet 17 
                                             OpDecorate %17 Binding 17 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %99 DescriptorSet 99 
                                             OpDecorate %99 Binding 99 
                                             OpDecorate %101 DescriptorSet 101 
                                             OpDecorate %101 Binding 101 
                                             OpDecorate vs_TEXCOORD1 Location 104 
                                             OpDecorate %146 Location 146 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeVector %6 4 
                                     %15 = OpTypeStruct %14 
                                     %16 = OpTypePointer Uniform %15 
            Uniform struct {f32_4;}* %17 = OpVariable Uniform 
                                     %18 = OpTypeInt 32 1 
                                 i32 %19 = OpConstant 0 
                                     %20 = OpTypePointer Uniform %14 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                                     %44 = OpTypeInt 32 0 
                                 u32 %45 = OpConstant 3 
                                 u32 %47 = OpConstant 0 
                                     %48 = OpTypePointer Private %6 
                                 f32 %52 = OpConstant 3.674022E-40 
                                 f32 %54 = OpConstant 3.674022E-40 
                      Private f32_3* %57 = OpVariable Private 
                                 f32 %62 = OpConstant 3.674022E-40 
                                 f32 %67 = OpConstant 3.674022E-40 
                                 f32 %69 = OpConstant 3.674022E-40 
                                 f32 %74 = OpConstant 3.674022E-40 
                                     %97 = OpTypePointer Private %14 
                      Private f32_4* %98 = OpVariable Private 
UniformConstant read_only Texture2D* %99 = OpVariable UniformConstant 
           UniformConstant sampler* %101 = OpVariable UniformConstant 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                f32 %110 = OpConstant 3.674022E-40 
                              f32_3 %111 = OpConstantComposite %110 %110 %110 
                                f32 %116 = OpConstant 3.674022E-40 
                              f32_3 %117 = OpConstantComposite %116 %116 %116 
                                f32 %122 = OpConstant 3.674022E-40 
                              f32_3 %123 = OpConstantComposite %122 %122 %122 
                                f32 %125 = OpConstant 3.674022E-40 
                              f32_3 %126 = OpConstantComposite %125 %125 %125 
                     Private f32_3* %128 = OpVariable Private 
                                f32 %131 = OpConstant 3.674022E-40 
                              f32_3 %132 = OpConstantComposite %131 %131 %131 
                                    %134 = OpTypeBool 
                                    %135 = OpTypeVector %134 3 
                                    %136 = OpTypePointer Private %135 
                    Private bool_3* %137 = OpVariable Private 
                                f32 %138 = OpConstant 3.674022E-40 
                              f32_4 %139 = OpConstantComposite %138 %138 %138 %74 
                                    %142 = OpTypeVector %134 4 
                                    %145 = OpTypePointer Output %14 
                      Output f32_4* %146 = OpVariable Output 
                                    %149 = OpTypePointer Output %6 
                                    %151 = OpTypePointer Function %7 
                                    %154 = OpTypePointer Private %134 
                                    %157 = OpTypePointer Function %6 
                                u32 %168 = OpConstant 1 
                                u32 %181 = OpConstant 2 
                                f32 %197 = OpConstant 3.674022E-40 
                              f32_3 %198 = OpConstantComposite %197 %197 %197 
                                f32 %203 = OpConstant 3.674022E-40 
                              f32_3 %204 = OpConstantComposite %203 %203 %203 
                                f32 %210 = OpConstant 3.674022E-40 
                              f32_3 %211 = OpConstantComposite %210 %210 %210 
                                f32 %228 = OpConstant 3.674022E-40 
                              f32_3 %229 = OpConstantComposite %228 %228 %228 
                                f32 %239 = OpConstant 3.674022E-40 
                              f32_3 %240 = OpConstantComposite %239 %239 %239 
                    Private bool_3* %242 = OpVariable Private 
                                f32 %243 = OpConstant 3.674022E-40 
                              f32_4 %244 = OpConstantComposite %243 %243 %243 %74 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                    Function f32_3* %152 = OpVariable Function 
                      Function f32* %158 = OpVariable Function 
                      Function f32* %171 = OpVariable Function 
                      Function f32* %184 = OpVariable Function 
                      Function f32* %251 = OpVariable Function 
                      Function f32* %263 = OpVariable Function 
                      Function f32* %275 = OpVariable Function 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %21 = OpAccessChain %17 %19 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               f32_2 %24 = OpFMul %13 %23 
                      Uniform f32_4* %25 = OpAccessChain %17 %19 
                               f32_4 %26 = OpLoad %25 
                               f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                               f32_2 %28 = OpFAdd %24 %27 
                               f32_3 %29 = OpLoad %9 
                               f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                             OpStore %9 %30 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_3 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                 f32 %46 = OpCompositeExtract %43 3 
                        Private f32* %49 = OpAccessChain %9 %47 
                                             OpStore %49 %46 
                        Private f32* %50 = OpAccessChain %9 %47 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                                 f32 %55 = OpFAdd %53 %54 
                        Private f32* %56 = OpAccessChain %9 %47 
                                             OpStore %56 %55 
                        Private f32* %58 = OpAccessChain %9 %47 
                                 f32 %59 = OpLoad %58 
                                 f32 %60 = OpExtInst %1 4 %59 
                                 f32 %61 = OpFNegate %60 
                                 f32 %63 = OpFAdd %61 %62 
                        Private f32* %64 = OpAccessChain %57 %47 
                                             OpStore %64 %63 
                        Private f32* %65 = OpAccessChain %9 %47 
                                 f32 %66 = OpLoad %65 
                                 f32 %68 = OpFMul %66 %67 
                                 f32 %70 = OpFAdd %68 %69 
                        Private f32* %71 = OpAccessChain %9 %47 
                                             OpStore %71 %70 
                        Private f32* %72 = OpAccessChain %9 %47 
                                 f32 %73 = OpLoad %72 
                                 f32 %75 = OpExtInst %1 43 %73 %74 %62 
                        Private f32* %76 = OpAccessChain %9 %47 
                                             OpStore %76 %75 
                        Private f32* %77 = OpAccessChain %9 %47 
                                 f32 %78 = OpLoad %77 
                                 f32 %79 = OpFMul %78 %52 
                                 f32 %80 = OpFAdd %79 %54 
                        Private f32* %81 = OpAccessChain %9 %47 
                                             OpStore %81 %80 
                        Private f32* %82 = OpAccessChain %57 %47 
                                 f32 %83 = OpLoad %82 
                                 f32 %84 = OpExtInst %1 31 %83 
                        Private f32* %85 = OpAccessChain %57 %47 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %57 %47 
                                 f32 %87 = OpLoad %86 
                                 f32 %88 = OpFNegate %87 
                                 f32 %89 = OpFAdd %88 %62 
                        Private f32* %90 = OpAccessChain %57 %47 
                                             OpStore %90 %89 
                        Private f32* %91 = OpAccessChain %57 %47 
                                 f32 %92 = OpLoad %91 
                        Private f32* %93 = OpAccessChain %9 %47 
                                 f32 %94 = OpLoad %93 
                                 f32 %95 = OpFMul %92 %94 
                        Private f32* %96 = OpAccessChain %9 %47 
                                             OpStore %96 %95 
                read_only Texture2D %100 = OpLoad %99 
                            sampler %102 = OpLoad %101 
         read_only Texture2DSampled %103 = OpSampledImage %100 %102 
                              f32_2 %105 = OpLoad vs_TEXCOORD1 
                              f32_4 %106 = OpImageSampleImplicitLod %103 %105 
                                             OpStore %98 %106 
                              f32_4 %107 = OpLoad %98 
                              f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                              f32_3 %109 = OpExtInst %1 4 %108 
                              f32_3 %112 = OpExtInst %1 40 %109 %111 
                                             OpStore %57 %112 
                              f32_3 %113 = OpLoad %57 
                              f32_3 %114 = OpExtInst %1 30 %113 
                                             OpStore %57 %114 
                              f32_3 %115 = OpLoad %57 
                              f32_3 %118 = OpFMul %115 %117 
                                             OpStore %57 %118 
                              f32_3 %119 = OpLoad %57 
                              f32_3 %120 = OpExtInst %1 29 %119 
                                             OpStore %57 %120 
                              f32_3 %121 = OpLoad %57 
                              f32_3 %124 = OpFMul %121 %123 
                              f32_3 %127 = OpFAdd %124 %126 
                                             OpStore %57 %127 
                              f32_4 %129 = OpLoad %98 
                              f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                              f32_3 %133 = OpFMul %130 %132 
                                             OpStore %128 %133 
                              f32_4 %140 = OpLoad %98 
                              f32_4 %141 = OpVectorShuffle %140 %140 0 1 2 0 
                             bool_4 %143 = OpFOrdGreaterThanEqual %139 %141 
                             bool_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                             OpStore %137 %144 
                       Private f32* %147 = OpAccessChain %98 %45 
                                f32 %148 = OpLoad %147 
                        Output f32* %150 = OpAccessChain %146 %45 
                                             OpStore %150 %148 
                              f32_3 %153 = OpLoad %57 
                                             OpStore %152 %153 
                      Private bool* %155 = OpAccessChain %137 %47 
                               bool %156 = OpLoad %155 
                                             OpSelectionMerge %160 None 
                                             OpBranchConditional %156 %159 %163 
                                    %159 = OpLabel 
                       Private f32* %161 = OpAccessChain %128 %47 
                                f32 %162 = OpLoad %161 
                                             OpStore %158 %162 
                                             OpBranch %160 
                                    %163 = OpLabel 
                       Private f32* %164 = OpAccessChain %57 %47 
                                f32 %165 = OpLoad %164 
                                             OpStore %158 %165 
                                             OpBranch %160 
                                    %160 = OpLabel 
                                f32 %166 = OpLoad %158 
                      Function f32* %167 = OpAccessChain %152 %47 
                                             OpStore %167 %166 
                      Private bool* %169 = OpAccessChain %137 %168 
                               bool %170 = OpLoad %169 
                                             OpSelectionMerge %173 None 
                                             OpBranchConditional %170 %172 %176 
                                    %172 = OpLabel 
                       Private f32* %174 = OpAccessChain %128 %168 
                                f32 %175 = OpLoad %174 
                                             OpStore %171 %175 
                                             OpBranch %173 
                                    %176 = OpLabel 
                       Private f32* %177 = OpAccessChain %57 %168 
                                f32 %178 = OpLoad %177 
                                             OpStore %171 %178 
                                             OpBranch %173 
                                    %173 = OpLabel 
                                f32 %179 = OpLoad %171 
                      Function f32* %180 = OpAccessChain %152 %168 
                                             OpStore %180 %179 
                      Private bool* %182 = OpAccessChain %137 %181 
                               bool %183 = OpLoad %182 
                                             OpSelectionMerge %186 None 
                                             OpBranchConditional %183 %185 %189 
                                    %185 = OpLabel 
                       Private f32* %187 = OpAccessChain %128 %181 
                                f32 %188 = OpLoad %187 
                                             OpStore %184 %188 
                                             OpBranch %186 
                                    %189 = OpLabel 
                       Private f32* %190 = OpAccessChain %57 %181 
                                f32 %191 = OpLoad %190 
                                             OpStore %184 %191 
                                             OpBranch %186 
                                    %186 = OpLabel 
                                f32 %192 = OpLoad %184 
                      Function f32* %193 = OpAccessChain %152 %181 
                                             OpStore %193 %192 
                              f32_3 %194 = OpLoad %152 
                                             OpStore %57 %194 
                              f32_3 %195 = OpLoad %9 
                              f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                              f32_3 %199 = OpFMul %196 %198 
                              f32_3 %200 = OpLoad %57 
                              f32_3 %201 = OpFAdd %199 %200 
                                             OpStore %9 %201 
                              f32_3 %202 = OpLoad %9 
                              f32_3 %205 = OpFAdd %202 %204 
                              f32_4 %206 = OpLoad %98 
                              f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                             OpStore %98 %207 
                              f32_4 %208 = OpLoad %98 
                              f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                              f32_3 %212 = OpFMul %209 %211 
                              f32_4 %213 = OpLoad %98 
                              f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                             OpStore %98 %214 
                              f32_4 %215 = OpLoad %98 
                              f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              f32_3 %217 = OpExtInst %1 4 %216 
                              f32_3 %218 = OpExtInst %1 40 %217 %111 
                              f32_4 %219 = OpLoad %98 
                              f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                             OpStore %98 %220 
                              f32_4 %221 = OpLoad %98 
                              f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                              f32_3 %223 = OpExtInst %1 30 %222 
                              f32_4 %224 = OpLoad %98 
                              f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                             OpStore %98 %225 
                              f32_4 %226 = OpLoad %98 
                              f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                              f32_3 %230 = OpFMul %227 %229 
                              f32_4 %231 = OpLoad %98 
                              f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                             OpStore %98 %232 
                              f32_4 %233 = OpLoad %98 
                              f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                              f32_3 %235 = OpExtInst %1 29 %234 
                              f32_4 %236 = OpLoad %98 
                              f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                             OpStore %98 %237 
                              f32_3 %238 = OpLoad %9 
                              f32_3 %241 = OpFMul %238 %240 
                                             OpStore %128 %241 
                              f32_3 %245 = OpLoad %9 
                              f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 0 
                             bool_4 %247 = OpFOrdGreaterThanEqual %244 %246 
                             bool_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                             OpStore %242 %248 
                      Private bool* %249 = OpAccessChain %242 %47 
                               bool %250 = OpLoad %249 
                                             OpSelectionMerge %253 None 
                                             OpBranchConditional %250 %252 %256 
                                    %252 = OpLabel 
                       Private f32* %254 = OpAccessChain %128 %47 
                                f32 %255 = OpLoad %254 
                                             OpStore %251 %255 
                                             OpBranch %253 
                                    %256 = OpLabel 
                       Private f32* %257 = OpAccessChain %98 %47 
                                f32 %258 = OpLoad %257 
                                             OpStore %251 %258 
                                             OpBranch %253 
                                    %253 = OpLabel 
                                f32 %259 = OpLoad %251 
                        Output f32* %260 = OpAccessChain %146 %47 
                                             OpStore %260 %259 
                      Private bool* %261 = OpAccessChain %242 %168 
                               bool %262 = OpLoad %261 
                                             OpSelectionMerge %265 None 
                                             OpBranchConditional %262 %264 %268 
                                    %264 = OpLabel 
                       Private f32* %266 = OpAccessChain %128 %168 
                                f32 %267 = OpLoad %266 
                                             OpStore %263 %267 
                                             OpBranch %265 
                                    %268 = OpLabel 
                       Private f32* %269 = OpAccessChain %98 %168 
                                f32 %270 = OpLoad %269 
                                             OpStore %263 %270 
                                             OpBranch %265 
                                    %265 = OpLabel 
                                f32 %271 = OpLoad %263 
                        Output f32* %272 = OpAccessChain %146 %168 
                                             OpStore %272 %271 
                      Private bool* %273 = OpAccessChain %242 %181 
                               bool %274 = OpLoad %273 
                                             OpSelectionMerge %277 None 
                                             OpBranchConditional %274 %276 %280 
                                    %276 = OpLabel 
                       Private f32* %278 = OpAccessChain %128 %181 
                                f32 %279 = OpLoad %278 
                                             OpStore %275 %279 
                                             OpBranch %277 
                                    %280 = OpLabel 
                       Private f32* %281 = OpAccessChain %98 %181 
                                f32 %282 = OpLoad %281 
                                             OpStore %275 %282 
                                             OpBranch %277 
                                    %277 = OpLabel 
                                f32 %283 = OpLoad %275 
                        Output f32* %284 = OpAccessChain %146 %181 
                                             OpStore %284 %283 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA_KEEP_ALPHA" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %57 %64 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %39 0 Offset 39 
                                             OpMemberDecorate %39 1 Offset 39 
                                             OpDecorate %39 Block 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate vs_TEXCOORD1 Location 57 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypePointer Output %7 
                                 f32 %26 = OpConstant 3.674022E-40 
                                 f32 %27 = OpConstant 3.674022E-40 
                               f32_2 %28 = OpConstantComposite %26 %27 
                                     %32 = OpTypePointer Private %19 
                      Private f32_2* %33 = OpVariable Private 
                               f32_2 %36 = OpConstantComposite %27 %27 
                                     %39 = OpTypeStruct %6 %7 
                                     %40 = OpTypePointer Uniform %39 
       Uniform struct {f32; f32_4;}* %41 = OpVariable Uniform 
                                 i32 %42 = OpConstant 1 
                                     %43 = OpTypePointer Uniform %7 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_2 %50 = OpConstantComposite %49 %49 
                                     %56 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %59 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                       Output f32_4* %23 = OpAccessChain %13 %15 
                               f32_4 %24 = OpLoad %23 
                               f32_4 %25 = OpVectorShuffle %24 %21 4 5 2 3 
                                             OpStore %23 %25 
                       Output f32_4* %29 = OpAccessChain %13 %15 
                               f32_4 %30 = OpLoad %29 
                               f32_4 %31 = OpVectorShuffle %30 %28 0 1 4 5 
                                             OpStore %29 %31 
                               f32_3 %34 = OpLoad %18 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %37 = OpFAdd %35 %36 
                                             OpStore %33 %37 
                               f32_2 %38 = OpLoad %33 
                      Uniform f32_4* %44 = OpAccessChain %41 %42 
                               f32_4 %45 = OpLoad %44 
                               f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                               f32_2 %47 = OpFMul %38 %46 
                                             OpStore %33 %47 
                               f32_2 %48 = OpLoad %33 
                               f32_2 %51 = OpFMul %48 %50 
                      Uniform f32_4* %52 = OpAccessChain %41 %42 
                               f32_4 %53 = OpLoad %52 
                               f32_2 %54 = OpVectorShuffle %53 %53 2 3 
                               f32_2 %55 = OpFAdd %51 %54 
                                             OpStore %33 %55 
                               f32_2 %58 = OpLoad %33 
                        Uniform f32* %60 = OpAccessChain %41 %15 
                                 f32 %61 = OpLoad %60 
                               f32_2 %62 = OpCompositeConstruct %61 %61 
                               f32_2 %63 = OpFMul %58 %62 
                                             OpStore vs_TEXCOORD1 %63 
                               f32_2 %65 = OpLoad %33 
                                             OpStore vs_TEXCOORD0 %65 
                         Output f32* %67 = OpAccessChain %13 %15 %9 
                                 f32 %68 = OpLoad %67 
                                 f32 %69 = OpFNegate %68 
                         Output f32* %70 = OpAccessChain %13 %15 %9 
                                             OpStore %70 %69 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 286
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %104 %146 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %15 0 Offset 15 
                                             OpDecorate %15 Block 
                                             OpDecorate %17 DescriptorSet 17 
                                             OpDecorate %17 Binding 17 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %99 DescriptorSet 99 
                                             OpDecorate %99 Binding 99 
                                             OpDecorate %101 DescriptorSet 101 
                                             OpDecorate %101 Binding 101 
                                             OpDecorate vs_TEXCOORD1 Location 104 
                                             OpDecorate %146 Location 146 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeVector %6 4 
                                     %15 = OpTypeStruct %14 
                                     %16 = OpTypePointer Uniform %15 
            Uniform struct {f32_4;}* %17 = OpVariable Uniform 
                                     %18 = OpTypeInt 32 1 
                                 i32 %19 = OpConstant 0 
                                     %20 = OpTypePointer Uniform %14 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                                     %44 = OpTypeInt 32 0 
                                 u32 %45 = OpConstant 3 
                                 u32 %47 = OpConstant 0 
                                     %48 = OpTypePointer Private %6 
                                 f32 %52 = OpConstant 3.674022E-40 
                                 f32 %54 = OpConstant 3.674022E-40 
                      Private f32_3* %57 = OpVariable Private 
                                 f32 %62 = OpConstant 3.674022E-40 
                                 f32 %67 = OpConstant 3.674022E-40 
                                 f32 %69 = OpConstant 3.674022E-40 
                                 f32 %74 = OpConstant 3.674022E-40 
                                     %97 = OpTypePointer Private %14 
                      Private f32_4* %98 = OpVariable Private 
UniformConstant read_only Texture2D* %99 = OpVariable UniformConstant 
           UniformConstant sampler* %101 = OpVariable UniformConstant 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                f32 %110 = OpConstant 3.674022E-40 
                              f32_3 %111 = OpConstantComposite %110 %110 %110 
                                f32 %116 = OpConstant 3.674022E-40 
                              f32_3 %117 = OpConstantComposite %116 %116 %116 
                                f32 %122 = OpConstant 3.674022E-40 
                              f32_3 %123 = OpConstantComposite %122 %122 %122 
                                f32 %125 = OpConstant 3.674022E-40 
                              f32_3 %126 = OpConstantComposite %125 %125 %125 
                     Private f32_3* %128 = OpVariable Private 
                                f32 %131 = OpConstant 3.674022E-40 
                              f32_3 %132 = OpConstantComposite %131 %131 %131 
                                    %134 = OpTypeBool 
                                    %135 = OpTypeVector %134 3 
                                    %136 = OpTypePointer Private %135 
                    Private bool_3* %137 = OpVariable Private 
                                f32 %138 = OpConstant 3.674022E-40 
                              f32_4 %139 = OpConstantComposite %138 %138 %138 %74 
                                    %142 = OpTypeVector %134 4 
                                    %145 = OpTypePointer Output %14 
                      Output f32_4* %146 = OpVariable Output 
                                    %149 = OpTypePointer Output %6 
                                    %151 = OpTypePointer Function %7 
                                    %154 = OpTypePointer Private %134 
                                    %157 = OpTypePointer Function %6 
                                u32 %168 = OpConstant 1 
                                u32 %181 = OpConstant 2 
                                f32 %197 = OpConstant 3.674022E-40 
                              f32_3 %198 = OpConstantComposite %197 %197 %197 
                                f32 %203 = OpConstant 3.674022E-40 
                              f32_3 %204 = OpConstantComposite %203 %203 %203 
                                f32 %210 = OpConstant 3.674022E-40 
                              f32_3 %211 = OpConstantComposite %210 %210 %210 
                                f32 %228 = OpConstant 3.674022E-40 
                              f32_3 %229 = OpConstantComposite %228 %228 %228 
                                f32 %239 = OpConstant 3.674022E-40 
                              f32_3 %240 = OpConstantComposite %239 %239 %239 
                    Private bool_3* %242 = OpVariable Private 
                                f32 %243 = OpConstant 3.674022E-40 
                              f32_4 %244 = OpConstantComposite %243 %243 %243 %74 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                    Function f32_3* %152 = OpVariable Function 
                      Function f32* %158 = OpVariable Function 
                      Function f32* %171 = OpVariable Function 
                      Function f32* %184 = OpVariable Function 
                      Function f32* %251 = OpVariable Function 
                      Function f32* %263 = OpVariable Function 
                      Function f32* %275 = OpVariable Function 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %21 = OpAccessChain %17 %19 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               f32_2 %24 = OpFMul %13 %23 
                      Uniform f32_4* %25 = OpAccessChain %17 %19 
                               f32_4 %26 = OpLoad %25 
                               f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                               f32_2 %28 = OpFAdd %24 %27 
                               f32_3 %29 = OpLoad %9 
                               f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                             OpStore %9 %30 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_3 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                 f32 %46 = OpCompositeExtract %43 3 
                        Private f32* %49 = OpAccessChain %9 %47 
                                             OpStore %49 %46 
                        Private f32* %50 = OpAccessChain %9 %47 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                                 f32 %55 = OpFAdd %53 %54 
                        Private f32* %56 = OpAccessChain %9 %47 
                                             OpStore %56 %55 
                        Private f32* %58 = OpAccessChain %9 %47 
                                 f32 %59 = OpLoad %58 
                                 f32 %60 = OpExtInst %1 4 %59 
                                 f32 %61 = OpFNegate %60 
                                 f32 %63 = OpFAdd %61 %62 
                        Private f32* %64 = OpAccessChain %57 %47 
                                             OpStore %64 %63 
                        Private f32* %65 = OpAccessChain %9 %47 
                                 f32 %66 = OpLoad %65 
                                 f32 %68 = OpFMul %66 %67 
                                 f32 %70 = OpFAdd %68 %69 
                        Private f32* %71 = OpAccessChain %9 %47 
                                             OpStore %71 %70 
                        Private f32* %72 = OpAccessChain %9 %47 
                                 f32 %73 = OpLoad %72 
                                 f32 %75 = OpExtInst %1 43 %73 %74 %62 
                        Private f32* %76 = OpAccessChain %9 %47 
                                             OpStore %76 %75 
                        Private f32* %77 = OpAccessChain %9 %47 
                                 f32 %78 = OpLoad %77 
                                 f32 %79 = OpFMul %78 %52 
                                 f32 %80 = OpFAdd %79 %54 
                        Private f32* %81 = OpAccessChain %9 %47 
                                             OpStore %81 %80 
                        Private f32* %82 = OpAccessChain %57 %47 
                                 f32 %83 = OpLoad %82 
                                 f32 %84 = OpExtInst %1 31 %83 
                        Private f32* %85 = OpAccessChain %57 %47 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %57 %47 
                                 f32 %87 = OpLoad %86 
                                 f32 %88 = OpFNegate %87 
                                 f32 %89 = OpFAdd %88 %62 
                        Private f32* %90 = OpAccessChain %57 %47 
                                             OpStore %90 %89 
                        Private f32* %91 = OpAccessChain %57 %47 
                                 f32 %92 = OpLoad %91 
                        Private f32* %93 = OpAccessChain %9 %47 
                                 f32 %94 = OpLoad %93 
                                 f32 %95 = OpFMul %92 %94 
                        Private f32* %96 = OpAccessChain %9 %47 
                                             OpStore %96 %95 
                read_only Texture2D %100 = OpLoad %99 
                            sampler %102 = OpLoad %101 
         read_only Texture2DSampled %103 = OpSampledImage %100 %102 
                              f32_2 %105 = OpLoad vs_TEXCOORD1 
                              f32_4 %106 = OpImageSampleImplicitLod %103 %105 
                                             OpStore %98 %106 
                              f32_4 %107 = OpLoad %98 
                              f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                              f32_3 %109 = OpExtInst %1 4 %108 
                              f32_3 %112 = OpExtInst %1 40 %109 %111 
                                             OpStore %57 %112 
                              f32_3 %113 = OpLoad %57 
                              f32_3 %114 = OpExtInst %1 30 %113 
                                             OpStore %57 %114 
                              f32_3 %115 = OpLoad %57 
                              f32_3 %118 = OpFMul %115 %117 
                                             OpStore %57 %118 
                              f32_3 %119 = OpLoad %57 
                              f32_3 %120 = OpExtInst %1 29 %119 
                                             OpStore %57 %120 
                              f32_3 %121 = OpLoad %57 
                              f32_3 %124 = OpFMul %121 %123 
                              f32_3 %127 = OpFAdd %124 %126 
                                             OpStore %57 %127 
                              f32_4 %129 = OpLoad %98 
                              f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                              f32_3 %133 = OpFMul %130 %132 
                                             OpStore %128 %133 
                              f32_4 %140 = OpLoad %98 
                              f32_4 %141 = OpVectorShuffle %140 %140 0 1 2 0 
                             bool_4 %143 = OpFOrdGreaterThanEqual %139 %141 
                             bool_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                             OpStore %137 %144 
                       Private f32* %147 = OpAccessChain %98 %45 
                                f32 %148 = OpLoad %147 
                        Output f32* %150 = OpAccessChain %146 %45 
                                             OpStore %150 %148 
                              f32_3 %153 = OpLoad %57 
                                             OpStore %152 %153 
                      Private bool* %155 = OpAccessChain %137 %47 
                               bool %156 = OpLoad %155 
                                             OpSelectionMerge %160 None 
                                             OpBranchConditional %156 %159 %163 
                                    %159 = OpLabel 
                       Private f32* %161 = OpAccessChain %128 %47 
                                f32 %162 = OpLoad %161 
                                             OpStore %158 %162 
                                             OpBranch %160 
                                    %163 = OpLabel 
                       Private f32* %164 = OpAccessChain %57 %47 
                                f32 %165 = OpLoad %164 
                                             OpStore %158 %165 
                                             OpBranch %160 
                                    %160 = OpLabel 
                                f32 %166 = OpLoad %158 
                      Function f32* %167 = OpAccessChain %152 %47 
                                             OpStore %167 %166 
                      Private bool* %169 = OpAccessChain %137 %168 
                               bool %170 = OpLoad %169 
                                             OpSelectionMerge %173 None 
                                             OpBranchConditional %170 %172 %176 
                                    %172 = OpLabel 
                       Private f32* %174 = OpAccessChain %128 %168 
                                f32 %175 = OpLoad %174 
                                             OpStore %171 %175 
                                             OpBranch %173 
                                    %176 = OpLabel 
                       Private f32* %177 = OpAccessChain %57 %168 
                                f32 %178 = OpLoad %177 
                                             OpStore %171 %178 
                                             OpBranch %173 
                                    %173 = OpLabel 
                                f32 %179 = OpLoad %171 
                      Function f32* %180 = OpAccessChain %152 %168 
                                             OpStore %180 %179 
                      Private bool* %182 = OpAccessChain %137 %181 
                               bool %183 = OpLoad %182 
                                             OpSelectionMerge %186 None 
                                             OpBranchConditional %183 %185 %189 
                                    %185 = OpLabel 
                       Private f32* %187 = OpAccessChain %128 %181 
                                f32 %188 = OpLoad %187 
                                             OpStore %184 %188 
                                             OpBranch %186 
                                    %189 = OpLabel 
                       Private f32* %190 = OpAccessChain %57 %181 
                                f32 %191 = OpLoad %190 
                                             OpStore %184 %191 
                                             OpBranch %186 
                                    %186 = OpLabel 
                                f32 %192 = OpLoad %184 
                      Function f32* %193 = OpAccessChain %152 %181 
                                             OpStore %193 %192 
                              f32_3 %194 = OpLoad %152 
                                             OpStore %57 %194 
                              f32_3 %195 = OpLoad %9 
                              f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                              f32_3 %199 = OpFMul %196 %198 
                              f32_3 %200 = OpLoad %57 
                              f32_3 %201 = OpFAdd %199 %200 
                                             OpStore %9 %201 
                              f32_3 %202 = OpLoad %9 
                              f32_3 %205 = OpFAdd %202 %204 
                              f32_4 %206 = OpLoad %98 
                              f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                             OpStore %98 %207 
                              f32_4 %208 = OpLoad %98 
                              f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                              f32_3 %212 = OpFMul %209 %211 
                              f32_4 %213 = OpLoad %98 
                              f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                             OpStore %98 %214 
                              f32_4 %215 = OpLoad %98 
                              f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              f32_3 %217 = OpExtInst %1 4 %216 
                              f32_3 %218 = OpExtInst %1 40 %217 %111 
                              f32_4 %219 = OpLoad %98 
                              f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                             OpStore %98 %220 
                              f32_4 %221 = OpLoad %98 
                              f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                              f32_3 %223 = OpExtInst %1 30 %222 
                              f32_4 %224 = OpLoad %98 
                              f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                             OpStore %98 %225 
                              f32_4 %226 = OpLoad %98 
                              f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                              f32_3 %230 = OpFMul %227 %229 
                              f32_4 %231 = OpLoad %98 
                              f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                             OpStore %98 %232 
                              f32_4 %233 = OpLoad %98 
                              f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                              f32_3 %235 = OpExtInst %1 29 %234 
                              f32_4 %236 = OpLoad %98 
                              f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                             OpStore %98 %237 
                              f32_3 %238 = OpLoad %9 
                              f32_3 %241 = OpFMul %238 %240 
                                             OpStore %128 %241 
                              f32_3 %245 = OpLoad %9 
                              f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 0 
                             bool_4 %247 = OpFOrdGreaterThanEqual %244 %246 
                             bool_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                             OpStore %242 %248 
                      Private bool* %249 = OpAccessChain %242 %47 
                               bool %250 = OpLoad %249 
                                             OpSelectionMerge %253 None 
                                             OpBranchConditional %250 %252 %256 
                                    %252 = OpLabel 
                       Private f32* %254 = OpAccessChain %128 %47 
                                f32 %255 = OpLoad %254 
                                             OpStore %251 %255 
                                             OpBranch %253 
                                    %256 = OpLabel 
                       Private f32* %257 = OpAccessChain %98 %47 
                                f32 %258 = OpLoad %257 
                                             OpStore %251 %258 
                                             OpBranch %253 
                                    %253 = OpLabel 
                                f32 %259 = OpLoad %251 
                        Output f32* %260 = OpAccessChain %146 %47 
                                             OpStore %260 %259 
                      Private bool* %261 = OpAccessChain %242 %168 
                               bool %262 = OpLoad %261 
                                             OpSelectionMerge %265 None 
                                             OpBranchConditional %262 %264 %268 
                                    %264 = OpLabel 
                       Private f32* %266 = OpAccessChain %128 %168 
                                f32 %267 = OpLoad %266 
                                             OpStore %263 %267 
                                             OpBranch %265 
                                    %268 = OpLabel 
                       Private f32* %269 = OpAccessChain %98 %168 
                                f32 %270 = OpLoad %269 
                                             OpStore %263 %270 
                                             OpBranch %265 
                                    %265 = OpLabel 
                                f32 %271 = OpLoad %263 
                        Output f32* %272 = OpAccessChain %146 %168 
                                             OpStore %272 %271 
                      Private bool* %273 = OpAccessChain %242 %181 
                               bool %274 = OpLoad %273 
                                             OpSelectionMerge %277 None 
                                             OpBranchConditional %274 %276 %280 
                                    %276 = OpLabel 
                       Private f32* %278 = OpAccessChain %128 %181 
                                f32 %279 = OpLoad %278 
                                             OpStore %275 %279 
                                             OpBranch %277 
                                    %280 = OpLabel 
                       Private f32* %281 = OpAccessChain %98 %181 
                                f32 %282 = OpLoad %281 
                                             OpStore %275 %282 
                                             OpBranch %277 
                                    %277 = OpLabel 
                                f32 %283 = OpLoad %275 
                        Output f32* %284 = OpAccessChain %146 %181 
                                             OpStore %284 %283 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %66 %73 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %22 0 Offset 22 
                                             OpMemberDecorate %22 1 Offset 22 
                                             OpMemberDecorate %22 2 Offset 22 
                                             OpDecorate %22 Block 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate vs_TEXCOORD1 Location 66 
                                             OpDecorate vs_TEXCOORD0 Location 73 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypeStruct %6 %7 %7 
                                     %23 = OpTypePointer Uniform %22 
Uniform struct {f32; f32_4; f32_4;}* %24 = OpVariable Uniform 
                                 i32 %25 = OpConstant 2 
                                     %26 = OpTypePointer Uniform %7 
                                     %35 = OpTypePointer Output %7 
                                 f32 %39 = OpConstant 3.674022E-40 
                                 f32 %40 = OpConstant 3.674022E-40 
                               f32_2 %41 = OpConstantComposite %39 %40 
                                     %45 = OpTypePointer Private %19 
                      Private f32_2* %46 = OpVariable Private 
                               f32_2 %49 = OpConstantComposite %40 %40 
                                 i32 %52 = OpConstant 1 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %58 %58 
                                     %65 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %68 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                      Uniform f32_4* %27 = OpAccessChain %24 %25 
                               f32_4 %28 = OpLoad %27 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpFMul %21 %29 
                      Uniform f32_4* %31 = OpAccessChain %24 %25 
                               f32_4 %32 = OpLoad %31 
                               f32_2 %33 = OpVectorShuffle %32 %32 2 3 
                               f32_2 %34 = OpFAdd %30 %33 
                       Output f32_4* %36 = OpAccessChain %13 %15 
                               f32_4 %37 = OpLoad %36 
                               f32_4 %38 = OpVectorShuffle %37 %34 4 5 2 3 
                                             OpStore %36 %38 
                       Output f32_4* %42 = OpAccessChain %13 %15 
                               f32_4 %43 = OpLoad %42 
                               f32_4 %44 = OpVectorShuffle %43 %41 0 1 4 5 
                                             OpStore %42 %44 
                               f32_3 %47 = OpLoad %18 
                               f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                               f32_2 %50 = OpFAdd %48 %49 
                                             OpStore %46 %50 
                               f32_2 %51 = OpLoad %46 
                      Uniform f32_4* %53 = OpAccessChain %24 %52 
                               f32_4 %54 = OpLoad %53 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               f32_2 %56 = OpFMul %51 %55 
                                             OpStore %46 %56 
                               f32_2 %57 = OpLoad %46 
                               f32_2 %60 = OpFMul %57 %59 
                      Uniform f32_4* %61 = OpAccessChain %24 %52 
                               f32_4 %62 = OpLoad %61 
                               f32_2 %63 = OpVectorShuffle %62 %62 2 3 
                               f32_2 %64 = OpFAdd %60 %63 
                                             OpStore %46 %64 
                               f32_2 %67 = OpLoad %46 
                        Uniform f32* %69 = OpAccessChain %24 %15 
                                 f32 %70 = OpLoad %69 
                               f32_2 %71 = OpCompositeConstruct %70 %70 
                               f32_2 %72 = OpFMul %67 %71 
                                             OpStore vs_TEXCOORD1 %72 
                               f32_2 %74 = OpLoad %46 
                                             OpStore vs_TEXCOORD0 %74 
                         Output f32* %76 = OpAccessChain %13 %15 %9 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                         Output f32* %79 = OpAccessChain %13 %15 %9 
                                             OpStore %79 %78 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 286
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %104 %146 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %15 0 Offset 15 
                                             OpDecorate %15 Block 
                                             OpDecorate %17 DescriptorSet 17 
                                             OpDecorate %17 Binding 17 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %99 DescriptorSet 99 
                                             OpDecorate %99 Binding 99 
                                             OpDecorate %101 DescriptorSet 101 
                                             OpDecorate %101 Binding 101 
                                             OpDecorate vs_TEXCOORD1 Location 104 
                                             OpDecorate %146 Location 146 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeVector %6 4 
                                     %15 = OpTypeStruct %14 
                                     %16 = OpTypePointer Uniform %15 
            Uniform struct {f32_4;}* %17 = OpVariable Uniform 
                                     %18 = OpTypeInt 32 1 
                                 i32 %19 = OpConstant 0 
                                     %20 = OpTypePointer Uniform %14 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                                     %44 = OpTypeInt 32 0 
                                 u32 %45 = OpConstant 3 
                                 u32 %47 = OpConstant 0 
                                     %48 = OpTypePointer Private %6 
                                 f32 %52 = OpConstant 3.674022E-40 
                                 f32 %54 = OpConstant 3.674022E-40 
                      Private f32_3* %57 = OpVariable Private 
                                 f32 %62 = OpConstant 3.674022E-40 
                                 f32 %67 = OpConstant 3.674022E-40 
                                 f32 %69 = OpConstant 3.674022E-40 
                                 f32 %74 = OpConstant 3.674022E-40 
                                     %97 = OpTypePointer Private %14 
                      Private f32_4* %98 = OpVariable Private 
UniformConstant read_only Texture2D* %99 = OpVariable UniformConstant 
           UniformConstant sampler* %101 = OpVariable UniformConstant 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                f32 %110 = OpConstant 3.674022E-40 
                              f32_3 %111 = OpConstantComposite %110 %110 %110 
                                f32 %116 = OpConstant 3.674022E-40 
                              f32_3 %117 = OpConstantComposite %116 %116 %116 
                                f32 %122 = OpConstant 3.674022E-40 
                              f32_3 %123 = OpConstantComposite %122 %122 %122 
                                f32 %125 = OpConstant 3.674022E-40 
                              f32_3 %126 = OpConstantComposite %125 %125 %125 
                     Private f32_3* %128 = OpVariable Private 
                                f32 %131 = OpConstant 3.674022E-40 
                              f32_3 %132 = OpConstantComposite %131 %131 %131 
                                    %134 = OpTypeBool 
                                    %135 = OpTypeVector %134 3 
                                    %136 = OpTypePointer Private %135 
                    Private bool_3* %137 = OpVariable Private 
                                f32 %138 = OpConstant 3.674022E-40 
                              f32_4 %139 = OpConstantComposite %138 %138 %138 %74 
                                    %142 = OpTypeVector %134 4 
                                    %145 = OpTypePointer Output %14 
                      Output f32_4* %146 = OpVariable Output 
                                    %149 = OpTypePointer Output %6 
                                    %151 = OpTypePointer Function %7 
                                    %154 = OpTypePointer Private %134 
                                    %157 = OpTypePointer Function %6 
                                u32 %168 = OpConstant 1 
                                u32 %181 = OpConstant 2 
                                f32 %197 = OpConstant 3.674022E-40 
                              f32_3 %198 = OpConstantComposite %197 %197 %197 
                                f32 %203 = OpConstant 3.674022E-40 
                              f32_3 %204 = OpConstantComposite %203 %203 %203 
                                f32 %210 = OpConstant 3.674022E-40 
                              f32_3 %211 = OpConstantComposite %210 %210 %210 
                                f32 %228 = OpConstant 3.674022E-40 
                              f32_3 %229 = OpConstantComposite %228 %228 %228 
                                f32 %239 = OpConstant 3.674022E-40 
                              f32_3 %240 = OpConstantComposite %239 %239 %239 
                    Private bool_3* %242 = OpVariable Private 
                                f32 %243 = OpConstant 3.674022E-40 
                              f32_4 %244 = OpConstantComposite %243 %243 %243 %74 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                    Function f32_3* %152 = OpVariable Function 
                      Function f32* %158 = OpVariable Function 
                      Function f32* %171 = OpVariable Function 
                      Function f32* %184 = OpVariable Function 
                      Function f32* %251 = OpVariable Function 
                      Function f32* %263 = OpVariable Function 
                      Function f32* %275 = OpVariable Function 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %21 = OpAccessChain %17 %19 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               f32_2 %24 = OpFMul %13 %23 
                      Uniform f32_4* %25 = OpAccessChain %17 %19 
                               f32_4 %26 = OpLoad %25 
                               f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                               f32_2 %28 = OpFAdd %24 %27 
                               f32_3 %29 = OpLoad %9 
                               f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                             OpStore %9 %30 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_3 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                 f32 %46 = OpCompositeExtract %43 3 
                        Private f32* %49 = OpAccessChain %9 %47 
                                             OpStore %49 %46 
                        Private f32* %50 = OpAccessChain %9 %47 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                                 f32 %55 = OpFAdd %53 %54 
                        Private f32* %56 = OpAccessChain %9 %47 
                                             OpStore %56 %55 
                        Private f32* %58 = OpAccessChain %9 %47 
                                 f32 %59 = OpLoad %58 
                                 f32 %60 = OpExtInst %1 4 %59 
                                 f32 %61 = OpFNegate %60 
                                 f32 %63 = OpFAdd %61 %62 
                        Private f32* %64 = OpAccessChain %57 %47 
                                             OpStore %64 %63 
                        Private f32* %65 = OpAccessChain %9 %47 
                                 f32 %66 = OpLoad %65 
                                 f32 %68 = OpFMul %66 %67 
                                 f32 %70 = OpFAdd %68 %69 
                        Private f32* %71 = OpAccessChain %9 %47 
                                             OpStore %71 %70 
                        Private f32* %72 = OpAccessChain %9 %47 
                                 f32 %73 = OpLoad %72 
                                 f32 %75 = OpExtInst %1 43 %73 %74 %62 
                        Private f32* %76 = OpAccessChain %9 %47 
                                             OpStore %76 %75 
                        Private f32* %77 = OpAccessChain %9 %47 
                                 f32 %78 = OpLoad %77 
                                 f32 %79 = OpFMul %78 %52 
                                 f32 %80 = OpFAdd %79 %54 
                        Private f32* %81 = OpAccessChain %9 %47 
                                             OpStore %81 %80 
                        Private f32* %82 = OpAccessChain %57 %47 
                                 f32 %83 = OpLoad %82 
                                 f32 %84 = OpExtInst %1 31 %83 
                        Private f32* %85 = OpAccessChain %57 %47 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %57 %47 
                                 f32 %87 = OpLoad %86 
                                 f32 %88 = OpFNegate %87 
                                 f32 %89 = OpFAdd %88 %62 
                        Private f32* %90 = OpAccessChain %57 %47 
                                             OpStore %90 %89 
                        Private f32* %91 = OpAccessChain %57 %47 
                                 f32 %92 = OpLoad %91 
                        Private f32* %93 = OpAccessChain %9 %47 
                                 f32 %94 = OpLoad %93 
                                 f32 %95 = OpFMul %92 %94 
                        Private f32* %96 = OpAccessChain %9 %47 
                                             OpStore %96 %95 
                read_only Texture2D %100 = OpLoad %99 
                            sampler %102 = OpLoad %101 
         read_only Texture2DSampled %103 = OpSampledImage %100 %102 
                              f32_2 %105 = OpLoad vs_TEXCOORD1 
                              f32_4 %106 = OpImageSampleImplicitLod %103 %105 
                                             OpStore %98 %106 
                              f32_4 %107 = OpLoad %98 
                              f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                              f32_3 %109 = OpExtInst %1 4 %108 
                              f32_3 %112 = OpExtInst %1 40 %109 %111 
                                             OpStore %57 %112 
                              f32_3 %113 = OpLoad %57 
                              f32_3 %114 = OpExtInst %1 30 %113 
                                             OpStore %57 %114 
                              f32_3 %115 = OpLoad %57 
                              f32_3 %118 = OpFMul %115 %117 
                                             OpStore %57 %118 
                              f32_3 %119 = OpLoad %57 
                              f32_3 %120 = OpExtInst %1 29 %119 
                                             OpStore %57 %120 
                              f32_3 %121 = OpLoad %57 
                              f32_3 %124 = OpFMul %121 %123 
                              f32_3 %127 = OpFAdd %124 %126 
                                             OpStore %57 %127 
                              f32_4 %129 = OpLoad %98 
                              f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                              f32_3 %133 = OpFMul %130 %132 
                                             OpStore %128 %133 
                              f32_4 %140 = OpLoad %98 
                              f32_4 %141 = OpVectorShuffle %140 %140 0 1 2 0 
                             bool_4 %143 = OpFOrdGreaterThanEqual %139 %141 
                             bool_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                             OpStore %137 %144 
                       Private f32* %147 = OpAccessChain %98 %45 
                                f32 %148 = OpLoad %147 
                        Output f32* %150 = OpAccessChain %146 %45 
                                             OpStore %150 %148 
                              f32_3 %153 = OpLoad %57 
                                             OpStore %152 %153 
                      Private bool* %155 = OpAccessChain %137 %47 
                               bool %156 = OpLoad %155 
                                             OpSelectionMerge %160 None 
                                             OpBranchConditional %156 %159 %163 
                                    %159 = OpLabel 
                       Private f32* %161 = OpAccessChain %128 %47 
                                f32 %162 = OpLoad %161 
                                             OpStore %158 %162 
                                             OpBranch %160 
                                    %163 = OpLabel 
                       Private f32* %164 = OpAccessChain %57 %47 
                                f32 %165 = OpLoad %164 
                                             OpStore %158 %165 
                                             OpBranch %160 
                                    %160 = OpLabel 
                                f32 %166 = OpLoad %158 
                      Function f32* %167 = OpAccessChain %152 %47 
                                             OpStore %167 %166 
                      Private bool* %169 = OpAccessChain %137 %168 
                               bool %170 = OpLoad %169 
                                             OpSelectionMerge %173 None 
                                             OpBranchConditional %170 %172 %176 
                                    %172 = OpLabel 
                       Private f32* %174 = OpAccessChain %128 %168 
                                f32 %175 = OpLoad %174 
                                             OpStore %171 %175 
                                             OpBranch %173 
                                    %176 = OpLabel 
                       Private f32* %177 = OpAccessChain %57 %168 
                                f32 %178 = OpLoad %177 
                                             OpStore %171 %178 
                                             OpBranch %173 
                                    %173 = OpLabel 
                                f32 %179 = OpLoad %171 
                      Function f32* %180 = OpAccessChain %152 %168 
                                             OpStore %180 %179 
                      Private bool* %182 = OpAccessChain %137 %181 
                               bool %183 = OpLoad %182 
                                             OpSelectionMerge %186 None 
                                             OpBranchConditional %183 %185 %189 
                                    %185 = OpLabel 
                       Private f32* %187 = OpAccessChain %128 %181 
                                f32 %188 = OpLoad %187 
                                             OpStore %184 %188 
                                             OpBranch %186 
                                    %189 = OpLabel 
                       Private f32* %190 = OpAccessChain %57 %181 
                                f32 %191 = OpLoad %190 
                                             OpStore %184 %191 
                                             OpBranch %186 
                                    %186 = OpLabel 
                                f32 %192 = OpLoad %184 
                      Function f32* %193 = OpAccessChain %152 %181 
                                             OpStore %193 %192 
                              f32_3 %194 = OpLoad %152 
                                             OpStore %57 %194 
                              f32_3 %195 = OpLoad %9 
                              f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                              f32_3 %199 = OpFMul %196 %198 
                              f32_3 %200 = OpLoad %57 
                              f32_3 %201 = OpFAdd %199 %200 
                                             OpStore %9 %201 
                              f32_3 %202 = OpLoad %9 
                              f32_3 %205 = OpFAdd %202 %204 
                              f32_4 %206 = OpLoad %98 
                              f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                             OpStore %98 %207 
                              f32_4 %208 = OpLoad %98 
                              f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                              f32_3 %212 = OpFMul %209 %211 
                              f32_4 %213 = OpLoad %98 
                              f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                             OpStore %98 %214 
                              f32_4 %215 = OpLoad %98 
                              f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              f32_3 %217 = OpExtInst %1 4 %216 
                              f32_3 %218 = OpExtInst %1 40 %217 %111 
                              f32_4 %219 = OpLoad %98 
                              f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                             OpStore %98 %220 
                              f32_4 %221 = OpLoad %98 
                              f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                              f32_3 %223 = OpExtInst %1 30 %222 
                              f32_4 %224 = OpLoad %98 
                              f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                             OpStore %98 %225 
                              f32_4 %226 = OpLoad %98 
                              f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                              f32_3 %230 = OpFMul %227 %229 
                              f32_4 %231 = OpLoad %98 
                              f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                             OpStore %98 %232 
                              f32_4 %233 = OpLoad %98 
                              f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                              f32_3 %235 = OpExtInst %1 29 %234 
                              f32_4 %236 = OpLoad %98 
                              f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                             OpStore %98 %237 
                              f32_3 %238 = OpLoad %9 
                              f32_3 %241 = OpFMul %238 %240 
                                             OpStore %128 %241 
                              f32_3 %245 = OpLoad %9 
                              f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 0 
                             bool_4 %247 = OpFOrdGreaterThanEqual %244 %246 
                             bool_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                             OpStore %242 %248 
                      Private bool* %249 = OpAccessChain %242 %47 
                               bool %250 = OpLoad %249 
                                             OpSelectionMerge %253 None 
                                             OpBranchConditional %250 %252 %256 
                                    %252 = OpLabel 
                       Private f32* %254 = OpAccessChain %128 %47 
                                f32 %255 = OpLoad %254 
                                             OpStore %251 %255 
                                             OpBranch %253 
                                    %256 = OpLabel 
                       Private f32* %257 = OpAccessChain %98 %47 
                                f32 %258 = OpLoad %257 
                                             OpStore %251 %258 
                                             OpBranch %253 
                                    %253 = OpLabel 
                                f32 %259 = OpLoad %251 
                        Output f32* %260 = OpAccessChain %146 %47 
                                             OpStore %260 %259 
                      Private bool* %261 = OpAccessChain %242 %168 
                               bool %262 = OpLoad %261 
                                             OpSelectionMerge %265 None 
                                             OpBranchConditional %262 %264 %268 
                                    %264 = OpLabel 
                       Private f32* %266 = OpAccessChain %128 %168 
                                f32 %267 = OpLoad %266 
                                             OpStore %263 %267 
                                             OpBranch %265 
                                    %268 = OpLabel 
                       Private f32* %269 = OpAccessChain %98 %168 
                                f32 %270 = OpLoad %269 
                                             OpStore %263 %270 
                                             OpBranch %265 
                                    %265 = OpLabel 
                                f32 %271 = OpLoad %263 
                        Output f32* %272 = OpAccessChain %146 %168 
                                             OpStore %272 %271 
                      Private bool* %273 = OpAccessChain %242 %181 
                               bool %274 = OpLoad %273 
                                             OpSelectionMerge %277 None 
                                             OpBranchConditional %274 %276 %280 
                                    %276 = OpLabel 
                       Private f32* %278 = OpAccessChain %128 %181 
                                f32 %279 = OpLoad %278 
                                             OpStore %275 %279 
                                             OpBranch %277 
                                    %280 = OpLabel 
                       Private f32* %281 = OpAccessChain %98 %181 
                                f32 %282 = OpLoad %281 
                                             OpStore %275 %282 
                                             OpBranch %277 
                                    %277 = OpLabel 
                                f32 %283 = OpLoad %275 
                        Output f32* %284 = OpAccessChain %146 %181 
                                             OpStore %284 %283 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA_NO_ALPHA" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %57 %64 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %39 0 Offset 39 
                                             OpMemberDecorate %39 1 Offset 39 
                                             OpDecorate %39 Block 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate vs_TEXCOORD1 Location 57 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypePointer Output %7 
                                 f32 %26 = OpConstant 3.674022E-40 
                                 f32 %27 = OpConstant 3.674022E-40 
                               f32_2 %28 = OpConstantComposite %26 %27 
                                     %32 = OpTypePointer Private %19 
                      Private f32_2* %33 = OpVariable Private 
                               f32_2 %36 = OpConstantComposite %27 %27 
                                     %39 = OpTypeStruct %6 %7 
                                     %40 = OpTypePointer Uniform %39 
       Uniform struct {f32; f32_4;}* %41 = OpVariable Uniform 
                                 i32 %42 = OpConstant 1 
                                     %43 = OpTypePointer Uniform %7 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_2 %50 = OpConstantComposite %49 %49 
                                     %56 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %59 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                       Output f32_4* %23 = OpAccessChain %13 %15 
                               f32_4 %24 = OpLoad %23 
                               f32_4 %25 = OpVectorShuffle %24 %21 4 5 2 3 
                                             OpStore %23 %25 
                       Output f32_4* %29 = OpAccessChain %13 %15 
                               f32_4 %30 = OpLoad %29 
                               f32_4 %31 = OpVectorShuffle %30 %28 0 1 4 5 
                                             OpStore %29 %31 
                               f32_3 %34 = OpLoad %18 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %37 = OpFAdd %35 %36 
                                             OpStore %33 %37 
                               f32_2 %38 = OpLoad %33 
                      Uniform f32_4* %44 = OpAccessChain %41 %42 
                               f32_4 %45 = OpLoad %44 
                               f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                               f32_2 %47 = OpFMul %38 %46 
                                             OpStore %33 %47 
                               f32_2 %48 = OpLoad %33 
                               f32_2 %51 = OpFMul %48 %50 
                      Uniform f32_4* %52 = OpAccessChain %41 %42 
                               f32_4 %53 = OpLoad %52 
                               f32_2 %54 = OpVectorShuffle %53 %53 2 3 
                               f32_2 %55 = OpFAdd %51 %54 
                                             OpStore %33 %55 
                               f32_2 %58 = OpLoad %33 
                        Uniform f32* %60 = OpAccessChain %41 %15 
                                 f32 %61 = OpLoad %60 
                               f32_2 %62 = OpCompositeConstruct %61 %61 
                               f32_2 %63 = OpFMul %58 %62 
                                             OpStore vs_TEXCOORD1 %63 
                               f32_2 %65 = OpLoad %33 
                                             OpStore vs_TEXCOORD0 %65 
                         Output f32* %67 = OpAccessChain %13 %15 %9 
                                 f32 %68 = OpLoad %67 
                                 f32 %69 = OpFNegate %68 
                         Output f32* %70 = OpAccessChain %13 %15 %9 
                                             OpStore %70 %69 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 286
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %104 %146 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %15 0 Offset 15 
                                             OpDecorate %15 Block 
                                             OpDecorate %17 DescriptorSet 17 
                                             OpDecorate %17 Binding 17 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %99 DescriptorSet 99 
                                             OpDecorate %99 Binding 99 
                                             OpDecorate %101 DescriptorSet 101 
                                             OpDecorate %101 Binding 101 
                                             OpDecorate vs_TEXCOORD1 Location 104 
                                             OpDecorate %146 Location 146 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeVector %6 4 
                                     %15 = OpTypeStruct %14 
                                     %16 = OpTypePointer Uniform %15 
            Uniform struct {f32_4;}* %17 = OpVariable Uniform 
                                     %18 = OpTypeInt 32 1 
                                 i32 %19 = OpConstant 0 
                                     %20 = OpTypePointer Uniform %14 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                                     %44 = OpTypeInt 32 0 
                                 u32 %45 = OpConstant 3 
                                 u32 %47 = OpConstant 0 
                                     %48 = OpTypePointer Private %6 
                                 f32 %52 = OpConstant 3.674022E-40 
                                 f32 %54 = OpConstant 3.674022E-40 
                      Private f32_3* %57 = OpVariable Private 
                                 f32 %62 = OpConstant 3.674022E-40 
                                 f32 %67 = OpConstant 3.674022E-40 
                                 f32 %69 = OpConstant 3.674022E-40 
                                 f32 %74 = OpConstant 3.674022E-40 
                                     %97 = OpTypePointer Private %14 
                      Private f32_4* %98 = OpVariable Private 
UniformConstant read_only Texture2D* %99 = OpVariable UniformConstant 
           UniformConstant sampler* %101 = OpVariable UniformConstant 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                f32 %110 = OpConstant 3.674022E-40 
                              f32_3 %111 = OpConstantComposite %110 %110 %110 
                                f32 %116 = OpConstant 3.674022E-40 
                              f32_3 %117 = OpConstantComposite %116 %116 %116 
                                f32 %122 = OpConstant 3.674022E-40 
                              f32_3 %123 = OpConstantComposite %122 %122 %122 
                                f32 %125 = OpConstant 3.674022E-40 
                              f32_3 %126 = OpConstantComposite %125 %125 %125 
                     Private f32_3* %128 = OpVariable Private 
                                f32 %131 = OpConstant 3.674022E-40 
                              f32_3 %132 = OpConstantComposite %131 %131 %131 
                                    %134 = OpTypeBool 
                                    %135 = OpTypeVector %134 3 
                                    %136 = OpTypePointer Private %135 
                    Private bool_3* %137 = OpVariable Private 
                                f32 %138 = OpConstant 3.674022E-40 
                              f32_4 %139 = OpConstantComposite %138 %138 %138 %74 
                                    %142 = OpTypeVector %134 4 
                                    %145 = OpTypePointer Output %14 
                      Output f32_4* %146 = OpVariable Output 
                                    %149 = OpTypePointer Output %6 
                                    %151 = OpTypePointer Function %7 
                                    %154 = OpTypePointer Private %134 
                                    %157 = OpTypePointer Function %6 
                                u32 %168 = OpConstant 1 
                                u32 %181 = OpConstant 2 
                                f32 %197 = OpConstant 3.674022E-40 
                              f32_3 %198 = OpConstantComposite %197 %197 %197 
                                f32 %203 = OpConstant 3.674022E-40 
                              f32_3 %204 = OpConstantComposite %203 %203 %203 
                                f32 %210 = OpConstant 3.674022E-40 
                              f32_3 %211 = OpConstantComposite %210 %210 %210 
                                f32 %228 = OpConstant 3.674022E-40 
                              f32_3 %229 = OpConstantComposite %228 %228 %228 
                                f32 %239 = OpConstant 3.674022E-40 
                              f32_3 %240 = OpConstantComposite %239 %239 %239 
                    Private bool_3* %242 = OpVariable Private 
                                f32 %243 = OpConstant 3.674022E-40 
                              f32_4 %244 = OpConstantComposite %243 %243 %243 %74 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                    Function f32_3* %152 = OpVariable Function 
                      Function f32* %158 = OpVariable Function 
                      Function f32* %171 = OpVariable Function 
                      Function f32* %184 = OpVariable Function 
                      Function f32* %251 = OpVariable Function 
                      Function f32* %263 = OpVariable Function 
                      Function f32* %275 = OpVariable Function 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %21 = OpAccessChain %17 %19 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               f32_2 %24 = OpFMul %13 %23 
                      Uniform f32_4* %25 = OpAccessChain %17 %19 
                               f32_4 %26 = OpLoad %25 
                               f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                               f32_2 %28 = OpFAdd %24 %27 
                               f32_3 %29 = OpLoad %9 
                               f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                             OpStore %9 %30 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_3 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                 f32 %46 = OpCompositeExtract %43 3 
                        Private f32* %49 = OpAccessChain %9 %47 
                                             OpStore %49 %46 
                        Private f32* %50 = OpAccessChain %9 %47 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                                 f32 %55 = OpFAdd %53 %54 
                        Private f32* %56 = OpAccessChain %9 %47 
                                             OpStore %56 %55 
                        Private f32* %58 = OpAccessChain %9 %47 
                                 f32 %59 = OpLoad %58 
                                 f32 %60 = OpExtInst %1 4 %59 
                                 f32 %61 = OpFNegate %60 
                                 f32 %63 = OpFAdd %61 %62 
                        Private f32* %64 = OpAccessChain %57 %47 
                                             OpStore %64 %63 
                        Private f32* %65 = OpAccessChain %9 %47 
                                 f32 %66 = OpLoad %65 
                                 f32 %68 = OpFMul %66 %67 
                                 f32 %70 = OpFAdd %68 %69 
                        Private f32* %71 = OpAccessChain %9 %47 
                                             OpStore %71 %70 
                        Private f32* %72 = OpAccessChain %9 %47 
                                 f32 %73 = OpLoad %72 
                                 f32 %75 = OpExtInst %1 43 %73 %74 %62 
                        Private f32* %76 = OpAccessChain %9 %47 
                                             OpStore %76 %75 
                        Private f32* %77 = OpAccessChain %9 %47 
                                 f32 %78 = OpLoad %77 
                                 f32 %79 = OpFMul %78 %52 
                                 f32 %80 = OpFAdd %79 %54 
                        Private f32* %81 = OpAccessChain %9 %47 
                                             OpStore %81 %80 
                        Private f32* %82 = OpAccessChain %57 %47 
                                 f32 %83 = OpLoad %82 
                                 f32 %84 = OpExtInst %1 31 %83 
                        Private f32* %85 = OpAccessChain %57 %47 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %57 %47 
                                 f32 %87 = OpLoad %86 
                                 f32 %88 = OpFNegate %87 
                                 f32 %89 = OpFAdd %88 %62 
                        Private f32* %90 = OpAccessChain %57 %47 
                                             OpStore %90 %89 
                        Private f32* %91 = OpAccessChain %57 %47 
                                 f32 %92 = OpLoad %91 
                        Private f32* %93 = OpAccessChain %9 %47 
                                 f32 %94 = OpLoad %93 
                                 f32 %95 = OpFMul %92 %94 
                        Private f32* %96 = OpAccessChain %9 %47 
                                             OpStore %96 %95 
                read_only Texture2D %100 = OpLoad %99 
                            sampler %102 = OpLoad %101 
         read_only Texture2DSampled %103 = OpSampledImage %100 %102 
                              f32_2 %105 = OpLoad vs_TEXCOORD1 
                              f32_4 %106 = OpImageSampleImplicitLod %103 %105 
                                             OpStore %98 %106 
                              f32_4 %107 = OpLoad %98 
                              f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                              f32_3 %109 = OpExtInst %1 4 %108 
                              f32_3 %112 = OpExtInst %1 40 %109 %111 
                                             OpStore %57 %112 
                              f32_3 %113 = OpLoad %57 
                              f32_3 %114 = OpExtInst %1 30 %113 
                                             OpStore %57 %114 
                              f32_3 %115 = OpLoad %57 
                              f32_3 %118 = OpFMul %115 %117 
                                             OpStore %57 %118 
                              f32_3 %119 = OpLoad %57 
                              f32_3 %120 = OpExtInst %1 29 %119 
                                             OpStore %57 %120 
                              f32_3 %121 = OpLoad %57 
                              f32_3 %124 = OpFMul %121 %123 
                              f32_3 %127 = OpFAdd %124 %126 
                                             OpStore %57 %127 
                              f32_4 %129 = OpLoad %98 
                              f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                              f32_3 %133 = OpFMul %130 %132 
                                             OpStore %128 %133 
                              f32_4 %140 = OpLoad %98 
                              f32_4 %141 = OpVectorShuffle %140 %140 0 1 2 0 
                             bool_4 %143 = OpFOrdGreaterThanEqual %139 %141 
                             bool_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                             OpStore %137 %144 
                       Private f32* %147 = OpAccessChain %98 %45 
                                f32 %148 = OpLoad %147 
                        Output f32* %150 = OpAccessChain %146 %45 
                                             OpStore %150 %148 
                              f32_3 %153 = OpLoad %57 
                                             OpStore %152 %153 
                      Private bool* %155 = OpAccessChain %137 %47 
                               bool %156 = OpLoad %155 
                                             OpSelectionMerge %160 None 
                                             OpBranchConditional %156 %159 %163 
                                    %159 = OpLabel 
                       Private f32* %161 = OpAccessChain %128 %47 
                                f32 %162 = OpLoad %161 
                                             OpStore %158 %162 
                                             OpBranch %160 
                                    %163 = OpLabel 
                       Private f32* %164 = OpAccessChain %57 %47 
                                f32 %165 = OpLoad %164 
                                             OpStore %158 %165 
                                             OpBranch %160 
                                    %160 = OpLabel 
                                f32 %166 = OpLoad %158 
                      Function f32* %167 = OpAccessChain %152 %47 
                                             OpStore %167 %166 
                      Private bool* %169 = OpAccessChain %137 %168 
                               bool %170 = OpLoad %169 
                                             OpSelectionMerge %173 None 
                                             OpBranchConditional %170 %172 %176 
                                    %172 = OpLabel 
                       Private f32* %174 = OpAccessChain %128 %168 
                                f32 %175 = OpLoad %174 
                                             OpStore %171 %175 
                                             OpBranch %173 
                                    %176 = OpLabel 
                       Private f32* %177 = OpAccessChain %57 %168 
                                f32 %178 = OpLoad %177 
                                             OpStore %171 %178 
                                             OpBranch %173 
                                    %173 = OpLabel 
                                f32 %179 = OpLoad %171 
                      Function f32* %180 = OpAccessChain %152 %168 
                                             OpStore %180 %179 
                      Private bool* %182 = OpAccessChain %137 %181 
                               bool %183 = OpLoad %182 
                                             OpSelectionMerge %186 None 
                                             OpBranchConditional %183 %185 %189 
                                    %185 = OpLabel 
                       Private f32* %187 = OpAccessChain %128 %181 
                                f32 %188 = OpLoad %187 
                                             OpStore %184 %188 
                                             OpBranch %186 
                                    %189 = OpLabel 
                       Private f32* %190 = OpAccessChain %57 %181 
                                f32 %191 = OpLoad %190 
                                             OpStore %184 %191 
                                             OpBranch %186 
                                    %186 = OpLabel 
                                f32 %192 = OpLoad %184 
                      Function f32* %193 = OpAccessChain %152 %181 
                                             OpStore %193 %192 
                              f32_3 %194 = OpLoad %152 
                                             OpStore %57 %194 
                              f32_3 %195 = OpLoad %9 
                              f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                              f32_3 %199 = OpFMul %196 %198 
                              f32_3 %200 = OpLoad %57 
                              f32_3 %201 = OpFAdd %199 %200 
                                             OpStore %9 %201 
                              f32_3 %202 = OpLoad %9 
                              f32_3 %205 = OpFAdd %202 %204 
                              f32_4 %206 = OpLoad %98 
                              f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                             OpStore %98 %207 
                              f32_4 %208 = OpLoad %98 
                              f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                              f32_3 %212 = OpFMul %209 %211 
                              f32_4 %213 = OpLoad %98 
                              f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                             OpStore %98 %214 
                              f32_4 %215 = OpLoad %98 
                              f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              f32_3 %217 = OpExtInst %1 4 %216 
                              f32_3 %218 = OpExtInst %1 40 %217 %111 
                              f32_4 %219 = OpLoad %98 
                              f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                             OpStore %98 %220 
                              f32_4 %221 = OpLoad %98 
                              f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                              f32_3 %223 = OpExtInst %1 30 %222 
                              f32_4 %224 = OpLoad %98 
                              f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                             OpStore %98 %225 
                              f32_4 %226 = OpLoad %98 
                              f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                              f32_3 %230 = OpFMul %227 %229 
                              f32_4 %231 = OpLoad %98 
                              f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                             OpStore %98 %232 
                              f32_4 %233 = OpLoad %98 
                              f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                              f32_3 %235 = OpExtInst %1 29 %234 
                              f32_4 %236 = OpLoad %98 
                              f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                             OpStore %98 %237 
                              f32_3 %238 = OpLoad %9 
                              f32_3 %241 = OpFMul %238 %240 
                                             OpStore %128 %241 
                              f32_3 %245 = OpLoad %9 
                              f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 0 
                             bool_4 %247 = OpFOrdGreaterThanEqual %244 %246 
                             bool_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                             OpStore %242 %248 
                      Private bool* %249 = OpAccessChain %242 %47 
                               bool %250 = OpLoad %249 
                                             OpSelectionMerge %253 None 
                                             OpBranchConditional %250 %252 %256 
                                    %252 = OpLabel 
                       Private f32* %254 = OpAccessChain %128 %47 
                                f32 %255 = OpLoad %254 
                                             OpStore %251 %255 
                                             OpBranch %253 
                                    %256 = OpLabel 
                       Private f32* %257 = OpAccessChain %98 %47 
                                f32 %258 = OpLoad %257 
                                             OpStore %251 %258 
                                             OpBranch %253 
                                    %253 = OpLabel 
                                f32 %259 = OpLoad %251 
                        Output f32* %260 = OpAccessChain %146 %47 
                                             OpStore %260 %259 
                      Private bool* %261 = OpAccessChain %242 %168 
                               bool %262 = OpLoad %261 
                                             OpSelectionMerge %265 None 
                                             OpBranchConditional %262 %264 %268 
                                    %264 = OpLabel 
                       Private f32* %266 = OpAccessChain %128 %168 
                                f32 %267 = OpLoad %266 
                                             OpStore %263 %267 
                                             OpBranch %265 
                                    %268 = OpLabel 
                       Private f32* %269 = OpAccessChain %98 %168 
                                f32 %270 = OpLoad %269 
                                             OpStore %263 %270 
                                             OpBranch %265 
                                    %265 = OpLabel 
                                f32 %271 = OpLoad %263 
                        Output f32* %272 = OpAccessChain %146 %168 
                                             OpStore %272 %271 
                      Private bool* %273 = OpAccessChain %242 %181 
                               bool %274 = OpLoad %273 
                                             OpSelectionMerge %277 None 
                                             OpBranchConditional %274 %276 %280 
                                    %276 = OpLabel 
                       Private f32* %278 = OpAccessChain %128 %181 
                                f32 %279 = OpLoad %278 
                                             OpStore %275 %279 
                                             OpBranch %277 
                                    %280 = OpLabel 
                       Private f32* %281 = OpAccessChain %98 %181 
                                f32 %282 = OpLoad %281 
                                             OpStore %275 %282 
                                             OpBranch %277 
                                    %277 = OpLabel 
                                f32 %283 = OpLoad %275 
                        Output f32* %284 = OpAccessChain %146 %181 
                                             OpStore %284 %283 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %66 %73 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %22 0 Offset 22 
                                             OpMemberDecorate %22 1 Offset 22 
                                             OpMemberDecorate %22 2 Offset 22 
                                             OpDecorate %22 Block 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate vs_TEXCOORD1 Location 66 
                                             OpDecorate vs_TEXCOORD0 Location 73 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypeStruct %6 %7 %7 
                                     %23 = OpTypePointer Uniform %22 
Uniform struct {f32; f32_4; f32_4;}* %24 = OpVariable Uniform 
                                 i32 %25 = OpConstant 2 
                                     %26 = OpTypePointer Uniform %7 
                                     %35 = OpTypePointer Output %7 
                                 f32 %39 = OpConstant 3.674022E-40 
                                 f32 %40 = OpConstant 3.674022E-40 
                               f32_2 %41 = OpConstantComposite %39 %40 
                                     %45 = OpTypePointer Private %19 
                      Private f32_2* %46 = OpVariable Private 
                               f32_2 %49 = OpConstantComposite %40 %40 
                                 i32 %52 = OpConstant 1 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %58 %58 
                                     %65 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %68 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                      Uniform f32_4* %27 = OpAccessChain %24 %25 
                               f32_4 %28 = OpLoad %27 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpFMul %21 %29 
                      Uniform f32_4* %31 = OpAccessChain %24 %25 
                               f32_4 %32 = OpLoad %31 
                               f32_2 %33 = OpVectorShuffle %32 %32 2 3 
                               f32_2 %34 = OpFAdd %30 %33 
                       Output f32_4* %36 = OpAccessChain %13 %15 
                               f32_4 %37 = OpLoad %36 
                               f32_4 %38 = OpVectorShuffle %37 %34 4 5 2 3 
                                             OpStore %36 %38 
                       Output f32_4* %42 = OpAccessChain %13 %15 
                               f32_4 %43 = OpLoad %42 
                               f32_4 %44 = OpVectorShuffle %43 %41 0 1 4 5 
                                             OpStore %42 %44 
                               f32_3 %47 = OpLoad %18 
                               f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                               f32_2 %50 = OpFAdd %48 %49 
                                             OpStore %46 %50 
                               f32_2 %51 = OpLoad %46 
                      Uniform f32_4* %53 = OpAccessChain %24 %52 
                               f32_4 %54 = OpLoad %53 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               f32_2 %56 = OpFMul %51 %55 
                                             OpStore %46 %56 
                               f32_2 %57 = OpLoad %46 
                               f32_2 %60 = OpFMul %57 %59 
                      Uniform f32_4* %61 = OpAccessChain %24 %52 
                               f32_4 %62 = OpLoad %61 
                               f32_2 %63 = OpVectorShuffle %62 %62 2 3 
                               f32_2 %64 = OpFAdd %60 %63 
                                             OpStore %46 %64 
                               f32_2 %67 = OpLoad %46 
                        Uniform f32* %69 = OpAccessChain %24 %15 
                                 f32 %70 = OpLoad %69 
                               f32_2 %71 = OpCompositeConstruct %70 %70 
                               f32_2 %72 = OpFMul %67 %71 
                                             OpStore vs_TEXCOORD1 %72 
                               f32_2 %74 = OpLoad %46 
                                             OpStore vs_TEXCOORD0 %74 
                         Output f32* %76 = OpAccessChain %13 %15 %9 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                         Output f32* %79 = OpAccessChain %13 %15 %9 
                                             OpStore %79 %78 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 286
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %104 %146 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %15 0 Offset 15 
                                             OpDecorate %15 Block 
                                             OpDecorate %17 DescriptorSet 17 
                                             OpDecorate %17 Binding 17 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %99 DescriptorSet 99 
                                             OpDecorate %99 Binding 99 
                                             OpDecorate %101 DescriptorSet 101 
                                             OpDecorate %101 Binding 101 
                                             OpDecorate vs_TEXCOORD1 Location 104 
                                             OpDecorate %146 Location 146 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeVector %6 4 
                                     %15 = OpTypeStruct %14 
                                     %16 = OpTypePointer Uniform %15 
            Uniform struct {f32_4;}* %17 = OpVariable Uniform 
                                     %18 = OpTypeInt 32 1 
                                 i32 %19 = OpConstant 0 
                                     %20 = OpTypePointer Uniform %14 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                                     %44 = OpTypeInt 32 0 
                                 u32 %45 = OpConstant 3 
                                 u32 %47 = OpConstant 0 
                                     %48 = OpTypePointer Private %6 
                                 f32 %52 = OpConstant 3.674022E-40 
                                 f32 %54 = OpConstant 3.674022E-40 
                      Private f32_3* %57 = OpVariable Private 
                                 f32 %62 = OpConstant 3.674022E-40 
                                 f32 %67 = OpConstant 3.674022E-40 
                                 f32 %69 = OpConstant 3.674022E-40 
                                 f32 %74 = OpConstant 3.674022E-40 
                                     %97 = OpTypePointer Private %14 
                      Private f32_4* %98 = OpVariable Private 
UniformConstant read_only Texture2D* %99 = OpVariable UniformConstant 
           UniformConstant sampler* %101 = OpVariable UniformConstant 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                f32 %110 = OpConstant 3.674022E-40 
                              f32_3 %111 = OpConstantComposite %110 %110 %110 
                                f32 %116 = OpConstant 3.674022E-40 
                              f32_3 %117 = OpConstantComposite %116 %116 %116 
                                f32 %122 = OpConstant 3.674022E-40 
                              f32_3 %123 = OpConstantComposite %122 %122 %122 
                                f32 %125 = OpConstant 3.674022E-40 
                              f32_3 %126 = OpConstantComposite %125 %125 %125 
                     Private f32_3* %128 = OpVariable Private 
                                f32 %131 = OpConstant 3.674022E-40 
                              f32_3 %132 = OpConstantComposite %131 %131 %131 
                                    %134 = OpTypeBool 
                                    %135 = OpTypeVector %134 3 
                                    %136 = OpTypePointer Private %135 
                    Private bool_3* %137 = OpVariable Private 
                                f32 %138 = OpConstant 3.674022E-40 
                              f32_4 %139 = OpConstantComposite %138 %138 %138 %74 
                                    %142 = OpTypeVector %134 4 
                                    %145 = OpTypePointer Output %14 
                      Output f32_4* %146 = OpVariable Output 
                                    %149 = OpTypePointer Output %6 
                                    %151 = OpTypePointer Function %7 
                                    %154 = OpTypePointer Private %134 
                                    %157 = OpTypePointer Function %6 
                                u32 %168 = OpConstant 1 
                                u32 %181 = OpConstant 2 
                                f32 %197 = OpConstant 3.674022E-40 
                              f32_3 %198 = OpConstantComposite %197 %197 %197 
                                f32 %203 = OpConstant 3.674022E-40 
                              f32_3 %204 = OpConstantComposite %203 %203 %203 
                                f32 %210 = OpConstant 3.674022E-40 
                              f32_3 %211 = OpConstantComposite %210 %210 %210 
                                f32 %228 = OpConstant 3.674022E-40 
                              f32_3 %229 = OpConstantComposite %228 %228 %228 
                                f32 %239 = OpConstant 3.674022E-40 
                              f32_3 %240 = OpConstantComposite %239 %239 %239 
                    Private bool_3* %242 = OpVariable Private 
                                f32 %243 = OpConstant 3.674022E-40 
                              f32_4 %244 = OpConstantComposite %243 %243 %243 %74 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                    Function f32_3* %152 = OpVariable Function 
                      Function f32* %158 = OpVariable Function 
                      Function f32* %171 = OpVariable Function 
                      Function f32* %184 = OpVariable Function 
                      Function f32* %251 = OpVariable Function 
                      Function f32* %263 = OpVariable Function 
                      Function f32* %275 = OpVariable Function 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %21 = OpAccessChain %17 %19 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               f32_2 %24 = OpFMul %13 %23 
                      Uniform f32_4* %25 = OpAccessChain %17 %19 
                               f32_4 %26 = OpLoad %25 
                               f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                               f32_2 %28 = OpFAdd %24 %27 
                               f32_3 %29 = OpLoad %9 
                               f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                             OpStore %9 %30 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_3 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                 f32 %46 = OpCompositeExtract %43 3 
                        Private f32* %49 = OpAccessChain %9 %47 
                                             OpStore %49 %46 
                        Private f32* %50 = OpAccessChain %9 %47 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                                 f32 %55 = OpFAdd %53 %54 
                        Private f32* %56 = OpAccessChain %9 %47 
                                             OpStore %56 %55 
                        Private f32* %58 = OpAccessChain %9 %47 
                                 f32 %59 = OpLoad %58 
                                 f32 %60 = OpExtInst %1 4 %59 
                                 f32 %61 = OpFNegate %60 
                                 f32 %63 = OpFAdd %61 %62 
                        Private f32* %64 = OpAccessChain %57 %47 
                                             OpStore %64 %63 
                        Private f32* %65 = OpAccessChain %9 %47 
                                 f32 %66 = OpLoad %65 
                                 f32 %68 = OpFMul %66 %67 
                                 f32 %70 = OpFAdd %68 %69 
                        Private f32* %71 = OpAccessChain %9 %47 
                                             OpStore %71 %70 
                        Private f32* %72 = OpAccessChain %9 %47 
                                 f32 %73 = OpLoad %72 
                                 f32 %75 = OpExtInst %1 43 %73 %74 %62 
                        Private f32* %76 = OpAccessChain %9 %47 
                                             OpStore %76 %75 
                        Private f32* %77 = OpAccessChain %9 %47 
                                 f32 %78 = OpLoad %77 
                                 f32 %79 = OpFMul %78 %52 
                                 f32 %80 = OpFAdd %79 %54 
                        Private f32* %81 = OpAccessChain %9 %47 
                                             OpStore %81 %80 
                        Private f32* %82 = OpAccessChain %57 %47 
                                 f32 %83 = OpLoad %82 
                                 f32 %84 = OpExtInst %1 31 %83 
                        Private f32* %85 = OpAccessChain %57 %47 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %57 %47 
                                 f32 %87 = OpLoad %86 
                                 f32 %88 = OpFNegate %87 
                                 f32 %89 = OpFAdd %88 %62 
                        Private f32* %90 = OpAccessChain %57 %47 
                                             OpStore %90 %89 
                        Private f32* %91 = OpAccessChain %57 %47 
                                 f32 %92 = OpLoad %91 
                        Private f32* %93 = OpAccessChain %9 %47 
                                 f32 %94 = OpLoad %93 
                                 f32 %95 = OpFMul %92 %94 
                        Private f32* %96 = OpAccessChain %9 %47 
                                             OpStore %96 %95 
                read_only Texture2D %100 = OpLoad %99 
                            sampler %102 = OpLoad %101 
         read_only Texture2DSampled %103 = OpSampledImage %100 %102 
                              f32_2 %105 = OpLoad vs_TEXCOORD1 
                              f32_4 %106 = OpImageSampleImplicitLod %103 %105 
                                             OpStore %98 %106 
                              f32_4 %107 = OpLoad %98 
                              f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                              f32_3 %109 = OpExtInst %1 4 %108 
                              f32_3 %112 = OpExtInst %1 40 %109 %111 
                                             OpStore %57 %112 
                              f32_3 %113 = OpLoad %57 
                              f32_3 %114 = OpExtInst %1 30 %113 
                                             OpStore %57 %114 
                              f32_3 %115 = OpLoad %57 
                              f32_3 %118 = OpFMul %115 %117 
                                             OpStore %57 %118 
                              f32_3 %119 = OpLoad %57 
                              f32_3 %120 = OpExtInst %1 29 %119 
                                             OpStore %57 %120 
                              f32_3 %121 = OpLoad %57 
                              f32_3 %124 = OpFMul %121 %123 
                              f32_3 %127 = OpFAdd %124 %126 
                                             OpStore %57 %127 
                              f32_4 %129 = OpLoad %98 
                              f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                              f32_3 %133 = OpFMul %130 %132 
                                             OpStore %128 %133 
                              f32_4 %140 = OpLoad %98 
                              f32_4 %141 = OpVectorShuffle %140 %140 0 1 2 0 
                             bool_4 %143 = OpFOrdGreaterThanEqual %139 %141 
                             bool_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                             OpStore %137 %144 
                       Private f32* %147 = OpAccessChain %98 %45 
                                f32 %148 = OpLoad %147 
                        Output f32* %150 = OpAccessChain %146 %45 
                                             OpStore %150 %148 
                              f32_3 %153 = OpLoad %57 
                                             OpStore %152 %153 
                      Private bool* %155 = OpAccessChain %137 %47 
                               bool %156 = OpLoad %155 
                                             OpSelectionMerge %160 None 
                                             OpBranchConditional %156 %159 %163 
                                    %159 = OpLabel 
                       Private f32* %161 = OpAccessChain %128 %47 
                                f32 %162 = OpLoad %161 
                                             OpStore %158 %162 
                                             OpBranch %160 
                                    %163 = OpLabel 
                       Private f32* %164 = OpAccessChain %57 %47 
                                f32 %165 = OpLoad %164 
                                             OpStore %158 %165 
                                             OpBranch %160 
                                    %160 = OpLabel 
                                f32 %166 = OpLoad %158 
                      Function f32* %167 = OpAccessChain %152 %47 
                                             OpStore %167 %166 
                      Private bool* %169 = OpAccessChain %137 %168 
                               bool %170 = OpLoad %169 
                                             OpSelectionMerge %173 None 
                                             OpBranchConditional %170 %172 %176 
                                    %172 = OpLabel 
                       Private f32* %174 = OpAccessChain %128 %168 
                                f32 %175 = OpLoad %174 
                                             OpStore %171 %175 
                                             OpBranch %173 
                                    %176 = OpLabel 
                       Private f32* %177 = OpAccessChain %57 %168 
                                f32 %178 = OpLoad %177 
                                             OpStore %171 %178 
                                             OpBranch %173 
                                    %173 = OpLabel 
                                f32 %179 = OpLoad %171 
                      Function f32* %180 = OpAccessChain %152 %168 
                                             OpStore %180 %179 
                      Private bool* %182 = OpAccessChain %137 %181 
                               bool %183 = OpLoad %182 
                                             OpSelectionMerge %186 None 
                                             OpBranchConditional %183 %185 %189 
                                    %185 = OpLabel 
                       Private f32* %187 = OpAccessChain %128 %181 
                                f32 %188 = OpLoad %187 
                                             OpStore %184 %188 
                                             OpBranch %186 
                                    %189 = OpLabel 
                       Private f32* %190 = OpAccessChain %57 %181 
                                f32 %191 = OpLoad %190 
                                             OpStore %184 %191 
                                             OpBranch %186 
                                    %186 = OpLabel 
                                f32 %192 = OpLoad %184 
                      Function f32* %193 = OpAccessChain %152 %181 
                                             OpStore %193 %192 
                              f32_3 %194 = OpLoad %152 
                                             OpStore %57 %194 
                              f32_3 %195 = OpLoad %9 
                              f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                              f32_3 %199 = OpFMul %196 %198 
                              f32_3 %200 = OpLoad %57 
                              f32_3 %201 = OpFAdd %199 %200 
                                             OpStore %9 %201 
                              f32_3 %202 = OpLoad %9 
                              f32_3 %205 = OpFAdd %202 %204 
                              f32_4 %206 = OpLoad %98 
                              f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                             OpStore %98 %207 
                              f32_4 %208 = OpLoad %98 
                              f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                              f32_3 %212 = OpFMul %209 %211 
                              f32_4 %213 = OpLoad %98 
                              f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                             OpStore %98 %214 
                              f32_4 %215 = OpLoad %98 
                              f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              f32_3 %217 = OpExtInst %1 4 %216 
                              f32_3 %218 = OpExtInst %1 40 %217 %111 
                              f32_4 %219 = OpLoad %98 
                              f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                             OpStore %98 %220 
                              f32_4 %221 = OpLoad %98 
                              f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                              f32_3 %223 = OpExtInst %1 30 %222 
                              f32_4 %224 = OpLoad %98 
                              f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                             OpStore %98 %225 
                              f32_4 %226 = OpLoad %98 
                              f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                              f32_3 %230 = OpFMul %227 %229 
                              f32_4 %231 = OpLoad %98 
                              f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                             OpStore %98 %232 
                              f32_4 %233 = OpLoad %98 
                              f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                              f32_3 %235 = OpExtInst %1 29 %234 
                              f32_4 %236 = OpLoad %98 
                              f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                             OpStore %98 %237 
                              f32_3 %238 = OpLoad %9 
                              f32_3 %241 = OpFMul %238 %240 
                                             OpStore %128 %241 
                              f32_3 %245 = OpLoad %9 
                              f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 0 
                             bool_4 %247 = OpFOrdGreaterThanEqual %244 %246 
                             bool_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                             OpStore %242 %248 
                      Private bool* %249 = OpAccessChain %242 %47 
                               bool %250 = OpLoad %249 
                                             OpSelectionMerge %253 None 
                                             OpBranchConditional %250 %252 %256 
                                    %252 = OpLabel 
                       Private f32* %254 = OpAccessChain %128 %47 
                                f32 %255 = OpLoad %254 
                                             OpStore %251 %255 
                                             OpBranch %253 
                                    %256 = OpLabel 
                       Private f32* %257 = OpAccessChain %98 %47 
                                f32 %258 = OpLoad %257 
                                             OpStore %251 %258 
                                             OpBranch %253 
                                    %253 = OpLabel 
                                f32 %259 = OpLoad %251 
                        Output f32* %260 = OpAccessChain %146 %47 
                                             OpStore %260 %259 
                      Private bool* %261 = OpAccessChain %242 %168 
                               bool %262 = OpLoad %261 
                                             OpSelectionMerge %265 None 
                                             OpBranchConditional %262 %264 %268 
                                    %264 = OpLabel 
                       Private f32* %266 = OpAccessChain %128 %168 
                                f32 %267 = OpLoad %266 
                                             OpStore %263 %267 
                                             OpBranch %265 
                                    %268 = OpLabel 
                       Private f32* %269 = OpAccessChain %98 %168 
                                f32 %270 = OpLoad %269 
                                             OpStore %263 %270 
                                             OpBranch %265 
                                    %265 = OpLabel 
                                f32 %271 = OpLoad %263 
                        Output f32* %272 = OpAccessChain %146 %168 
                                             OpStore %272 %271 
                      Private bool* %273 = OpAccessChain %242 %181 
                               bool %274 = OpLoad %273 
                                             OpSelectionMerge %277 None 
                                             OpBranchConditional %274 %276 %280 
                                    %276 = OpLabel 
                       Private f32* %278 = OpAccessChain %128 %181 
                                f32 %279 = OpLoad %278 
                                             OpStore %275 %279 
                                             OpBranch %277 
                                    %280 = OpLabel 
                       Private f32* %281 = OpAccessChain %98 %181 
                                f32 %282 = OpLoad %281 
                                             OpStore %275 %282 
                                             OpBranch %277 
                                    %277 = OpLabel 
                                f32 %283 = OpLoad %275 
                        Output f32* %284 = OpAccessChain %146 %181 
                                             OpStore %284 %283 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %57 %64 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %39 0 Offset 39 
                                             OpMemberDecorate %39 1 Offset 39 
                                             OpDecorate %39 Block 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate vs_TEXCOORD1 Location 57 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypePointer Output %7 
                                 f32 %26 = OpConstant 3.674022E-40 
                                 f32 %27 = OpConstant 3.674022E-40 
                               f32_2 %28 = OpConstantComposite %26 %27 
                                     %32 = OpTypePointer Private %19 
                      Private f32_2* %33 = OpVariable Private 
                               f32_2 %36 = OpConstantComposite %27 %27 
                                     %39 = OpTypeStruct %6 %7 
                                     %40 = OpTypePointer Uniform %39 
       Uniform struct {f32; f32_4;}* %41 = OpVariable Uniform 
                                 i32 %42 = OpConstant 1 
                                     %43 = OpTypePointer Uniform %7 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_2 %50 = OpConstantComposite %49 %49 
                                     %56 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %59 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                       Output f32_4* %23 = OpAccessChain %13 %15 
                               f32_4 %24 = OpLoad %23 
                               f32_4 %25 = OpVectorShuffle %24 %21 4 5 2 3 
                                             OpStore %23 %25 
                       Output f32_4* %29 = OpAccessChain %13 %15 
                               f32_4 %30 = OpLoad %29 
                               f32_4 %31 = OpVectorShuffle %30 %28 0 1 4 5 
                                             OpStore %29 %31 
                               f32_3 %34 = OpLoad %18 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %37 = OpFAdd %35 %36 
                                             OpStore %33 %37 
                               f32_2 %38 = OpLoad %33 
                      Uniform f32_4* %44 = OpAccessChain %41 %42 
                               f32_4 %45 = OpLoad %44 
                               f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                               f32_2 %47 = OpFMul %38 %46 
                                             OpStore %33 %47 
                               f32_2 %48 = OpLoad %33 
                               f32_2 %51 = OpFMul %48 %50 
                      Uniform f32_4* %52 = OpAccessChain %41 %42 
                               f32_4 %53 = OpLoad %52 
                               f32_2 %54 = OpVectorShuffle %53 %53 2 3 
                               f32_2 %55 = OpFAdd %51 %54 
                                             OpStore %33 %55 
                               f32_2 %58 = OpLoad %33 
                        Uniform f32* %60 = OpAccessChain %41 %15 
                                 f32 %61 = OpLoad %60 
                               f32_2 %62 = OpCompositeConstruct %61 %61 
                               f32_2 %63 = OpFMul %58 %62 
                                             OpStore vs_TEXCOORD1 %63 
                               f32_2 %65 = OpLoad %33 
                                             OpStore vs_TEXCOORD0 %65 
                         Output f32* %67 = OpAccessChain %13 %15 %9 
                                 f32 %68 = OpLoad %67 
                                 f32 %69 = OpFNegate %68 
                         Output f32* %70 = OpAccessChain %13 %15 %9 
                                             OpStore %70 %69 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 2955
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %2913 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %2749 DescriptorSet 2749 
                                               OpDecorate %2749 Binding 2749 
                                               OpDecorate %2751 DescriptorSet 2751 
                                               OpDecorate %2751 Binding 2751 
                                               OpDecorate %2913 Location 2913 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %18 = OpConstant 3.674022E-40 
                                   f32 %19 = OpConstant 3.674022E-40 
                                       %27 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %6 %27 %27 
                                       %29 = OpTypePointer Uniform %28 
  Uniform struct {f32; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 0 
                                       %33 = OpTypePointer Uniform %6 
                                       %40 = OpTypePointer Private %27 
                        Private f32_4* %41 = OpVariable Private 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypePointer Private %6 
                          Private f32* %56 = OpVariable Private 
                                       %62 = OpTypeVector %31 2 
                                   i32 %63 = OpConstant 1 
                                 i32_2 %64 = OpConstantComposite %32 %63 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 3 
                          Private f32* %69 = OpVariable Private 
                                 i32_2 %75 = OpConstantComposite %63 %32 
                        Private f32_3* %78 = OpVariable Private 
                                   i32 %84 = OpConstant -1 
                                 i32_2 %85 = OpConstantComposite %32 %84 
                                   u32 %88 = OpConstant 0 
                          Private f32* %90 = OpVariable Private 
                                 i32_2 %96 = OpConstantComposite %84 %32 
                                       %99 = OpTypePointer Private %10 
                       Private f32_2* %100 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_2* %119 = OpVariable Private 
                       Private f32_2* %125 = OpVariable Private 
                                  f32 %143 = OpConstant 3.674022E-40 
                                  f32 %154 = OpConstant 3.674022E-40 
                                      %156 = OpTypeBool 
                                      %157 = OpTypePointer Private %156 
                        Private bool* %158 = OpVariable Private 
                                i32_2 %171 = OpConstantComposite %84 %84 
                                i32_2 %179 = OpConstantComposite %63 %63 
                                i32_2 %188 = OpConstantComposite %63 %84 
                                i32_2 %197 = OpConstantComposite %84 %63 
                       Private f32_3* %201 = OpVariable Private 
                       Private f32_2* %207 = OpVariable Private 
                         Private f32* %216 = OpVariable Private 
                                  f32 %224 = OpConstant 3.674022E-40 
                       Private f32_3* %237 = OpVariable Private 
                       Private f32_3* %249 = OpVariable Private 
                                  f32 %276 = OpConstant 3.674022E-40 
                                      %321 = OpTypeVector %156 3 
                                      %322 = OpTypePointer Private %321 
                      Private bool_3* %323 = OpVariable Private 
                                      %337 = OpTypePointer Function %6 
                                  i32 %357 = OpConstant 2 
                                  u32 %358 = OpConstant 1 
                                  f32 %367 = OpConstant 3.674022E-40 
                        Private bool* %395 = OpVariable Private 
                                  f32 %448 = OpConstant 3.674022E-40 
                                f32_2 %449 = OpConstantComposite %448 %448 
                                      %458 = OpTypePointer Input %6 
                       Private f32_3* %484 = OpVariable Private 
                                  f32 %493 = OpConstant 3.674022E-40 
                       Private f32_2* %520 = OpVariable Private 
                                  f32 %548 = OpConstant 3.674022E-40 
                                      %563 = OpTypePointer Private %31 
                         Private i32* %564 = OpVariable Private 
                                  u32 %567 = OpConstant 4294967295 
                                      %583 = OpTypePointer Private %62 
                       Private i32_2* %584 = OpVariable Private 
                                      %590 = OpTypeVector %156 4 
                                      %592 = OpTypeVector %156 2 
                                      %594 = OpTypeVector %66 2 
                                u32_2 %595 = OpConstantComposite %88 %88 
                                u32_2 %596 = OpConstantComposite %358 %358 
                                  f32 %604 = OpConstant 3.674022E-40 
                         Private f32* %623 = OpVariable Private 
                                  u32 %642 = OpConstant 2 
                                      %644 = OpTypeVector %31 3 
                                      %645 = OpTypePointer Private %644 
                       Private i32_3* %646 = OpVariable Private 
                                 f32 %2296 = OpConstant 3.674022E-40 
                                     %2492 = OpTypePointer Private %592 
                     Private bool_2* %2493 = OpVariable Private 
                                 f32 %2504 = OpConstant 3.674022E-40 
                      Private i32_2* %2614 = OpVariable Private 
                               f32_4 %2617 = OpConstantComposite %18 %18 %18 %18 
                     Private bool_2* %2629 = OpVariable Private 
                                     %2631 = OpTypeVector %31 4 
                       Private bool* %2648 = OpVariable Private 
                                     %2650 = OpTypePointer Function %156 
                                     %2738 = OpTypePointer Uniform %27 
UniformConstant read_only Texture2D* %2749 = OpVariable UniformConstant 
            UniformConstant sampler* %2751 = OpVariable UniformConstant 
                                 f32 %2762 = OpConstant 3.674022E-40 
                                 f32 %2767 = OpConstant 3.674022E-40 
                                 f32 %2803 = OpConstant 3.674022E-40 
                               f32_3 %2804 = OpConstantComposite %2803 %2803 %2803 
                                 f32 %2809 = OpConstant 3.674022E-40 
                               f32_3 %2810 = OpConstantComposite %2809 %2809 %2809 
                                 f32 %2815 = OpConstant 3.674022E-40 
                               f32_3 %2816 = OpConstantComposite %2815 %2815 %2815 
                                 f32 %2821 = OpConstant 3.674022E-40 
                               f32_3 %2822 = OpConstantComposite %2821 %2821 %2821 
                                 f32 %2824 = OpConstant 3.674022E-40 
                               f32_3 %2825 = OpConstantComposite %2824 %2824 %2824 
                     Private bool_3* %2827 = OpVariable Private 
                                 f32 %2828 = OpConstant 3.674022E-40 
                               f32_4 %2829 = OpConstantComposite %2828 %2828 %2828 %18 
                                     %2834 = OpTypePointer Function %7 
                                 f32 %2876 = OpConstant 3.674022E-40 
                               f32_3 %2877 = OpConstantComposite %2876 %2876 %2876 
                                 f32 %2882 = OpConstant 3.674022E-40 
                               f32_3 %2883 = OpConstantComposite %2882 %2882 %2882 
                                 f32 %2888 = OpConstant 3.674022E-40 
                               f32_3 %2889 = OpConstantComposite %2888 %2888 %2888 
                                 f32 %2892 = OpConstant 3.674022E-40 
                               f32_3 %2893 = OpConstantComposite %2892 %2892 %2892 
                                 f32 %2901 = OpConstant 3.674022E-40 
                               f32_3 %2902 = OpConstantComposite %2901 %2901 %2901 
                                 f32 %2906 = OpConstant 3.674022E-40 
                               f32_4 %2907 = OpConstantComposite %2906 %2906 %2906 %18 
                                     %2912 = OpTypePointer Output %27 
                       Output f32_4* %2913 = OpVariable Output 
                                     %2925 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %338 = OpVariable Function 
                        Function f32* %354 = OpVariable Function 
                        Function f32* %407 = OpVariable Function 
                        Function f32* %428 = OpVariable Function 
                        Function f32* %438 = OpVariable Function 
                        Function f32* %455 = OpVariable Function 
                        Function f32* %468 = OpVariable Function 
                        Function f32* %539 = OpVariable Function 
                        Function f32* %613 = OpVariable Function 
                        Function f32* %634 = OpVariable Function 
                        Function f32* %669 = OpVariable Function 
                        Function f32* %687 = OpVariable Function 
                        Function f32* %775 = OpVariable Function 
                        Function f32* %795 = OpVariable Function 
                        Function f32* %827 = OpVariable Function 
                        Function f32* %848 = OpVariable Function 
                        Function f32* %880 = OpVariable Function 
                        Function f32* %898 = OpVariable Function 
                        Function f32* %986 = OpVariable Function 
                       Function f32* %1006 = OpVariable Function 
                       Function f32* %1038 = OpVariable Function 
                       Function f32* %1059 = OpVariable Function 
                       Function f32* %1091 = OpVariable Function 
                       Function f32* %1109 = OpVariable Function 
                       Function f32* %1197 = OpVariable Function 
                       Function f32* %1217 = OpVariable Function 
                       Function f32* %1249 = OpVariable Function 
                       Function f32* %1270 = OpVariable Function 
                       Function f32* %1302 = OpVariable Function 
                       Function f32* %1320 = OpVariable Function 
                       Function f32* %1408 = OpVariable Function 
                       Function f32* %1428 = OpVariable Function 
                       Function f32* %1460 = OpVariable Function 
                       Function f32* %1481 = OpVariable Function 
                       Function f32* %1513 = OpVariable Function 
                       Function f32* %1531 = OpVariable Function 
                       Function f32* %1619 = OpVariable Function 
                       Function f32* %1639 = OpVariable Function 
                       Function f32* %1671 = OpVariable Function 
                       Function f32* %1692 = OpVariable Function 
                       Function f32* %1724 = OpVariable Function 
                       Function f32* %1742 = OpVariable Function 
                       Function f32* %1830 = OpVariable Function 
                       Function f32* %1850 = OpVariable Function 
                       Function f32* %1882 = OpVariable Function 
                       Function f32* %1903 = OpVariable Function 
                       Function f32* %1935 = OpVariable Function 
                       Function f32* %1953 = OpVariable Function 
                       Function f32* %2041 = OpVariable Function 
                       Function f32* %2061 = OpVariable Function 
                       Function f32* %2093 = OpVariable Function 
                       Function f32* %2114 = OpVariable Function 
                       Function f32* %2146 = OpVariable Function 
                       Function f32* %2164 = OpVariable Function 
                       Function f32* %2252 = OpVariable Function 
                       Function f32* %2272 = OpVariable Function 
                       Function f32* %2305 = OpVariable Function 
                       Function f32* %2326 = OpVariable Function 
                       Function f32* %2358 = OpVariable Function 
                       Function f32* %2376 = OpVariable Function 
                       Function f32* %2464 = OpVariable Function 
                       Function f32* %2483 = OpVariable Function 
                       Function f32* %2511 = OpVariable Function 
                       Function f32* %2529 = OpVariable Function 
                       Function f32* %2546 = OpVariable Function 
                       Function f32* %2563 = OpVariable Function 
                       Function f32* %2587 = OpVariable Function 
                       Function f32* %2604 = OpVariable Function 
                      Function bool* %2651 = OpVariable Function 
                       Function f32* %2690 = OpVariable Function 
                       Function f32* %2706 = OpVariable Function 
                     Function f32_3* %2835 = OpVariable Function 
                       Function f32* %2839 = OpVariable Function 
                       Function f32* %2851 = OpVariable Function 
                       Function f32* %2863 = OpVariable Function 
                       Function f32* %2916 = OpVariable Function 
                       Function f32* %2929 = OpVariable Function 
                       Function f32* %2941 = OpVariable Function 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                                 f32_3 %14 = OpLoad %9 
                                 f32_3 %15 = OpVectorShuffle %14 %13 3 4 2 
                                               OpStore %9 %15 
                                 f32_3 %16 = OpLoad %9 
                                 f32_2 %17 = OpVectorShuffle %16 %16 0 1 
                                 f32_2 %20 = OpCompositeConstruct %18 %18 
                                 f32_2 %21 = OpCompositeConstruct %19 %19 
                                 f32_2 %22 = OpExtInst %1 43 %17 %20 %21 
                                 f32_3 %23 = OpLoad %9 
                                 f32_3 %24 = OpVectorShuffle %23 %22 3 4 2 
                                               OpStore %9 %24 
                                 f32_3 %25 = OpLoad %9 
                                 f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                          Uniform f32* %34 = OpAccessChain %30 %32 
                                   f32 %35 = OpLoad %34 
                                 f32_2 %36 = OpCompositeConstruct %35 %35 
                                 f32_2 %37 = OpFMul %26 %36 
                                 f32_3 %38 = OpLoad %9 
                                 f32_3 %39 = OpVectorShuffle %38 %37 3 4 2 
                                               OpStore %9 %39 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_3 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleExplicitLod %51 %53 Lod %27 
                                               OpStore %41 %54 
                   read_only Texture2D %57 = OpLoad %44 
                               sampler %58 = OpLoad %48 
            read_only Texture2DSampled %59 = OpSampledImage %57 %58 
                                 f32_3 %60 = OpLoad %9 
                                 f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                 f32_4 %65 = OpImageSampleExplicitLod %59 %61 Lod %27ConstOffset %65 
                                   f32 %68 = OpCompositeExtract %65 3 
                                               OpStore %56 %68 
                   read_only Texture2D %70 = OpLoad %44 
                               sampler %71 = OpLoad %48 
            read_only Texture2DSampled %72 = OpSampledImage %70 %71 
                                 f32_3 %73 = OpLoad %9 
                                 f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                 f32_4 %76 = OpImageSampleExplicitLod %72 %74 Lod %27ConstOffset %76 
                                   f32 %77 = OpCompositeExtract %76 3 
                                               OpStore %69 %77 
                   read_only Texture2D %79 = OpLoad %44 
                               sampler %80 = OpLoad %48 
            read_only Texture2DSampled %81 = OpSampledImage %79 %80 
                                 f32_3 %82 = OpLoad %9 
                                 f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                                 f32_4 %86 = OpImageSampleExplicitLod %81 %83 Lod %27ConstOffset %86 
                                   f32 %87 = OpCompositeExtract %86 3 
                          Private f32* %89 = OpAccessChain %78 %88 
                                               OpStore %89 %87 
                   read_only Texture2D %91 = OpLoad %44 
                               sampler %92 = OpLoad %48 
            read_only Texture2DSampled %93 = OpSampledImage %91 %92 
                                 f32_3 %94 = OpLoad %9 
                                 f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                 f32_4 %97 = OpImageSampleExplicitLod %93 %95 Lod %27ConstOffset %97 
                                   f32 %98 = OpCompositeExtract %97 3 
                                               OpStore %90 %98 
                         Private f32* %101 = OpAccessChain %41 %67 
                                  f32 %102 = OpLoad %101 
                                  f32 %103 = OpLoad %56 
                                  f32 %104 = OpExtInst %1 40 %102 %103 
                         Private f32* %105 = OpAccessChain %100 %88 
                                               OpStore %105 %104 
                         Private f32* %107 = OpAccessChain %41 %67 
                                  f32 %108 = OpLoad %107 
                                  f32 %109 = OpLoad %56 
                                  f32 %110 = OpExtInst %1 37 %108 %109 
                                               OpStore %106 %110 
                                  f32 %111 = OpLoad %69 
                         Private f32* %112 = OpAccessChain %100 %88 
                                  f32 %113 = OpLoad %112 
                                  f32 %114 = OpExtInst %1 40 %111 %113 
                         Private f32* %115 = OpAccessChain %100 %88 
                                               OpStore %115 %114 
                                  f32 %116 = OpLoad %69 
                                  f32 %117 = OpLoad %106 
                                  f32 %118 = OpExtInst %1 37 %116 %117 
                                               OpStore %106 %118 
                                  f32 %120 = OpLoad %90 
                         Private f32* %121 = OpAccessChain %78 %88 
                                  f32 %122 = OpLoad %121 
                                  f32 %123 = OpExtInst %1 40 %120 %122 
                         Private f32* %124 = OpAccessChain %119 %88 
                                               OpStore %124 %123 
                                  f32 %126 = OpLoad %90 
                         Private f32* %127 = OpAccessChain %78 %88 
                                  f32 %128 = OpLoad %127 
                                  f32 %129 = OpExtInst %1 37 %126 %128 
                         Private f32* %130 = OpAccessChain %125 %88 
                                               OpStore %130 %129 
                         Private f32* %131 = OpAccessChain %100 %88 
                                  f32 %132 = OpLoad %131 
                         Private f32* %133 = OpAccessChain %119 %88 
                                  f32 %134 = OpLoad %133 
                                  f32 %135 = OpExtInst %1 40 %132 %134 
                         Private f32* %136 = OpAccessChain %100 %88 
                                               OpStore %136 %135 
                                  f32 %137 = OpLoad %106 
                         Private f32* %138 = OpAccessChain %125 %88 
                                  f32 %139 = OpLoad %138 
                                  f32 %140 = OpExtInst %1 37 %137 %139 
                                               OpStore %106 %140 
                         Private f32* %141 = OpAccessChain %100 %88 
                                  f32 %142 = OpLoad %141 
                                  f32 %144 = OpFMul %142 %143 
                         Private f32* %145 = OpAccessChain %119 %88 
                                               OpStore %145 %144 
                                  f32 %146 = OpLoad %106 
                                  f32 %147 = OpFNegate %146 
                         Private f32* %148 = OpAccessChain %100 %88 
                                  f32 %149 = OpLoad %148 
                                  f32 %150 = OpFAdd %147 %149 
                         Private f32* %151 = OpAccessChain %100 %88 
                                               OpStore %151 %150 
                         Private f32* %152 = OpAccessChain %119 %88 
                                  f32 %153 = OpLoad %152 
                                  f32 %155 = OpExtInst %1 40 %153 %154 
                                               OpStore %106 %155 
                         Private f32* %159 = OpAccessChain %100 %88 
                                  f32 %160 = OpLoad %159 
                                  f32 %161 = OpLoad %106 
                                 bool %162 = OpFOrdGreaterThanEqual %160 %161 
                                               OpStore %158 %162 
                                 bool %163 = OpLoad %158 
                                               OpSelectionMerge %165 None 
                                               OpBranchConditional %163 %164 %165 
                                      %164 = OpLabel 
                  read_only Texture2D %166 = OpLoad %44 
                              sampler %167 = OpLoad %48 
           read_only Texture2DSampled %168 = OpSampledImage %166 %167 
                                f32_3 %169 = OpLoad %9 
                                f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                f32_4 %172 = OpImageSampleExplicitLod %168 %170 Lod %27ConstOffset %172 
                                  f32 %173 = OpCompositeExtract %172 3 
                                               OpStore %106 %173 
                  read_only Texture2D %174 = OpLoad %44 
                              sampler %175 = OpLoad %48 
           read_only Texture2DSampled %176 = OpSampledImage %174 %175 
                                f32_3 %177 = OpLoad %9 
                                f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                f32_4 %180 = OpImageSampleExplicitLod %176 %178 Lod %27ConstOffset %180 
                                  f32 %181 = OpCompositeExtract %180 3 
                         Private f32* %182 = OpAccessChain %119 %88 
                                               OpStore %182 %181 
                  read_only Texture2D %183 = OpLoad %44 
                              sampler %184 = OpLoad %48 
           read_only Texture2DSampled %185 = OpSampledImage %183 %184 
                                f32_3 %186 = OpLoad %9 
                                f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                f32_4 %189 = OpImageSampleExplicitLod %185 %187 Lod %27ConstOffset %189 
                                  f32 %190 = OpCompositeExtract %189 3 
                         Private f32* %191 = OpAccessChain %125 %88 
                                               OpStore %191 %190 
                  read_only Texture2D %192 = OpLoad %44 
                              sampler %193 = OpLoad %48 
           read_only Texture2DSampled %194 = OpSampledImage %192 %193 
                                f32_3 %195 = OpLoad %9 
                                f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                f32_4 %198 = OpImageSampleExplicitLod %194 %196 Lod %27ConstOffset %198 
                                  f32 %199 = OpCompositeExtract %198 3 
                         Private f32* %200 = OpAccessChain %9 %88 
                                               OpStore %200 %199 
                                  f32 %202 = OpLoad %56 
                         Private f32* %203 = OpAccessChain %78 %88 
                                  f32 %204 = OpLoad %203 
                                  f32 %205 = OpFAdd %202 %204 
                         Private f32* %206 = OpAccessChain %201 %88 
                                               OpStore %206 %205 
                                  f32 %208 = OpLoad %69 
                                  f32 %209 = OpLoad %90 
                                  f32 %210 = OpFAdd %208 %209 
                         Private f32* %211 = OpAccessChain %207 %88 
                                               OpStore %211 %210 
                         Private f32* %212 = OpAccessChain %100 %88 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFDiv %19 %213 
                         Private f32* %215 = OpAccessChain %100 %88 
                                               OpStore %215 %214 
                         Private f32* %217 = OpAccessChain %201 %88 
                                  f32 %218 = OpLoad %217 
                         Private f32* %219 = OpAccessChain %207 %88 
                                  f32 %220 = OpLoad %219 
                                  f32 %221 = OpFAdd %218 %220 
                                               OpStore %216 %221 
                         Private f32* %222 = OpAccessChain %41 %67 
                                  f32 %223 = OpLoad %222 
                                  f32 %225 = OpFMul %223 %224 
                         Private f32* %226 = OpAccessChain %201 %88 
                                  f32 %227 = OpLoad %226 
                                  f32 %228 = OpFAdd %225 %227 
                         Private f32* %229 = OpAccessChain %201 %88 
                                               OpStore %229 %228 
                         Private f32* %230 = OpAccessChain %41 %67 
                                  f32 %231 = OpLoad %230 
                                  f32 %232 = OpFMul %231 %224 
                         Private f32* %233 = OpAccessChain %207 %88 
                                  f32 %234 = OpLoad %233 
                                  f32 %235 = OpFAdd %232 %234 
                         Private f32* %236 = OpAccessChain %207 %88 
                                               OpStore %236 %235 
                         Private f32* %238 = OpAccessChain %119 %88 
                                  f32 %239 = OpLoad %238 
                         Private f32* %240 = OpAccessChain %125 %88 
                                  f32 %241 = OpLoad %240 
                                  f32 %242 = OpFAdd %239 %241 
                         Private f32* %243 = OpAccessChain %237 %88 
                                               OpStore %243 %242 
                                  f32 %244 = OpLoad %106 
                         Private f32* %245 = OpAccessChain %125 %88 
                                  f32 %246 = OpLoad %245 
                                  f32 %247 = OpFAdd %244 %246 
                         Private f32* %248 = OpAccessChain %125 %88 
                                               OpStore %248 %247 
                                  f32 %250 = OpLoad %69 
                                  f32 %251 = OpFMul %250 %224 
                         Private f32* %252 = OpAccessChain %237 %88 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpFAdd %251 %253 
                         Private f32* %255 = OpAccessChain %249 %88 
                                               OpStore %255 %254 
                         Private f32* %256 = OpAccessChain %78 %88 
                                  f32 %257 = OpLoad %256 
                                  f32 %258 = OpFMul %257 %224 
                         Private f32* %259 = OpAccessChain %125 %88 
                                  f32 %260 = OpLoad %259 
                                  f32 %261 = OpFAdd %258 %260 
                         Private f32* %262 = OpAccessChain %125 %88 
                                               OpStore %262 %261 
                         Private f32* %263 = OpAccessChain %9 %88 
                                  f32 %264 = OpLoad %263 
                                  f32 %265 = OpLoad %106 
                                  f32 %266 = OpFAdd %264 %265 
                                               OpStore %106 %266 
                         Private f32* %267 = OpAccessChain %119 %88 
                                  f32 %268 = OpLoad %267 
                         Private f32* %269 = OpAccessChain %9 %88 
                                  f32 %270 = OpLoad %269 
                                  f32 %271 = OpFAdd %268 %270 
                         Private f32* %272 = OpAccessChain %9 %88 
                                               OpStore %272 %271 
                         Private f32* %273 = OpAccessChain %201 %88 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpExtInst %1 4 %274 
                                  f32 %277 = OpFMul %275 %276 
                         Private f32* %278 = OpAccessChain %249 %88 
                                  f32 %279 = OpLoad %278 
                                  f32 %280 = OpExtInst %1 4 %279 
                                  f32 %281 = OpFAdd %277 %280 
                         Private f32* %282 = OpAccessChain %201 %88 
                                               OpStore %282 %281 
                         Private f32* %283 = OpAccessChain %207 %88 
                                  f32 %284 = OpLoad %283 
                                  f32 %285 = OpExtInst %1 4 %284 
                                  f32 %286 = OpFMul %285 %276 
                         Private f32* %287 = OpAccessChain %125 %88 
                                  f32 %288 = OpLoad %287 
                                  f32 %289 = OpExtInst %1 4 %288 
                                  f32 %290 = OpFAdd %286 %289 
                         Private f32* %291 = OpAccessChain %119 %88 
                                               OpStore %291 %290 
                                  f32 %292 = OpLoad %90 
                                  f32 %293 = OpFMul %292 %224 
                                  f32 %294 = OpLoad %106 
                                  f32 %295 = OpFAdd %293 %294 
                         Private f32* %296 = OpAccessChain %125 %88 
                                               OpStore %296 %295 
                                  f32 %297 = OpLoad %56 
                                  f32 %298 = OpFMul %297 %224 
                         Private f32* %299 = OpAccessChain %9 %88 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFAdd %298 %300 
                         Private f32* %302 = OpAccessChain %9 %88 
                                               OpStore %302 %301 
                         Private f32* %303 = OpAccessChain %201 %88 
                                  f32 %304 = OpLoad %303 
                         Private f32* %305 = OpAccessChain %125 %88 
                                  f32 %306 = OpLoad %305 
                                  f32 %307 = OpExtInst %1 4 %306 
                                  f32 %308 = OpFAdd %304 %307 
                         Private f32* %309 = OpAccessChain %201 %88 
                                               OpStore %309 %308 
                         Private f32* %310 = OpAccessChain %119 %88 
                                  f32 %311 = OpLoad %310 
                         Private f32* %312 = OpAccessChain %9 %88 
                                  f32 %313 = OpLoad %312 
                                  f32 %314 = OpExtInst %1 4 %313 
                                  f32 %315 = OpFAdd %311 %314 
                         Private f32* %316 = OpAccessChain %9 %88 
                                               OpStore %316 %315 
                         Private f32* %317 = OpAccessChain %237 %88 
                                  f32 %318 = OpLoad %317 
                                  f32 %319 = OpLoad %106 
                                  f32 %320 = OpFAdd %318 %319 
                                               OpStore %106 %320 
                         Private f32* %324 = OpAccessChain %201 %88 
                                  f32 %325 = OpLoad %324 
                         Private f32* %326 = OpAccessChain %9 %88 
                                  f32 %327 = OpLoad %326 
                                 bool %328 = OpFOrdGreaterThanEqual %325 %327 
                        Private bool* %329 = OpAccessChain %323 %88 
                                               OpStore %329 %328 
                                  f32 %330 = OpLoad %216 
                                  f32 %331 = OpFMul %330 %276 
                                  f32 %332 = OpLoad %106 
                                  f32 %333 = OpFAdd %331 %332 
                         Private f32* %334 = OpAccessChain %201 %88 
                                               OpStore %334 %333 
                        Private bool* %335 = OpAccessChain %323 %88 
                                 bool %336 = OpLoad %335 
                                               OpSelectionMerge %340 None 
                                               OpBranchConditional %336 %339 %343 
                                      %339 = OpLabel 
                         Private f32* %341 = OpAccessChain %78 %88 
                                  f32 %342 = OpLoad %341 
                                               OpStore %338 %342 
                                               OpBranch %340 
                                      %343 = OpLabel 
                                  f32 %344 = OpLoad %90 
                                               OpStore %338 %344 
                                               OpBranch %340 
                                      %340 = OpLabel 
                                  f32 %345 = OpLoad %338 
                         Private f32* %346 = OpAccessChain %78 %88 
                                               OpStore %346 %345 
                        Private bool* %347 = OpAccessChain %323 %88 
                                 bool %348 = OpLoad %347 
                                  f32 %349 = OpLoad %56 
                                  f32 %350 = OpLoad %69 
                                  f32 %351 = OpSelect %348 %349 %350 
                                               OpStore %56 %351 
                        Private bool* %352 = OpAccessChain %323 %88 
                                 bool %353 = OpLoad %352 
                                               OpSelectionMerge %356 None 
                                               OpBranchConditional %353 %355 %361 
                                      %355 = OpLabel 
                         Uniform f32* %359 = OpAccessChain %30 %357 %358 
                                  f32 %360 = OpLoad %359 
                                               OpStore %354 %360 
                                               OpBranch %356 
                                      %361 = OpLabel 
                         Uniform f32* %362 = OpAccessChain %30 %357 %88 
                                  f32 %363 = OpLoad %362 
                                               OpStore %354 %363 
                                               OpBranch %356 
                                      %356 = OpLabel 
                                  f32 %364 = OpLoad %354 
                                               OpStore %69 %364 
                         Private f32* %365 = OpAccessChain %201 %88 
                                  f32 %366 = OpLoad %365 
                                  f32 %368 = OpFMul %366 %367 
                         Private f32* %369 = OpAccessChain %41 %67 
                                  f32 %370 = OpLoad %369 
                                  f32 %371 = OpFNegate %370 
                                  f32 %372 = OpFAdd %368 %371 
                         Private f32* %373 = OpAccessChain %201 %88 
                                               OpStore %373 %372 
                         Private f32* %374 = OpAccessChain %41 %67 
                                  f32 %375 = OpLoad %374 
                                  f32 %376 = OpFNegate %375 
                         Private f32* %377 = OpAccessChain %78 %88 
                                  f32 %378 = OpLoad %377 
                                  f32 %379 = OpFAdd %376 %378 
                                               OpStore %90 %379 
                         Private f32* %380 = OpAccessChain %41 %67 
                                  f32 %381 = OpLoad %380 
                                  f32 %382 = OpFNegate %381 
                                  f32 %383 = OpLoad %56 
                                  f32 %384 = OpFAdd %382 %383 
                                               OpStore %106 %384 
                         Private f32* %385 = OpAccessChain %41 %67 
                                  f32 %386 = OpLoad %385 
                         Private f32* %387 = OpAccessChain %78 %88 
                                  f32 %388 = OpLoad %387 
                                  f32 %389 = OpFAdd %386 %388 
                         Private f32* %390 = OpAccessChain %78 %88 
                                               OpStore %390 %389 
                         Private f32* %391 = OpAccessChain %41 %67 
                                  f32 %392 = OpLoad %391 
                                  f32 %393 = OpLoad %56 
                                  f32 %394 = OpFAdd %392 %393 
                                               OpStore %56 %394 
                                  f32 %396 = OpLoad %90 
                                  f32 %397 = OpExtInst %1 4 %396 
                                  f32 %398 = OpLoad %106 
                                  f32 %399 = OpExtInst %1 4 %398 
                                 bool %400 = OpFOrdGreaterThanEqual %397 %399 
                                               OpStore %395 %400 
                                  f32 %401 = OpLoad %106 
                                  f32 %402 = OpExtInst %1 4 %401 
                                  f32 %403 = OpLoad %90 
                                  f32 %404 = OpExtInst %1 4 %403 
                                  f32 %405 = OpExtInst %1 40 %402 %404 
                                               OpStore %90 %405 
                                 bool %406 = OpLoad %395 
                                               OpSelectionMerge %409 None 
                                               OpBranchConditional %406 %408 %412 
                                      %408 = OpLabel 
                                  f32 %410 = OpLoad %69 
                                  f32 %411 = OpFNegate %410 
                                               OpStore %407 %411 
                                               OpBranch %409 
                                      %412 = OpLabel 
                                  f32 %413 = OpLoad %69 
                                               OpStore %407 %413 
                                               OpBranch %409 
                                      %409 = OpLabel 
                                  f32 %414 = OpLoad %407 
                                               OpStore %69 %414 
                         Private f32* %415 = OpAccessChain %100 %88 
                                  f32 %416 = OpLoad %415 
                         Private f32* %417 = OpAccessChain %201 %88 
                                  f32 %418 = OpLoad %417 
                                  f32 %419 = OpExtInst %1 4 %418 
                                  f32 %420 = OpFMul %416 %419 
                         Private f32* %421 = OpAccessChain %201 %88 
                                               OpStore %421 %420 
                         Private f32* %422 = OpAccessChain %201 %88 
                                  f32 %423 = OpLoad %422 
                                  f32 %424 = OpExtInst %1 43 %423 %18 %19 
                         Private f32* %425 = OpAccessChain %201 %88 
                                               OpStore %425 %424 
                        Private bool* %426 = OpAccessChain %323 %88 
                                 bool %427 = OpLoad %426 
                                               OpSelectionMerge %430 None 
                                               OpBranchConditional %427 %429 %433 
                                      %429 = OpLabel 
                         Uniform f32* %431 = OpAccessChain %30 %357 %88 
                                  f32 %432 = OpLoad %431 
                                               OpStore %428 %432 
                                               OpBranch %430 
                                      %433 = OpLabel 
                                               OpStore %428 %18 
                                               OpBranch %430 
                                      %430 = OpLabel 
                                  f32 %434 = OpLoad %428 
                         Private f32* %435 = OpAccessChain %100 %88 
                                               OpStore %435 %434 
                        Private bool* %436 = OpAccessChain %323 %88 
                                 bool %437 = OpLoad %436 
                                               OpSelectionMerge %440 None 
                                               OpBranchConditional %437 %439 %441 
                                      %439 = OpLabel 
                                               OpStore %438 %18 
                                               OpBranch %440 
                                      %441 = OpLabel 
                         Uniform f32* %442 = OpAccessChain %30 %357 %358 
                                  f32 %443 = OpLoad %442 
                                               OpStore %438 %443 
                                               OpBranch %440 
                                      %440 = OpLabel 
                                  f32 %444 = OpLoad %438 
                         Private f32* %445 = OpAccessChain %100 %358 
                                               OpStore %445 %444 
                                  f32 %446 = OpLoad %69 
                                f32_2 %447 = OpCompositeConstruct %446 %446 
                                f32_2 %450 = OpFMul %447 %449 
                                f32_2 %451 = OpLoad vs_TEXCOORD0 
                                f32_2 %452 = OpFAdd %450 %451 
                                               OpStore %125 %452 
                        Private bool* %453 = OpAccessChain %323 %88 
                                 bool %454 = OpLoad %453 
                                               OpSelectionMerge %457 None 
                                               OpBranchConditional %454 %456 %461 
                                      %456 = OpLabel 
                           Input f32* %459 = OpAccessChain vs_TEXCOORD0 %88 
                                  f32 %460 = OpLoad %459 
                                               OpStore %455 %460 
                                               OpBranch %457 
                                      %461 = OpLabel 
                         Private f32* %462 = OpAccessChain %125 %88 
                                  f32 %463 = OpLoad %462 
                                               OpStore %455 %463 
                                               OpBranch %457 
                                      %457 = OpLabel 
                                  f32 %464 = OpLoad %455 
                         Private f32* %465 = OpAccessChain %125 %88 
                                               OpStore %465 %464 
                        Private bool* %466 = OpAccessChain %323 %88 
                                 bool %467 = OpLoad %466 
                                               OpSelectionMerge %470 None 
                                               OpBranchConditional %467 %469 %473 
                                      %469 = OpLabel 
                         Private f32* %471 = OpAccessChain %125 %358 
                                  f32 %472 = OpLoad %471 
                                               OpStore %468 %472 
                                               OpBranch %470 
                                      %473 = OpLabel 
                           Input f32* %474 = OpAccessChain vs_TEXCOORD0 %358 
                                  f32 %475 = OpLoad %474 
                                               OpStore %468 %475 
                                               OpBranch %470 
                                      %470 = OpLabel 
                                  f32 %476 = OpLoad %468 
                         Private f32* %477 = OpAccessChain %125 %358 
                                               OpStore %477 %476 
                                f32_2 %478 = OpLoad %100 
                                f32_2 %479 = OpFNegate %478 
                                f32_2 %480 = OpLoad %125 
                                f32_2 %481 = OpFAdd %479 %480 
                                f32_3 %482 = OpLoad %237 
                                f32_3 %483 = OpVectorShuffle %482 %481 3 4 2 
                                               OpStore %237 %483 
                                f32_2 %485 = OpLoad %100 
                                f32_2 %486 = OpLoad %125 
                                f32_2 %487 = OpFAdd %485 %486 
                                f32_3 %488 = OpLoad %484 
                                f32_3 %489 = OpVectorShuffle %488 %487 3 4 2 
                                               OpStore %484 %489 
                         Private f32* %490 = OpAccessChain %201 %88 
                                  f32 %491 = OpLoad %490 
                                  f32 %492 = OpFMul %491 %224 
                                  f32 %494 = OpFAdd %492 %493 
                         Private f32* %495 = OpAccessChain %125 %88 
                                               OpStore %495 %494 
                                f32_3 %496 = OpLoad %237 
                                f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                                               OpStore %207 %497 
                                f32_2 %498 = OpLoad %207 
                                f32_2 %499 = OpCompositeConstruct %18 %18 
                                f32_2 %500 = OpCompositeConstruct %19 %19 
                                f32_2 %501 = OpExtInst %1 43 %498 %499 %500 
                                               OpStore %207 %501 
                                f32_2 %502 = OpLoad %207 
                         Uniform f32* %503 = OpAccessChain %30 %32 
                                  f32 %504 = OpLoad %503 
                                f32_2 %505 = OpCompositeConstruct %504 %504 
                                f32_2 %506 = OpFMul %502 %505 
                                               OpStore %207 %506 
                  read_only Texture2D %507 = OpLoad %44 
                              sampler %508 = OpLoad %48 
           read_only Texture2DSampled %509 = OpSampledImage %507 %508 
                                f32_2 %510 = OpLoad %207 
                                f32_4 %511 = OpImageSampleExplicitLod %509 %510 Lod %27 
                                  f32 %512 = OpCompositeExtract %511 3 
                         Private f32* %513 = OpAccessChain %207 %88 
                                               OpStore %513 %512 
                         Private f32* %514 = OpAccessChain %201 %88 
                                  f32 %515 = OpLoad %514 
                         Private f32* %516 = OpAccessChain %201 %88 
                                  f32 %517 = OpLoad %516 
                                  f32 %518 = OpFMul %515 %517 
                         Private f32* %519 = OpAccessChain %201 %88 
                                               OpStore %519 %518 
                                f32_3 %521 = OpLoad %484 
                                f32_2 %522 = OpVectorShuffle %521 %521 0 1 
                                               OpStore %520 %522 
                                f32_2 %523 = OpLoad %520 
                                f32_2 %524 = OpCompositeConstruct %18 %18 
                                f32_2 %525 = OpCompositeConstruct %19 %19 
                                f32_2 %526 = OpExtInst %1 43 %523 %524 %525 
                                               OpStore %520 %526 
                                f32_2 %527 = OpLoad %520 
                         Uniform f32* %528 = OpAccessChain %30 %32 
                                  f32 %529 = OpLoad %528 
                                f32_2 %530 = OpCompositeConstruct %529 %529 
                                f32_2 %531 = OpFMul %527 %530 
                                               OpStore %520 %531 
                  read_only Texture2D %532 = OpLoad %44 
                              sampler %533 = OpLoad %48 
           read_only Texture2DSampled %534 = OpSampledImage %532 %533 
                                f32_2 %535 = OpLoad %520 
                                f32_4 %536 = OpImageSampleExplicitLod %534 %535 Lod %27 
                                  f32 %537 = OpCompositeExtract %536 3 
                                               OpStore %216 %537 
                                 bool %538 = OpLoad %395 
                                               OpSelectionMerge %541 None 
                                               OpBranchConditional %538 %540 %544 
                                      %540 = OpLabel 
                         Private f32* %542 = OpAccessChain %78 %88 
                                  f32 %543 = OpLoad %542 
                                               OpStore %539 %543 
                                               OpBranch %541 
                                      %544 = OpLabel 
                                  f32 %545 = OpLoad %56 
                                               OpStore %539 %545 
                                               OpBranch %541 
                                      %541 = OpLabel 
                                  f32 %546 = OpLoad %539 
                                               OpStore %56 %546 
                                  f32 %547 = OpLoad %90 
                                  f32 %549 = OpFMul %547 %548 
                         Private f32* %550 = OpAccessChain %78 %88 
                                               OpStore %550 %549 
                                  f32 %551 = OpLoad %56 
                                  f32 %552 = OpFNegate %551 
                                  f32 %553 = OpFMul %552 %448 
                         Private f32* %554 = OpAccessChain %41 %67 
                                  f32 %555 = OpLoad %554 
                                  f32 %556 = OpFAdd %553 %555 
                                               OpStore %90 %556 
                         Private f32* %557 = OpAccessChain %201 %88 
                                  f32 %558 = OpLoad %557 
                         Private f32* %559 = OpAccessChain %125 %88 
                                  f32 %560 = OpLoad %559 
                                  f32 %561 = OpFMul %558 %560 
                         Private f32* %562 = OpAccessChain %201 %88 
                                               OpStore %562 %561 
                                  f32 %565 = OpLoad %90 
                                 bool %566 = OpFOrdLessThan %565 %18 
                                  u32 %568 = OpSelect %566 %567 %88 
                                  i32 %569 = OpBitcast %568 
                                               OpStore %564 %569 
                                  f32 %570 = OpLoad %56 
                                  f32 %571 = OpFNegate %570 
                                  f32 %572 = OpFMul %571 %448 
                         Private f32* %573 = OpAccessChain %207 %88 
                                  f32 %574 = OpLoad %573 
                                  f32 %575 = OpFAdd %572 %574 
                         Private f32* %576 = OpAccessChain %119 %88 
                                               OpStore %576 %575 
                                  f32 %577 = OpLoad %56 
                                  f32 %578 = OpFNegate %577 
                                  f32 %579 = OpFMul %578 %448 
                                  f32 %580 = OpLoad %216 
                                  f32 %581 = OpFAdd %579 %580 
                         Private f32* %582 = OpAccessChain %119 %358 
                                               OpStore %582 %581 
                                f32_2 %585 = OpLoad %119 
                                f32_4 %586 = OpVectorShuffle %585 %585 0 1 0 1 
                                f32_4 %587 = OpExtInst %1 4 %586 
                                f32_3 %588 = OpLoad %78 
                                f32_4 %589 = OpVectorShuffle %588 %588 0 0 0 0 
                               bool_4 %591 = OpFOrdGreaterThanEqual %587 %589 
                               bool_2 %593 = OpVectorShuffle %591 %591 0 1 
                                u32_2 %597 = OpSelect %593 %596 %595 
                                u32_2 %598 = OpCompositeConstruct %567 %567 
                                u32_2 %599 = OpIMul %597 %598 
                                i32_2 %600 = OpBitcast %599 
                                               OpStore %584 %600 
                         Private f32* %601 = OpAccessChain %100 %88 
                                  f32 %602 = OpLoad %601 
                                  f32 %603 = OpFNegate %602 
                                  f32 %605 = OpFMul %603 %604 
                         Private f32* %606 = OpAccessChain %237 %88 
                                  f32 %607 = OpLoad %606 
                                  f32 %608 = OpFAdd %605 %607 
                         Private f32* %609 = OpAccessChain %520 %88 
                                               OpStore %609 %608 
                         Private i32* %610 = OpAccessChain %584 %88 
                                  i32 %611 = OpLoad %610 
                                 bool %612 = OpINotEqual %611 %32 
                                               OpSelectionMerge %615 None 
                                               OpBranchConditional %612 %614 %618 
                                      %614 = OpLabel 
                         Private f32* %616 = OpAccessChain %237 %88 
                                  f32 %617 = OpLoad %616 
                                               OpStore %613 %617 
                                               OpBranch %615 
                                      %618 = OpLabel 
                         Private f32* %619 = OpAccessChain %520 %88 
                                  f32 %620 = OpLoad %619 
                                               OpStore %613 %620 
                                               OpBranch %615 
                                      %615 = OpLabel 
                                  f32 %621 = OpLoad %613 
                         Private f32* %622 = OpAccessChain %237 %88 
                                               OpStore %622 %621 
                         Private f32* %624 = OpAccessChain %100 %358 
                                  f32 %625 = OpLoad %624 
                                  f32 %626 = OpFNegate %625 
                                  f32 %627 = OpFMul %626 %604 
                         Private f32* %628 = OpAccessChain %237 %358 
                                  f32 %629 = OpLoad %628 
                                  f32 %630 = OpFAdd %627 %629 
                                               OpStore %623 %630 
                         Private i32* %631 = OpAccessChain %584 %88 
                                  i32 %632 = OpLoad %631 
                                 bool %633 = OpINotEqual %632 %32 
                                               OpSelectionMerge %636 None 
                                               OpBranchConditional %633 %635 %639 
                                      %635 = OpLabel 
                         Private f32* %637 = OpAccessChain %237 %358 
                                  f32 %638 = OpLoad %637 
                                               OpStore %634 %638 
                                               OpBranch %636 
                                      %639 = OpLabel 
                                  f32 %640 = OpLoad %623 
                                               OpStore %634 %640 
                                               OpBranch %636 
                                      %636 = OpLabel 
                                  f32 %641 = OpLoad %634 
                         Private f32* %643 = OpAccessChain %237 %642 
                                               OpStore %643 %641 
                                i32_2 %647 = OpLoad %584 
                                i32_2 %648 = OpNot %647 
                                i32_3 %649 = OpLoad %646 
                                i32_3 %650 = OpVectorShuffle %649 %648 3 1 4 
                                               OpStore %646 %650 
                         Private i32* %651 = OpAccessChain %646 %642 
                                  i32 %652 = OpLoad %651 
                                  u32 %653 = OpBitcast %652 
                         Private i32* %654 = OpAccessChain %646 %88 
                                  i32 %655 = OpLoad %654 
                                  u32 %656 = OpBitcast %655 
                                  u32 %657 = OpBitwiseOr %653 %656 
                                  i32 %658 = OpBitcast %657 
                         Private i32* %659 = OpAccessChain %646 %88 
                                               OpStore %659 %658 
                         Private f32* %660 = OpAccessChain %100 %88 
                                  f32 %661 = OpLoad %660 
                                  f32 %662 = OpFMul %661 %604 
                         Private f32* %663 = OpAccessChain %484 %88 
                                  f32 %664 = OpLoad %663 
                                  f32 %665 = OpFAdd %662 %664 
                                               OpStore %623 %665 
                         Private i32* %666 = OpAccessChain %584 %358 
                                  i32 %667 = OpLoad %666 
                                 bool %668 = OpINotEqual %667 %32 
                                               OpSelectionMerge %671 None 
                                               OpBranchConditional %668 %670 %674 
                                      %670 = OpLabel 
                         Private f32* %672 = OpAccessChain %484 %88 
                                  f32 %673 = OpLoad %672 
                                               OpStore %669 %673 
                                               OpBranch %671 
                                      %674 = OpLabel 
                                  f32 %675 = OpLoad %623 
                                               OpStore %669 %675 
                                               OpBranch %671 
                                      %671 = OpLabel 
                                  f32 %676 = OpLoad %669 
                         Private f32* %677 = OpAccessChain %484 %88 
                                               OpStore %677 %676 
                         Private f32* %678 = OpAccessChain %100 %358 
                                  f32 %679 = OpLoad %678 
                                  f32 %680 = OpFMul %679 %604 
                         Private f32* %681 = OpAccessChain %484 %358 
                                  f32 %682 = OpLoad %681 
                                  f32 %683 = OpFAdd %680 %682 
                                               OpStore %623 %683 
                         Private i32* %684 = OpAccessChain %584 %358 
                                  i32 %685 = OpLoad %684 
                                 bool %686 = OpINotEqual %685 %32 
                                               OpSelectionMerge %689 None 
                                               OpBranchConditional %686 %688 %692 
                                      %688 = OpLabel 
                         Private f32* %690 = OpAccessChain %484 %358 
                                  f32 %691 = OpLoad %690 
                                               OpStore %687 %691 
                                               OpBranch %689 
                                      %692 = OpLabel 
                                  f32 %693 = OpLoad %623 
                                               OpStore %687 %693 
                                               OpBranch %689 
                                      %689 = OpLabel 
                                  f32 %694 = OpLoad %687 
                         Private f32* %695 = OpAccessChain %484 %642 
                                               OpStore %695 %694 
                         Private i32* %696 = OpAccessChain %646 %88 
                                  i32 %697 = OpLoad %696 
                                 bool %698 = OpINotEqual %697 %32 
                                               OpSelectionMerge %700 None 
                                               OpBranchConditional %698 %699 %700 
                                      %699 = OpLabel 
                         Private i32* %701 = OpAccessChain %584 %88 
                                  i32 %702 = OpLoad %701 
                                 bool %703 = OpIEqual %702 %32 
                                               OpSelectionMerge %705 None 
                                               OpBranchConditional %703 %704 %705 
                                      %704 = OpLabel 
                                f32_3 %706 = OpLoad %237 
                                f32_2 %707 = OpVectorShuffle %706 %706 0 2 
                                f32_3 %708 = OpLoad %249 
                                f32_3 %709 = OpVectorShuffle %708 %707 3 1 4 
                                               OpStore %249 %709 
                                f32_3 %710 = OpLoad %249 
                                f32_2 %711 = OpVectorShuffle %710 %710 0 2 
                                f32_2 %712 = OpCompositeConstruct %18 %18 
                                f32_2 %713 = OpCompositeConstruct %19 %19 
                                f32_2 %714 = OpExtInst %1 43 %711 %712 %713 
                                f32_3 %715 = OpLoad %249 
                                f32_3 %716 = OpVectorShuffle %715 %714 3 1 4 
                                               OpStore %249 %716 
                                f32_3 %717 = OpLoad %249 
                                f32_2 %718 = OpVectorShuffle %717 %717 0 2 
                         Uniform f32* %719 = OpAccessChain %30 %32 
                                  f32 %720 = OpLoad %719 
                                f32_2 %721 = OpCompositeConstruct %720 %720 
                                f32_2 %722 = OpFMul %718 %721 
                                f32_3 %723 = OpLoad %249 
                                f32_3 %724 = OpVectorShuffle %723 %722 3 1 4 
                                               OpStore %249 %724 
                  read_only Texture2D %725 = OpLoad %44 
                              sampler %726 = OpLoad %48 
           read_only Texture2DSampled %727 = OpSampledImage %725 %726 
                                f32_3 %728 = OpLoad %249 
                                f32_2 %729 = OpVectorShuffle %728 %728 0 2 
                                f32_4 %730 = OpImageSampleExplicitLod %727 %729 Lod %27 
                                  f32 %731 = OpCompositeExtract %730 3 
                         Private f32* %732 = OpAccessChain %119 %88 
                                               OpStore %732 %731 
                                               OpBranch %705 
                                      %705 = OpLabel 
                         Private i32* %733 = OpAccessChain %584 %358 
                                  i32 %734 = OpLoad %733 
                                 bool %735 = OpIEqual %734 %32 
                                               OpSelectionMerge %737 None 
                                               OpBranchConditional %735 %736 %737 
                                      %736 = OpLabel 
                                f32_3 %738 = OpLoad %484 
                                f32_2 %739 = OpVectorShuffle %738 %738 0 2 
                                f32_3 %740 = OpLoad %249 
                                f32_3 %741 = OpVectorShuffle %740 %739 3 1 4 
                                               OpStore %249 %741 
                                f32_3 %742 = OpLoad %249 
                                f32_2 %743 = OpVectorShuffle %742 %742 0 2 
                                f32_2 %744 = OpCompositeConstruct %18 %18 
                                f32_2 %745 = OpCompositeConstruct %19 %19 
                                f32_2 %746 = OpExtInst %1 43 %743 %744 %745 
                                f32_3 %747 = OpLoad %249 
                                f32_3 %748 = OpVectorShuffle %747 %746 3 1 4 
                                               OpStore %249 %748 
                                f32_3 %749 = OpLoad %249 
                                f32_2 %750 = OpVectorShuffle %749 %749 0 2 
                         Uniform f32* %751 = OpAccessChain %30 %32 
                                  f32 %752 = OpLoad %751 
                                f32_2 %753 = OpCompositeConstruct %752 %752 
                                f32_2 %754 = OpFMul %750 %753 
                                f32_3 %755 = OpLoad %249 
                                f32_3 %756 = OpVectorShuffle %755 %754 3 1 4 
                                               OpStore %249 %756 
                  read_only Texture2D %757 = OpLoad %44 
                              sampler %758 = OpLoad %48 
           read_only Texture2DSampled %759 = OpSampledImage %757 %758 
                                f32_3 %760 = OpLoad %249 
                                f32_2 %761 = OpVectorShuffle %760 %760 0 2 
                                f32_4 %762 = OpImageSampleExplicitLod %759 %761 Lod %27 
                                  f32 %763 = OpCompositeExtract %762 3 
                         Private f32* %764 = OpAccessChain %119 %358 
                                               OpStore %764 %763 
                                               OpBranch %737 
                                      %737 = OpLabel 
                                  f32 %765 = OpLoad %56 
                                  f32 %766 = OpFNegate %765 
                                  f32 %767 = OpFMul %766 %448 
                         Private f32* %768 = OpAccessChain %119 %88 
                                  f32 %769 = OpLoad %768 
                                  f32 %770 = OpFAdd %767 %769 
                         Private f32* %771 = OpAccessChain %249 %88 
                                               OpStore %771 %770 
                         Private i32* %772 = OpAccessChain %584 %88 
                                  i32 %773 = OpLoad %772 
                                 bool %774 = OpINotEqual %773 %32 
                                               OpSelectionMerge %777 None 
                                               OpBranchConditional %774 %776 %780 
                                      %776 = OpLabel 
                         Private f32* %778 = OpAccessChain %119 %88 
                                  f32 %779 = OpLoad %778 
                                               OpStore %775 %779 
                                               OpBranch %777 
                                      %780 = OpLabel 
                         Private f32* %781 = OpAccessChain %249 %88 
                                  f32 %782 = OpLoad %781 
                                               OpStore %775 %782 
                                               OpBranch %777 
                                      %777 = OpLabel 
                                  f32 %783 = OpLoad %775 
                         Private f32* %784 = OpAccessChain %119 %88 
                                               OpStore %784 %783 
                                  f32 %785 = OpLoad %56 
                                  f32 %786 = OpFNegate %785 
                                  f32 %787 = OpFMul %786 %448 
                         Private f32* %788 = OpAccessChain %119 %358 
                                  f32 %789 = OpLoad %788 
                                  f32 %790 = OpFAdd %787 %789 
                         Private f32* %791 = OpAccessChain %207 %88 
                                               OpStore %791 %790 
                         Private i32* %792 = OpAccessChain %584 %358 
                                  i32 %793 = OpLoad %792 
                                 bool %794 = OpINotEqual %793 %32 
                                               OpSelectionMerge %797 None 
                                               OpBranchConditional %794 %796 %800 
                                      %796 = OpLabel 
                         Private f32* %798 = OpAccessChain %119 %358 
                                  f32 %799 = OpLoad %798 
                                               OpStore %795 %799 
                                               OpBranch %797 
                                      %800 = OpLabel 
                         Private f32* %801 = OpAccessChain %207 %88 
                                  f32 %802 = OpLoad %801 
                                               OpStore %795 %802 
                                               OpBranch %797 
                                      %797 = OpLabel 
                                  f32 %803 = OpLoad %795 
                         Private f32* %804 = OpAccessChain %119 %358 
                                               OpStore %804 %803 
                                f32_2 %805 = OpLoad %119 
                                f32_4 %806 = OpVectorShuffle %805 %805 0 1 0 1 
                                f32_4 %807 = OpExtInst %1 4 %806 
                                f32_3 %808 = OpLoad %78 
                                f32_4 %809 = OpVectorShuffle %808 %808 0 0 0 0 
                               bool_4 %810 = OpFOrdGreaterThanEqual %807 %809 
                               bool_2 %811 = OpVectorShuffle %810 %810 0 1 
                                u32_2 %812 = OpSelect %811 %596 %595 
                                u32_2 %813 = OpCompositeConstruct %567 %567 
                                u32_2 %814 = OpIMul %812 %813 
                                i32_2 %815 = OpBitcast %814 
                                               OpStore %584 %815 
                         Private f32* %816 = OpAccessChain %100 %88 
                                  f32 %817 = OpLoad %816 
                                  f32 %818 = OpFNegate %817 
                                  f32 %819 = OpFMul %818 %276 
                         Private f32* %820 = OpAccessChain %237 %88 
                                  f32 %821 = OpLoad %820 
                                  f32 %822 = OpFAdd %819 %821 
                         Private f32* %823 = OpAccessChain %249 %88 
                                               OpStore %823 %822 
                         Private i32* %824 = OpAccessChain %584 %88 
                                  i32 %825 = OpLoad %824 
                                 bool %826 = OpINotEqual %825 %32 
                                               OpSelectionMerge %829 None 
                                               OpBranchConditional %826 %828 %832 
                                      %828 = OpLabel 
                         Private f32* %830 = OpAccessChain %237 %88 
                                  f32 %831 = OpLoad %830 
                                               OpStore %827 %831 
                                               OpBranch %829 
                                      %832 = OpLabel 
                         Private f32* %833 = OpAccessChain %249 %88 
                                  f32 %834 = OpLoad %833 
                                               OpStore %827 %834 
                                               OpBranch %829 
                                      %829 = OpLabel 
                                  f32 %835 = OpLoad %827 
                         Private f32* %836 = OpAccessChain %237 %88 
                                               OpStore %836 %835 
                         Private f32* %837 = OpAccessChain %100 %358 
                                  f32 %838 = OpLoad %837 
                                  f32 %839 = OpFNegate %838 
                                  f32 %840 = OpFMul %839 %276 
                         Private f32* %841 = OpAccessChain %237 %642 
                                  f32 %842 = OpLoad %841 
                                  f32 %843 = OpFAdd %840 %842 
                         Private f32* %844 = OpAccessChain %249 %88 
                                               OpStore %844 %843 
                         Private i32* %845 = OpAccessChain %584 %88 
                                  i32 %846 = OpLoad %845 
                                 bool %847 = OpINotEqual %846 %32 
                                               OpSelectionMerge %850 None 
                                               OpBranchConditional %847 %849 %853 
                                      %849 = OpLabel 
                         Private f32* %851 = OpAccessChain %237 %642 
                                  f32 %852 = OpLoad %851 
                                               OpStore %848 %852 
                                               OpBranch %850 
                                      %853 = OpLabel 
                         Private f32* %854 = OpAccessChain %249 %88 
                                  f32 %855 = OpLoad %854 
                                               OpStore %848 %855 
                                               OpBranch %850 
                                      %850 = OpLabel 
                                  f32 %856 = OpLoad %848 
                         Private f32* %857 = OpAccessChain %237 %642 
                                               OpStore %857 %856 
                                i32_2 %858 = OpLoad %584 
                                i32_2 %859 = OpNot %858 
                                i32_3 %860 = OpLoad %646 
                                i32_3 %861 = OpVectorShuffle %860 %859 3 1 4 
                                               OpStore %646 %861 
                         Private i32* %862 = OpAccessChain %646 %642 
                                  i32 %863 = OpLoad %862 
                                  u32 %864 = OpBitcast %863 
                         Private i32* %865 = OpAccessChain %646 %88 
                                  i32 %866 = OpLoad %865 
                                  u32 %867 = OpBitcast %866 
                                  u32 %868 = OpBitwiseOr %864 %867 
                                  i32 %869 = OpBitcast %868 
                         Private i32* %870 = OpAccessChain %646 %88 
                                               OpStore %870 %869 
                         Private f32* %871 = OpAccessChain %100 %88 
                                  f32 %872 = OpLoad %871 
                                  f32 %873 = OpFMul %872 %276 
                         Private f32* %874 = OpAccessChain %484 %88 
                                  f32 %875 = OpLoad %874 
                                  f32 %876 = OpFAdd %873 %875 
                                               OpStore %623 %876 
                         Private i32* %877 = OpAccessChain %584 %358 
                                  i32 %878 = OpLoad %877 
                                 bool %879 = OpINotEqual %878 %32 
                                               OpSelectionMerge %882 None 
                                               OpBranchConditional %879 %881 %885 
                                      %881 = OpLabel 
                         Private f32* %883 = OpAccessChain %484 %88 
                                  f32 %884 = OpLoad %883 
                                               OpStore %880 %884 
                                               OpBranch %882 
                                      %885 = OpLabel 
                                  f32 %886 = OpLoad %623 
                                               OpStore %880 %886 
                                               OpBranch %882 
                                      %882 = OpLabel 
                                  f32 %887 = OpLoad %880 
                         Private f32* %888 = OpAccessChain %484 %88 
                                               OpStore %888 %887 
                         Private f32* %889 = OpAccessChain %100 %358 
                                  f32 %890 = OpLoad %889 
                                  f32 %891 = OpFMul %890 %276 
                         Private f32* %892 = OpAccessChain %484 %642 
                                  f32 %893 = OpLoad %892 
                                  f32 %894 = OpFAdd %891 %893 
                                               OpStore %623 %894 
                         Private i32* %895 = OpAccessChain %584 %358 
                                  i32 %896 = OpLoad %895 
                                 bool %897 = OpINotEqual %896 %32 
                                               OpSelectionMerge %900 None 
                                               OpBranchConditional %897 %899 %903 
                                      %899 = OpLabel 
                         Private f32* %901 = OpAccessChain %484 %642 
                                  f32 %902 = OpLoad %901 
                                               OpStore %898 %902 
                                               OpBranch %900 
                                      %903 = OpLabel 
                                  f32 %904 = OpLoad %623 
                                               OpStore %898 %904 
                                               OpBranch %900 
                                      %900 = OpLabel 
                                  f32 %905 = OpLoad %898 
                         Private f32* %906 = OpAccessChain %484 %642 
                                               OpStore %906 %905 
                         Private i32* %907 = OpAccessChain %646 %88 
                                  i32 %908 = OpLoad %907 
                                 bool %909 = OpINotEqual %908 %32 
                                               OpSelectionMerge %911 None 
                                               OpBranchConditional %909 %910 %911 
                                      %910 = OpLabel 
                         Private i32* %912 = OpAccessChain %584 %88 
                                  i32 %913 = OpLoad %912 
                                 bool %914 = OpIEqual %913 %32 
                                               OpSelectionMerge %916 None 
                                               OpBranchConditional %914 %915 %916 
                                      %915 = OpLabel 
                                f32_3 %917 = OpLoad %237 
                                f32_2 %918 = OpVectorShuffle %917 %917 0 2 
                                f32_3 %919 = OpLoad %249 
                                f32_3 %920 = OpVectorShuffle %919 %918 3 1 4 
                                               OpStore %249 %920 
                                f32_3 %921 = OpLoad %249 
                                f32_2 %922 = OpVectorShuffle %921 %921 0 2 
                                f32_2 %923 = OpCompositeConstruct %18 %18 
                                f32_2 %924 = OpCompositeConstruct %19 %19 
                                f32_2 %925 = OpExtInst %1 43 %922 %923 %924 
                                f32_3 %926 = OpLoad %249 
                                f32_3 %927 = OpVectorShuffle %926 %925 3 1 4 
                                               OpStore %249 %927 
                                f32_3 %928 = OpLoad %249 
                                f32_2 %929 = OpVectorShuffle %928 %928 0 2 
                         Uniform f32* %930 = OpAccessChain %30 %32 
                                  f32 %931 = OpLoad %930 
                                f32_2 %932 = OpCompositeConstruct %931 %931 
                                f32_2 %933 = OpFMul %929 %932 
                                f32_3 %934 = OpLoad %249 
                                f32_3 %935 = OpVectorShuffle %934 %933 3 1 4 
                                               OpStore %249 %935 
                  read_only Texture2D %936 = OpLoad %44 
                              sampler %937 = OpLoad %48 
           read_only Texture2DSampled %938 = OpSampledImage %936 %937 
                                f32_3 %939 = OpLoad %249 
                                f32_2 %940 = OpVectorShuffle %939 %939 0 2 
                                f32_4 %941 = OpImageSampleExplicitLod %938 %940 Lod %27 
                                  f32 %942 = OpCompositeExtract %941 3 
                         Private f32* %943 = OpAccessChain %119 %88 
                                               OpStore %943 %942 
                                               OpBranch %916 
                                      %916 = OpLabel 
                         Private i32* %944 = OpAccessChain %584 %358 
                                  i32 %945 = OpLoad %944 
                                 bool %946 = OpIEqual %945 %32 
                                               OpSelectionMerge %948 None 
                                               OpBranchConditional %946 %947 %948 
                                      %947 = OpLabel 
                                f32_3 %949 = OpLoad %484 
                                f32_2 %950 = OpVectorShuffle %949 %949 0 2 
                                f32_3 %951 = OpLoad %249 
                                f32_3 %952 = OpVectorShuffle %951 %950 3 1 4 
                                               OpStore %249 %952 
                                f32_3 %953 = OpLoad %249 
                                f32_2 %954 = OpVectorShuffle %953 %953 0 2 
                                f32_2 %955 = OpCompositeConstruct %18 %18 
                                f32_2 %956 = OpCompositeConstruct %19 %19 
                                f32_2 %957 = OpExtInst %1 43 %954 %955 %956 
                                f32_3 %958 = OpLoad %249 
                                f32_3 %959 = OpVectorShuffle %958 %957 3 1 4 
                                               OpStore %249 %959 
                                f32_3 %960 = OpLoad %249 
                                f32_2 %961 = OpVectorShuffle %960 %960 0 2 
                         Uniform f32* %962 = OpAccessChain %30 %32 
                                  f32 %963 = OpLoad %962 
                                f32_2 %964 = OpCompositeConstruct %963 %963 
                                f32_2 %965 = OpFMul %961 %964 
                                f32_3 %966 = OpLoad %249 
                                f32_3 %967 = OpVectorShuffle %966 %965 3 1 4 
                                               OpStore %249 %967 
                  read_only Texture2D %968 = OpLoad %44 
                              sampler %969 = OpLoad %48 
           read_only Texture2DSampled %970 = OpSampledImage %968 %969 
                                f32_3 %971 = OpLoad %249 
                                f32_2 %972 = OpVectorShuffle %971 %971 0 2 
                                f32_4 %973 = OpImageSampleExplicitLod %970 %972 Lod %27 
                                  f32 %974 = OpCompositeExtract %973 3 
                         Private f32* %975 = OpAccessChain %119 %358 
                                               OpStore %975 %974 
                                               OpBranch %948 
                                      %948 = OpLabel 
                                  f32 %976 = OpLoad %56 
                                  f32 %977 = OpFNegate %976 
                                  f32 %978 = OpFMul %977 %448 
                         Private f32* %979 = OpAccessChain %119 %88 
                                  f32 %980 = OpLoad %979 
                                  f32 %981 = OpFAdd %978 %980 
                         Private f32* %982 = OpAccessChain %249 %88 
                                               OpStore %982 %981 
                         Private i32* %983 = OpAccessChain %584 %88 
                                  i32 %984 = OpLoad %983 
                                 bool %985 = OpINotEqual %984 %32 
                                               OpSelectionMerge %988 None 
                                               OpBranchConditional %985 %987 %991 
                                      %987 = OpLabel 
                         Private f32* %989 = OpAccessChain %119 %88 
                                  f32 %990 = OpLoad %989 
                                               OpStore %986 %990 
                                               OpBranch %988 
                                      %991 = OpLabel 
                         Private f32* %992 = OpAccessChain %249 %88 
                                  f32 %993 = OpLoad %992 
                                               OpStore %986 %993 
                                               OpBranch %988 
                                      %988 = OpLabel 
                                  f32 %994 = OpLoad %986 
                         Private f32* %995 = OpAccessChain %119 %88 
                                               OpStore %995 %994 
                                  f32 %996 = OpLoad %56 
                                  f32 %997 = OpFNegate %996 
                                  f32 %998 = OpFMul %997 %448 
                         Private f32* %999 = OpAccessChain %119 %358 
                                 f32 %1000 = OpLoad %999 
                                 f32 %1001 = OpFAdd %998 %1000 
                        Private f32* %1002 = OpAccessChain %207 %88 
                                               OpStore %1002 %1001 
                        Private i32* %1003 = OpAccessChain %584 %358 
                                 i32 %1004 = OpLoad %1003 
                                bool %1005 = OpINotEqual %1004 %32 
                                               OpSelectionMerge %1008 None 
                                               OpBranchConditional %1005 %1007 %1011 
                                     %1007 = OpLabel 
                        Private f32* %1009 = OpAccessChain %119 %358 
                                 f32 %1010 = OpLoad %1009 
                                               OpStore %1006 %1010 
                                               OpBranch %1008 
                                     %1011 = OpLabel 
                        Private f32* %1012 = OpAccessChain %207 %88 
                                 f32 %1013 = OpLoad %1012 
                                               OpStore %1006 %1013 
                                               OpBranch %1008 
                                     %1008 = OpLabel 
                                 f32 %1014 = OpLoad %1006 
                        Private f32* %1015 = OpAccessChain %119 %358 
                                               OpStore %1015 %1014 
                               f32_2 %1016 = OpLoad %119 
                               f32_4 %1017 = OpVectorShuffle %1016 %1016 0 1 0 1 
                               f32_4 %1018 = OpExtInst %1 4 %1017 
                               f32_3 %1019 = OpLoad %78 
                               f32_4 %1020 = OpVectorShuffle %1019 %1019 0 0 0 0 
                              bool_4 %1021 = OpFOrdGreaterThanEqual %1018 %1020 
                              bool_2 %1022 = OpVectorShuffle %1021 %1021 0 1 
                               u32_2 %1023 = OpSelect %1022 %596 %595 
                               u32_2 %1024 = OpCompositeConstruct %567 %567 
                               u32_2 %1025 = OpIMul %1023 %1024 
                               i32_2 %1026 = OpBitcast %1025 
                                               OpStore %584 %1026 
                        Private f32* %1027 = OpAccessChain %100 %88 
                                 f32 %1028 = OpLoad %1027 
                                 f32 %1029 = OpFNegate %1028 
                                 f32 %1030 = OpFMul %1029 %276 
                        Private f32* %1031 = OpAccessChain %237 %88 
                                 f32 %1032 = OpLoad %1031 
                                 f32 %1033 = OpFAdd %1030 %1032 
                        Private f32* %1034 = OpAccessChain %249 %88 
                                               OpStore %1034 %1033 
                        Private i32* %1035 = OpAccessChain %584 %88 
                                 i32 %1036 = OpLoad %1035 
                                bool %1037 = OpINotEqual %1036 %32 
                                               OpSelectionMerge %1040 None 
                                               OpBranchConditional %1037 %1039 %1043 
                                     %1039 = OpLabel 
                        Private f32* %1041 = OpAccessChain %237 %88 
                                 f32 %1042 = OpLoad %1041 
                                               OpStore %1038 %1042 
                                               OpBranch %1040 
                                     %1043 = OpLabel 
                        Private f32* %1044 = OpAccessChain %249 %88 
                                 f32 %1045 = OpLoad %1044 
                                               OpStore %1038 %1045 
                                               OpBranch %1040 
                                     %1040 = OpLabel 
                                 f32 %1046 = OpLoad %1038 
                        Private f32* %1047 = OpAccessChain %237 %88 
                                               OpStore %1047 %1046 
                        Private f32* %1048 = OpAccessChain %100 %358 
                                 f32 %1049 = OpLoad %1048 
                                 f32 %1050 = OpFNegate %1049 
                                 f32 %1051 = OpFMul %1050 %276 
                        Private f32* %1052 = OpAccessChain %237 %642 
                                 f32 %1053 = OpLoad %1052 
                                 f32 %1054 = OpFAdd %1051 %1053 
                        Private f32* %1055 = OpAccessChain %249 %88 
                                               OpStore %1055 %1054 
                        Private i32* %1056 = OpAccessChain %584 %88 
                                 i32 %1057 = OpLoad %1056 
                                bool %1058 = OpINotEqual %1057 %32 
                                               OpSelectionMerge %1061 None 
                                               OpBranchConditional %1058 %1060 %1064 
                                     %1060 = OpLabel 
                        Private f32* %1062 = OpAccessChain %237 %642 
                                 f32 %1063 = OpLoad %1062 
                                               OpStore %1059 %1063 
                                               OpBranch %1061 
                                     %1064 = OpLabel 
                        Private f32* %1065 = OpAccessChain %249 %88 
                                 f32 %1066 = OpLoad %1065 
                                               OpStore %1059 %1066 
                                               OpBranch %1061 
                                     %1061 = OpLabel 
                                 f32 %1067 = OpLoad %1059 
                        Private f32* %1068 = OpAccessChain %237 %642 
                                               OpStore %1068 %1067 
                               i32_2 %1069 = OpLoad %584 
                               i32_2 %1070 = OpNot %1069 
                               i32_3 %1071 = OpLoad %646 
                               i32_3 %1072 = OpVectorShuffle %1071 %1070 3 1 4 
                                               OpStore %646 %1072 
                        Private i32* %1073 = OpAccessChain %646 %642 
                                 i32 %1074 = OpLoad %1073 
                                 u32 %1075 = OpBitcast %1074 
                        Private i32* %1076 = OpAccessChain %646 %88 
                                 i32 %1077 = OpLoad %1076 
                                 u32 %1078 = OpBitcast %1077 
                                 u32 %1079 = OpBitwiseOr %1075 %1078 
                                 i32 %1080 = OpBitcast %1079 
                        Private i32* %1081 = OpAccessChain %646 %88 
                                               OpStore %1081 %1080 
                        Private f32* %1082 = OpAccessChain %100 %88 
                                 f32 %1083 = OpLoad %1082 
                                 f32 %1084 = OpFMul %1083 %276 
                        Private f32* %1085 = OpAccessChain %484 %88 
                                 f32 %1086 = OpLoad %1085 
                                 f32 %1087 = OpFAdd %1084 %1086 
                                               OpStore %623 %1087 
                        Private i32* %1088 = OpAccessChain %584 %358 
                                 i32 %1089 = OpLoad %1088 
                                bool %1090 = OpINotEqual %1089 %32 
                                               OpSelectionMerge %1093 None 
                                               OpBranchConditional %1090 %1092 %1096 
                                     %1092 = OpLabel 
                        Private f32* %1094 = OpAccessChain %484 %88 
                                 f32 %1095 = OpLoad %1094 
                                               OpStore %1091 %1095 
                                               OpBranch %1093 
                                     %1096 = OpLabel 
                                 f32 %1097 = OpLoad %623 
                                               OpStore %1091 %1097 
                                               OpBranch %1093 
                                     %1093 = OpLabel 
                                 f32 %1098 = OpLoad %1091 
                        Private f32* %1099 = OpAccessChain %484 %88 
                                               OpStore %1099 %1098 
                        Private f32* %1100 = OpAccessChain %100 %358 
                                 f32 %1101 = OpLoad %1100 
                                 f32 %1102 = OpFMul %1101 %276 
                        Private f32* %1103 = OpAccessChain %484 %642 
                                 f32 %1104 = OpLoad %1103 
                                 f32 %1105 = OpFAdd %1102 %1104 
                                               OpStore %623 %1105 
                        Private i32* %1106 = OpAccessChain %584 %358 
                                 i32 %1107 = OpLoad %1106 
                                bool %1108 = OpINotEqual %1107 %32 
                                               OpSelectionMerge %1111 None 
                                               OpBranchConditional %1108 %1110 %1114 
                                     %1110 = OpLabel 
                        Private f32* %1112 = OpAccessChain %484 %642 
                                 f32 %1113 = OpLoad %1112 
                                               OpStore %1109 %1113 
                                               OpBranch %1111 
                                     %1114 = OpLabel 
                                 f32 %1115 = OpLoad %623 
                                               OpStore %1109 %1115 
                                               OpBranch %1111 
                                     %1111 = OpLabel 
                                 f32 %1116 = OpLoad %1109 
                        Private f32* %1117 = OpAccessChain %484 %642 
                                               OpStore %1117 %1116 
                        Private i32* %1118 = OpAccessChain %646 %88 
                                 i32 %1119 = OpLoad %1118 
                                bool %1120 = OpINotEqual %1119 %32 
                                               OpSelectionMerge %1122 None 
                                               OpBranchConditional %1120 %1121 %1122 
                                     %1121 = OpLabel 
                        Private i32* %1123 = OpAccessChain %584 %88 
                                 i32 %1124 = OpLoad %1123 
                                bool %1125 = OpIEqual %1124 %32 
                                               OpSelectionMerge %1127 None 
                                               OpBranchConditional %1125 %1126 %1127 
                                     %1126 = OpLabel 
                               f32_3 %1128 = OpLoad %237 
                               f32_2 %1129 = OpVectorShuffle %1128 %1128 0 2 
                               f32_3 %1130 = OpLoad %249 
                               f32_3 %1131 = OpVectorShuffle %1130 %1129 3 1 4 
                                               OpStore %249 %1131 
                               f32_3 %1132 = OpLoad %249 
                               f32_2 %1133 = OpVectorShuffle %1132 %1132 0 2 
                               f32_2 %1134 = OpCompositeConstruct %18 %18 
                               f32_2 %1135 = OpCompositeConstruct %19 %19 
                               f32_2 %1136 = OpExtInst %1 43 %1133 %1134 %1135 
                               f32_3 %1137 = OpLoad %249 
                               f32_3 %1138 = OpVectorShuffle %1137 %1136 3 1 4 
                                               OpStore %249 %1138 
                               f32_3 %1139 = OpLoad %249 
                               f32_2 %1140 = OpVectorShuffle %1139 %1139 0 2 
                        Uniform f32* %1141 = OpAccessChain %30 %32 
                                 f32 %1142 = OpLoad %1141 
                               f32_2 %1143 = OpCompositeConstruct %1142 %1142 
                               f32_2 %1144 = OpFMul %1140 %1143 
                               f32_3 %1145 = OpLoad %249 
                               f32_3 %1146 = OpVectorShuffle %1145 %1144 3 1 4 
                                               OpStore %249 %1146 
                 read_only Texture2D %1147 = OpLoad %44 
                             sampler %1148 = OpLoad %48 
          read_only Texture2DSampled %1149 = OpSampledImage %1147 %1148 
                               f32_3 %1150 = OpLoad %249 
                               f32_2 %1151 = OpVectorShuffle %1150 %1150 0 2 
                               f32_4 %1152 = OpImageSampleExplicitLod %1149 %1151 Lod %27 
                                 f32 %1153 = OpCompositeExtract %1152 3 
                        Private f32* %1154 = OpAccessChain %119 %88 
                                               OpStore %1154 %1153 
                                               OpBranch %1127 
                                     %1127 = OpLabel 
                        Private i32* %1155 = OpAccessChain %584 %358 
                                 i32 %1156 = OpLoad %1155 
                                bool %1157 = OpIEqual %1156 %32 
                                               OpSelectionMerge %1159 None 
                                               OpBranchConditional %1157 %1158 %1159 
                                     %1158 = OpLabel 
                               f32_3 %1160 = OpLoad %484 
                               f32_2 %1161 = OpVectorShuffle %1160 %1160 0 2 
                               f32_3 %1162 = OpLoad %249 
                               f32_3 %1163 = OpVectorShuffle %1162 %1161 3 1 4 
                                               OpStore %249 %1163 
                               f32_3 %1164 = OpLoad %249 
                               f32_2 %1165 = OpVectorShuffle %1164 %1164 0 2 
                               f32_2 %1166 = OpCompositeConstruct %18 %18 
                               f32_2 %1167 = OpCompositeConstruct %19 %19 
                               f32_2 %1168 = OpExtInst %1 43 %1165 %1166 %1167 
                               f32_3 %1169 = OpLoad %249 
                               f32_3 %1170 = OpVectorShuffle %1169 %1168 3 1 4 
                                               OpStore %249 %1170 
                               f32_3 %1171 = OpLoad %249 
                               f32_2 %1172 = OpVectorShuffle %1171 %1171 0 2 
                        Uniform f32* %1173 = OpAccessChain %30 %32 
                                 f32 %1174 = OpLoad %1173 
                               f32_2 %1175 = OpCompositeConstruct %1174 %1174 
                               f32_2 %1176 = OpFMul %1172 %1175 
                               f32_3 %1177 = OpLoad %249 
                               f32_3 %1178 = OpVectorShuffle %1177 %1176 3 1 4 
                                               OpStore %249 %1178 
                 read_only Texture2D %1179 = OpLoad %44 
                             sampler %1180 = OpLoad %48 
          read_only Texture2DSampled %1181 = OpSampledImage %1179 %1180 
                               f32_3 %1182 = OpLoad %249 
                               f32_2 %1183 = OpVectorShuffle %1182 %1182 0 2 
                               f32_4 %1184 = OpImageSampleExplicitLod %1181 %1183 Lod %27 
                                 f32 %1185 = OpCompositeExtract %1184 3 
                        Private f32* %1186 = OpAccessChain %119 %358 
                                               OpStore %1186 %1185 
                                               OpBranch %1159 
                                     %1159 = OpLabel 
                                 f32 %1187 = OpLoad %56 
                                 f32 %1188 = OpFNegate %1187 
                                 f32 %1189 = OpFMul %1188 %448 
                        Private f32* %1190 = OpAccessChain %119 %88 
                                 f32 %1191 = OpLoad %1190 
                                 f32 %1192 = OpFAdd %1189 %1191 
                        Private f32* %1193 = OpAccessChain %249 %88 
                                               OpStore %1193 %1192 
                        Private i32* %1194 = OpAccessChain %584 %88 
                                 i32 %1195 = OpLoad %1194 
                                bool %1196 = OpINotEqual %1195 %32 
                                               OpSelectionMerge %1199 None 
                                               OpBranchConditional %1196 %1198 %1202 
                                     %1198 = OpLabel 
                        Private f32* %1200 = OpAccessChain %119 %88 
                                 f32 %1201 = OpLoad %1200 
                                               OpStore %1197 %1201 
                                               OpBranch %1199 
                                     %1202 = OpLabel 
                        Private f32* %1203 = OpAccessChain %249 %88 
                                 f32 %1204 = OpLoad %1203 
                                               OpStore %1197 %1204 
                                               OpBranch %1199 
                                     %1199 = OpLabel 
                                 f32 %1205 = OpLoad %1197 
                        Private f32* %1206 = OpAccessChain %119 %88 
                                               OpStore %1206 %1205 
                                 f32 %1207 = OpLoad %56 
                                 f32 %1208 = OpFNegate %1207 
                                 f32 %1209 = OpFMul %1208 %448 
                        Private f32* %1210 = OpAccessChain %119 %358 
                                 f32 %1211 = OpLoad %1210 
                                 f32 %1212 = OpFAdd %1209 %1211 
                        Private f32* %1213 = OpAccessChain %207 %88 
                                               OpStore %1213 %1212 
                        Private i32* %1214 = OpAccessChain %584 %358 
                                 i32 %1215 = OpLoad %1214 
                                bool %1216 = OpINotEqual %1215 %32 
                                               OpSelectionMerge %1219 None 
                                               OpBranchConditional %1216 %1218 %1222 
                                     %1218 = OpLabel 
                        Private f32* %1220 = OpAccessChain %119 %358 
                                 f32 %1221 = OpLoad %1220 
                                               OpStore %1217 %1221 
                                               OpBranch %1219 
                                     %1222 = OpLabel 
                        Private f32* %1223 = OpAccessChain %207 %88 
                                 f32 %1224 = OpLoad %1223 
                                               OpStore %1217 %1224 
                                               OpBranch %1219 
                                     %1219 = OpLabel 
                                 f32 %1225 = OpLoad %1217 
                        Private f32* %1226 = OpAccessChain %119 %358 
                                               OpStore %1226 %1225 
                               f32_2 %1227 = OpLoad %119 
                               f32_4 %1228 = OpVectorShuffle %1227 %1227 0 1 0 1 
                               f32_4 %1229 = OpExtInst %1 4 %1228 
                               f32_3 %1230 = OpLoad %78 
                               f32_4 %1231 = OpVectorShuffle %1230 %1230 0 0 0 0 
                              bool_4 %1232 = OpFOrdGreaterThanEqual %1229 %1231 
                              bool_2 %1233 = OpVectorShuffle %1232 %1232 0 1 
                               u32_2 %1234 = OpSelect %1233 %596 %595 
                               u32_2 %1235 = OpCompositeConstruct %567 %567 
                               u32_2 %1236 = OpIMul %1234 %1235 
                               i32_2 %1237 = OpBitcast %1236 
                                               OpStore %584 %1237 
                        Private f32* %1238 = OpAccessChain %100 %88 
                                 f32 %1239 = OpLoad %1238 
                                 f32 %1240 = OpFNegate %1239 
                                 f32 %1241 = OpFMul %1240 %276 
                        Private f32* %1242 = OpAccessChain %237 %88 
                                 f32 %1243 = OpLoad %1242 
                                 f32 %1244 = OpFAdd %1241 %1243 
                        Private f32* %1245 = OpAccessChain %249 %88 
                                               OpStore %1245 %1244 
                        Private i32* %1246 = OpAccessChain %584 %88 
                                 i32 %1247 = OpLoad %1246 
                                bool %1248 = OpINotEqual %1247 %32 
                                               OpSelectionMerge %1251 None 
                                               OpBranchConditional %1248 %1250 %1254 
                                     %1250 = OpLabel 
                        Private f32* %1252 = OpAccessChain %237 %88 
                                 f32 %1253 = OpLoad %1252 
                                               OpStore %1249 %1253 
                                               OpBranch %1251 
                                     %1254 = OpLabel 
                        Private f32* %1255 = OpAccessChain %249 %88 
                                 f32 %1256 = OpLoad %1255 
                                               OpStore %1249 %1256 
                                               OpBranch %1251 
                                     %1251 = OpLabel 
                                 f32 %1257 = OpLoad %1249 
                        Private f32* %1258 = OpAccessChain %237 %88 
                                               OpStore %1258 %1257 
                        Private f32* %1259 = OpAccessChain %100 %358 
                                 f32 %1260 = OpLoad %1259 
                                 f32 %1261 = OpFNegate %1260 
                                 f32 %1262 = OpFMul %1261 %276 
                        Private f32* %1263 = OpAccessChain %237 %642 
                                 f32 %1264 = OpLoad %1263 
                                 f32 %1265 = OpFAdd %1262 %1264 
                        Private f32* %1266 = OpAccessChain %249 %88 
                                               OpStore %1266 %1265 
                        Private i32* %1267 = OpAccessChain %584 %88 
                                 i32 %1268 = OpLoad %1267 
                                bool %1269 = OpINotEqual %1268 %32 
                                               OpSelectionMerge %1272 None 
                                               OpBranchConditional %1269 %1271 %1275 
                                     %1271 = OpLabel 
                        Private f32* %1273 = OpAccessChain %237 %642 
                                 f32 %1274 = OpLoad %1273 
                                               OpStore %1270 %1274 
                                               OpBranch %1272 
                                     %1275 = OpLabel 
                        Private f32* %1276 = OpAccessChain %249 %88 
                                 f32 %1277 = OpLoad %1276 
                                               OpStore %1270 %1277 
                                               OpBranch %1272 
                                     %1272 = OpLabel 
                                 f32 %1278 = OpLoad %1270 
                        Private f32* %1279 = OpAccessChain %237 %642 
                                               OpStore %1279 %1278 
                               i32_2 %1280 = OpLoad %584 
                               i32_2 %1281 = OpNot %1280 
                               i32_3 %1282 = OpLoad %646 
                               i32_3 %1283 = OpVectorShuffle %1282 %1281 3 1 4 
                                               OpStore %646 %1283 
                        Private i32* %1284 = OpAccessChain %646 %642 
                                 i32 %1285 = OpLoad %1284 
                                 u32 %1286 = OpBitcast %1285 
                        Private i32* %1287 = OpAccessChain %646 %88 
                                 i32 %1288 = OpLoad %1287 
                                 u32 %1289 = OpBitcast %1288 
                                 u32 %1290 = OpBitwiseOr %1286 %1289 
                                 i32 %1291 = OpBitcast %1290 
                        Private i32* %1292 = OpAccessChain %646 %88 
                                               OpStore %1292 %1291 
                        Private f32* %1293 = OpAccessChain %100 %88 
                                 f32 %1294 = OpLoad %1293 
                                 f32 %1295 = OpFMul %1294 %276 
                        Private f32* %1296 = OpAccessChain %484 %88 
                                 f32 %1297 = OpLoad %1296 
                                 f32 %1298 = OpFAdd %1295 %1297 
                                               OpStore %623 %1298 
                        Private i32* %1299 = OpAccessChain %584 %358 
                                 i32 %1300 = OpLoad %1299 
                                bool %1301 = OpINotEqual %1300 %32 
                                               OpSelectionMerge %1304 None 
                                               OpBranchConditional %1301 %1303 %1307 
                                     %1303 = OpLabel 
                        Private f32* %1305 = OpAccessChain %484 %88 
                                 f32 %1306 = OpLoad %1305 
                                               OpStore %1302 %1306 
                                               OpBranch %1304 
                                     %1307 = OpLabel 
                                 f32 %1308 = OpLoad %623 
                                               OpStore %1302 %1308 
                                               OpBranch %1304 
                                     %1304 = OpLabel 
                                 f32 %1309 = OpLoad %1302 
                        Private f32* %1310 = OpAccessChain %484 %88 
                                               OpStore %1310 %1309 
                        Private f32* %1311 = OpAccessChain %100 %358 
                                 f32 %1312 = OpLoad %1311 
                                 f32 %1313 = OpFMul %1312 %276 
                        Private f32* %1314 = OpAccessChain %484 %642 
                                 f32 %1315 = OpLoad %1314 
                                 f32 %1316 = OpFAdd %1313 %1315 
                                               OpStore %623 %1316 
                        Private i32* %1317 = OpAccessChain %584 %358 
                                 i32 %1318 = OpLoad %1317 
                                bool %1319 = OpINotEqual %1318 %32 
                                               OpSelectionMerge %1322 None 
                                               OpBranchConditional %1319 %1321 %1325 
                                     %1321 = OpLabel 
                        Private f32* %1323 = OpAccessChain %484 %642 
                                 f32 %1324 = OpLoad %1323 
                                               OpStore %1320 %1324 
                                               OpBranch %1322 
                                     %1325 = OpLabel 
                                 f32 %1326 = OpLoad %623 
                                               OpStore %1320 %1326 
                                               OpBranch %1322 
                                     %1322 = OpLabel 
                                 f32 %1327 = OpLoad %1320 
                        Private f32* %1328 = OpAccessChain %484 %642 
                                               OpStore %1328 %1327 
                        Private i32* %1329 = OpAccessChain %646 %88 
                                 i32 %1330 = OpLoad %1329 
                                bool %1331 = OpINotEqual %1330 %32 
                                               OpSelectionMerge %1333 None 
                                               OpBranchConditional %1331 %1332 %1333 
                                     %1332 = OpLabel 
                        Private i32* %1334 = OpAccessChain %584 %88 
                                 i32 %1335 = OpLoad %1334 
                                bool %1336 = OpIEqual %1335 %32 
                                               OpSelectionMerge %1338 None 
                                               OpBranchConditional %1336 %1337 %1338 
                                     %1337 = OpLabel 
                               f32_3 %1339 = OpLoad %237 
                               f32_2 %1340 = OpVectorShuffle %1339 %1339 0 2 
                               f32_3 %1341 = OpLoad %249 
                               f32_3 %1342 = OpVectorShuffle %1341 %1340 3 1 4 
                                               OpStore %249 %1342 
                               f32_3 %1343 = OpLoad %249 
                               f32_2 %1344 = OpVectorShuffle %1343 %1343 0 2 
                               f32_2 %1345 = OpCompositeConstruct %18 %18 
                               f32_2 %1346 = OpCompositeConstruct %19 %19 
                               f32_2 %1347 = OpExtInst %1 43 %1344 %1345 %1346 
                               f32_3 %1348 = OpLoad %249 
                               f32_3 %1349 = OpVectorShuffle %1348 %1347 3 1 4 
                                               OpStore %249 %1349 
                               f32_3 %1350 = OpLoad %249 
                               f32_2 %1351 = OpVectorShuffle %1350 %1350 0 2 
                        Uniform f32* %1352 = OpAccessChain %30 %32 
                                 f32 %1353 = OpLoad %1352 
                               f32_2 %1354 = OpCompositeConstruct %1353 %1353 
                               f32_2 %1355 = OpFMul %1351 %1354 
                               f32_3 %1356 = OpLoad %249 
                               f32_3 %1357 = OpVectorShuffle %1356 %1355 3 1 4 
                                               OpStore %249 %1357 
                 read_only Texture2D %1358 = OpLoad %44 
                             sampler %1359 = OpLoad %48 
          read_only Texture2DSampled %1360 = OpSampledImage %1358 %1359 
                               f32_3 %1361 = OpLoad %249 
                               f32_2 %1362 = OpVectorShuffle %1361 %1361 0 2 
                               f32_4 %1363 = OpImageSampleExplicitLod %1360 %1362 Lod %27 
                                 f32 %1364 = OpCompositeExtract %1363 3 
                        Private f32* %1365 = OpAccessChain %119 %88 
                                               OpStore %1365 %1364 
                                               OpBranch %1338 
                                     %1338 = OpLabel 
                        Private i32* %1366 = OpAccessChain %584 %358 
                                 i32 %1367 = OpLoad %1366 
                                bool %1368 = OpIEqual %1367 %32 
                                               OpSelectionMerge %1370 None 
                                               OpBranchConditional %1368 %1369 %1370 
                                     %1369 = OpLabel 
                               f32_3 %1371 = OpLoad %484 
                               f32_2 %1372 = OpVectorShuffle %1371 %1371 0 2 
                               f32_3 %1373 = OpLoad %249 
                               f32_3 %1374 = OpVectorShuffle %1373 %1372 3 1 4 
                                               OpStore %249 %1374 
                               f32_3 %1375 = OpLoad %249 
                               f32_2 %1376 = OpVectorShuffle %1375 %1375 0 2 
                               f32_2 %1377 = OpCompositeConstruct %18 %18 
                               f32_2 %1378 = OpCompositeConstruct %19 %19 
                               f32_2 %1379 = OpExtInst %1 43 %1376 %1377 %1378 
                               f32_3 %1380 = OpLoad %249 
                               f32_3 %1381 = OpVectorShuffle %1380 %1379 3 1 4 
                                               OpStore %249 %1381 
                               f32_3 %1382 = OpLoad %249 
                               f32_2 %1383 = OpVectorShuffle %1382 %1382 0 2 
                        Uniform f32* %1384 = OpAccessChain %30 %32 
                                 f32 %1385 = OpLoad %1384 
                               f32_2 %1386 = OpCompositeConstruct %1385 %1385 
                               f32_2 %1387 = OpFMul %1383 %1386 
                               f32_3 %1388 = OpLoad %249 
                               f32_3 %1389 = OpVectorShuffle %1388 %1387 3 1 4 
                                               OpStore %249 %1389 
                 read_only Texture2D %1390 = OpLoad %44 
                             sampler %1391 = OpLoad %48 
          read_only Texture2DSampled %1392 = OpSampledImage %1390 %1391 
                               f32_3 %1393 = OpLoad %249 
                               f32_2 %1394 = OpVectorShuffle %1393 %1393 0 2 
                               f32_4 %1395 = OpImageSampleExplicitLod %1392 %1394 Lod %27 
                                 f32 %1396 = OpCompositeExtract %1395 3 
                        Private f32* %1397 = OpAccessChain %119 %358 
                                               OpStore %1397 %1396 
                                               OpBranch %1370 
                                     %1370 = OpLabel 
                                 f32 %1398 = OpLoad %56 
                                 f32 %1399 = OpFNegate %1398 
                                 f32 %1400 = OpFMul %1399 %448 
                        Private f32* %1401 = OpAccessChain %119 %88 
                                 f32 %1402 = OpLoad %1401 
                                 f32 %1403 = OpFAdd %1400 %1402 
                        Private f32* %1404 = OpAccessChain %249 %88 
                                               OpStore %1404 %1403 
                        Private i32* %1405 = OpAccessChain %584 %88 
                                 i32 %1406 = OpLoad %1405 
                                bool %1407 = OpINotEqual %1406 %32 
                                               OpSelectionMerge %1410 None 
                                               OpBranchConditional %1407 %1409 %1413 
                                     %1409 = OpLabel 
                        Private f32* %1411 = OpAccessChain %119 %88 
                                 f32 %1412 = OpLoad %1411 
                                               OpStore %1408 %1412 
                                               OpBranch %1410 
                                     %1413 = OpLabel 
                        Private f32* %1414 = OpAccessChain %249 %88 
                                 f32 %1415 = OpLoad %1414 
                                               OpStore %1408 %1415 
                                               OpBranch %1410 
                                     %1410 = OpLabel 
                                 f32 %1416 = OpLoad %1408 
                        Private f32* %1417 = OpAccessChain %119 %88 
                                               OpStore %1417 %1416 
                                 f32 %1418 = OpLoad %56 
                                 f32 %1419 = OpFNegate %1418 
                                 f32 %1420 = OpFMul %1419 %448 
                        Private f32* %1421 = OpAccessChain %119 %358 
                                 f32 %1422 = OpLoad %1421 
                                 f32 %1423 = OpFAdd %1420 %1422 
                        Private f32* %1424 = OpAccessChain %207 %88 
                                               OpStore %1424 %1423 
                        Private i32* %1425 = OpAccessChain %584 %358 
                                 i32 %1426 = OpLoad %1425 
                                bool %1427 = OpINotEqual %1426 %32 
                                               OpSelectionMerge %1430 None 
                                               OpBranchConditional %1427 %1429 %1433 
                                     %1429 = OpLabel 
                        Private f32* %1431 = OpAccessChain %119 %358 
                                 f32 %1432 = OpLoad %1431 
                                               OpStore %1428 %1432 
                                               OpBranch %1430 
                                     %1433 = OpLabel 
                        Private f32* %1434 = OpAccessChain %207 %88 
                                 f32 %1435 = OpLoad %1434 
                                               OpStore %1428 %1435 
                                               OpBranch %1430 
                                     %1430 = OpLabel 
                                 f32 %1436 = OpLoad %1428 
                        Private f32* %1437 = OpAccessChain %119 %358 
                                               OpStore %1437 %1436 
                               f32_2 %1438 = OpLoad %119 
                               f32_4 %1439 = OpVectorShuffle %1438 %1438 0 1 0 1 
                               f32_4 %1440 = OpExtInst %1 4 %1439 
                               f32_3 %1441 = OpLoad %78 
                               f32_4 %1442 = OpVectorShuffle %1441 %1441 0 0 0 0 
                              bool_4 %1443 = OpFOrdGreaterThanEqual %1440 %1442 
                              bool_2 %1444 = OpVectorShuffle %1443 %1443 0 1 
                               u32_2 %1445 = OpSelect %1444 %596 %595 
                               u32_2 %1446 = OpCompositeConstruct %567 %567 
                               u32_2 %1447 = OpIMul %1445 %1446 
                               i32_2 %1448 = OpBitcast %1447 
                                               OpStore %584 %1448 
                        Private f32* %1449 = OpAccessChain %100 %88 
                                 f32 %1450 = OpLoad %1449 
                                 f32 %1451 = OpFNegate %1450 
                                 f32 %1452 = OpFMul %1451 %276 
                        Private f32* %1453 = OpAccessChain %237 %88 
                                 f32 %1454 = OpLoad %1453 
                                 f32 %1455 = OpFAdd %1452 %1454 
                        Private f32* %1456 = OpAccessChain %249 %88 
                                               OpStore %1456 %1455 
                        Private i32* %1457 = OpAccessChain %584 %88 
                                 i32 %1458 = OpLoad %1457 
                                bool %1459 = OpINotEqual %1458 %32 
                                               OpSelectionMerge %1462 None 
                                               OpBranchConditional %1459 %1461 %1465 
                                     %1461 = OpLabel 
                        Private f32* %1463 = OpAccessChain %237 %88 
                                 f32 %1464 = OpLoad %1463 
                                               OpStore %1460 %1464 
                                               OpBranch %1462 
                                     %1465 = OpLabel 
                        Private f32* %1466 = OpAccessChain %249 %88 
                                 f32 %1467 = OpLoad %1466 
                                               OpStore %1460 %1467 
                                               OpBranch %1462 
                                     %1462 = OpLabel 
                                 f32 %1468 = OpLoad %1460 
                        Private f32* %1469 = OpAccessChain %237 %88 
                                               OpStore %1469 %1468 
                        Private f32* %1470 = OpAccessChain %100 %358 
                                 f32 %1471 = OpLoad %1470 
                                 f32 %1472 = OpFNegate %1471 
                                 f32 %1473 = OpFMul %1472 %276 
                        Private f32* %1474 = OpAccessChain %237 %642 
                                 f32 %1475 = OpLoad %1474 
                                 f32 %1476 = OpFAdd %1473 %1475 
                        Private f32* %1477 = OpAccessChain %249 %88 
                                               OpStore %1477 %1476 
                        Private i32* %1478 = OpAccessChain %584 %88 
                                 i32 %1479 = OpLoad %1478 
                                bool %1480 = OpINotEqual %1479 %32 
                                               OpSelectionMerge %1483 None 
                                               OpBranchConditional %1480 %1482 %1486 
                                     %1482 = OpLabel 
                        Private f32* %1484 = OpAccessChain %237 %642 
                                 f32 %1485 = OpLoad %1484 
                                               OpStore %1481 %1485 
                                               OpBranch %1483 
                                     %1486 = OpLabel 
                        Private f32* %1487 = OpAccessChain %249 %88 
                                 f32 %1488 = OpLoad %1487 
                                               OpStore %1481 %1488 
                                               OpBranch %1483 
                                     %1483 = OpLabel 
                                 f32 %1489 = OpLoad %1481 
                        Private f32* %1490 = OpAccessChain %237 %642 
                                               OpStore %1490 %1489 
                               i32_2 %1491 = OpLoad %584 
                               i32_2 %1492 = OpNot %1491 
                               i32_3 %1493 = OpLoad %646 
                               i32_3 %1494 = OpVectorShuffle %1493 %1492 3 1 4 
                                               OpStore %646 %1494 
                        Private i32* %1495 = OpAccessChain %646 %642 
                                 i32 %1496 = OpLoad %1495 
                                 u32 %1497 = OpBitcast %1496 
                        Private i32* %1498 = OpAccessChain %646 %88 
                                 i32 %1499 = OpLoad %1498 
                                 u32 %1500 = OpBitcast %1499 
                                 u32 %1501 = OpBitwiseOr %1497 %1500 
                                 i32 %1502 = OpBitcast %1501 
                        Private i32* %1503 = OpAccessChain %646 %88 
                                               OpStore %1503 %1502 
                        Private f32* %1504 = OpAccessChain %100 %88 
                                 f32 %1505 = OpLoad %1504 
                                 f32 %1506 = OpFMul %1505 %276 
                        Private f32* %1507 = OpAccessChain %484 %88 
                                 f32 %1508 = OpLoad %1507 
                                 f32 %1509 = OpFAdd %1506 %1508 
                                               OpStore %623 %1509 
                        Private i32* %1510 = OpAccessChain %584 %358 
                                 i32 %1511 = OpLoad %1510 
                                bool %1512 = OpINotEqual %1511 %32 
                                               OpSelectionMerge %1515 None 
                                               OpBranchConditional %1512 %1514 %1518 
                                     %1514 = OpLabel 
                        Private f32* %1516 = OpAccessChain %484 %88 
                                 f32 %1517 = OpLoad %1516 
                                               OpStore %1513 %1517 
                                               OpBranch %1515 
                                     %1518 = OpLabel 
                                 f32 %1519 = OpLoad %623 
                                               OpStore %1513 %1519 
                                               OpBranch %1515 
                                     %1515 = OpLabel 
                                 f32 %1520 = OpLoad %1513 
                        Private f32* %1521 = OpAccessChain %484 %88 
                                               OpStore %1521 %1520 
                        Private f32* %1522 = OpAccessChain %100 %358 
                                 f32 %1523 = OpLoad %1522 
                                 f32 %1524 = OpFMul %1523 %276 
                        Private f32* %1525 = OpAccessChain %484 %642 
                                 f32 %1526 = OpLoad %1525 
                                 f32 %1527 = OpFAdd %1524 %1526 
                                               OpStore %623 %1527 
                        Private i32* %1528 = OpAccessChain %584 %358 
                                 i32 %1529 = OpLoad %1528 
                                bool %1530 = OpINotEqual %1529 %32 
                                               OpSelectionMerge %1533 None 
                                               OpBranchConditional %1530 %1532 %1536 
                                     %1532 = OpLabel 
                        Private f32* %1534 = OpAccessChain %484 %642 
                                 f32 %1535 = OpLoad %1534 
                                               OpStore %1531 %1535 
                                               OpBranch %1533 
                                     %1536 = OpLabel 
                                 f32 %1537 = OpLoad %623 
                                               OpStore %1531 %1537 
                                               OpBranch %1533 
                                     %1533 = OpLabel 
                                 f32 %1538 = OpLoad %1531 
                        Private f32* %1539 = OpAccessChain %484 %642 
                                               OpStore %1539 %1538 
                        Private i32* %1540 = OpAccessChain %646 %88 
                                 i32 %1541 = OpLoad %1540 
                                bool %1542 = OpINotEqual %1541 %32 
                                               OpSelectionMerge %1544 None 
                                               OpBranchConditional %1542 %1543 %1544 
                                     %1543 = OpLabel 
                        Private i32* %1545 = OpAccessChain %584 %88 
                                 i32 %1546 = OpLoad %1545 
                                bool %1547 = OpIEqual %1546 %32 
                                               OpSelectionMerge %1549 None 
                                               OpBranchConditional %1547 %1548 %1549 
                                     %1548 = OpLabel 
                               f32_3 %1550 = OpLoad %237 
                               f32_2 %1551 = OpVectorShuffle %1550 %1550 0 2 
                               f32_3 %1552 = OpLoad %249 
                               f32_3 %1553 = OpVectorShuffle %1552 %1551 3 1 4 
                                               OpStore %249 %1553 
                               f32_3 %1554 = OpLoad %249 
                               f32_2 %1555 = OpVectorShuffle %1554 %1554 0 2 
                               f32_2 %1556 = OpCompositeConstruct %18 %18 
                               f32_2 %1557 = OpCompositeConstruct %19 %19 
                               f32_2 %1558 = OpExtInst %1 43 %1555 %1556 %1557 
                               f32_3 %1559 = OpLoad %249 
                               f32_3 %1560 = OpVectorShuffle %1559 %1558 3 1 4 
                                               OpStore %249 %1560 
                               f32_3 %1561 = OpLoad %249 
                               f32_2 %1562 = OpVectorShuffle %1561 %1561 0 2 
                        Uniform f32* %1563 = OpAccessChain %30 %32 
                                 f32 %1564 = OpLoad %1563 
                               f32_2 %1565 = OpCompositeConstruct %1564 %1564 
                               f32_2 %1566 = OpFMul %1562 %1565 
                               f32_3 %1567 = OpLoad %249 
                               f32_3 %1568 = OpVectorShuffle %1567 %1566 3 1 4 
                                               OpStore %249 %1568 
                 read_only Texture2D %1569 = OpLoad %44 
                             sampler %1570 = OpLoad %48 
          read_only Texture2DSampled %1571 = OpSampledImage %1569 %1570 
                               f32_3 %1572 = OpLoad %249 
                               f32_2 %1573 = OpVectorShuffle %1572 %1572 0 2 
                               f32_4 %1574 = OpImageSampleExplicitLod %1571 %1573 Lod %27 
                                 f32 %1575 = OpCompositeExtract %1574 3 
                        Private f32* %1576 = OpAccessChain %119 %88 
                                               OpStore %1576 %1575 
                                               OpBranch %1549 
                                     %1549 = OpLabel 
                        Private i32* %1577 = OpAccessChain %584 %358 
                                 i32 %1578 = OpLoad %1577 
                                bool %1579 = OpIEqual %1578 %32 
                                               OpSelectionMerge %1581 None 
                                               OpBranchConditional %1579 %1580 %1581 
                                     %1580 = OpLabel 
                               f32_3 %1582 = OpLoad %484 
                               f32_2 %1583 = OpVectorShuffle %1582 %1582 0 2 
                               f32_3 %1584 = OpLoad %249 
                               f32_3 %1585 = OpVectorShuffle %1584 %1583 3 1 4 
                                               OpStore %249 %1585 
                               f32_3 %1586 = OpLoad %249 
                               f32_2 %1587 = OpVectorShuffle %1586 %1586 0 2 
                               f32_2 %1588 = OpCompositeConstruct %18 %18 
                               f32_2 %1589 = OpCompositeConstruct %19 %19 
                               f32_2 %1590 = OpExtInst %1 43 %1587 %1588 %1589 
                               f32_3 %1591 = OpLoad %249 
                               f32_3 %1592 = OpVectorShuffle %1591 %1590 3 1 4 
                                               OpStore %249 %1592 
                               f32_3 %1593 = OpLoad %249 
                               f32_2 %1594 = OpVectorShuffle %1593 %1593 0 2 
                        Uniform f32* %1595 = OpAccessChain %30 %32 
                                 f32 %1596 = OpLoad %1595 
                               f32_2 %1597 = OpCompositeConstruct %1596 %1596 
                               f32_2 %1598 = OpFMul %1594 %1597 
                               f32_3 %1599 = OpLoad %249 
                               f32_3 %1600 = OpVectorShuffle %1599 %1598 3 1 4 
                                               OpStore %249 %1600 
                 read_only Texture2D %1601 = OpLoad %44 
                             sampler %1602 = OpLoad %48 
          read_only Texture2DSampled %1603 = OpSampledImage %1601 %1602 
                               f32_3 %1604 = OpLoad %249 
                               f32_2 %1605 = OpVectorShuffle %1604 %1604 0 2 
                               f32_4 %1606 = OpImageSampleExplicitLod %1603 %1605 Lod %27 
                                 f32 %1607 = OpCompositeExtract %1606 3 
                        Private f32* %1608 = OpAccessChain %119 %358 
                                               OpStore %1608 %1607 
                                               OpBranch %1581 
                                     %1581 = OpLabel 
                                 f32 %1609 = OpLoad %56 
                                 f32 %1610 = OpFNegate %1609 
                                 f32 %1611 = OpFMul %1610 %448 
                        Private f32* %1612 = OpAccessChain %119 %88 
                                 f32 %1613 = OpLoad %1612 
                                 f32 %1614 = OpFAdd %1611 %1613 
                        Private f32* %1615 = OpAccessChain %249 %88 
                                               OpStore %1615 %1614 
                        Private i32* %1616 = OpAccessChain %584 %88 
                                 i32 %1617 = OpLoad %1616 
                                bool %1618 = OpINotEqual %1617 %32 
                                               OpSelectionMerge %1621 None 
                                               OpBranchConditional %1618 %1620 %1624 
                                     %1620 = OpLabel 
                        Private f32* %1622 = OpAccessChain %119 %88 
                                 f32 %1623 = OpLoad %1622 
                                               OpStore %1619 %1623 
                                               OpBranch %1621 
                                     %1624 = OpLabel 
                        Private f32* %1625 = OpAccessChain %249 %88 
                                 f32 %1626 = OpLoad %1625 
                                               OpStore %1619 %1626 
                                               OpBranch %1621 
                                     %1621 = OpLabel 
                                 f32 %1627 = OpLoad %1619 
                        Private f32* %1628 = OpAccessChain %119 %88 
                                               OpStore %1628 %1627 
                                 f32 %1629 = OpLoad %56 
                                 f32 %1630 = OpFNegate %1629 
                                 f32 %1631 = OpFMul %1630 %448 
                        Private f32* %1632 = OpAccessChain %119 %358 
                                 f32 %1633 = OpLoad %1632 
                                 f32 %1634 = OpFAdd %1631 %1633 
                        Private f32* %1635 = OpAccessChain %207 %88 
                                               OpStore %1635 %1634 
                        Private i32* %1636 = OpAccessChain %584 %358 
                                 i32 %1637 = OpLoad %1636 
                                bool %1638 = OpINotEqual %1637 %32 
                                               OpSelectionMerge %1641 None 
                                               OpBranchConditional %1638 %1640 %1644 
                                     %1640 = OpLabel 
                        Private f32* %1642 = OpAccessChain %119 %358 
                                 f32 %1643 = OpLoad %1642 
                                               OpStore %1639 %1643 
                                               OpBranch %1641 
                                     %1644 = OpLabel 
                        Private f32* %1645 = OpAccessChain %207 %88 
                                 f32 %1646 = OpLoad %1645 
                                               OpStore %1639 %1646 
                                               OpBranch %1641 
                                     %1641 = OpLabel 
                                 f32 %1647 = OpLoad %1639 
                        Private f32* %1648 = OpAccessChain %119 %358 
                                               OpStore %1648 %1647 
                               f32_2 %1649 = OpLoad %119 
                               f32_4 %1650 = OpVectorShuffle %1649 %1649 0 1 0 1 
                               f32_4 %1651 = OpExtInst %1 4 %1650 
                               f32_3 %1652 = OpLoad %78 
                               f32_4 %1653 = OpVectorShuffle %1652 %1652 0 0 0 0 
                              bool_4 %1654 = OpFOrdGreaterThanEqual %1651 %1653 
                              bool_2 %1655 = OpVectorShuffle %1654 %1654 0 1 
                               u32_2 %1656 = OpSelect %1655 %596 %595 
                               u32_2 %1657 = OpCompositeConstruct %567 %567 
                               u32_2 %1658 = OpIMul %1656 %1657 
                               i32_2 %1659 = OpBitcast %1658 
                                               OpStore %584 %1659 
                        Private f32* %1660 = OpAccessChain %100 %88 
                                 f32 %1661 = OpLoad %1660 
                                 f32 %1662 = OpFNegate %1661 
                                 f32 %1663 = OpFMul %1662 %276 
                        Private f32* %1664 = OpAccessChain %237 %88 
                                 f32 %1665 = OpLoad %1664 
                                 f32 %1666 = OpFAdd %1663 %1665 
                        Private f32* %1667 = OpAccessChain %249 %88 
                                               OpStore %1667 %1666 
                        Private i32* %1668 = OpAccessChain %584 %88 
                                 i32 %1669 = OpLoad %1668 
                                bool %1670 = OpINotEqual %1669 %32 
                                               OpSelectionMerge %1673 None 
                                               OpBranchConditional %1670 %1672 %1676 
                                     %1672 = OpLabel 
                        Private f32* %1674 = OpAccessChain %237 %88 
                                 f32 %1675 = OpLoad %1674 
                                               OpStore %1671 %1675 
                                               OpBranch %1673 
                                     %1676 = OpLabel 
                        Private f32* %1677 = OpAccessChain %249 %88 
                                 f32 %1678 = OpLoad %1677 
                                               OpStore %1671 %1678 
                                               OpBranch %1673 
                                     %1673 = OpLabel 
                                 f32 %1679 = OpLoad %1671 
                        Private f32* %1680 = OpAccessChain %237 %88 
                                               OpStore %1680 %1679 
                        Private f32* %1681 = OpAccessChain %100 %358 
                                 f32 %1682 = OpLoad %1681 
                                 f32 %1683 = OpFNegate %1682 
                                 f32 %1684 = OpFMul %1683 %276 
                        Private f32* %1685 = OpAccessChain %237 %642 
                                 f32 %1686 = OpLoad %1685 
                                 f32 %1687 = OpFAdd %1684 %1686 
                        Private f32* %1688 = OpAccessChain %249 %88 
                                               OpStore %1688 %1687 
                        Private i32* %1689 = OpAccessChain %584 %88 
                                 i32 %1690 = OpLoad %1689 
                                bool %1691 = OpINotEqual %1690 %32 
                                               OpSelectionMerge %1694 None 
                                               OpBranchConditional %1691 %1693 %1697 
                                     %1693 = OpLabel 
                        Private f32* %1695 = OpAccessChain %237 %642 
                                 f32 %1696 = OpLoad %1695 
                                               OpStore %1692 %1696 
                                               OpBranch %1694 
                                     %1697 = OpLabel 
                        Private f32* %1698 = OpAccessChain %249 %88 
                                 f32 %1699 = OpLoad %1698 
                                               OpStore %1692 %1699 
                                               OpBranch %1694 
                                     %1694 = OpLabel 
                                 f32 %1700 = OpLoad %1692 
                        Private f32* %1701 = OpAccessChain %237 %642 
                                               OpStore %1701 %1700 
                               i32_2 %1702 = OpLoad %584 
                               i32_2 %1703 = OpNot %1702 
                               i32_3 %1704 = OpLoad %646 
                               i32_3 %1705 = OpVectorShuffle %1704 %1703 3 1 4 
                                               OpStore %646 %1705 
                        Private i32* %1706 = OpAccessChain %646 %642 
                                 i32 %1707 = OpLoad %1706 
                                 u32 %1708 = OpBitcast %1707 
                        Private i32* %1709 = OpAccessChain %646 %88 
                                 i32 %1710 = OpLoad %1709 
                                 u32 %1711 = OpBitcast %1710 
                                 u32 %1712 = OpBitwiseOr %1708 %1711 
                                 i32 %1713 = OpBitcast %1712 
                        Private i32* %1714 = OpAccessChain %646 %88 
                                               OpStore %1714 %1713 
                        Private f32* %1715 = OpAccessChain %100 %88 
                                 f32 %1716 = OpLoad %1715 
                                 f32 %1717 = OpFMul %1716 %276 
                        Private f32* %1718 = OpAccessChain %484 %88 
                                 f32 %1719 = OpLoad %1718 
                                 f32 %1720 = OpFAdd %1717 %1719 
                                               OpStore %623 %1720 
                        Private i32* %1721 = OpAccessChain %584 %358 
                                 i32 %1722 = OpLoad %1721 
                                bool %1723 = OpINotEqual %1722 %32 
                                               OpSelectionMerge %1726 None 
                                               OpBranchConditional %1723 %1725 %1729 
                                     %1725 = OpLabel 
                        Private f32* %1727 = OpAccessChain %484 %88 
                                 f32 %1728 = OpLoad %1727 
                                               OpStore %1724 %1728 
                                               OpBranch %1726 
                                     %1729 = OpLabel 
                                 f32 %1730 = OpLoad %623 
                                               OpStore %1724 %1730 
                                               OpBranch %1726 
                                     %1726 = OpLabel 
                                 f32 %1731 = OpLoad %1724 
                        Private f32* %1732 = OpAccessChain %484 %88 
                                               OpStore %1732 %1731 
                        Private f32* %1733 = OpAccessChain %100 %358 
                                 f32 %1734 = OpLoad %1733 
                                 f32 %1735 = OpFMul %1734 %276 
                        Private f32* %1736 = OpAccessChain %484 %642 
                                 f32 %1737 = OpLoad %1736 
                                 f32 %1738 = OpFAdd %1735 %1737 
                                               OpStore %623 %1738 
                        Private i32* %1739 = OpAccessChain %584 %358 
                                 i32 %1740 = OpLoad %1739 
                                bool %1741 = OpINotEqual %1740 %32 
                                               OpSelectionMerge %1744 None 
                                               OpBranchConditional %1741 %1743 %1747 
                                     %1743 = OpLabel 
                        Private f32* %1745 = OpAccessChain %484 %642 
                                 f32 %1746 = OpLoad %1745 
                                               OpStore %1742 %1746 
                                               OpBranch %1744 
                                     %1747 = OpLabel 
                                 f32 %1748 = OpLoad %623 
                                               OpStore %1742 %1748 
                                               OpBranch %1744 
                                     %1744 = OpLabel 
                                 f32 %1749 = OpLoad %1742 
                        Private f32* %1750 = OpAccessChain %484 %642 
                                               OpStore %1750 %1749 
                        Private i32* %1751 = OpAccessChain %646 %88 
                                 i32 %1752 = OpLoad %1751 
                                bool %1753 = OpINotEqual %1752 %32 
                                               OpSelectionMerge %1755 None 
                                               OpBranchConditional %1753 %1754 %1755 
                                     %1754 = OpLabel 
                        Private i32* %1756 = OpAccessChain %584 %88 
                                 i32 %1757 = OpLoad %1756 
                                bool %1758 = OpIEqual %1757 %32 
                                               OpSelectionMerge %1760 None 
                                               OpBranchConditional %1758 %1759 %1760 
                                     %1759 = OpLabel 
                               f32_3 %1761 = OpLoad %237 
                               f32_2 %1762 = OpVectorShuffle %1761 %1761 0 2 
                               f32_3 %1763 = OpLoad %249 
                               f32_3 %1764 = OpVectorShuffle %1763 %1762 3 1 4 
                                               OpStore %249 %1764 
                               f32_3 %1765 = OpLoad %249 
                               f32_2 %1766 = OpVectorShuffle %1765 %1765 0 2 
                               f32_2 %1767 = OpCompositeConstruct %18 %18 
                               f32_2 %1768 = OpCompositeConstruct %19 %19 
                               f32_2 %1769 = OpExtInst %1 43 %1766 %1767 %1768 
                               f32_3 %1770 = OpLoad %249 
                               f32_3 %1771 = OpVectorShuffle %1770 %1769 3 1 4 
                                               OpStore %249 %1771 
                               f32_3 %1772 = OpLoad %249 
                               f32_2 %1773 = OpVectorShuffle %1772 %1772 0 2 
                        Uniform f32* %1774 = OpAccessChain %30 %32 
                                 f32 %1775 = OpLoad %1774 
                               f32_2 %1776 = OpCompositeConstruct %1775 %1775 
                               f32_2 %1777 = OpFMul %1773 %1776 
                               f32_3 %1778 = OpLoad %249 
                               f32_3 %1779 = OpVectorShuffle %1778 %1777 3 1 4 
                                               OpStore %249 %1779 
                 read_only Texture2D %1780 = OpLoad %44 
                             sampler %1781 = OpLoad %48 
          read_only Texture2DSampled %1782 = OpSampledImage %1780 %1781 
                               f32_3 %1783 = OpLoad %249 
                               f32_2 %1784 = OpVectorShuffle %1783 %1783 0 2 
                               f32_4 %1785 = OpImageSampleExplicitLod %1782 %1784 Lod %27 
                                 f32 %1786 = OpCompositeExtract %1785 3 
                        Private f32* %1787 = OpAccessChain %119 %88 
                                               OpStore %1787 %1786 
                                               OpBranch %1760 
                                     %1760 = OpLabel 
                        Private i32* %1788 = OpAccessChain %584 %358 
                                 i32 %1789 = OpLoad %1788 
                                bool %1790 = OpIEqual %1789 %32 
                                               OpSelectionMerge %1792 None 
                                               OpBranchConditional %1790 %1791 %1792 
                                     %1791 = OpLabel 
                               f32_3 %1793 = OpLoad %484 
                               f32_2 %1794 = OpVectorShuffle %1793 %1793 0 2 
                               f32_3 %1795 = OpLoad %249 
                               f32_3 %1796 = OpVectorShuffle %1795 %1794 3 1 4 
                                               OpStore %249 %1796 
                               f32_3 %1797 = OpLoad %249 
                               f32_2 %1798 = OpVectorShuffle %1797 %1797 0 2 
                               f32_2 %1799 = OpCompositeConstruct %18 %18 
                               f32_2 %1800 = OpCompositeConstruct %19 %19 
                               f32_2 %1801 = OpExtInst %1 43 %1798 %1799 %1800 
                               f32_3 %1802 = OpLoad %249 
                               f32_3 %1803 = OpVectorShuffle %1802 %1801 3 1 4 
                                               OpStore %249 %1803 
                               f32_3 %1804 = OpLoad %249 
                               f32_2 %1805 = OpVectorShuffle %1804 %1804 0 2 
                        Uniform f32* %1806 = OpAccessChain %30 %32 
                                 f32 %1807 = OpLoad %1806 
                               f32_2 %1808 = OpCompositeConstruct %1807 %1807 
                               f32_2 %1809 = OpFMul %1805 %1808 
                               f32_3 %1810 = OpLoad %249 
                               f32_3 %1811 = OpVectorShuffle %1810 %1809 3 1 4 
                                               OpStore %249 %1811 
                 read_only Texture2D %1812 = OpLoad %44 
                             sampler %1813 = OpLoad %48 
          read_only Texture2DSampled %1814 = OpSampledImage %1812 %1813 
                               f32_3 %1815 = OpLoad %249 
                               f32_2 %1816 = OpVectorShuffle %1815 %1815 0 2 
                               f32_4 %1817 = OpImageSampleExplicitLod %1814 %1816 Lod %27 
                                 f32 %1818 = OpCompositeExtract %1817 3 
                        Private f32* %1819 = OpAccessChain %119 %358 
                                               OpStore %1819 %1818 
                                               OpBranch %1792 
                                     %1792 = OpLabel 
                                 f32 %1820 = OpLoad %56 
                                 f32 %1821 = OpFNegate %1820 
                                 f32 %1822 = OpFMul %1821 %448 
                        Private f32* %1823 = OpAccessChain %119 %88 
                                 f32 %1824 = OpLoad %1823 
                                 f32 %1825 = OpFAdd %1822 %1824 
                        Private f32* %1826 = OpAccessChain %249 %88 
                                               OpStore %1826 %1825 
                        Private i32* %1827 = OpAccessChain %584 %88 
                                 i32 %1828 = OpLoad %1827 
                                bool %1829 = OpINotEqual %1828 %32 
                                               OpSelectionMerge %1832 None 
                                               OpBranchConditional %1829 %1831 %1835 
                                     %1831 = OpLabel 
                        Private f32* %1833 = OpAccessChain %119 %88 
                                 f32 %1834 = OpLoad %1833 
                                               OpStore %1830 %1834 
                                               OpBranch %1832 
                                     %1835 = OpLabel 
                        Private f32* %1836 = OpAccessChain %249 %88 
                                 f32 %1837 = OpLoad %1836 
                                               OpStore %1830 %1837 
                                               OpBranch %1832 
                                     %1832 = OpLabel 
                                 f32 %1838 = OpLoad %1830 
                        Private f32* %1839 = OpAccessChain %119 %88 
                                               OpStore %1839 %1838 
                                 f32 %1840 = OpLoad %56 
                                 f32 %1841 = OpFNegate %1840 
                                 f32 %1842 = OpFMul %1841 %448 
                        Private f32* %1843 = OpAccessChain %119 %358 
                                 f32 %1844 = OpLoad %1843 
                                 f32 %1845 = OpFAdd %1842 %1844 
                        Private f32* %1846 = OpAccessChain %207 %88 
                                               OpStore %1846 %1845 
                        Private i32* %1847 = OpAccessChain %584 %358 
                                 i32 %1848 = OpLoad %1847 
                                bool %1849 = OpINotEqual %1848 %32 
                                               OpSelectionMerge %1852 None 
                                               OpBranchConditional %1849 %1851 %1855 
                                     %1851 = OpLabel 
                        Private f32* %1853 = OpAccessChain %119 %358 
                                 f32 %1854 = OpLoad %1853 
                                               OpStore %1850 %1854 
                                               OpBranch %1852 
                                     %1855 = OpLabel 
                        Private f32* %1856 = OpAccessChain %207 %88 
                                 f32 %1857 = OpLoad %1856 
                                               OpStore %1850 %1857 
                                               OpBranch %1852 
                                     %1852 = OpLabel 
                                 f32 %1858 = OpLoad %1850 
                        Private f32* %1859 = OpAccessChain %119 %358 
                                               OpStore %1859 %1858 
                               f32_2 %1860 = OpLoad %119 
                               f32_4 %1861 = OpVectorShuffle %1860 %1860 0 1 0 1 
                               f32_4 %1862 = OpExtInst %1 4 %1861 
                               f32_3 %1863 = OpLoad %78 
                               f32_4 %1864 = OpVectorShuffle %1863 %1863 0 0 0 0 
                              bool_4 %1865 = OpFOrdGreaterThanEqual %1862 %1864 
                              bool_2 %1866 = OpVectorShuffle %1865 %1865 0 1 
                               u32_2 %1867 = OpSelect %1866 %596 %595 
                               u32_2 %1868 = OpCompositeConstruct %567 %567 
                               u32_2 %1869 = OpIMul %1867 %1868 
                               i32_2 %1870 = OpBitcast %1869 
                                               OpStore %584 %1870 
                        Private f32* %1871 = OpAccessChain %100 %88 
                                 f32 %1872 = OpLoad %1871 
                                 f32 %1873 = OpFNegate %1872 
                                 f32 %1874 = OpFMul %1873 %276 
                        Private f32* %1875 = OpAccessChain %237 %88 
                                 f32 %1876 = OpLoad %1875 
                                 f32 %1877 = OpFAdd %1874 %1876 
                        Private f32* %1878 = OpAccessChain %249 %88 
                                               OpStore %1878 %1877 
                        Private i32* %1879 = OpAccessChain %584 %88 
                                 i32 %1880 = OpLoad %1879 
                                bool %1881 = OpINotEqual %1880 %32 
                                               OpSelectionMerge %1884 None 
                                               OpBranchConditional %1881 %1883 %1887 
                                     %1883 = OpLabel 
                        Private f32* %1885 = OpAccessChain %237 %88 
                                 f32 %1886 = OpLoad %1885 
                                               OpStore %1882 %1886 
                                               OpBranch %1884 
                                     %1887 = OpLabel 
                        Private f32* %1888 = OpAccessChain %249 %88 
                                 f32 %1889 = OpLoad %1888 
                                               OpStore %1882 %1889 
                                               OpBranch %1884 
                                     %1884 = OpLabel 
                                 f32 %1890 = OpLoad %1882 
                        Private f32* %1891 = OpAccessChain %237 %88 
                                               OpStore %1891 %1890 
                        Private f32* %1892 = OpAccessChain %100 %358 
                                 f32 %1893 = OpLoad %1892 
                                 f32 %1894 = OpFNegate %1893 
                                 f32 %1895 = OpFMul %1894 %276 
                        Private f32* %1896 = OpAccessChain %237 %642 
                                 f32 %1897 = OpLoad %1896 
                                 f32 %1898 = OpFAdd %1895 %1897 
                        Private f32* %1899 = OpAccessChain %249 %88 
                                               OpStore %1899 %1898 
                        Private i32* %1900 = OpAccessChain %584 %88 
                                 i32 %1901 = OpLoad %1900 
                                bool %1902 = OpINotEqual %1901 %32 
                                               OpSelectionMerge %1905 None 
                                               OpBranchConditional %1902 %1904 %1908 
                                     %1904 = OpLabel 
                        Private f32* %1906 = OpAccessChain %237 %642 
                                 f32 %1907 = OpLoad %1906 
                                               OpStore %1903 %1907 
                                               OpBranch %1905 
                                     %1908 = OpLabel 
                        Private f32* %1909 = OpAccessChain %249 %88 
                                 f32 %1910 = OpLoad %1909 
                                               OpStore %1903 %1910 
                                               OpBranch %1905 
                                     %1905 = OpLabel 
                                 f32 %1911 = OpLoad %1903 
                        Private f32* %1912 = OpAccessChain %237 %642 
                                               OpStore %1912 %1911 
                               i32_2 %1913 = OpLoad %584 
                               i32_2 %1914 = OpNot %1913 
                               i32_3 %1915 = OpLoad %646 
                               i32_3 %1916 = OpVectorShuffle %1915 %1914 3 1 4 
                                               OpStore %646 %1916 
                        Private i32* %1917 = OpAccessChain %646 %642 
                                 i32 %1918 = OpLoad %1917 
                                 u32 %1919 = OpBitcast %1918 
                        Private i32* %1920 = OpAccessChain %646 %88 
                                 i32 %1921 = OpLoad %1920 
                                 u32 %1922 = OpBitcast %1921 
                                 u32 %1923 = OpBitwiseOr %1919 %1922 
                                 i32 %1924 = OpBitcast %1923 
                        Private i32* %1925 = OpAccessChain %646 %88 
                                               OpStore %1925 %1924 
                        Private f32* %1926 = OpAccessChain %100 %88 
                                 f32 %1927 = OpLoad %1926 
                                 f32 %1928 = OpFMul %1927 %276 
                        Private f32* %1929 = OpAccessChain %484 %88 
                                 f32 %1930 = OpLoad %1929 
                                 f32 %1931 = OpFAdd %1928 %1930 
                                               OpStore %623 %1931 
                        Private i32* %1932 = OpAccessChain %584 %358 
                                 i32 %1933 = OpLoad %1932 
                                bool %1934 = OpINotEqual %1933 %32 
                                               OpSelectionMerge %1937 None 
                                               OpBranchConditional %1934 %1936 %1940 
                                     %1936 = OpLabel 
                        Private f32* %1938 = OpAccessChain %484 %88 
                                 f32 %1939 = OpLoad %1938 
                                               OpStore %1935 %1939 
                                               OpBranch %1937 
                                     %1940 = OpLabel 
                                 f32 %1941 = OpLoad %623 
                                               OpStore %1935 %1941 
                                               OpBranch %1937 
                                     %1937 = OpLabel 
                                 f32 %1942 = OpLoad %1935 
                        Private f32* %1943 = OpAccessChain %484 %88 
                                               OpStore %1943 %1942 
                        Private f32* %1944 = OpAccessChain %100 %358 
                                 f32 %1945 = OpLoad %1944 
                                 f32 %1946 = OpFMul %1945 %276 
                        Private f32* %1947 = OpAccessChain %484 %642 
                                 f32 %1948 = OpLoad %1947 
                                 f32 %1949 = OpFAdd %1946 %1948 
                                               OpStore %623 %1949 
                        Private i32* %1950 = OpAccessChain %584 %358 
                                 i32 %1951 = OpLoad %1950 
                                bool %1952 = OpINotEqual %1951 %32 
                                               OpSelectionMerge %1955 None 
                                               OpBranchConditional %1952 %1954 %1958 
                                     %1954 = OpLabel 
                        Private f32* %1956 = OpAccessChain %484 %642 
                                 f32 %1957 = OpLoad %1956 
                                               OpStore %1953 %1957 
                                               OpBranch %1955 
                                     %1958 = OpLabel 
                                 f32 %1959 = OpLoad %623 
                                               OpStore %1953 %1959 
                                               OpBranch %1955 
                                     %1955 = OpLabel 
                                 f32 %1960 = OpLoad %1953 
                        Private f32* %1961 = OpAccessChain %484 %642 
                                               OpStore %1961 %1960 
                        Private i32* %1962 = OpAccessChain %646 %88 
                                 i32 %1963 = OpLoad %1962 
                                bool %1964 = OpINotEqual %1963 %32 
                                               OpSelectionMerge %1966 None 
                                               OpBranchConditional %1964 %1965 %1966 
                                     %1965 = OpLabel 
                        Private i32* %1967 = OpAccessChain %584 %88 
                                 i32 %1968 = OpLoad %1967 
                                bool %1969 = OpIEqual %1968 %32 
                                               OpSelectionMerge %1971 None 
                                               OpBranchConditional %1969 %1970 %1971 
                                     %1970 = OpLabel 
                               f32_3 %1972 = OpLoad %237 
                               f32_2 %1973 = OpVectorShuffle %1972 %1972 0 2 
                               f32_3 %1974 = OpLoad %249 
                               f32_3 %1975 = OpVectorShuffle %1974 %1973 3 1 4 
                                               OpStore %249 %1975 
                               f32_3 %1976 = OpLoad %249 
                               f32_2 %1977 = OpVectorShuffle %1976 %1976 0 2 
                               f32_2 %1978 = OpCompositeConstruct %18 %18 
                               f32_2 %1979 = OpCompositeConstruct %19 %19 
                               f32_2 %1980 = OpExtInst %1 43 %1977 %1978 %1979 
                               f32_3 %1981 = OpLoad %249 
                               f32_3 %1982 = OpVectorShuffle %1981 %1980 3 1 4 
                                               OpStore %249 %1982 
                               f32_3 %1983 = OpLoad %249 
                               f32_2 %1984 = OpVectorShuffle %1983 %1983 0 2 
                        Uniform f32* %1985 = OpAccessChain %30 %32 
                                 f32 %1986 = OpLoad %1985 
                               f32_2 %1987 = OpCompositeConstruct %1986 %1986 
                               f32_2 %1988 = OpFMul %1984 %1987 
                               f32_3 %1989 = OpLoad %249 
                               f32_3 %1990 = OpVectorShuffle %1989 %1988 3 1 4 
                                               OpStore %249 %1990 
                 read_only Texture2D %1991 = OpLoad %44 
                             sampler %1992 = OpLoad %48 
          read_only Texture2DSampled %1993 = OpSampledImage %1991 %1992 
                               f32_3 %1994 = OpLoad %249 
                               f32_2 %1995 = OpVectorShuffle %1994 %1994 0 2 
                               f32_4 %1996 = OpImageSampleExplicitLod %1993 %1995 Lod %27 
                                 f32 %1997 = OpCompositeExtract %1996 3 
                        Private f32* %1998 = OpAccessChain %119 %88 
                                               OpStore %1998 %1997 
                                               OpBranch %1971 
                                     %1971 = OpLabel 
                        Private i32* %1999 = OpAccessChain %584 %358 
                                 i32 %2000 = OpLoad %1999 
                                bool %2001 = OpIEqual %2000 %32 
                                               OpSelectionMerge %2003 None 
                                               OpBranchConditional %2001 %2002 %2003 
                                     %2002 = OpLabel 
                               f32_3 %2004 = OpLoad %484 
                               f32_2 %2005 = OpVectorShuffle %2004 %2004 0 2 
                               f32_3 %2006 = OpLoad %249 
                               f32_3 %2007 = OpVectorShuffle %2006 %2005 3 1 4 
                                               OpStore %249 %2007 
                               f32_3 %2008 = OpLoad %249 
                               f32_2 %2009 = OpVectorShuffle %2008 %2008 0 2 
                               f32_2 %2010 = OpCompositeConstruct %18 %18 
                               f32_2 %2011 = OpCompositeConstruct %19 %19 
                               f32_2 %2012 = OpExtInst %1 43 %2009 %2010 %2011 
                               f32_3 %2013 = OpLoad %249 
                               f32_3 %2014 = OpVectorShuffle %2013 %2012 3 1 4 
                                               OpStore %249 %2014 
                               f32_3 %2015 = OpLoad %249 
                               f32_2 %2016 = OpVectorShuffle %2015 %2015 0 2 
                        Uniform f32* %2017 = OpAccessChain %30 %32 
                                 f32 %2018 = OpLoad %2017 
                               f32_2 %2019 = OpCompositeConstruct %2018 %2018 
                               f32_2 %2020 = OpFMul %2016 %2019 
                               f32_3 %2021 = OpLoad %249 
                               f32_3 %2022 = OpVectorShuffle %2021 %2020 3 1 4 
                                               OpStore %249 %2022 
                 read_only Texture2D %2023 = OpLoad %44 
                             sampler %2024 = OpLoad %48 
          read_only Texture2DSampled %2025 = OpSampledImage %2023 %2024 
                               f32_3 %2026 = OpLoad %249 
                               f32_2 %2027 = OpVectorShuffle %2026 %2026 0 2 
                               f32_4 %2028 = OpImageSampleExplicitLod %2025 %2027 Lod %27 
                                 f32 %2029 = OpCompositeExtract %2028 3 
                        Private f32* %2030 = OpAccessChain %119 %358 
                                               OpStore %2030 %2029 
                                               OpBranch %2003 
                                     %2003 = OpLabel 
                                 f32 %2031 = OpLoad %56 
                                 f32 %2032 = OpFNegate %2031 
                                 f32 %2033 = OpFMul %2032 %448 
                        Private f32* %2034 = OpAccessChain %119 %88 
                                 f32 %2035 = OpLoad %2034 
                                 f32 %2036 = OpFAdd %2033 %2035 
                        Private f32* %2037 = OpAccessChain %249 %88 
                                               OpStore %2037 %2036 
                        Private i32* %2038 = OpAccessChain %584 %88 
                                 i32 %2039 = OpLoad %2038 
                                bool %2040 = OpINotEqual %2039 %32 
                                               OpSelectionMerge %2043 None 
                                               OpBranchConditional %2040 %2042 %2046 
                                     %2042 = OpLabel 
                        Private f32* %2044 = OpAccessChain %119 %88 
                                 f32 %2045 = OpLoad %2044 
                                               OpStore %2041 %2045 
                                               OpBranch %2043 
                                     %2046 = OpLabel 
                        Private f32* %2047 = OpAccessChain %249 %88 
                                 f32 %2048 = OpLoad %2047 
                                               OpStore %2041 %2048 
                                               OpBranch %2043 
                                     %2043 = OpLabel 
                                 f32 %2049 = OpLoad %2041 
                        Private f32* %2050 = OpAccessChain %119 %88 
                                               OpStore %2050 %2049 
                                 f32 %2051 = OpLoad %56 
                                 f32 %2052 = OpFNegate %2051 
                                 f32 %2053 = OpFMul %2052 %448 
                        Private f32* %2054 = OpAccessChain %119 %358 
                                 f32 %2055 = OpLoad %2054 
                                 f32 %2056 = OpFAdd %2053 %2055 
                        Private f32* %2057 = OpAccessChain %207 %88 
                                               OpStore %2057 %2056 
                        Private i32* %2058 = OpAccessChain %584 %358 
                                 i32 %2059 = OpLoad %2058 
                                bool %2060 = OpINotEqual %2059 %32 
                                               OpSelectionMerge %2063 None 
                                               OpBranchConditional %2060 %2062 %2066 
                                     %2062 = OpLabel 
                        Private f32* %2064 = OpAccessChain %119 %358 
                                 f32 %2065 = OpLoad %2064 
                                               OpStore %2061 %2065 
                                               OpBranch %2063 
                                     %2066 = OpLabel 
                        Private f32* %2067 = OpAccessChain %207 %88 
                                 f32 %2068 = OpLoad %2067 
                                               OpStore %2061 %2068 
                                               OpBranch %2063 
                                     %2063 = OpLabel 
                                 f32 %2069 = OpLoad %2061 
                        Private f32* %2070 = OpAccessChain %119 %358 
                                               OpStore %2070 %2069 
                               f32_2 %2071 = OpLoad %119 
                               f32_4 %2072 = OpVectorShuffle %2071 %2071 0 1 0 1 
                               f32_4 %2073 = OpExtInst %1 4 %2072 
                               f32_3 %2074 = OpLoad %78 
                               f32_4 %2075 = OpVectorShuffle %2074 %2074 0 0 0 0 
                              bool_4 %2076 = OpFOrdGreaterThanEqual %2073 %2075 
                              bool_2 %2077 = OpVectorShuffle %2076 %2076 0 1 
                               u32_2 %2078 = OpSelect %2077 %596 %595 
                               u32_2 %2079 = OpCompositeConstruct %567 %567 
                               u32_2 %2080 = OpIMul %2078 %2079 
                               i32_2 %2081 = OpBitcast %2080 
                                               OpStore %584 %2081 
                        Private f32* %2082 = OpAccessChain %100 %88 
                                 f32 %2083 = OpLoad %2082 
                                 f32 %2084 = OpFNegate %2083 
                                 f32 %2085 = OpFMul %2084 %276 
                        Private f32* %2086 = OpAccessChain %237 %88 
                                 f32 %2087 = OpLoad %2086 
                                 f32 %2088 = OpFAdd %2085 %2087 
                        Private f32* %2089 = OpAccessChain %249 %88 
                                               OpStore %2089 %2088 
                        Private i32* %2090 = OpAccessChain %584 %88 
                                 i32 %2091 = OpLoad %2090 
                                bool %2092 = OpINotEqual %2091 %32 
                                               OpSelectionMerge %2095 None 
                                               OpBranchConditional %2092 %2094 %2098 
                                     %2094 = OpLabel 
                        Private f32* %2096 = OpAccessChain %237 %88 
                                 f32 %2097 = OpLoad %2096 
                                               OpStore %2093 %2097 
                                               OpBranch %2095 
                                     %2098 = OpLabel 
                        Private f32* %2099 = OpAccessChain %249 %88 
                                 f32 %2100 = OpLoad %2099 
                                               OpStore %2093 %2100 
                                               OpBranch %2095 
                                     %2095 = OpLabel 
                                 f32 %2101 = OpLoad %2093 
                        Private f32* %2102 = OpAccessChain %237 %88 
                                               OpStore %2102 %2101 
                        Private f32* %2103 = OpAccessChain %100 %358 
                                 f32 %2104 = OpLoad %2103 
                                 f32 %2105 = OpFNegate %2104 
                                 f32 %2106 = OpFMul %2105 %276 
                        Private f32* %2107 = OpAccessChain %237 %642 
                                 f32 %2108 = OpLoad %2107 
                                 f32 %2109 = OpFAdd %2106 %2108 
                        Private f32* %2110 = OpAccessChain %249 %88 
                                               OpStore %2110 %2109 
                        Private i32* %2111 = OpAccessChain %584 %88 
                                 i32 %2112 = OpLoad %2111 
                                bool %2113 = OpINotEqual %2112 %32 
                                               OpSelectionMerge %2116 None 
                                               OpBranchConditional %2113 %2115 %2119 
                                     %2115 = OpLabel 
                        Private f32* %2117 = OpAccessChain %237 %642 
                                 f32 %2118 = OpLoad %2117 
                                               OpStore %2114 %2118 
                                               OpBranch %2116 
                                     %2119 = OpLabel 
                        Private f32* %2120 = OpAccessChain %249 %88 
                                 f32 %2121 = OpLoad %2120 
                                               OpStore %2114 %2121 
                                               OpBranch %2116 
                                     %2116 = OpLabel 
                                 f32 %2122 = OpLoad %2114 
                        Private f32* %2123 = OpAccessChain %237 %642 
                                               OpStore %2123 %2122 
                               i32_2 %2124 = OpLoad %584 
                               i32_2 %2125 = OpNot %2124 
                               i32_3 %2126 = OpLoad %646 
                               i32_3 %2127 = OpVectorShuffle %2126 %2125 3 1 4 
                                               OpStore %646 %2127 
                        Private i32* %2128 = OpAccessChain %646 %642 
                                 i32 %2129 = OpLoad %2128 
                                 u32 %2130 = OpBitcast %2129 
                        Private i32* %2131 = OpAccessChain %646 %88 
                                 i32 %2132 = OpLoad %2131 
                                 u32 %2133 = OpBitcast %2132 
                                 u32 %2134 = OpBitwiseOr %2130 %2133 
                                 i32 %2135 = OpBitcast %2134 
                        Private i32* %2136 = OpAccessChain %646 %88 
                                               OpStore %2136 %2135 
                        Private f32* %2137 = OpAccessChain %100 %88 
                                 f32 %2138 = OpLoad %2137 
                                 f32 %2139 = OpFMul %2138 %276 
                        Private f32* %2140 = OpAccessChain %484 %88 
                                 f32 %2141 = OpLoad %2140 
                                 f32 %2142 = OpFAdd %2139 %2141 
                                               OpStore %623 %2142 
                        Private i32* %2143 = OpAccessChain %584 %358 
                                 i32 %2144 = OpLoad %2143 
                                bool %2145 = OpINotEqual %2144 %32 
                                               OpSelectionMerge %2148 None 
                                               OpBranchConditional %2145 %2147 %2151 
                                     %2147 = OpLabel 
                        Private f32* %2149 = OpAccessChain %484 %88 
                                 f32 %2150 = OpLoad %2149 
                                               OpStore %2146 %2150 
                                               OpBranch %2148 
                                     %2151 = OpLabel 
                                 f32 %2152 = OpLoad %623 
                                               OpStore %2146 %2152 
                                               OpBranch %2148 
                                     %2148 = OpLabel 
                                 f32 %2153 = OpLoad %2146 
                        Private f32* %2154 = OpAccessChain %484 %88 
                                               OpStore %2154 %2153 
                        Private f32* %2155 = OpAccessChain %100 %358 
                                 f32 %2156 = OpLoad %2155 
                                 f32 %2157 = OpFMul %2156 %276 
                        Private f32* %2158 = OpAccessChain %484 %642 
                                 f32 %2159 = OpLoad %2158 
                                 f32 %2160 = OpFAdd %2157 %2159 
                                               OpStore %623 %2160 
                        Private i32* %2161 = OpAccessChain %584 %358 
                                 i32 %2162 = OpLoad %2161 
                                bool %2163 = OpINotEqual %2162 %32 
                                               OpSelectionMerge %2166 None 
                                               OpBranchConditional %2163 %2165 %2169 
                                     %2165 = OpLabel 
                        Private f32* %2167 = OpAccessChain %484 %642 
                                 f32 %2168 = OpLoad %2167 
                                               OpStore %2164 %2168 
                                               OpBranch %2166 
                                     %2169 = OpLabel 
                                 f32 %2170 = OpLoad %623 
                                               OpStore %2164 %2170 
                                               OpBranch %2166 
                                     %2166 = OpLabel 
                                 f32 %2171 = OpLoad %2164 
                        Private f32* %2172 = OpAccessChain %484 %642 
                                               OpStore %2172 %2171 
                        Private i32* %2173 = OpAccessChain %646 %88 
                                 i32 %2174 = OpLoad %2173 
                                bool %2175 = OpINotEqual %2174 %32 
                                               OpSelectionMerge %2177 None 
                                               OpBranchConditional %2175 %2176 %2177 
                                     %2176 = OpLabel 
                        Private i32* %2178 = OpAccessChain %584 %88 
                                 i32 %2179 = OpLoad %2178 
                                bool %2180 = OpIEqual %2179 %32 
                                               OpSelectionMerge %2182 None 
                                               OpBranchConditional %2180 %2181 %2182 
                                     %2181 = OpLabel 
                               f32_3 %2183 = OpLoad %237 
                               f32_2 %2184 = OpVectorShuffle %2183 %2183 0 2 
                               f32_3 %2185 = OpLoad %249 
                               f32_3 %2186 = OpVectorShuffle %2185 %2184 3 1 4 
                                               OpStore %249 %2186 
                               f32_3 %2187 = OpLoad %249 
                               f32_2 %2188 = OpVectorShuffle %2187 %2187 0 2 
                               f32_2 %2189 = OpCompositeConstruct %18 %18 
                               f32_2 %2190 = OpCompositeConstruct %19 %19 
                               f32_2 %2191 = OpExtInst %1 43 %2188 %2189 %2190 
                               f32_3 %2192 = OpLoad %249 
                               f32_3 %2193 = OpVectorShuffle %2192 %2191 3 1 4 
                                               OpStore %249 %2193 
                               f32_3 %2194 = OpLoad %249 
                               f32_2 %2195 = OpVectorShuffle %2194 %2194 0 2 
                        Uniform f32* %2196 = OpAccessChain %30 %32 
                                 f32 %2197 = OpLoad %2196 
                               f32_2 %2198 = OpCompositeConstruct %2197 %2197 
                               f32_2 %2199 = OpFMul %2195 %2198 
                               f32_3 %2200 = OpLoad %249 
                               f32_3 %2201 = OpVectorShuffle %2200 %2199 3 1 4 
                                               OpStore %249 %2201 
                 read_only Texture2D %2202 = OpLoad %44 
                             sampler %2203 = OpLoad %48 
          read_only Texture2DSampled %2204 = OpSampledImage %2202 %2203 
                               f32_3 %2205 = OpLoad %249 
                               f32_2 %2206 = OpVectorShuffle %2205 %2205 0 2 
                               f32_4 %2207 = OpImageSampleExplicitLod %2204 %2206 Lod %27 
                                 f32 %2208 = OpCompositeExtract %2207 3 
                        Private f32* %2209 = OpAccessChain %119 %88 
                                               OpStore %2209 %2208 
                                               OpBranch %2182 
                                     %2182 = OpLabel 
                        Private i32* %2210 = OpAccessChain %584 %358 
                                 i32 %2211 = OpLoad %2210 
                                bool %2212 = OpIEqual %2211 %32 
                                               OpSelectionMerge %2214 None 
                                               OpBranchConditional %2212 %2213 %2214 
                                     %2213 = OpLabel 
                               f32_3 %2215 = OpLoad %484 
                               f32_2 %2216 = OpVectorShuffle %2215 %2215 0 2 
                               f32_3 %2217 = OpLoad %249 
                               f32_3 %2218 = OpVectorShuffle %2217 %2216 3 1 4 
                                               OpStore %249 %2218 
                               f32_3 %2219 = OpLoad %249 
                               f32_2 %2220 = OpVectorShuffle %2219 %2219 0 2 
                               f32_2 %2221 = OpCompositeConstruct %18 %18 
                               f32_2 %2222 = OpCompositeConstruct %19 %19 
                               f32_2 %2223 = OpExtInst %1 43 %2220 %2221 %2222 
                               f32_3 %2224 = OpLoad %249 
                               f32_3 %2225 = OpVectorShuffle %2224 %2223 3 1 4 
                                               OpStore %249 %2225 
                               f32_3 %2226 = OpLoad %249 
                               f32_2 %2227 = OpVectorShuffle %2226 %2226 0 2 
                        Uniform f32* %2228 = OpAccessChain %30 %32 
                                 f32 %2229 = OpLoad %2228 
                               f32_2 %2230 = OpCompositeConstruct %2229 %2229 
                               f32_2 %2231 = OpFMul %2227 %2230 
                               f32_3 %2232 = OpLoad %249 
                               f32_3 %2233 = OpVectorShuffle %2232 %2231 3 1 4 
                                               OpStore %249 %2233 
                 read_only Texture2D %2234 = OpLoad %44 
                             sampler %2235 = OpLoad %48 
          read_only Texture2DSampled %2236 = OpSampledImage %2234 %2235 
                               f32_3 %2237 = OpLoad %249 
                               f32_2 %2238 = OpVectorShuffle %2237 %2237 0 2 
                               f32_4 %2239 = OpImageSampleExplicitLod %2236 %2238 Lod %27 
                                 f32 %2240 = OpCompositeExtract %2239 3 
                        Private f32* %2241 = OpAccessChain %119 %358 
                                               OpStore %2241 %2240 
                                               OpBranch %2214 
                                     %2214 = OpLabel 
                                 f32 %2242 = OpLoad %56 
                                 f32 %2243 = OpFNegate %2242 
                                 f32 %2244 = OpFMul %2243 %448 
                        Private f32* %2245 = OpAccessChain %119 %88 
                                 f32 %2246 = OpLoad %2245 
                                 f32 %2247 = OpFAdd %2244 %2246 
                        Private f32* %2248 = OpAccessChain %249 %88 
                                               OpStore %2248 %2247 
                        Private i32* %2249 = OpAccessChain %584 %88 
                                 i32 %2250 = OpLoad %2249 
                                bool %2251 = OpINotEqual %2250 %32 
                                               OpSelectionMerge %2254 None 
                                               OpBranchConditional %2251 %2253 %2257 
                                     %2253 = OpLabel 
                        Private f32* %2255 = OpAccessChain %119 %88 
                                 f32 %2256 = OpLoad %2255 
                                               OpStore %2252 %2256 
                                               OpBranch %2254 
                                     %2257 = OpLabel 
                        Private f32* %2258 = OpAccessChain %249 %88 
                                 f32 %2259 = OpLoad %2258 
                                               OpStore %2252 %2259 
                                               OpBranch %2254 
                                     %2254 = OpLabel 
                                 f32 %2260 = OpLoad %2252 
                        Private f32* %2261 = OpAccessChain %119 %88 
                                               OpStore %2261 %2260 
                                 f32 %2262 = OpLoad %56 
                                 f32 %2263 = OpFNegate %2262 
                                 f32 %2264 = OpFMul %2263 %448 
                        Private f32* %2265 = OpAccessChain %119 %358 
                                 f32 %2266 = OpLoad %2265 
                                 f32 %2267 = OpFAdd %2264 %2266 
                        Private f32* %2268 = OpAccessChain %207 %88 
                                               OpStore %2268 %2267 
                        Private i32* %2269 = OpAccessChain %584 %358 
                                 i32 %2270 = OpLoad %2269 
                                bool %2271 = OpINotEqual %2270 %32 
                                               OpSelectionMerge %2274 None 
                                               OpBranchConditional %2271 %2273 %2277 
                                     %2273 = OpLabel 
                        Private f32* %2275 = OpAccessChain %119 %358 
                                 f32 %2276 = OpLoad %2275 
                                               OpStore %2272 %2276 
                                               OpBranch %2274 
                                     %2277 = OpLabel 
                        Private f32* %2278 = OpAccessChain %207 %88 
                                 f32 %2279 = OpLoad %2278 
                                               OpStore %2272 %2279 
                                               OpBranch %2274 
                                     %2274 = OpLabel 
                                 f32 %2280 = OpLoad %2272 
                        Private f32* %2281 = OpAccessChain %119 %358 
                                               OpStore %2281 %2280 
                               f32_2 %2282 = OpLoad %119 
                               f32_4 %2283 = OpVectorShuffle %2282 %2282 0 1 0 1 
                               f32_4 %2284 = OpExtInst %1 4 %2283 
                               f32_3 %2285 = OpLoad %78 
                               f32_4 %2286 = OpVectorShuffle %2285 %2285 0 0 0 0 
                              bool_4 %2287 = OpFOrdGreaterThanEqual %2284 %2286 
                              bool_2 %2288 = OpVectorShuffle %2287 %2287 0 1 
                               u32_2 %2289 = OpSelect %2288 %596 %595 
                               u32_2 %2290 = OpCompositeConstruct %567 %567 
                               u32_2 %2291 = OpIMul %2289 %2290 
                               i32_2 %2292 = OpBitcast %2291 
                                               OpStore %584 %2292 
                        Private f32* %2293 = OpAccessChain %100 %88 
                                 f32 %2294 = OpLoad %2293 
                                 f32 %2295 = OpFNegate %2294 
                                 f32 %2297 = OpFMul %2295 %2296 
                        Private f32* %2298 = OpAccessChain %237 %88 
                                 f32 %2299 = OpLoad %2298 
                                 f32 %2300 = OpFAdd %2297 %2299 
                        Private f32* %2301 = OpAccessChain %249 %88 
                                               OpStore %2301 %2300 
                        Private i32* %2302 = OpAccessChain %584 %88 
                                 i32 %2303 = OpLoad %2302 
                                bool %2304 = OpINotEqual %2303 %32 
                                               OpSelectionMerge %2307 None 
                                               OpBranchConditional %2304 %2306 %2310 
                                     %2306 = OpLabel 
                        Private f32* %2308 = OpAccessChain %237 %88 
                                 f32 %2309 = OpLoad %2308 
                                               OpStore %2305 %2309 
                                               OpBranch %2307 
                                     %2310 = OpLabel 
                        Private f32* %2311 = OpAccessChain %249 %88 
                                 f32 %2312 = OpLoad %2311 
                                               OpStore %2305 %2312 
                                               OpBranch %2307 
                                     %2307 = OpLabel 
                                 f32 %2313 = OpLoad %2305 
                        Private f32* %2314 = OpAccessChain %237 %88 
                                               OpStore %2314 %2313 
                        Private f32* %2315 = OpAccessChain %100 %358 
                                 f32 %2316 = OpLoad %2315 
                                 f32 %2317 = OpFNegate %2316 
                                 f32 %2318 = OpFMul %2317 %2296 
                        Private f32* %2319 = OpAccessChain %237 %642 
                                 f32 %2320 = OpLoad %2319 
                                 f32 %2321 = OpFAdd %2318 %2320 
                        Private f32* %2322 = OpAccessChain %249 %88 
                                               OpStore %2322 %2321 
                        Private i32* %2323 = OpAccessChain %584 %88 
                                 i32 %2324 = OpLoad %2323 
                                bool %2325 = OpINotEqual %2324 %32 
                                               OpSelectionMerge %2328 None 
                                               OpBranchConditional %2325 %2327 %2331 
                                     %2327 = OpLabel 
                        Private f32* %2329 = OpAccessChain %237 %642 
                                 f32 %2330 = OpLoad %2329 
                                               OpStore %2326 %2330 
                                               OpBranch %2328 
                                     %2331 = OpLabel 
                        Private f32* %2332 = OpAccessChain %249 %88 
                                 f32 %2333 = OpLoad %2332 
                                               OpStore %2326 %2333 
                                               OpBranch %2328 
                                     %2328 = OpLabel 
                                 f32 %2334 = OpLoad %2326 
                        Private f32* %2335 = OpAccessChain %237 %642 
                                               OpStore %2335 %2334 
                               i32_2 %2336 = OpLoad %584 
                               i32_2 %2337 = OpNot %2336 
                               i32_3 %2338 = OpLoad %646 
                               i32_3 %2339 = OpVectorShuffle %2338 %2337 3 1 4 
                                               OpStore %646 %2339 
                        Private i32* %2340 = OpAccessChain %646 %642 
                                 i32 %2341 = OpLoad %2340 
                                 u32 %2342 = OpBitcast %2341 
                        Private i32* %2343 = OpAccessChain %646 %88 
                                 i32 %2344 = OpLoad %2343 
                                 u32 %2345 = OpBitcast %2344 
                                 u32 %2346 = OpBitwiseOr %2342 %2345 
                                 i32 %2347 = OpBitcast %2346 
                        Private i32* %2348 = OpAccessChain %646 %88 
                                               OpStore %2348 %2347 
                        Private f32* %2349 = OpAccessChain %100 %88 
                                 f32 %2350 = OpLoad %2349 
                                 f32 %2351 = OpFMul %2350 %2296 
                        Private f32* %2352 = OpAccessChain %484 %88 
                                 f32 %2353 = OpLoad %2352 
                                 f32 %2354 = OpFAdd %2351 %2353 
                                               OpStore %623 %2354 
                        Private i32* %2355 = OpAccessChain %584 %358 
                                 i32 %2356 = OpLoad %2355 
                                bool %2357 = OpINotEqual %2356 %32 
                                               OpSelectionMerge %2360 None 
                                               OpBranchConditional %2357 %2359 %2363 
                                     %2359 = OpLabel 
                        Private f32* %2361 = OpAccessChain %484 %88 
                                 f32 %2362 = OpLoad %2361 
                                               OpStore %2358 %2362 
                                               OpBranch %2360 
                                     %2363 = OpLabel 
                                 f32 %2364 = OpLoad %623 
                                               OpStore %2358 %2364 
                                               OpBranch %2360 
                                     %2360 = OpLabel 
                                 f32 %2365 = OpLoad %2358 
                        Private f32* %2366 = OpAccessChain %484 %88 
                                               OpStore %2366 %2365 
                        Private f32* %2367 = OpAccessChain %100 %358 
                                 f32 %2368 = OpLoad %2367 
                                 f32 %2369 = OpFMul %2368 %2296 
                        Private f32* %2370 = OpAccessChain %484 %642 
                                 f32 %2371 = OpLoad %2370 
                                 f32 %2372 = OpFAdd %2369 %2371 
                                               OpStore %623 %2372 
                        Private i32* %2373 = OpAccessChain %584 %358 
                                 i32 %2374 = OpLoad %2373 
                                bool %2375 = OpINotEqual %2374 %32 
                                               OpSelectionMerge %2378 None 
                                               OpBranchConditional %2375 %2377 %2381 
                                     %2377 = OpLabel 
                        Private f32* %2379 = OpAccessChain %484 %642 
                                 f32 %2380 = OpLoad %2379 
                                               OpStore %2376 %2380 
                                               OpBranch %2378 
                                     %2381 = OpLabel 
                                 f32 %2382 = OpLoad %623 
                                               OpStore %2376 %2382 
                                               OpBranch %2378 
                                     %2378 = OpLabel 
                                 f32 %2383 = OpLoad %2376 
                        Private f32* %2384 = OpAccessChain %484 %642 
                                               OpStore %2384 %2383 
                        Private i32* %2385 = OpAccessChain %646 %88 
                                 i32 %2386 = OpLoad %2385 
                                bool %2387 = OpINotEqual %2386 %32 
                                               OpSelectionMerge %2389 None 
                                               OpBranchConditional %2387 %2388 %2389 
                                     %2388 = OpLabel 
                        Private i32* %2390 = OpAccessChain %584 %88 
                                 i32 %2391 = OpLoad %2390 
                                bool %2392 = OpIEqual %2391 %32 
                                               OpSelectionMerge %2394 None 
                                               OpBranchConditional %2392 %2393 %2394 
                                     %2393 = OpLabel 
                               f32_3 %2395 = OpLoad %237 
                               f32_2 %2396 = OpVectorShuffle %2395 %2395 0 2 
                               f32_3 %2397 = OpLoad %249 
                               f32_3 %2398 = OpVectorShuffle %2397 %2396 3 1 4 
                                               OpStore %249 %2398 
                               f32_3 %2399 = OpLoad %249 
                               f32_2 %2400 = OpVectorShuffle %2399 %2399 0 2 
                               f32_2 %2401 = OpCompositeConstruct %18 %18 
                               f32_2 %2402 = OpCompositeConstruct %19 %19 
                               f32_2 %2403 = OpExtInst %1 43 %2400 %2401 %2402 
                               f32_3 %2404 = OpLoad %249 
                               f32_3 %2405 = OpVectorShuffle %2404 %2403 3 1 4 
                                               OpStore %249 %2405 
                               f32_3 %2406 = OpLoad %249 
                               f32_2 %2407 = OpVectorShuffle %2406 %2406 0 2 
                        Uniform f32* %2408 = OpAccessChain %30 %32 
                                 f32 %2409 = OpLoad %2408 
                               f32_2 %2410 = OpCompositeConstruct %2409 %2409 
                               f32_2 %2411 = OpFMul %2407 %2410 
                               f32_3 %2412 = OpLoad %249 
                               f32_3 %2413 = OpVectorShuffle %2412 %2411 3 1 4 
                                               OpStore %249 %2413 
                 read_only Texture2D %2414 = OpLoad %44 
                             sampler %2415 = OpLoad %48 
          read_only Texture2DSampled %2416 = OpSampledImage %2414 %2415 
                               f32_3 %2417 = OpLoad %249 
                               f32_2 %2418 = OpVectorShuffle %2417 %2417 0 2 
                               f32_4 %2419 = OpImageSampleExplicitLod %2416 %2418 Lod %27 
                                 f32 %2420 = OpCompositeExtract %2419 3 
                        Private f32* %2421 = OpAccessChain %119 %88 
                                               OpStore %2421 %2420 
                                               OpBranch %2394 
                                     %2394 = OpLabel 
                        Private i32* %2422 = OpAccessChain %584 %358 
                                 i32 %2423 = OpLoad %2422 
                                bool %2424 = OpIEqual %2423 %32 
                                               OpSelectionMerge %2426 None 
                                               OpBranchConditional %2424 %2425 %2426 
                                     %2425 = OpLabel 
                               f32_3 %2427 = OpLoad %484 
                               f32_2 %2428 = OpVectorShuffle %2427 %2427 0 2 
                               f32_3 %2429 = OpLoad %249 
                               f32_3 %2430 = OpVectorShuffle %2429 %2428 3 1 4 
                                               OpStore %249 %2430 
                               f32_3 %2431 = OpLoad %249 
                               f32_2 %2432 = OpVectorShuffle %2431 %2431 0 2 
                               f32_2 %2433 = OpCompositeConstruct %18 %18 
                               f32_2 %2434 = OpCompositeConstruct %19 %19 
                               f32_2 %2435 = OpExtInst %1 43 %2432 %2433 %2434 
                               f32_3 %2436 = OpLoad %249 
                               f32_3 %2437 = OpVectorShuffle %2436 %2435 3 1 4 
                                               OpStore %249 %2437 
                               f32_3 %2438 = OpLoad %249 
                               f32_2 %2439 = OpVectorShuffle %2438 %2438 0 2 
                        Uniform f32* %2440 = OpAccessChain %30 %32 
                                 f32 %2441 = OpLoad %2440 
                               f32_2 %2442 = OpCompositeConstruct %2441 %2441 
                               f32_2 %2443 = OpFMul %2439 %2442 
                               f32_3 %2444 = OpLoad %249 
                               f32_3 %2445 = OpVectorShuffle %2444 %2443 3 1 4 
                                               OpStore %249 %2445 
                 read_only Texture2D %2446 = OpLoad %44 
                             sampler %2447 = OpLoad %48 
          read_only Texture2DSampled %2448 = OpSampledImage %2446 %2447 
                               f32_3 %2449 = OpLoad %249 
                               f32_2 %2450 = OpVectorShuffle %2449 %2449 0 2 
                               f32_4 %2451 = OpImageSampleExplicitLod %2448 %2450 Lod %27 
                                 f32 %2452 = OpCompositeExtract %2451 3 
                        Private f32* %2453 = OpAccessChain %119 %358 
                                               OpStore %2453 %2452 
                                               OpBranch %2426 
                                     %2426 = OpLabel 
                                 f32 %2454 = OpLoad %56 
                                 f32 %2455 = OpFNegate %2454 
                                 f32 %2456 = OpFMul %2455 %448 
                        Private f32* %2457 = OpAccessChain %119 %88 
                                 f32 %2458 = OpLoad %2457 
                                 f32 %2459 = OpFAdd %2456 %2458 
                        Private f32* %2460 = OpAccessChain %249 %88 
                                               OpStore %2460 %2459 
                        Private i32* %2461 = OpAccessChain %584 %88 
                                 i32 %2462 = OpLoad %2461 
                                bool %2463 = OpINotEqual %2462 %32 
                                               OpSelectionMerge %2466 None 
                                               OpBranchConditional %2463 %2465 %2469 
                                     %2465 = OpLabel 
                        Private f32* %2467 = OpAccessChain %119 %88 
                                 f32 %2468 = OpLoad %2467 
                                               OpStore %2464 %2468 
                                               OpBranch %2466 
                                     %2469 = OpLabel 
                        Private f32* %2470 = OpAccessChain %249 %88 
                                 f32 %2471 = OpLoad %2470 
                                               OpStore %2464 %2471 
                                               OpBranch %2466 
                                     %2466 = OpLabel 
                                 f32 %2472 = OpLoad %2464 
                        Private f32* %2473 = OpAccessChain %119 %88 
                                               OpStore %2473 %2472 
                                 f32 %2474 = OpLoad %56 
                                 f32 %2475 = OpFNegate %2474 
                                 f32 %2476 = OpFMul %2475 %448 
                        Private f32* %2477 = OpAccessChain %119 %358 
                                 f32 %2478 = OpLoad %2477 
                                 f32 %2479 = OpFAdd %2476 %2478 
                                               OpStore %56 %2479 
                        Private i32* %2480 = OpAccessChain %584 %358 
                                 i32 %2481 = OpLoad %2480 
                                bool %2482 = OpINotEqual %2481 %32 
                                               OpSelectionMerge %2485 None 
                                               OpBranchConditional %2482 %2484 %2488 
                                     %2484 = OpLabel 
                        Private f32* %2486 = OpAccessChain %119 %358 
                                 f32 %2487 = OpLoad %2486 
                                               OpStore %2483 %2487 
                                               OpBranch %2485 
                                     %2488 = OpLabel 
                                 f32 %2489 = OpLoad %56 
                                               OpStore %2483 %2489 
                                               OpBranch %2485 
                                     %2485 = OpLabel 
                                 f32 %2490 = OpLoad %2483 
                        Private f32* %2491 = OpAccessChain %119 %358 
                                               OpStore %2491 %2490 
                               f32_2 %2494 = OpLoad %119 
                               f32_4 %2495 = OpVectorShuffle %2494 %2494 0 1 0 1 
                               f32_4 %2496 = OpExtInst %1 4 %2495 
                               f32_3 %2497 = OpLoad %78 
                               f32_4 %2498 = OpVectorShuffle %2497 %2497 0 0 0 0 
                              bool_4 %2499 = OpFOrdGreaterThanEqual %2496 %2498 
                              bool_2 %2500 = OpVectorShuffle %2499 %2499 0 1 
                                               OpStore %2493 %2500 
                        Private f32* %2501 = OpAccessChain %100 %88 
                                 f32 %2502 = OpLoad %2501 
                                 f32 %2503 = OpFNegate %2502 
                                 f32 %2505 = OpFMul %2503 %2504 
                        Private f32* %2506 = OpAccessChain %237 %88 
                                 f32 %2507 = OpLoad %2506 
                                 f32 %2508 = OpFAdd %2505 %2507 
                                               OpStore %56 %2508 
                       Private bool* %2509 = OpAccessChain %2493 %88 
                                bool %2510 = OpLoad %2509 
                                               OpSelectionMerge %2513 None 
                                               OpBranchConditional %2510 %2512 %2516 
                                     %2512 = OpLabel 
                        Private f32* %2514 = OpAccessChain %237 %88 
                                 f32 %2515 = OpLoad %2514 
                                               OpStore %2511 %2515 
                                               OpBranch %2513 
                                     %2516 = OpLabel 
                                 f32 %2517 = OpLoad %56 
                                               OpStore %2511 %2517 
                                               OpBranch %2513 
                                     %2513 = OpLabel 
                                 f32 %2518 = OpLoad %2511 
                        Private f32* %2519 = OpAccessChain %237 %88 
                                               OpStore %2519 %2518 
                        Private f32* %2520 = OpAccessChain %100 %358 
                                 f32 %2521 = OpLoad %2520 
                                 f32 %2522 = OpFNegate %2521 
                                 f32 %2523 = OpFMul %2522 %2504 
                        Private f32* %2524 = OpAccessChain %237 %642 
                                 f32 %2525 = OpLoad %2524 
                                 f32 %2526 = OpFAdd %2523 %2525 
                                               OpStore %56 %2526 
                       Private bool* %2527 = OpAccessChain %2493 %88 
                                bool %2528 = OpLoad %2527 
                                               OpSelectionMerge %2531 None 
                                               OpBranchConditional %2528 %2530 %2534 
                                     %2530 = OpLabel 
                        Private f32* %2532 = OpAccessChain %237 %642 
                                 f32 %2533 = OpLoad %2532 
                                               OpStore %2529 %2533 
                                               OpBranch %2531 
                                     %2534 = OpLabel 
                                 f32 %2535 = OpLoad %56 
                                               OpStore %2529 %2535 
                                               OpBranch %2531 
                                     %2531 = OpLabel 
                                 f32 %2536 = OpLoad %2529 
                        Private f32* %2537 = OpAccessChain %237 %642 
                                               OpStore %2537 %2536 
                        Private f32* %2538 = OpAccessChain %100 %88 
                                 f32 %2539 = OpLoad %2538 
                                 f32 %2540 = OpFMul %2539 %2504 
                        Private f32* %2541 = OpAccessChain %484 %88 
                                 f32 %2542 = OpLoad %2541 
                                 f32 %2543 = OpFAdd %2540 %2542 
                                               OpStore %56 %2543 
                       Private bool* %2544 = OpAccessChain %2493 %358 
                                bool %2545 = OpLoad %2544 
                                               OpSelectionMerge %2548 None 
                                               OpBranchConditional %2545 %2547 %2551 
                                     %2547 = OpLabel 
                        Private f32* %2549 = OpAccessChain %484 %88 
                                 f32 %2550 = OpLoad %2549 
                                               OpStore %2546 %2550 
                                               OpBranch %2548 
                                     %2551 = OpLabel 
                                 f32 %2552 = OpLoad %56 
                                               OpStore %2546 %2552 
                                               OpBranch %2548 
                                     %2548 = OpLabel 
                                 f32 %2553 = OpLoad %2546 
                        Private f32* %2554 = OpAccessChain %484 %88 
                                               OpStore %2554 %2553 
                        Private f32* %2555 = OpAccessChain %100 %358 
                                 f32 %2556 = OpLoad %2555 
                                 f32 %2557 = OpFMul %2556 %2504 
                        Private f32* %2558 = OpAccessChain %484 %642 
                                 f32 %2559 = OpLoad %2558 
                                 f32 %2560 = OpFAdd %2557 %2559 
                                               OpStore %56 %2560 
                       Private bool* %2561 = OpAccessChain %2493 %358 
                                bool %2562 = OpLoad %2561 
                                               OpSelectionMerge %2565 None 
                                               OpBranchConditional %2562 %2564 %2568 
                                     %2564 = OpLabel 
                        Private f32* %2566 = OpAccessChain %484 %642 
                                 f32 %2567 = OpLoad %2566 
                                               OpStore %2563 %2567 
                                               OpBranch %2565 
                                     %2568 = OpLabel 
                                 f32 %2569 = OpLoad %56 
                                               OpStore %2563 %2569 
                                               OpBranch %2565 
                                     %2565 = OpLabel 
                                 f32 %2570 = OpLoad %2563 
                        Private f32* %2571 = OpAccessChain %484 %642 
                                               OpStore %2571 %2570 
                                               OpBranch %2389 
                                     %2389 = OpLabel 
                                               OpBranch %2177 
                                     %2177 = OpLabel 
                                               OpBranch %1966 
                                     %1966 = OpLabel 
                                               OpBranch %1755 
                                     %1755 = OpLabel 
                                               OpBranch %1544 
                                     %1544 = OpLabel 
                                               OpBranch %1333 
                                     %1333 = OpLabel 
                                               OpBranch %1122 
                                     %1122 = OpLabel 
                                               OpBranch %911 
                                      %911 = OpLabel 
                                               OpBranch %700 
                                      %700 = OpLabel 
                        Private f32* %2572 = OpAccessChain %237 %88 
                                 f32 %2573 = OpLoad %2572 
                                 f32 %2574 = OpFNegate %2573 
                          Input f32* %2575 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %2576 = OpLoad %2575 
                                 f32 %2577 = OpFAdd %2574 %2576 
                                               OpStore %56 %2577 
                        Private f32* %2578 = OpAccessChain %237 %642 
                                 f32 %2579 = OpLoad %2578 
                                 f32 %2580 = OpFNegate %2579 
                          Input f32* %2581 = OpAccessChain vs_TEXCOORD0 %358 
                                 f32 %2582 = OpLoad %2581 
                                 f32 %2583 = OpFAdd %2580 %2582 
                        Private f32* %2584 = OpAccessChain %100 %88 
                                               OpStore %2584 %2583 
                       Private bool* %2585 = OpAccessChain %323 %88 
                                bool %2586 = OpLoad %2585 
                                               OpSelectionMerge %2589 None 
                                               OpBranchConditional %2586 %2588 %2591 
                                     %2588 = OpLabel 
                                 f32 %2590 = OpLoad %56 
                                               OpStore %2587 %2590 
                                               OpBranch %2589 
                                     %2591 = OpLabel 
                        Private f32* %2592 = OpAccessChain %100 %88 
                                 f32 %2593 = OpLoad %2592 
                                               OpStore %2587 %2593 
                                               OpBranch %2589 
                                     %2589 = OpLabel 
                                 f32 %2594 = OpLoad %2587 
                                               OpStore %56 %2594 
                               f32_3 %2595 = OpLoad %484 
                               f32_2 %2596 = OpVectorShuffle %2595 %2595 0 2 
                               f32_2 %2597 = OpLoad vs_TEXCOORD0 
                               f32_2 %2598 = OpFNegate %2597 
                               f32_2 %2599 = OpFAdd %2596 %2598 
                               f32_3 %2600 = OpLoad %78 
                               f32_3 %2601 = OpVectorShuffle %2600 %2599 3 1 4 
                                               OpStore %78 %2601 
                       Private bool* %2602 = OpAccessChain %323 %88 
                                bool %2603 = OpLoad %2602 
                                               OpSelectionMerge %2606 None 
                                               OpBranchConditional %2603 %2605 %2609 
                                     %2605 = OpLabel 
                        Private f32* %2607 = OpAccessChain %78 %88 
                                 f32 %2608 = OpLoad %2607 
                                               OpStore %2604 %2608 
                                               OpBranch %2606 
                                     %2609 = OpLabel 
                        Private f32* %2610 = OpAccessChain %78 %642 
                                 f32 %2611 = OpLoad %2610 
                                               OpStore %2604 %2611 
                                               OpBranch %2606 
                                     %2606 = OpLabel 
                                 f32 %2612 = OpLoad %2604 
                        Private f32* %2613 = OpAccessChain %78 %88 
                                               OpStore %2613 %2612 
                               f32_2 %2615 = OpLoad %119 
                               f32_4 %2616 = OpVectorShuffle %2615 %2615 0 1 0 1 
                              bool_4 %2618 = OpFOrdLessThan %2616 %2617 
                              bool_2 %2619 = OpVectorShuffle %2618 %2618 0 1 
                               u32_2 %2620 = OpSelect %2619 %596 %595 
                               u32_2 %2621 = OpCompositeConstruct %567 %567 
                               u32_2 %2622 = OpIMul %2620 %2621 
                               i32_2 %2623 = OpBitcast %2622 
                                               OpStore %2614 %2623 
                                 f32 %2624 = OpLoad %56 
                        Private f32* %2625 = OpAccessChain %78 %88 
                                 f32 %2626 = OpLoad %2625 
                                 f32 %2627 = OpFAdd %2624 %2626 
                        Private f32* %2628 = OpAccessChain %119 %88 
                                               OpStore %2628 %2627 
                                 i32 %2630 = OpLoad %564 
                               i32_4 %2632 = OpCompositeConstruct %2630 %2630 %2630 %2630 
                               i32_2 %2633 = OpLoad %2614 
                               i32_4 %2634 = OpVectorShuffle %2633 %2633 0 1 0 0 
                              bool_4 %2635 = OpINotEqual %2632 %2634 
                              bool_2 %2636 = OpVectorShuffle %2635 %2635 0 1 
                                               OpStore %2629 %2636 
                        Private f32* %2637 = OpAccessChain %119 %88 
                                 f32 %2638 = OpLoad %2637 
                                 f32 %2639 = OpFDiv %19 %2638 
                                               OpStore %106 %2639 
                                 f32 %2640 = OpLoad %56 
                        Private f32* %2641 = OpAccessChain %78 %88 
                                 f32 %2642 = OpLoad %2641 
                                bool %2643 = OpFOrdLessThan %2640 %2642 
                                               OpStore %395 %2643 
                                 f32 %2644 = OpLoad %56 
                        Private f32* %2645 = OpAccessChain %78 %88 
                                 f32 %2646 = OpLoad %2645 
                                 f32 %2647 = OpExtInst %1 37 %2644 %2646 
                                               OpStore %56 %2647 
                                bool %2649 = OpLoad %395 
                                               OpSelectionMerge %2653 None 
                                               OpBranchConditional %2649 %2652 %2656 
                                     %2652 = OpLabel 
                       Private bool* %2654 = OpAccessChain %2629 %88 
                                bool %2655 = OpLoad %2654 
                                               OpStore %2651 %2655 
                                               OpBranch %2653 
                                     %2656 = OpLabel 
                       Private bool* %2657 = OpAccessChain %2629 %358 
                                bool %2658 = OpLoad %2657 
                                               OpStore %2651 %2658 
                                               OpBranch %2653 
                                     %2653 = OpLabel 
                                bool %2659 = OpLoad %2651 
                                               OpStore %2648 %2659 
                        Private f32* %2660 = OpAccessChain %201 %88 
                                 f32 %2661 = OpLoad %2660 
                        Private f32* %2662 = OpAccessChain %201 %88 
                                 f32 %2663 = OpLoad %2662 
                                 f32 %2664 = OpFMul %2661 %2663 
                        Private f32* %2665 = OpAccessChain %201 %88 
                                               OpStore %2665 %2664 
                                 f32 %2666 = OpLoad %56 
                                 f32 %2667 = OpLoad %106 
                                 f32 %2668 = OpFNegate %2667 
                                 f32 %2669 = OpFMul %2666 %2668 
                                 f32 %2670 = OpFAdd %2669 %448 
                                               OpStore %56 %2670 
                                bool %2671 = OpLoad %2648 
                                 f32 %2672 = OpLoad %56 
                                 f32 %2673 = OpSelect %2671 %2672 %18 
                                               OpStore %56 %2673 
                        Private f32* %2674 = OpAccessChain %201 %88 
                                 f32 %2675 = OpLoad %2674 
                                 f32 %2676 = OpLoad %56 
                                 f32 %2677 = OpExtInst %1 40 %2675 %2676 
                        Private f32* %2678 = OpAccessChain %201 %88 
                                               OpStore %2678 %2677 
                               f32_3 %2679 = OpLoad %201 
                               f32_2 %2680 = OpVectorShuffle %2679 %2679 0 0 
                                 f32 %2681 = OpLoad %69 
                               f32_2 %2682 = OpCompositeConstruct %2681 %2681 
                               f32_2 %2683 = OpFMul %2680 %2682 
                               f32_2 %2684 = OpLoad vs_TEXCOORD0 
                               f32_2 %2685 = OpFAdd %2683 %2684 
                               f32_3 %2686 = OpLoad %201 
                               f32_3 %2687 = OpVectorShuffle %2686 %2685 3 4 2 
                                               OpStore %201 %2687 
                       Private bool* %2688 = OpAccessChain %323 %88 
                                bool %2689 = OpLoad %2688 
                                               OpSelectionMerge %2692 None 
                                               OpBranchConditional %2689 %2691 %2695 
                                     %2691 = OpLabel 
                          Input f32* %2693 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %2694 = OpLoad %2693 
                                               OpStore %2690 %2694 
                                               OpBranch %2692 
                                     %2695 = OpLabel 
                        Private f32* %2696 = OpAccessChain %201 %88 
                                 f32 %2697 = OpLoad %2696 
                                               OpStore %2690 %2697 
                                               OpBranch %2692 
                                     %2692 = OpLabel 
                                 f32 %2698 = OpLoad %2690 
                        Private f32* %2699 = OpAccessChain %78 %88 
                                               OpStore %2699 %2698 
                        Private f32* %2700 = OpAccessChain %78 %88 
                                 f32 %2701 = OpLoad %2700 
                                 f32 %2702 = OpExtInst %1 43 %2701 %18 %19 
                        Private f32* %2703 = OpAccessChain %78 %88 
                                               OpStore %2703 %2702 
                       Private bool* %2704 = OpAccessChain %323 %88 
                                bool %2705 = OpLoad %2704 
                                               OpSelectionMerge %2708 None 
                                               OpBranchConditional %2705 %2707 %2711 
                                     %2707 = OpLabel 
                        Private f32* %2709 = OpAccessChain %201 %358 
                                 f32 %2710 = OpLoad %2709 
                                               OpStore %2706 %2710 
                                               OpBranch %2708 
                                     %2711 = OpLabel 
                          Input f32* %2712 = OpAccessChain vs_TEXCOORD0 %358 
                                 f32 %2713 = OpLoad %2712 
                                               OpStore %2706 %2713 
                                               OpBranch %2708 
                                     %2708 = OpLabel 
                                 f32 %2714 = OpLoad %2706 
                        Private f32* %2715 = OpAccessChain %78 %358 
                                               OpStore %2715 %2714 
                        Private f32* %2716 = OpAccessChain %78 %358 
                                 f32 %2717 = OpLoad %2716 
                                 f32 %2718 = OpExtInst %1 43 %2717 %18 %19 
                        Private f32* %2719 = OpAccessChain %78 %358 
                                               OpStore %2719 %2718 
                               f32_3 %2720 = OpLoad %78 
                               f32_2 %2721 = OpVectorShuffle %2720 %2720 0 1 
                        Uniform f32* %2722 = OpAccessChain %30 %32 
                                 f32 %2723 = OpLoad %2722 
                               f32_2 %2724 = OpCompositeConstruct %2723 %2723 
                               f32_2 %2725 = OpFMul %2721 %2724 
                               f32_3 %2726 = OpLoad %9 
                               f32_3 %2727 = OpVectorShuffle %2726 %2725 3 4 2 
                                               OpStore %9 %2727 
                 read_only Texture2D %2728 = OpLoad %44 
                             sampler %2729 = OpLoad %48 
          read_only Texture2DSampled %2730 = OpSampledImage %2728 %2729 
                               f32_3 %2731 = OpLoad %9 
                               f32_2 %2732 = OpVectorShuffle %2731 %2731 0 1 
                               f32_4 %2733 = OpImageSampleExplicitLod %2730 %2732 Lod %27 
                               f32_3 %2734 = OpVectorShuffle %2733 %2733 0 1 2 
                               f32_4 %2735 = OpLoad %41 
                               f32_4 %2736 = OpVectorShuffle %2735 %2734 4 5 6 3 
                                               OpStore %41 %2736 
                                               OpBranch %165 
                                      %165 = OpLabel 
                               f32_2 %2737 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %2739 = OpAccessChain %30 %63 
                               f32_4 %2740 = OpLoad %2739 
                               f32_2 %2741 = OpVectorShuffle %2740 %2740 0 1 
                               f32_2 %2742 = OpFMul %2737 %2741 
                      Uniform f32_4* %2743 = OpAccessChain %30 %63 
                               f32_4 %2744 = OpLoad %2743 
                               f32_2 %2745 = OpVectorShuffle %2744 %2744 2 3 
                               f32_2 %2746 = OpFAdd %2742 %2745 
                               f32_3 %2747 = OpLoad %9 
                               f32_3 %2748 = OpVectorShuffle %2747 %2746 3 4 2 
                                               OpStore %9 %2748 
                 read_only Texture2D %2750 = OpLoad %2749 
                             sampler %2752 = OpLoad %2751 
          read_only Texture2DSampled %2753 = OpSampledImage %2750 %2752 
                               f32_3 %2754 = OpLoad %9 
                               f32_2 %2755 = OpVectorShuffle %2754 %2754 0 1 
                               f32_4 %2756 = OpImageSampleImplicitLod %2753 %2755 
                                 f32 %2757 = OpCompositeExtract %2756 3 
                        Private f32* %2758 = OpAccessChain %9 %88 
                                               OpStore %2758 %2757 
                        Private f32* %2759 = OpAccessChain %9 %88 
                                 f32 %2760 = OpLoad %2759 
                                 f32 %2761 = OpFMul %2760 %276 
                                 f32 %2763 = OpFAdd %2761 %2762 
                        Private f32* %2764 = OpAccessChain %9 %88 
                                               OpStore %2764 %2763 
                        Private f32* %2765 = OpAccessChain %9 %88 
                                 f32 %2766 = OpLoad %2765 
                                 f32 %2768 = OpFMul %2766 %2767 
                                 f32 %2769 = OpFAdd %2768 %448 
                        Private f32* %2770 = OpAccessChain %201 %88 
                                               OpStore %2770 %2769 
                        Private f32* %2771 = OpAccessChain %201 %88 
                                 f32 %2772 = OpLoad %2771 
                                 f32 %2773 = OpExtInst %1 43 %2772 %18 %19 
                        Private f32* %2774 = OpAccessChain %201 %88 
                                               OpStore %2774 %2773 
                        Private f32* %2775 = OpAccessChain %201 %88 
                                 f32 %2776 = OpLoad %2775 
                                 f32 %2777 = OpFMul %2776 %276 
                                 f32 %2778 = OpFAdd %2777 %2762 
                        Private f32* %2779 = OpAccessChain %201 %88 
                                               OpStore %2779 %2778 
                        Private f32* %2780 = OpAccessChain %9 %88 
                                 f32 %2781 = OpLoad %2780 
                                 f32 %2782 = OpExtInst %1 4 %2781 
                                 f32 %2783 = OpFNegate %2782 
                                 f32 %2784 = OpFAdd %2783 %19 
                        Private f32* %2785 = OpAccessChain %9 %88 
                                               OpStore %2785 %2784 
                        Private f32* %2786 = OpAccessChain %9 %88 
                                 f32 %2787 = OpLoad %2786 
                                 f32 %2788 = OpExtInst %1 31 %2787 
                        Private f32* %2789 = OpAccessChain %9 %88 
                                               OpStore %2789 %2788 
                        Private f32* %2790 = OpAccessChain %9 %88 
                                 f32 %2791 = OpLoad %2790 
                                 f32 %2792 = OpFNegate %2791 
                                 f32 %2793 = OpFAdd %2792 %19 
                        Private f32* %2794 = OpAccessChain %9 %88 
                                               OpStore %2794 %2793 
                        Private f32* %2795 = OpAccessChain %9 %88 
                                 f32 %2796 = OpLoad %2795 
                        Private f32* %2797 = OpAccessChain %201 %88 
                                 f32 %2798 = OpLoad %2797 
                                 f32 %2799 = OpFMul %2796 %2798 
                        Private f32* %2800 = OpAccessChain %9 %88 
                                               OpStore %2800 %2799 
                               f32_4 %2801 = OpLoad %41 
                               f32_3 %2802 = OpVectorShuffle %2801 %2801 0 1 2 
                               f32_3 %2805 = OpFMul %2802 %2804 
                                               OpStore %201 %2805 
                               f32_4 %2806 = OpLoad %41 
                               f32_3 %2807 = OpVectorShuffle %2806 %2806 0 1 2 
                               f32_3 %2808 = OpExtInst %1 4 %2807 
                               f32_3 %2811 = OpExtInst %1 40 %2808 %2810 
                                               OpStore %78 %2811 
                               f32_3 %2812 = OpLoad %78 
                               f32_3 %2813 = OpExtInst %1 30 %2812 
                                               OpStore %78 %2813 
                               f32_3 %2814 = OpLoad %78 
                               f32_3 %2817 = OpFMul %2814 %2816 
                                               OpStore %78 %2817 
                               f32_3 %2818 = OpLoad %78 
                               f32_3 %2819 = OpExtInst %1 29 %2818 
                                               OpStore %78 %2819 
                               f32_3 %2820 = OpLoad %78 
                               f32_3 %2823 = OpFMul %2820 %2822 
                               f32_3 %2826 = OpFAdd %2823 %2825 
                                               OpStore %78 %2826 
                               f32_4 %2830 = OpLoad %41 
                               f32_4 %2831 = OpVectorShuffle %2830 %2830 0 1 2 0 
                              bool_4 %2832 = OpFOrdGreaterThanEqual %2829 %2831 
                              bool_3 %2833 = OpVectorShuffle %2832 %2832 0 1 2 
                                               OpStore %2827 %2833 
                               f32_3 %2836 = OpLoad %201 
                                               OpStore %2835 %2836 
                       Private bool* %2837 = OpAccessChain %2827 %88 
                                bool %2838 = OpLoad %2837 
                                               OpSelectionMerge %2841 None 
                                               OpBranchConditional %2838 %2840 %2844 
                                     %2840 = OpLabel 
                        Private f32* %2842 = OpAccessChain %201 %88 
                                 f32 %2843 = OpLoad %2842 
                                               OpStore %2839 %2843 
                                               OpBranch %2841 
                                     %2844 = OpLabel 
                        Private f32* %2845 = OpAccessChain %78 %88 
                                 f32 %2846 = OpLoad %2845 
                                               OpStore %2839 %2846 
                                               OpBranch %2841 
                                     %2841 = OpLabel 
                                 f32 %2847 = OpLoad %2839 
                       Function f32* %2848 = OpAccessChain %2835 %88 
                                               OpStore %2848 %2847 
                       Private bool* %2849 = OpAccessChain %2827 %358 
                                bool %2850 = OpLoad %2849 
                                               OpSelectionMerge %2853 None 
                                               OpBranchConditional %2850 %2852 %2856 
                                     %2852 = OpLabel 
                        Private f32* %2854 = OpAccessChain %201 %358 
                                 f32 %2855 = OpLoad %2854 
                                               OpStore %2851 %2855 
                                               OpBranch %2853 
                                     %2856 = OpLabel 
                        Private f32* %2857 = OpAccessChain %78 %358 
                                 f32 %2858 = OpLoad %2857 
                                               OpStore %2851 %2858 
                                               OpBranch %2853 
                                     %2853 = OpLabel 
                                 f32 %2859 = OpLoad %2851 
                       Function f32* %2860 = OpAccessChain %2835 %358 
                                               OpStore %2860 %2859 
                       Private bool* %2861 = OpAccessChain %2827 %642 
                                bool %2862 = OpLoad %2861 
                                               OpSelectionMerge %2865 None 
                                               OpBranchConditional %2862 %2864 %2868 
                                     %2864 = OpLabel 
                        Private f32* %2866 = OpAccessChain %201 %642 
                                 f32 %2867 = OpLoad %2866 
                                               OpStore %2863 %2867 
                                               OpBranch %2865 
                                     %2868 = OpLabel 
                        Private f32* %2869 = OpAccessChain %78 %642 
                                 f32 %2870 = OpLoad %2869 
                                               OpStore %2863 %2870 
                                               OpBranch %2865 
                                     %2865 = OpLabel 
                                 f32 %2871 = OpLoad %2863 
                       Function f32* %2872 = OpAccessChain %2835 %642 
                                               OpStore %2872 %2871 
                               f32_3 %2873 = OpLoad %2835 
                                               OpStore %201 %2873 
                               f32_3 %2874 = OpLoad %9 
                               f32_3 %2875 = OpVectorShuffle %2874 %2874 0 0 0 
                               f32_3 %2878 = OpFMul %2875 %2877 
                               f32_3 %2879 = OpLoad %201 
                               f32_3 %2880 = OpFAdd %2878 %2879 
                                               OpStore %9 %2880 
                               f32_3 %2881 = OpLoad %9 
                               f32_3 %2884 = OpFMul %2881 %2883 
                               f32_4 %2885 = OpLoad %41 
                               f32_4 %2886 = OpVectorShuffle %2885 %2884 4 5 6 3 
                                               OpStore %41 %2886 
                               f32_3 %2887 = OpLoad %9 
                               f32_3 %2890 = OpFAdd %2887 %2889 
                                               OpStore %78 %2890 
                               f32_3 %2891 = OpLoad %78 
                               f32_3 %2894 = OpFMul %2891 %2893 
                                               OpStore %78 %2894 
                               f32_3 %2895 = OpLoad %78 
                               f32_3 %2896 = OpExtInst %1 4 %2895 
                               f32_3 %2897 = OpExtInst %1 40 %2896 %2810 
                                               OpStore %78 %2897 
                               f32_3 %2898 = OpLoad %78 
                               f32_3 %2899 = OpExtInst %1 30 %2898 
                                               OpStore %78 %2899 
                               f32_3 %2900 = OpLoad %78 
                               f32_3 %2903 = OpFMul %2900 %2902 
                                               OpStore %78 %2903 
                               f32_3 %2904 = OpLoad %78 
                               f32_3 %2905 = OpExtInst %1 29 %2904 
                                               OpStore %78 %2905 
                               f32_3 %2908 = OpLoad %9 
                               f32_4 %2909 = OpVectorShuffle %2908 %2908 0 1 2 0 
                              bool_4 %2910 = OpFOrdGreaterThanEqual %2907 %2909 
                              bool_3 %2911 = OpVectorShuffle %2910 %2910 0 1 2 
                                               OpStore %323 %2911 
                       Private bool* %2914 = OpAccessChain %323 %88 
                                bool %2915 = OpLoad %2914 
                                               OpSelectionMerge %2918 None 
                                               OpBranchConditional %2915 %2917 %2921 
                                     %2917 = OpLabel 
                        Private f32* %2919 = OpAccessChain %41 %88 
                                 f32 %2920 = OpLoad %2919 
                                               OpStore %2916 %2920 
                                               OpBranch %2918 
                                     %2921 = OpLabel 
                        Private f32* %2922 = OpAccessChain %78 %88 
                                 f32 %2923 = OpLoad %2922 
                                               OpStore %2916 %2923 
                                               OpBranch %2918 
                                     %2918 = OpLabel 
                                 f32 %2924 = OpLoad %2916 
                         Output f32* %2926 = OpAccessChain %2913 %88 
                                               OpStore %2926 %2924 
                       Private bool* %2927 = OpAccessChain %323 %358 
                                bool %2928 = OpLoad %2927 
                                               OpSelectionMerge %2931 None 
                                               OpBranchConditional %2928 %2930 %2934 
                                     %2930 = OpLabel 
                        Private f32* %2932 = OpAccessChain %41 %358 
                                 f32 %2933 = OpLoad %2932 
                                               OpStore %2929 %2933 
                                               OpBranch %2931 
                                     %2934 = OpLabel 
                        Private f32* %2935 = OpAccessChain %78 %358 
                                 f32 %2936 = OpLoad %2935 
                                               OpStore %2929 %2936 
                                               OpBranch %2931 
                                     %2931 = OpLabel 
                                 f32 %2937 = OpLoad %2929 
                         Output f32* %2938 = OpAccessChain %2913 %358 
                                               OpStore %2938 %2937 
                       Private bool* %2939 = OpAccessChain %323 %642 
                                bool %2940 = OpLoad %2939 
                                               OpSelectionMerge %2943 None 
                                               OpBranchConditional %2940 %2942 %2946 
                                     %2942 = OpLabel 
                        Private f32* %2944 = OpAccessChain %41 %642 
                                 f32 %2945 = OpLoad %2944 
                                               OpStore %2941 %2945 
                                               OpBranch %2943 
                                     %2946 = OpLabel 
                        Private f32* %2947 = OpAccessChain %78 %642 
                                 f32 %2948 = OpLoad %2947 
                                               OpStore %2941 %2948 
                                               OpBranch %2943 
                                     %2943 = OpLabel 
                                 f32 %2949 = OpLoad %2941 
                         Output f32* %2950 = OpAccessChain %2913 %642 
                                               OpStore %2950 %2949 
                        Private f32* %2951 = OpAccessChain %41 %67 
                                 f32 %2952 = OpLoad %2951 
                         Output f32* %2953 = OpAccessChain %2913 %67 
                                               OpStore %2953 %2952 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA" "STEREO_DOUBLEWIDE_TARGET" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %66 %73 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %22 0 Offset 22 
                                             OpMemberDecorate %22 1 Offset 22 
                                             OpMemberDecorate %22 2 Offset 22 
                                             OpDecorate %22 Block 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate vs_TEXCOORD1 Location 66 
                                             OpDecorate vs_TEXCOORD0 Location 73 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypeStruct %6 %7 %7 
                                     %23 = OpTypePointer Uniform %22 
Uniform struct {f32; f32_4; f32_4;}* %24 = OpVariable Uniform 
                                 i32 %25 = OpConstant 2 
                                     %26 = OpTypePointer Uniform %7 
                                     %35 = OpTypePointer Output %7 
                                 f32 %39 = OpConstant 3.674022E-40 
                                 f32 %40 = OpConstant 3.674022E-40 
                               f32_2 %41 = OpConstantComposite %39 %40 
                                     %45 = OpTypePointer Private %19 
                      Private f32_2* %46 = OpVariable Private 
                               f32_2 %49 = OpConstantComposite %40 %40 
                                 i32 %52 = OpConstant 1 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %58 %58 
                                     %65 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %68 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                      Uniform f32_4* %27 = OpAccessChain %24 %25 
                               f32_4 %28 = OpLoad %27 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpFMul %21 %29 
                      Uniform f32_4* %31 = OpAccessChain %24 %25 
                               f32_4 %32 = OpLoad %31 
                               f32_2 %33 = OpVectorShuffle %32 %32 2 3 
                               f32_2 %34 = OpFAdd %30 %33 
                       Output f32_4* %36 = OpAccessChain %13 %15 
                               f32_4 %37 = OpLoad %36 
                               f32_4 %38 = OpVectorShuffle %37 %34 4 5 2 3 
                                             OpStore %36 %38 
                       Output f32_4* %42 = OpAccessChain %13 %15 
                               f32_4 %43 = OpLoad %42 
                               f32_4 %44 = OpVectorShuffle %43 %41 0 1 4 5 
                                             OpStore %42 %44 
                               f32_3 %47 = OpLoad %18 
                               f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                               f32_2 %50 = OpFAdd %48 %49 
                                             OpStore %46 %50 
                               f32_2 %51 = OpLoad %46 
                      Uniform f32_4* %53 = OpAccessChain %24 %52 
                               f32_4 %54 = OpLoad %53 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               f32_2 %56 = OpFMul %51 %55 
                                             OpStore %46 %56 
                               f32_2 %57 = OpLoad %46 
                               f32_2 %60 = OpFMul %57 %59 
                      Uniform f32_4* %61 = OpAccessChain %24 %52 
                               f32_4 %62 = OpLoad %61 
                               f32_2 %63 = OpVectorShuffle %62 %62 2 3 
                               f32_2 %64 = OpFAdd %60 %63 
                                             OpStore %46 %64 
                               f32_2 %67 = OpLoad %46 
                        Uniform f32* %69 = OpAccessChain %24 %15 
                                 f32 %70 = OpLoad %69 
                               f32_2 %71 = OpCompositeConstruct %70 %70 
                               f32_2 %72 = OpFMul %67 %71 
                                             OpStore vs_TEXCOORD1 %72 
                               f32_2 %74 = OpLoad %46 
                                             OpStore vs_TEXCOORD0 %74 
                         Output f32* %76 = OpAccessChain %13 %15 %9 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                         Output f32* %79 = OpAccessChain %13 %15 %9 
                                             OpStore %79 %78 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 2955
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %2913 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %2749 DescriptorSet 2749 
                                               OpDecorate %2749 Binding 2749 
                                               OpDecorate %2751 DescriptorSet 2751 
                                               OpDecorate %2751 Binding 2751 
                                               OpDecorate %2913 Location 2913 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %18 = OpConstant 3.674022E-40 
                                   f32 %19 = OpConstant 3.674022E-40 
                                       %27 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %6 %27 %27 
                                       %29 = OpTypePointer Uniform %28 
  Uniform struct {f32; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 0 
                                       %33 = OpTypePointer Uniform %6 
                                       %40 = OpTypePointer Private %27 
                        Private f32_4* %41 = OpVariable Private 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypePointer Private %6 
                          Private f32* %56 = OpVariable Private 
                                       %62 = OpTypeVector %31 2 
                                   i32 %63 = OpConstant 1 
                                 i32_2 %64 = OpConstantComposite %32 %63 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 3 
                          Private f32* %69 = OpVariable Private 
                                 i32_2 %75 = OpConstantComposite %63 %32 
                        Private f32_3* %78 = OpVariable Private 
                                   i32 %84 = OpConstant -1 
                                 i32_2 %85 = OpConstantComposite %32 %84 
                                   u32 %88 = OpConstant 0 
                          Private f32* %90 = OpVariable Private 
                                 i32_2 %96 = OpConstantComposite %84 %32 
                                       %99 = OpTypePointer Private %10 
                       Private f32_2* %100 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_2* %119 = OpVariable Private 
                       Private f32_2* %125 = OpVariable Private 
                                  f32 %143 = OpConstant 3.674022E-40 
                                  f32 %154 = OpConstant 3.674022E-40 
                                      %156 = OpTypeBool 
                                      %157 = OpTypePointer Private %156 
                        Private bool* %158 = OpVariable Private 
                                i32_2 %171 = OpConstantComposite %84 %84 
                                i32_2 %179 = OpConstantComposite %63 %63 
                                i32_2 %188 = OpConstantComposite %63 %84 
                                i32_2 %197 = OpConstantComposite %84 %63 
                       Private f32_3* %201 = OpVariable Private 
                       Private f32_2* %207 = OpVariable Private 
                         Private f32* %216 = OpVariable Private 
                                  f32 %224 = OpConstant 3.674022E-40 
                       Private f32_3* %237 = OpVariable Private 
                       Private f32_3* %249 = OpVariable Private 
                                  f32 %276 = OpConstant 3.674022E-40 
                                      %321 = OpTypeVector %156 3 
                                      %322 = OpTypePointer Private %321 
                      Private bool_3* %323 = OpVariable Private 
                                      %337 = OpTypePointer Function %6 
                                  i32 %357 = OpConstant 2 
                                  u32 %358 = OpConstant 1 
                                  f32 %367 = OpConstant 3.674022E-40 
                        Private bool* %395 = OpVariable Private 
                                  f32 %448 = OpConstant 3.674022E-40 
                                f32_2 %449 = OpConstantComposite %448 %448 
                                      %458 = OpTypePointer Input %6 
                       Private f32_3* %484 = OpVariable Private 
                                  f32 %493 = OpConstant 3.674022E-40 
                       Private f32_2* %520 = OpVariable Private 
                                  f32 %548 = OpConstant 3.674022E-40 
                                      %563 = OpTypePointer Private %31 
                         Private i32* %564 = OpVariable Private 
                                  u32 %567 = OpConstant 4294967295 
                                      %583 = OpTypePointer Private %62 
                       Private i32_2* %584 = OpVariable Private 
                                      %590 = OpTypeVector %156 4 
                                      %592 = OpTypeVector %156 2 
                                      %594 = OpTypeVector %66 2 
                                u32_2 %595 = OpConstantComposite %88 %88 
                                u32_2 %596 = OpConstantComposite %358 %358 
                                  f32 %604 = OpConstant 3.674022E-40 
                         Private f32* %623 = OpVariable Private 
                                  u32 %642 = OpConstant 2 
                                      %644 = OpTypeVector %31 3 
                                      %645 = OpTypePointer Private %644 
                       Private i32_3* %646 = OpVariable Private 
                                 f32 %2296 = OpConstant 3.674022E-40 
                                     %2492 = OpTypePointer Private %592 
                     Private bool_2* %2493 = OpVariable Private 
                                 f32 %2504 = OpConstant 3.674022E-40 
                      Private i32_2* %2614 = OpVariable Private 
                               f32_4 %2617 = OpConstantComposite %18 %18 %18 %18 
                     Private bool_2* %2629 = OpVariable Private 
                                     %2631 = OpTypeVector %31 4 
                       Private bool* %2648 = OpVariable Private 
                                     %2650 = OpTypePointer Function %156 
                                     %2738 = OpTypePointer Uniform %27 
UniformConstant read_only Texture2D* %2749 = OpVariable UniformConstant 
            UniformConstant sampler* %2751 = OpVariable UniformConstant 
                                 f32 %2762 = OpConstant 3.674022E-40 
                                 f32 %2767 = OpConstant 3.674022E-40 
                                 f32 %2803 = OpConstant 3.674022E-40 
                               f32_3 %2804 = OpConstantComposite %2803 %2803 %2803 
                                 f32 %2809 = OpConstant 3.674022E-40 
                               f32_3 %2810 = OpConstantComposite %2809 %2809 %2809 
                                 f32 %2815 = OpConstant 3.674022E-40 
                               f32_3 %2816 = OpConstantComposite %2815 %2815 %2815 
                                 f32 %2821 = OpConstant 3.674022E-40 
                               f32_3 %2822 = OpConstantComposite %2821 %2821 %2821 
                                 f32 %2824 = OpConstant 3.674022E-40 
                               f32_3 %2825 = OpConstantComposite %2824 %2824 %2824 
                     Private bool_3* %2827 = OpVariable Private 
                                 f32 %2828 = OpConstant 3.674022E-40 
                               f32_4 %2829 = OpConstantComposite %2828 %2828 %2828 %18 
                                     %2834 = OpTypePointer Function %7 
                                 f32 %2876 = OpConstant 3.674022E-40 
                               f32_3 %2877 = OpConstantComposite %2876 %2876 %2876 
                                 f32 %2882 = OpConstant 3.674022E-40 
                               f32_3 %2883 = OpConstantComposite %2882 %2882 %2882 
                                 f32 %2888 = OpConstant 3.674022E-40 
                               f32_3 %2889 = OpConstantComposite %2888 %2888 %2888 
                                 f32 %2892 = OpConstant 3.674022E-40 
                               f32_3 %2893 = OpConstantComposite %2892 %2892 %2892 
                                 f32 %2901 = OpConstant 3.674022E-40 
                               f32_3 %2902 = OpConstantComposite %2901 %2901 %2901 
                                 f32 %2906 = OpConstant 3.674022E-40 
                               f32_4 %2907 = OpConstantComposite %2906 %2906 %2906 %18 
                                     %2912 = OpTypePointer Output %27 
                       Output f32_4* %2913 = OpVariable Output 
                                     %2925 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %338 = OpVariable Function 
                        Function f32* %354 = OpVariable Function 
                        Function f32* %407 = OpVariable Function 
                        Function f32* %428 = OpVariable Function 
                        Function f32* %438 = OpVariable Function 
                        Function f32* %455 = OpVariable Function 
                        Function f32* %468 = OpVariable Function 
                        Function f32* %539 = OpVariable Function 
                        Function f32* %613 = OpVariable Function 
                        Function f32* %634 = OpVariable Function 
                        Function f32* %669 = OpVariable Function 
                        Function f32* %687 = OpVariable Function 
                        Function f32* %775 = OpVariable Function 
                        Function f32* %795 = OpVariable Function 
                        Function f32* %827 = OpVariable Function 
                        Function f32* %848 = OpVariable Function 
                        Function f32* %880 = OpVariable Function 
                        Function f32* %898 = OpVariable Function 
                        Function f32* %986 = OpVariable Function 
                       Function f32* %1006 = OpVariable Function 
                       Function f32* %1038 = OpVariable Function 
                       Function f32* %1059 = OpVariable Function 
                       Function f32* %1091 = OpVariable Function 
                       Function f32* %1109 = OpVariable Function 
                       Function f32* %1197 = OpVariable Function 
                       Function f32* %1217 = OpVariable Function 
                       Function f32* %1249 = OpVariable Function 
                       Function f32* %1270 = OpVariable Function 
                       Function f32* %1302 = OpVariable Function 
                       Function f32* %1320 = OpVariable Function 
                       Function f32* %1408 = OpVariable Function 
                       Function f32* %1428 = OpVariable Function 
                       Function f32* %1460 = OpVariable Function 
                       Function f32* %1481 = OpVariable Function 
                       Function f32* %1513 = OpVariable Function 
                       Function f32* %1531 = OpVariable Function 
                       Function f32* %1619 = OpVariable Function 
                       Function f32* %1639 = OpVariable Function 
                       Function f32* %1671 = OpVariable Function 
                       Function f32* %1692 = OpVariable Function 
                       Function f32* %1724 = OpVariable Function 
                       Function f32* %1742 = OpVariable Function 
                       Function f32* %1830 = OpVariable Function 
                       Function f32* %1850 = OpVariable Function 
                       Function f32* %1882 = OpVariable Function 
                       Function f32* %1903 = OpVariable Function 
                       Function f32* %1935 = OpVariable Function 
                       Function f32* %1953 = OpVariable Function 
                       Function f32* %2041 = OpVariable Function 
                       Function f32* %2061 = OpVariable Function 
                       Function f32* %2093 = OpVariable Function 
                       Function f32* %2114 = OpVariable Function 
                       Function f32* %2146 = OpVariable Function 
                       Function f32* %2164 = OpVariable Function 
                       Function f32* %2252 = OpVariable Function 
                       Function f32* %2272 = OpVariable Function 
                       Function f32* %2305 = OpVariable Function 
                       Function f32* %2326 = OpVariable Function 
                       Function f32* %2358 = OpVariable Function 
                       Function f32* %2376 = OpVariable Function 
                       Function f32* %2464 = OpVariable Function 
                       Function f32* %2483 = OpVariable Function 
                       Function f32* %2511 = OpVariable Function 
                       Function f32* %2529 = OpVariable Function 
                       Function f32* %2546 = OpVariable Function 
                       Function f32* %2563 = OpVariable Function 
                       Function f32* %2587 = OpVariable Function 
                       Function f32* %2604 = OpVariable Function 
                      Function bool* %2651 = OpVariable Function 
                       Function f32* %2690 = OpVariable Function 
                       Function f32* %2706 = OpVariable Function 
                     Function f32_3* %2835 = OpVariable Function 
                       Function f32* %2839 = OpVariable Function 
                       Function f32* %2851 = OpVariable Function 
                       Function f32* %2863 = OpVariable Function 
                       Function f32* %2916 = OpVariable Function 
                       Function f32* %2929 = OpVariable Function 
                       Function f32* %2941 = OpVariable Function 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                                 f32_3 %14 = OpLoad %9 
                                 f32_3 %15 = OpVectorShuffle %14 %13 3 4 2 
                                               OpStore %9 %15 
                                 f32_3 %16 = OpLoad %9 
                                 f32_2 %17 = OpVectorShuffle %16 %16 0 1 
                                 f32_2 %20 = OpCompositeConstruct %18 %18 
                                 f32_2 %21 = OpCompositeConstruct %19 %19 
                                 f32_2 %22 = OpExtInst %1 43 %17 %20 %21 
                                 f32_3 %23 = OpLoad %9 
                                 f32_3 %24 = OpVectorShuffle %23 %22 3 4 2 
                                               OpStore %9 %24 
                                 f32_3 %25 = OpLoad %9 
                                 f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                          Uniform f32* %34 = OpAccessChain %30 %32 
                                   f32 %35 = OpLoad %34 
                                 f32_2 %36 = OpCompositeConstruct %35 %35 
                                 f32_2 %37 = OpFMul %26 %36 
                                 f32_3 %38 = OpLoad %9 
                                 f32_3 %39 = OpVectorShuffle %38 %37 3 4 2 
                                               OpStore %9 %39 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_3 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleExplicitLod %51 %53 Lod %27 
                                               OpStore %41 %54 
                   read_only Texture2D %57 = OpLoad %44 
                               sampler %58 = OpLoad %48 
            read_only Texture2DSampled %59 = OpSampledImage %57 %58 
                                 f32_3 %60 = OpLoad %9 
                                 f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                 f32_4 %65 = OpImageSampleExplicitLod %59 %61 Lod %27ConstOffset %65 
                                   f32 %68 = OpCompositeExtract %65 3 
                                               OpStore %56 %68 
                   read_only Texture2D %70 = OpLoad %44 
                               sampler %71 = OpLoad %48 
            read_only Texture2DSampled %72 = OpSampledImage %70 %71 
                                 f32_3 %73 = OpLoad %9 
                                 f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                 f32_4 %76 = OpImageSampleExplicitLod %72 %74 Lod %27ConstOffset %76 
                                   f32 %77 = OpCompositeExtract %76 3 
                                               OpStore %69 %77 
                   read_only Texture2D %79 = OpLoad %44 
                               sampler %80 = OpLoad %48 
            read_only Texture2DSampled %81 = OpSampledImage %79 %80 
                                 f32_3 %82 = OpLoad %9 
                                 f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                                 f32_4 %86 = OpImageSampleExplicitLod %81 %83 Lod %27ConstOffset %86 
                                   f32 %87 = OpCompositeExtract %86 3 
                          Private f32* %89 = OpAccessChain %78 %88 
                                               OpStore %89 %87 
                   read_only Texture2D %91 = OpLoad %44 
                               sampler %92 = OpLoad %48 
            read_only Texture2DSampled %93 = OpSampledImage %91 %92 
                                 f32_3 %94 = OpLoad %9 
                                 f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                 f32_4 %97 = OpImageSampleExplicitLod %93 %95 Lod %27ConstOffset %97 
                                   f32 %98 = OpCompositeExtract %97 3 
                                               OpStore %90 %98 
                         Private f32* %101 = OpAccessChain %41 %67 
                                  f32 %102 = OpLoad %101 
                                  f32 %103 = OpLoad %56 
                                  f32 %104 = OpExtInst %1 40 %102 %103 
                         Private f32* %105 = OpAccessChain %100 %88 
                                               OpStore %105 %104 
                         Private f32* %107 = OpAccessChain %41 %67 
                                  f32 %108 = OpLoad %107 
                                  f32 %109 = OpLoad %56 
                                  f32 %110 = OpExtInst %1 37 %108 %109 
                                               OpStore %106 %110 
                                  f32 %111 = OpLoad %69 
                         Private f32* %112 = OpAccessChain %100 %88 
                                  f32 %113 = OpLoad %112 
                                  f32 %114 = OpExtInst %1 40 %111 %113 
                         Private f32* %115 = OpAccessChain %100 %88 
                                               OpStore %115 %114 
                                  f32 %116 = OpLoad %69 
                                  f32 %117 = OpLoad %106 
                                  f32 %118 = OpExtInst %1 37 %116 %117 
                                               OpStore %106 %118 
                                  f32 %120 = OpLoad %90 
                         Private f32* %121 = OpAccessChain %78 %88 
                                  f32 %122 = OpLoad %121 
                                  f32 %123 = OpExtInst %1 40 %120 %122 
                         Private f32* %124 = OpAccessChain %119 %88 
                                               OpStore %124 %123 
                                  f32 %126 = OpLoad %90 
                         Private f32* %127 = OpAccessChain %78 %88 
                                  f32 %128 = OpLoad %127 
                                  f32 %129 = OpExtInst %1 37 %126 %128 
                         Private f32* %130 = OpAccessChain %125 %88 
                                               OpStore %130 %129 
                         Private f32* %131 = OpAccessChain %100 %88 
                                  f32 %132 = OpLoad %131 
                         Private f32* %133 = OpAccessChain %119 %88 
                                  f32 %134 = OpLoad %133 
                                  f32 %135 = OpExtInst %1 40 %132 %134 
                         Private f32* %136 = OpAccessChain %100 %88 
                                               OpStore %136 %135 
                                  f32 %137 = OpLoad %106 
                         Private f32* %138 = OpAccessChain %125 %88 
                                  f32 %139 = OpLoad %138 
                                  f32 %140 = OpExtInst %1 37 %137 %139 
                                               OpStore %106 %140 
                         Private f32* %141 = OpAccessChain %100 %88 
                                  f32 %142 = OpLoad %141 
                                  f32 %144 = OpFMul %142 %143 
                         Private f32* %145 = OpAccessChain %119 %88 
                                               OpStore %145 %144 
                                  f32 %146 = OpLoad %106 
                                  f32 %147 = OpFNegate %146 
                         Private f32* %148 = OpAccessChain %100 %88 
                                  f32 %149 = OpLoad %148 
                                  f32 %150 = OpFAdd %147 %149 
                         Private f32* %151 = OpAccessChain %100 %88 
                                               OpStore %151 %150 
                         Private f32* %152 = OpAccessChain %119 %88 
                                  f32 %153 = OpLoad %152 
                                  f32 %155 = OpExtInst %1 40 %153 %154 
                                               OpStore %106 %155 
                         Private f32* %159 = OpAccessChain %100 %88 
                                  f32 %160 = OpLoad %159 
                                  f32 %161 = OpLoad %106 
                                 bool %162 = OpFOrdGreaterThanEqual %160 %161 
                                               OpStore %158 %162 
                                 bool %163 = OpLoad %158 
                                               OpSelectionMerge %165 None 
                                               OpBranchConditional %163 %164 %165 
                                      %164 = OpLabel 
                  read_only Texture2D %166 = OpLoad %44 
                              sampler %167 = OpLoad %48 
           read_only Texture2DSampled %168 = OpSampledImage %166 %167 
                                f32_3 %169 = OpLoad %9 
                                f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                f32_4 %172 = OpImageSampleExplicitLod %168 %170 Lod %27ConstOffset %172 
                                  f32 %173 = OpCompositeExtract %172 3 
                                               OpStore %106 %173 
                  read_only Texture2D %174 = OpLoad %44 
                              sampler %175 = OpLoad %48 
           read_only Texture2DSampled %176 = OpSampledImage %174 %175 
                                f32_3 %177 = OpLoad %9 
                                f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                f32_4 %180 = OpImageSampleExplicitLod %176 %178 Lod %27ConstOffset %180 
                                  f32 %181 = OpCompositeExtract %180 3 
                         Private f32* %182 = OpAccessChain %119 %88 
                                               OpStore %182 %181 
                  read_only Texture2D %183 = OpLoad %44 
                              sampler %184 = OpLoad %48 
           read_only Texture2DSampled %185 = OpSampledImage %183 %184 
                                f32_3 %186 = OpLoad %9 
                                f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                f32_4 %189 = OpImageSampleExplicitLod %185 %187 Lod %27ConstOffset %189 
                                  f32 %190 = OpCompositeExtract %189 3 
                         Private f32* %191 = OpAccessChain %125 %88 
                                               OpStore %191 %190 
                  read_only Texture2D %192 = OpLoad %44 
                              sampler %193 = OpLoad %48 
           read_only Texture2DSampled %194 = OpSampledImage %192 %193 
                                f32_3 %195 = OpLoad %9 
                                f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                f32_4 %198 = OpImageSampleExplicitLod %194 %196 Lod %27ConstOffset %198 
                                  f32 %199 = OpCompositeExtract %198 3 
                         Private f32* %200 = OpAccessChain %9 %88 
                                               OpStore %200 %199 
                                  f32 %202 = OpLoad %56 
                         Private f32* %203 = OpAccessChain %78 %88 
                                  f32 %204 = OpLoad %203 
                                  f32 %205 = OpFAdd %202 %204 
                         Private f32* %206 = OpAccessChain %201 %88 
                                               OpStore %206 %205 
                                  f32 %208 = OpLoad %69 
                                  f32 %209 = OpLoad %90 
                                  f32 %210 = OpFAdd %208 %209 
                         Private f32* %211 = OpAccessChain %207 %88 
                                               OpStore %211 %210 
                         Private f32* %212 = OpAccessChain %100 %88 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFDiv %19 %213 
                         Private f32* %215 = OpAccessChain %100 %88 
                                               OpStore %215 %214 
                         Private f32* %217 = OpAccessChain %201 %88 
                                  f32 %218 = OpLoad %217 
                         Private f32* %219 = OpAccessChain %207 %88 
                                  f32 %220 = OpLoad %219 
                                  f32 %221 = OpFAdd %218 %220 
                                               OpStore %216 %221 
                         Private f32* %222 = OpAccessChain %41 %67 
                                  f32 %223 = OpLoad %222 
                                  f32 %225 = OpFMul %223 %224 
                         Private f32* %226 = OpAccessChain %201 %88 
                                  f32 %227 = OpLoad %226 
                                  f32 %228 = OpFAdd %225 %227 
                         Private f32* %229 = OpAccessChain %201 %88 
                                               OpStore %229 %228 
                         Private f32* %230 = OpAccessChain %41 %67 
                                  f32 %231 = OpLoad %230 
                                  f32 %232 = OpFMul %231 %224 
                         Private f32* %233 = OpAccessChain %207 %88 
                                  f32 %234 = OpLoad %233 
                                  f32 %235 = OpFAdd %232 %234 
                         Private f32* %236 = OpAccessChain %207 %88 
                                               OpStore %236 %235 
                         Private f32* %238 = OpAccessChain %119 %88 
                                  f32 %239 = OpLoad %238 
                         Private f32* %240 = OpAccessChain %125 %88 
                                  f32 %241 = OpLoad %240 
                                  f32 %242 = OpFAdd %239 %241 
                         Private f32* %243 = OpAccessChain %237 %88 
                                               OpStore %243 %242 
                                  f32 %244 = OpLoad %106 
                         Private f32* %245 = OpAccessChain %125 %88 
                                  f32 %246 = OpLoad %245 
                                  f32 %247 = OpFAdd %244 %246 
                         Private f32* %248 = OpAccessChain %125 %88 
                                               OpStore %248 %247 
                                  f32 %250 = OpLoad %69 
                                  f32 %251 = OpFMul %250 %224 
                         Private f32* %252 = OpAccessChain %237 %88 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpFAdd %251 %253 
                         Private f32* %255 = OpAccessChain %249 %88 
                                               OpStore %255 %254 
                         Private f32* %256 = OpAccessChain %78 %88 
                                  f32 %257 = OpLoad %256 
                                  f32 %258 = OpFMul %257 %224 
                         Private f32* %259 = OpAccessChain %125 %88 
                                  f32 %260 = OpLoad %259 
                                  f32 %261 = OpFAdd %258 %260 
                         Private f32* %262 = OpAccessChain %125 %88 
                                               OpStore %262 %261 
                         Private f32* %263 = OpAccessChain %9 %88 
                                  f32 %264 = OpLoad %263 
                                  f32 %265 = OpLoad %106 
                                  f32 %266 = OpFAdd %264 %265 
                                               OpStore %106 %266 
                         Private f32* %267 = OpAccessChain %119 %88 
                                  f32 %268 = OpLoad %267 
                         Private f32* %269 = OpAccessChain %9 %88 
                                  f32 %270 = OpLoad %269 
                                  f32 %271 = OpFAdd %268 %270 
                         Private f32* %272 = OpAccessChain %9 %88 
                                               OpStore %272 %271 
                         Private f32* %273 = OpAccessChain %201 %88 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpExtInst %1 4 %274 
                                  f32 %277 = OpFMul %275 %276 
                         Private f32* %278 = OpAccessChain %249 %88 
                                  f32 %279 = OpLoad %278 
                                  f32 %280 = OpExtInst %1 4 %279 
                                  f32 %281 = OpFAdd %277 %280 
                         Private f32* %282 = OpAccessChain %201 %88 
                                               OpStore %282 %281 
                         Private f32* %283 = OpAccessChain %207 %88 
                                  f32 %284 = OpLoad %283 
                                  f32 %285 = OpExtInst %1 4 %284 
                                  f32 %286 = OpFMul %285 %276 
                         Private f32* %287 = OpAccessChain %125 %88 
                                  f32 %288 = OpLoad %287 
                                  f32 %289 = OpExtInst %1 4 %288 
                                  f32 %290 = OpFAdd %286 %289 
                         Private f32* %291 = OpAccessChain %119 %88 
                                               OpStore %291 %290 
                                  f32 %292 = OpLoad %90 
                                  f32 %293 = OpFMul %292 %224 
                                  f32 %294 = OpLoad %106 
                                  f32 %295 = OpFAdd %293 %294 
                         Private f32* %296 = OpAccessChain %125 %88 
                                               OpStore %296 %295 
                                  f32 %297 = OpLoad %56 
                                  f32 %298 = OpFMul %297 %224 
                         Private f32* %299 = OpAccessChain %9 %88 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFAdd %298 %300 
                         Private f32* %302 = OpAccessChain %9 %88 
                                               OpStore %302 %301 
                         Private f32* %303 = OpAccessChain %201 %88 
                                  f32 %304 = OpLoad %303 
                         Private f32* %305 = OpAccessChain %125 %88 
                                  f32 %306 = OpLoad %305 
                                  f32 %307 = OpExtInst %1 4 %306 
                                  f32 %308 = OpFAdd %304 %307 
                         Private f32* %309 = OpAccessChain %201 %88 
                                               OpStore %309 %308 
                         Private f32* %310 = OpAccessChain %119 %88 
                                  f32 %311 = OpLoad %310 
                         Private f32* %312 = OpAccessChain %9 %88 
                                  f32 %313 = OpLoad %312 
                                  f32 %314 = OpExtInst %1 4 %313 
                                  f32 %315 = OpFAdd %311 %314 
                         Private f32* %316 = OpAccessChain %9 %88 
                                               OpStore %316 %315 
                         Private f32* %317 = OpAccessChain %237 %88 
                                  f32 %318 = OpLoad %317 
                                  f32 %319 = OpLoad %106 
                                  f32 %320 = OpFAdd %318 %319 
                                               OpStore %106 %320 
                         Private f32* %324 = OpAccessChain %201 %88 
                                  f32 %325 = OpLoad %324 
                         Private f32* %326 = OpAccessChain %9 %88 
                                  f32 %327 = OpLoad %326 
                                 bool %328 = OpFOrdGreaterThanEqual %325 %327 
                        Private bool* %329 = OpAccessChain %323 %88 
                                               OpStore %329 %328 
                                  f32 %330 = OpLoad %216 
                                  f32 %331 = OpFMul %330 %276 
                                  f32 %332 = OpLoad %106 
                                  f32 %333 = OpFAdd %331 %332 
                         Private f32* %334 = OpAccessChain %201 %88 
                                               OpStore %334 %333 
                        Private bool* %335 = OpAccessChain %323 %88 
                                 bool %336 = OpLoad %335 
                                               OpSelectionMerge %340 None 
                                               OpBranchConditional %336 %339 %343 
                                      %339 = OpLabel 
                         Private f32* %341 = OpAccessChain %78 %88 
                                  f32 %342 = OpLoad %341 
                                               OpStore %338 %342 
                                               OpBranch %340 
                                      %343 = OpLabel 
                                  f32 %344 = OpLoad %90 
                                               OpStore %338 %344 
                                               OpBranch %340 
                                      %340 = OpLabel 
                                  f32 %345 = OpLoad %338 
                         Private f32* %346 = OpAccessChain %78 %88 
                                               OpStore %346 %345 
                        Private bool* %347 = OpAccessChain %323 %88 
                                 bool %348 = OpLoad %347 
                                  f32 %349 = OpLoad %56 
                                  f32 %350 = OpLoad %69 
                                  f32 %351 = OpSelect %348 %349 %350 
                                               OpStore %56 %351 
                        Private bool* %352 = OpAccessChain %323 %88 
                                 bool %353 = OpLoad %352 
                                               OpSelectionMerge %356 None 
                                               OpBranchConditional %353 %355 %361 
                                      %355 = OpLabel 
                         Uniform f32* %359 = OpAccessChain %30 %357 %358 
                                  f32 %360 = OpLoad %359 
                                               OpStore %354 %360 
                                               OpBranch %356 
                                      %361 = OpLabel 
                         Uniform f32* %362 = OpAccessChain %30 %357 %88 
                                  f32 %363 = OpLoad %362 
                                               OpStore %354 %363 
                                               OpBranch %356 
                                      %356 = OpLabel 
                                  f32 %364 = OpLoad %354 
                                               OpStore %69 %364 
                         Private f32* %365 = OpAccessChain %201 %88 
                                  f32 %366 = OpLoad %365 
                                  f32 %368 = OpFMul %366 %367 
                         Private f32* %369 = OpAccessChain %41 %67 
                                  f32 %370 = OpLoad %369 
                                  f32 %371 = OpFNegate %370 
                                  f32 %372 = OpFAdd %368 %371 
                         Private f32* %373 = OpAccessChain %201 %88 
                                               OpStore %373 %372 
                         Private f32* %374 = OpAccessChain %41 %67 
                                  f32 %375 = OpLoad %374 
                                  f32 %376 = OpFNegate %375 
                         Private f32* %377 = OpAccessChain %78 %88 
                                  f32 %378 = OpLoad %377 
                                  f32 %379 = OpFAdd %376 %378 
                                               OpStore %90 %379 
                         Private f32* %380 = OpAccessChain %41 %67 
                                  f32 %381 = OpLoad %380 
                                  f32 %382 = OpFNegate %381 
                                  f32 %383 = OpLoad %56 
                                  f32 %384 = OpFAdd %382 %383 
                                               OpStore %106 %384 
                         Private f32* %385 = OpAccessChain %41 %67 
                                  f32 %386 = OpLoad %385 
                         Private f32* %387 = OpAccessChain %78 %88 
                                  f32 %388 = OpLoad %387 
                                  f32 %389 = OpFAdd %386 %388 
                         Private f32* %390 = OpAccessChain %78 %88 
                                               OpStore %390 %389 
                         Private f32* %391 = OpAccessChain %41 %67 
                                  f32 %392 = OpLoad %391 
                                  f32 %393 = OpLoad %56 
                                  f32 %394 = OpFAdd %392 %393 
                                               OpStore %56 %394 
                                  f32 %396 = OpLoad %90 
                                  f32 %397 = OpExtInst %1 4 %396 
                                  f32 %398 = OpLoad %106 
                                  f32 %399 = OpExtInst %1 4 %398 
                                 bool %400 = OpFOrdGreaterThanEqual %397 %399 
                                               OpStore %395 %400 
                                  f32 %401 = OpLoad %106 
                                  f32 %402 = OpExtInst %1 4 %401 
                                  f32 %403 = OpLoad %90 
                                  f32 %404 = OpExtInst %1 4 %403 
                                  f32 %405 = OpExtInst %1 40 %402 %404 
                                               OpStore %90 %405 
                                 bool %406 = OpLoad %395 
                                               OpSelectionMerge %409 None 
                                               OpBranchConditional %406 %408 %412 
                                      %408 = OpLabel 
                                  f32 %410 = OpLoad %69 
                                  f32 %411 = OpFNegate %410 
                                               OpStore %407 %411 
                                               OpBranch %409 
                                      %412 = OpLabel 
                                  f32 %413 = OpLoad %69 
                                               OpStore %407 %413 
                                               OpBranch %409 
                                      %409 = OpLabel 
                                  f32 %414 = OpLoad %407 
                                               OpStore %69 %414 
                         Private f32* %415 = OpAccessChain %100 %88 
                                  f32 %416 = OpLoad %415 
                         Private f32* %417 = OpAccessChain %201 %88 
                                  f32 %418 = OpLoad %417 
                                  f32 %419 = OpExtInst %1 4 %418 
                                  f32 %420 = OpFMul %416 %419 
                         Private f32* %421 = OpAccessChain %201 %88 
                                               OpStore %421 %420 
                         Private f32* %422 = OpAccessChain %201 %88 
                                  f32 %423 = OpLoad %422 
                                  f32 %424 = OpExtInst %1 43 %423 %18 %19 
                         Private f32* %425 = OpAccessChain %201 %88 
                                               OpStore %425 %424 
                        Private bool* %426 = OpAccessChain %323 %88 
                                 bool %427 = OpLoad %426 
                                               OpSelectionMerge %430 None 
                                               OpBranchConditional %427 %429 %433 
                                      %429 = OpLabel 
                         Uniform f32* %431 = OpAccessChain %30 %357 %88 
                                  f32 %432 = OpLoad %431 
                                               OpStore %428 %432 
                                               OpBranch %430 
                                      %433 = OpLabel 
                                               OpStore %428 %18 
                                               OpBranch %430 
                                      %430 = OpLabel 
                                  f32 %434 = OpLoad %428 
                         Private f32* %435 = OpAccessChain %100 %88 
                                               OpStore %435 %434 
                        Private bool* %436 = OpAccessChain %323 %88 
                                 bool %437 = OpLoad %436 
                                               OpSelectionMerge %440 None 
                                               OpBranchConditional %437 %439 %441 
                                      %439 = OpLabel 
                                               OpStore %438 %18 
                                               OpBranch %440 
                                      %441 = OpLabel 
                         Uniform f32* %442 = OpAccessChain %30 %357 %358 
                                  f32 %443 = OpLoad %442 
                                               OpStore %438 %443 
                                               OpBranch %440 
                                      %440 = OpLabel 
                                  f32 %444 = OpLoad %438 
                         Private f32* %445 = OpAccessChain %100 %358 
                                               OpStore %445 %444 
                                  f32 %446 = OpLoad %69 
                                f32_2 %447 = OpCompositeConstruct %446 %446 
                                f32_2 %450 = OpFMul %447 %449 
                                f32_2 %451 = OpLoad vs_TEXCOORD0 
                                f32_2 %452 = OpFAdd %450 %451 
                                               OpStore %125 %452 
                        Private bool* %453 = OpAccessChain %323 %88 
                                 bool %454 = OpLoad %453 
                                               OpSelectionMerge %457 None 
                                               OpBranchConditional %454 %456 %461 
                                      %456 = OpLabel 
                           Input f32* %459 = OpAccessChain vs_TEXCOORD0 %88 
                                  f32 %460 = OpLoad %459 
                                               OpStore %455 %460 
                                               OpBranch %457 
                                      %461 = OpLabel 
                         Private f32* %462 = OpAccessChain %125 %88 
                                  f32 %463 = OpLoad %462 
                                               OpStore %455 %463 
                                               OpBranch %457 
                                      %457 = OpLabel 
                                  f32 %464 = OpLoad %455 
                         Private f32* %465 = OpAccessChain %125 %88 
                                               OpStore %465 %464 
                        Private bool* %466 = OpAccessChain %323 %88 
                                 bool %467 = OpLoad %466 
                                               OpSelectionMerge %470 None 
                                               OpBranchConditional %467 %469 %473 
                                      %469 = OpLabel 
                         Private f32* %471 = OpAccessChain %125 %358 
                                  f32 %472 = OpLoad %471 
                                               OpStore %468 %472 
                                               OpBranch %470 
                                      %473 = OpLabel 
                           Input f32* %474 = OpAccessChain vs_TEXCOORD0 %358 
                                  f32 %475 = OpLoad %474 
                                               OpStore %468 %475 
                                               OpBranch %470 
                                      %470 = OpLabel 
                                  f32 %476 = OpLoad %468 
                         Private f32* %477 = OpAccessChain %125 %358 
                                               OpStore %477 %476 
                                f32_2 %478 = OpLoad %100 
                                f32_2 %479 = OpFNegate %478 
                                f32_2 %480 = OpLoad %125 
                                f32_2 %481 = OpFAdd %479 %480 
                                f32_3 %482 = OpLoad %237 
                                f32_3 %483 = OpVectorShuffle %482 %481 3 4 2 
                                               OpStore %237 %483 
                                f32_2 %485 = OpLoad %100 
                                f32_2 %486 = OpLoad %125 
                                f32_2 %487 = OpFAdd %485 %486 
                                f32_3 %488 = OpLoad %484 
                                f32_3 %489 = OpVectorShuffle %488 %487 3 4 2 
                                               OpStore %484 %489 
                         Private f32* %490 = OpAccessChain %201 %88 
                                  f32 %491 = OpLoad %490 
                                  f32 %492 = OpFMul %491 %224 
                                  f32 %494 = OpFAdd %492 %493 
                         Private f32* %495 = OpAccessChain %125 %88 
                                               OpStore %495 %494 
                                f32_3 %496 = OpLoad %237 
                                f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                                               OpStore %207 %497 
                                f32_2 %498 = OpLoad %207 
                                f32_2 %499 = OpCompositeConstruct %18 %18 
                                f32_2 %500 = OpCompositeConstruct %19 %19 
                                f32_2 %501 = OpExtInst %1 43 %498 %499 %500 
                                               OpStore %207 %501 
                                f32_2 %502 = OpLoad %207 
                         Uniform f32* %503 = OpAccessChain %30 %32 
                                  f32 %504 = OpLoad %503 
                                f32_2 %505 = OpCompositeConstruct %504 %504 
                                f32_2 %506 = OpFMul %502 %505 
                                               OpStore %207 %506 
                  read_only Texture2D %507 = OpLoad %44 
                              sampler %508 = OpLoad %48 
           read_only Texture2DSampled %509 = OpSampledImage %507 %508 
                                f32_2 %510 = OpLoad %207 
                                f32_4 %511 = OpImageSampleExplicitLod %509 %510 Lod %27 
                                  f32 %512 = OpCompositeExtract %511 3 
                         Private f32* %513 = OpAccessChain %207 %88 
                                               OpStore %513 %512 
                         Private f32* %514 = OpAccessChain %201 %88 
                                  f32 %515 = OpLoad %514 
                         Private f32* %516 = OpAccessChain %201 %88 
                                  f32 %517 = OpLoad %516 
                                  f32 %518 = OpFMul %515 %517 
                         Private f32* %519 = OpAccessChain %201 %88 
                                               OpStore %519 %518 
                                f32_3 %521 = OpLoad %484 
                                f32_2 %522 = OpVectorShuffle %521 %521 0 1 
                                               OpStore %520 %522 
                                f32_2 %523 = OpLoad %520 
                                f32_2 %524 = OpCompositeConstruct %18 %18 
                                f32_2 %525 = OpCompositeConstruct %19 %19 
                                f32_2 %526 = OpExtInst %1 43 %523 %524 %525 
                                               OpStore %520 %526 
                                f32_2 %527 = OpLoad %520 
                         Uniform f32* %528 = OpAccessChain %30 %32 
                                  f32 %529 = OpLoad %528 
                                f32_2 %530 = OpCompositeConstruct %529 %529 
                                f32_2 %531 = OpFMul %527 %530 
                                               OpStore %520 %531 
                  read_only Texture2D %532 = OpLoad %44 
                              sampler %533 = OpLoad %48 
           read_only Texture2DSampled %534 = OpSampledImage %532 %533 
                                f32_2 %535 = OpLoad %520 
                                f32_4 %536 = OpImageSampleExplicitLod %534 %535 Lod %27 
                                  f32 %537 = OpCompositeExtract %536 3 
                                               OpStore %216 %537 
                                 bool %538 = OpLoad %395 
                                               OpSelectionMerge %541 None 
                                               OpBranchConditional %538 %540 %544 
                                      %540 = OpLabel 
                         Private f32* %542 = OpAccessChain %78 %88 
                                  f32 %543 = OpLoad %542 
                                               OpStore %539 %543 
                                               OpBranch %541 
                                      %544 = OpLabel 
                                  f32 %545 = OpLoad %56 
                                               OpStore %539 %545 
                                               OpBranch %541 
                                      %541 = OpLabel 
                                  f32 %546 = OpLoad %539 
                                               OpStore %56 %546 
                                  f32 %547 = OpLoad %90 
                                  f32 %549 = OpFMul %547 %548 
                         Private f32* %550 = OpAccessChain %78 %88 
                                               OpStore %550 %549 
                                  f32 %551 = OpLoad %56 
                                  f32 %552 = OpFNegate %551 
                                  f32 %553 = OpFMul %552 %448 
                         Private f32* %554 = OpAccessChain %41 %67 
                                  f32 %555 = OpLoad %554 
                                  f32 %556 = OpFAdd %553 %555 
                                               OpStore %90 %556 
                         Private f32* %557 = OpAccessChain %201 %88 
                                  f32 %558 = OpLoad %557 
                         Private f32* %559 = OpAccessChain %125 %88 
                                  f32 %560 = OpLoad %559 
                                  f32 %561 = OpFMul %558 %560 
                         Private f32* %562 = OpAccessChain %201 %88 
                                               OpStore %562 %561 
                                  f32 %565 = OpLoad %90 
                                 bool %566 = OpFOrdLessThan %565 %18 
                                  u32 %568 = OpSelect %566 %567 %88 
                                  i32 %569 = OpBitcast %568 
                                               OpStore %564 %569 
                                  f32 %570 = OpLoad %56 
                                  f32 %571 = OpFNegate %570 
                                  f32 %572 = OpFMul %571 %448 
                         Private f32* %573 = OpAccessChain %207 %88 
                                  f32 %574 = OpLoad %573 
                                  f32 %575 = OpFAdd %572 %574 
                         Private f32* %576 = OpAccessChain %119 %88 
                                               OpStore %576 %575 
                                  f32 %577 = OpLoad %56 
                                  f32 %578 = OpFNegate %577 
                                  f32 %579 = OpFMul %578 %448 
                                  f32 %580 = OpLoad %216 
                                  f32 %581 = OpFAdd %579 %580 
                         Private f32* %582 = OpAccessChain %119 %358 
                                               OpStore %582 %581 
                                f32_2 %585 = OpLoad %119 
                                f32_4 %586 = OpVectorShuffle %585 %585 0 1 0 1 
                                f32_4 %587 = OpExtInst %1 4 %586 
                                f32_3 %588 = OpLoad %78 
                                f32_4 %589 = OpVectorShuffle %588 %588 0 0 0 0 
                               bool_4 %591 = OpFOrdGreaterThanEqual %587 %589 
                               bool_2 %593 = OpVectorShuffle %591 %591 0 1 
                                u32_2 %597 = OpSelect %593 %596 %595 
                                u32_2 %598 = OpCompositeConstruct %567 %567 
                                u32_2 %599 = OpIMul %597 %598 
                                i32_2 %600 = OpBitcast %599 
                                               OpStore %584 %600 
                         Private f32* %601 = OpAccessChain %100 %88 
                                  f32 %602 = OpLoad %601 
                                  f32 %603 = OpFNegate %602 
                                  f32 %605 = OpFMul %603 %604 
                         Private f32* %606 = OpAccessChain %237 %88 
                                  f32 %607 = OpLoad %606 
                                  f32 %608 = OpFAdd %605 %607 
                         Private f32* %609 = OpAccessChain %520 %88 
                                               OpStore %609 %608 
                         Private i32* %610 = OpAccessChain %584 %88 
                                  i32 %611 = OpLoad %610 
                                 bool %612 = OpINotEqual %611 %32 
                                               OpSelectionMerge %615 None 
                                               OpBranchConditional %612 %614 %618 
                                      %614 = OpLabel 
                         Private f32* %616 = OpAccessChain %237 %88 
                                  f32 %617 = OpLoad %616 
                                               OpStore %613 %617 
                                               OpBranch %615 
                                      %618 = OpLabel 
                         Private f32* %619 = OpAccessChain %520 %88 
                                  f32 %620 = OpLoad %619 
                                               OpStore %613 %620 
                                               OpBranch %615 
                                      %615 = OpLabel 
                                  f32 %621 = OpLoad %613 
                         Private f32* %622 = OpAccessChain %237 %88 
                                               OpStore %622 %621 
                         Private f32* %624 = OpAccessChain %100 %358 
                                  f32 %625 = OpLoad %624 
                                  f32 %626 = OpFNegate %625 
                                  f32 %627 = OpFMul %626 %604 
                         Private f32* %628 = OpAccessChain %237 %358 
                                  f32 %629 = OpLoad %628 
                                  f32 %630 = OpFAdd %627 %629 
                                               OpStore %623 %630 
                         Private i32* %631 = OpAccessChain %584 %88 
                                  i32 %632 = OpLoad %631 
                                 bool %633 = OpINotEqual %632 %32 
                                               OpSelectionMerge %636 None 
                                               OpBranchConditional %633 %635 %639 
                                      %635 = OpLabel 
                         Private f32* %637 = OpAccessChain %237 %358 
                                  f32 %638 = OpLoad %637 
                                               OpStore %634 %638 
                                               OpBranch %636 
                                      %639 = OpLabel 
                                  f32 %640 = OpLoad %623 
                                               OpStore %634 %640 
                                               OpBranch %636 
                                      %636 = OpLabel 
                                  f32 %641 = OpLoad %634 
                         Private f32* %643 = OpAccessChain %237 %642 
                                               OpStore %643 %641 
                                i32_2 %647 = OpLoad %584 
                                i32_2 %648 = OpNot %647 
                                i32_3 %649 = OpLoad %646 
                                i32_3 %650 = OpVectorShuffle %649 %648 3 1 4 
                                               OpStore %646 %650 
                         Private i32* %651 = OpAccessChain %646 %642 
                                  i32 %652 = OpLoad %651 
                                  u32 %653 = OpBitcast %652 
                         Private i32* %654 = OpAccessChain %646 %88 
                                  i32 %655 = OpLoad %654 
                                  u32 %656 = OpBitcast %655 
                                  u32 %657 = OpBitwiseOr %653 %656 
                                  i32 %658 = OpBitcast %657 
                         Private i32* %659 = OpAccessChain %646 %88 
                                               OpStore %659 %658 
                         Private f32* %660 = OpAccessChain %100 %88 
                                  f32 %661 = OpLoad %660 
                                  f32 %662 = OpFMul %661 %604 
                         Private f32* %663 = OpAccessChain %484 %88 
                                  f32 %664 = OpLoad %663 
                                  f32 %665 = OpFAdd %662 %664 
                                               OpStore %623 %665 
                         Private i32* %666 = OpAccessChain %584 %358 
                                  i32 %667 = OpLoad %666 
                                 bool %668 = OpINotEqual %667 %32 
                                               OpSelectionMerge %671 None 
                                               OpBranchConditional %668 %670 %674 
                                      %670 = OpLabel 
                         Private f32* %672 = OpAccessChain %484 %88 
                                  f32 %673 = OpLoad %672 
                                               OpStore %669 %673 
                                               OpBranch %671 
                                      %674 = OpLabel 
                                  f32 %675 = OpLoad %623 
                                               OpStore %669 %675 
                                               OpBranch %671 
                                      %671 = OpLabel 
                                  f32 %676 = OpLoad %669 
                         Private f32* %677 = OpAccessChain %484 %88 
                                               OpStore %677 %676 
                         Private f32* %678 = OpAccessChain %100 %358 
                                  f32 %679 = OpLoad %678 
                                  f32 %680 = OpFMul %679 %604 
                         Private f32* %681 = OpAccessChain %484 %358 
                                  f32 %682 = OpLoad %681 
                                  f32 %683 = OpFAdd %680 %682 
                                               OpStore %623 %683 
                         Private i32* %684 = OpAccessChain %584 %358 
                                  i32 %685 = OpLoad %684 
                                 bool %686 = OpINotEqual %685 %32 
                                               OpSelectionMerge %689 None 
                                               OpBranchConditional %686 %688 %692 
                                      %688 = OpLabel 
                         Private f32* %690 = OpAccessChain %484 %358 
                                  f32 %691 = OpLoad %690 
                                               OpStore %687 %691 
                                               OpBranch %689 
                                      %692 = OpLabel 
                                  f32 %693 = OpLoad %623 
                                               OpStore %687 %693 
                                               OpBranch %689 
                                      %689 = OpLabel 
                                  f32 %694 = OpLoad %687 
                         Private f32* %695 = OpAccessChain %484 %642 
                                               OpStore %695 %694 
                         Private i32* %696 = OpAccessChain %646 %88 
                                  i32 %697 = OpLoad %696 
                                 bool %698 = OpINotEqual %697 %32 
                                               OpSelectionMerge %700 None 
                                               OpBranchConditional %698 %699 %700 
                                      %699 = OpLabel 
                         Private i32* %701 = OpAccessChain %584 %88 
                                  i32 %702 = OpLoad %701 
                                 bool %703 = OpIEqual %702 %32 
                                               OpSelectionMerge %705 None 
                                               OpBranchConditional %703 %704 %705 
                                      %704 = OpLabel 
                                f32_3 %706 = OpLoad %237 
                                f32_2 %707 = OpVectorShuffle %706 %706 0 2 
                                f32_3 %708 = OpLoad %249 
                                f32_3 %709 = OpVectorShuffle %708 %707 3 1 4 
                                               OpStore %249 %709 
                                f32_3 %710 = OpLoad %249 
                                f32_2 %711 = OpVectorShuffle %710 %710 0 2 
                                f32_2 %712 = OpCompositeConstruct %18 %18 
                                f32_2 %713 = OpCompositeConstruct %19 %19 
                                f32_2 %714 = OpExtInst %1 43 %711 %712 %713 
                                f32_3 %715 = OpLoad %249 
                                f32_3 %716 = OpVectorShuffle %715 %714 3 1 4 
                                               OpStore %249 %716 
                                f32_3 %717 = OpLoad %249 
                                f32_2 %718 = OpVectorShuffle %717 %717 0 2 
                         Uniform f32* %719 = OpAccessChain %30 %32 
                                  f32 %720 = OpLoad %719 
                                f32_2 %721 = OpCompositeConstruct %720 %720 
                                f32_2 %722 = OpFMul %718 %721 
                                f32_3 %723 = OpLoad %249 
                                f32_3 %724 = OpVectorShuffle %723 %722 3 1 4 
                                               OpStore %249 %724 
                  read_only Texture2D %725 = OpLoad %44 
                              sampler %726 = OpLoad %48 
           read_only Texture2DSampled %727 = OpSampledImage %725 %726 
                                f32_3 %728 = OpLoad %249 
                                f32_2 %729 = OpVectorShuffle %728 %728 0 2 
                                f32_4 %730 = OpImageSampleExplicitLod %727 %729 Lod %27 
                                  f32 %731 = OpCompositeExtract %730 3 
                         Private f32* %732 = OpAccessChain %119 %88 
                                               OpStore %732 %731 
                                               OpBranch %705 
                                      %705 = OpLabel 
                         Private i32* %733 = OpAccessChain %584 %358 
                                  i32 %734 = OpLoad %733 
                                 bool %735 = OpIEqual %734 %32 
                                               OpSelectionMerge %737 None 
                                               OpBranchConditional %735 %736 %737 
                                      %736 = OpLabel 
                                f32_3 %738 = OpLoad %484 
                                f32_2 %739 = OpVectorShuffle %738 %738 0 2 
                                f32_3 %740 = OpLoad %249 
                                f32_3 %741 = OpVectorShuffle %740 %739 3 1 4 
                                               OpStore %249 %741 
                                f32_3 %742 = OpLoad %249 
                                f32_2 %743 = OpVectorShuffle %742 %742 0 2 
                                f32_2 %744 = OpCompositeConstruct %18 %18 
                                f32_2 %745 = OpCompositeConstruct %19 %19 
                                f32_2 %746 = OpExtInst %1 43 %743 %744 %745 
                                f32_3 %747 = OpLoad %249 
                                f32_3 %748 = OpVectorShuffle %747 %746 3 1 4 
                                               OpStore %249 %748 
                                f32_3 %749 = OpLoad %249 
                                f32_2 %750 = OpVectorShuffle %749 %749 0 2 
                         Uniform f32* %751 = OpAccessChain %30 %32 
                                  f32 %752 = OpLoad %751 
                                f32_2 %753 = OpCompositeConstruct %752 %752 
                                f32_2 %754 = OpFMul %750 %753 
                                f32_3 %755 = OpLoad %249 
                                f32_3 %756 = OpVectorShuffle %755 %754 3 1 4 
                                               OpStore %249 %756 
                  read_only Texture2D %757 = OpLoad %44 
                              sampler %758 = OpLoad %48 
           read_only Texture2DSampled %759 = OpSampledImage %757 %758 
                                f32_3 %760 = OpLoad %249 
                                f32_2 %761 = OpVectorShuffle %760 %760 0 2 
                                f32_4 %762 = OpImageSampleExplicitLod %759 %761 Lod %27 
                                  f32 %763 = OpCompositeExtract %762 3 
                         Private f32* %764 = OpAccessChain %119 %358 
                                               OpStore %764 %763 
                                               OpBranch %737 
                                      %737 = OpLabel 
                                  f32 %765 = OpLoad %56 
                                  f32 %766 = OpFNegate %765 
                                  f32 %767 = OpFMul %766 %448 
                         Private f32* %768 = OpAccessChain %119 %88 
                                  f32 %769 = OpLoad %768 
                                  f32 %770 = OpFAdd %767 %769 
                         Private f32* %771 = OpAccessChain %249 %88 
                                               OpStore %771 %770 
                         Private i32* %772 = OpAccessChain %584 %88 
                                  i32 %773 = OpLoad %772 
                                 bool %774 = OpINotEqual %773 %32 
                                               OpSelectionMerge %777 None 
                                               OpBranchConditional %774 %776 %780 
                                      %776 = OpLabel 
                         Private f32* %778 = OpAccessChain %119 %88 
                                  f32 %779 = OpLoad %778 
                                               OpStore %775 %779 
                                               OpBranch %777 
                                      %780 = OpLabel 
                         Private f32* %781 = OpAccessChain %249 %88 
                                  f32 %782 = OpLoad %781 
                                               OpStore %775 %782 
                                               OpBranch %777 
                                      %777 = OpLabel 
                                  f32 %783 = OpLoad %775 
                         Private f32* %784 = OpAccessChain %119 %88 
                                               OpStore %784 %783 
                                  f32 %785 = OpLoad %56 
                                  f32 %786 = OpFNegate %785 
                                  f32 %787 = OpFMul %786 %448 
                         Private f32* %788 = OpAccessChain %119 %358 
                                  f32 %789 = OpLoad %788 
                                  f32 %790 = OpFAdd %787 %789 
                         Private f32* %791 = OpAccessChain %207 %88 
                                               OpStore %791 %790 
                         Private i32* %792 = OpAccessChain %584 %358 
                                  i32 %793 = OpLoad %792 
                                 bool %794 = OpINotEqual %793 %32 
                                               OpSelectionMerge %797 None 
                                               OpBranchConditional %794 %796 %800 
                                      %796 = OpLabel 
                         Private f32* %798 = OpAccessChain %119 %358 
                                  f32 %799 = OpLoad %798 
                                               OpStore %795 %799 
                                               OpBranch %797 
                                      %800 = OpLabel 
                         Private f32* %801 = OpAccessChain %207 %88 
                                  f32 %802 = OpLoad %801 
                                               OpStore %795 %802 
                                               OpBranch %797 
                                      %797 = OpLabel 
                                  f32 %803 = OpLoad %795 
                         Private f32* %804 = OpAccessChain %119 %358 
                                               OpStore %804 %803 
                                f32_2 %805 = OpLoad %119 
                                f32_4 %806 = OpVectorShuffle %805 %805 0 1 0 1 
                                f32_4 %807 = OpExtInst %1 4 %806 
                                f32_3 %808 = OpLoad %78 
                                f32_4 %809 = OpVectorShuffle %808 %808 0 0 0 0 
                               bool_4 %810 = OpFOrdGreaterThanEqual %807 %809 
                               bool_2 %811 = OpVectorShuffle %810 %810 0 1 
                                u32_2 %812 = OpSelect %811 %596 %595 
                                u32_2 %813 = OpCompositeConstruct %567 %567 
                                u32_2 %814 = OpIMul %812 %813 
                                i32_2 %815 = OpBitcast %814 
                                               OpStore %584 %815 
                         Private f32* %816 = OpAccessChain %100 %88 
                                  f32 %817 = OpLoad %816 
                                  f32 %818 = OpFNegate %817 
                                  f32 %819 = OpFMul %818 %276 
                         Private f32* %820 = OpAccessChain %237 %88 
                                  f32 %821 = OpLoad %820 
                                  f32 %822 = OpFAdd %819 %821 
                         Private f32* %823 = OpAccessChain %249 %88 
                                               OpStore %823 %822 
                         Private i32* %824 = OpAccessChain %584 %88 
                                  i32 %825 = OpLoad %824 
                                 bool %826 = OpINotEqual %825 %32 
                                               OpSelectionMerge %829 None 
                                               OpBranchConditional %826 %828 %832 
                                      %828 = OpLabel 
                         Private f32* %830 = OpAccessChain %237 %88 
                                  f32 %831 = OpLoad %830 
                                               OpStore %827 %831 
                                               OpBranch %829 
                                      %832 = OpLabel 
                         Private f32* %833 = OpAccessChain %249 %88 
                                  f32 %834 = OpLoad %833 
                                               OpStore %827 %834 
                                               OpBranch %829 
                                      %829 = OpLabel 
                                  f32 %835 = OpLoad %827 
                         Private f32* %836 = OpAccessChain %237 %88 
                                               OpStore %836 %835 
                         Private f32* %837 = OpAccessChain %100 %358 
                                  f32 %838 = OpLoad %837 
                                  f32 %839 = OpFNegate %838 
                                  f32 %840 = OpFMul %839 %276 
                         Private f32* %841 = OpAccessChain %237 %642 
                                  f32 %842 = OpLoad %841 
                                  f32 %843 = OpFAdd %840 %842 
                         Private f32* %844 = OpAccessChain %249 %88 
                                               OpStore %844 %843 
                         Private i32* %845 = OpAccessChain %584 %88 
                                  i32 %846 = OpLoad %845 
                                 bool %847 = OpINotEqual %846 %32 
                                               OpSelectionMerge %850 None 
                                               OpBranchConditional %847 %849 %853 
                                      %849 = OpLabel 
                         Private f32* %851 = OpAccessChain %237 %642 
                                  f32 %852 = OpLoad %851 
                                               OpStore %848 %852 
                                               OpBranch %850 
                                      %853 = OpLabel 
                         Private f32* %854 = OpAccessChain %249 %88 
                                  f32 %855 = OpLoad %854 
                                               OpStore %848 %855 
                                               OpBranch %850 
                                      %850 = OpLabel 
                                  f32 %856 = OpLoad %848 
                         Private f32* %857 = OpAccessChain %237 %642 
                                               OpStore %857 %856 
                                i32_2 %858 = OpLoad %584 
                                i32_2 %859 = OpNot %858 
                                i32_3 %860 = OpLoad %646 
                                i32_3 %861 = OpVectorShuffle %860 %859 3 1 4 
                                               OpStore %646 %861 
                         Private i32* %862 = OpAccessChain %646 %642 
                                  i32 %863 = OpLoad %862 
                                  u32 %864 = OpBitcast %863 
                         Private i32* %865 = OpAccessChain %646 %88 
                                  i32 %866 = OpLoad %865 
                                  u32 %867 = OpBitcast %866 
                                  u32 %868 = OpBitwiseOr %864 %867 
                                  i32 %869 = OpBitcast %868 
                         Private i32* %870 = OpAccessChain %646 %88 
                                               OpStore %870 %869 
                         Private f32* %871 = OpAccessChain %100 %88 
                                  f32 %872 = OpLoad %871 
                                  f32 %873 = OpFMul %872 %276 
                         Private f32* %874 = OpAccessChain %484 %88 
                                  f32 %875 = OpLoad %874 
                                  f32 %876 = OpFAdd %873 %875 
                                               OpStore %623 %876 
                         Private i32* %877 = OpAccessChain %584 %358 
                                  i32 %878 = OpLoad %877 
                                 bool %879 = OpINotEqual %878 %32 
                                               OpSelectionMerge %882 None 
                                               OpBranchConditional %879 %881 %885 
                                      %881 = OpLabel 
                         Private f32* %883 = OpAccessChain %484 %88 
                                  f32 %884 = OpLoad %883 
                                               OpStore %880 %884 
                                               OpBranch %882 
                                      %885 = OpLabel 
                                  f32 %886 = OpLoad %623 
                                               OpStore %880 %886 
                                               OpBranch %882 
                                      %882 = OpLabel 
                                  f32 %887 = OpLoad %880 
                         Private f32* %888 = OpAccessChain %484 %88 
                                               OpStore %888 %887 
                         Private f32* %889 = OpAccessChain %100 %358 
                                  f32 %890 = OpLoad %889 
                                  f32 %891 = OpFMul %890 %276 
                         Private f32* %892 = OpAccessChain %484 %642 
                                  f32 %893 = OpLoad %892 
                                  f32 %894 = OpFAdd %891 %893 
                                               OpStore %623 %894 
                         Private i32* %895 = OpAccessChain %584 %358 
                                  i32 %896 = OpLoad %895 
                                 bool %897 = OpINotEqual %896 %32 
                                               OpSelectionMerge %900 None 
                                               OpBranchConditional %897 %899 %903 
                                      %899 = OpLabel 
                         Private f32* %901 = OpAccessChain %484 %642 
                                  f32 %902 = OpLoad %901 
                                               OpStore %898 %902 
                                               OpBranch %900 
                                      %903 = OpLabel 
                                  f32 %904 = OpLoad %623 
                                               OpStore %898 %904 
                                               OpBranch %900 
                                      %900 = OpLabel 
                                  f32 %905 = OpLoad %898 
                         Private f32* %906 = OpAccessChain %484 %642 
                                               OpStore %906 %905 
                         Private i32* %907 = OpAccessChain %646 %88 
                                  i32 %908 = OpLoad %907 
                                 bool %909 = OpINotEqual %908 %32 
                                               OpSelectionMerge %911 None 
                                               OpBranchConditional %909 %910 %911 
                                      %910 = OpLabel 
                         Private i32* %912 = OpAccessChain %584 %88 
                                  i32 %913 = OpLoad %912 
                                 bool %914 = OpIEqual %913 %32 
                                               OpSelectionMerge %916 None 
                                               OpBranchConditional %914 %915 %916 
                                      %915 = OpLabel 
                                f32_3 %917 = OpLoad %237 
                                f32_2 %918 = OpVectorShuffle %917 %917 0 2 
                                f32_3 %919 = OpLoad %249 
                                f32_3 %920 = OpVectorShuffle %919 %918 3 1 4 
                                               OpStore %249 %920 
                                f32_3 %921 = OpLoad %249 
                                f32_2 %922 = OpVectorShuffle %921 %921 0 2 
                                f32_2 %923 = OpCompositeConstruct %18 %18 
                                f32_2 %924 = OpCompositeConstruct %19 %19 
                                f32_2 %925 = OpExtInst %1 43 %922 %923 %924 
                                f32_3 %926 = OpLoad %249 
                                f32_3 %927 = OpVectorShuffle %926 %925 3 1 4 
                                               OpStore %249 %927 
                                f32_3 %928 = OpLoad %249 
                                f32_2 %929 = OpVectorShuffle %928 %928 0 2 
                         Uniform f32* %930 = OpAccessChain %30 %32 
                                  f32 %931 = OpLoad %930 
                                f32_2 %932 = OpCompositeConstruct %931 %931 
                                f32_2 %933 = OpFMul %929 %932 
                                f32_3 %934 = OpLoad %249 
                                f32_3 %935 = OpVectorShuffle %934 %933 3 1 4 
                                               OpStore %249 %935 
                  read_only Texture2D %936 = OpLoad %44 
                              sampler %937 = OpLoad %48 
           read_only Texture2DSampled %938 = OpSampledImage %936 %937 
                                f32_3 %939 = OpLoad %249 
                                f32_2 %940 = OpVectorShuffle %939 %939 0 2 
                                f32_4 %941 = OpImageSampleExplicitLod %938 %940 Lod %27 
                                  f32 %942 = OpCompositeExtract %941 3 
                         Private f32* %943 = OpAccessChain %119 %88 
                                               OpStore %943 %942 
                                               OpBranch %916 
                                      %916 = OpLabel 
                         Private i32* %944 = OpAccessChain %584 %358 
                                  i32 %945 = OpLoad %944 
                                 bool %946 = OpIEqual %945 %32 
                                               OpSelectionMerge %948 None 
                                               OpBranchConditional %946 %947 %948 
                                      %947 = OpLabel 
                                f32_3 %949 = OpLoad %484 
                                f32_2 %950 = OpVectorShuffle %949 %949 0 2 
                                f32_3 %951 = OpLoad %249 
                                f32_3 %952 = OpVectorShuffle %951 %950 3 1 4 
                                               OpStore %249 %952 
                                f32_3 %953 = OpLoad %249 
                                f32_2 %954 = OpVectorShuffle %953 %953 0 2 
                                f32_2 %955 = OpCompositeConstruct %18 %18 
                                f32_2 %956 = OpCompositeConstruct %19 %19 
                                f32_2 %957 = OpExtInst %1 43 %954 %955 %956 
                                f32_3 %958 = OpLoad %249 
                                f32_3 %959 = OpVectorShuffle %958 %957 3 1 4 
                                               OpStore %249 %959 
                                f32_3 %960 = OpLoad %249 
                                f32_2 %961 = OpVectorShuffle %960 %960 0 2 
                         Uniform f32* %962 = OpAccessChain %30 %32 
                                  f32 %963 = OpLoad %962 
                                f32_2 %964 = OpCompositeConstruct %963 %963 
                                f32_2 %965 = OpFMul %961 %964 
                                f32_3 %966 = OpLoad %249 
                                f32_3 %967 = OpVectorShuffle %966 %965 3 1 4 
                                               OpStore %249 %967 
                  read_only Texture2D %968 = OpLoad %44 
                              sampler %969 = OpLoad %48 
           read_only Texture2DSampled %970 = OpSampledImage %968 %969 
                                f32_3 %971 = OpLoad %249 
                                f32_2 %972 = OpVectorShuffle %971 %971 0 2 
                                f32_4 %973 = OpImageSampleExplicitLod %970 %972 Lod %27 
                                  f32 %974 = OpCompositeExtract %973 3 
                         Private f32* %975 = OpAccessChain %119 %358 
                                               OpStore %975 %974 
                                               OpBranch %948 
                                      %948 = OpLabel 
                                  f32 %976 = OpLoad %56 
                                  f32 %977 = OpFNegate %976 
                                  f32 %978 = OpFMul %977 %448 
                         Private f32* %979 = OpAccessChain %119 %88 
                                  f32 %980 = OpLoad %979 
                                  f32 %981 = OpFAdd %978 %980 
                         Private f32* %982 = OpAccessChain %249 %88 
                                               OpStore %982 %981 
                         Private i32* %983 = OpAccessChain %584 %88 
                                  i32 %984 = OpLoad %983 
                                 bool %985 = OpINotEqual %984 %32 
                                               OpSelectionMerge %988 None 
                                               OpBranchConditional %985 %987 %991 
                                      %987 = OpLabel 
                         Private f32* %989 = OpAccessChain %119 %88 
                                  f32 %990 = OpLoad %989 
                                               OpStore %986 %990 
                                               OpBranch %988 
                                      %991 = OpLabel 
                         Private f32* %992 = OpAccessChain %249 %88 
                                  f32 %993 = OpLoad %992 
                                               OpStore %986 %993 
                                               OpBranch %988 
                                      %988 = OpLabel 
                                  f32 %994 = OpLoad %986 
                         Private f32* %995 = OpAccessChain %119 %88 
                                               OpStore %995 %994 
                                  f32 %996 = OpLoad %56 
                                  f32 %997 = OpFNegate %996 
                                  f32 %998 = OpFMul %997 %448 
                         Private f32* %999 = OpAccessChain %119 %358 
                                 f32 %1000 = OpLoad %999 
                                 f32 %1001 = OpFAdd %998 %1000 
                        Private f32* %1002 = OpAccessChain %207 %88 
                                               OpStore %1002 %1001 
                        Private i32* %1003 = OpAccessChain %584 %358 
                                 i32 %1004 = OpLoad %1003 
                                bool %1005 = OpINotEqual %1004 %32 
                                               OpSelectionMerge %1008 None 
                                               OpBranchConditional %1005 %1007 %1011 
                                     %1007 = OpLabel 
                        Private f32* %1009 = OpAccessChain %119 %358 
                                 f32 %1010 = OpLoad %1009 
                                               OpStore %1006 %1010 
                                               OpBranch %1008 
                                     %1011 = OpLabel 
                        Private f32* %1012 = OpAccessChain %207 %88 
                                 f32 %1013 = OpLoad %1012 
                                               OpStore %1006 %1013 
                                               OpBranch %1008 
                                     %1008 = OpLabel 
                                 f32 %1014 = OpLoad %1006 
                        Private f32* %1015 = OpAccessChain %119 %358 
                                               OpStore %1015 %1014 
                               f32_2 %1016 = OpLoad %119 
                               f32_4 %1017 = OpVectorShuffle %1016 %1016 0 1 0 1 
                               f32_4 %1018 = OpExtInst %1 4 %1017 
                               f32_3 %1019 = OpLoad %78 
                               f32_4 %1020 = OpVectorShuffle %1019 %1019 0 0 0 0 
                              bool_4 %1021 = OpFOrdGreaterThanEqual %1018 %1020 
                              bool_2 %1022 = OpVectorShuffle %1021 %1021 0 1 
                               u32_2 %1023 = OpSelect %1022 %596 %595 
                               u32_2 %1024 = OpCompositeConstruct %567 %567 
                               u32_2 %1025 = OpIMul %1023 %1024 
                               i32_2 %1026 = OpBitcast %1025 
                                               OpStore %584 %1026 
                        Private f32* %1027 = OpAccessChain %100 %88 
                                 f32 %1028 = OpLoad %1027 
                                 f32 %1029 = OpFNegate %1028 
                                 f32 %1030 = OpFMul %1029 %276 
                        Private f32* %1031 = OpAccessChain %237 %88 
                                 f32 %1032 = OpLoad %1031 
                                 f32 %1033 = OpFAdd %1030 %1032 
                        Private f32* %1034 = OpAccessChain %249 %88 
                                               OpStore %1034 %1033 
                        Private i32* %1035 = OpAccessChain %584 %88 
                                 i32 %1036 = OpLoad %1035 
                                bool %1037 = OpINotEqual %1036 %32 
                                               OpSelectionMerge %1040 None 
                                               OpBranchConditional %1037 %1039 %1043 
                                     %1039 = OpLabel 
                        Private f32* %1041 = OpAccessChain %237 %88 
                                 f32 %1042 = OpLoad %1041 
                                               OpStore %1038 %1042 
                                               OpBranch %1040 
                                     %1043 = OpLabel 
                        Private f32* %1044 = OpAccessChain %249 %88 
                                 f32 %1045 = OpLoad %1044 
                                               OpStore %1038 %1045 
                                               OpBranch %1040 
                                     %1040 = OpLabel 
                                 f32 %1046 = OpLoad %1038 
                        Private f32* %1047 = OpAccessChain %237 %88 
                                               OpStore %1047 %1046 
                        Private f32* %1048 = OpAccessChain %100 %358 
                                 f32 %1049 = OpLoad %1048 
                                 f32 %1050 = OpFNegate %1049 
                                 f32 %1051 = OpFMul %1050 %276 
                        Private f32* %1052 = OpAccessChain %237 %642 
                                 f32 %1053 = OpLoad %1052 
                                 f32 %1054 = OpFAdd %1051 %1053 
                        Private f32* %1055 = OpAccessChain %249 %88 
                                               OpStore %1055 %1054 
                        Private i32* %1056 = OpAccessChain %584 %88 
                                 i32 %1057 = OpLoad %1056 
                                bool %1058 = OpINotEqual %1057 %32 
                                               OpSelectionMerge %1061 None 
                                               OpBranchConditional %1058 %1060 %1064 
                                     %1060 = OpLabel 
                        Private f32* %1062 = OpAccessChain %237 %642 
                                 f32 %1063 = OpLoad %1062 
                                               OpStore %1059 %1063 
                                               OpBranch %1061 
                                     %1064 = OpLabel 
                        Private f32* %1065 = OpAccessChain %249 %88 
                                 f32 %1066 = OpLoad %1065 
                                               OpStore %1059 %1066 
                                               OpBranch %1061 
                                     %1061 = OpLabel 
                                 f32 %1067 = OpLoad %1059 
                        Private f32* %1068 = OpAccessChain %237 %642 
                                               OpStore %1068 %1067 
                               i32_2 %1069 = OpLoad %584 
                               i32_2 %1070 = OpNot %1069 
                               i32_3 %1071 = OpLoad %646 
                               i32_3 %1072 = OpVectorShuffle %1071 %1070 3 1 4 
                                               OpStore %646 %1072 
                        Private i32* %1073 = OpAccessChain %646 %642 
                                 i32 %1074 = OpLoad %1073 
                                 u32 %1075 = OpBitcast %1074 
                        Private i32* %1076 = OpAccessChain %646 %88 
                                 i32 %1077 = OpLoad %1076 
                                 u32 %1078 = OpBitcast %1077 
                                 u32 %1079 = OpBitwiseOr %1075 %1078 
                                 i32 %1080 = OpBitcast %1079 
                        Private i32* %1081 = OpAccessChain %646 %88 
                                               OpStore %1081 %1080 
                        Private f32* %1082 = OpAccessChain %100 %88 
                                 f32 %1083 = OpLoad %1082 
                                 f32 %1084 = OpFMul %1083 %276 
                        Private f32* %1085 = OpAccessChain %484 %88 
                                 f32 %1086 = OpLoad %1085 
                                 f32 %1087 = OpFAdd %1084 %1086 
                                               OpStore %623 %1087 
                        Private i32* %1088 = OpAccessChain %584 %358 
                                 i32 %1089 = OpLoad %1088 
                                bool %1090 = OpINotEqual %1089 %32 
                                               OpSelectionMerge %1093 None 
                                               OpBranchConditional %1090 %1092 %1096 
                                     %1092 = OpLabel 
                        Private f32* %1094 = OpAccessChain %484 %88 
                                 f32 %1095 = OpLoad %1094 
                                               OpStore %1091 %1095 
                                               OpBranch %1093 
                                     %1096 = OpLabel 
                                 f32 %1097 = OpLoad %623 
                                               OpStore %1091 %1097 
                                               OpBranch %1093 
                                     %1093 = OpLabel 
                                 f32 %1098 = OpLoad %1091 
                        Private f32* %1099 = OpAccessChain %484 %88 
                                               OpStore %1099 %1098 
                        Private f32* %1100 = OpAccessChain %100 %358 
                                 f32 %1101 = OpLoad %1100 
                                 f32 %1102 = OpFMul %1101 %276 
                        Private f32* %1103 = OpAccessChain %484 %642 
                                 f32 %1104 = OpLoad %1103 
                                 f32 %1105 = OpFAdd %1102 %1104 
                                               OpStore %623 %1105 
                        Private i32* %1106 = OpAccessChain %584 %358 
                                 i32 %1107 = OpLoad %1106 
                                bool %1108 = OpINotEqual %1107 %32 
                                               OpSelectionMerge %1111 None 
                                               OpBranchConditional %1108 %1110 %1114 
                                     %1110 = OpLabel 
                        Private f32* %1112 = OpAccessChain %484 %642 
                                 f32 %1113 = OpLoad %1112 
                                               OpStore %1109 %1113 
                                               OpBranch %1111 
                                     %1114 = OpLabel 
                                 f32 %1115 = OpLoad %623 
                                               OpStore %1109 %1115 
                                               OpBranch %1111 
                                     %1111 = OpLabel 
                                 f32 %1116 = OpLoad %1109 
                        Private f32* %1117 = OpAccessChain %484 %642 
                                               OpStore %1117 %1116 
                        Private i32* %1118 = OpAccessChain %646 %88 
                                 i32 %1119 = OpLoad %1118 
                                bool %1120 = OpINotEqual %1119 %32 
                                               OpSelectionMerge %1122 None 
                                               OpBranchConditional %1120 %1121 %1122 
                                     %1121 = OpLabel 
                        Private i32* %1123 = OpAccessChain %584 %88 
                                 i32 %1124 = OpLoad %1123 
                                bool %1125 = OpIEqual %1124 %32 
                                               OpSelectionMerge %1127 None 
                                               OpBranchConditional %1125 %1126 %1127 
                                     %1126 = OpLabel 
                               f32_3 %1128 = OpLoad %237 
                               f32_2 %1129 = OpVectorShuffle %1128 %1128 0 2 
                               f32_3 %1130 = OpLoad %249 
                               f32_3 %1131 = OpVectorShuffle %1130 %1129 3 1 4 
                                               OpStore %249 %1131 
                               f32_3 %1132 = OpLoad %249 
                               f32_2 %1133 = OpVectorShuffle %1132 %1132 0 2 
                               f32_2 %1134 = OpCompositeConstruct %18 %18 
                               f32_2 %1135 = OpCompositeConstruct %19 %19 
                               f32_2 %1136 = OpExtInst %1 43 %1133 %1134 %1135 
                               f32_3 %1137 = OpLoad %249 
                               f32_3 %1138 = OpVectorShuffle %1137 %1136 3 1 4 
                                               OpStore %249 %1138 
                               f32_3 %1139 = OpLoad %249 
                               f32_2 %1140 = OpVectorShuffle %1139 %1139 0 2 
                        Uniform f32* %1141 = OpAccessChain %30 %32 
                                 f32 %1142 = OpLoad %1141 
                               f32_2 %1143 = OpCompositeConstruct %1142 %1142 
                               f32_2 %1144 = OpFMul %1140 %1143 
                               f32_3 %1145 = OpLoad %249 
                               f32_3 %1146 = OpVectorShuffle %1145 %1144 3 1 4 
                                               OpStore %249 %1146 
                 read_only Texture2D %1147 = OpLoad %44 
                             sampler %1148 = OpLoad %48 
          read_only Texture2DSampled %1149 = OpSampledImage %1147 %1148 
                               f32_3 %1150 = OpLoad %249 
                               f32_2 %1151 = OpVectorShuffle %1150 %1150 0 2 
                               f32_4 %1152 = OpImageSampleExplicitLod %1149 %1151 Lod %27 
                                 f32 %1153 = OpCompositeExtract %1152 3 
                        Private f32* %1154 = OpAccessChain %119 %88 
                                               OpStore %1154 %1153 
                                               OpBranch %1127 
                                     %1127 = OpLabel 
                        Private i32* %1155 = OpAccessChain %584 %358 
                                 i32 %1156 = OpLoad %1155 
                                bool %1157 = OpIEqual %1156 %32 
                                               OpSelectionMerge %1159 None 
                                               OpBranchConditional %1157 %1158 %1159 
                                     %1158 = OpLabel 
                               f32_3 %1160 = OpLoad %484 
                               f32_2 %1161 = OpVectorShuffle %1160 %1160 0 2 
                               f32_3 %1162 = OpLoad %249 
                               f32_3 %1163 = OpVectorShuffle %1162 %1161 3 1 4 
                                               OpStore %249 %1163 
                               f32_3 %1164 = OpLoad %249 
                               f32_2 %1165 = OpVectorShuffle %1164 %1164 0 2 
                               f32_2 %1166 = OpCompositeConstruct %18 %18 
                               f32_2 %1167 = OpCompositeConstruct %19 %19 
                               f32_2 %1168 = OpExtInst %1 43 %1165 %1166 %1167 
                               f32_3 %1169 = OpLoad %249 
                               f32_3 %1170 = OpVectorShuffle %1169 %1168 3 1 4 
                                               OpStore %249 %1170 
                               f32_3 %1171 = OpLoad %249 
                               f32_2 %1172 = OpVectorShuffle %1171 %1171 0 2 
                        Uniform f32* %1173 = OpAccessChain %30 %32 
                                 f32 %1174 = OpLoad %1173 
                               f32_2 %1175 = OpCompositeConstruct %1174 %1174 
                               f32_2 %1176 = OpFMul %1172 %1175 
                               f32_3 %1177 = OpLoad %249 
                               f32_3 %1178 = OpVectorShuffle %1177 %1176 3 1 4 
                                               OpStore %249 %1178 
                 read_only Texture2D %1179 = OpLoad %44 
                             sampler %1180 = OpLoad %48 
          read_only Texture2DSampled %1181 = OpSampledImage %1179 %1180 
                               f32_3 %1182 = OpLoad %249 
                               f32_2 %1183 = OpVectorShuffle %1182 %1182 0 2 
                               f32_4 %1184 = OpImageSampleExplicitLod %1181 %1183 Lod %27 
                                 f32 %1185 = OpCompositeExtract %1184 3 
                        Private f32* %1186 = OpAccessChain %119 %358 
                                               OpStore %1186 %1185 
                                               OpBranch %1159 
                                     %1159 = OpLabel 
                                 f32 %1187 = OpLoad %56 
                                 f32 %1188 = OpFNegate %1187 
                                 f32 %1189 = OpFMul %1188 %448 
                        Private f32* %1190 = OpAccessChain %119 %88 
                                 f32 %1191 = OpLoad %1190 
                                 f32 %1192 = OpFAdd %1189 %1191 
                        Private f32* %1193 = OpAccessChain %249 %88 
                                               OpStore %1193 %1192 
                        Private i32* %1194 = OpAccessChain %584 %88 
                                 i32 %1195 = OpLoad %1194 
                                bool %1196 = OpINotEqual %1195 %32 
                                               OpSelectionMerge %1199 None 
                                               OpBranchConditional %1196 %1198 %1202 
                                     %1198 = OpLabel 
                        Private f32* %1200 = OpAccessChain %119 %88 
                                 f32 %1201 = OpLoad %1200 
                                               OpStore %1197 %1201 
                                               OpBranch %1199 
                                     %1202 = OpLabel 
                        Private f32* %1203 = OpAccessChain %249 %88 
                                 f32 %1204 = OpLoad %1203 
                                               OpStore %1197 %1204 
                                               OpBranch %1199 
                                     %1199 = OpLabel 
                                 f32 %1205 = OpLoad %1197 
                        Private f32* %1206 = OpAccessChain %119 %88 
                                               OpStore %1206 %1205 
                                 f32 %1207 = OpLoad %56 
                                 f32 %1208 = OpFNegate %1207 
                                 f32 %1209 = OpFMul %1208 %448 
                        Private f32* %1210 = OpAccessChain %119 %358 
                                 f32 %1211 = OpLoad %1210 
                                 f32 %1212 = OpFAdd %1209 %1211 
                        Private f32* %1213 = OpAccessChain %207 %88 
                                               OpStore %1213 %1212 
                        Private i32* %1214 = OpAccessChain %584 %358 
                                 i32 %1215 = OpLoad %1214 
                                bool %1216 = OpINotEqual %1215 %32 
                                               OpSelectionMerge %1219 None 
                                               OpBranchConditional %1216 %1218 %1222 
                                     %1218 = OpLabel 
                        Private f32* %1220 = OpAccessChain %119 %358 
                                 f32 %1221 = OpLoad %1220 
                                               OpStore %1217 %1221 
                                               OpBranch %1219 
                                     %1222 = OpLabel 
                        Private f32* %1223 = OpAccessChain %207 %88 
                                 f32 %1224 = OpLoad %1223 
                                               OpStore %1217 %1224 
                                               OpBranch %1219 
                                     %1219 = OpLabel 
                                 f32 %1225 = OpLoad %1217 
                        Private f32* %1226 = OpAccessChain %119 %358 
                                               OpStore %1226 %1225 
                               f32_2 %1227 = OpLoad %119 
                               f32_4 %1228 = OpVectorShuffle %1227 %1227 0 1 0 1 
                               f32_4 %1229 = OpExtInst %1 4 %1228 
                               f32_3 %1230 = OpLoad %78 
                               f32_4 %1231 = OpVectorShuffle %1230 %1230 0 0 0 0 
                              bool_4 %1232 = OpFOrdGreaterThanEqual %1229 %1231 
                              bool_2 %1233 = OpVectorShuffle %1232 %1232 0 1 
                               u32_2 %1234 = OpSelect %1233 %596 %595 
                               u32_2 %1235 = OpCompositeConstruct %567 %567 
                               u32_2 %1236 = OpIMul %1234 %1235 
                               i32_2 %1237 = OpBitcast %1236 
                                               OpStore %584 %1237 
                        Private f32* %1238 = OpAccessChain %100 %88 
                                 f32 %1239 = OpLoad %1238 
                                 f32 %1240 = OpFNegate %1239 
                                 f32 %1241 = OpFMul %1240 %276 
                        Private f32* %1242 = OpAccessChain %237 %88 
                                 f32 %1243 = OpLoad %1242 
                                 f32 %1244 = OpFAdd %1241 %1243 
                        Private f32* %1245 = OpAccessChain %249 %88 
                                               OpStore %1245 %1244 
                        Private i32* %1246 = OpAccessChain %584 %88 
                                 i32 %1247 = OpLoad %1246 
                                bool %1248 = OpINotEqual %1247 %32 
                                               OpSelectionMerge %1251 None 
                                               OpBranchConditional %1248 %1250 %1254 
                                     %1250 = OpLabel 
                        Private f32* %1252 = OpAccessChain %237 %88 
                                 f32 %1253 = OpLoad %1252 
                                               OpStore %1249 %1253 
                                               OpBranch %1251 
                                     %1254 = OpLabel 
                        Private f32* %1255 = OpAccessChain %249 %88 
                                 f32 %1256 = OpLoad %1255 
                                               OpStore %1249 %1256 
                                               OpBranch %1251 
                                     %1251 = OpLabel 
                                 f32 %1257 = OpLoad %1249 
                        Private f32* %1258 = OpAccessChain %237 %88 
                                               OpStore %1258 %1257 
                        Private f32* %1259 = OpAccessChain %100 %358 
                                 f32 %1260 = OpLoad %1259 
                                 f32 %1261 = OpFNegate %1260 
                                 f32 %1262 = OpFMul %1261 %276 
                        Private f32* %1263 = OpAccessChain %237 %642 
                                 f32 %1264 = OpLoad %1263 
                                 f32 %1265 = OpFAdd %1262 %1264 
                        Private f32* %1266 = OpAccessChain %249 %88 
                                               OpStore %1266 %1265 
                        Private i32* %1267 = OpAccessChain %584 %88 
                                 i32 %1268 = OpLoad %1267 
                                bool %1269 = OpINotEqual %1268 %32 
                                               OpSelectionMerge %1272 None 
                                               OpBranchConditional %1269 %1271 %1275 
                                     %1271 = OpLabel 
                        Private f32* %1273 = OpAccessChain %237 %642 
                                 f32 %1274 = OpLoad %1273 
                                               OpStore %1270 %1274 
                                               OpBranch %1272 
                                     %1275 = OpLabel 
                        Private f32* %1276 = OpAccessChain %249 %88 
                                 f32 %1277 = OpLoad %1276 
                                               OpStore %1270 %1277 
                                               OpBranch %1272 
                                     %1272 = OpLabel 
                                 f32 %1278 = OpLoad %1270 
                        Private f32* %1279 = OpAccessChain %237 %642 
                                               OpStore %1279 %1278 
                               i32_2 %1280 = OpLoad %584 
                               i32_2 %1281 = OpNot %1280 
                               i32_3 %1282 = OpLoad %646 
                               i32_3 %1283 = OpVectorShuffle %1282 %1281 3 1 4 
                                               OpStore %646 %1283 
                        Private i32* %1284 = OpAccessChain %646 %642 
                                 i32 %1285 = OpLoad %1284 
                                 u32 %1286 = OpBitcast %1285 
                        Private i32* %1287 = OpAccessChain %646 %88 
                                 i32 %1288 = OpLoad %1287 
                                 u32 %1289 = OpBitcast %1288 
                                 u32 %1290 = OpBitwiseOr %1286 %1289 
                                 i32 %1291 = OpBitcast %1290 
                        Private i32* %1292 = OpAccessChain %646 %88 
                                               OpStore %1292 %1291 
                        Private f32* %1293 = OpAccessChain %100 %88 
                                 f32 %1294 = OpLoad %1293 
                                 f32 %1295 = OpFMul %1294 %276 
                        Private f32* %1296 = OpAccessChain %484 %88 
                                 f32 %1297 = OpLoad %1296 
                                 f32 %1298 = OpFAdd %1295 %1297 
                                               OpStore %623 %1298 
                        Private i32* %1299 = OpAccessChain %584 %358 
                                 i32 %1300 = OpLoad %1299 
                                bool %1301 = OpINotEqual %1300 %32 
                                               OpSelectionMerge %1304 None 
                                               OpBranchConditional %1301 %1303 %1307 
                                     %1303 = OpLabel 
                        Private f32* %1305 = OpAccessChain %484 %88 
                                 f32 %1306 = OpLoad %1305 
                                               OpStore %1302 %1306 
                                               OpBranch %1304 
                                     %1307 = OpLabel 
                                 f32 %1308 = OpLoad %623 
                                               OpStore %1302 %1308 
                                               OpBranch %1304 
                                     %1304 = OpLabel 
                                 f32 %1309 = OpLoad %1302 
                        Private f32* %1310 = OpAccessChain %484 %88 
                                               OpStore %1310 %1309 
                        Private f32* %1311 = OpAccessChain %100 %358 
                                 f32 %1312 = OpLoad %1311 
                                 f32 %1313 = OpFMul %1312 %276 
                        Private f32* %1314 = OpAccessChain %484 %642 
                                 f32 %1315 = OpLoad %1314 
                                 f32 %1316 = OpFAdd %1313 %1315 
                                               OpStore %623 %1316 
                        Private i32* %1317 = OpAccessChain %584 %358 
                                 i32 %1318 = OpLoad %1317 
                                bool %1319 = OpINotEqual %1318 %32 
                                               OpSelectionMerge %1322 None 
                                               OpBranchConditional %1319 %1321 %1325 
                                     %1321 = OpLabel 
                        Private f32* %1323 = OpAccessChain %484 %642 
                                 f32 %1324 = OpLoad %1323 
                                               OpStore %1320 %1324 
                                               OpBranch %1322 
                                     %1325 = OpLabel 
                                 f32 %1326 = OpLoad %623 
                                               OpStore %1320 %1326 
                                               OpBranch %1322 
                                     %1322 = OpLabel 
                                 f32 %1327 = OpLoad %1320 
                        Private f32* %1328 = OpAccessChain %484 %642 
                                               OpStore %1328 %1327 
                        Private i32* %1329 = OpAccessChain %646 %88 
                                 i32 %1330 = OpLoad %1329 
                                bool %1331 = OpINotEqual %1330 %32 
                                               OpSelectionMerge %1333 None 
                                               OpBranchConditional %1331 %1332 %1333 
                                     %1332 = OpLabel 
                        Private i32* %1334 = OpAccessChain %584 %88 
                                 i32 %1335 = OpLoad %1334 
                                bool %1336 = OpIEqual %1335 %32 
                                               OpSelectionMerge %1338 None 
                                               OpBranchConditional %1336 %1337 %1338 
                                     %1337 = OpLabel 
                               f32_3 %1339 = OpLoad %237 
                               f32_2 %1340 = OpVectorShuffle %1339 %1339 0 2 
                               f32_3 %1341 = OpLoad %249 
                               f32_3 %1342 = OpVectorShuffle %1341 %1340 3 1 4 
                                               OpStore %249 %1342 
                               f32_3 %1343 = OpLoad %249 
                               f32_2 %1344 = OpVectorShuffle %1343 %1343 0 2 
                               f32_2 %1345 = OpCompositeConstruct %18 %18 
                               f32_2 %1346 = OpCompositeConstruct %19 %19 
                               f32_2 %1347 = OpExtInst %1 43 %1344 %1345 %1346 
                               f32_3 %1348 = OpLoad %249 
                               f32_3 %1349 = OpVectorShuffle %1348 %1347 3 1 4 
                                               OpStore %249 %1349 
                               f32_3 %1350 = OpLoad %249 
                               f32_2 %1351 = OpVectorShuffle %1350 %1350 0 2 
                        Uniform f32* %1352 = OpAccessChain %30 %32 
                                 f32 %1353 = OpLoad %1352 
                               f32_2 %1354 = OpCompositeConstruct %1353 %1353 
                               f32_2 %1355 = OpFMul %1351 %1354 
                               f32_3 %1356 = OpLoad %249 
                               f32_3 %1357 = OpVectorShuffle %1356 %1355 3 1 4 
                                               OpStore %249 %1357 
                 read_only Texture2D %1358 = OpLoad %44 
                             sampler %1359 = OpLoad %48 
          read_only Texture2DSampled %1360 = OpSampledImage %1358 %1359 
                               f32_3 %1361 = OpLoad %249 
                               f32_2 %1362 = OpVectorShuffle %1361 %1361 0 2 
                               f32_4 %1363 = OpImageSampleExplicitLod %1360 %1362 Lod %27 
                                 f32 %1364 = OpCompositeExtract %1363 3 
                        Private f32* %1365 = OpAccessChain %119 %88 
                                               OpStore %1365 %1364 
                                               OpBranch %1338 
                                     %1338 = OpLabel 
                        Private i32* %1366 = OpAccessChain %584 %358 
                                 i32 %1367 = OpLoad %1366 
                                bool %1368 = OpIEqual %1367 %32 
                                               OpSelectionMerge %1370 None 
                                               OpBranchConditional %1368 %1369 %1370 
                                     %1369 = OpLabel 
                               f32_3 %1371 = OpLoad %484 
                               f32_2 %1372 = OpVectorShuffle %1371 %1371 0 2 
                               f32_3 %1373 = OpLoad %249 
                               f32_3 %1374 = OpVectorShuffle %1373 %1372 3 1 4 
                                               OpStore %249 %1374 
                               f32_3 %1375 = OpLoad %249 
                               f32_2 %1376 = OpVectorShuffle %1375 %1375 0 2 
                               f32_2 %1377 = OpCompositeConstruct %18 %18 
                               f32_2 %1378 = OpCompositeConstruct %19 %19 
                               f32_2 %1379 = OpExtInst %1 43 %1376 %1377 %1378 
                               f32_3 %1380 = OpLoad %249 
                               f32_3 %1381 = OpVectorShuffle %1380 %1379 3 1 4 
                                               OpStore %249 %1381 
                               f32_3 %1382 = OpLoad %249 
                               f32_2 %1383 = OpVectorShuffle %1382 %1382 0 2 
                        Uniform f32* %1384 = OpAccessChain %30 %32 
                                 f32 %1385 = OpLoad %1384 
                               f32_2 %1386 = OpCompositeConstruct %1385 %1385 
                               f32_2 %1387 = OpFMul %1383 %1386 
                               f32_3 %1388 = OpLoad %249 
                               f32_3 %1389 = OpVectorShuffle %1388 %1387 3 1 4 
                                               OpStore %249 %1389 
                 read_only Texture2D %1390 = OpLoad %44 
                             sampler %1391 = OpLoad %48 
          read_only Texture2DSampled %1392 = OpSampledImage %1390 %1391 
                               f32_3 %1393 = OpLoad %249 
                               f32_2 %1394 = OpVectorShuffle %1393 %1393 0 2 
                               f32_4 %1395 = OpImageSampleExplicitLod %1392 %1394 Lod %27 
                                 f32 %1396 = OpCompositeExtract %1395 3 
                        Private f32* %1397 = OpAccessChain %119 %358 
                                               OpStore %1397 %1396 
                                               OpBranch %1370 
                                     %1370 = OpLabel 
                                 f32 %1398 = OpLoad %56 
                                 f32 %1399 = OpFNegate %1398 
                                 f32 %1400 = OpFMul %1399 %448 
                        Private f32* %1401 = OpAccessChain %119 %88 
                                 f32 %1402 = OpLoad %1401 
                                 f32 %1403 = OpFAdd %1400 %1402 
                        Private f32* %1404 = OpAccessChain %249 %88 
                                               OpStore %1404 %1403 
                        Private i32* %1405 = OpAccessChain %584 %88 
                                 i32 %1406 = OpLoad %1405 
                                bool %1407 = OpINotEqual %1406 %32 
                                               OpSelectionMerge %1410 None 
                                               OpBranchConditional %1407 %1409 %1413 
                                     %1409 = OpLabel 
                        Private f32* %1411 = OpAccessChain %119 %88 
                                 f32 %1412 = OpLoad %1411 
                                               OpStore %1408 %1412 
                                               OpBranch %1410 
                                     %1413 = OpLabel 
                        Private f32* %1414 = OpAccessChain %249 %88 
                                 f32 %1415 = OpLoad %1414 
                                               OpStore %1408 %1415 
                                               OpBranch %1410 
                                     %1410 = OpLabel 
                                 f32 %1416 = OpLoad %1408 
                        Private f32* %1417 = OpAccessChain %119 %88 
                                               OpStore %1417 %1416 
                                 f32 %1418 = OpLoad %56 
                                 f32 %1419 = OpFNegate %1418 
                                 f32 %1420 = OpFMul %1419 %448 
                        Private f32* %1421 = OpAccessChain %119 %358 
                                 f32 %1422 = OpLoad %1421 
                                 f32 %1423 = OpFAdd %1420 %1422 
                        Private f32* %1424 = OpAccessChain %207 %88 
                                               OpStore %1424 %1423 
                        Private i32* %1425 = OpAccessChain %584 %358 
                                 i32 %1426 = OpLoad %1425 
                                bool %1427 = OpINotEqual %1426 %32 
                                               OpSelectionMerge %1430 None 
                                               OpBranchConditional %1427 %1429 %1433 
                                     %1429 = OpLabel 
                        Private f32* %1431 = OpAccessChain %119 %358 
                                 f32 %1432 = OpLoad %1431 
                                               OpStore %1428 %1432 
                                               OpBranch %1430 
                                     %1433 = OpLabel 
                        Private f32* %1434 = OpAccessChain %207 %88 
                                 f32 %1435 = OpLoad %1434 
                                               OpStore %1428 %1435 
                                               OpBranch %1430 
                                     %1430 = OpLabel 
                                 f32 %1436 = OpLoad %1428 
                        Private f32* %1437 = OpAccessChain %119 %358 
                                               OpStore %1437 %1436 
                               f32_2 %1438 = OpLoad %119 
                               f32_4 %1439 = OpVectorShuffle %1438 %1438 0 1 0 1 
                               f32_4 %1440 = OpExtInst %1 4 %1439 
                               f32_3 %1441 = OpLoad %78 
                               f32_4 %1442 = OpVectorShuffle %1441 %1441 0 0 0 0 
                              bool_4 %1443 = OpFOrdGreaterThanEqual %1440 %1442 
                              bool_2 %1444 = OpVectorShuffle %1443 %1443 0 1 
                               u32_2 %1445 = OpSelect %1444 %596 %595 
                               u32_2 %1446 = OpCompositeConstruct %567 %567 
                               u32_2 %1447 = OpIMul %1445 %1446 
                               i32_2 %1448 = OpBitcast %1447 
                                               OpStore %584 %1448 
                        Private f32* %1449 = OpAccessChain %100 %88 
                                 f32 %1450 = OpLoad %1449 
                                 f32 %1451 = OpFNegate %1450 
                                 f32 %1452 = OpFMul %1451 %276 
                        Private f32* %1453 = OpAccessChain %237 %88 
                                 f32 %1454 = OpLoad %1453 
                                 f32 %1455 = OpFAdd %1452 %1454 
                        Private f32* %1456 = OpAccessChain %249 %88 
                                               OpStore %1456 %1455 
                        Private i32* %1457 = OpAccessChain %584 %88 
                                 i32 %1458 = OpLoad %1457 
                                bool %1459 = OpINotEqual %1458 %32 
                                               OpSelectionMerge %1462 None 
                                               OpBranchConditional %1459 %1461 %1465 
                                     %1461 = OpLabel 
                        Private f32* %1463 = OpAccessChain %237 %88 
                                 f32 %1464 = OpLoad %1463 
                                               OpStore %1460 %1464 
                                               OpBranch %1462 
                                     %1465 = OpLabel 
                        Private f32* %1466 = OpAccessChain %249 %88 
                                 f32 %1467 = OpLoad %1466 
                                               OpStore %1460 %1467 
                                               OpBranch %1462 
                                     %1462 = OpLabel 
                                 f32 %1468 = OpLoad %1460 
                        Private f32* %1469 = OpAccessChain %237 %88 
                                               OpStore %1469 %1468 
                        Private f32* %1470 = OpAccessChain %100 %358 
                                 f32 %1471 = OpLoad %1470 
                                 f32 %1472 = OpFNegate %1471 
                                 f32 %1473 = OpFMul %1472 %276 
                        Private f32* %1474 = OpAccessChain %237 %642 
                                 f32 %1475 = OpLoad %1474 
                                 f32 %1476 = OpFAdd %1473 %1475 
                        Private f32* %1477 = OpAccessChain %249 %88 
                                               OpStore %1477 %1476 
                        Private i32* %1478 = OpAccessChain %584 %88 
                                 i32 %1479 = OpLoad %1478 
                                bool %1480 = OpINotEqual %1479 %32 
                                               OpSelectionMerge %1483 None 
                                               OpBranchConditional %1480 %1482 %1486 
                                     %1482 = OpLabel 
                        Private f32* %1484 = OpAccessChain %237 %642 
                                 f32 %1485 = OpLoad %1484 
                                               OpStore %1481 %1485 
                                               OpBranch %1483 
                                     %1486 = OpLabel 
                        Private f32* %1487 = OpAccessChain %249 %88 
                                 f32 %1488 = OpLoad %1487 
                                               OpStore %1481 %1488 
                                               OpBranch %1483 
                                     %1483 = OpLabel 
                                 f32 %1489 = OpLoad %1481 
                        Private f32* %1490 = OpAccessChain %237 %642 
                                               OpStore %1490 %1489 
                               i32_2 %1491 = OpLoad %584 
                               i32_2 %1492 = OpNot %1491 
                               i32_3 %1493 = OpLoad %646 
                               i32_3 %1494 = OpVectorShuffle %1493 %1492 3 1 4 
                                               OpStore %646 %1494 
                        Private i32* %1495 = OpAccessChain %646 %642 
                                 i32 %1496 = OpLoad %1495 
                                 u32 %1497 = OpBitcast %1496 
                        Private i32* %1498 = OpAccessChain %646 %88 
                                 i32 %1499 = OpLoad %1498 
                                 u32 %1500 = OpBitcast %1499 
                                 u32 %1501 = OpBitwiseOr %1497 %1500 
                                 i32 %1502 = OpBitcast %1501 
                        Private i32* %1503 = OpAccessChain %646 %88 
                                               OpStore %1503 %1502 
                        Private f32* %1504 = OpAccessChain %100 %88 
                                 f32 %1505 = OpLoad %1504 
                                 f32 %1506 = OpFMul %1505 %276 
                        Private f32* %1507 = OpAccessChain %484 %88 
                                 f32 %1508 = OpLoad %1507 
                                 f32 %1509 = OpFAdd %1506 %1508 
                                               OpStore %623 %1509 
                        Private i32* %1510 = OpAccessChain %584 %358 
                                 i32 %1511 = OpLoad %1510 
                                bool %1512 = OpINotEqual %1511 %32 
                                               OpSelectionMerge %1515 None 
                                               OpBranchConditional %1512 %1514 %1518 
                                     %1514 = OpLabel 
                        Private f32* %1516 = OpAccessChain %484 %88 
                                 f32 %1517 = OpLoad %1516 
                                               OpStore %1513 %1517 
                                               OpBranch %1515 
                                     %1518 = OpLabel 
                                 f32 %1519 = OpLoad %623 
                                               OpStore %1513 %1519 
                                               OpBranch %1515 
                                     %1515 = OpLabel 
                                 f32 %1520 = OpLoad %1513 
                        Private f32* %1521 = OpAccessChain %484 %88 
                                               OpStore %1521 %1520 
                        Private f32* %1522 = OpAccessChain %100 %358 
                                 f32 %1523 = OpLoad %1522 
                                 f32 %1524 = OpFMul %1523 %276 
                        Private f32* %1525 = OpAccessChain %484 %642 
                                 f32 %1526 = OpLoad %1525 
                                 f32 %1527 = OpFAdd %1524 %1526 
                                               OpStore %623 %1527 
                        Private i32* %1528 = OpAccessChain %584 %358 
                                 i32 %1529 = OpLoad %1528 
                                bool %1530 = OpINotEqual %1529 %32 
                                               OpSelectionMerge %1533 None 
                                               OpBranchConditional %1530 %1532 %1536 
                                     %1532 = OpLabel 
                        Private f32* %1534 = OpAccessChain %484 %642 
                                 f32 %1535 = OpLoad %1534 
                                               OpStore %1531 %1535 
                                               OpBranch %1533 
                                     %1536 = OpLabel 
                                 f32 %1537 = OpLoad %623 
                                               OpStore %1531 %1537 
                                               OpBranch %1533 
                                     %1533 = OpLabel 
                                 f32 %1538 = OpLoad %1531 
                        Private f32* %1539 = OpAccessChain %484 %642 
                                               OpStore %1539 %1538 
                        Private i32* %1540 = OpAccessChain %646 %88 
                                 i32 %1541 = OpLoad %1540 
                                bool %1542 = OpINotEqual %1541 %32 
                                               OpSelectionMerge %1544 None 
                                               OpBranchConditional %1542 %1543 %1544 
                                     %1543 = OpLabel 
                        Private i32* %1545 = OpAccessChain %584 %88 
                                 i32 %1546 = OpLoad %1545 
                                bool %1547 = OpIEqual %1546 %32 
                                               OpSelectionMerge %1549 None 
                                               OpBranchConditional %1547 %1548 %1549 
                                     %1548 = OpLabel 
                               f32_3 %1550 = OpLoad %237 
                               f32_2 %1551 = OpVectorShuffle %1550 %1550 0 2 
                               f32_3 %1552 = OpLoad %249 
                               f32_3 %1553 = OpVectorShuffle %1552 %1551 3 1 4 
                                               OpStore %249 %1553 
                               f32_3 %1554 = OpLoad %249 
                               f32_2 %1555 = OpVectorShuffle %1554 %1554 0 2 
                               f32_2 %1556 = OpCompositeConstruct %18 %18 
                               f32_2 %1557 = OpCompositeConstruct %19 %19 
                               f32_2 %1558 = OpExtInst %1 43 %1555 %1556 %1557 
                               f32_3 %1559 = OpLoad %249 
                               f32_3 %1560 = OpVectorShuffle %1559 %1558 3 1 4 
                                               OpStore %249 %1560 
                               f32_3 %1561 = OpLoad %249 
                               f32_2 %1562 = OpVectorShuffle %1561 %1561 0 2 
                        Uniform f32* %1563 = OpAccessChain %30 %32 
                                 f32 %1564 = OpLoad %1563 
                               f32_2 %1565 = OpCompositeConstruct %1564 %1564 
                               f32_2 %1566 = OpFMul %1562 %1565 
                               f32_3 %1567 = OpLoad %249 
                               f32_3 %1568 = OpVectorShuffle %1567 %1566 3 1 4 
                                               OpStore %249 %1568 
                 read_only Texture2D %1569 = OpLoad %44 
                             sampler %1570 = OpLoad %48 
          read_only Texture2DSampled %1571 = OpSampledImage %1569 %1570 
                               f32_3 %1572 = OpLoad %249 
                               f32_2 %1573 = OpVectorShuffle %1572 %1572 0 2 
                               f32_4 %1574 = OpImageSampleExplicitLod %1571 %1573 Lod %27 
                                 f32 %1575 = OpCompositeExtract %1574 3 
                        Private f32* %1576 = OpAccessChain %119 %88 
                                               OpStore %1576 %1575 
                                               OpBranch %1549 
                                     %1549 = OpLabel 
                        Private i32* %1577 = OpAccessChain %584 %358 
                                 i32 %1578 = OpLoad %1577 
                                bool %1579 = OpIEqual %1578 %32 
                                               OpSelectionMerge %1581 None 
                                               OpBranchConditional %1579 %1580 %1581 
                                     %1580 = OpLabel 
                               f32_3 %1582 = OpLoad %484 
                               f32_2 %1583 = OpVectorShuffle %1582 %1582 0 2 
                               f32_3 %1584 = OpLoad %249 
                               f32_3 %1585 = OpVectorShuffle %1584 %1583 3 1 4 
                                               OpStore %249 %1585 
                               f32_3 %1586 = OpLoad %249 
                               f32_2 %1587 = OpVectorShuffle %1586 %1586 0 2 
                               f32_2 %1588 = OpCompositeConstruct %18 %18 
                               f32_2 %1589 = OpCompositeConstruct %19 %19 
                               f32_2 %1590 = OpExtInst %1 43 %1587 %1588 %1589 
                               f32_3 %1591 = OpLoad %249 
                               f32_3 %1592 = OpVectorShuffle %1591 %1590 3 1 4 
                                               OpStore %249 %1592 
                               f32_3 %1593 = OpLoad %249 
                               f32_2 %1594 = OpVectorShuffle %1593 %1593 0 2 
                        Uniform f32* %1595 = OpAccessChain %30 %32 
                                 f32 %1596 = OpLoad %1595 
                               f32_2 %1597 = OpCompositeConstruct %1596 %1596 
                               f32_2 %1598 = OpFMul %1594 %1597 
                               f32_3 %1599 = OpLoad %249 
                               f32_3 %1600 = OpVectorShuffle %1599 %1598 3 1 4 
                                               OpStore %249 %1600 
                 read_only Texture2D %1601 = OpLoad %44 
                             sampler %1602 = OpLoad %48 
          read_only Texture2DSampled %1603 = OpSampledImage %1601 %1602 
                               f32_3 %1604 = OpLoad %249 
                               f32_2 %1605 = OpVectorShuffle %1604 %1604 0 2 
                               f32_4 %1606 = OpImageSampleExplicitLod %1603 %1605 Lod %27 
                                 f32 %1607 = OpCompositeExtract %1606 3 
                        Private f32* %1608 = OpAccessChain %119 %358 
                                               OpStore %1608 %1607 
                                               OpBranch %1581 
                                     %1581 = OpLabel 
                                 f32 %1609 = OpLoad %56 
                                 f32 %1610 = OpFNegate %1609 
                                 f32 %1611 = OpFMul %1610 %448 
                        Private f32* %1612 = OpAccessChain %119 %88 
                                 f32 %1613 = OpLoad %1612 
                                 f32 %1614 = OpFAdd %1611 %1613 
                        Private f32* %1615 = OpAccessChain %249 %88 
                                               OpStore %1615 %1614 
                        Private i32* %1616 = OpAccessChain %584 %88 
                                 i32 %1617 = OpLoad %1616 
                                bool %1618 = OpINotEqual %1617 %32 
                                               OpSelectionMerge %1621 None 
                                               OpBranchConditional %1618 %1620 %1624 
                                     %1620 = OpLabel 
                        Private f32* %1622 = OpAccessChain %119 %88 
                                 f32 %1623 = OpLoad %1622 
                                               OpStore %1619 %1623 
                                               OpBranch %1621 
                                     %1624 = OpLabel 
                        Private f32* %1625 = OpAccessChain %249 %88 
                                 f32 %1626 = OpLoad %1625 
                                               OpStore %1619 %1626 
                                               OpBranch %1621 
                                     %1621 = OpLabel 
                                 f32 %1627 = OpLoad %1619 
                        Private f32* %1628 = OpAccessChain %119 %88 
                                               OpStore %1628 %1627 
                                 f32 %1629 = OpLoad %56 
                                 f32 %1630 = OpFNegate %1629 
                                 f32 %1631 = OpFMul %1630 %448 
                        Private f32* %1632 = OpAccessChain %119 %358 
                                 f32 %1633 = OpLoad %1632 
                                 f32 %1634 = OpFAdd %1631 %1633 
                        Private f32* %1635 = OpAccessChain %207 %88 
                                               OpStore %1635 %1634 
                        Private i32* %1636 = OpAccessChain %584 %358 
                                 i32 %1637 = OpLoad %1636 
                                bool %1638 = OpINotEqual %1637 %32 
                                               OpSelectionMerge %1641 None 
                                               OpBranchConditional %1638 %1640 %1644 
                                     %1640 = OpLabel 
                        Private f32* %1642 = OpAccessChain %119 %358 
                                 f32 %1643 = OpLoad %1642 
                                               OpStore %1639 %1643 
                                               OpBranch %1641 
                                     %1644 = OpLabel 
                        Private f32* %1645 = OpAccessChain %207 %88 
                                 f32 %1646 = OpLoad %1645 
                                               OpStore %1639 %1646 
                                               OpBranch %1641 
                                     %1641 = OpLabel 
                                 f32 %1647 = OpLoad %1639 
                        Private f32* %1648 = OpAccessChain %119 %358 
                                               OpStore %1648 %1647 
                               f32_2 %1649 = OpLoad %119 
                               f32_4 %1650 = OpVectorShuffle %1649 %1649 0 1 0 1 
                               f32_4 %1651 = OpExtInst %1 4 %1650 
                               f32_3 %1652 = OpLoad %78 
                               f32_4 %1653 = OpVectorShuffle %1652 %1652 0 0 0 0 
                              bool_4 %1654 = OpFOrdGreaterThanEqual %1651 %1653 
                              bool_2 %1655 = OpVectorShuffle %1654 %1654 0 1 
                               u32_2 %1656 = OpSelect %1655 %596 %595 
                               u32_2 %1657 = OpCompositeConstruct %567 %567 
                               u32_2 %1658 = OpIMul %1656 %1657 
                               i32_2 %1659 = OpBitcast %1658 
                                               OpStore %584 %1659 
                        Private f32* %1660 = OpAccessChain %100 %88 
                                 f32 %1661 = OpLoad %1660 
                                 f32 %1662 = OpFNegate %1661 
                                 f32 %1663 = OpFMul %1662 %276 
                        Private f32* %1664 = OpAccessChain %237 %88 
                                 f32 %1665 = OpLoad %1664 
                                 f32 %1666 = OpFAdd %1663 %1665 
                        Private f32* %1667 = OpAccessChain %249 %88 
                                               OpStore %1667 %1666 
                        Private i32* %1668 = OpAccessChain %584 %88 
                                 i32 %1669 = OpLoad %1668 
                                bool %1670 = OpINotEqual %1669 %32 
                                               OpSelectionMerge %1673 None 
                                               OpBranchConditional %1670 %1672 %1676 
                                     %1672 = OpLabel 
                        Private f32* %1674 = OpAccessChain %237 %88 
                                 f32 %1675 = OpLoad %1674 
                                               OpStore %1671 %1675 
                                               OpBranch %1673 
                                     %1676 = OpLabel 
                        Private f32* %1677 = OpAccessChain %249 %88 
                                 f32 %1678 = OpLoad %1677 
                                               OpStore %1671 %1678 
                                               OpBranch %1673 
                                     %1673 = OpLabel 
                                 f32 %1679 = OpLoad %1671 
                        Private f32* %1680 = OpAccessChain %237 %88 
                                               OpStore %1680 %1679 
                        Private f32* %1681 = OpAccessChain %100 %358 
                                 f32 %1682 = OpLoad %1681 
                                 f32 %1683 = OpFNegate %1682 
                                 f32 %1684 = OpFMul %1683 %276 
                        Private f32* %1685 = OpAccessChain %237 %642 
                                 f32 %1686 = OpLoad %1685 
                                 f32 %1687 = OpFAdd %1684 %1686 
                        Private f32* %1688 = OpAccessChain %249 %88 
                                               OpStore %1688 %1687 
                        Private i32* %1689 = OpAccessChain %584 %88 
                                 i32 %1690 = OpLoad %1689 
                                bool %1691 = OpINotEqual %1690 %32 
                                               OpSelectionMerge %1694 None 
                                               OpBranchConditional %1691 %1693 %1697 
                                     %1693 = OpLabel 
                        Private f32* %1695 = OpAccessChain %237 %642 
                                 f32 %1696 = OpLoad %1695 
                                               OpStore %1692 %1696 
                                               OpBranch %1694 
                                     %1697 = OpLabel 
                        Private f32* %1698 = OpAccessChain %249 %88 
                                 f32 %1699 = OpLoad %1698 
                                               OpStore %1692 %1699 
                                               OpBranch %1694 
                                     %1694 = OpLabel 
                                 f32 %1700 = OpLoad %1692 
                        Private f32* %1701 = OpAccessChain %237 %642 
                                               OpStore %1701 %1700 
                               i32_2 %1702 = OpLoad %584 
                               i32_2 %1703 = OpNot %1702 
                               i32_3 %1704 = OpLoad %646 
                               i32_3 %1705 = OpVectorShuffle %1704 %1703 3 1 4 
                                               OpStore %646 %1705 
                        Private i32* %1706 = OpAccessChain %646 %642 
                                 i32 %1707 = OpLoad %1706 
                                 u32 %1708 = OpBitcast %1707 
                        Private i32* %1709 = OpAccessChain %646 %88 
                                 i32 %1710 = OpLoad %1709 
                                 u32 %1711 = OpBitcast %1710 
                                 u32 %1712 = OpBitwiseOr %1708 %1711 
                                 i32 %1713 = OpBitcast %1712 
                        Private i32* %1714 = OpAccessChain %646 %88 
                                               OpStore %1714 %1713 
                        Private f32* %1715 = OpAccessChain %100 %88 
                                 f32 %1716 = OpLoad %1715 
                                 f32 %1717 = OpFMul %1716 %276 
                        Private f32* %1718 = OpAccessChain %484 %88 
                                 f32 %1719 = OpLoad %1718 
                                 f32 %1720 = OpFAdd %1717 %1719 
                                               OpStore %623 %1720 
                        Private i32* %1721 = OpAccessChain %584 %358 
                                 i32 %1722 = OpLoad %1721 
                                bool %1723 = OpINotEqual %1722 %32 
                                               OpSelectionMerge %1726 None 
                                               OpBranchConditional %1723 %1725 %1729 
                                     %1725 = OpLabel 
                        Private f32* %1727 = OpAccessChain %484 %88 
                                 f32 %1728 = OpLoad %1727 
                                               OpStore %1724 %1728 
                                               OpBranch %1726 
                                     %1729 = OpLabel 
                                 f32 %1730 = OpLoad %623 
                                               OpStore %1724 %1730 
                                               OpBranch %1726 
                                     %1726 = OpLabel 
                                 f32 %1731 = OpLoad %1724 
                        Private f32* %1732 = OpAccessChain %484 %88 
                                               OpStore %1732 %1731 
                        Private f32* %1733 = OpAccessChain %100 %358 
                                 f32 %1734 = OpLoad %1733 
                                 f32 %1735 = OpFMul %1734 %276 
                        Private f32* %1736 = OpAccessChain %484 %642 
                                 f32 %1737 = OpLoad %1736 
                                 f32 %1738 = OpFAdd %1735 %1737 
                                               OpStore %623 %1738 
                        Private i32* %1739 = OpAccessChain %584 %358 
                                 i32 %1740 = OpLoad %1739 
                                bool %1741 = OpINotEqual %1740 %32 
                                               OpSelectionMerge %1744 None 
                                               OpBranchConditional %1741 %1743 %1747 
                                     %1743 = OpLabel 
                        Private f32* %1745 = OpAccessChain %484 %642 
                                 f32 %1746 = OpLoad %1745 
                                               OpStore %1742 %1746 
                                               OpBranch %1744 
                                     %1747 = OpLabel 
                                 f32 %1748 = OpLoad %623 
                                               OpStore %1742 %1748 
                                               OpBranch %1744 
                                     %1744 = OpLabel 
                                 f32 %1749 = OpLoad %1742 
                        Private f32* %1750 = OpAccessChain %484 %642 
                                               OpStore %1750 %1749 
                        Private i32* %1751 = OpAccessChain %646 %88 
                                 i32 %1752 = OpLoad %1751 
                                bool %1753 = OpINotEqual %1752 %32 
                                               OpSelectionMerge %1755 None 
                                               OpBranchConditional %1753 %1754 %1755 
                                     %1754 = OpLabel 
                        Private i32* %1756 = OpAccessChain %584 %88 
                                 i32 %1757 = OpLoad %1756 
                                bool %1758 = OpIEqual %1757 %32 
                                               OpSelectionMerge %1760 None 
                                               OpBranchConditional %1758 %1759 %1760 
                                     %1759 = OpLabel 
                               f32_3 %1761 = OpLoad %237 
                               f32_2 %1762 = OpVectorShuffle %1761 %1761 0 2 
                               f32_3 %1763 = OpLoad %249 
                               f32_3 %1764 = OpVectorShuffle %1763 %1762 3 1 4 
                                               OpStore %249 %1764 
                               f32_3 %1765 = OpLoad %249 
                               f32_2 %1766 = OpVectorShuffle %1765 %1765 0 2 
                               f32_2 %1767 = OpCompositeConstruct %18 %18 
                               f32_2 %1768 = OpCompositeConstruct %19 %19 
                               f32_2 %1769 = OpExtInst %1 43 %1766 %1767 %1768 
                               f32_3 %1770 = OpLoad %249 
                               f32_3 %1771 = OpVectorShuffle %1770 %1769 3 1 4 
                                               OpStore %249 %1771 
                               f32_3 %1772 = OpLoad %249 
                               f32_2 %1773 = OpVectorShuffle %1772 %1772 0 2 
                        Uniform f32* %1774 = OpAccessChain %30 %32 
                                 f32 %1775 = OpLoad %1774 
                               f32_2 %1776 = OpCompositeConstruct %1775 %1775 
                               f32_2 %1777 = OpFMul %1773 %1776 
                               f32_3 %1778 = OpLoad %249 
                               f32_3 %1779 = OpVectorShuffle %1778 %1777 3 1 4 
                                               OpStore %249 %1779 
                 read_only Texture2D %1780 = OpLoad %44 
                             sampler %1781 = OpLoad %48 
          read_only Texture2DSampled %1782 = OpSampledImage %1780 %1781 
                               f32_3 %1783 = OpLoad %249 
                               f32_2 %1784 = OpVectorShuffle %1783 %1783 0 2 
                               f32_4 %1785 = OpImageSampleExplicitLod %1782 %1784 Lod %27 
                                 f32 %1786 = OpCompositeExtract %1785 3 
                        Private f32* %1787 = OpAccessChain %119 %88 
                                               OpStore %1787 %1786 
                                               OpBranch %1760 
                                     %1760 = OpLabel 
                        Private i32* %1788 = OpAccessChain %584 %358 
                                 i32 %1789 = OpLoad %1788 
                                bool %1790 = OpIEqual %1789 %32 
                                               OpSelectionMerge %1792 None 
                                               OpBranchConditional %1790 %1791 %1792 
                                     %1791 = OpLabel 
                               f32_3 %1793 = OpLoad %484 
                               f32_2 %1794 = OpVectorShuffle %1793 %1793 0 2 
                               f32_3 %1795 = OpLoad %249 
                               f32_3 %1796 = OpVectorShuffle %1795 %1794 3 1 4 
                                               OpStore %249 %1796 
                               f32_3 %1797 = OpLoad %249 
                               f32_2 %1798 = OpVectorShuffle %1797 %1797 0 2 
                               f32_2 %1799 = OpCompositeConstruct %18 %18 
                               f32_2 %1800 = OpCompositeConstruct %19 %19 
                               f32_2 %1801 = OpExtInst %1 43 %1798 %1799 %1800 
                               f32_3 %1802 = OpLoad %249 
                               f32_3 %1803 = OpVectorShuffle %1802 %1801 3 1 4 
                                               OpStore %249 %1803 
                               f32_3 %1804 = OpLoad %249 
                               f32_2 %1805 = OpVectorShuffle %1804 %1804 0 2 
                        Uniform f32* %1806 = OpAccessChain %30 %32 
                                 f32 %1807 = OpLoad %1806 
                               f32_2 %1808 = OpCompositeConstruct %1807 %1807 
                               f32_2 %1809 = OpFMul %1805 %1808 
                               f32_3 %1810 = OpLoad %249 
                               f32_3 %1811 = OpVectorShuffle %1810 %1809 3 1 4 
                                               OpStore %249 %1811 
                 read_only Texture2D %1812 = OpLoad %44 
                             sampler %1813 = OpLoad %48 
          read_only Texture2DSampled %1814 = OpSampledImage %1812 %1813 
                               f32_3 %1815 = OpLoad %249 
                               f32_2 %1816 = OpVectorShuffle %1815 %1815 0 2 
                               f32_4 %1817 = OpImageSampleExplicitLod %1814 %1816 Lod %27 
                                 f32 %1818 = OpCompositeExtract %1817 3 
                        Private f32* %1819 = OpAccessChain %119 %358 
                                               OpStore %1819 %1818 
                                               OpBranch %1792 
                                     %1792 = OpLabel 
                                 f32 %1820 = OpLoad %56 
                                 f32 %1821 = OpFNegate %1820 
                                 f32 %1822 = OpFMul %1821 %448 
                        Private f32* %1823 = OpAccessChain %119 %88 
                                 f32 %1824 = OpLoad %1823 
                                 f32 %1825 = OpFAdd %1822 %1824 
                        Private f32* %1826 = OpAccessChain %249 %88 
                                               OpStore %1826 %1825 
                        Private i32* %1827 = OpAccessChain %584 %88 
                                 i32 %1828 = OpLoad %1827 
                                bool %1829 = OpINotEqual %1828 %32 
                                               OpSelectionMerge %1832 None 
                                               OpBranchConditional %1829 %1831 %1835 
                                     %1831 = OpLabel 
                        Private f32* %1833 = OpAccessChain %119 %88 
                                 f32 %1834 = OpLoad %1833 
                                               OpStore %1830 %1834 
                                               OpBranch %1832 
                                     %1835 = OpLabel 
                        Private f32* %1836 = OpAccessChain %249 %88 
                                 f32 %1837 = OpLoad %1836 
                                               OpStore %1830 %1837 
                                               OpBranch %1832 
                                     %1832 = OpLabel 
                                 f32 %1838 = OpLoad %1830 
                        Private f32* %1839 = OpAccessChain %119 %88 
                                               OpStore %1839 %1838 
                                 f32 %1840 = OpLoad %56 
                                 f32 %1841 = OpFNegate %1840 
                                 f32 %1842 = OpFMul %1841 %448 
                        Private f32* %1843 = OpAccessChain %119 %358 
                                 f32 %1844 = OpLoad %1843 
                                 f32 %1845 = OpFAdd %1842 %1844 
                        Private f32* %1846 = OpAccessChain %207 %88 
                                               OpStore %1846 %1845 
                        Private i32* %1847 = OpAccessChain %584 %358 
                                 i32 %1848 = OpLoad %1847 
                                bool %1849 = OpINotEqual %1848 %32 
                                               OpSelectionMerge %1852 None 
                                               OpBranchConditional %1849 %1851 %1855 
                                     %1851 = OpLabel 
                        Private f32* %1853 = OpAccessChain %119 %358 
                                 f32 %1854 = OpLoad %1853 
                                               OpStore %1850 %1854 
                                               OpBranch %1852 
                                     %1855 = OpLabel 
                        Private f32* %1856 = OpAccessChain %207 %88 
                                 f32 %1857 = OpLoad %1856 
                                               OpStore %1850 %1857 
                                               OpBranch %1852 
                                     %1852 = OpLabel 
                                 f32 %1858 = OpLoad %1850 
                        Private f32* %1859 = OpAccessChain %119 %358 
                                               OpStore %1859 %1858 
                               f32_2 %1860 = OpLoad %119 
                               f32_4 %1861 = OpVectorShuffle %1860 %1860 0 1 0 1 
                               f32_4 %1862 = OpExtInst %1 4 %1861 
                               f32_3 %1863 = OpLoad %78 
                               f32_4 %1864 = OpVectorShuffle %1863 %1863 0 0 0 0 
                              bool_4 %1865 = OpFOrdGreaterThanEqual %1862 %1864 
                              bool_2 %1866 = OpVectorShuffle %1865 %1865 0 1 
                               u32_2 %1867 = OpSelect %1866 %596 %595 
                               u32_2 %1868 = OpCompositeConstruct %567 %567 
                               u32_2 %1869 = OpIMul %1867 %1868 
                               i32_2 %1870 = OpBitcast %1869 
                                               OpStore %584 %1870 
                        Private f32* %1871 = OpAccessChain %100 %88 
                                 f32 %1872 = OpLoad %1871 
                                 f32 %1873 = OpFNegate %1872 
                                 f32 %1874 = OpFMul %1873 %276 
                        Private f32* %1875 = OpAccessChain %237 %88 
                                 f32 %1876 = OpLoad %1875 
                                 f32 %1877 = OpFAdd %1874 %1876 
                        Private f32* %1878 = OpAccessChain %249 %88 
                                               OpStore %1878 %1877 
                        Private i32* %1879 = OpAccessChain %584 %88 
                                 i32 %1880 = OpLoad %1879 
                                bool %1881 = OpINotEqual %1880 %32 
                                               OpSelectionMerge %1884 None 
                                               OpBranchConditional %1881 %1883 %1887 
                                     %1883 = OpLabel 
                        Private f32* %1885 = OpAccessChain %237 %88 
                                 f32 %1886 = OpLoad %1885 
                                               OpStore %1882 %1886 
                                               OpBranch %1884 
                                     %1887 = OpLabel 
                        Private f32* %1888 = OpAccessChain %249 %88 
                                 f32 %1889 = OpLoad %1888 
                                               OpStore %1882 %1889 
                                               OpBranch %1884 
                                     %1884 = OpLabel 
                                 f32 %1890 = OpLoad %1882 
                        Private f32* %1891 = OpAccessChain %237 %88 
                                               OpStore %1891 %1890 
                        Private f32* %1892 = OpAccessChain %100 %358 
                                 f32 %1893 = OpLoad %1892 
                                 f32 %1894 = OpFNegate %1893 
                                 f32 %1895 = OpFMul %1894 %276 
                        Private f32* %1896 = OpAccessChain %237 %642 
                                 f32 %1897 = OpLoad %1896 
                                 f32 %1898 = OpFAdd %1895 %1897 
                        Private f32* %1899 = OpAccessChain %249 %88 
                                               OpStore %1899 %1898 
                        Private i32* %1900 = OpAccessChain %584 %88 
                                 i32 %1901 = OpLoad %1900 
                                bool %1902 = OpINotEqual %1901 %32 
                                               OpSelectionMerge %1905 None 
                                               OpBranchConditional %1902 %1904 %1908 
                                     %1904 = OpLabel 
                        Private f32* %1906 = OpAccessChain %237 %642 
                                 f32 %1907 = OpLoad %1906 
                                               OpStore %1903 %1907 
                                               OpBranch %1905 
                                     %1908 = OpLabel 
                        Private f32* %1909 = OpAccessChain %249 %88 
                                 f32 %1910 = OpLoad %1909 
                                               OpStore %1903 %1910 
                                               OpBranch %1905 
                                     %1905 = OpLabel 
                                 f32 %1911 = OpLoad %1903 
                        Private f32* %1912 = OpAccessChain %237 %642 
                                               OpStore %1912 %1911 
                               i32_2 %1913 = OpLoad %584 
                               i32_2 %1914 = OpNot %1913 
                               i32_3 %1915 = OpLoad %646 
                               i32_3 %1916 = OpVectorShuffle %1915 %1914 3 1 4 
                                               OpStore %646 %1916 
                        Private i32* %1917 = OpAccessChain %646 %642 
                                 i32 %1918 = OpLoad %1917 
                                 u32 %1919 = OpBitcast %1918 
                        Private i32* %1920 = OpAccessChain %646 %88 
                                 i32 %1921 = OpLoad %1920 
                                 u32 %1922 = OpBitcast %1921 
                                 u32 %1923 = OpBitwiseOr %1919 %1922 
                                 i32 %1924 = OpBitcast %1923 
                        Private i32* %1925 = OpAccessChain %646 %88 
                                               OpStore %1925 %1924 
                        Private f32* %1926 = OpAccessChain %100 %88 
                                 f32 %1927 = OpLoad %1926 
                                 f32 %1928 = OpFMul %1927 %276 
                        Private f32* %1929 = OpAccessChain %484 %88 
                                 f32 %1930 = OpLoad %1929 
                                 f32 %1931 = OpFAdd %1928 %1930 
                                               OpStore %623 %1931 
                        Private i32* %1932 = OpAccessChain %584 %358 
                                 i32 %1933 = OpLoad %1932 
                                bool %1934 = OpINotEqual %1933 %32 
                                               OpSelectionMerge %1937 None 
                                               OpBranchConditional %1934 %1936 %1940 
                                     %1936 = OpLabel 
                        Private f32* %1938 = OpAccessChain %484 %88 
                                 f32 %1939 = OpLoad %1938 
                                               OpStore %1935 %1939 
                                               OpBranch %1937 
                                     %1940 = OpLabel 
                                 f32 %1941 = OpLoad %623 
                                               OpStore %1935 %1941 
                                               OpBranch %1937 
                                     %1937 = OpLabel 
                                 f32 %1942 = OpLoad %1935 
                        Private f32* %1943 = OpAccessChain %484 %88 
                                               OpStore %1943 %1942 
                        Private f32* %1944 = OpAccessChain %100 %358 
                                 f32 %1945 = OpLoad %1944 
                                 f32 %1946 = OpFMul %1945 %276 
                        Private f32* %1947 = OpAccessChain %484 %642 
                                 f32 %1948 = OpLoad %1947 
                                 f32 %1949 = OpFAdd %1946 %1948 
                                               OpStore %623 %1949 
                        Private i32* %1950 = OpAccessChain %584 %358 
                                 i32 %1951 = OpLoad %1950 
                                bool %1952 = OpINotEqual %1951 %32 
                                               OpSelectionMerge %1955 None 
                                               OpBranchConditional %1952 %1954 %1958 
                                     %1954 = OpLabel 
                        Private f32* %1956 = OpAccessChain %484 %642 
                                 f32 %1957 = OpLoad %1956 
                                               OpStore %1953 %1957 
                                               OpBranch %1955 
                                     %1958 = OpLabel 
                                 f32 %1959 = OpLoad %623 
                                               OpStore %1953 %1959 
                                               OpBranch %1955 
                                     %1955 = OpLabel 
                                 f32 %1960 = OpLoad %1953 
                        Private f32* %1961 = OpAccessChain %484 %642 
                                               OpStore %1961 %1960 
                        Private i32* %1962 = OpAccessChain %646 %88 
                                 i32 %1963 = OpLoad %1962 
                                bool %1964 = OpINotEqual %1963 %32 
                                               OpSelectionMerge %1966 None 
                                               OpBranchConditional %1964 %1965 %1966 
                                     %1965 = OpLabel 
                        Private i32* %1967 = OpAccessChain %584 %88 
                                 i32 %1968 = OpLoad %1967 
                                bool %1969 = OpIEqual %1968 %32 
                                               OpSelectionMerge %1971 None 
                                               OpBranchConditional %1969 %1970 %1971 
                                     %1970 = OpLabel 
                               f32_3 %1972 = OpLoad %237 
                               f32_2 %1973 = OpVectorShuffle %1972 %1972 0 2 
                               f32_3 %1974 = OpLoad %249 
                               f32_3 %1975 = OpVectorShuffle %1974 %1973 3 1 4 
                                               OpStore %249 %1975 
                               f32_3 %1976 = OpLoad %249 
                               f32_2 %1977 = OpVectorShuffle %1976 %1976 0 2 
                               f32_2 %1978 = OpCompositeConstruct %18 %18 
                               f32_2 %1979 = OpCompositeConstruct %19 %19 
                               f32_2 %1980 = OpExtInst %1 43 %1977 %1978 %1979 
                               f32_3 %1981 = OpLoad %249 
                               f32_3 %1982 = OpVectorShuffle %1981 %1980 3 1 4 
                                               OpStore %249 %1982 
                               f32_3 %1983 = OpLoad %249 
                               f32_2 %1984 = OpVectorShuffle %1983 %1983 0 2 
                        Uniform f32* %1985 = OpAccessChain %30 %32 
                                 f32 %1986 = OpLoad %1985 
                               f32_2 %1987 = OpCompositeConstruct %1986 %1986 
                               f32_2 %1988 = OpFMul %1984 %1987 
                               f32_3 %1989 = OpLoad %249 
                               f32_3 %1990 = OpVectorShuffle %1989 %1988 3 1 4 
                                               OpStore %249 %1990 
                 read_only Texture2D %1991 = OpLoad %44 
                             sampler %1992 = OpLoad %48 
          read_only Texture2DSampled %1993 = OpSampledImage %1991 %1992 
                               f32_3 %1994 = OpLoad %249 
                               f32_2 %1995 = OpVectorShuffle %1994 %1994 0 2 
                               f32_4 %1996 = OpImageSampleExplicitLod %1993 %1995 Lod %27 
                                 f32 %1997 = OpCompositeExtract %1996 3 
                        Private f32* %1998 = OpAccessChain %119 %88 
                                               OpStore %1998 %1997 
                                               OpBranch %1971 
                                     %1971 = OpLabel 
                        Private i32* %1999 = OpAccessChain %584 %358 
                                 i32 %2000 = OpLoad %1999 
                                bool %2001 = OpIEqual %2000 %32 
                                               OpSelectionMerge %2003 None 
                                               OpBranchConditional %2001 %2002 %2003 
                                     %2002 = OpLabel 
                               f32_3 %2004 = OpLoad %484 
                               f32_2 %2005 = OpVectorShuffle %2004 %2004 0 2 
                               f32_3 %2006 = OpLoad %249 
                               f32_3 %2007 = OpVectorShuffle %2006 %2005 3 1 4 
                                               OpStore %249 %2007 
                               f32_3 %2008 = OpLoad %249 
                               f32_2 %2009 = OpVectorShuffle %2008 %2008 0 2 
                               f32_2 %2010 = OpCompositeConstruct %18 %18 
                               f32_2 %2011 = OpCompositeConstruct %19 %19 
                               f32_2 %2012 = OpExtInst %1 43 %2009 %2010 %2011 
                               f32_3 %2013 = OpLoad %249 
                               f32_3 %2014 = OpVectorShuffle %2013 %2012 3 1 4 
                                               OpStore %249 %2014 
                               f32_3 %2015 = OpLoad %249 
                               f32_2 %2016 = OpVectorShuffle %2015 %2015 0 2 
                        Uniform f32* %2017 = OpAccessChain %30 %32 
                                 f32 %2018 = OpLoad %2017 
                               f32_2 %2019 = OpCompositeConstruct %2018 %2018 
                               f32_2 %2020 = OpFMul %2016 %2019 
                               f32_3 %2021 = OpLoad %249 
                               f32_3 %2022 = OpVectorShuffle %2021 %2020 3 1 4 
                                               OpStore %249 %2022 
                 read_only Texture2D %2023 = OpLoad %44 
                             sampler %2024 = OpLoad %48 
          read_only Texture2DSampled %2025 = OpSampledImage %2023 %2024 
                               f32_3 %2026 = OpLoad %249 
                               f32_2 %2027 = OpVectorShuffle %2026 %2026 0 2 
                               f32_4 %2028 = OpImageSampleExplicitLod %2025 %2027 Lod %27 
                                 f32 %2029 = OpCompositeExtract %2028 3 
                        Private f32* %2030 = OpAccessChain %119 %358 
                                               OpStore %2030 %2029 
                                               OpBranch %2003 
                                     %2003 = OpLabel 
                                 f32 %2031 = OpLoad %56 
                                 f32 %2032 = OpFNegate %2031 
                                 f32 %2033 = OpFMul %2032 %448 
                        Private f32* %2034 = OpAccessChain %119 %88 
                                 f32 %2035 = OpLoad %2034 
                                 f32 %2036 = OpFAdd %2033 %2035 
                        Private f32* %2037 = OpAccessChain %249 %88 
                                               OpStore %2037 %2036 
                        Private i32* %2038 = OpAccessChain %584 %88 
                                 i32 %2039 = OpLoad %2038 
                                bool %2040 = OpINotEqual %2039 %32 
                                               OpSelectionMerge %2043 None 
                                               OpBranchConditional %2040 %2042 %2046 
                                     %2042 = OpLabel 
                        Private f32* %2044 = OpAccessChain %119 %88 
                                 f32 %2045 = OpLoad %2044 
                                               OpStore %2041 %2045 
                                               OpBranch %2043 
                                     %2046 = OpLabel 
                        Private f32* %2047 = OpAccessChain %249 %88 
                                 f32 %2048 = OpLoad %2047 
                                               OpStore %2041 %2048 
                                               OpBranch %2043 
                                     %2043 = OpLabel 
                                 f32 %2049 = OpLoad %2041 
                        Private f32* %2050 = OpAccessChain %119 %88 
                                               OpStore %2050 %2049 
                                 f32 %2051 = OpLoad %56 
                                 f32 %2052 = OpFNegate %2051 
                                 f32 %2053 = OpFMul %2052 %448 
                        Private f32* %2054 = OpAccessChain %119 %358 
                                 f32 %2055 = OpLoad %2054 
                                 f32 %2056 = OpFAdd %2053 %2055 
                        Private f32* %2057 = OpAccessChain %207 %88 
                                               OpStore %2057 %2056 
                        Private i32* %2058 = OpAccessChain %584 %358 
                                 i32 %2059 = OpLoad %2058 
                                bool %2060 = OpINotEqual %2059 %32 
                                               OpSelectionMerge %2063 None 
                                               OpBranchConditional %2060 %2062 %2066 
                                     %2062 = OpLabel 
                        Private f32* %2064 = OpAccessChain %119 %358 
                                 f32 %2065 = OpLoad %2064 
                                               OpStore %2061 %2065 
                                               OpBranch %2063 
                                     %2066 = OpLabel 
                        Private f32* %2067 = OpAccessChain %207 %88 
                                 f32 %2068 = OpLoad %2067 
                                               OpStore %2061 %2068 
                                               OpBranch %2063 
                                     %2063 = OpLabel 
                                 f32 %2069 = OpLoad %2061 
                        Private f32* %2070 = OpAccessChain %119 %358 
                                               OpStore %2070 %2069 
                               f32_2 %2071 = OpLoad %119 
                               f32_4 %2072 = OpVectorShuffle %2071 %2071 0 1 0 1 
                               f32_4 %2073 = OpExtInst %1 4 %2072 
                               f32_3 %2074 = OpLoad %78 
                               f32_4 %2075 = OpVectorShuffle %2074 %2074 0 0 0 0 
                              bool_4 %2076 = OpFOrdGreaterThanEqual %2073 %2075 
                              bool_2 %2077 = OpVectorShuffle %2076 %2076 0 1 
                               u32_2 %2078 = OpSelect %2077 %596 %595 
                               u32_2 %2079 = OpCompositeConstruct %567 %567 
                               u32_2 %2080 = OpIMul %2078 %2079 
                               i32_2 %2081 = OpBitcast %2080 
                                               OpStore %584 %2081 
                        Private f32* %2082 = OpAccessChain %100 %88 
                                 f32 %2083 = OpLoad %2082 
                                 f32 %2084 = OpFNegate %2083 
                                 f32 %2085 = OpFMul %2084 %276 
                        Private f32* %2086 = OpAccessChain %237 %88 
                                 f32 %2087 = OpLoad %2086 
                                 f32 %2088 = OpFAdd %2085 %2087 
                        Private f32* %2089 = OpAccessChain %249 %88 
                                               OpStore %2089 %2088 
                        Private i32* %2090 = OpAccessChain %584 %88 
                                 i32 %2091 = OpLoad %2090 
                                bool %2092 = OpINotEqual %2091 %32 
                                               OpSelectionMerge %2095 None 
                                               OpBranchConditional %2092 %2094 %2098 
                                     %2094 = OpLabel 
                        Private f32* %2096 = OpAccessChain %237 %88 
                                 f32 %2097 = OpLoad %2096 
                                               OpStore %2093 %2097 
                                               OpBranch %2095 
                                     %2098 = OpLabel 
                        Private f32* %2099 = OpAccessChain %249 %88 
                                 f32 %2100 = OpLoad %2099 
                                               OpStore %2093 %2100 
                                               OpBranch %2095 
                                     %2095 = OpLabel 
                                 f32 %2101 = OpLoad %2093 
                        Private f32* %2102 = OpAccessChain %237 %88 
                                               OpStore %2102 %2101 
                        Private f32* %2103 = OpAccessChain %100 %358 
                                 f32 %2104 = OpLoad %2103 
                                 f32 %2105 = OpFNegate %2104 
                                 f32 %2106 = OpFMul %2105 %276 
                        Private f32* %2107 = OpAccessChain %237 %642 
                                 f32 %2108 = OpLoad %2107 
                                 f32 %2109 = OpFAdd %2106 %2108 
                        Private f32* %2110 = OpAccessChain %249 %88 
                                               OpStore %2110 %2109 
                        Private i32* %2111 = OpAccessChain %584 %88 
                                 i32 %2112 = OpLoad %2111 
                                bool %2113 = OpINotEqual %2112 %32 
                                               OpSelectionMerge %2116 None 
                                               OpBranchConditional %2113 %2115 %2119 
                                     %2115 = OpLabel 
                        Private f32* %2117 = OpAccessChain %237 %642 
                                 f32 %2118 = OpLoad %2117 
                                               OpStore %2114 %2118 
                                               OpBranch %2116 
                                     %2119 = OpLabel 
                        Private f32* %2120 = OpAccessChain %249 %88 
                                 f32 %2121 = OpLoad %2120 
                                               OpStore %2114 %2121 
                                               OpBranch %2116 
                                     %2116 = OpLabel 
                                 f32 %2122 = OpLoad %2114 
                        Private f32* %2123 = OpAccessChain %237 %642 
                                               OpStore %2123 %2122 
                               i32_2 %2124 = OpLoad %584 
                               i32_2 %2125 = OpNot %2124 
                               i32_3 %2126 = OpLoad %646 
                               i32_3 %2127 = OpVectorShuffle %2126 %2125 3 1 4 
                                               OpStore %646 %2127 
                        Private i32* %2128 = OpAccessChain %646 %642 
                                 i32 %2129 = OpLoad %2128 
                                 u32 %2130 = OpBitcast %2129 
                        Private i32* %2131 = OpAccessChain %646 %88 
                                 i32 %2132 = OpLoad %2131 
                                 u32 %2133 = OpBitcast %2132 
                                 u32 %2134 = OpBitwiseOr %2130 %2133 
                                 i32 %2135 = OpBitcast %2134 
                        Private i32* %2136 = OpAccessChain %646 %88 
                                               OpStore %2136 %2135 
                        Private f32* %2137 = OpAccessChain %100 %88 
                                 f32 %2138 = OpLoad %2137 
                                 f32 %2139 = OpFMul %2138 %276 
                        Private f32* %2140 = OpAccessChain %484 %88 
                                 f32 %2141 = OpLoad %2140 
                                 f32 %2142 = OpFAdd %2139 %2141 
                                               OpStore %623 %2142 
                        Private i32* %2143 = OpAccessChain %584 %358 
                                 i32 %2144 = OpLoad %2143 
                                bool %2145 = OpINotEqual %2144 %32 
                                               OpSelectionMerge %2148 None 
                                               OpBranchConditional %2145 %2147 %2151 
                                     %2147 = OpLabel 
                        Private f32* %2149 = OpAccessChain %484 %88 
                                 f32 %2150 = OpLoad %2149 
                                               OpStore %2146 %2150 
                                               OpBranch %2148 
                                     %2151 = OpLabel 
                                 f32 %2152 = OpLoad %623 
                                               OpStore %2146 %2152 
                                               OpBranch %2148 
                                     %2148 = OpLabel 
                                 f32 %2153 = OpLoad %2146 
                        Private f32* %2154 = OpAccessChain %484 %88 
                                               OpStore %2154 %2153 
                        Private f32* %2155 = OpAccessChain %100 %358 
                                 f32 %2156 = OpLoad %2155 
                                 f32 %2157 = OpFMul %2156 %276 
                        Private f32* %2158 = OpAccessChain %484 %642 
                                 f32 %2159 = OpLoad %2158 
                                 f32 %2160 = OpFAdd %2157 %2159 
                                               OpStore %623 %2160 
                        Private i32* %2161 = OpAccessChain %584 %358 
                                 i32 %2162 = OpLoad %2161 
                                bool %2163 = OpINotEqual %2162 %32 
                                               OpSelectionMerge %2166 None 
                                               OpBranchConditional %2163 %2165 %2169 
                                     %2165 = OpLabel 
                        Private f32* %2167 = OpAccessChain %484 %642 
                                 f32 %2168 = OpLoad %2167 
                                               OpStore %2164 %2168 
                                               OpBranch %2166 
                                     %2169 = OpLabel 
                                 f32 %2170 = OpLoad %623 
                                               OpStore %2164 %2170 
                                               OpBranch %2166 
                                     %2166 = OpLabel 
                                 f32 %2171 = OpLoad %2164 
                        Private f32* %2172 = OpAccessChain %484 %642 
                                               OpStore %2172 %2171 
                        Private i32* %2173 = OpAccessChain %646 %88 
                                 i32 %2174 = OpLoad %2173 
                                bool %2175 = OpINotEqual %2174 %32 
                                               OpSelectionMerge %2177 None 
                                               OpBranchConditional %2175 %2176 %2177 
                                     %2176 = OpLabel 
                        Private i32* %2178 = OpAccessChain %584 %88 
                                 i32 %2179 = OpLoad %2178 
                                bool %2180 = OpIEqual %2179 %32 
                                               OpSelectionMerge %2182 None 
                                               OpBranchConditional %2180 %2181 %2182 
                                     %2181 = OpLabel 
                               f32_3 %2183 = OpLoad %237 
                               f32_2 %2184 = OpVectorShuffle %2183 %2183 0 2 
                               f32_3 %2185 = OpLoad %249 
                               f32_3 %2186 = OpVectorShuffle %2185 %2184 3 1 4 
                                               OpStore %249 %2186 
                               f32_3 %2187 = OpLoad %249 
                               f32_2 %2188 = OpVectorShuffle %2187 %2187 0 2 
                               f32_2 %2189 = OpCompositeConstruct %18 %18 
                               f32_2 %2190 = OpCompositeConstruct %19 %19 
                               f32_2 %2191 = OpExtInst %1 43 %2188 %2189 %2190 
                               f32_3 %2192 = OpLoad %249 
                               f32_3 %2193 = OpVectorShuffle %2192 %2191 3 1 4 
                                               OpStore %249 %2193 
                               f32_3 %2194 = OpLoad %249 
                               f32_2 %2195 = OpVectorShuffle %2194 %2194 0 2 
                        Uniform f32* %2196 = OpAccessChain %30 %32 
                                 f32 %2197 = OpLoad %2196 
                               f32_2 %2198 = OpCompositeConstruct %2197 %2197 
                               f32_2 %2199 = OpFMul %2195 %2198 
                               f32_3 %2200 = OpLoad %249 
                               f32_3 %2201 = OpVectorShuffle %2200 %2199 3 1 4 
                                               OpStore %249 %2201 
                 read_only Texture2D %2202 = OpLoad %44 
                             sampler %2203 = OpLoad %48 
          read_only Texture2DSampled %2204 = OpSampledImage %2202 %2203 
                               f32_3 %2205 = OpLoad %249 
                               f32_2 %2206 = OpVectorShuffle %2205 %2205 0 2 
                               f32_4 %2207 = OpImageSampleExplicitLod %2204 %2206 Lod %27 
                                 f32 %2208 = OpCompositeExtract %2207 3 
                        Private f32* %2209 = OpAccessChain %119 %88 
                                               OpStore %2209 %2208 
                                               OpBranch %2182 
                                     %2182 = OpLabel 
                        Private i32* %2210 = OpAccessChain %584 %358 
                                 i32 %2211 = OpLoad %2210 
                                bool %2212 = OpIEqual %2211 %32 
                                               OpSelectionMerge %2214 None 
                                               OpBranchConditional %2212 %2213 %2214 
                                     %2213 = OpLabel 
                               f32_3 %2215 = OpLoad %484 
                               f32_2 %2216 = OpVectorShuffle %2215 %2215 0 2 
                               f32_3 %2217 = OpLoad %249 
                               f32_3 %2218 = OpVectorShuffle %2217 %2216 3 1 4 
                                               OpStore %249 %2218 
                               f32_3 %2219 = OpLoad %249 
                               f32_2 %2220 = OpVectorShuffle %2219 %2219 0 2 
                               f32_2 %2221 = OpCompositeConstruct %18 %18 
                               f32_2 %2222 = OpCompositeConstruct %19 %19 
                               f32_2 %2223 = OpExtInst %1 43 %2220 %2221 %2222 
                               f32_3 %2224 = OpLoad %249 
                               f32_3 %2225 = OpVectorShuffle %2224 %2223 3 1 4 
                                               OpStore %249 %2225 
                               f32_3 %2226 = OpLoad %249 
                               f32_2 %2227 = OpVectorShuffle %2226 %2226 0 2 
                        Uniform f32* %2228 = OpAccessChain %30 %32 
                                 f32 %2229 = OpLoad %2228 
                               f32_2 %2230 = OpCompositeConstruct %2229 %2229 
                               f32_2 %2231 = OpFMul %2227 %2230 
                               f32_3 %2232 = OpLoad %249 
                               f32_3 %2233 = OpVectorShuffle %2232 %2231 3 1 4 
                                               OpStore %249 %2233 
                 read_only Texture2D %2234 = OpLoad %44 
                             sampler %2235 = OpLoad %48 
          read_only Texture2DSampled %2236 = OpSampledImage %2234 %2235 
                               f32_3 %2237 = OpLoad %249 
                               f32_2 %2238 = OpVectorShuffle %2237 %2237 0 2 
                               f32_4 %2239 = OpImageSampleExplicitLod %2236 %2238 Lod %27 
                                 f32 %2240 = OpCompositeExtract %2239 3 
                        Private f32* %2241 = OpAccessChain %119 %358 
                                               OpStore %2241 %2240 
                                               OpBranch %2214 
                                     %2214 = OpLabel 
                                 f32 %2242 = OpLoad %56 
                                 f32 %2243 = OpFNegate %2242 
                                 f32 %2244 = OpFMul %2243 %448 
                        Private f32* %2245 = OpAccessChain %119 %88 
                                 f32 %2246 = OpLoad %2245 
                                 f32 %2247 = OpFAdd %2244 %2246 
                        Private f32* %2248 = OpAccessChain %249 %88 
                                               OpStore %2248 %2247 
                        Private i32* %2249 = OpAccessChain %584 %88 
                                 i32 %2250 = OpLoad %2249 
                                bool %2251 = OpINotEqual %2250 %32 
                                               OpSelectionMerge %2254 None 
                                               OpBranchConditional %2251 %2253 %2257 
                                     %2253 = OpLabel 
                        Private f32* %2255 = OpAccessChain %119 %88 
                                 f32 %2256 = OpLoad %2255 
                                               OpStore %2252 %2256 
                                               OpBranch %2254 
                                     %2257 = OpLabel 
                        Private f32* %2258 = OpAccessChain %249 %88 
                                 f32 %2259 = OpLoad %2258 
                                               OpStore %2252 %2259 
                                               OpBranch %2254 
                                     %2254 = OpLabel 
                                 f32 %2260 = OpLoad %2252 
                        Private f32* %2261 = OpAccessChain %119 %88 
                                               OpStore %2261 %2260 
                                 f32 %2262 = OpLoad %56 
                                 f32 %2263 = OpFNegate %2262 
                                 f32 %2264 = OpFMul %2263 %448 
                        Private f32* %2265 = OpAccessChain %119 %358 
                                 f32 %2266 = OpLoad %2265 
                                 f32 %2267 = OpFAdd %2264 %2266 
                        Private f32* %2268 = OpAccessChain %207 %88 
                                               OpStore %2268 %2267 
                        Private i32* %2269 = OpAccessChain %584 %358 
                                 i32 %2270 = OpLoad %2269 
                                bool %2271 = OpINotEqual %2270 %32 
                                               OpSelectionMerge %2274 None 
                                               OpBranchConditional %2271 %2273 %2277 
                                     %2273 = OpLabel 
                        Private f32* %2275 = OpAccessChain %119 %358 
                                 f32 %2276 = OpLoad %2275 
                                               OpStore %2272 %2276 
                                               OpBranch %2274 
                                     %2277 = OpLabel 
                        Private f32* %2278 = OpAccessChain %207 %88 
                                 f32 %2279 = OpLoad %2278 
                                               OpStore %2272 %2279 
                                               OpBranch %2274 
                                     %2274 = OpLabel 
                                 f32 %2280 = OpLoad %2272 
                        Private f32* %2281 = OpAccessChain %119 %358 
                                               OpStore %2281 %2280 
                               f32_2 %2282 = OpLoad %119 
                               f32_4 %2283 = OpVectorShuffle %2282 %2282 0 1 0 1 
                               f32_4 %2284 = OpExtInst %1 4 %2283 
                               f32_3 %2285 = OpLoad %78 
                               f32_4 %2286 = OpVectorShuffle %2285 %2285 0 0 0 0 
                              bool_4 %2287 = OpFOrdGreaterThanEqual %2284 %2286 
                              bool_2 %2288 = OpVectorShuffle %2287 %2287 0 1 
                               u32_2 %2289 = OpSelect %2288 %596 %595 
                               u32_2 %2290 = OpCompositeConstruct %567 %567 
                               u32_2 %2291 = OpIMul %2289 %2290 
                               i32_2 %2292 = OpBitcast %2291 
                                               OpStore %584 %2292 
                        Private f32* %2293 = OpAccessChain %100 %88 
                                 f32 %2294 = OpLoad %2293 
                                 f32 %2295 = OpFNegate %2294 
                                 f32 %2297 = OpFMul %2295 %2296 
                        Private f32* %2298 = OpAccessChain %237 %88 
                                 f32 %2299 = OpLoad %2298 
                                 f32 %2300 = OpFAdd %2297 %2299 
                        Private f32* %2301 = OpAccessChain %249 %88 
                                               OpStore %2301 %2300 
                        Private i32* %2302 = OpAccessChain %584 %88 
                                 i32 %2303 = OpLoad %2302 
                                bool %2304 = OpINotEqual %2303 %32 
                                               OpSelectionMerge %2307 None 
                                               OpBranchConditional %2304 %2306 %2310 
                                     %2306 = OpLabel 
                        Private f32* %2308 = OpAccessChain %237 %88 
                                 f32 %2309 = OpLoad %2308 
                                               OpStore %2305 %2309 
                                               OpBranch %2307 
                                     %2310 = OpLabel 
                        Private f32* %2311 = OpAccessChain %249 %88 
                                 f32 %2312 = OpLoad %2311 
                                               OpStore %2305 %2312 
                                               OpBranch %2307 
                                     %2307 = OpLabel 
                                 f32 %2313 = OpLoad %2305 
                        Private f32* %2314 = OpAccessChain %237 %88 
                                               OpStore %2314 %2313 
                        Private f32* %2315 = OpAccessChain %100 %358 
                                 f32 %2316 = OpLoad %2315 
                                 f32 %2317 = OpFNegate %2316 
                                 f32 %2318 = OpFMul %2317 %2296 
                        Private f32* %2319 = OpAccessChain %237 %642 
                                 f32 %2320 = OpLoad %2319 
                                 f32 %2321 = OpFAdd %2318 %2320 
                        Private f32* %2322 = OpAccessChain %249 %88 
                                               OpStore %2322 %2321 
                        Private i32* %2323 = OpAccessChain %584 %88 
                                 i32 %2324 = OpLoad %2323 
                                bool %2325 = OpINotEqual %2324 %32 
                                               OpSelectionMerge %2328 None 
                                               OpBranchConditional %2325 %2327 %2331 
                                     %2327 = OpLabel 
                        Private f32* %2329 = OpAccessChain %237 %642 
                                 f32 %2330 = OpLoad %2329 
                                               OpStore %2326 %2330 
                                               OpBranch %2328 
                                     %2331 = OpLabel 
                        Private f32* %2332 = OpAccessChain %249 %88 
                                 f32 %2333 = OpLoad %2332 
                                               OpStore %2326 %2333 
                                               OpBranch %2328 
                                     %2328 = OpLabel 
                                 f32 %2334 = OpLoad %2326 
                        Private f32* %2335 = OpAccessChain %237 %642 
                                               OpStore %2335 %2334 
                               i32_2 %2336 = OpLoad %584 
                               i32_2 %2337 = OpNot %2336 
                               i32_3 %2338 = OpLoad %646 
                               i32_3 %2339 = OpVectorShuffle %2338 %2337 3 1 4 
                                               OpStore %646 %2339 
                        Private i32* %2340 = OpAccessChain %646 %642 
                                 i32 %2341 = OpLoad %2340 
                                 u32 %2342 = OpBitcast %2341 
                        Private i32* %2343 = OpAccessChain %646 %88 
                                 i32 %2344 = OpLoad %2343 
                                 u32 %2345 = OpBitcast %2344 
                                 u32 %2346 = OpBitwiseOr %2342 %2345 
                                 i32 %2347 = OpBitcast %2346 
                        Private i32* %2348 = OpAccessChain %646 %88 
                                               OpStore %2348 %2347 
                        Private f32* %2349 = OpAccessChain %100 %88 
                                 f32 %2350 = OpLoad %2349 
                                 f32 %2351 = OpFMul %2350 %2296 
                        Private f32* %2352 = OpAccessChain %484 %88 
                                 f32 %2353 = OpLoad %2352 
                                 f32 %2354 = OpFAdd %2351 %2353 
                                               OpStore %623 %2354 
                        Private i32* %2355 = OpAccessChain %584 %358 
                                 i32 %2356 = OpLoad %2355 
                                bool %2357 = OpINotEqual %2356 %32 
                                               OpSelectionMerge %2360 None 
                                               OpBranchConditional %2357 %2359 %2363 
                                     %2359 = OpLabel 
                        Private f32* %2361 = OpAccessChain %484 %88 
                                 f32 %2362 = OpLoad %2361 
                                               OpStore %2358 %2362 
                                               OpBranch %2360 
                                     %2363 = OpLabel 
                                 f32 %2364 = OpLoad %623 
                                               OpStore %2358 %2364 
                                               OpBranch %2360 
                                     %2360 = OpLabel 
                                 f32 %2365 = OpLoad %2358 
                        Private f32* %2366 = OpAccessChain %484 %88 
                                               OpStore %2366 %2365 
                        Private f32* %2367 = OpAccessChain %100 %358 
                                 f32 %2368 = OpLoad %2367 
                                 f32 %2369 = OpFMul %2368 %2296 
                        Private f32* %2370 = OpAccessChain %484 %642 
                                 f32 %2371 = OpLoad %2370 
                                 f32 %2372 = OpFAdd %2369 %2371 
                                               OpStore %623 %2372 
                        Private i32* %2373 = OpAccessChain %584 %358 
                                 i32 %2374 = OpLoad %2373 
                                bool %2375 = OpINotEqual %2374 %32 
                                               OpSelectionMerge %2378 None 
                                               OpBranchConditional %2375 %2377 %2381 
                                     %2377 = OpLabel 
                        Private f32* %2379 = OpAccessChain %484 %642 
                                 f32 %2380 = OpLoad %2379 
                                               OpStore %2376 %2380 
                                               OpBranch %2378 
                                     %2381 = OpLabel 
                                 f32 %2382 = OpLoad %623 
                                               OpStore %2376 %2382 
                                               OpBranch %2378 
                                     %2378 = OpLabel 
                                 f32 %2383 = OpLoad %2376 
                        Private f32* %2384 = OpAccessChain %484 %642 
                                               OpStore %2384 %2383 
                        Private i32* %2385 = OpAccessChain %646 %88 
                                 i32 %2386 = OpLoad %2385 
                                bool %2387 = OpINotEqual %2386 %32 
                                               OpSelectionMerge %2389 None 
                                               OpBranchConditional %2387 %2388 %2389 
                                     %2388 = OpLabel 
                        Private i32* %2390 = OpAccessChain %584 %88 
                                 i32 %2391 = OpLoad %2390 
                                bool %2392 = OpIEqual %2391 %32 
                                               OpSelectionMerge %2394 None 
                                               OpBranchConditional %2392 %2393 %2394 
                                     %2393 = OpLabel 
                               f32_3 %2395 = OpLoad %237 
                               f32_2 %2396 = OpVectorShuffle %2395 %2395 0 2 
                               f32_3 %2397 = OpLoad %249 
                               f32_3 %2398 = OpVectorShuffle %2397 %2396 3 1 4 
                                               OpStore %249 %2398 
                               f32_3 %2399 = OpLoad %249 
                               f32_2 %2400 = OpVectorShuffle %2399 %2399 0 2 
                               f32_2 %2401 = OpCompositeConstruct %18 %18 
                               f32_2 %2402 = OpCompositeConstruct %19 %19 
                               f32_2 %2403 = OpExtInst %1 43 %2400 %2401 %2402 
                               f32_3 %2404 = OpLoad %249 
                               f32_3 %2405 = OpVectorShuffle %2404 %2403 3 1 4 
                                               OpStore %249 %2405 
                               f32_3 %2406 = OpLoad %249 
                               f32_2 %2407 = OpVectorShuffle %2406 %2406 0 2 
                        Uniform f32* %2408 = OpAccessChain %30 %32 
                                 f32 %2409 = OpLoad %2408 
                               f32_2 %2410 = OpCompositeConstruct %2409 %2409 
                               f32_2 %2411 = OpFMul %2407 %2410 
                               f32_3 %2412 = OpLoad %249 
                               f32_3 %2413 = OpVectorShuffle %2412 %2411 3 1 4 
                                               OpStore %249 %2413 
                 read_only Texture2D %2414 = OpLoad %44 
                             sampler %2415 = OpLoad %48 
          read_only Texture2DSampled %2416 = OpSampledImage %2414 %2415 
                               f32_3 %2417 = OpLoad %249 
                               f32_2 %2418 = OpVectorShuffle %2417 %2417 0 2 
                               f32_4 %2419 = OpImageSampleExplicitLod %2416 %2418 Lod %27 
                                 f32 %2420 = OpCompositeExtract %2419 3 
                        Private f32* %2421 = OpAccessChain %119 %88 
                                               OpStore %2421 %2420 
                                               OpBranch %2394 
                                     %2394 = OpLabel 
                        Private i32* %2422 = OpAccessChain %584 %358 
                                 i32 %2423 = OpLoad %2422 
                                bool %2424 = OpIEqual %2423 %32 
                                               OpSelectionMerge %2426 None 
                                               OpBranchConditional %2424 %2425 %2426 
                                     %2425 = OpLabel 
                               f32_3 %2427 = OpLoad %484 
                               f32_2 %2428 = OpVectorShuffle %2427 %2427 0 2 
                               f32_3 %2429 = OpLoad %249 
                               f32_3 %2430 = OpVectorShuffle %2429 %2428 3 1 4 
                                               OpStore %249 %2430 
                               f32_3 %2431 = OpLoad %249 
                               f32_2 %2432 = OpVectorShuffle %2431 %2431 0 2 
                               f32_2 %2433 = OpCompositeConstruct %18 %18 
                               f32_2 %2434 = OpCompositeConstruct %19 %19 
                               f32_2 %2435 = OpExtInst %1 43 %2432 %2433 %2434 
                               f32_3 %2436 = OpLoad %249 
                               f32_3 %2437 = OpVectorShuffle %2436 %2435 3 1 4 
                                               OpStore %249 %2437 
                               f32_3 %2438 = OpLoad %249 
                               f32_2 %2439 = OpVectorShuffle %2438 %2438 0 2 
                        Uniform f32* %2440 = OpAccessChain %30 %32 
                                 f32 %2441 = OpLoad %2440 
                               f32_2 %2442 = OpCompositeConstruct %2441 %2441 
                               f32_2 %2443 = OpFMul %2439 %2442 
                               f32_3 %2444 = OpLoad %249 
                               f32_3 %2445 = OpVectorShuffle %2444 %2443 3 1 4 
                                               OpStore %249 %2445 
                 read_only Texture2D %2446 = OpLoad %44 
                             sampler %2447 = OpLoad %48 
          read_only Texture2DSampled %2448 = OpSampledImage %2446 %2447 
                               f32_3 %2449 = OpLoad %249 
                               f32_2 %2450 = OpVectorShuffle %2449 %2449 0 2 
                               f32_4 %2451 = OpImageSampleExplicitLod %2448 %2450 Lod %27 
                                 f32 %2452 = OpCompositeExtract %2451 3 
                        Private f32* %2453 = OpAccessChain %119 %358 
                                               OpStore %2453 %2452 
                                               OpBranch %2426 
                                     %2426 = OpLabel 
                                 f32 %2454 = OpLoad %56 
                                 f32 %2455 = OpFNegate %2454 
                                 f32 %2456 = OpFMul %2455 %448 
                        Private f32* %2457 = OpAccessChain %119 %88 
                                 f32 %2458 = OpLoad %2457 
                                 f32 %2459 = OpFAdd %2456 %2458 
                        Private f32* %2460 = OpAccessChain %249 %88 
                                               OpStore %2460 %2459 
                        Private i32* %2461 = OpAccessChain %584 %88 
                                 i32 %2462 = OpLoad %2461 
                                bool %2463 = OpINotEqual %2462 %32 
                                               OpSelectionMerge %2466 None 
                                               OpBranchConditional %2463 %2465 %2469 
                                     %2465 = OpLabel 
                        Private f32* %2467 = OpAccessChain %119 %88 
                                 f32 %2468 = OpLoad %2467 
                                               OpStore %2464 %2468 
                                               OpBranch %2466 
                                     %2469 = OpLabel 
                        Private f32* %2470 = OpAccessChain %249 %88 
                                 f32 %2471 = OpLoad %2470 
                                               OpStore %2464 %2471 
                                               OpBranch %2466 
                                     %2466 = OpLabel 
                                 f32 %2472 = OpLoad %2464 
                        Private f32* %2473 = OpAccessChain %119 %88 
                                               OpStore %2473 %2472 
                                 f32 %2474 = OpLoad %56 
                                 f32 %2475 = OpFNegate %2474 
                                 f32 %2476 = OpFMul %2475 %448 
                        Private f32* %2477 = OpAccessChain %119 %358 
                                 f32 %2478 = OpLoad %2477 
                                 f32 %2479 = OpFAdd %2476 %2478 
                                               OpStore %56 %2479 
                        Private i32* %2480 = OpAccessChain %584 %358 
                                 i32 %2481 = OpLoad %2480 
                                bool %2482 = OpINotEqual %2481 %32 
                                               OpSelectionMerge %2485 None 
                                               OpBranchConditional %2482 %2484 %2488 
                                     %2484 = OpLabel 
                        Private f32* %2486 = OpAccessChain %119 %358 
                                 f32 %2487 = OpLoad %2486 
                                               OpStore %2483 %2487 
                                               OpBranch %2485 
                                     %2488 = OpLabel 
                                 f32 %2489 = OpLoad %56 
                                               OpStore %2483 %2489 
                                               OpBranch %2485 
                                     %2485 = OpLabel 
                                 f32 %2490 = OpLoad %2483 
                        Private f32* %2491 = OpAccessChain %119 %358 
                                               OpStore %2491 %2490 
                               f32_2 %2494 = OpLoad %119 
                               f32_4 %2495 = OpVectorShuffle %2494 %2494 0 1 0 1 
                               f32_4 %2496 = OpExtInst %1 4 %2495 
                               f32_3 %2497 = OpLoad %78 
                               f32_4 %2498 = OpVectorShuffle %2497 %2497 0 0 0 0 
                              bool_4 %2499 = OpFOrdGreaterThanEqual %2496 %2498 
                              bool_2 %2500 = OpVectorShuffle %2499 %2499 0 1 
                                               OpStore %2493 %2500 
                        Private f32* %2501 = OpAccessChain %100 %88 
                                 f32 %2502 = OpLoad %2501 
                                 f32 %2503 = OpFNegate %2502 
                                 f32 %2505 = OpFMul %2503 %2504 
                        Private f32* %2506 = OpAccessChain %237 %88 
                                 f32 %2507 = OpLoad %2506 
                                 f32 %2508 = OpFAdd %2505 %2507 
                                               OpStore %56 %2508 
                       Private bool* %2509 = OpAccessChain %2493 %88 
                                bool %2510 = OpLoad %2509 
                                               OpSelectionMerge %2513 None 
                                               OpBranchConditional %2510 %2512 %2516 
                                     %2512 = OpLabel 
                        Private f32* %2514 = OpAccessChain %237 %88 
                                 f32 %2515 = OpLoad %2514 
                                               OpStore %2511 %2515 
                                               OpBranch %2513 
                                     %2516 = OpLabel 
                                 f32 %2517 = OpLoad %56 
                                               OpStore %2511 %2517 
                                               OpBranch %2513 
                                     %2513 = OpLabel 
                                 f32 %2518 = OpLoad %2511 
                        Private f32* %2519 = OpAccessChain %237 %88 
                                               OpStore %2519 %2518 
                        Private f32* %2520 = OpAccessChain %100 %358 
                                 f32 %2521 = OpLoad %2520 
                                 f32 %2522 = OpFNegate %2521 
                                 f32 %2523 = OpFMul %2522 %2504 
                        Private f32* %2524 = OpAccessChain %237 %642 
                                 f32 %2525 = OpLoad %2524 
                                 f32 %2526 = OpFAdd %2523 %2525 
                                               OpStore %56 %2526 
                       Private bool* %2527 = OpAccessChain %2493 %88 
                                bool %2528 = OpLoad %2527 
                                               OpSelectionMerge %2531 None 
                                               OpBranchConditional %2528 %2530 %2534 
                                     %2530 = OpLabel 
                        Private f32* %2532 = OpAccessChain %237 %642 
                                 f32 %2533 = OpLoad %2532 
                                               OpStore %2529 %2533 
                                               OpBranch %2531 
                                     %2534 = OpLabel 
                                 f32 %2535 = OpLoad %56 
                                               OpStore %2529 %2535 
                                               OpBranch %2531 
                                     %2531 = OpLabel 
                                 f32 %2536 = OpLoad %2529 
                        Private f32* %2537 = OpAccessChain %237 %642 
                                               OpStore %2537 %2536 
                        Private f32* %2538 = OpAccessChain %100 %88 
                                 f32 %2539 = OpLoad %2538 
                                 f32 %2540 = OpFMul %2539 %2504 
                        Private f32* %2541 = OpAccessChain %484 %88 
                                 f32 %2542 = OpLoad %2541 
                                 f32 %2543 = OpFAdd %2540 %2542 
                                               OpStore %56 %2543 
                       Private bool* %2544 = OpAccessChain %2493 %358 
                                bool %2545 = OpLoad %2544 
                                               OpSelectionMerge %2548 None 
                                               OpBranchConditional %2545 %2547 %2551 
                                     %2547 = OpLabel 
                        Private f32* %2549 = OpAccessChain %484 %88 
                                 f32 %2550 = OpLoad %2549 
                                               OpStore %2546 %2550 
                                               OpBranch %2548 
                                     %2551 = OpLabel 
                                 f32 %2552 = OpLoad %56 
                                               OpStore %2546 %2552 
                                               OpBranch %2548 
                                     %2548 = OpLabel 
                                 f32 %2553 = OpLoad %2546 
                        Private f32* %2554 = OpAccessChain %484 %88 
                                               OpStore %2554 %2553 
                        Private f32* %2555 = OpAccessChain %100 %358 
                                 f32 %2556 = OpLoad %2555 
                                 f32 %2557 = OpFMul %2556 %2504 
                        Private f32* %2558 = OpAccessChain %484 %642 
                                 f32 %2559 = OpLoad %2558 
                                 f32 %2560 = OpFAdd %2557 %2559 
                                               OpStore %56 %2560 
                       Private bool* %2561 = OpAccessChain %2493 %358 
                                bool %2562 = OpLoad %2561 
                                               OpSelectionMerge %2565 None 
                                               OpBranchConditional %2562 %2564 %2568 
                                     %2564 = OpLabel 
                        Private f32* %2566 = OpAccessChain %484 %642 
                                 f32 %2567 = OpLoad %2566 
                                               OpStore %2563 %2567 
                                               OpBranch %2565 
                                     %2568 = OpLabel 
                                 f32 %2569 = OpLoad %56 
                                               OpStore %2563 %2569 
                                               OpBranch %2565 
                                     %2565 = OpLabel 
                                 f32 %2570 = OpLoad %2563 
                        Private f32* %2571 = OpAccessChain %484 %642 
                                               OpStore %2571 %2570 
                                               OpBranch %2389 
                                     %2389 = OpLabel 
                                               OpBranch %2177 
                                     %2177 = OpLabel 
                                               OpBranch %1966 
                                     %1966 = OpLabel 
                                               OpBranch %1755 
                                     %1755 = OpLabel 
                                               OpBranch %1544 
                                     %1544 = OpLabel 
                                               OpBranch %1333 
                                     %1333 = OpLabel 
                                               OpBranch %1122 
                                     %1122 = OpLabel 
                                               OpBranch %911 
                                      %911 = OpLabel 
                                               OpBranch %700 
                                      %700 = OpLabel 
                        Private f32* %2572 = OpAccessChain %237 %88 
                                 f32 %2573 = OpLoad %2572 
                                 f32 %2574 = OpFNegate %2573 
                          Input f32* %2575 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %2576 = OpLoad %2575 
                                 f32 %2577 = OpFAdd %2574 %2576 
                                               OpStore %56 %2577 
                        Private f32* %2578 = OpAccessChain %237 %642 
                                 f32 %2579 = OpLoad %2578 
                                 f32 %2580 = OpFNegate %2579 
                          Input f32* %2581 = OpAccessChain vs_TEXCOORD0 %358 
                                 f32 %2582 = OpLoad %2581 
                                 f32 %2583 = OpFAdd %2580 %2582 
                        Private f32* %2584 = OpAccessChain %100 %88 
                                               OpStore %2584 %2583 
                       Private bool* %2585 = OpAccessChain %323 %88 
                                bool %2586 = OpLoad %2585 
                                               OpSelectionMerge %2589 None 
                                               OpBranchConditional %2586 %2588 %2591 
                                     %2588 = OpLabel 
                                 f32 %2590 = OpLoad %56 
                                               OpStore %2587 %2590 
                                               OpBranch %2589 
                                     %2591 = OpLabel 
                        Private f32* %2592 = OpAccessChain %100 %88 
                                 f32 %2593 = OpLoad %2592 
                                               OpStore %2587 %2593 
                                               OpBranch %2589 
                                     %2589 = OpLabel 
                                 f32 %2594 = OpLoad %2587 
                                               OpStore %56 %2594 
                               f32_3 %2595 = OpLoad %484 
                               f32_2 %2596 = OpVectorShuffle %2595 %2595 0 2 
                               f32_2 %2597 = OpLoad vs_TEXCOORD0 
                               f32_2 %2598 = OpFNegate %2597 
                               f32_2 %2599 = OpFAdd %2596 %2598 
                               f32_3 %2600 = OpLoad %78 
                               f32_3 %2601 = OpVectorShuffle %2600 %2599 3 1 4 
                                               OpStore %78 %2601 
                       Private bool* %2602 = OpAccessChain %323 %88 
                                bool %2603 = OpLoad %2602 
                                               OpSelectionMerge %2606 None 
                                               OpBranchConditional %2603 %2605 %2609 
                                     %2605 = OpLabel 
                        Private f32* %2607 = OpAccessChain %78 %88 
                                 f32 %2608 = OpLoad %2607 
                                               OpStore %2604 %2608 
                                               OpBranch %2606 
                                     %2609 = OpLabel 
                        Private f32* %2610 = OpAccessChain %78 %642 
                                 f32 %2611 = OpLoad %2610 
                                               OpStore %2604 %2611 
                                               OpBranch %2606 
                                     %2606 = OpLabel 
                                 f32 %2612 = OpLoad %2604 
                        Private f32* %2613 = OpAccessChain %78 %88 
                                               OpStore %2613 %2612 
                               f32_2 %2615 = OpLoad %119 
                               f32_4 %2616 = OpVectorShuffle %2615 %2615 0 1 0 1 
                              bool_4 %2618 = OpFOrdLessThan %2616 %2617 
                              bool_2 %2619 = OpVectorShuffle %2618 %2618 0 1 
                               u32_2 %2620 = OpSelect %2619 %596 %595 
                               u32_2 %2621 = OpCompositeConstruct %567 %567 
                               u32_2 %2622 = OpIMul %2620 %2621 
                               i32_2 %2623 = OpBitcast %2622 
                                               OpStore %2614 %2623 
                                 f32 %2624 = OpLoad %56 
                        Private f32* %2625 = OpAccessChain %78 %88 
                                 f32 %2626 = OpLoad %2625 
                                 f32 %2627 = OpFAdd %2624 %2626 
                        Private f32* %2628 = OpAccessChain %119 %88 
                                               OpStore %2628 %2627 
                                 i32 %2630 = OpLoad %564 
                               i32_4 %2632 = OpCompositeConstruct %2630 %2630 %2630 %2630 
                               i32_2 %2633 = OpLoad %2614 
                               i32_4 %2634 = OpVectorShuffle %2633 %2633 0 1 0 0 
                              bool_4 %2635 = OpINotEqual %2632 %2634 
                              bool_2 %2636 = OpVectorShuffle %2635 %2635 0 1 
                                               OpStore %2629 %2636 
                        Private f32* %2637 = OpAccessChain %119 %88 
                                 f32 %2638 = OpLoad %2637 
                                 f32 %2639 = OpFDiv %19 %2638 
                                               OpStore %106 %2639 
                                 f32 %2640 = OpLoad %56 
                        Private f32* %2641 = OpAccessChain %78 %88 
                                 f32 %2642 = OpLoad %2641 
                                bool %2643 = OpFOrdLessThan %2640 %2642 
                                               OpStore %395 %2643 
                                 f32 %2644 = OpLoad %56 
                        Private f32* %2645 = OpAccessChain %78 %88 
                                 f32 %2646 = OpLoad %2645 
                                 f32 %2647 = OpExtInst %1 37 %2644 %2646 
                                               OpStore %56 %2647 
                                bool %2649 = OpLoad %395 
                                               OpSelectionMerge %2653 None 
                                               OpBranchConditional %2649 %2652 %2656 
                                     %2652 = OpLabel 
                       Private bool* %2654 = OpAccessChain %2629 %88 
                                bool %2655 = OpLoad %2654 
                                               OpStore %2651 %2655 
                                               OpBranch %2653 
                                     %2656 = OpLabel 
                       Private bool* %2657 = OpAccessChain %2629 %358 
                                bool %2658 = OpLoad %2657 
                                               OpStore %2651 %2658 
                                               OpBranch %2653 
                                     %2653 = OpLabel 
                                bool %2659 = OpLoad %2651 
                                               OpStore %2648 %2659 
                        Private f32* %2660 = OpAccessChain %201 %88 
                                 f32 %2661 = OpLoad %2660 
                        Private f32* %2662 = OpAccessChain %201 %88 
                                 f32 %2663 = OpLoad %2662 
                                 f32 %2664 = OpFMul %2661 %2663 
                        Private f32* %2665 = OpAccessChain %201 %88 
                                               OpStore %2665 %2664 
                                 f32 %2666 = OpLoad %56 
                                 f32 %2667 = OpLoad %106 
                                 f32 %2668 = OpFNegate %2667 
                                 f32 %2669 = OpFMul %2666 %2668 
                                 f32 %2670 = OpFAdd %2669 %448 
                                               OpStore %56 %2670 
                                bool %2671 = OpLoad %2648 
                                 f32 %2672 = OpLoad %56 
                                 f32 %2673 = OpSelect %2671 %2672 %18 
                                               OpStore %56 %2673 
                        Private f32* %2674 = OpAccessChain %201 %88 
                                 f32 %2675 = OpLoad %2674 
                                 f32 %2676 = OpLoad %56 
                                 f32 %2677 = OpExtInst %1 40 %2675 %2676 
                        Private f32* %2678 = OpAccessChain %201 %88 
                                               OpStore %2678 %2677 
                               f32_3 %2679 = OpLoad %201 
                               f32_2 %2680 = OpVectorShuffle %2679 %2679 0 0 
                                 f32 %2681 = OpLoad %69 
                               f32_2 %2682 = OpCompositeConstruct %2681 %2681 
                               f32_2 %2683 = OpFMul %2680 %2682 
                               f32_2 %2684 = OpLoad vs_TEXCOORD0 
                               f32_2 %2685 = OpFAdd %2683 %2684 
                               f32_3 %2686 = OpLoad %201 
                               f32_3 %2687 = OpVectorShuffle %2686 %2685 3 4 2 
                                               OpStore %201 %2687 
                       Private bool* %2688 = OpAccessChain %323 %88 
                                bool %2689 = OpLoad %2688 
                                               OpSelectionMerge %2692 None 
                                               OpBranchConditional %2689 %2691 %2695 
                                     %2691 = OpLabel 
                          Input f32* %2693 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %2694 = OpLoad %2693 
                                               OpStore %2690 %2694 
                                               OpBranch %2692 
                                     %2695 = OpLabel 
                        Private f32* %2696 = OpAccessChain %201 %88 
                                 f32 %2697 = OpLoad %2696 
                                               OpStore %2690 %2697 
                                               OpBranch %2692 
                                     %2692 = OpLabel 
                                 f32 %2698 = OpLoad %2690 
                        Private f32* %2699 = OpAccessChain %78 %88 
                                               OpStore %2699 %2698 
                        Private f32* %2700 = OpAccessChain %78 %88 
                                 f32 %2701 = OpLoad %2700 
                                 f32 %2702 = OpExtInst %1 43 %2701 %18 %19 
                        Private f32* %2703 = OpAccessChain %78 %88 
                                               OpStore %2703 %2702 
                       Private bool* %2704 = OpAccessChain %323 %88 
                                bool %2705 = OpLoad %2704 
                                               OpSelectionMerge %2708 None 
                                               OpBranchConditional %2705 %2707 %2711 
                                     %2707 = OpLabel 
                        Private f32* %2709 = OpAccessChain %201 %358 
                                 f32 %2710 = OpLoad %2709 
                                               OpStore %2706 %2710 
                                               OpBranch %2708 
                                     %2711 = OpLabel 
                          Input f32* %2712 = OpAccessChain vs_TEXCOORD0 %358 
                                 f32 %2713 = OpLoad %2712 
                                               OpStore %2706 %2713 
                                               OpBranch %2708 
                                     %2708 = OpLabel 
                                 f32 %2714 = OpLoad %2706 
                        Private f32* %2715 = OpAccessChain %78 %358 
                                               OpStore %2715 %2714 
                        Private f32* %2716 = OpAccessChain %78 %358 
                                 f32 %2717 = OpLoad %2716 
                                 f32 %2718 = OpExtInst %1 43 %2717 %18 %19 
                        Private f32* %2719 = OpAccessChain %78 %358 
                                               OpStore %2719 %2718 
                               f32_3 %2720 = OpLoad %78 
                               f32_2 %2721 = OpVectorShuffle %2720 %2720 0 1 
                        Uniform f32* %2722 = OpAccessChain %30 %32 
                                 f32 %2723 = OpLoad %2722 
                               f32_2 %2724 = OpCompositeConstruct %2723 %2723 
                               f32_2 %2725 = OpFMul %2721 %2724 
                               f32_3 %2726 = OpLoad %9 
                               f32_3 %2727 = OpVectorShuffle %2726 %2725 3 4 2 
                                               OpStore %9 %2727 
                 read_only Texture2D %2728 = OpLoad %44 
                             sampler %2729 = OpLoad %48 
          read_only Texture2DSampled %2730 = OpSampledImage %2728 %2729 
                               f32_3 %2731 = OpLoad %9 
                               f32_2 %2732 = OpVectorShuffle %2731 %2731 0 1 
                               f32_4 %2733 = OpImageSampleExplicitLod %2730 %2732 Lod %27 
                               f32_3 %2734 = OpVectorShuffle %2733 %2733 0 1 2 
                               f32_4 %2735 = OpLoad %41 
                               f32_4 %2736 = OpVectorShuffle %2735 %2734 4 5 6 3 
                                               OpStore %41 %2736 
                                               OpBranch %165 
                                      %165 = OpLabel 
                               f32_2 %2737 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %2739 = OpAccessChain %30 %63 
                               f32_4 %2740 = OpLoad %2739 
                               f32_2 %2741 = OpVectorShuffle %2740 %2740 0 1 
                               f32_2 %2742 = OpFMul %2737 %2741 
                      Uniform f32_4* %2743 = OpAccessChain %30 %63 
                               f32_4 %2744 = OpLoad %2743 
                               f32_2 %2745 = OpVectorShuffle %2744 %2744 2 3 
                               f32_2 %2746 = OpFAdd %2742 %2745 
                               f32_3 %2747 = OpLoad %9 
                               f32_3 %2748 = OpVectorShuffle %2747 %2746 3 4 2 
                                               OpStore %9 %2748 
                 read_only Texture2D %2750 = OpLoad %2749 
                             sampler %2752 = OpLoad %2751 
          read_only Texture2DSampled %2753 = OpSampledImage %2750 %2752 
                               f32_3 %2754 = OpLoad %9 
                               f32_2 %2755 = OpVectorShuffle %2754 %2754 0 1 
                               f32_4 %2756 = OpImageSampleImplicitLod %2753 %2755 
                                 f32 %2757 = OpCompositeExtract %2756 3 
                        Private f32* %2758 = OpAccessChain %9 %88 
                                               OpStore %2758 %2757 
                        Private f32* %2759 = OpAccessChain %9 %88 
                                 f32 %2760 = OpLoad %2759 
                                 f32 %2761 = OpFMul %2760 %276 
                                 f32 %2763 = OpFAdd %2761 %2762 
                        Private f32* %2764 = OpAccessChain %9 %88 
                                               OpStore %2764 %2763 
                        Private f32* %2765 = OpAccessChain %9 %88 
                                 f32 %2766 = OpLoad %2765 
                                 f32 %2768 = OpFMul %2766 %2767 
                                 f32 %2769 = OpFAdd %2768 %448 
                        Private f32* %2770 = OpAccessChain %201 %88 
                                               OpStore %2770 %2769 
                        Private f32* %2771 = OpAccessChain %201 %88 
                                 f32 %2772 = OpLoad %2771 
                                 f32 %2773 = OpExtInst %1 43 %2772 %18 %19 
                        Private f32* %2774 = OpAccessChain %201 %88 
                                               OpStore %2774 %2773 
                        Private f32* %2775 = OpAccessChain %201 %88 
                                 f32 %2776 = OpLoad %2775 
                                 f32 %2777 = OpFMul %2776 %276 
                                 f32 %2778 = OpFAdd %2777 %2762 
                        Private f32* %2779 = OpAccessChain %201 %88 
                                               OpStore %2779 %2778 
                        Private f32* %2780 = OpAccessChain %9 %88 
                                 f32 %2781 = OpLoad %2780 
                                 f32 %2782 = OpExtInst %1 4 %2781 
                                 f32 %2783 = OpFNegate %2782 
                                 f32 %2784 = OpFAdd %2783 %19 
                        Private f32* %2785 = OpAccessChain %9 %88 
                                               OpStore %2785 %2784 
                        Private f32* %2786 = OpAccessChain %9 %88 
                                 f32 %2787 = OpLoad %2786 
                                 f32 %2788 = OpExtInst %1 31 %2787 
                        Private f32* %2789 = OpAccessChain %9 %88 
                                               OpStore %2789 %2788 
                        Private f32* %2790 = OpAccessChain %9 %88 
                                 f32 %2791 = OpLoad %2790 
                                 f32 %2792 = OpFNegate %2791 
                                 f32 %2793 = OpFAdd %2792 %19 
                        Private f32* %2794 = OpAccessChain %9 %88 
                                               OpStore %2794 %2793 
                        Private f32* %2795 = OpAccessChain %9 %88 
                                 f32 %2796 = OpLoad %2795 
                        Private f32* %2797 = OpAccessChain %201 %88 
                                 f32 %2798 = OpLoad %2797 
                                 f32 %2799 = OpFMul %2796 %2798 
                        Private f32* %2800 = OpAccessChain %9 %88 
                                               OpStore %2800 %2799 
                               f32_4 %2801 = OpLoad %41 
                               f32_3 %2802 = OpVectorShuffle %2801 %2801 0 1 2 
                               f32_3 %2805 = OpFMul %2802 %2804 
                                               OpStore %201 %2805 
                               f32_4 %2806 = OpLoad %41 
                               f32_3 %2807 = OpVectorShuffle %2806 %2806 0 1 2 
                               f32_3 %2808 = OpExtInst %1 4 %2807 
                               f32_3 %2811 = OpExtInst %1 40 %2808 %2810 
                                               OpStore %78 %2811 
                               f32_3 %2812 = OpLoad %78 
                               f32_3 %2813 = OpExtInst %1 30 %2812 
                                               OpStore %78 %2813 
                               f32_3 %2814 = OpLoad %78 
                               f32_3 %2817 = OpFMul %2814 %2816 
                                               OpStore %78 %2817 
                               f32_3 %2818 = OpLoad %78 
                               f32_3 %2819 = OpExtInst %1 29 %2818 
                                               OpStore %78 %2819 
                               f32_3 %2820 = OpLoad %78 
                               f32_3 %2823 = OpFMul %2820 %2822 
                               f32_3 %2826 = OpFAdd %2823 %2825 
                                               OpStore %78 %2826 
                               f32_4 %2830 = OpLoad %41 
                               f32_4 %2831 = OpVectorShuffle %2830 %2830 0 1 2 0 
                              bool_4 %2832 = OpFOrdGreaterThanEqual %2829 %2831 
                              bool_3 %2833 = OpVectorShuffle %2832 %2832 0 1 2 
                                               OpStore %2827 %2833 
                               f32_3 %2836 = OpLoad %201 
                                               OpStore %2835 %2836 
                       Private bool* %2837 = OpAccessChain %2827 %88 
                                bool %2838 = OpLoad %2837 
                                               OpSelectionMerge %2841 None 
                                               OpBranchConditional %2838 %2840 %2844 
                                     %2840 = OpLabel 
                        Private f32* %2842 = OpAccessChain %201 %88 
                                 f32 %2843 = OpLoad %2842 
                                               OpStore %2839 %2843 
                                               OpBranch %2841 
                                     %2844 = OpLabel 
                        Private f32* %2845 = OpAccessChain %78 %88 
                                 f32 %2846 = OpLoad %2845 
                                               OpStore %2839 %2846 
                                               OpBranch %2841 
                                     %2841 = OpLabel 
                                 f32 %2847 = OpLoad %2839 
                       Function f32* %2848 = OpAccessChain %2835 %88 
                                               OpStore %2848 %2847 
                       Private bool* %2849 = OpAccessChain %2827 %358 
                                bool %2850 = OpLoad %2849 
                                               OpSelectionMerge %2853 None 
                                               OpBranchConditional %2850 %2852 %2856 
                                     %2852 = OpLabel 
                        Private f32* %2854 = OpAccessChain %201 %358 
                                 f32 %2855 = OpLoad %2854 
                                               OpStore %2851 %2855 
                                               OpBranch %2853 
                                     %2856 = OpLabel 
                        Private f32* %2857 = OpAccessChain %78 %358 
                                 f32 %2858 = OpLoad %2857 
                                               OpStore %2851 %2858 
                                               OpBranch %2853 
                                     %2853 = OpLabel 
                                 f32 %2859 = OpLoad %2851 
                       Function f32* %2860 = OpAccessChain %2835 %358 
                                               OpStore %2860 %2859 
                       Private bool* %2861 = OpAccessChain %2827 %642 
                                bool %2862 = OpLoad %2861 
                                               OpSelectionMerge %2865 None 
                                               OpBranchConditional %2862 %2864 %2868 
                                     %2864 = OpLabel 
                        Private f32* %2866 = OpAccessChain %201 %642 
                                 f32 %2867 = OpLoad %2866 
                                               OpStore %2863 %2867 
                                               OpBranch %2865 
                                     %2868 = OpLabel 
                        Private f32* %2869 = OpAccessChain %78 %642 
                                 f32 %2870 = OpLoad %2869 
                                               OpStore %2863 %2870 
                                               OpBranch %2865 
                                     %2865 = OpLabel 
                                 f32 %2871 = OpLoad %2863 
                       Function f32* %2872 = OpAccessChain %2835 %642 
                                               OpStore %2872 %2871 
                               f32_3 %2873 = OpLoad %2835 
                                               OpStore %201 %2873 
                               f32_3 %2874 = OpLoad %9 
                               f32_3 %2875 = OpVectorShuffle %2874 %2874 0 0 0 
                               f32_3 %2878 = OpFMul %2875 %2877 
                               f32_3 %2879 = OpLoad %201 
                               f32_3 %2880 = OpFAdd %2878 %2879 
                                               OpStore %9 %2880 
                               f32_3 %2881 = OpLoad %9 
                               f32_3 %2884 = OpFMul %2881 %2883 
                               f32_4 %2885 = OpLoad %41 
                               f32_4 %2886 = OpVectorShuffle %2885 %2884 4 5 6 3 
                                               OpStore %41 %2886 
                               f32_3 %2887 = OpLoad %9 
                               f32_3 %2890 = OpFAdd %2887 %2889 
                                               OpStore %78 %2890 
                               f32_3 %2891 = OpLoad %78 
                               f32_3 %2894 = OpFMul %2891 %2893 
                                               OpStore %78 %2894 
                               f32_3 %2895 = OpLoad %78 
                               f32_3 %2896 = OpExtInst %1 4 %2895 
                               f32_3 %2897 = OpExtInst %1 40 %2896 %2810 
                                               OpStore %78 %2897 
                               f32_3 %2898 = OpLoad %78 
                               f32_3 %2899 = OpExtInst %1 30 %2898 
                                               OpStore %78 %2899 
                               f32_3 %2900 = OpLoad %78 
                               f32_3 %2903 = OpFMul %2900 %2902 
                                               OpStore %78 %2903 
                               f32_3 %2904 = OpLoad %78 
                               f32_3 %2905 = OpExtInst %1 29 %2904 
                                               OpStore %78 %2905 
                               f32_3 %2908 = OpLoad %9 
                               f32_4 %2909 = OpVectorShuffle %2908 %2908 0 1 2 0 
                              bool_4 %2910 = OpFOrdGreaterThanEqual %2907 %2909 
                              bool_3 %2911 = OpVectorShuffle %2910 %2910 0 1 2 
                                               OpStore %323 %2911 
                       Private bool* %2914 = OpAccessChain %323 %88 
                                bool %2915 = OpLoad %2914 
                                               OpSelectionMerge %2918 None 
                                               OpBranchConditional %2915 %2917 %2921 
                                     %2917 = OpLabel 
                        Private f32* %2919 = OpAccessChain %41 %88 
                                 f32 %2920 = OpLoad %2919 
                                               OpStore %2916 %2920 
                                               OpBranch %2918 
                                     %2921 = OpLabel 
                        Private f32* %2922 = OpAccessChain %78 %88 
                                 f32 %2923 = OpLoad %2922 
                                               OpStore %2916 %2923 
                                               OpBranch %2918 
                                     %2918 = OpLabel 
                                 f32 %2924 = OpLoad %2916 
                         Output f32* %2926 = OpAccessChain %2913 %88 
                                               OpStore %2926 %2924 
                       Private bool* %2927 = OpAccessChain %323 %358 
                                bool %2928 = OpLoad %2927 
                                               OpSelectionMerge %2931 None 
                                               OpBranchConditional %2928 %2930 %2934 
                                     %2930 = OpLabel 
                        Private f32* %2932 = OpAccessChain %41 %358 
                                 f32 %2933 = OpLoad %2932 
                                               OpStore %2929 %2933 
                                               OpBranch %2931 
                                     %2934 = OpLabel 
                        Private f32* %2935 = OpAccessChain %78 %358 
                                 f32 %2936 = OpLoad %2935 
                                               OpStore %2929 %2936 
                                               OpBranch %2931 
                                     %2931 = OpLabel 
                                 f32 %2937 = OpLoad %2929 
                         Output f32* %2938 = OpAccessChain %2913 %358 
                                               OpStore %2938 %2937 
                       Private bool* %2939 = OpAccessChain %323 %642 
                                bool %2940 = OpLoad %2939 
                                               OpSelectionMerge %2943 None 
                                               OpBranchConditional %2940 %2942 %2946 
                                     %2942 = OpLabel 
                        Private f32* %2944 = OpAccessChain %41 %642 
                                 f32 %2945 = OpLoad %2944 
                                               OpStore %2941 %2945 
                                               OpBranch %2943 
                                     %2946 = OpLabel 
                        Private f32* %2947 = OpAccessChain %78 %642 
                                 f32 %2948 = OpLoad %2947 
                                               OpStore %2941 %2948 
                                               OpBranch %2943 
                                     %2943 = OpLabel 
                                 f32 %2949 = OpLoad %2941 
                         Output f32* %2950 = OpAccessChain %2913 %642 
                                               OpStore %2950 %2949 
                        Private f32* %2951 = OpAccessChain %41 %67 
                                 f32 %2952 = OpLoad %2951 
                         Output f32* %2953 = OpAccessChain %2913 %67 
                                               OpStore %2953 %2952 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %57 %64 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %39 0 Offset 39 
                                             OpMemberDecorate %39 1 Offset 39 
                                             OpDecorate %39 Block 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate vs_TEXCOORD1 Location 57 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypePointer Output %7 
                                 f32 %26 = OpConstant 3.674022E-40 
                                 f32 %27 = OpConstant 3.674022E-40 
                               f32_2 %28 = OpConstantComposite %26 %27 
                                     %32 = OpTypePointer Private %19 
                      Private f32_2* %33 = OpVariable Private 
                               f32_2 %36 = OpConstantComposite %27 %27 
                                     %39 = OpTypeStruct %6 %7 
                                     %40 = OpTypePointer Uniform %39 
       Uniform struct {f32; f32_4;}* %41 = OpVariable Uniform 
                                 i32 %42 = OpConstant 1 
                                     %43 = OpTypePointer Uniform %7 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_2 %50 = OpConstantComposite %49 %49 
                                     %56 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %59 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                       Output f32_4* %23 = OpAccessChain %13 %15 
                               f32_4 %24 = OpLoad %23 
                               f32_4 %25 = OpVectorShuffle %24 %21 4 5 2 3 
                                             OpStore %23 %25 
                       Output f32_4* %29 = OpAccessChain %13 %15 
                               f32_4 %30 = OpLoad %29 
                               f32_4 %31 = OpVectorShuffle %30 %28 0 1 4 5 
                                             OpStore %29 %31 
                               f32_3 %34 = OpLoad %18 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %37 = OpFAdd %35 %36 
                                             OpStore %33 %37 
                               f32_2 %38 = OpLoad %33 
                      Uniform f32_4* %44 = OpAccessChain %41 %42 
                               f32_4 %45 = OpLoad %44 
                               f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                               f32_2 %47 = OpFMul %38 %46 
                                             OpStore %33 %47 
                               f32_2 %48 = OpLoad %33 
                               f32_2 %51 = OpFMul %48 %50 
                      Uniform f32_4* %52 = OpAccessChain %41 %42 
                               f32_4 %53 = OpLoad %52 
                               f32_2 %54 = OpVectorShuffle %53 %53 2 3 
                               f32_2 %55 = OpFAdd %51 %54 
                                             OpStore %33 %55 
                               f32_2 %58 = OpLoad %33 
                        Uniform f32* %60 = OpAccessChain %41 %15 
                                 f32 %61 = OpLoad %60 
                               f32_2 %62 = OpCompositeConstruct %61 %61 
                               f32_2 %63 = OpFMul %58 %62 
                                             OpStore vs_TEXCOORD1 %63 
                               f32_2 %65 = OpLoad %33 
                                             OpStore vs_TEXCOORD0 %65 
                         Output f32* %67 = OpAccessChain %13 %15 %9 
                                 f32 %68 = OpLoad %67 
                                 f32 %69 = OpFNegate %68 
                         Output f32* %70 = OpAccessChain %13 %15 %9 
                                             OpStore %70 %69 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 2678
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %11 %2465 %2636 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpDecorate vs_TEXCOORD0 Location 11 
                                               OpMemberDecorate %21 0 Offset 21 
                                               OpMemberDecorate %21 1 Offset 21 
                                               OpMemberDecorate %21 2 Offset 21 
                                               OpDecorate %21 Block 
                                               OpDecorate %23 DescriptorSet 23 
                                               OpDecorate %23 Binding 23 
                                               OpDecorate %36 DescriptorSet 36 
                                               OpDecorate %36 Binding 36 
                                               OpDecorate %40 DescriptorSet 40 
                                               OpDecorate %40 Binding 40 
                                               OpDecorate vs_TEXCOORD1 Location 2465 
                                               OpDecorate %2483 DescriptorSet 2483 
                                               OpDecorate %2483 Binding 2483 
                                               OpDecorate %2485 DescriptorSet 2485 
                                               OpDecorate %2485 Binding 2485 
                                               OpDecorate %2636 Location 2636 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 2 
                                        %8 = OpTypePointer Private %7 
                         Private f32_2* %9 = OpVariable Private 
                                       %10 = OpTypePointer Input %7 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %14 = OpConstant 3.674022E-40 
                                   f32 %15 = OpConstant 3.674022E-40 
                                       %20 = OpTypeVector %6 4 
                                       %21 = OpTypeStruct %6 %20 %20 
                                       %22 = OpTypePointer Uniform %21 
  Uniform struct {f32; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                       %24 = OpTypeInt 32 1 
                                   i32 %25 = OpConstant 0 
                                       %26 = OpTypePointer Uniform %6 
                                       %31 = OpTypeVector %6 3 
                                       %32 = OpTypePointer Private %31 
                        Private f32_3* %33 = OpVariable Private 
                                       %34 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %35 = OpTypePointer UniformConstant %34 
  UniformConstant read_only Texture2D* %36 = OpVariable UniformConstant 
                                       %38 = OpTypeSampler 
                                       %39 = OpTypePointer UniformConstant %38 
              UniformConstant sampler* %40 = OpVariable UniformConstant 
                                       %42 = OpTypeSampledImage %34 
                                       %47 = OpTypePointer Private %6 
                          Private f32* %48 = OpVariable Private 
                                       %53 = OpTypeVector %24 2 
                                   i32 %54 = OpConstant 1 
                                 i32_2 %55 = OpConstantComposite %25 %54 
                                       %57 = OpTypeInt 32 0 
                                   u32 %58 = OpConstant 1 
                          Private f32* %60 = OpVariable Private 
                                 i32_2 %65 = OpConstantComposite %54 %25 
                          Private f32* %68 = OpVariable Private 
                                   i32 %73 = OpConstant -1 
                                 i32_2 %74 = OpConstantComposite %25 %73 
                        Private f32_3* %77 = OpVariable Private 
                                 i32_2 %82 = OpConstantComposite %73 %25 
                                   u32 %85 = OpConstant 0 
                        Private f32_2* %87 = OpVariable Private 
                          Private f32* %93 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_3* %111 = OpVariable Private 
                                  f32 %128 = OpConstant 3.674022E-40 
                                  f32 %137 = OpConstant 3.674022E-40 
                                      %139 = OpTypeBool 
                                      %140 = OpTypePointer Private %139 
                        Private bool* %141 = OpVariable Private 
                                i32_2 %153 = OpConstantComposite %73 %73 
                                i32_2 %160 = OpConstantComposite %54 %54 
                                i32_2 %167 = OpConstantComposite %54 %73 
                                i32_2 %175 = OpConstantComposite %73 %54 
                       Private f32_3* %179 = OpVariable Private 
                       Private f32_2* %184 = OpVariable Private 
                       Private f32_2* %194 = OpVariable Private 
                                  f32 %203 = OpConstant 3.674022E-40 
                         Private f32* %216 = OpVariable Private 
                       Private f32_3* %226 = OpVariable Private 
                                  f32 %250 = OpConstant 3.674022E-40 
                        Private bool* %293 = OpVariable Private 
                                      %306 = OpTypePointer Function %6 
                                  i32 %323 = OpConstant 2 
                                  f32 %332 = OpConstant 3.674022E-40 
                        Private bool* %358 = OpVariable Private 
                                  f32 %412 = OpConstant 3.674022E-40 
                                f32_2 %413 = OpConstantComposite %412 %412 
                                      %423 = OpTypePointer Input %6 
                       Private f32_2* %449 = OpVariable Private 
                                  f32 %457 = OpConstant 3.674022E-40 
                                  f32 %507 = OpConstant 3.674022E-40 
                                      %522 = OpTypePointer Private %24 
                         Private i32* %523 = OpVariable Private 
                                  u32 %527 = OpConstant 4294967295 
                                      %544 = OpTypePointer Private %53 
                       Private i32_2* %545 = OpVariable Private 
                                      %551 = OpTypeVector %139 4 
                                      %553 = OpTypeVector %139 2 
                                      %555 = OpTypeVector %57 2 
                                u32_2 %556 = OpConstantComposite %85 %85 
                                u32_2 %557 = OpConstantComposite %58 %58 
                                  f32 %565 = OpConstant 3.674022E-40 
                                  u32 %600 = OpConstant 2 
                                      %602 = OpTypeVector %24 3 
                                      %603 = OpTypePointer Private %602 
                       Private i32_3* %604 = OpVariable Private 
                         Private i32* %609 = OpVariable Private 
                       Private f32_3* %618 = OpVariable Private 
                       Private i32_2* %794 = OpVariable Private 
                                 f32 %2055 = OpConstant 3.674022E-40 
                                     %2227 = OpTypePointer Private %553 
                     Private bool_2* %2228 = OpVariable Private 
                                 f32 %2239 = OpConstant 3.674022E-40 
                      Private i32_2* %2351 = OpVariable Private 
                               f32_4 %2354 = OpConstantComposite %14 %14 %14 %14 
                     Private bool_2* %2364 = OpVariable Private 
                                     %2366 = OpTypeVector %24 4 
                       Private bool* %2380 = OpVariable Private 
                                     %2382 = OpTypePointer Function %139 
                 Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                 u32 %2468 = OpConstant 3 
                                     %2472 = OpTypePointer Uniform %20 
UniformConstant read_only Texture2D* %2483 = OpVariable UniformConstant 
            UniformConstant sampler* %2485 = OpVariable UniformConstant 
                                 f32 %2496 = OpConstant 3.674022E-40 
                                 f32 %2501 = OpConstant 3.674022E-40 
                                 f32 %2530 = OpConstant 3.674022E-40 
                               f32_3 %2531 = OpConstantComposite %2530 %2530 %2530 
                                 f32 %2535 = OpConstant 3.674022E-40 
                               f32_3 %2536 = OpConstantComposite %2535 %2535 %2535 
                                 f32 %2541 = OpConstant 3.674022E-40 
                               f32_3 %2542 = OpConstantComposite %2541 %2541 %2541 
                                 f32 %2547 = OpConstant 3.674022E-40 
                               f32_3 %2548 = OpConstantComposite %2547 %2547 %2547 
                                 f32 %2550 = OpConstant 3.674022E-40 
                               f32_3 %2551 = OpConstantComposite %2550 %2550 %2550 
                                     %2553 = OpTypeVector %139 3 
                                     %2554 = OpTypePointer Private %2553 
                     Private bool_3* %2555 = OpVariable Private 
                                 f32 %2556 = OpConstant 3.674022E-40 
                               f32_4 %2557 = OpConstantComposite %2556 %2556 %2556 %14 
                                 f32 %2600 = OpConstant 3.674022E-40 
                               f32_3 %2601 = OpConstantComposite %2600 %2600 %2600 
                                 f32 %2606 = OpConstant 3.674022E-40 
                               f32_3 %2607 = OpConstantComposite %2606 %2606 %2606 
                                 f32 %2610 = OpConstant 3.674022E-40 
                               f32_3 %2611 = OpConstantComposite %2610 %2610 %2610 
                                 f32 %2614 = OpConstant 3.674022E-40 
                               f32_3 %2615 = OpConstantComposite %2614 %2614 %2614 
                                 f32 %2623 = OpConstant 3.674022E-40 
                               f32_3 %2624 = OpConstantComposite %2623 %2623 %2623 
                     Private bool_3* %2628 = OpVariable Private 
                                 f32 %2629 = OpConstant 3.674022E-40 
                               f32_4 %2630 = OpConstantComposite %2629 %2629 %2629 %2629 
                                     %2635 = OpTypePointer Output %20 
                       Output f32_4* %2636 = OpVariable Output 
                                     %2648 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %307 = OpVariable Function 
                        Function f32* %320 = OpVariable Function 
                        Function f32* %373 = OpVariable Function 
                        Function f32* %393 = OpVariable Function 
                        Function f32* %402 = OpVariable Function 
                        Function f32* %420 = OpVariable Function 
                        Function f32* %432 = OpVariable Function 
                        Function f32* %573 = OpVariable Function 
                        Function f32* %592 = OpVariable Function 
                        Function f32* %629 = OpVariable Function 
                        Function f32* %649 = OpVariable Function 
                        Function f32* %718 = OpVariable Function 
                        Function f32* %736 = OpVariable Function 
                        Function f32* %766 = OpVariable Function 
                        Function f32* %785 = OpVariable Function 
                        Function f32* %815 = OpVariable Function 
                        Function f32* %835 = OpVariable Function 
                        Function f32* %904 = OpVariable Function 
                        Function f32* %922 = OpVariable Function 
                        Function f32* %952 = OpVariable Function 
                        Function f32* %971 = OpVariable Function 
                       Function f32* %1000 = OpVariable Function 
                       Function f32* %1020 = OpVariable Function 
                       Function f32* %1089 = OpVariable Function 
                       Function f32* %1107 = OpVariable Function 
                       Function f32* %1137 = OpVariable Function 
                       Function f32* %1156 = OpVariable Function 
                       Function f32* %1185 = OpVariable Function 
                       Function f32* %1205 = OpVariable Function 
                       Function f32* %1274 = OpVariable Function 
                       Function f32* %1292 = OpVariable Function 
                       Function f32* %1322 = OpVariable Function 
                       Function f32* %1341 = OpVariable Function 
                       Function f32* %1370 = OpVariable Function 
                       Function f32* %1390 = OpVariable Function 
                       Function f32* %1459 = OpVariable Function 
                       Function f32* %1477 = OpVariable Function 
                       Function f32* %1507 = OpVariable Function 
                       Function f32* %1526 = OpVariable Function 
                       Function f32* %1555 = OpVariable Function 
                       Function f32* %1575 = OpVariable Function 
                       Function f32* %1644 = OpVariable Function 
                       Function f32* %1662 = OpVariable Function 
                       Function f32* %1692 = OpVariable Function 
                       Function f32* %1711 = OpVariable Function 
                       Function f32* %1740 = OpVariable Function 
                       Function f32* %1760 = OpVariable Function 
                       Function f32* %1829 = OpVariable Function 
                       Function f32* %1847 = OpVariable Function 
                       Function f32* %1877 = OpVariable Function 
                       Function f32* %1896 = OpVariable Function 
                       Function f32* %1925 = OpVariable Function 
                       Function f32* %1945 = OpVariable Function 
                       Function f32* %2014 = OpVariable Function 
                       Function f32* %2032 = OpVariable Function 
                       Function f32* %2063 = OpVariable Function 
                       Function f32* %2082 = OpVariable Function 
                       Function f32* %2111 = OpVariable Function 
                       Function f32* %2131 = OpVariable Function 
                       Function f32* %2200 = OpVariable Function 
                       Function f32* %2218 = OpVariable Function 
                       Function f32* %2246 = OpVariable Function 
                       Function f32* %2264 = OpVariable Function 
                       Function f32* %2281 = OpVariable Function 
                       Function f32* %2298 = OpVariable Function 
                       Function f32* %2327 = OpVariable Function 
                       Function f32* %2343 = OpVariable Function 
                      Function bool* %2383 = OpVariable Function 
                       Function f32* %2421 = OpVariable Function 
                       Function f32* %2436 = OpVariable Function 
                       Function f32* %2564 = OpVariable Function 
                       Function f32* %2576 = OpVariable Function 
                       Function f32* %2588 = OpVariable Function 
                       Function f32* %2639 = OpVariable Function 
                       Function f32* %2652 = OpVariable Function 
                       Function f32* %2664 = OpVariable Function 
                                 f32_2 %12 = OpLoad vs_TEXCOORD0 
                                               OpStore %9 %12 
                                 f32_2 %13 = OpLoad %9 
                                 f32_2 %16 = OpCompositeConstruct %14 %14 
                                 f32_2 %17 = OpCompositeConstruct %15 %15 
                                 f32_2 %18 = OpExtInst %1 43 %13 %16 %17 
                                               OpStore %9 %18 
                                 f32_2 %19 = OpLoad %9 
                          Uniform f32* %27 = OpAccessChain %23 %25 
                                   f32 %28 = OpLoad %27 
                                 f32_2 %29 = OpCompositeConstruct %28 %28 
                                 f32_2 %30 = OpFMul %19 %29 
                                               OpStore %9 %30 
                   read_only Texture2D %37 = OpLoad %36 
                               sampler %41 = OpLoad %40 
            read_only Texture2DSampled %43 = OpSampledImage %37 %41 
                                 f32_2 %44 = OpLoad %9 
                                 f32_4 %45 = OpImageSampleExplicitLod %43 %44 Lod %20 
                                 f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                                               OpStore %33 %46 
                   read_only Texture2D %49 = OpLoad %36 
                               sampler %50 = OpLoad %40 
            read_only Texture2DSampled %51 = OpSampledImage %49 %50 
                                 f32_2 %52 = OpLoad %9 
                                 f32_4 %56 = OpImageSampleExplicitLod %51 %52 Lod %20ConstOffset %56 
                                   f32 %59 = OpCompositeExtract %56 1 
                                               OpStore %48 %59 
                   read_only Texture2D %61 = OpLoad %36 
                               sampler %62 = OpLoad %40 
            read_only Texture2DSampled %63 = OpSampledImage %61 %62 
                                 f32_2 %64 = OpLoad %9 
                                 f32_4 %66 = OpImageSampleExplicitLod %63 %64 Lod %20ConstOffset %66 
                                   f32 %67 = OpCompositeExtract %66 1 
                                               OpStore %60 %67 
                   read_only Texture2D %69 = OpLoad %36 
                               sampler %70 = OpLoad %40 
            read_only Texture2DSampled %71 = OpSampledImage %69 %70 
                                 f32_2 %72 = OpLoad %9 
                                 f32_4 %75 = OpImageSampleExplicitLod %71 %72 Lod %20ConstOffset %75 
                                   f32 %76 = OpCompositeExtract %75 1 
                                               OpStore %68 %76 
                   read_only Texture2D %78 = OpLoad %36 
                               sampler %79 = OpLoad %40 
            read_only Texture2DSampled %80 = OpSampledImage %78 %79 
                                 f32_2 %81 = OpLoad %9 
                                 f32_4 %83 = OpImageSampleExplicitLod %80 %81 Lod %20ConstOffset %83 
                                   f32 %84 = OpCompositeExtract %83 1 
                          Private f32* %86 = OpAccessChain %77 %85 
                                               OpStore %86 %84 
                          Private f32* %88 = OpAccessChain %33 %58 
                                   f32 %89 = OpLoad %88 
                                   f32 %90 = OpLoad %48 
                                   f32 %91 = OpExtInst %1 40 %89 %90 
                          Private f32* %92 = OpAccessChain %87 %85 
                                               OpStore %92 %91 
                          Private f32* %94 = OpAccessChain %33 %58 
                                   f32 %95 = OpLoad %94 
                                   f32 %96 = OpLoad %48 
                                   f32 %97 = OpExtInst %1 37 %95 %96 
                                               OpStore %93 %97 
                                   f32 %98 = OpLoad %60 
                          Private f32* %99 = OpAccessChain %87 %85 
                                  f32 %100 = OpLoad %99 
                                  f32 %101 = OpExtInst %1 40 %98 %100 
                         Private f32* %102 = OpAccessChain %87 %85 
                                               OpStore %102 %101 
                                  f32 %103 = OpLoad %60 
                                  f32 %104 = OpLoad %93 
                                  f32 %105 = OpExtInst %1 37 %103 %104 
                                               OpStore %93 %105 
                                  f32 %107 = OpLoad %68 
                         Private f32* %108 = OpAccessChain %77 %85 
                                  f32 %109 = OpLoad %108 
                                  f32 %110 = OpExtInst %1 40 %107 %109 
                                               OpStore %106 %110 
                                  f32 %112 = OpLoad %68 
                         Private f32* %113 = OpAccessChain %77 %85 
                                  f32 %114 = OpLoad %113 
                                  f32 %115 = OpExtInst %1 37 %112 %114 
                         Private f32* %116 = OpAccessChain %111 %85 
                                               OpStore %116 %115 
                         Private f32* %117 = OpAccessChain %87 %85 
                                  f32 %118 = OpLoad %117 
                                  f32 %119 = OpLoad %106 
                                  f32 %120 = OpExtInst %1 40 %118 %119 
                         Private f32* %121 = OpAccessChain %87 %85 
                                               OpStore %121 %120 
                                  f32 %122 = OpLoad %93 
                         Private f32* %123 = OpAccessChain %111 %85 
                                  f32 %124 = OpLoad %123 
                                  f32 %125 = OpExtInst %1 37 %122 %124 
                                               OpStore %93 %125 
                         Private f32* %126 = OpAccessChain %87 %85 
                                  f32 %127 = OpLoad %126 
                                  f32 %129 = OpFMul %127 %128 
                                               OpStore %106 %129 
                                  f32 %130 = OpLoad %93 
                                  f32 %131 = OpFNegate %130 
                         Private f32* %132 = OpAccessChain %87 %85 
                                  f32 %133 = OpLoad %132 
                                  f32 %134 = OpFAdd %131 %133 
                         Private f32* %135 = OpAccessChain %87 %85 
                                               OpStore %135 %134 
                                  f32 %136 = OpLoad %106 
                                  f32 %138 = OpExtInst %1 40 %136 %137 
                                               OpStore %93 %138 
                         Private f32* %142 = OpAccessChain %87 %85 
                                  f32 %143 = OpLoad %142 
                                  f32 %144 = OpLoad %93 
                                 bool %145 = OpFOrdGreaterThanEqual %143 %144 
                                               OpStore %141 %145 
                                 bool %146 = OpLoad %141 
                                               OpSelectionMerge %148 None 
                                               OpBranchConditional %146 %147 %148 
                                      %147 = OpLabel 
                  read_only Texture2D %149 = OpLoad %36 
                              sampler %150 = OpLoad %40 
           read_only Texture2DSampled %151 = OpSampledImage %149 %150 
                                f32_2 %152 = OpLoad %9 
                                f32_4 %154 = OpImageSampleExplicitLod %151 %152 Lod %20ConstOffset %154 
                                  f32 %155 = OpCompositeExtract %154 1 
                                               OpStore %93 %155 
                  read_only Texture2D %156 = OpLoad %36 
                              sampler %157 = OpLoad %40 
           read_only Texture2DSampled %158 = OpSampledImage %156 %157 
                                f32_2 %159 = OpLoad %9 
                                f32_4 %161 = OpImageSampleExplicitLod %158 %159 Lod %20ConstOffset %161 
                                  f32 %162 = OpCompositeExtract %161 1 
                                               OpStore %106 %162 
                  read_only Texture2D %163 = OpLoad %36 
                              sampler %164 = OpLoad %40 
           read_only Texture2DSampled %165 = OpSampledImage %163 %164 
                                f32_2 %166 = OpLoad %9 
                                f32_4 %168 = OpImageSampleExplicitLod %165 %166 Lod %20ConstOffset %168 
                                  f32 %169 = OpCompositeExtract %168 1 
                         Private f32* %170 = OpAccessChain %111 %85 
                                               OpStore %170 %169 
                  read_only Texture2D %171 = OpLoad %36 
                              sampler %172 = OpLoad %40 
           read_only Texture2DSampled %173 = OpSampledImage %171 %172 
                                f32_2 %174 = OpLoad %9 
                                f32_4 %176 = OpImageSampleExplicitLod %173 %174 Lod %20ConstOffset %176 
                                  f32 %177 = OpCompositeExtract %176 1 
                         Private f32* %178 = OpAccessChain %9 %85 
                                               OpStore %178 %177 
                                  f32 %180 = OpLoad %48 
                                  f32 %181 = OpLoad %68 
                                  f32 %182 = OpFAdd %180 %181 
                         Private f32* %183 = OpAccessChain %179 %85 
                                               OpStore %183 %182 
                                  f32 %185 = OpLoad %60 
                         Private f32* %186 = OpAccessChain %77 %85 
                                  f32 %187 = OpLoad %186 
                                  f32 %188 = OpFAdd %185 %187 
                         Private f32* %189 = OpAccessChain %184 %85 
                                               OpStore %189 %188 
                         Private f32* %190 = OpAccessChain %87 %85 
                                  f32 %191 = OpLoad %190 
                                  f32 %192 = OpFDiv %15 %191 
                         Private f32* %193 = OpAccessChain %87 %85 
                                               OpStore %193 %192 
                         Private f32* %195 = OpAccessChain %179 %85 
                                  f32 %196 = OpLoad %195 
                         Private f32* %197 = OpAccessChain %184 %85 
                                  f32 %198 = OpLoad %197 
                                  f32 %199 = OpFAdd %196 %198 
                         Private f32* %200 = OpAccessChain %194 %85 
                                               OpStore %200 %199 
                         Private f32* %201 = OpAccessChain %33 %58 
                                  f32 %202 = OpLoad %201 
                                  f32 %204 = OpFMul %202 %203 
                         Private f32* %205 = OpAccessChain %179 %85 
                                  f32 %206 = OpLoad %205 
                                  f32 %207 = OpFAdd %204 %206 
                         Private f32* %208 = OpAccessChain %179 %85 
                                               OpStore %208 %207 
                         Private f32* %209 = OpAccessChain %33 %58 
                                  f32 %210 = OpLoad %209 
                                  f32 %211 = OpFMul %210 %203 
                         Private f32* %212 = OpAccessChain %184 %85 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFAdd %211 %213 
                         Private f32* %215 = OpAccessChain %184 %85 
                                               OpStore %215 %214 
                                  f32 %217 = OpLoad %106 
                         Private f32* %218 = OpAccessChain %111 %85 
                                  f32 %219 = OpLoad %218 
                                  f32 %220 = OpFAdd %217 %219 
                                               OpStore %216 %220 
                                  f32 %221 = OpLoad %93 
                         Private f32* %222 = OpAccessChain %111 %85 
                                  f32 %223 = OpLoad %222 
                                  f32 %224 = OpFAdd %221 %223 
                         Private f32* %225 = OpAccessChain %111 %85 
                                               OpStore %225 %224 
                                  f32 %227 = OpLoad %60 
                                  f32 %228 = OpFMul %227 %203 
                                  f32 %229 = OpLoad %216 
                                  f32 %230 = OpFAdd %228 %229 
                         Private f32* %231 = OpAccessChain %226 %85 
                                               OpStore %231 %230 
                                  f32 %232 = OpLoad %68 
                                  f32 %233 = OpFMul %232 %203 
                         Private f32* %234 = OpAccessChain %111 %85 
                                  f32 %235 = OpLoad %234 
                                  f32 %236 = OpFAdd %233 %235 
                         Private f32* %237 = OpAccessChain %111 %85 
                                               OpStore %237 %236 
                         Private f32* %238 = OpAccessChain %9 %85 
                                  f32 %239 = OpLoad %238 
                                  f32 %240 = OpLoad %93 
                                  f32 %241 = OpFAdd %239 %240 
                                               OpStore %93 %241 
                                  f32 %242 = OpLoad %106 
                         Private f32* %243 = OpAccessChain %9 %85 
                                  f32 %244 = OpLoad %243 
                                  f32 %245 = OpFAdd %242 %244 
                         Private f32* %246 = OpAccessChain %9 %85 
                                               OpStore %246 %245 
                         Private f32* %247 = OpAccessChain %179 %85 
                                  f32 %248 = OpLoad %247 
                                  f32 %249 = OpExtInst %1 4 %248 
                                  f32 %251 = OpFMul %249 %250 
                         Private f32* %252 = OpAccessChain %226 %85 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpExtInst %1 4 %253 
                                  f32 %255 = OpFAdd %251 %254 
                         Private f32* %256 = OpAccessChain %179 %85 
                                               OpStore %256 %255 
                         Private f32* %257 = OpAccessChain %184 %85 
                                  f32 %258 = OpLoad %257 
                                  f32 %259 = OpExtInst %1 4 %258 
                                  f32 %260 = OpFMul %259 %250 
                         Private f32* %261 = OpAccessChain %111 %85 
                                  f32 %262 = OpLoad %261 
                                  f32 %263 = OpExtInst %1 4 %262 
                                  f32 %264 = OpFAdd %260 %263 
                                               OpStore %106 %264 
                         Private f32* %265 = OpAccessChain %77 %85 
                                  f32 %266 = OpLoad %265 
                                  f32 %267 = OpFMul %266 %203 
                                  f32 %268 = OpLoad %93 
                                  f32 %269 = OpFAdd %267 %268 
                         Private f32* %270 = OpAccessChain %111 %85 
                                               OpStore %270 %269 
                                  f32 %271 = OpLoad %48 
                                  f32 %272 = OpFMul %271 %203 
                         Private f32* %273 = OpAccessChain %9 %85 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpFAdd %272 %274 
                         Private f32* %276 = OpAccessChain %9 %85 
                                               OpStore %276 %275 
                         Private f32* %277 = OpAccessChain %179 %85 
                                  f32 %278 = OpLoad %277 
                         Private f32* %279 = OpAccessChain %111 %85 
                                  f32 %280 = OpLoad %279 
                                  f32 %281 = OpExtInst %1 4 %280 
                                  f32 %282 = OpFAdd %278 %281 
                         Private f32* %283 = OpAccessChain %179 %85 
                                               OpStore %283 %282 
                                  f32 %284 = OpLoad %106 
                         Private f32* %285 = OpAccessChain %9 %85 
                                  f32 %286 = OpLoad %285 
                                  f32 %287 = OpExtInst %1 4 %286 
                                  f32 %288 = OpFAdd %284 %287 
                         Private f32* %289 = OpAccessChain %9 %85 
                                               OpStore %289 %288 
                                  f32 %290 = OpLoad %216 
                                  f32 %291 = OpLoad %93 
                                  f32 %292 = OpFAdd %290 %291 
                                               OpStore %93 %292 
                         Private f32* %294 = OpAccessChain %179 %85 
                                  f32 %295 = OpLoad %294 
                         Private f32* %296 = OpAccessChain %9 %85 
                                  f32 %297 = OpLoad %296 
                                 bool %298 = OpFOrdGreaterThanEqual %295 %297 
                                               OpStore %293 %298 
                         Private f32* %299 = OpAccessChain %194 %85 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFMul %300 %250 
                                  f32 %302 = OpLoad %93 
                                  f32 %303 = OpFAdd %301 %302 
                         Private f32* %304 = OpAccessChain %179 %85 
                                               OpStore %304 %303 
                                 bool %305 = OpLoad %293 
                                               OpSelectionMerge %309 None 
                                               OpBranchConditional %305 %308 %311 
                                      %308 = OpLabel 
                                  f32 %310 = OpLoad %68 
                                               OpStore %307 %310 
                                               OpBranch %309 
                                      %311 = OpLabel 
                         Private f32* %312 = OpAccessChain %77 %85 
                                  f32 %313 = OpLoad %312 
                                               OpStore %307 %313 
                                               OpBranch %309 
                                      %309 = OpLabel 
                                  f32 %314 = OpLoad %307 
                                               OpStore %68 %314 
                                 bool %315 = OpLoad %293 
                                  f32 %316 = OpLoad %48 
                                  f32 %317 = OpLoad %60 
                                  f32 %318 = OpSelect %315 %316 %317 
                                               OpStore %48 %318 
                                 bool %319 = OpLoad %293 
                                               OpSelectionMerge %322 None 
                                               OpBranchConditional %319 %321 %326 
                                      %321 = OpLabel 
                         Uniform f32* %324 = OpAccessChain %23 %323 %58 
                                  f32 %325 = OpLoad %324 
                                               OpStore %320 %325 
                                               OpBranch %322 
                                      %326 = OpLabel 
                         Uniform f32* %327 = OpAccessChain %23 %323 %85 
                                  f32 %328 = OpLoad %327 
                                               OpStore %320 %328 
                                               OpBranch %322 
                                      %322 = OpLabel 
                                  f32 %329 = OpLoad %320 
                                               OpStore %60 %329 
                         Private f32* %330 = OpAccessChain %179 %85 
                                  f32 %331 = OpLoad %330 
                                  f32 %333 = OpFMul %331 %332 
                         Private f32* %334 = OpAccessChain %33 %58 
                                  f32 %335 = OpLoad %334 
                                  f32 %336 = OpFNegate %335 
                                  f32 %337 = OpFAdd %333 %336 
                         Private f32* %338 = OpAccessChain %179 %85 
                                               OpStore %338 %337 
                         Private f32* %339 = OpAccessChain %33 %58 
                                  f32 %340 = OpLoad %339 
                                  f32 %341 = OpFNegate %340 
                                  f32 %342 = OpLoad %68 
                                  f32 %343 = OpFAdd %341 %342 
                         Private f32* %344 = OpAccessChain %77 %85 
                                               OpStore %344 %343 
                         Private f32* %345 = OpAccessChain %33 %58 
                                  f32 %346 = OpLoad %345 
                                  f32 %347 = OpFNegate %346 
                                  f32 %348 = OpLoad %48 
                                  f32 %349 = OpFAdd %347 %348 
                                               OpStore %93 %349 
                         Private f32* %350 = OpAccessChain %33 %58 
                                  f32 %351 = OpLoad %350 
                                  f32 %352 = OpLoad %68 
                                  f32 %353 = OpFAdd %351 %352 
                                               OpStore %68 %353 
                         Private f32* %354 = OpAccessChain %33 %58 
                                  f32 %355 = OpLoad %354 
                                  f32 %356 = OpLoad %48 
                                  f32 %357 = OpFAdd %355 %356 
                                               OpStore %48 %357 
                         Private f32* %359 = OpAccessChain %77 %85 
                                  f32 %360 = OpLoad %359 
                                  f32 %361 = OpExtInst %1 4 %360 
                                  f32 %362 = OpLoad %93 
                                  f32 %363 = OpExtInst %1 4 %362 
                                 bool %364 = OpFOrdGreaterThanEqual %361 %363 
                                               OpStore %358 %364 
                                  f32 %365 = OpLoad %93 
                                  f32 %366 = OpExtInst %1 4 %365 
                         Private f32* %367 = OpAccessChain %77 %85 
                                  f32 %368 = OpLoad %367 
                                  f32 %369 = OpExtInst %1 4 %368 
                                  f32 %370 = OpExtInst %1 40 %366 %369 
                         Private f32* %371 = OpAccessChain %77 %85 
                                               OpStore %371 %370 
                                 bool %372 = OpLoad %358 
                                               OpSelectionMerge %375 None 
                                               OpBranchConditional %372 %374 %378 
                                      %374 = OpLabel 
                                  f32 %376 = OpLoad %60 
                                  f32 %377 = OpFNegate %376 
                                               OpStore %373 %377 
                                               OpBranch %375 
                                      %378 = OpLabel 
                                  f32 %379 = OpLoad %60 
                                               OpStore %373 %379 
                                               OpBranch %375 
                                      %375 = OpLabel 
                                  f32 %380 = OpLoad %373 
                                               OpStore %60 %380 
                         Private f32* %381 = OpAccessChain %87 %85 
                                  f32 %382 = OpLoad %381 
                         Private f32* %383 = OpAccessChain %179 %85 
                                  f32 %384 = OpLoad %383 
                                  f32 %385 = OpExtInst %1 4 %384 
                                  f32 %386 = OpFMul %382 %385 
                         Private f32* %387 = OpAccessChain %179 %85 
                                               OpStore %387 %386 
                         Private f32* %388 = OpAccessChain %179 %85 
                                  f32 %389 = OpLoad %388 
                                  f32 %390 = OpExtInst %1 43 %389 %14 %15 
                         Private f32* %391 = OpAccessChain %179 %85 
                                               OpStore %391 %390 
                                 bool %392 = OpLoad %293 
                                               OpSelectionMerge %395 None 
                                               OpBranchConditional %392 %394 %398 
                                      %394 = OpLabel 
                         Uniform f32* %396 = OpAccessChain %23 %323 %85 
                                  f32 %397 = OpLoad %396 
                                               OpStore %393 %397 
                                               OpBranch %395 
                                      %398 = OpLabel 
                                               OpStore %393 %14 
                                               OpBranch %395 
                                      %395 = OpLabel 
                                  f32 %399 = OpLoad %393 
                         Private f32* %400 = OpAccessChain %87 %85 
                                               OpStore %400 %399 
                                 bool %401 = OpLoad %293 
                                               OpSelectionMerge %404 None 
                                               OpBranchConditional %401 %403 %405 
                                      %403 = OpLabel 
                                               OpStore %402 %14 
                                               OpBranch %404 
                                      %405 = OpLabel 
                         Uniform f32* %406 = OpAccessChain %23 %323 %58 
                                  f32 %407 = OpLoad %406 
                                               OpStore %402 %407 
                                               OpBranch %404 
                                      %404 = OpLabel 
                                  f32 %408 = OpLoad %402 
                         Private f32* %409 = OpAccessChain %87 %58 
                                               OpStore %409 %408 
                                  f32 %410 = OpLoad %60 
                                f32_2 %411 = OpCompositeConstruct %410 %410 
                                f32_2 %414 = OpFMul %411 %413 
                                f32_2 %415 = OpLoad vs_TEXCOORD0 
                                f32_2 %416 = OpFAdd %414 %415 
                                f32_3 %417 = OpLoad %111 
                                f32_3 %418 = OpVectorShuffle %417 %416 3 4 2 
                                               OpStore %111 %418 
                                 bool %419 = OpLoad %293 
                                               OpSelectionMerge %422 None 
                                               OpBranchConditional %419 %421 %426 
                                      %421 = OpLabel 
                           Input f32* %424 = OpAccessChain vs_TEXCOORD0 %85 
                                  f32 %425 = OpLoad %424 
                                               OpStore %420 %425 
                                               OpBranch %422 
                                      %426 = OpLabel 
                         Private f32* %427 = OpAccessChain %111 %85 
                                  f32 %428 = OpLoad %427 
                                               OpStore %420 %428 
                                               OpBranch %422 
                                      %422 = OpLabel 
                                  f32 %429 = OpLoad %420 
                         Private f32* %430 = OpAccessChain %111 %85 
                                               OpStore %430 %429 
                                 bool %431 = OpLoad %293 
                                               OpSelectionMerge %434 None 
                                               OpBranchConditional %431 %433 %437 
                                      %433 = OpLabel 
                         Private f32* %435 = OpAccessChain %111 %58 
                                  f32 %436 = OpLoad %435 
                                               OpStore %432 %436 
                                               OpBranch %434 
                                      %437 = OpLabel 
                           Input f32* %438 = OpAccessChain vs_TEXCOORD0 %58 
                                  f32 %439 = OpLoad %438 
                                               OpStore %432 %439 
                                               OpBranch %434 
                                      %434 = OpLabel 
                                  f32 %440 = OpLoad %432 
                         Private f32* %441 = OpAccessChain %111 %58 
                                               OpStore %441 %440 
                                f32_2 %442 = OpLoad %87 
                                f32_2 %443 = OpFNegate %442 
                                f32_3 %444 = OpLoad %111 
                                f32_2 %445 = OpVectorShuffle %444 %444 0 1 
                                f32_2 %446 = OpFAdd %443 %445 
                                f32_3 %447 = OpLoad %226 
                                f32_3 %448 = OpVectorShuffle %447 %446 3 4 2 
                                               OpStore %226 %448 
                                f32_2 %450 = OpLoad %87 
                                f32_3 %451 = OpLoad %111 
                                f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                f32_2 %453 = OpFAdd %450 %452 
                                               OpStore %449 %453 
                         Private f32* %454 = OpAccessChain %179 %85 
                                  f32 %455 = OpLoad %454 
                                  f32 %456 = OpFMul %455 %203 
                                  f32 %458 = OpFAdd %456 %457 
                         Private f32* %459 = OpAccessChain %111 %85 
                                               OpStore %459 %458 
                                f32_3 %460 = OpLoad %226 
                                f32_2 %461 = OpVectorShuffle %460 %460 0 1 
                                               OpStore %184 %461 
                                f32_2 %462 = OpLoad %184 
                                f32_2 %463 = OpCompositeConstruct %14 %14 
                                f32_2 %464 = OpCompositeConstruct %15 %15 
                                f32_2 %465 = OpExtInst %1 43 %462 %463 %464 
                                               OpStore %184 %465 
                                f32_2 %466 = OpLoad %184 
                         Uniform f32* %467 = OpAccessChain %23 %25 
                                  f32 %468 = OpLoad %467 
                                f32_2 %469 = OpCompositeConstruct %468 %468 
                                f32_2 %470 = OpFMul %466 %469 
                                               OpStore %184 %470 
                  read_only Texture2D %471 = OpLoad %36 
                              sampler %472 = OpLoad %40 
           read_only Texture2DSampled %473 = OpSampledImage %471 %472 
                                f32_2 %474 = OpLoad %184 
                                f32_4 %475 = OpImageSampleExplicitLod %473 %474 Lod %20 
                                  f32 %476 = OpCompositeExtract %475 1 
                         Private f32* %477 = OpAccessChain %184 %85 
                                               OpStore %477 %476 
                         Private f32* %478 = OpAccessChain %179 %85 
                                  f32 %479 = OpLoad %478 
                         Private f32* %480 = OpAccessChain %179 %85 
                                  f32 %481 = OpLoad %480 
                                  f32 %482 = OpFMul %479 %481 
                         Private f32* %483 = OpAccessChain %179 %85 
                                               OpStore %483 %482 
                                f32_2 %484 = OpLoad %449 
                                               OpStore %194 %484 
                                f32_2 %485 = OpLoad %194 
                                f32_2 %486 = OpCompositeConstruct %14 %14 
                                f32_2 %487 = OpCompositeConstruct %15 %15 
                                f32_2 %488 = OpExtInst %1 43 %485 %486 %487 
                                               OpStore %194 %488 
                                f32_2 %489 = OpLoad %194 
                         Uniform f32* %490 = OpAccessChain %23 %25 
                                  f32 %491 = OpLoad %490 
                                f32_2 %492 = OpCompositeConstruct %491 %491 
                                f32_2 %493 = OpFMul %489 %492 
                                               OpStore %194 %493 
                  read_only Texture2D %494 = OpLoad %36 
                              sampler %495 = OpLoad %40 
           read_only Texture2DSampled %496 = OpSampledImage %494 %495 
                                f32_2 %497 = OpLoad %194 
                                f32_4 %498 = OpImageSampleExplicitLod %496 %497 Lod %20 
                                  f32 %499 = OpCompositeExtract %498 1 
                         Private f32* %500 = OpAccessChain %194 %85 
                                               OpStore %500 %499 
                                 bool %501 = OpLoad %358 
                                  f32 %502 = OpLoad %68 
                                  f32 %503 = OpLoad %48 
                                  f32 %504 = OpSelect %501 %502 %503 
                                               OpStore %48 %504 
                         Private f32* %505 = OpAccessChain %77 %85 
                                  f32 %506 = OpLoad %505 
                                  f32 %508 = OpFMul %506 %507 
                                               OpStore %68 %508 
                                  f32 %509 = OpLoad %48 
                                  f32 %510 = OpFNegate %509 
                                  f32 %511 = OpFMul %510 %412 
                         Private f32* %512 = OpAccessChain %33 %58 
                                  f32 %513 = OpLoad %512 
                                  f32 %514 = OpFAdd %511 %513 
                         Private f32* %515 = OpAccessChain %77 %85 
                                               OpStore %515 %514 
                         Private f32* %516 = OpAccessChain %179 %85 
                                  f32 %517 = OpLoad %516 
                         Private f32* %518 = OpAccessChain %111 %85 
                                  f32 %519 = OpLoad %518 
                                  f32 %520 = OpFMul %517 %519 
                         Private f32* %521 = OpAccessChain %179 %85 
                                               OpStore %521 %520 
                         Private f32* %524 = OpAccessChain %77 %85 
                                  f32 %525 = OpLoad %524 
                                 bool %526 = OpFOrdLessThan %525 %14 
                                  u32 %528 = OpSelect %526 %527 %85 
                                  i32 %529 = OpBitcast %528 
                                               OpStore %523 %529 
                                  f32 %530 = OpLoad %48 
                                  f32 %531 = OpFNegate %530 
                                  f32 %532 = OpFMul %531 %412 
                         Private f32* %533 = OpAccessChain %184 %85 
                                  f32 %534 = OpLoad %533 
                                  f32 %535 = OpFAdd %532 %534 
                         Private f32* %536 = OpAccessChain %111 %85 
                                               OpStore %536 %535 
                                  f32 %537 = OpLoad %48 
                                  f32 %538 = OpFNegate %537 
                                  f32 %539 = OpFMul %538 %412 
                         Private f32* %540 = OpAccessChain %194 %85 
                                  f32 %541 = OpLoad %540 
                                  f32 %542 = OpFAdd %539 %541 
                         Private f32* %543 = OpAccessChain %111 %58 
                                               OpStore %543 %542 
                                f32_3 %546 = OpLoad %111 
                                f32_4 %547 = OpVectorShuffle %546 %546 0 1 0 1 
                                f32_4 %548 = OpExtInst %1 4 %547 
                                  f32 %549 = OpLoad %68 
                                f32_4 %550 = OpCompositeConstruct %549 %549 %549 %549 
                               bool_4 %552 = OpFOrdGreaterThanEqual %548 %550 
                               bool_2 %554 = OpVectorShuffle %552 %552 0 1 
                                u32_2 %558 = OpSelect %554 %557 %556 
                                u32_2 %559 = OpCompositeConstruct %527 %527 
                                u32_2 %560 = OpIMul %558 %559 
                                i32_2 %561 = OpBitcast %560 
                                               OpStore %545 %561 
                         Private f32* %562 = OpAccessChain %87 %85 
                                  f32 %563 = OpLoad %562 
                                  f32 %564 = OpFNegate %563 
                                  f32 %566 = OpFMul %564 %565 
                         Private f32* %567 = OpAccessChain %226 %85 
                                  f32 %568 = OpLoad %567 
                                  f32 %569 = OpFAdd %566 %568 
                                               OpStore %106 %569 
                         Private i32* %570 = OpAccessChain %545 %85 
                                  i32 %571 = OpLoad %570 
                                 bool %572 = OpINotEqual %571 %25 
                                               OpSelectionMerge %575 None 
                                               OpBranchConditional %572 %574 %578 
                                      %574 = OpLabel 
                         Private f32* %576 = OpAccessChain %226 %85 
                                  f32 %577 = OpLoad %576 
                                               OpStore %573 %577 
                                               OpBranch %575 
                                      %578 = OpLabel 
                                  f32 %579 = OpLoad %106 
                                               OpStore %573 %579 
                                               OpBranch %575 
                                      %575 = OpLabel 
                                  f32 %580 = OpLoad %573 
                         Private f32* %581 = OpAccessChain %226 %85 
                                               OpStore %581 %580 
                         Private f32* %582 = OpAccessChain %87 %58 
                                  f32 %583 = OpLoad %582 
                                  f32 %584 = OpFNegate %583 
                                  f32 %585 = OpFMul %584 %565 
                         Private f32* %586 = OpAccessChain %226 %58 
                                  f32 %587 = OpLoad %586 
                                  f32 %588 = OpFAdd %585 %587 
                                               OpStore %106 %588 
                         Private i32* %589 = OpAccessChain %545 %85 
                                  i32 %590 = OpLoad %589 
                                 bool %591 = OpINotEqual %590 %25 
                                               OpSelectionMerge %594 None 
                                               OpBranchConditional %591 %593 %597 
                                      %593 = OpLabel 
                         Private f32* %595 = OpAccessChain %226 %58 
                                  f32 %596 = OpLoad %595 
                                               OpStore %592 %596 
                                               OpBranch %594 
                                      %597 = OpLabel 
                                  f32 %598 = OpLoad %106 
                                               OpStore %592 %598 
                                               OpBranch %594 
                                      %594 = OpLabel 
                                  f32 %599 = OpLoad %592 
                         Private f32* %601 = OpAccessChain %226 %600 
                                               OpStore %601 %599 
                                i32_2 %605 = OpLoad %545 
                                i32_2 %606 = OpNot %605 
                                i32_3 %607 = OpLoad %604 
                                i32_3 %608 = OpVectorShuffle %607 %606 3 1 4 
                                               OpStore %604 %608 
                         Private i32* %610 = OpAccessChain %604 %600 
                                  i32 %611 = OpLoad %610 
                                  u32 %612 = OpBitcast %611 
                         Private i32* %613 = OpAccessChain %604 %85 
                                  i32 %614 = OpLoad %613 
                                  u32 %615 = OpBitcast %614 
                                  u32 %616 = OpBitwiseOr %612 %615 
                                  i32 %617 = OpBitcast %616 
                                               OpStore %609 %617 
                         Private f32* %619 = OpAccessChain %87 %85 
                                  f32 %620 = OpLoad %619 
                                  f32 %621 = OpFMul %620 %565 
                         Private f32* %622 = OpAccessChain %449 %85 
                                  f32 %623 = OpLoad %622 
                                  f32 %624 = OpFAdd %621 %623 
                         Private f32* %625 = OpAccessChain %618 %85 
                                               OpStore %625 %624 
                         Private i32* %626 = OpAccessChain %545 %58 
                                  i32 %627 = OpLoad %626 
                                 bool %628 = OpINotEqual %627 %25 
                                               OpSelectionMerge %631 None 
                                               OpBranchConditional %628 %630 %634 
                                      %630 = OpLabel 
                         Private f32* %632 = OpAccessChain %449 %85 
                                  f32 %633 = OpLoad %632 
                                               OpStore %629 %633 
                                               OpBranch %631 
                                      %634 = OpLabel 
                         Private f32* %635 = OpAccessChain %618 %85 
                                  f32 %636 = OpLoad %635 
                                               OpStore %629 %636 
                                               OpBranch %631 
                                      %631 = OpLabel 
                                  f32 %637 = OpLoad %629 
                         Private f32* %638 = OpAccessChain %618 %85 
                                               OpStore %638 %637 
                         Private f32* %639 = OpAccessChain %87 %58 
                                  f32 %640 = OpLoad %639 
                                  f32 %641 = OpFMul %640 %565 
                         Private f32* %642 = OpAccessChain %449 %58 
                                  f32 %643 = OpLoad %642 
                                  f32 %644 = OpFAdd %641 %643 
                         Private f32* %645 = OpAccessChain %449 %85 
                                               OpStore %645 %644 
                         Private i32* %646 = OpAccessChain %545 %58 
                                  i32 %647 = OpLoad %646 
                                 bool %648 = OpINotEqual %647 %25 
                                               OpSelectionMerge %651 None 
                                               OpBranchConditional %648 %650 %654 
                                      %650 = OpLabel 
                         Private f32* %652 = OpAccessChain %449 %58 
                                  f32 %653 = OpLoad %652 
                                               OpStore %649 %653 
                                               OpBranch %651 
                                      %654 = OpLabel 
                         Private f32* %655 = OpAccessChain %449 %85 
                                  f32 %656 = OpLoad %655 
                                               OpStore %649 %656 
                                               OpBranch %651 
                                      %651 = OpLabel 
                                  f32 %657 = OpLoad %649 
                         Private f32* %658 = OpAccessChain %618 %600 
                                               OpStore %658 %657 
                                  i32 %659 = OpLoad %609 
                                 bool %660 = OpINotEqual %659 %25 
                                               OpSelectionMerge %662 None 
                                               OpBranchConditional %660 %661 %662 
                                      %661 = OpLabel 
                         Private i32* %663 = OpAccessChain %545 %85 
                                  i32 %664 = OpLoad %663 
                                 bool %665 = OpIEqual %664 %25 
                                               OpSelectionMerge %667 None 
                                               OpBranchConditional %665 %666 %667 
                                      %666 = OpLabel 
                                f32_3 %668 = OpLoad %226 
                                f32_2 %669 = OpVectorShuffle %668 %668 0 2 
                                               OpStore %449 %669 
                                f32_2 %670 = OpLoad %449 
                                f32_2 %671 = OpCompositeConstruct %14 %14 
                                f32_2 %672 = OpCompositeConstruct %15 %15 
                                f32_2 %673 = OpExtInst %1 43 %670 %671 %672 
                                               OpStore %449 %673 
                                f32_2 %674 = OpLoad %449 
                         Uniform f32* %675 = OpAccessChain %23 %25 
                                  f32 %676 = OpLoad %675 
                                f32_2 %677 = OpCompositeConstruct %676 %676 
                                f32_2 %678 = OpFMul %674 %677 
                                               OpStore %449 %678 
                  read_only Texture2D %679 = OpLoad %36 
                              sampler %680 = OpLoad %40 
           read_only Texture2DSampled %681 = OpSampledImage %679 %680 
                                f32_2 %682 = OpLoad %449 
                                f32_4 %683 = OpImageSampleExplicitLod %681 %682 Lod %20 
                                  f32 %684 = OpCompositeExtract %683 1 
                         Private f32* %685 = OpAccessChain %111 %85 
                                               OpStore %685 %684 
                                               OpBranch %667 
                                      %667 = OpLabel 
                         Private i32* %686 = OpAccessChain %545 %58 
                                  i32 %687 = OpLoad %686 
                                 bool %688 = OpIEqual %687 %25 
                                               OpSelectionMerge %690 None 
                                               OpBranchConditional %688 %689 %690 
                                      %689 = OpLabel 
                                f32_3 %691 = OpLoad %618 
                                f32_2 %692 = OpVectorShuffle %691 %691 0 2 
                                               OpStore %449 %692 
                                f32_2 %693 = OpLoad %449 
                                f32_2 %694 = OpCompositeConstruct %14 %14 
                                f32_2 %695 = OpCompositeConstruct %15 %15 
                                f32_2 %696 = OpExtInst %1 43 %693 %694 %695 
                                               OpStore %449 %696 
                                f32_2 %697 = OpLoad %449 
                         Uniform f32* %698 = OpAccessChain %23 %25 
                                  f32 %699 = OpLoad %698 
                                f32_2 %700 = OpCompositeConstruct %699 %699 
                                f32_2 %701 = OpFMul %697 %700 
                                               OpStore %449 %701 
                  read_only Texture2D %702 = OpLoad %36 
                              sampler %703 = OpLoad %40 
           read_only Texture2DSampled %704 = OpSampledImage %702 %703 
                                f32_2 %705 = OpLoad %449 
                                f32_4 %706 = OpImageSampleExplicitLod %704 %705 Lod %20 
                                  f32 %707 = OpCompositeExtract %706 1 
                         Private f32* %708 = OpAccessChain %111 %58 
                                               OpStore %708 %707 
                                               OpBranch %690 
                                      %690 = OpLabel 
                                  f32 %709 = OpLoad %48 
                                  f32 %710 = OpFNegate %709 
                                  f32 %711 = OpFMul %710 %412 
                         Private f32* %712 = OpAccessChain %111 %85 
                                  f32 %713 = OpLoad %712 
                                  f32 %714 = OpFAdd %711 %713 
                                               OpStore %106 %714 
                         Private i32* %715 = OpAccessChain %545 %85 
                                  i32 %716 = OpLoad %715 
                                 bool %717 = OpINotEqual %716 %25 
                                               OpSelectionMerge %720 None 
                                               OpBranchConditional %717 %719 %723 
                                      %719 = OpLabel 
                         Private f32* %721 = OpAccessChain %111 %85 
                                  f32 %722 = OpLoad %721 
                                               OpStore %718 %722 
                                               OpBranch %720 
                                      %723 = OpLabel 
                                  f32 %724 = OpLoad %106 
                                               OpStore %718 %724 
                                               OpBranch %720 
                                      %720 = OpLabel 
                                  f32 %725 = OpLoad %718 
                         Private f32* %726 = OpAccessChain %111 %85 
                                               OpStore %726 %725 
                                  f32 %727 = OpLoad %48 
                                  f32 %728 = OpFNegate %727 
                                  f32 %729 = OpFMul %728 %412 
                         Private f32* %730 = OpAccessChain %111 %58 
                                  f32 %731 = OpLoad %730 
                                  f32 %732 = OpFAdd %729 %731 
                                               OpStore %106 %732 
                         Private i32* %733 = OpAccessChain %545 %58 
                                  i32 %734 = OpLoad %733 
                                 bool %735 = OpINotEqual %734 %25 
                                               OpSelectionMerge %738 None 
                                               OpBranchConditional %735 %737 %741 
                                      %737 = OpLabel 
                         Private f32* %739 = OpAccessChain %111 %58 
                                  f32 %740 = OpLoad %739 
                                               OpStore %736 %740 
                                               OpBranch %738 
                                      %741 = OpLabel 
                                  f32 %742 = OpLoad %106 
                                               OpStore %736 %742 
                                               OpBranch %738 
                                      %738 = OpLabel 
                                  f32 %743 = OpLoad %736 
                         Private f32* %744 = OpAccessChain %111 %58 
                                               OpStore %744 %743 
                                f32_3 %745 = OpLoad %111 
                                f32_4 %746 = OpVectorShuffle %745 %745 0 1 0 1 
                                f32_4 %747 = OpExtInst %1 4 %746 
                                  f32 %748 = OpLoad %68 
                                f32_4 %749 = OpCompositeConstruct %748 %748 %748 %748 
                               bool_4 %750 = OpFOrdGreaterThanEqual %747 %749 
                               bool_2 %751 = OpVectorShuffle %750 %750 0 1 
                                u32_2 %752 = OpSelect %751 %557 %556 
                                u32_2 %753 = OpCompositeConstruct %527 %527 
                                u32_2 %754 = OpIMul %752 %753 
                                i32_2 %755 = OpBitcast %754 
                                               OpStore %545 %755 
                         Private f32* %756 = OpAccessChain %87 %85 
                                  f32 %757 = OpLoad %756 
                                  f32 %758 = OpFNegate %757 
                                  f32 %759 = OpFMul %758 %250 
                         Private f32* %760 = OpAccessChain %226 %85 
                                  f32 %761 = OpLoad %760 
                                  f32 %762 = OpFAdd %759 %761 
                                               OpStore %106 %762 
                         Private i32* %763 = OpAccessChain %545 %85 
                                  i32 %764 = OpLoad %763 
                                 bool %765 = OpINotEqual %764 %25 
                                               OpSelectionMerge %768 None 
                                               OpBranchConditional %765 %767 %771 
                                      %767 = OpLabel 
                         Private f32* %769 = OpAccessChain %226 %85 
                                  f32 %770 = OpLoad %769 
                                               OpStore %766 %770 
                                               OpBranch %768 
                                      %771 = OpLabel 
                                  f32 %772 = OpLoad %106 
                                               OpStore %766 %772 
                                               OpBranch %768 
                                      %768 = OpLabel 
                                  f32 %773 = OpLoad %766 
                         Private f32* %774 = OpAccessChain %226 %85 
                                               OpStore %774 %773 
                         Private f32* %775 = OpAccessChain %87 %58 
                                  f32 %776 = OpLoad %775 
                                  f32 %777 = OpFNegate %776 
                                  f32 %778 = OpFMul %777 %250 
                         Private f32* %779 = OpAccessChain %226 %600 
                                  f32 %780 = OpLoad %779 
                                  f32 %781 = OpFAdd %778 %780 
                                               OpStore %106 %781 
                         Private i32* %782 = OpAccessChain %545 %85 
                                  i32 %783 = OpLoad %782 
                                 bool %784 = OpINotEqual %783 %25 
                                               OpSelectionMerge %787 None 
                                               OpBranchConditional %784 %786 %790 
                                      %786 = OpLabel 
                         Private f32* %788 = OpAccessChain %226 %600 
                                  f32 %789 = OpLoad %788 
                                               OpStore %785 %789 
                                               OpBranch %787 
                                      %790 = OpLabel 
                                  f32 %791 = OpLoad %106 
                                               OpStore %785 %791 
                                               OpBranch %787 
                                      %787 = OpLabel 
                                  f32 %792 = OpLoad %785 
                         Private f32* %793 = OpAccessChain %226 %600 
                                               OpStore %793 %792 
                                i32_2 %795 = OpLoad %545 
                                i32_2 %796 = OpNot %795 
                                               OpStore %794 %796 
                         Private i32* %797 = OpAccessChain %794 %58 
                                  i32 %798 = OpLoad %797 
                                  u32 %799 = OpBitcast %798 
                         Private i32* %800 = OpAccessChain %794 %85 
                                  i32 %801 = OpLoad %800 
                                  u32 %802 = OpBitcast %801 
                                  u32 %803 = OpBitwiseOr %799 %802 
                                  i32 %804 = OpBitcast %803 
                                               OpStore %609 %804 
                         Private f32* %805 = OpAccessChain %87 %85 
                                  f32 %806 = OpLoad %805 
                                  f32 %807 = OpFMul %806 %250 
                         Private f32* %808 = OpAccessChain %618 %85 
                                  f32 %809 = OpLoad %808 
                                  f32 %810 = OpFAdd %807 %809 
                         Private f32* %811 = OpAccessChain %449 %85 
                                               OpStore %811 %810 
                         Private i32* %812 = OpAccessChain %545 %58 
                                  i32 %813 = OpLoad %812 
                                 bool %814 = OpINotEqual %813 %25 
                                               OpSelectionMerge %817 None 
                                               OpBranchConditional %814 %816 %820 
                                      %816 = OpLabel 
                         Private f32* %818 = OpAccessChain %618 %85 
                                  f32 %819 = OpLoad %818 
                                               OpStore %815 %819 
                                               OpBranch %817 
                                      %820 = OpLabel 
                         Private f32* %821 = OpAccessChain %449 %85 
                                  f32 %822 = OpLoad %821 
                                               OpStore %815 %822 
                                               OpBranch %817 
                                      %817 = OpLabel 
                                  f32 %823 = OpLoad %815 
                         Private f32* %824 = OpAccessChain %618 %85 
                                               OpStore %824 %823 
                         Private f32* %825 = OpAccessChain %87 %58 
                                  f32 %826 = OpLoad %825 
                                  f32 %827 = OpFMul %826 %250 
                         Private f32* %828 = OpAccessChain %618 %600 
                                  f32 %829 = OpLoad %828 
                                  f32 %830 = OpFAdd %827 %829 
                         Private f32* %831 = OpAccessChain %449 %85 
                                               OpStore %831 %830 
                         Private i32* %832 = OpAccessChain %545 %58 
                                  i32 %833 = OpLoad %832 
                                 bool %834 = OpINotEqual %833 %25 
                                               OpSelectionMerge %837 None 
                                               OpBranchConditional %834 %836 %840 
                                      %836 = OpLabel 
                         Private f32* %838 = OpAccessChain %618 %600 
                                  f32 %839 = OpLoad %838 
                                               OpStore %835 %839 
                                               OpBranch %837 
                                      %840 = OpLabel 
                         Private f32* %841 = OpAccessChain %449 %85 
                                  f32 %842 = OpLoad %841 
                                               OpStore %835 %842 
                                               OpBranch %837 
                                      %837 = OpLabel 
                                  f32 %843 = OpLoad %835 
                         Private f32* %844 = OpAccessChain %618 %600 
                                               OpStore %844 %843 
                                  i32 %845 = OpLoad %609 
                                 bool %846 = OpINotEqual %845 %25 
                                               OpSelectionMerge %848 None 
                                               OpBranchConditional %846 %847 %848 
                                      %847 = OpLabel 
                         Private i32* %849 = OpAccessChain %545 %85 
                                  i32 %850 = OpLoad %849 
                                 bool %851 = OpIEqual %850 %25 
                                               OpSelectionMerge %853 None 
                                               OpBranchConditional %851 %852 %853 
                                      %852 = OpLabel 
                                f32_3 %854 = OpLoad %226 
                                f32_2 %855 = OpVectorShuffle %854 %854 0 2 
                                               OpStore %449 %855 
                                f32_2 %856 = OpLoad %449 
                                f32_2 %857 = OpCompositeConstruct %14 %14 
                                f32_2 %858 = OpCompositeConstruct %15 %15 
                                f32_2 %859 = OpExtInst %1 43 %856 %857 %858 
                                               OpStore %449 %859 
                                f32_2 %860 = OpLoad %449 
                         Uniform f32* %861 = OpAccessChain %23 %25 
                                  f32 %862 = OpLoad %861 
                                f32_2 %863 = OpCompositeConstruct %862 %862 
                                f32_2 %864 = OpFMul %860 %863 
                                               OpStore %449 %864 
                  read_only Texture2D %865 = OpLoad %36 
                              sampler %866 = OpLoad %40 
           read_only Texture2DSampled %867 = OpSampledImage %865 %866 
                                f32_2 %868 = OpLoad %449 
                                f32_4 %869 = OpImageSampleExplicitLod %867 %868 Lod %20 
                                  f32 %870 = OpCompositeExtract %869 1 
                         Private f32* %871 = OpAccessChain %111 %85 
                                               OpStore %871 %870 
                                               OpBranch %853 
                                      %853 = OpLabel 
                         Private i32* %872 = OpAccessChain %545 %58 
                                  i32 %873 = OpLoad %872 
                                 bool %874 = OpIEqual %873 %25 
                                               OpSelectionMerge %876 None 
                                               OpBranchConditional %874 %875 %876 
                                      %875 = OpLabel 
                                f32_3 %877 = OpLoad %618 
                                f32_2 %878 = OpVectorShuffle %877 %877 0 2 
                                               OpStore %449 %878 
                                f32_2 %879 = OpLoad %449 
                                f32_2 %880 = OpCompositeConstruct %14 %14 
                                f32_2 %881 = OpCompositeConstruct %15 %15 
                                f32_2 %882 = OpExtInst %1 43 %879 %880 %881 
                                               OpStore %449 %882 
                                f32_2 %883 = OpLoad %449 
                         Uniform f32* %884 = OpAccessChain %23 %25 
                                  f32 %885 = OpLoad %884 
                                f32_2 %886 = OpCompositeConstruct %885 %885 
                                f32_2 %887 = OpFMul %883 %886 
                                               OpStore %449 %887 
                  read_only Texture2D %888 = OpLoad %36 
                              sampler %889 = OpLoad %40 
           read_only Texture2DSampled %890 = OpSampledImage %888 %889 
                                f32_2 %891 = OpLoad %449 
                                f32_4 %892 = OpImageSampleExplicitLod %890 %891 Lod %20 
                                  f32 %893 = OpCompositeExtract %892 1 
                         Private f32* %894 = OpAccessChain %111 %58 
                                               OpStore %894 %893 
                                               OpBranch %876 
                                      %876 = OpLabel 
                                  f32 %895 = OpLoad %48 
                                  f32 %896 = OpFNegate %895 
                                  f32 %897 = OpFMul %896 %412 
                         Private f32* %898 = OpAccessChain %111 %85 
                                  f32 %899 = OpLoad %898 
                                  f32 %900 = OpFAdd %897 %899 
                                               OpStore %106 %900 
                         Private i32* %901 = OpAccessChain %545 %85 
                                  i32 %902 = OpLoad %901 
                                 bool %903 = OpINotEqual %902 %25 
                                               OpSelectionMerge %906 None 
                                               OpBranchConditional %903 %905 %909 
                                      %905 = OpLabel 
                         Private f32* %907 = OpAccessChain %111 %85 
                                  f32 %908 = OpLoad %907 
                                               OpStore %904 %908 
                                               OpBranch %906 
                                      %909 = OpLabel 
                                  f32 %910 = OpLoad %106 
                                               OpStore %904 %910 
                                               OpBranch %906 
                                      %906 = OpLabel 
                                  f32 %911 = OpLoad %904 
                         Private f32* %912 = OpAccessChain %111 %85 
                                               OpStore %912 %911 
                                  f32 %913 = OpLoad %48 
                                  f32 %914 = OpFNegate %913 
                                  f32 %915 = OpFMul %914 %412 
                         Private f32* %916 = OpAccessChain %111 %58 
                                  f32 %917 = OpLoad %916 
                                  f32 %918 = OpFAdd %915 %917 
                                               OpStore %106 %918 
                         Private i32* %919 = OpAccessChain %545 %58 
                                  i32 %920 = OpLoad %919 
                                 bool %921 = OpINotEqual %920 %25 
                                               OpSelectionMerge %924 None 
                                               OpBranchConditional %921 %923 %927 
                                      %923 = OpLabel 
                         Private f32* %925 = OpAccessChain %111 %58 
                                  f32 %926 = OpLoad %925 
                                               OpStore %922 %926 
                                               OpBranch %924 
                                      %927 = OpLabel 
                                  f32 %928 = OpLoad %106 
                                               OpStore %922 %928 
                                               OpBranch %924 
                                      %924 = OpLabel 
                                  f32 %929 = OpLoad %922 
                         Private f32* %930 = OpAccessChain %111 %58 
                                               OpStore %930 %929 
                                f32_3 %931 = OpLoad %111 
                                f32_4 %932 = OpVectorShuffle %931 %931 0 1 0 1 
                                f32_4 %933 = OpExtInst %1 4 %932 
                                  f32 %934 = OpLoad %68 
                                f32_4 %935 = OpCompositeConstruct %934 %934 %934 %934 
                               bool_4 %936 = OpFOrdGreaterThanEqual %933 %935 
                               bool_2 %937 = OpVectorShuffle %936 %936 0 1 
                                u32_2 %938 = OpSelect %937 %557 %556 
                                u32_2 %939 = OpCompositeConstruct %527 %527 
                                u32_2 %940 = OpIMul %938 %939 
                                i32_2 %941 = OpBitcast %940 
                                               OpStore %545 %941 
                         Private f32* %942 = OpAccessChain %87 %85 
                                  f32 %943 = OpLoad %942 
                                  f32 %944 = OpFNegate %943 
                                  f32 %945 = OpFMul %944 %250 
                         Private f32* %946 = OpAccessChain %226 %85 
                                  f32 %947 = OpLoad %946 
                                  f32 %948 = OpFAdd %945 %947 
                                               OpStore %106 %948 
                         Private i32* %949 = OpAccessChain %545 %85 
                                  i32 %950 = OpLoad %949 
                                 bool %951 = OpINotEqual %950 %25 
                                               OpSelectionMerge %954 None 
                                               OpBranchConditional %951 %953 %957 
                                      %953 = OpLabel 
                         Private f32* %955 = OpAccessChain %226 %85 
                                  f32 %956 = OpLoad %955 
                                               OpStore %952 %956 
                                               OpBranch %954 
                                      %957 = OpLabel 
                                  f32 %958 = OpLoad %106 
                                               OpStore %952 %958 
                                               OpBranch %954 
                                      %954 = OpLabel 
                                  f32 %959 = OpLoad %952 
                         Private f32* %960 = OpAccessChain %226 %85 
                                               OpStore %960 %959 
                         Private f32* %961 = OpAccessChain %87 %58 
                                  f32 %962 = OpLoad %961 
                                  f32 %963 = OpFNegate %962 
                                  f32 %964 = OpFMul %963 %250 
                         Private f32* %965 = OpAccessChain %226 %600 
                                  f32 %966 = OpLoad %965 
                                  f32 %967 = OpFAdd %964 %966 
                                               OpStore %106 %967 
                         Private i32* %968 = OpAccessChain %545 %85 
                                  i32 %969 = OpLoad %968 
                                 bool %970 = OpINotEqual %969 %25 
                                               OpSelectionMerge %973 None 
                                               OpBranchConditional %970 %972 %976 
                                      %972 = OpLabel 
                         Private f32* %974 = OpAccessChain %226 %600 
                                  f32 %975 = OpLoad %974 
                                               OpStore %971 %975 
                                               OpBranch %973 
                                      %976 = OpLabel 
                                  f32 %977 = OpLoad %106 
                                               OpStore %971 %977 
                                               OpBranch %973 
                                      %973 = OpLabel 
                                  f32 %978 = OpLoad %971 
                         Private f32* %979 = OpAccessChain %226 %600 
                                               OpStore %979 %978 
                                i32_2 %980 = OpLoad %545 
                                i32_2 %981 = OpNot %980 
                                               OpStore %794 %981 
                         Private i32* %982 = OpAccessChain %794 %58 
                                  i32 %983 = OpLoad %982 
                                  u32 %984 = OpBitcast %983 
                         Private i32* %985 = OpAccessChain %794 %85 
                                  i32 %986 = OpLoad %985 
                                  u32 %987 = OpBitcast %986 
                                  u32 %988 = OpBitwiseOr %984 %987 
                                  i32 %989 = OpBitcast %988 
                                               OpStore %609 %989 
                         Private f32* %990 = OpAccessChain %87 %85 
                                  f32 %991 = OpLoad %990 
                                  f32 %992 = OpFMul %991 %250 
                         Private f32* %993 = OpAccessChain %618 %85 
                                  f32 %994 = OpLoad %993 
                                  f32 %995 = OpFAdd %992 %994 
                         Private f32* %996 = OpAccessChain %449 %85 
                                               OpStore %996 %995 
                         Private i32* %997 = OpAccessChain %545 %58 
                                  i32 %998 = OpLoad %997 
                                 bool %999 = OpINotEqual %998 %25 
                                               OpSelectionMerge %1002 None 
                                               OpBranchConditional %999 %1001 %1005 
                                     %1001 = OpLabel 
                        Private f32* %1003 = OpAccessChain %618 %85 
                                 f32 %1004 = OpLoad %1003 
                                               OpStore %1000 %1004 
                                               OpBranch %1002 
                                     %1005 = OpLabel 
                        Private f32* %1006 = OpAccessChain %449 %85 
                                 f32 %1007 = OpLoad %1006 
                                               OpStore %1000 %1007 
                                               OpBranch %1002 
                                     %1002 = OpLabel 
                                 f32 %1008 = OpLoad %1000 
                        Private f32* %1009 = OpAccessChain %618 %85 
                                               OpStore %1009 %1008 
                        Private f32* %1010 = OpAccessChain %87 %58 
                                 f32 %1011 = OpLoad %1010 
                                 f32 %1012 = OpFMul %1011 %250 
                        Private f32* %1013 = OpAccessChain %618 %600 
                                 f32 %1014 = OpLoad %1013 
                                 f32 %1015 = OpFAdd %1012 %1014 
                        Private f32* %1016 = OpAccessChain %449 %85 
                                               OpStore %1016 %1015 
                        Private i32* %1017 = OpAccessChain %545 %58 
                                 i32 %1018 = OpLoad %1017 
                                bool %1019 = OpINotEqual %1018 %25 
                                               OpSelectionMerge %1022 None 
                                               OpBranchConditional %1019 %1021 %1025 
                                     %1021 = OpLabel 
                        Private f32* %1023 = OpAccessChain %618 %600 
                                 f32 %1024 = OpLoad %1023 
                                               OpStore %1020 %1024 
                                               OpBranch %1022 
                                     %1025 = OpLabel 
                        Private f32* %1026 = OpAccessChain %449 %85 
                                 f32 %1027 = OpLoad %1026 
                                               OpStore %1020 %1027 
                                               OpBranch %1022 
                                     %1022 = OpLabel 
                                 f32 %1028 = OpLoad %1020 
                        Private f32* %1029 = OpAccessChain %618 %600 
                                               OpStore %1029 %1028 
                                 i32 %1030 = OpLoad %609 
                                bool %1031 = OpINotEqual %1030 %25 
                                               OpSelectionMerge %1033 None 
                                               OpBranchConditional %1031 %1032 %1033 
                                     %1032 = OpLabel 
                        Private i32* %1034 = OpAccessChain %545 %85 
                                 i32 %1035 = OpLoad %1034 
                                bool %1036 = OpIEqual %1035 %25 
                                               OpSelectionMerge %1038 None 
                                               OpBranchConditional %1036 %1037 %1038 
                                     %1037 = OpLabel 
                               f32_3 %1039 = OpLoad %226 
                               f32_2 %1040 = OpVectorShuffle %1039 %1039 0 2 
                                               OpStore %449 %1040 
                               f32_2 %1041 = OpLoad %449 
                               f32_2 %1042 = OpCompositeConstruct %14 %14 
                               f32_2 %1043 = OpCompositeConstruct %15 %15 
                               f32_2 %1044 = OpExtInst %1 43 %1041 %1042 %1043 
                                               OpStore %449 %1044 
                               f32_2 %1045 = OpLoad %449 
                        Uniform f32* %1046 = OpAccessChain %23 %25 
                                 f32 %1047 = OpLoad %1046 
                               f32_2 %1048 = OpCompositeConstruct %1047 %1047 
                               f32_2 %1049 = OpFMul %1045 %1048 
                                               OpStore %449 %1049 
                 read_only Texture2D %1050 = OpLoad %36 
                             sampler %1051 = OpLoad %40 
          read_only Texture2DSampled %1052 = OpSampledImage %1050 %1051 
                               f32_2 %1053 = OpLoad %449 
                               f32_4 %1054 = OpImageSampleExplicitLod %1052 %1053 Lod %20 
                                 f32 %1055 = OpCompositeExtract %1054 1 
                        Private f32* %1056 = OpAccessChain %111 %85 
                                               OpStore %1056 %1055 
                                               OpBranch %1038 
                                     %1038 = OpLabel 
                        Private i32* %1057 = OpAccessChain %545 %58 
                                 i32 %1058 = OpLoad %1057 
                                bool %1059 = OpIEqual %1058 %25 
                                               OpSelectionMerge %1061 None 
                                               OpBranchConditional %1059 %1060 %1061 
                                     %1060 = OpLabel 
                               f32_3 %1062 = OpLoad %618 
                               f32_2 %1063 = OpVectorShuffle %1062 %1062 0 2 
                                               OpStore %449 %1063 
                               f32_2 %1064 = OpLoad %449 
                               f32_2 %1065 = OpCompositeConstruct %14 %14 
                               f32_2 %1066 = OpCompositeConstruct %15 %15 
                               f32_2 %1067 = OpExtInst %1 43 %1064 %1065 %1066 
                                               OpStore %449 %1067 
                               f32_2 %1068 = OpLoad %449 
                        Uniform f32* %1069 = OpAccessChain %23 %25 
                                 f32 %1070 = OpLoad %1069 
                               f32_2 %1071 = OpCompositeConstruct %1070 %1070 
                               f32_2 %1072 = OpFMul %1068 %1071 
                                               OpStore %449 %1072 
                 read_only Texture2D %1073 = OpLoad %36 
                             sampler %1074 = OpLoad %40 
          read_only Texture2DSampled %1075 = OpSampledImage %1073 %1074 
                               f32_2 %1076 = OpLoad %449 
                               f32_4 %1077 = OpImageSampleExplicitLod %1075 %1076 Lod %20 
                                 f32 %1078 = OpCompositeExtract %1077 1 
                        Private f32* %1079 = OpAccessChain %111 %58 
                                               OpStore %1079 %1078 
                                               OpBranch %1061 
                                     %1061 = OpLabel 
                                 f32 %1080 = OpLoad %48 
                                 f32 %1081 = OpFNegate %1080 
                                 f32 %1082 = OpFMul %1081 %412 
                        Private f32* %1083 = OpAccessChain %111 %85 
                                 f32 %1084 = OpLoad %1083 
                                 f32 %1085 = OpFAdd %1082 %1084 
                                               OpStore %106 %1085 
                        Private i32* %1086 = OpAccessChain %545 %85 
                                 i32 %1087 = OpLoad %1086 
                                bool %1088 = OpINotEqual %1087 %25 
                                               OpSelectionMerge %1091 None 
                                               OpBranchConditional %1088 %1090 %1094 
                                     %1090 = OpLabel 
                        Private f32* %1092 = OpAccessChain %111 %85 
                                 f32 %1093 = OpLoad %1092 
                                               OpStore %1089 %1093 
                                               OpBranch %1091 
                                     %1094 = OpLabel 
                                 f32 %1095 = OpLoad %106 
                                               OpStore %1089 %1095 
                                               OpBranch %1091 
                                     %1091 = OpLabel 
                                 f32 %1096 = OpLoad %1089 
                        Private f32* %1097 = OpAccessChain %111 %85 
                                               OpStore %1097 %1096 
                                 f32 %1098 = OpLoad %48 
                                 f32 %1099 = OpFNegate %1098 
                                 f32 %1100 = OpFMul %1099 %412 
                        Private f32* %1101 = OpAccessChain %111 %58 
                                 f32 %1102 = OpLoad %1101 
                                 f32 %1103 = OpFAdd %1100 %1102 
                                               OpStore %106 %1103 
                        Private i32* %1104 = OpAccessChain %545 %58 
                                 i32 %1105 = OpLoad %1104 
                                bool %1106 = OpINotEqual %1105 %25 
                                               OpSelectionMerge %1109 None 
                                               OpBranchConditional %1106 %1108 %1112 
                                     %1108 = OpLabel 
                        Private f32* %1110 = OpAccessChain %111 %58 
                                 f32 %1111 = OpLoad %1110 
                                               OpStore %1107 %1111 
                                               OpBranch %1109 
                                     %1112 = OpLabel 
                                 f32 %1113 = OpLoad %106 
                                               OpStore %1107 %1113 
                                               OpBranch %1109 
                                     %1109 = OpLabel 
                                 f32 %1114 = OpLoad %1107 
                        Private f32* %1115 = OpAccessChain %111 %58 
                                               OpStore %1115 %1114 
                               f32_3 %1116 = OpLoad %111 
                               f32_4 %1117 = OpVectorShuffle %1116 %1116 0 1 0 1 
                               f32_4 %1118 = OpExtInst %1 4 %1117 
                                 f32 %1119 = OpLoad %68 
                               f32_4 %1120 = OpCompositeConstruct %1119 %1119 %1119 %1119 
                              bool_4 %1121 = OpFOrdGreaterThanEqual %1118 %1120 
                              bool_2 %1122 = OpVectorShuffle %1121 %1121 0 1 
                               u32_2 %1123 = OpSelect %1122 %557 %556 
                               u32_2 %1124 = OpCompositeConstruct %527 %527 
                               u32_2 %1125 = OpIMul %1123 %1124 
                               i32_2 %1126 = OpBitcast %1125 
                                               OpStore %545 %1126 
                        Private f32* %1127 = OpAccessChain %87 %85 
                                 f32 %1128 = OpLoad %1127 
                                 f32 %1129 = OpFNegate %1128 
                                 f32 %1130 = OpFMul %1129 %250 
                        Private f32* %1131 = OpAccessChain %226 %85 
                                 f32 %1132 = OpLoad %1131 
                                 f32 %1133 = OpFAdd %1130 %1132 
                                               OpStore %106 %1133 
                        Private i32* %1134 = OpAccessChain %545 %85 
                                 i32 %1135 = OpLoad %1134 
                                bool %1136 = OpINotEqual %1135 %25 
                                               OpSelectionMerge %1139 None 
                                               OpBranchConditional %1136 %1138 %1142 
                                     %1138 = OpLabel 
                        Private f32* %1140 = OpAccessChain %226 %85 
                                 f32 %1141 = OpLoad %1140 
                                               OpStore %1137 %1141 
                                               OpBranch %1139 
                                     %1142 = OpLabel 
                                 f32 %1143 = OpLoad %106 
                                               OpStore %1137 %1143 
                                               OpBranch %1139 
                                     %1139 = OpLabel 
                                 f32 %1144 = OpLoad %1137 
                        Private f32* %1145 = OpAccessChain %226 %85 
                                               OpStore %1145 %1144 
                        Private f32* %1146 = OpAccessChain %87 %58 
                                 f32 %1147 = OpLoad %1146 
                                 f32 %1148 = OpFNegate %1147 
                                 f32 %1149 = OpFMul %1148 %250 
                        Private f32* %1150 = OpAccessChain %226 %600 
                                 f32 %1151 = OpLoad %1150 
                                 f32 %1152 = OpFAdd %1149 %1151 
                                               OpStore %106 %1152 
                        Private i32* %1153 = OpAccessChain %545 %85 
                                 i32 %1154 = OpLoad %1153 
                                bool %1155 = OpINotEqual %1154 %25 
                                               OpSelectionMerge %1158 None 
                                               OpBranchConditional %1155 %1157 %1161 
                                     %1157 = OpLabel 
                        Private f32* %1159 = OpAccessChain %226 %600 
                                 f32 %1160 = OpLoad %1159 
                                               OpStore %1156 %1160 
                                               OpBranch %1158 
                                     %1161 = OpLabel 
                                 f32 %1162 = OpLoad %106 
                                               OpStore %1156 %1162 
                                               OpBranch %1158 
                                     %1158 = OpLabel 
                                 f32 %1163 = OpLoad %1156 
                        Private f32* %1164 = OpAccessChain %226 %600 
                                               OpStore %1164 %1163 
                               i32_2 %1165 = OpLoad %545 
                               i32_2 %1166 = OpNot %1165 
                                               OpStore %794 %1166 
                        Private i32* %1167 = OpAccessChain %794 %58 
                                 i32 %1168 = OpLoad %1167 
                                 u32 %1169 = OpBitcast %1168 
                        Private i32* %1170 = OpAccessChain %794 %85 
                                 i32 %1171 = OpLoad %1170 
                                 u32 %1172 = OpBitcast %1171 
                                 u32 %1173 = OpBitwiseOr %1169 %1172 
                                 i32 %1174 = OpBitcast %1173 
                                               OpStore %609 %1174 
                        Private f32* %1175 = OpAccessChain %87 %85 
                                 f32 %1176 = OpLoad %1175 
                                 f32 %1177 = OpFMul %1176 %250 
                        Private f32* %1178 = OpAccessChain %618 %85 
                                 f32 %1179 = OpLoad %1178 
                                 f32 %1180 = OpFAdd %1177 %1179 
                        Private f32* %1181 = OpAccessChain %449 %85 
                                               OpStore %1181 %1180 
                        Private i32* %1182 = OpAccessChain %545 %58 
                                 i32 %1183 = OpLoad %1182 
                                bool %1184 = OpINotEqual %1183 %25 
                                               OpSelectionMerge %1187 None 
                                               OpBranchConditional %1184 %1186 %1190 
                                     %1186 = OpLabel 
                        Private f32* %1188 = OpAccessChain %618 %85 
                                 f32 %1189 = OpLoad %1188 
                                               OpStore %1185 %1189 
                                               OpBranch %1187 
                                     %1190 = OpLabel 
                        Private f32* %1191 = OpAccessChain %449 %85 
                                 f32 %1192 = OpLoad %1191 
                                               OpStore %1185 %1192 
                                               OpBranch %1187 
                                     %1187 = OpLabel 
                                 f32 %1193 = OpLoad %1185 
                        Private f32* %1194 = OpAccessChain %618 %85 
                                               OpStore %1194 %1193 
                        Private f32* %1195 = OpAccessChain %87 %58 
                                 f32 %1196 = OpLoad %1195 
                                 f32 %1197 = OpFMul %1196 %250 
                        Private f32* %1198 = OpAccessChain %618 %600 
                                 f32 %1199 = OpLoad %1198 
                                 f32 %1200 = OpFAdd %1197 %1199 
                        Private f32* %1201 = OpAccessChain %449 %85 
                                               OpStore %1201 %1200 
                        Private i32* %1202 = OpAccessChain %545 %58 
                                 i32 %1203 = OpLoad %1202 
                                bool %1204 = OpINotEqual %1203 %25 
                                               OpSelectionMerge %1207 None 
                                               OpBranchConditional %1204 %1206 %1210 
                                     %1206 = OpLabel 
                        Private f32* %1208 = OpAccessChain %618 %600 
                                 f32 %1209 = OpLoad %1208 
                                               OpStore %1205 %1209 
                                               OpBranch %1207 
                                     %1210 = OpLabel 
                        Private f32* %1211 = OpAccessChain %449 %85 
                                 f32 %1212 = OpLoad %1211 
                                               OpStore %1205 %1212 
                                               OpBranch %1207 
                                     %1207 = OpLabel 
                                 f32 %1213 = OpLoad %1205 
                        Private f32* %1214 = OpAccessChain %618 %600 
                                               OpStore %1214 %1213 
                                 i32 %1215 = OpLoad %609 
                                bool %1216 = OpINotEqual %1215 %25 
                                               OpSelectionMerge %1218 None 
                                               OpBranchConditional %1216 %1217 %1218 
                                     %1217 = OpLabel 
                        Private i32* %1219 = OpAccessChain %545 %85 
                                 i32 %1220 = OpLoad %1219 
                                bool %1221 = OpIEqual %1220 %25 
                                               OpSelectionMerge %1223 None 
                                               OpBranchConditional %1221 %1222 %1223 
                                     %1222 = OpLabel 
                               f32_3 %1224 = OpLoad %226 
                               f32_2 %1225 = OpVectorShuffle %1224 %1224 0 2 
                                               OpStore %449 %1225 
                               f32_2 %1226 = OpLoad %449 
                               f32_2 %1227 = OpCompositeConstruct %14 %14 
                               f32_2 %1228 = OpCompositeConstruct %15 %15 
                               f32_2 %1229 = OpExtInst %1 43 %1226 %1227 %1228 
                                               OpStore %449 %1229 
                               f32_2 %1230 = OpLoad %449 
                        Uniform f32* %1231 = OpAccessChain %23 %25 
                                 f32 %1232 = OpLoad %1231 
                               f32_2 %1233 = OpCompositeConstruct %1232 %1232 
                               f32_2 %1234 = OpFMul %1230 %1233 
                                               OpStore %449 %1234 
                 read_only Texture2D %1235 = OpLoad %36 
                             sampler %1236 = OpLoad %40 
          read_only Texture2DSampled %1237 = OpSampledImage %1235 %1236 
                               f32_2 %1238 = OpLoad %449 
                               f32_4 %1239 = OpImageSampleExplicitLod %1237 %1238 Lod %20 
                                 f32 %1240 = OpCompositeExtract %1239 1 
                        Private f32* %1241 = OpAccessChain %111 %85 
                                               OpStore %1241 %1240 
                                               OpBranch %1223 
                                     %1223 = OpLabel 
                        Private i32* %1242 = OpAccessChain %545 %58 
                                 i32 %1243 = OpLoad %1242 
                                bool %1244 = OpIEqual %1243 %25 
                                               OpSelectionMerge %1246 None 
                                               OpBranchConditional %1244 %1245 %1246 
                                     %1245 = OpLabel 
                               f32_3 %1247 = OpLoad %618 
                               f32_2 %1248 = OpVectorShuffle %1247 %1247 0 2 
                                               OpStore %449 %1248 
                               f32_2 %1249 = OpLoad %449 
                               f32_2 %1250 = OpCompositeConstruct %14 %14 
                               f32_2 %1251 = OpCompositeConstruct %15 %15 
                               f32_2 %1252 = OpExtInst %1 43 %1249 %1250 %1251 
                                               OpStore %449 %1252 
                               f32_2 %1253 = OpLoad %449 
                        Uniform f32* %1254 = OpAccessChain %23 %25 
                                 f32 %1255 = OpLoad %1254 
                               f32_2 %1256 = OpCompositeConstruct %1255 %1255 
                               f32_2 %1257 = OpFMul %1253 %1256 
                                               OpStore %449 %1257 
                 read_only Texture2D %1258 = OpLoad %36 
                             sampler %1259 = OpLoad %40 
          read_only Texture2DSampled %1260 = OpSampledImage %1258 %1259 
                               f32_2 %1261 = OpLoad %449 
                               f32_4 %1262 = OpImageSampleExplicitLod %1260 %1261 Lod %20 
                                 f32 %1263 = OpCompositeExtract %1262 1 
                        Private f32* %1264 = OpAccessChain %111 %58 
                                               OpStore %1264 %1263 
                                               OpBranch %1246 
                                     %1246 = OpLabel 
                                 f32 %1265 = OpLoad %48 
                                 f32 %1266 = OpFNegate %1265 
                                 f32 %1267 = OpFMul %1266 %412 
                        Private f32* %1268 = OpAccessChain %111 %85 
                                 f32 %1269 = OpLoad %1268 
                                 f32 %1270 = OpFAdd %1267 %1269 
                                               OpStore %106 %1270 
                        Private i32* %1271 = OpAccessChain %545 %85 
                                 i32 %1272 = OpLoad %1271 
                                bool %1273 = OpINotEqual %1272 %25 
                                               OpSelectionMerge %1276 None 
                                               OpBranchConditional %1273 %1275 %1279 
                                     %1275 = OpLabel 
                        Private f32* %1277 = OpAccessChain %111 %85 
                                 f32 %1278 = OpLoad %1277 
                                               OpStore %1274 %1278 
                                               OpBranch %1276 
                                     %1279 = OpLabel 
                                 f32 %1280 = OpLoad %106 
                                               OpStore %1274 %1280 
                                               OpBranch %1276 
                                     %1276 = OpLabel 
                                 f32 %1281 = OpLoad %1274 
                        Private f32* %1282 = OpAccessChain %111 %85 
                                               OpStore %1282 %1281 
                                 f32 %1283 = OpLoad %48 
                                 f32 %1284 = OpFNegate %1283 
                                 f32 %1285 = OpFMul %1284 %412 
                        Private f32* %1286 = OpAccessChain %111 %58 
                                 f32 %1287 = OpLoad %1286 
                                 f32 %1288 = OpFAdd %1285 %1287 
                                               OpStore %106 %1288 
                        Private i32* %1289 = OpAccessChain %545 %58 
                                 i32 %1290 = OpLoad %1289 
                                bool %1291 = OpINotEqual %1290 %25 
                                               OpSelectionMerge %1294 None 
                                               OpBranchConditional %1291 %1293 %1297 
                                     %1293 = OpLabel 
                        Private f32* %1295 = OpAccessChain %111 %58 
                                 f32 %1296 = OpLoad %1295 
                                               OpStore %1292 %1296 
                                               OpBranch %1294 
                                     %1297 = OpLabel 
                                 f32 %1298 = OpLoad %106 
                                               OpStore %1292 %1298 
                                               OpBranch %1294 
                                     %1294 = OpLabel 
                                 f32 %1299 = OpLoad %1292 
                        Private f32* %1300 = OpAccessChain %111 %58 
                                               OpStore %1300 %1299 
                               f32_3 %1301 = OpLoad %111 
                               f32_4 %1302 = OpVectorShuffle %1301 %1301 0 1 0 1 
                               f32_4 %1303 = OpExtInst %1 4 %1302 
                                 f32 %1304 = OpLoad %68 
                               f32_4 %1305 = OpCompositeConstruct %1304 %1304 %1304 %1304 
                              bool_4 %1306 = OpFOrdGreaterThanEqual %1303 %1305 
                              bool_2 %1307 = OpVectorShuffle %1306 %1306 0 1 
                               u32_2 %1308 = OpSelect %1307 %557 %556 
                               u32_2 %1309 = OpCompositeConstruct %527 %527 
                               u32_2 %1310 = OpIMul %1308 %1309 
                               i32_2 %1311 = OpBitcast %1310 
                                               OpStore %545 %1311 
                        Private f32* %1312 = OpAccessChain %87 %85 
                                 f32 %1313 = OpLoad %1312 
                                 f32 %1314 = OpFNegate %1313 
                                 f32 %1315 = OpFMul %1314 %250 
                        Private f32* %1316 = OpAccessChain %226 %85 
                                 f32 %1317 = OpLoad %1316 
                                 f32 %1318 = OpFAdd %1315 %1317 
                                               OpStore %106 %1318 
                        Private i32* %1319 = OpAccessChain %545 %85 
                                 i32 %1320 = OpLoad %1319 
                                bool %1321 = OpINotEqual %1320 %25 
                                               OpSelectionMerge %1324 None 
                                               OpBranchConditional %1321 %1323 %1327 
                                     %1323 = OpLabel 
                        Private f32* %1325 = OpAccessChain %226 %85 
                                 f32 %1326 = OpLoad %1325 
                                               OpStore %1322 %1326 
                                               OpBranch %1324 
                                     %1327 = OpLabel 
                                 f32 %1328 = OpLoad %106 
                                               OpStore %1322 %1328 
                                               OpBranch %1324 
                                     %1324 = OpLabel 
                                 f32 %1329 = OpLoad %1322 
                        Private f32* %1330 = OpAccessChain %226 %85 
                                               OpStore %1330 %1329 
                        Private f32* %1331 = OpAccessChain %87 %58 
                                 f32 %1332 = OpLoad %1331 
                                 f32 %1333 = OpFNegate %1332 
                                 f32 %1334 = OpFMul %1333 %250 
                        Private f32* %1335 = OpAccessChain %226 %600 
                                 f32 %1336 = OpLoad %1335 
                                 f32 %1337 = OpFAdd %1334 %1336 
                                               OpStore %106 %1337 
                        Private i32* %1338 = OpAccessChain %545 %85 
                                 i32 %1339 = OpLoad %1338 
                                bool %1340 = OpINotEqual %1339 %25 
                                               OpSelectionMerge %1343 None 
                                               OpBranchConditional %1340 %1342 %1346 
                                     %1342 = OpLabel 
                        Private f32* %1344 = OpAccessChain %226 %600 
                                 f32 %1345 = OpLoad %1344 
                                               OpStore %1341 %1345 
                                               OpBranch %1343 
                                     %1346 = OpLabel 
                                 f32 %1347 = OpLoad %106 
                                               OpStore %1341 %1347 
                                               OpBranch %1343 
                                     %1343 = OpLabel 
                                 f32 %1348 = OpLoad %1341 
                        Private f32* %1349 = OpAccessChain %226 %600 
                                               OpStore %1349 %1348 
                               i32_2 %1350 = OpLoad %545 
                               i32_2 %1351 = OpNot %1350 
                                               OpStore %794 %1351 
                        Private i32* %1352 = OpAccessChain %794 %58 
                                 i32 %1353 = OpLoad %1352 
                                 u32 %1354 = OpBitcast %1353 
                        Private i32* %1355 = OpAccessChain %794 %85 
                                 i32 %1356 = OpLoad %1355 
                                 u32 %1357 = OpBitcast %1356 
                                 u32 %1358 = OpBitwiseOr %1354 %1357 
                                 i32 %1359 = OpBitcast %1358 
                                               OpStore %609 %1359 
                        Private f32* %1360 = OpAccessChain %87 %85 
                                 f32 %1361 = OpLoad %1360 
                                 f32 %1362 = OpFMul %1361 %250 
                        Private f32* %1363 = OpAccessChain %618 %85 
                                 f32 %1364 = OpLoad %1363 
                                 f32 %1365 = OpFAdd %1362 %1364 
                        Private f32* %1366 = OpAccessChain %449 %85 
                                               OpStore %1366 %1365 
                        Private i32* %1367 = OpAccessChain %545 %58 
                                 i32 %1368 = OpLoad %1367 
                                bool %1369 = OpINotEqual %1368 %25 
                                               OpSelectionMerge %1372 None 
                                               OpBranchConditional %1369 %1371 %1375 
                                     %1371 = OpLabel 
                        Private f32* %1373 = OpAccessChain %618 %85 
                                 f32 %1374 = OpLoad %1373 
                                               OpStore %1370 %1374 
                                               OpBranch %1372 
                                     %1375 = OpLabel 
                        Private f32* %1376 = OpAccessChain %449 %85 
                                 f32 %1377 = OpLoad %1376 
                                               OpStore %1370 %1377 
                                               OpBranch %1372 
                                     %1372 = OpLabel 
                                 f32 %1378 = OpLoad %1370 
                        Private f32* %1379 = OpAccessChain %618 %85 
                                               OpStore %1379 %1378 
                        Private f32* %1380 = OpAccessChain %87 %58 
                                 f32 %1381 = OpLoad %1380 
                                 f32 %1382 = OpFMul %1381 %250 
                        Private f32* %1383 = OpAccessChain %618 %600 
                                 f32 %1384 = OpLoad %1383 
                                 f32 %1385 = OpFAdd %1382 %1384 
                        Private f32* %1386 = OpAccessChain %449 %85 
                                               OpStore %1386 %1385 
                        Private i32* %1387 = OpAccessChain %545 %58 
                                 i32 %1388 = OpLoad %1387 
                                bool %1389 = OpINotEqual %1388 %25 
                                               OpSelectionMerge %1392 None 
                                               OpBranchConditional %1389 %1391 %1395 
                                     %1391 = OpLabel 
                        Private f32* %1393 = OpAccessChain %618 %600 
                                 f32 %1394 = OpLoad %1393 
                                               OpStore %1390 %1394 
                                               OpBranch %1392 
                                     %1395 = OpLabel 
                        Private f32* %1396 = OpAccessChain %449 %85 
                                 f32 %1397 = OpLoad %1396 
                                               OpStore %1390 %1397 
                                               OpBranch %1392 
                                     %1392 = OpLabel 
                                 f32 %1398 = OpLoad %1390 
                        Private f32* %1399 = OpAccessChain %618 %600 
                                               OpStore %1399 %1398 
                                 i32 %1400 = OpLoad %609 
                                bool %1401 = OpINotEqual %1400 %25 
                                               OpSelectionMerge %1403 None 
                                               OpBranchConditional %1401 %1402 %1403 
                                     %1402 = OpLabel 
                        Private i32* %1404 = OpAccessChain %545 %85 
                                 i32 %1405 = OpLoad %1404 
                                bool %1406 = OpIEqual %1405 %25 
                                               OpSelectionMerge %1408 None 
                                               OpBranchConditional %1406 %1407 %1408 
                                     %1407 = OpLabel 
                               f32_3 %1409 = OpLoad %226 
                               f32_2 %1410 = OpVectorShuffle %1409 %1409 0 2 
                                               OpStore %449 %1410 
                               f32_2 %1411 = OpLoad %449 
                               f32_2 %1412 = OpCompositeConstruct %14 %14 
                               f32_2 %1413 = OpCompositeConstruct %15 %15 
                               f32_2 %1414 = OpExtInst %1 43 %1411 %1412 %1413 
                                               OpStore %449 %1414 
                               f32_2 %1415 = OpLoad %449 
                        Uniform f32* %1416 = OpAccessChain %23 %25 
                                 f32 %1417 = OpLoad %1416 
                               f32_2 %1418 = OpCompositeConstruct %1417 %1417 
                               f32_2 %1419 = OpFMul %1415 %1418 
                                               OpStore %449 %1419 
                 read_only Texture2D %1420 = OpLoad %36 
                             sampler %1421 = OpLoad %40 
          read_only Texture2DSampled %1422 = OpSampledImage %1420 %1421 
                               f32_2 %1423 = OpLoad %449 
                               f32_4 %1424 = OpImageSampleExplicitLod %1422 %1423 Lod %20 
                                 f32 %1425 = OpCompositeExtract %1424 1 
                        Private f32* %1426 = OpAccessChain %111 %85 
                                               OpStore %1426 %1425 
                                               OpBranch %1408 
                                     %1408 = OpLabel 
                        Private i32* %1427 = OpAccessChain %545 %58 
                                 i32 %1428 = OpLoad %1427 
                                bool %1429 = OpIEqual %1428 %25 
                                               OpSelectionMerge %1431 None 
                                               OpBranchConditional %1429 %1430 %1431 
                                     %1430 = OpLabel 
                               f32_3 %1432 = OpLoad %618 
                               f32_2 %1433 = OpVectorShuffle %1432 %1432 0 2 
                                               OpStore %449 %1433 
                               f32_2 %1434 = OpLoad %449 
                               f32_2 %1435 = OpCompositeConstruct %14 %14 
                               f32_2 %1436 = OpCompositeConstruct %15 %15 
                               f32_2 %1437 = OpExtInst %1 43 %1434 %1435 %1436 
                                               OpStore %449 %1437 
                               f32_2 %1438 = OpLoad %449 
                        Uniform f32* %1439 = OpAccessChain %23 %25 
                                 f32 %1440 = OpLoad %1439 
                               f32_2 %1441 = OpCompositeConstruct %1440 %1440 
                               f32_2 %1442 = OpFMul %1438 %1441 
                                               OpStore %449 %1442 
                 read_only Texture2D %1443 = OpLoad %36 
                             sampler %1444 = OpLoad %40 
          read_only Texture2DSampled %1445 = OpSampledImage %1443 %1444 
                               f32_2 %1446 = OpLoad %449 
                               f32_4 %1447 = OpImageSampleExplicitLod %1445 %1446 Lod %20 
                                 f32 %1448 = OpCompositeExtract %1447 1 
                        Private f32* %1449 = OpAccessChain %111 %58 
                                               OpStore %1449 %1448 
                                               OpBranch %1431 
                                     %1431 = OpLabel 
                                 f32 %1450 = OpLoad %48 
                                 f32 %1451 = OpFNegate %1450 
                                 f32 %1452 = OpFMul %1451 %412 
                        Private f32* %1453 = OpAccessChain %111 %85 
                                 f32 %1454 = OpLoad %1453 
                                 f32 %1455 = OpFAdd %1452 %1454 
                                               OpStore %106 %1455 
                        Private i32* %1456 = OpAccessChain %545 %85 
                                 i32 %1457 = OpLoad %1456 
                                bool %1458 = OpINotEqual %1457 %25 
                                               OpSelectionMerge %1461 None 
                                               OpBranchConditional %1458 %1460 %1464 
                                     %1460 = OpLabel 
                        Private f32* %1462 = OpAccessChain %111 %85 
                                 f32 %1463 = OpLoad %1462 
                                               OpStore %1459 %1463 
                                               OpBranch %1461 
                                     %1464 = OpLabel 
                                 f32 %1465 = OpLoad %106 
                                               OpStore %1459 %1465 
                                               OpBranch %1461 
                                     %1461 = OpLabel 
                                 f32 %1466 = OpLoad %1459 
                        Private f32* %1467 = OpAccessChain %111 %85 
                                               OpStore %1467 %1466 
                                 f32 %1468 = OpLoad %48 
                                 f32 %1469 = OpFNegate %1468 
                                 f32 %1470 = OpFMul %1469 %412 
                        Private f32* %1471 = OpAccessChain %111 %58 
                                 f32 %1472 = OpLoad %1471 
                                 f32 %1473 = OpFAdd %1470 %1472 
                                               OpStore %106 %1473 
                        Private i32* %1474 = OpAccessChain %545 %58 
                                 i32 %1475 = OpLoad %1474 
                                bool %1476 = OpINotEqual %1475 %25 
                                               OpSelectionMerge %1479 None 
                                               OpBranchConditional %1476 %1478 %1482 
                                     %1478 = OpLabel 
                        Private f32* %1480 = OpAccessChain %111 %58 
                                 f32 %1481 = OpLoad %1480 
                                               OpStore %1477 %1481 
                                               OpBranch %1479 
                                     %1482 = OpLabel 
                                 f32 %1483 = OpLoad %106 
                                               OpStore %1477 %1483 
                                               OpBranch %1479 
                                     %1479 = OpLabel 
                                 f32 %1484 = OpLoad %1477 
                        Private f32* %1485 = OpAccessChain %111 %58 
                                               OpStore %1485 %1484 
                               f32_3 %1486 = OpLoad %111 
                               f32_4 %1487 = OpVectorShuffle %1486 %1486 0 1 0 1 
                               f32_4 %1488 = OpExtInst %1 4 %1487 
                                 f32 %1489 = OpLoad %68 
                               f32_4 %1490 = OpCompositeConstruct %1489 %1489 %1489 %1489 
                              bool_4 %1491 = OpFOrdGreaterThanEqual %1488 %1490 
                              bool_2 %1492 = OpVectorShuffle %1491 %1491 0 1 
                               u32_2 %1493 = OpSelect %1492 %557 %556 
                               u32_2 %1494 = OpCompositeConstruct %527 %527 
                               u32_2 %1495 = OpIMul %1493 %1494 
                               i32_2 %1496 = OpBitcast %1495 
                                               OpStore %545 %1496 
                        Private f32* %1497 = OpAccessChain %87 %85 
                                 f32 %1498 = OpLoad %1497 
                                 f32 %1499 = OpFNegate %1498 
                                 f32 %1500 = OpFMul %1499 %250 
                        Private f32* %1501 = OpAccessChain %226 %85 
                                 f32 %1502 = OpLoad %1501 
                                 f32 %1503 = OpFAdd %1500 %1502 
                                               OpStore %106 %1503 
                        Private i32* %1504 = OpAccessChain %545 %85 
                                 i32 %1505 = OpLoad %1504 
                                bool %1506 = OpINotEqual %1505 %25 
                                               OpSelectionMerge %1509 None 
                                               OpBranchConditional %1506 %1508 %1512 
                                     %1508 = OpLabel 
                        Private f32* %1510 = OpAccessChain %226 %85 
                                 f32 %1511 = OpLoad %1510 
                                               OpStore %1507 %1511 
                                               OpBranch %1509 
                                     %1512 = OpLabel 
                                 f32 %1513 = OpLoad %106 
                                               OpStore %1507 %1513 
                                               OpBranch %1509 
                                     %1509 = OpLabel 
                                 f32 %1514 = OpLoad %1507 
                        Private f32* %1515 = OpAccessChain %226 %85 
                                               OpStore %1515 %1514 
                        Private f32* %1516 = OpAccessChain %87 %58 
                                 f32 %1517 = OpLoad %1516 
                                 f32 %1518 = OpFNegate %1517 
                                 f32 %1519 = OpFMul %1518 %250 
                        Private f32* %1520 = OpAccessChain %226 %600 
                                 f32 %1521 = OpLoad %1520 
                                 f32 %1522 = OpFAdd %1519 %1521 
                                               OpStore %106 %1522 
                        Private i32* %1523 = OpAccessChain %545 %85 
                                 i32 %1524 = OpLoad %1523 
                                bool %1525 = OpINotEqual %1524 %25 
                                               OpSelectionMerge %1528 None 
                                               OpBranchConditional %1525 %1527 %1531 
                                     %1527 = OpLabel 
                        Private f32* %1529 = OpAccessChain %226 %600 
                                 f32 %1530 = OpLoad %1529 
                                               OpStore %1526 %1530 
                                               OpBranch %1528 
                                     %1531 = OpLabel 
                                 f32 %1532 = OpLoad %106 
                                               OpStore %1526 %1532 
                                               OpBranch %1528 
                                     %1528 = OpLabel 
                                 f32 %1533 = OpLoad %1526 
                        Private f32* %1534 = OpAccessChain %226 %600 
                                               OpStore %1534 %1533 
                               i32_2 %1535 = OpLoad %545 
                               i32_2 %1536 = OpNot %1535 
                                               OpStore %794 %1536 
                        Private i32* %1537 = OpAccessChain %794 %58 
                                 i32 %1538 = OpLoad %1537 
                                 u32 %1539 = OpBitcast %1538 
                        Private i32* %1540 = OpAccessChain %794 %85 
                                 i32 %1541 = OpLoad %1540 
                                 u32 %1542 = OpBitcast %1541 
                                 u32 %1543 = OpBitwiseOr %1539 %1542 
                                 i32 %1544 = OpBitcast %1543 
                                               OpStore %609 %1544 
                        Private f32* %1545 = OpAccessChain %87 %85 
                                 f32 %1546 = OpLoad %1545 
                                 f32 %1547 = OpFMul %1546 %250 
                        Private f32* %1548 = OpAccessChain %618 %85 
                                 f32 %1549 = OpLoad %1548 
                                 f32 %1550 = OpFAdd %1547 %1549 
                        Private f32* %1551 = OpAccessChain %449 %85 
                                               OpStore %1551 %1550 
                        Private i32* %1552 = OpAccessChain %545 %58 
                                 i32 %1553 = OpLoad %1552 
                                bool %1554 = OpINotEqual %1553 %25 
                                               OpSelectionMerge %1557 None 
                                               OpBranchConditional %1554 %1556 %1560 
                                     %1556 = OpLabel 
                        Private f32* %1558 = OpAccessChain %618 %85 
                                 f32 %1559 = OpLoad %1558 
                                               OpStore %1555 %1559 
                                               OpBranch %1557 
                                     %1560 = OpLabel 
                        Private f32* %1561 = OpAccessChain %449 %85 
                                 f32 %1562 = OpLoad %1561 
                                               OpStore %1555 %1562 
                                               OpBranch %1557 
                                     %1557 = OpLabel 
                                 f32 %1563 = OpLoad %1555 
                        Private f32* %1564 = OpAccessChain %618 %85 
                                               OpStore %1564 %1563 
                        Private f32* %1565 = OpAccessChain %87 %58 
                                 f32 %1566 = OpLoad %1565 
                                 f32 %1567 = OpFMul %1566 %250 
                        Private f32* %1568 = OpAccessChain %618 %600 
                                 f32 %1569 = OpLoad %1568 
                                 f32 %1570 = OpFAdd %1567 %1569 
                        Private f32* %1571 = OpAccessChain %449 %85 
                                               OpStore %1571 %1570 
                        Private i32* %1572 = OpAccessChain %545 %58 
                                 i32 %1573 = OpLoad %1572 
                                bool %1574 = OpINotEqual %1573 %25 
                                               OpSelectionMerge %1577 None 
                                               OpBranchConditional %1574 %1576 %1580 
                                     %1576 = OpLabel 
                        Private f32* %1578 = OpAccessChain %618 %600 
                                 f32 %1579 = OpLoad %1578 
                                               OpStore %1575 %1579 
                                               OpBranch %1577 
                                     %1580 = OpLabel 
                        Private f32* %1581 = OpAccessChain %449 %85 
                                 f32 %1582 = OpLoad %1581 
                                               OpStore %1575 %1582 
                                               OpBranch %1577 
                                     %1577 = OpLabel 
                                 f32 %1583 = OpLoad %1575 
                        Private f32* %1584 = OpAccessChain %618 %600 
                                               OpStore %1584 %1583 
                                 i32 %1585 = OpLoad %609 
                                bool %1586 = OpINotEqual %1585 %25 
                                               OpSelectionMerge %1588 None 
                                               OpBranchConditional %1586 %1587 %1588 
                                     %1587 = OpLabel 
                        Private i32* %1589 = OpAccessChain %545 %85 
                                 i32 %1590 = OpLoad %1589 
                                bool %1591 = OpIEqual %1590 %25 
                                               OpSelectionMerge %1593 None 
                                               OpBranchConditional %1591 %1592 %1593 
                                     %1592 = OpLabel 
                               f32_3 %1594 = OpLoad %226 
                               f32_2 %1595 = OpVectorShuffle %1594 %1594 0 2 
                                               OpStore %449 %1595 
                               f32_2 %1596 = OpLoad %449 
                               f32_2 %1597 = OpCompositeConstruct %14 %14 
                               f32_2 %1598 = OpCompositeConstruct %15 %15 
                               f32_2 %1599 = OpExtInst %1 43 %1596 %1597 %1598 
                                               OpStore %449 %1599 
                               f32_2 %1600 = OpLoad %449 
                        Uniform f32* %1601 = OpAccessChain %23 %25 
                                 f32 %1602 = OpLoad %1601 
                               f32_2 %1603 = OpCompositeConstruct %1602 %1602 
                               f32_2 %1604 = OpFMul %1600 %1603 
                                               OpStore %449 %1604 
                 read_only Texture2D %1605 = OpLoad %36 
                             sampler %1606 = OpLoad %40 
          read_only Texture2DSampled %1607 = OpSampledImage %1605 %1606 
                               f32_2 %1608 = OpLoad %449 
                               f32_4 %1609 = OpImageSampleExplicitLod %1607 %1608 Lod %20 
                                 f32 %1610 = OpCompositeExtract %1609 1 
                        Private f32* %1611 = OpAccessChain %111 %85 
                                               OpStore %1611 %1610 
                                               OpBranch %1593 
                                     %1593 = OpLabel 
                        Private i32* %1612 = OpAccessChain %545 %58 
                                 i32 %1613 = OpLoad %1612 
                                bool %1614 = OpIEqual %1613 %25 
                                               OpSelectionMerge %1616 None 
                                               OpBranchConditional %1614 %1615 %1616 
                                     %1615 = OpLabel 
                               f32_3 %1617 = OpLoad %618 
                               f32_2 %1618 = OpVectorShuffle %1617 %1617 0 2 
                                               OpStore %449 %1618 
                               f32_2 %1619 = OpLoad %449 
                               f32_2 %1620 = OpCompositeConstruct %14 %14 
                               f32_2 %1621 = OpCompositeConstruct %15 %15 
                               f32_2 %1622 = OpExtInst %1 43 %1619 %1620 %1621 
                                               OpStore %449 %1622 
                               f32_2 %1623 = OpLoad %449 
                        Uniform f32* %1624 = OpAccessChain %23 %25 
                                 f32 %1625 = OpLoad %1624 
                               f32_2 %1626 = OpCompositeConstruct %1625 %1625 
                               f32_2 %1627 = OpFMul %1623 %1626 
                                               OpStore %449 %1627 
                 read_only Texture2D %1628 = OpLoad %36 
                             sampler %1629 = OpLoad %40 
          read_only Texture2DSampled %1630 = OpSampledImage %1628 %1629 
                               f32_2 %1631 = OpLoad %449 
                               f32_4 %1632 = OpImageSampleExplicitLod %1630 %1631 Lod %20 
                                 f32 %1633 = OpCompositeExtract %1632 1 
                        Private f32* %1634 = OpAccessChain %111 %58 
                                               OpStore %1634 %1633 
                                               OpBranch %1616 
                                     %1616 = OpLabel 
                                 f32 %1635 = OpLoad %48 
                                 f32 %1636 = OpFNegate %1635 
                                 f32 %1637 = OpFMul %1636 %412 
                        Private f32* %1638 = OpAccessChain %111 %85 
                                 f32 %1639 = OpLoad %1638 
                                 f32 %1640 = OpFAdd %1637 %1639 
                                               OpStore %106 %1640 
                        Private i32* %1641 = OpAccessChain %545 %85 
                                 i32 %1642 = OpLoad %1641 
                                bool %1643 = OpINotEqual %1642 %25 
                                               OpSelectionMerge %1646 None 
                                               OpBranchConditional %1643 %1645 %1649 
                                     %1645 = OpLabel 
                        Private f32* %1647 = OpAccessChain %111 %85 
                                 f32 %1648 = OpLoad %1647 
                                               OpStore %1644 %1648 
                                               OpBranch %1646 
                                     %1649 = OpLabel 
                                 f32 %1650 = OpLoad %106 
                                               OpStore %1644 %1650 
                                               OpBranch %1646 
                                     %1646 = OpLabel 
                                 f32 %1651 = OpLoad %1644 
                        Private f32* %1652 = OpAccessChain %111 %85 
                                               OpStore %1652 %1651 
                                 f32 %1653 = OpLoad %48 
                                 f32 %1654 = OpFNegate %1653 
                                 f32 %1655 = OpFMul %1654 %412 
                        Private f32* %1656 = OpAccessChain %111 %58 
                                 f32 %1657 = OpLoad %1656 
                                 f32 %1658 = OpFAdd %1655 %1657 
                                               OpStore %106 %1658 
                        Private i32* %1659 = OpAccessChain %545 %58 
                                 i32 %1660 = OpLoad %1659 
                                bool %1661 = OpINotEqual %1660 %25 
                                               OpSelectionMerge %1664 None 
                                               OpBranchConditional %1661 %1663 %1667 
                                     %1663 = OpLabel 
                        Private f32* %1665 = OpAccessChain %111 %58 
                                 f32 %1666 = OpLoad %1665 
                                               OpStore %1662 %1666 
                                               OpBranch %1664 
                                     %1667 = OpLabel 
                                 f32 %1668 = OpLoad %106 
                                               OpStore %1662 %1668 
                                               OpBranch %1664 
                                     %1664 = OpLabel 
                                 f32 %1669 = OpLoad %1662 
                        Private f32* %1670 = OpAccessChain %111 %58 
                                               OpStore %1670 %1669 
                               f32_3 %1671 = OpLoad %111 
                               f32_4 %1672 = OpVectorShuffle %1671 %1671 0 1 0 1 
                               f32_4 %1673 = OpExtInst %1 4 %1672 
                                 f32 %1674 = OpLoad %68 
                               f32_4 %1675 = OpCompositeConstruct %1674 %1674 %1674 %1674 
                              bool_4 %1676 = OpFOrdGreaterThanEqual %1673 %1675 
                              bool_2 %1677 = OpVectorShuffle %1676 %1676 0 1 
                               u32_2 %1678 = OpSelect %1677 %557 %556 
                               u32_2 %1679 = OpCompositeConstruct %527 %527 
                               u32_2 %1680 = OpIMul %1678 %1679 
                               i32_2 %1681 = OpBitcast %1680 
                                               OpStore %545 %1681 
                        Private f32* %1682 = OpAccessChain %87 %85 
                                 f32 %1683 = OpLoad %1682 
                                 f32 %1684 = OpFNegate %1683 
                                 f32 %1685 = OpFMul %1684 %250 
                        Private f32* %1686 = OpAccessChain %226 %85 
                                 f32 %1687 = OpLoad %1686 
                                 f32 %1688 = OpFAdd %1685 %1687 
                                               OpStore %106 %1688 
                        Private i32* %1689 = OpAccessChain %545 %85 
                                 i32 %1690 = OpLoad %1689 
                                bool %1691 = OpINotEqual %1690 %25 
                                               OpSelectionMerge %1694 None 
                                               OpBranchConditional %1691 %1693 %1697 
                                     %1693 = OpLabel 
                        Private f32* %1695 = OpAccessChain %226 %85 
                                 f32 %1696 = OpLoad %1695 
                                               OpStore %1692 %1696 
                                               OpBranch %1694 
                                     %1697 = OpLabel 
                                 f32 %1698 = OpLoad %106 
                                               OpStore %1692 %1698 
                                               OpBranch %1694 
                                     %1694 = OpLabel 
                                 f32 %1699 = OpLoad %1692 
                        Private f32* %1700 = OpAccessChain %226 %85 
                                               OpStore %1700 %1699 
                        Private f32* %1701 = OpAccessChain %87 %58 
                                 f32 %1702 = OpLoad %1701 
                                 f32 %1703 = OpFNegate %1702 
                                 f32 %1704 = OpFMul %1703 %250 
                        Private f32* %1705 = OpAccessChain %226 %600 
                                 f32 %1706 = OpLoad %1705 
                                 f32 %1707 = OpFAdd %1704 %1706 
                                               OpStore %106 %1707 
                        Private i32* %1708 = OpAccessChain %545 %85 
                                 i32 %1709 = OpLoad %1708 
                                bool %1710 = OpINotEqual %1709 %25 
                                               OpSelectionMerge %1713 None 
                                               OpBranchConditional %1710 %1712 %1716 
                                     %1712 = OpLabel 
                        Private f32* %1714 = OpAccessChain %226 %600 
                                 f32 %1715 = OpLoad %1714 
                                               OpStore %1711 %1715 
                                               OpBranch %1713 
                                     %1716 = OpLabel 
                                 f32 %1717 = OpLoad %106 
                                               OpStore %1711 %1717 
                                               OpBranch %1713 
                                     %1713 = OpLabel 
                                 f32 %1718 = OpLoad %1711 
                        Private f32* %1719 = OpAccessChain %226 %600 
                                               OpStore %1719 %1718 
                               i32_2 %1720 = OpLoad %545 
                               i32_2 %1721 = OpNot %1720 
                                               OpStore %794 %1721 
                        Private i32* %1722 = OpAccessChain %794 %58 
                                 i32 %1723 = OpLoad %1722 
                                 u32 %1724 = OpBitcast %1723 
                        Private i32* %1725 = OpAccessChain %794 %85 
                                 i32 %1726 = OpLoad %1725 
                                 u32 %1727 = OpBitcast %1726 
                                 u32 %1728 = OpBitwiseOr %1724 %1727 
                                 i32 %1729 = OpBitcast %1728 
                                               OpStore %609 %1729 
                        Private f32* %1730 = OpAccessChain %87 %85 
                                 f32 %1731 = OpLoad %1730 
                                 f32 %1732 = OpFMul %1731 %250 
                        Private f32* %1733 = OpAccessChain %618 %85 
                                 f32 %1734 = OpLoad %1733 
                                 f32 %1735 = OpFAdd %1732 %1734 
                        Private f32* %1736 = OpAccessChain %449 %85 
                                               OpStore %1736 %1735 
                        Private i32* %1737 = OpAccessChain %545 %58 
                                 i32 %1738 = OpLoad %1737 
                                bool %1739 = OpINotEqual %1738 %25 
                                               OpSelectionMerge %1742 None 
                                               OpBranchConditional %1739 %1741 %1745 
                                     %1741 = OpLabel 
                        Private f32* %1743 = OpAccessChain %618 %85 
                                 f32 %1744 = OpLoad %1743 
                                               OpStore %1740 %1744 
                                               OpBranch %1742 
                                     %1745 = OpLabel 
                        Private f32* %1746 = OpAccessChain %449 %85 
                                 f32 %1747 = OpLoad %1746 
                                               OpStore %1740 %1747 
                                               OpBranch %1742 
                                     %1742 = OpLabel 
                                 f32 %1748 = OpLoad %1740 
                        Private f32* %1749 = OpAccessChain %618 %85 
                                               OpStore %1749 %1748 
                        Private f32* %1750 = OpAccessChain %87 %58 
                                 f32 %1751 = OpLoad %1750 
                                 f32 %1752 = OpFMul %1751 %250 
                        Private f32* %1753 = OpAccessChain %618 %600 
                                 f32 %1754 = OpLoad %1753 
                                 f32 %1755 = OpFAdd %1752 %1754 
                        Private f32* %1756 = OpAccessChain %449 %85 
                                               OpStore %1756 %1755 
                        Private i32* %1757 = OpAccessChain %545 %58 
                                 i32 %1758 = OpLoad %1757 
                                bool %1759 = OpINotEqual %1758 %25 
                                               OpSelectionMerge %1762 None 
                                               OpBranchConditional %1759 %1761 %1765 
                                     %1761 = OpLabel 
                        Private f32* %1763 = OpAccessChain %618 %600 
                                 f32 %1764 = OpLoad %1763 
                                               OpStore %1760 %1764 
                                               OpBranch %1762 
                                     %1765 = OpLabel 
                        Private f32* %1766 = OpAccessChain %449 %85 
                                 f32 %1767 = OpLoad %1766 
                                               OpStore %1760 %1767 
                                               OpBranch %1762 
                                     %1762 = OpLabel 
                                 f32 %1768 = OpLoad %1760 
                        Private f32* %1769 = OpAccessChain %618 %600 
                                               OpStore %1769 %1768 
                                 i32 %1770 = OpLoad %609 
                                bool %1771 = OpINotEqual %1770 %25 
                                               OpSelectionMerge %1773 None 
                                               OpBranchConditional %1771 %1772 %1773 
                                     %1772 = OpLabel 
                        Private i32* %1774 = OpAccessChain %545 %85 
                                 i32 %1775 = OpLoad %1774 
                                bool %1776 = OpIEqual %1775 %25 
                                               OpSelectionMerge %1778 None 
                                               OpBranchConditional %1776 %1777 %1778 
                                     %1777 = OpLabel 
                               f32_3 %1779 = OpLoad %226 
                               f32_2 %1780 = OpVectorShuffle %1779 %1779 0 2 
                                               OpStore %449 %1780 
                               f32_2 %1781 = OpLoad %449 
                               f32_2 %1782 = OpCompositeConstruct %14 %14 
                               f32_2 %1783 = OpCompositeConstruct %15 %15 
                               f32_2 %1784 = OpExtInst %1 43 %1781 %1782 %1783 
                                               OpStore %449 %1784 
                               f32_2 %1785 = OpLoad %449 
                        Uniform f32* %1786 = OpAccessChain %23 %25 
                                 f32 %1787 = OpLoad %1786 
                               f32_2 %1788 = OpCompositeConstruct %1787 %1787 
                               f32_2 %1789 = OpFMul %1785 %1788 
                                               OpStore %449 %1789 
                 read_only Texture2D %1790 = OpLoad %36 
                             sampler %1791 = OpLoad %40 
          read_only Texture2DSampled %1792 = OpSampledImage %1790 %1791 
                               f32_2 %1793 = OpLoad %449 
                               f32_4 %1794 = OpImageSampleExplicitLod %1792 %1793 Lod %20 
                                 f32 %1795 = OpCompositeExtract %1794 1 
                        Private f32* %1796 = OpAccessChain %111 %85 
                                               OpStore %1796 %1795 
                                               OpBranch %1778 
                                     %1778 = OpLabel 
                        Private i32* %1797 = OpAccessChain %545 %58 
                                 i32 %1798 = OpLoad %1797 
                                bool %1799 = OpIEqual %1798 %25 
                                               OpSelectionMerge %1801 None 
                                               OpBranchConditional %1799 %1800 %1801 
                                     %1800 = OpLabel 
                               f32_3 %1802 = OpLoad %618 
                               f32_2 %1803 = OpVectorShuffle %1802 %1802 0 2 
                                               OpStore %449 %1803 
                               f32_2 %1804 = OpLoad %449 
                               f32_2 %1805 = OpCompositeConstruct %14 %14 
                               f32_2 %1806 = OpCompositeConstruct %15 %15 
                               f32_2 %1807 = OpExtInst %1 43 %1804 %1805 %1806 
                                               OpStore %449 %1807 
                               f32_2 %1808 = OpLoad %449 
                        Uniform f32* %1809 = OpAccessChain %23 %25 
                                 f32 %1810 = OpLoad %1809 
                               f32_2 %1811 = OpCompositeConstruct %1810 %1810 
                               f32_2 %1812 = OpFMul %1808 %1811 
                                               OpStore %449 %1812 
                 read_only Texture2D %1813 = OpLoad %36 
                             sampler %1814 = OpLoad %40 
          read_only Texture2DSampled %1815 = OpSampledImage %1813 %1814 
                               f32_2 %1816 = OpLoad %449 
                               f32_4 %1817 = OpImageSampleExplicitLod %1815 %1816 Lod %20 
                                 f32 %1818 = OpCompositeExtract %1817 1 
                        Private f32* %1819 = OpAccessChain %111 %58 
                                               OpStore %1819 %1818 
                                               OpBranch %1801 
                                     %1801 = OpLabel 
                                 f32 %1820 = OpLoad %48 
                                 f32 %1821 = OpFNegate %1820 
                                 f32 %1822 = OpFMul %1821 %412 
                        Private f32* %1823 = OpAccessChain %111 %85 
                                 f32 %1824 = OpLoad %1823 
                                 f32 %1825 = OpFAdd %1822 %1824 
                                               OpStore %106 %1825 
                        Private i32* %1826 = OpAccessChain %545 %85 
                                 i32 %1827 = OpLoad %1826 
                                bool %1828 = OpINotEqual %1827 %25 
                                               OpSelectionMerge %1831 None 
                                               OpBranchConditional %1828 %1830 %1834 
                                     %1830 = OpLabel 
                        Private f32* %1832 = OpAccessChain %111 %85 
                                 f32 %1833 = OpLoad %1832 
                                               OpStore %1829 %1833 
                                               OpBranch %1831 
                                     %1834 = OpLabel 
                                 f32 %1835 = OpLoad %106 
                                               OpStore %1829 %1835 
                                               OpBranch %1831 
                                     %1831 = OpLabel 
                                 f32 %1836 = OpLoad %1829 
                        Private f32* %1837 = OpAccessChain %111 %85 
                                               OpStore %1837 %1836 
                                 f32 %1838 = OpLoad %48 
                                 f32 %1839 = OpFNegate %1838 
                                 f32 %1840 = OpFMul %1839 %412 
                        Private f32* %1841 = OpAccessChain %111 %58 
                                 f32 %1842 = OpLoad %1841 
                                 f32 %1843 = OpFAdd %1840 %1842 
                                               OpStore %106 %1843 
                        Private i32* %1844 = OpAccessChain %545 %58 
                                 i32 %1845 = OpLoad %1844 
                                bool %1846 = OpINotEqual %1845 %25 
                                               OpSelectionMerge %1849 None 
                                               OpBranchConditional %1846 %1848 %1852 
                                     %1848 = OpLabel 
                        Private f32* %1850 = OpAccessChain %111 %58 
                                 f32 %1851 = OpLoad %1850 
                                               OpStore %1847 %1851 
                                               OpBranch %1849 
                                     %1852 = OpLabel 
                                 f32 %1853 = OpLoad %106 
                                               OpStore %1847 %1853 
                                               OpBranch %1849 
                                     %1849 = OpLabel 
                                 f32 %1854 = OpLoad %1847 
                        Private f32* %1855 = OpAccessChain %111 %58 
                                               OpStore %1855 %1854 
                               f32_3 %1856 = OpLoad %111 
                               f32_4 %1857 = OpVectorShuffle %1856 %1856 0 1 0 1 
                               f32_4 %1858 = OpExtInst %1 4 %1857 
                                 f32 %1859 = OpLoad %68 
                               f32_4 %1860 = OpCompositeConstruct %1859 %1859 %1859 %1859 
                              bool_4 %1861 = OpFOrdGreaterThanEqual %1858 %1860 
                              bool_2 %1862 = OpVectorShuffle %1861 %1861 0 1 
                               u32_2 %1863 = OpSelect %1862 %557 %556 
                               u32_2 %1864 = OpCompositeConstruct %527 %527 
                               u32_2 %1865 = OpIMul %1863 %1864 
                               i32_2 %1866 = OpBitcast %1865 
                                               OpStore %545 %1866 
                        Private f32* %1867 = OpAccessChain %87 %85 
                                 f32 %1868 = OpLoad %1867 
                                 f32 %1869 = OpFNegate %1868 
                                 f32 %1870 = OpFMul %1869 %250 
                        Private f32* %1871 = OpAccessChain %226 %85 
                                 f32 %1872 = OpLoad %1871 
                                 f32 %1873 = OpFAdd %1870 %1872 
                                               OpStore %106 %1873 
                        Private i32* %1874 = OpAccessChain %545 %85 
                                 i32 %1875 = OpLoad %1874 
                                bool %1876 = OpINotEqual %1875 %25 
                                               OpSelectionMerge %1879 None 
                                               OpBranchConditional %1876 %1878 %1882 
                                     %1878 = OpLabel 
                        Private f32* %1880 = OpAccessChain %226 %85 
                                 f32 %1881 = OpLoad %1880 
                                               OpStore %1877 %1881 
                                               OpBranch %1879 
                                     %1882 = OpLabel 
                                 f32 %1883 = OpLoad %106 
                                               OpStore %1877 %1883 
                                               OpBranch %1879 
                                     %1879 = OpLabel 
                                 f32 %1884 = OpLoad %1877 
                        Private f32* %1885 = OpAccessChain %226 %85 
                                               OpStore %1885 %1884 
                        Private f32* %1886 = OpAccessChain %87 %58 
                                 f32 %1887 = OpLoad %1886 
                                 f32 %1888 = OpFNegate %1887 
                                 f32 %1889 = OpFMul %1888 %250 
                        Private f32* %1890 = OpAccessChain %226 %600 
                                 f32 %1891 = OpLoad %1890 
                                 f32 %1892 = OpFAdd %1889 %1891 
                                               OpStore %106 %1892 
                        Private i32* %1893 = OpAccessChain %545 %85 
                                 i32 %1894 = OpLoad %1893 
                                bool %1895 = OpINotEqual %1894 %25 
                                               OpSelectionMerge %1898 None 
                                               OpBranchConditional %1895 %1897 %1901 
                                     %1897 = OpLabel 
                        Private f32* %1899 = OpAccessChain %226 %600 
                                 f32 %1900 = OpLoad %1899 
                                               OpStore %1896 %1900 
                                               OpBranch %1898 
                                     %1901 = OpLabel 
                                 f32 %1902 = OpLoad %106 
                                               OpStore %1896 %1902 
                                               OpBranch %1898 
                                     %1898 = OpLabel 
                                 f32 %1903 = OpLoad %1896 
                        Private f32* %1904 = OpAccessChain %226 %600 
                                               OpStore %1904 %1903 
                               i32_2 %1905 = OpLoad %545 
                               i32_2 %1906 = OpNot %1905 
                                               OpStore %794 %1906 
                        Private i32* %1907 = OpAccessChain %794 %58 
                                 i32 %1908 = OpLoad %1907 
                                 u32 %1909 = OpBitcast %1908 
                        Private i32* %1910 = OpAccessChain %794 %85 
                                 i32 %1911 = OpLoad %1910 
                                 u32 %1912 = OpBitcast %1911 
                                 u32 %1913 = OpBitwiseOr %1909 %1912 
                                 i32 %1914 = OpBitcast %1913 
                                               OpStore %609 %1914 
                        Private f32* %1915 = OpAccessChain %87 %85 
                                 f32 %1916 = OpLoad %1915 
                                 f32 %1917 = OpFMul %1916 %250 
                        Private f32* %1918 = OpAccessChain %618 %85 
                                 f32 %1919 = OpLoad %1918 
                                 f32 %1920 = OpFAdd %1917 %1919 
                        Private f32* %1921 = OpAccessChain %449 %85 
                                               OpStore %1921 %1920 
                        Private i32* %1922 = OpAccessChain %545 %58 
                                 i32 %1923 = OpLoad %1922 
                                bool %1924 = OpINotEqual %1923 %25 
                                               OpSelectionMerge %1927 None 
                                               OpBranchConditional %1924 %1926 %1930 
                                     %1926 = OpLabel 
                        Private f32* %1928 = OpAccessChain %618 %85 
                                 f32 %1929 = OpLoad %1928 
                                               OpStore %1925 %1929 
                                               OpBranch %1927 
                                     %1930 = OpLabel 
                        Private f32* %1931 = OpAccessChain %449 %85 
                                 f32 %1932 = OpLoad %1931 
                                               OpStore %1925 %1932 
                                               OpBranch %1927 
                                     %1927 = OpLabel 
                                 f32 %1933 = OpLoad %1925 
                        Private f32* %1934 = OpAccessChain %618 %85 
                                               OpStore %1934 %1933 
                        Private f32* %1935 = OpAccessChain %87 %58 
                                 f32 %1936 = OpLoad %1935 
                                 f32 %1937 = OpFMul %1936 %250 
                        Private f32* %1938 = OpAccessChain %618 %600 
                                 f32 %1939 = OpLoad %1938 
                                 f32 %1940 = OpFAdd %1937 %1939 
                        Private f32* %1941 = OpAccessChain %449 %85 
                                               OpStore %1941 %1940 
                        Private i32* %1942 = OpAccessChain %545 %58 
                                 i32 %1943 = OpLoad %1942 
                                bool %1944 = OpINotEqual %1943 %25 
                                               OpSelectionMerge %1947 None 
                                               OpBranchConditional %1944 %1946 %1950 
                                     %1946 = OpLabel 
                        Private f32* %1948 = OpAccessChain %618 %600 
                                 f32 %1949 = OpLoad %1948 
                                               OpStore %1945 %1949 
                                               OpBranch %1947 
                                     %1950 = OpLabel 
                        Private f32* %1951 = OpAccessChain %449 %85 
                                 f32 %1952 = OpLoad %1951 
                                               OpStore %1945 %1952 
                                               OpBranch %1947 
                                     %1947 = OpLabel 
                                 f32 %1953 = OpLoad %1945 
                        Private f32* %1954 = OpAccessChain %618 %600 
                                               OpStore %1954 %1953 
                                 i32 %1955 = OpLoad %609 
                                bool %1956 = OpINotEqual %1955 %25 
                                               OpSelectionMerge %1958 None 
                                               OpBranchConditional %1956 %1957 %1958 
                                     %1957 = OpLabel 
                        Private i32* %1959 = OpAccessChain %545 %85 
                                 i32 %1960 = OpLoad %1959 
                                bool %1961 = OpIEqual %1960 %25 
                                               OpSelectionMerge %1963 None 
                                               OpBranchConditional %1961 %1962 %1963 
                                     %1962 = OpLabel 
                               f32_3 %1964 = OpLoad %226 
                               f32_2 %1965 = OpVectorShuffle %1964 %1964 0 2 
                                               OpStore %449 %1965 
                               f32_2 %1966 = OpLoad %449 
                               f32_2 %1967 = OpCompositeConstruct %14 %14 
                               f32_2 %1968 = OpCompositeConstruct %15 %15 
                               f32_2 %1969 = OpExtInst %1 43 %1966 %1967 %1968 
                                               OpStore %449 %1969 
                               f32_2 %1970 = OpLoad %449 
                        Uniform f32* %1971 = OpAccessChain %23 %25 
                                 f32 %1972 = OpLoad %1971 
                               f32_2 %1973 = OpCompositeConstruct %1972 %1972 
                               f32_2 %1974 = OpFMul %1970 %1973 
                                               OpStore %449 %1974 
                 read_only Texture2D %1975 = OpLoad %36 
                             sampler %1976 = OpLoad %40 
          read_only Texture2DSampled %1977 = OpSampledImage %1975 %1976 
                               f32_2 %1978 = OpLoad %449 
                               f32_4 %1979 = OpImageSampleExplicitLod %1977 %1978 Lod %20 
                                 f32 %1980 = OpCompositeExtract %1979 1 
                        Private f32* %1981 = OpAccessChain %111 %85 
                                               OpStore %1981 %1980 
                                               OpBranch %1963 
                                     %1963 = OpLabel 
                        Private i32* %1982 = OpAccessChain %545 %58 
                                 i32 %1983 = OpLoad %1982 
                                bool %1984 = OpIEqual %1983 %25 
                                               OpSelectionMerge %1986 None 
                                               OpBranchConditional %1984 %1985 %1986 
                                     %1985 = OpLabel 
                               f32_3 %1987 = OpLoad %618 
                               f32_2 %1988 = OpVectorShuffle %1987 %1987 0 2 
                                               OpStore %449 %1988 
                               f32_2 %1989 = OpLoad %449 
                               f32_2 %1990 = OpCompositeConstruct %14 %14 
                               f32_2 %1991 = OpCompositeConstruct %15 %15 
                               f32_2 %1992 = OpExtInst %1 43 %1989 %1990 %1991 
                                               OpStore %449 %1992 
                               f32_2 %1993 = OpLoad %449 
                        Uniform f32* %1994 = OpAccessChain %23 %25 
                                 f32 %1995 = OpLoad %1994 
                               f32_2 %1996 = OpCompositeConstruct %1995 %1995 
                               f32_2 %1997 = OpFMul %1993 %1996 
                                               OpStore %449 %1997 
                 read_only Texture2D %1998 = OpLoad %36 
                             sampler %1999 = OpLoad %40 
          read_only Texture2DSampled %2000 = OpSampledImage %1998 %1999 
                               f32_2 %2001 = OpLoad %449 
                               f32_4 %2002 = OpImageSampleExplicitLod %2000 %2001 Lod %20 
                                 f32 %2003 = OpCompositeExtract %2002 1 
                        Private f32* %2004 = OpAccessChain %111 %58 
                                               OpStore %2004 %2003 
                                               OpBranch %1986 
                                     %1986 = OpLabel 
                                 f32 %2005 = OpLoad %48 
                                 f32 %2006 = OpFNegate %2005 
                                 f32 %2007 = OpFMul %2006 %412 
                        Private f32* %2008 = OpAccessChain %111 %85 
                                 f32 %2009 = OpLoad %2008 
                                 f32 %2010 = OpFAdd %2007 %2009 
                                               OpStore %106 %2010 
                        Private i32* %2011 = OpAccessChain %545 %85 
                                 i32 %2012 = OpLoad %2011 
                                bool %2013 = OpINotEqual %2012 %25 
                                               OpSelectionMerge %2016 None 
                                               OpBranchConditional %2013 %2015 %2019 
                                     %2015 = OpLabel 
                        Private f32* %2017 = OpAccessChain %111 %85 
                                 f32 %2018 = OpLoad %2017 
                                               OpStore %2014 %2018 
                                               OpBranch %2016 
                                     %2019 = OpLabel 
                                 f32 %2020 = OpLoad %106 
                                               OpStore %2014 %2020 
                                               OpBranch %2016 
                                     %2016 = OpLabel 
                                 f32 %2021 = OpLoad %2014 
                        Private f32* %2022 = OpAccessChain %111 %85 
                                               OpStore %2022 %2021 
                                 f32 %2023 = OpLoad %48 
                                 f32 %2024 = OpFNegate %2023 
                                 f32 %2025 = OpFMul %2024 %412 
                        Private f32* %2026 = OpAccessChain %111 %58 
                                 f32 %2027 = OpLoad %2026 
                                 f32 %2028 = OpFAdd %2025 %2027 
                                               OpStore %106 %2028 
                        Private i32* %2029 = OpAccessChain %545 %58 
                                 i32 %2030 = OpLoad %2029 
                                bool %2031 = OpINotEqual %2030 %25 
                                               OpSelectionMerge %2034 None 
                                               OpBranchConditional %2031 %2033 %2037 
                                     %2033 = OpLabel 
                        Private f32* %2035 = OpAccessChain %111 %58 
                                 f32 %2036 = OpLoad %2035 
                                               OpStore %2032 %2036 
                                               OpBranch %2034 
                                     %2037 = OpLabel 
                                 f32 %2038 = OpLoad %106 
                                               OpStore %2032 %2038 
                                               OpBranch %2034 
                                     %2034 = OpLabel 
                                 f32 %2039 = OpLoad %2032 
                        Private f32* %2040 = OpAccessChain %111 %58 
                                               OpStore %2040 %2039 
                               f32_3 %2041 = OpLoad %111 
                               f32_4 %2042 = OpVectorShuffle %2041 %2041 0 1 0 1 
                               f32_4 %2043 = OpExtInst %1 4 %2042 
                                 f32 %2044 = OpLoad %68 
                               f32_4 %2045 = OpCompositeConstruct %2044 %2044 %2044 %2044 
                              bool_4 %2046 = OpFOrdGreaterThanEqual %2043 %2045 
                              bool_2 %2047 = OpVectorShuffle %2046 %2046 0 1 
                               u32_2 %2048 = OpSelect %2047 %557 %556 
                               u32_2 %2049 = OpCompositeConstruct %527 %527 
                               u32_2 %2050 = OpIMul %2048 %2049 
                               i32_2 %2051 = OpBitcast %2050 
                                               OpStore %545 %2051 
                        Private f32* %2052 = OpAccessChain %87 %85 
                                 f32 %2053 = OpLoad %2052 
                                 f32 %2054 = OpFNegate %2053 
                                 f32 %2056 = OpFMul %2054 %2055 
                        Private f32* %2057 = OpAccessChain %226 %85 
                                 f32 %2058 = OpLoad %2057 
                                 f32 %2059 = OpFAdd %2056 %2058 
                                               OpStore %106 %2059 
                        Private i32* %2060 = OpAccessChain %545 %85 
                                 i32 %2061 = OpLoad %2060 
                                bool %2062 = OpINotEqual %2061 %25 
                                               OpSelectionMerge %2065 None 
                                               OpBranchConditional %2062 %2064 %2068 
                                     %2064 = OpLabel 
                        Private f32* %2066 = OpAccessChain %226 %85 
                                 f32 %2067 = OpLoad %2066 
                                               OpStore %2063 %2067 
                                               OpBranch %2065 
                                     %2068 = OpLabel 
                                 f32 %2069 = OpLoad %106 
                                               OpStore %2063 %2069 
                                               OpBranch %2065 
                                     %2065 = OpLabel 
                                 f32 %2070 = OpLoad %2063 
                        Private f32* %2071 = OpAccessChain %226 %85 
                                               OpStore %2071 %2070 
                        Private f32* %2072 = OpAccessChain %87 %58 
                                 f32 %2073 = OpLoad %2072 
                                 f32 %2074 = OpFNegate %2073 
                                 f32 %2075 = OpFMul %2074 %2055 
                        Private f32* %2076 = OpAccessChain %226 %600 
                                 f32 %2077 = OpLoad %2076 
                                 f32 %2078 = OpFAdd %2075 %2077 
                                               OpStore %106 %2078 
                        Private i32* %2079 = OpAccessChain %545 %85 
                                 i32 %2080 = OpLoad %2079 
                                bool %2081 = OpINotEqual %2080 %25 
                                               OpSelectionMerge %2084 None 
                                               OpBranchConditional %2081 %2083 %2087 
                                     %2083 = OpLabel 
                        Private f32* %2085 = OpAccessChain %226 %600 
                                 f32 %2086 = OpLoad %2085 
                                               OpStore %2082 %2086 
                                               OpBranch %2084 
                                     %2087 = OpLabel 
                                 f32 %2088 = OpLoad %106 
                                               OpStore %2082 %2088 
                                               OpBranch %2084 
                                     %2084 = OpLabel 
                                 f32 %2089 = OpLoad %2082 
                        Private f32* %2090 = OpAccessChain %226 %600 
                                               OpStore %2090 %2089 
                               i32_2 %2091 = OpLoad %545 
                               i32_2 %2092 = OpNot %2091 
                                               OpStore %794 %2092 
                        Private i32* %2093 = OpAccessChain %794 %58 
                                 i32 %2094 = OpLoad %2093 
                                 u32 %2095 = OpBitcast %2094 
                        Private i32* %2096 = OpAccessChain %794 %85 
                                 i32 %2097 = OpLoad %2096 
                                 u32 %2098 = OpBitcast %2097 
                                 u32 %2099 = OpBitwiseOr %2095 %2098 
                                 i32 %2100 = OpBitcast %2099 
                                               OpStore %609 %2100 
                        Private f32* %2101 = OpAccessChain %87 %85 
                                 f32 %2102 = OpLoad %2101 
                                 f32 %2103 = OpFMul %2102 %2055 
                        Private f32* %2104 = OpAccessChain %618 %85 
                                 f32 %2105 = OpLoad %2104 
                                 f32 %2106 = OpFAdd %2103 %2105 
                        Private f32* %2107 = OpAccessChain %449 %85 
                                               OpStore %2107 %2106 
                        Private i32* %2108 = OpAccessChain %545 %58 
                                 i32 %2109 = OpLoad %2108 
                                bool %2110 = OpINotEqual %2109 %25 
                                               OpSelectionMerge %2113 None 
                                               OpBranchConditional %2110 %2112 %2116 
                                     %2112 = OpLabel 
                        Private f32* %2114 = OpAccessChain %618 %85 
                                 f32 %2115 = OpLoad %2114 
                                               OpStore %2111 %2115 
                                               OpBranch %2113 
                                     %2116 = OpLabel 
                        Private f32* %2117 = OpAccessChain %449 %85 
                                 f32 %2118 = OpLoad %2117 
                                               OpStore %2111 %2118 
                                               OpBranch %2113 
                                     %2113 = OpLabel 
                                 f32 %2119 = OpLoad %2111 
                        Private f32* %2120 = OpAccessChain %618 %85 
                                               OpStore %2120 %2119 
                        Private f32* %2121 = OpAccessChain %87 %58 
                                 f32 %2122 = OpLoad %2121 
                                 f32 %2123 = OpFMul %2122 %2055 
                        Private f32* %2124 = OpAccessChain %618 %600 
                                 f32 %2125 = OpLoad %2124 
                                 f32 %2126 = OpFAdd %2123 %2125 
                        Private f32* %2127 = OpAccessChain %449 %85 
                                               OpStore %2127 %2126 
                        Private i32* %2128 = OpAccessChain %545 %58 
                                 i32 %2129 = OpLoad %2128 
                                bool %2130 = OpINotEqual %2129 %25 
                                               OpSelectionMerge %2133 None 
                                               OpBranchConditional %2130 %2132 %2136 
                                     %2132 = OpLabel 
                        Private f32* %2134 = OpAccessChain %618 %600 
                                 f32 %2135 = OpLoad %2134 
                                               OpStore %2131 %2135 
                                               OpBranch %2133 
                                     %2136 = OpLabel 
                        Private f32* %2137 = OpAccessChain %449 %85 
                                 f32 %2138 = OpLoad %2137 
                                               OpStore %2131 %2138 
                                               OpBranch %2133 
                                     %2133 = OpLabel 
                                 f32 %2139 = OpLoad %2131 
                        Private f32* %2140 = OpAccessChain %618 %600 
                                               OpStore %2140 %2139 
                                 i32 %2141 = OpLoad %609 
                                bool %2142 = OpINotEqual %2141 %25 
                                               OpSelectionMerge %2144 None 
                                               OpBranchConditional %2142 %2143 %2144 
                                     %2143 = OpLabel 
                        Private i32* %2145 = OpAccessChain %545 %85 
                                 i32 %2146 = OpLoad %2145 
                                bool %2147 = OpIEqual %2146 %25 
                                               OpSelectionMerge %2149 None 
                                               OpBranchConditional %2147 %2148 %2149 
                                     %2148 = OpLabel 
                               f32_3 %2150 = OpLoad %226 
                               f32_2 %2151 = OpVectorShuffle %2150 %2150 0 2 
                                               OpStore %449 %2151 
                               f32_2 %2152 = OpLoad %449 
                               f32_2 %2153 = OpCompositeConstruct %14 %14 
                               f32_2 %2154 = OpCompositeConstruct %15 %15 
                               f32_2 %2155 = OpExtInst %1 43 %2152 %2153 %2154 
                                               OpStore %449 %2155 
                               f32_2 %2156 = OpLoad %449 
                        Uniform f32* %2157 = OpAccessChain %23 %25 
                                 f32 %2158 = OpLoad %2157 
                               f32_2 %2159 = OpCompositeConstruct %2158 %2158 
                               f32_2 %2160 = OpFMul %2156 %2159 
                                               OpStore %449 %2160 
                 read_only Texture2D %2161 = OpLoad %36 
                             sampler %2162 = OpLoad %40 
          read_only Texture2DSampled %2163 = OpSampledImage %2161 %2162 
                               f32_2 %2164 = OpLoad %449 
                               f32_4 %2165 = OpImageSampleExplicitLod %2163 %2164 Lod %20 
                                 f32 %2166 = OpCompositeExtract %2165 1 
                        Private f32* %2167 = OpAccessChain %111 %85 
                                               OpStore %2167 %2166 
                                               OpBranch %2149 
                                     %2149 = OpLabel 
                        Private i32* %2168 = OpAccessChain %545 %58 
                                 i32 %2169 = OpLoad %2168 
                                bool %2170 = OpIEqual %2169 %25 
                                               OpSelectionMerge %2172 None 
                                               OpBranchConditional %2170 %2171 %2172 
                                     %2171 = OpLabel 
                               f32_3 %2173 = OpLoad %618 
                               f32_2 %2174 = OpVectorShuffle %2173 %2173 0 2 
                                               OpStore %449 %2174 
                               f32_2 %2175 = OpLoad %449 
                               f32_2 %2176 = OpCompositeConstruct %14 %14 
                               f32_2 %2177 = OpCompositeConstruct %15 %15 
                               f32_2 %2178 = OpExtInst %1 43 %2175 %2176 %2177 
                                               OpStore %449 %2178 
                               f32_2 %2179 = OpLoad %449 
                        Uniform f32* %2180 = OpAccessChain %23 %25 
                                 f32 %2181 = OpLoad %2180 
                               f32_2 %2182 = OpCompositeConstruct %2181 %2181 
                               f32_2 %2183 = OpFMul %2179 %2182 
                                               OpStore %449 %2183 
                 read_only Texture2D %2184 = OpLoad %36 
                             sampler %2185 = OpLoad %40 
          read_only Texture2DSampled %2186 = OpSampledImage %2184 %2185 
                               f32_2 %2187 = OpLoad %449 
                               f32_4 %2188 = OpImageSampleExplicitLod %2186 %2187 Lod %20 
                                 f32 %2189 = OpCompositeExtract %2188 1 
                        Private f32* %2190 = OpAccessChain %111 %58 
                                               OpStore %2190 %2189 
                                               OpBranch %2172 
                                     %2172 = OpLabel 
                                 f32 %2191 = OpLoad %48 
                                 f32 %2192 = OpFNegate %2191 
                                 f32 %2193 = OpFMul %2192 %412 
                        Private f32* %2194 = OpAccessChain %111 %85 
                                 f32 %2195 = OpLoad %2194 
                                 f32 %2196 = OpFAdd %2193 %2195 
                                               OpStore %106 %2196 
                        Private i32* %2197 = OpAccessChain %545 %85 
                                 i32 %2198 = OpLoad %2197 
                                bool %2199 = OpINotEqual %2198 %25 
                                               OpSelectionMerge %2202 None 
                                               OpBranchConditional %2199 %2201 %2205 
                                     %2201 = OpLabel 
                        Private f32* %2203 = OpAccessChain %111 %85 
                                 f32 %2204 = OpLoad %2203 
                                               OpStore %2200 %2204 
                                               OpBranch %2202 
                                     %2205 = OpLabel 
                                 f32 %2206 = OpLoad %106 
                                               OpStore %2200 %2206 
                                               OpBranch %2202 
                                     %2202 = OpLabel 
                                 f32 %2207 = OpLoad %2200 
                        Private f32* %2208 = OpAccessChain %111 %85 
                                               OpStore %2208 %2207 
                                 f32 %2209 = OpLoad %48 
                                 f32 %2210 = OpFNegate %2209 
                                 f32 %2211 = OpFMul %2210 %412 
                        Private f32* %2212 = OpAccessChain %111 %58 
                                 f32 %2213 = OpLoad %2212 
                                 f32 %2214 = OpFAdd %2211 %2213 
                                               OpStore %48 %2214 
                        Private i32* %2215 = OpAccessChain %545 %58 
                                 i32 %2216 = OpLoad %2215 
                                bool %2217 = OpINotEqual %2216 %25 
                                               OpSelectionMerge %2220 None 
                                               OpBranchConditional %2217 %2219 %2223 
                                     %2219 = OpLabel 
                        Private f32* %2221 = OpAccessChain %111 %58 
                                 f32 %2222 = OpLoad %2221 
                                               OpStore %2218 %2222 
                                               OpBranch %2220 
                                     %2223 = OpLabel 
                                 f32 %2224 = OpLoad %48 
                                               OpStore %2218 %2224 
                                               OpBranch %2220 
                                     %2220 = OpLabel 
                                 f32 %2225 = OpLoad %2218 
                        Private f32* %2226 = OpAccessChain %111 %58 
                                               OpStore %2226 %2225 
                               f32_3 %2229 = OpLoad %111 
                               f32_4 %2230 = OpVectorShuffle %2229 %2229 0 1 0 1 
                               f32_4 %2231 = OpExtInst %1 4 %2230 
                                 f32 %2232 = OpLoad %68 
                               f32_4 %2233 = OpCompositeConstruct %2232 %2232 %2232 %2232 
                              bool_4 %2234 = OpFOrdGreaterThanEqual %2231 %2233 
                              bool_2 %2235 = OpVectorShuffle %2234 %2234 0 1 
                                               OpStore %2228 %2235 
                        Private f32* %2236 = OpAccessChain %87 %85 
                                 f32 %2237 = OpLoad %2236 
                                 f32 %2238 = OpFNegate %2237 
                                 f32 %2240 = OpFMul %2238 %2239 
                        Private f32* %2241 = OpAccessChain %226 %85 
                                 f32 %2242 = OpLoad %2241 
                                 f32 %2243 = OpFAdd %2240 %2242 
                                               OpStore %48 %2243 
                       Private bool* %2244 = OpAccessChain %2228 %85 
                                bool %2245 = OpLoad %2244 
                                               OpSelectionMerge %2248 None 
                                               OpBranchConditional %2245 %2247 %2251 
                                     %2247 = OpLabel 
                        Private f32* %2249 = OpAccessChain %226 %85 
                                 f32 %2250 = OpLoad %2249 
                                               OpStore %2246 %2250 
                                               OpBranch %2248 
                                     %2251 = OpLabel 
                                 f32 %2252 = OpLoad %48 
                                               OpStore %2246 %2252 
                                               OpBranch %2248 
                                     %2248 = OpLabel 
                                 f32 %2253 = OpLoad %2246 
                        Private f32* %2254 = OpAccessChain %226 %85 
                                               OpStore %2254 %2253 
                        Private f32* %2255 = OpAccessChain %87 %58 
                                 f32 %2256 = OpLoad %2255 
                                 f32 %2257 = OpFNegate %2256 
                                 f32 %2258 = OpFMul %2257 %2239 
                        Private f32* %2259 = OpAccessChain %226 %600 
                                 f32 %2260 = OpLoad %2259 
                                 f32 %2261 = OpFAdd %2258 %2260 
                                               OpStore %48 %2261 
                       Private bool* %2262 = OpAccessChain %2228 %85 
                                bool %2263 = OpLoad %2262 
                                               OpSelectionMerge %2266 None 
                                               OpBranchConditional %2263 %2265 %2269 
                                     %2265 = OpLabel 
                        Private f32* %2267 = OpAccessChain %226 %600 
                                 f32 %2268 = OpLoad %2267 
                                               OpStore %2264 %2268 
                                               OpBranch %2266 
                                     %2269 = OpLabel 
                                 f32 %2270 = OpLoad %48 
                                               OpStore %2264 %2270 
                                               OpBranch %2266 
                                     %2266 = OpLabel 
                                 f32 %2271 = OpLoad %2264 
                        Private f32* %2272 = OpAccessChain %226 %600 
                                               OpStore %2272 %2271 
                        Private f32* %2273 = OpAccessChain %87 %85 
                                 f32 %2274 = OpLoad %2273 
                                 f32 %2275 = OpFMul %2274 %2239 
                        Private f32* %2276 = OpAccessChain %618 %85 
                                 f32 %2277 = OpLoad %2276 
                                 f32 %2278 = OpFAdd %2275 %2277 
                                               OpStore %48 %2278 
                       Private bool* %2279 = OpAccessChain %2228 %58 
                                bool %2280 = OpLoad %2279 
                                               OpSelectionMerge %2283 None 
                                               OpBranchConditional %2280 %2282 %2286 
                                     %2282 = OpLabel 
                        Private f32* %2284 = OpAccessChain %618 %85 
                                 f32 %2285 = OpLoad %2284 
                                               OpStore %2281 %2285 
                                               OpBranch %2283 
                                     %2286 = OpLabel 
                                 f32 %2287 = OpLoad %48 
                                               OpStore %2281 %2287 
                                               OpBranch %2283 
                                     %2283 = OpLabel 
                                 f32 %2288 = OpLoad %2281 
                        Private f32* %2289 = OpAccessChain %618 %85 
                                               OpStore %2289 %2288 
                        Private f32* %2290 = OpAccessChain %87 %58 
                                 f32 %2291 = OpLoad %2290 
                                 f32 %2292 = OpFMul %2291 %2239 
                        Private f32* %2293 = OpAccessChain %618 %600 
                                 f32 %2294 = OpLoad %2293 
                                 f32 %2295 = OpFAdd %2292 %2294 
                                               OpStore %48 %2295 
                       Private bool* %2296 = OpAccessChain %2228 %58 
                                bool %2297 = OpLoad %2296 
                                               OpSelectionMerge %2300 None 
                                               OpBranchConditional %2297 %2299 %2303 
                                     %2299 = OpLabel 
                        Private f32* %2301 = OpAccessChain %618 %600 
                                 f32 %2302 = OpLoad %2301 
                                               OpStore %2298 %2302 
                                               OpBranch %2300 
                                     %2303 = OpLabel 
                                 f32 %2304 = OpLoad %48 
                                               OpStore %2298 %2304 
                                               OpBranch %2300 
                                     %2300 = OpLabel 
                                 f32 %2305 = OpLoad %2298 
                        Private f32* %2306 = OpAccessChain %618 %600 
                                               OpStore %2306 %2305 
                                               OpBranch %2144 
                                     %2144 = OpLabel 
                                               OpBranch %1958 
                                     %1958 = OpLabel 
                                               OpBranch %1773 
                                     %1773 = OpLabel 
                                               OpBranch %1588 
                                     %1588 = OpLabel 
                                               OpBranch %1403 
                                     %1403 = OpLabel 
                                               OpBranch %1218 
                                     %1218 = OpLabel 
                                               OpBranch %1033 
                                     %1033 = OpLabel 
                                               OpBranch %848 
                                      %848 = OpLabel 
                                               OpBranch %662 
                                      %662 = OpLabel 
                        Private f32* %2307 = OpAccessChain %226 %85 
                                 f32 %2308 = OpLoad %2307 
                                 f32 %2309 = OpFNegate %2308 
                          Input f32* %2310 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %2311 = OpLoad %2310 
                                 f32 %2312 = OpFAdd %2309 %2311 
                                               OpStore %48 %2312 
                        Private f32* %2313 = OpAccessChain %618 %85 
                                 f32 %2314 = OpLoad %2313 
                          Input f32* %2315 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %2316 = OpLoad %2315 
                                 f32 %2317 = OpFNegate %2316 
                                 f32 %2318 = OpFAdd %2314 %2317 
                                               OpStore %68 %2318 
                        Private f32* %2319 = OpAccessChain %226 %600 
                                 f32 %2320 = OpLoad %2319 
                                 f32 %2321 = OpFNegate %2320 
                          Input f32* %2322 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %2323 = OpLoad %2322 
                                 f32 %2324 = OpFAdd %2321 %2323 
                        Private f32* %2325 = OpAccessChain %87 %85 
                                               OpStore %2325 %2324 
                                bool %2326 = OpLoad %293 
                                               OpSelectionMerge %2329 None 
                                               OpBranchConditional %2326 %2328 %2331 
                                     %2328 = OpLabel 
                                 f32 %2330 = OpLoad %48 
                                               OpStore %2327 %2330 
                                               OpBranch %2329 
                                     %2331 = OpLabel 
                        Private f32* %2332 = OpAccessChain %87 %85 
                                 f32 %2333 = OpLoad %2332 
                                               OpStore %2327 %2333 
                                               OpBranch %2329 
                                     %2329 = OpLabel 
                                 f32 %2334 = OpLoad %2327 
                                               OpStore %48 %2334 
                        Private f32* %2335 = OpAccessChain %618 %600 
                                 f32 %2336 = OpLoad %2335 
                          Input f32* %2337 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %2338 = OpLoad %2337 
                                 f32 %2339 = OpFNegate %2338 
                                 f32 %2340 = OpFAdd %2336 %2339 
                        Private f32* %2341 = OpAccessChain %87 %85 
                                               OpStore %2341 %2340 
                                bool %2342 = OpLoad %293 
                                               OpSelectionMerge %2345 None 
                                               OpBranchConditional %2342 %2344 %2347 
                                     %2344 = OpLabel 
                                 f32 %2346 = OpLoad %68 
                                               OpStore %2343 %2346 
                                               OpBranch %2345 
                                     %2347 = OpLabel 
                        Private f32* %2348 = OpAccessChain %87 %85 
                                 f32 %2349 = OpLoad %2348 
                                               OpStore %2343 %2349 
                                               OpBranch %2345 
                                     %2345 = OpLabel 
                                 f32 %2350 = OpLoad %2343 
                                               OpStore %68 %2350 
                               f32_3 %2352 = OpLoad %111 
                               f32_4 %2353 = OpVectorShuffle %2352 %2352 0 1 0 0 
                              bool_4 %2355 = OpFOrdLessThan %2353 %2354 
                              bool_2 %2356 = OpVectorShuffle %2355 %2355 0 1 
                               u32_2 %2357 = OpSelect %2356 %557 %556 
                               u32_2 %2358 = OpCompositeConstruct %527 %527 
                               u32_2 %2359 = OpIMul %2357 %2358 
                               i32_2 %2360 = OpBitcast %2359 
                                               OpStore %2351 %2360 
                                 f32 %2361 = OpLoad %48 
                                 f32 %2362 = OpLoad %68 
                                 f32 %2363 = OpFAdd %2361 %2362 
                                               OpStore %106 %2363 
                                 i32 %2365 = OpLoad %523 
                               i32_4 %2367 = OpCompositeConstruct %2365 %2365 %2365 %2365 
                               i32_2 %2368 = OpLoad %2351 
                               i32_4 %2369 = OpVectorShuffle %2368 %2368 0 1 0 0 
                              bool_4 %2370 = OpINotEqual %2367 %2369 
                              bool_2 %2371 = OpVectorShuffle %2370 %2370 0 1 
                                               OpStore %2364 %2371 
                                 f32 %2372 = OpLoad %106 
                                 f32 %2373 = OpFDiv %15 %2372 
                                               OpStore %93 %2373 
                                 f32 %2374 = OpLoad %48 
                                 f32 %2375 = OpLoad %68 
                                bool %2376 = OpFOrdLessThan %2374 %2375 
                                               OpStore %358 %2376 
                                 f32 %2377 = OpLoad %48 
                                 f32 %2378 = OpLoad %68 
                                 f32 %2379 = OpExtInst %1 37 %2377 %2378 
                                               OpStore %48 %2379 
                                bool %2381 = OpLoad %358 
                                               OpSelectionMerge %2385 None 
                                               OpBranchConditional %2381 %2384 %2388 
                                     %2384 = OpLabel 
                       Private bool* %2386 = OpAccessChain %2364 %85 
                                bool %2387 = OpLoad %2386 
                                               OpStore %2383 %2387 
                                               OpBranch %2385 
                                     %2388 = OpLabel 
                       Private bool* %2389 = OpAccessChain %2364 %58 
                                bool %2390 = OpLoad %2389 
                                               OpStore %2383 %2390 
                                               OpBranch %2385 
                                     %2385 = OpLabel 
                                bool %2391 = OpLoad %2383 
                                               OpStore %2380 %2391 
                        Private f32* %2392 = OpAccessChain %179 %85 
                                 f32 %2393 = OpLoad %2392 
                        Private f32* %2394 = OpAccessChain %179 %85 
                                 f32 %2395 = OpLoad %2394 
                                 f32 %2396 = OpFMul %2393 %2395 
                        Private f32* %2397 = OpAccessChain %179 %85 
                                               OpStore %2397 %2396 
                                 f32 %2398 = OpLoad %48 
                                 f32 %2399 = OpLoad %93 
                                 f32 %2400 = OpFNegate %2399 
                                 f32 %2401 = OpFMul %2398 %2400 
                                 f32 %2402 = OpFAdd %2401 %412 
                                               OpStore %48 %2402 
                                bool %2403 = OpLoad %2380 
                                 f32 %2404 = OpLoad %48 
                                 f32 %2405 = OpSelect %2403 %2404 %14 
                                               OpStore %48 %2405 
                        Private f32* %2406 = OpAccessChain %179 %85 
                                 f32 %2407 = OpLoad %2406 
                                 f32 %2408 = OpLoad %48 
                                 f32 %2409 = OpExtInst %1 40 %2407 %2408 
                        Private f32* %2410 = OpAccessChain %179 %85 
                                               OpStore %2410 %2409 
                               f32_3 %2411 = OpLoad %179 
                               f32_2 %2412 = OpVectorShuffle %2411 %2411 0 0 
                                 f32 %2413 = OpLoad %60 
                               f32_2 %2414 = OpCompositeConstruct %2413 %2413 
                               f32_2 %2415 = OpFMul %2412 %2414 
                               f32_2 %2416 = OpLoad vs_TEXCOORD0 
                               f32_2 %2417 = OpFAdd %2415 %2416 
                               f32_3 %2418 = OpLoad %179 
                               f32_3 %2419 = OpVectorShuffle %2418 %2417 3 4 2 
                                               OpStore %179 %2419 
                                bool %2420 = OpLoad %293 
                                               OpSelectionMerge %2423 None 
                                               OpBranchConditional %2420 %2422 %2426 
                                     %2422 = OpLabel 
                          Input f32* %2424 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %2425 = OpLoad %2424 
                                               OpStore %2421 %2425 
                                               OpBranch %2423 
                                     %2426 = OpLabel 
                        Private f32* %2427 = OpAccessChain %179 %85 
                                 f32 %2428 = OpLoad %2427 
                                               OpStore %2421 %2428 
                                               OpBranch %2423 
                                     %2423 = OpLabel 
                                 f32 %2429 = OpLoad %2421 
                        Private f32* %2430 = OpAccessChain %77 %85 
                                               OpStore %2430 %2429 
                        Private f32* %2431 = OpAccessChain %77 %85 
                                 f32 %2432 = OpLoad %2431 
                                 f32 %2433 = OpExtInst %1 43 %2432 %14 %15 
                        Private f32* %2434 = OpAccessChain %77 %85 
                                               OpStore %2434 %2433 
                                bool %2435 = OpLoad %293 
                                               OpSelectionMerge %2438 None 
                                               OpBranchConditional %2435 %2437 %2441 
                                     %2437 = OpLabel 
                        Private f32* %2439 = OpAccessChain %179 %58 
                                 f32 %2440 = OpLoad %2439 
                                               OpStore %2436 %2440 
                                               OpBranch %2438 
                                     %2441 = OpLabel 
                          Input f32* %2442 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %2443 = OpLoad %2442 
                                               OpStore %2436 %2443 
                                               OpBranch %2438 
                                     %2438 = OpLabel 
                                 f32 %2444 = OpLoad %2436 
                        Private f32* %2445 = OpAccessChain %77 %58 
                                               OpStore %2445 %2444 
                        Private f32* %2446 = OpAccessChain %77 %58 
                                 f32 %2447 = OpLoad %2446 
                                 f32 %2448 = OpExtInst %1 43 %2447 %14 %15 
                        Private f32* %2449 = OpAccessChain %77 %58 
                                               OpStore %2449 %2448 
                               f32_3 %2450 = OpLoad %77 
                               f32_2 %2451 = OpVectorShuffle %2450 %2450 0 1 
                        Uniform f32* %2452 = OpAccessChain %23 %25 
                                 f32 %2453 = OpLoad %2452 
                               f32_2 %2454 = OpCompositeConstruct %2453 %2453 
                               f32_2 %2455 = OpFMul %2451 %2454 
                                               OpStore %9 %2455 
                 read_only Texture2D %2456 = OpLoad %36 
                             sampler %2457 = OpLoad %40 
          read_only Texture2DSampled %2458 = OpSampledImage %2456 %2457 
                               f32_2 %2459 = OpLoad %9 
                               f32_4 %2460 = OpImageSampleExplicitLod %2458 %2459 Lod %20 
                               f32_3 %2461 = OpVectorShuffle %2460 %2460 0 1 2 
                                               OpStore %33 %2461 
                                               OpBranch %148 
                                      %148 = OpLabel 
                 read_only Texture2D %2462 = OpLoad %36 
                             sampler %2463 = OpLoad %40 
          read_only Texture2DSampled %2464 = OpSampledImage %2462 %2463 
                               f32_2 %2466 = OpLoad vs_TEXCOORD1 
                               f32_4 %2467 = OpImageSampleImplicitLod %2464 %2466 
                                 f32 %2469 = OpCompositeExtract %2467 3 
                        Private f32* %2470 = OpAccessChain %9 %85 
                                               OpStore %2470 %2469 
                               f32_2 %2471 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %2473 = OpAccessChain %23 %54 
                               f32_4 %2474 = OpLoad %2473 
                               f32_2 %2475 = OpVectorShuffle %2474 %2474 0 1 
                               f32_2 %2476 = OpFMul %2471 %2475 
                      Uniform f32_4* %2477 = OpAccessChain %23 %54 
                               f32_4 %2478 = OpLoad %2477 
                               f32_2 %2479 = OpVectorShuffle %2478 %2478 2 3 
                               f32_2 %2480 = OpFAdd %2476 %2479 
                               f32_3 %2481 = OpLoad %179 
                               f32_3 %2482 = OpVectorShuffle %2481 %2480 3 4 2 
                                               OpStore %179 %2482 
                 read_only Texture2D %2484 = OpLoad %2483 
                             sampler %2486 = OpLoad %2485 
          read_only Texture2DSampled %2487 = OpSampledImage %2484 %2486 
                               f32_3 %2488 = OpLoad %179 
                               f32_2 %2489 = OpVectorShuffle %2488 %2488 0 1 
                               f32_4 %2490 = OpImageSampleImplicitLod %2487 %2489 
                                 f32 %2491 = OpCompositeExtract %2490 3 
                        Private f32* %2492 = OpAccessChain %179 %85 
                                               OpStore %2492 %2491 
                        Private f32* %2493 = OpAccessChain %179 %85 
                                 f32 %2494 = OpLoad %2493 
                                 f32 %2495 = OpFMul %2494 %250 
                                 f32 %2497 = OpFAdd %2495 %2496 
                        Private f32* %2498 = OpAccessChain %179 %85 
                                               OpStore %2498 %2497 
                        Private f32* %2499 = OpAccessChain %179 %85 
                                 f32 %2500 = OpLoad %2499 
                                 f32 %2502 = OpFMul %2500 %2501 
                                 f32 %2503 = OpFAdd %2502 %412 
                                               OpStore %48 %2503 
                                 f32 %2504 = OpLoad %48 
                                 f32 %2505 = OpExtInst %1 43 %2504 %14 %15 
                                               OpStore %48 %2505 
                                 f32 %2506 = OpLoad %48 
                                 f32 %2507 = OpFMul %2506 %250 
                                 f32 %2508 = OpFAdd %2507 %2496 
                                               OpStore %48 %2508 
                        Private f32* %2509 = OpAccessChain %179 %85 
                                 f32 %2510 = OpLoad %2509 
                                 f32 %2511 = OpExtInst %1 4 %2510 
                                 f32 %2512 = OpFNegate %2511 
                                 f32 %2513 = OpFAdd %2512 %15 
                        Private f32* %2514 = OpAccessChain %179 %85 
                                               OpStore %2514 %2513 
                        Private f32* %2515 = OpAccessChain %179 %85 
                                 f32 %2516 = OpLoad %2515 
                                 f32 %2517 = OpExtInst %1 31 %2516 
                        Private f32* %2518 = OpAccessChain %179 %85 
                                               OpStore %2518 %2517 
                        Private f32* %2519 = OpAccessChain %179 %85 
                                 f32 %2520 = OpLoad %2519 
                                 f32 %2521 = OpFNegate %2520 
                                 f32 %2522 = OpFAdd %2521 %15 
                        Private f32* %2523 = OpAccessChain %179 %85 
                                               OpStore %2523 %2522 
                        Private f32* %2524 = OpAccessChain %179 %85 
                                 f32 %2525 = OpLoad %2524 
                                 f32 %2526 = OpLoad %48 
                                 f32 %2527 = OpFMul %2525 %2526 
                        Private f32* %2528 = OpAccessChain %179 %85 
                                               OpStore %2528 %2527 
                               f32_3 %2529 = OpLoad %33 
                               f32_3 %2532 = OpFMul %2529 %2531 
                                               OpStore %77 %2532 
                               f32_3 %2533 = OpLoad %33 
                               f32_3 %2534 = OpExtInst %1 4 %2533 
                               f32_3 %2537 = OpExtInst %1 40 %2534 %2536 
                                               OpStore %111 %2537 
                               f32_3 %2538 = OpLoad %111 
                               f32_3 %2539 = OpExtInst %1 30 %2538 
                                               OpStore %111 %2539 
                               f32_3 %2540 = OpLoad %111 
                               f32_3 %2543 = OpFMul %2540 %2542 
                                               OpStore %111 %2543 
                               f32_3 %2544 = OpLoad %111 
                               f32_3 %2545 = OpExtInst %1 29 %2544 
                                               OpStore %111 %2545 
                               f32_3 %2546 = OpLoad %111 
                               f32_3 %2549 = OpFMul %2546 %2548 
                               f32_3 %2552 = OpFAdd %2549 %2551 
                                               OpStore %111 %2552 
                               f32_3 %2558 = OpLoad %33 
                               f32_4 %2559 = OpVectorShuffle %2558 %2558 0 1 2 0 
                              bool_4 %2560 = OpFOrdGreaterThanEqual %2557 %2559 
                              bool_3 %2561 = OpVectorShuffle %2560 %2560 0 1 2 
                                               OpStore %2555 %2561 
                       Private bool* %2562 = OpAccessChain %2555 %85 
                                bool %2563 = OpLoad %2562 
                                               OpSelectionMerge %2566 None 
                                               OpBranchConditional %2563 %2565 %2569 
                                     %2565 = OpLabel 
                        Private f32* %2567 = OpAccessChain %77 %85 
                                 f32 %2568 = OpLoad %2567 
                                               OpStore %2564 %2568 
                                               OpBranch %2566 
                                     %2569 = OpLabel 
                        Private f32* %2570 = OpAccessChain %111 %85 
                                 f32 %2571 = OpLoad %2570 
                                               OpStore %2564 %2571 
                                               OpBranch %2566 
                                     %2566 = OpLabel 
                                 f32 %2572 = OpLoad %2564 
                        Private f32* %2573 = OpAccessChain %33 %85 
                                               OpStore %2573 %2572 
                       Private bool* %2574 = OpAccessChain %2555 %58 
                                bool %2575 = OpLoad %2574 
                                               OpSelectionMerge %2578 None 
                                               OpBranchConditional %2575 %2577 %2581 
                                     %2577 = OpLabel 
                        Private f32* %2579 = OpAccessChain %77 %58 
                                 f32 %2580 = OpLoad %2579 
                                               OpStore %2576 %2580 
                                               OpBranch %2578 
                                     %2581 = OpLabel 
                        Private f32* %2582 = OpAccessChain %111 %58 
                                 f32 %2583 = OpLoad %2582 
                                               OpStore %2576 %2583 
                                               OpBranch %2578 
                                     %2578 = OpLabel 
                                 f32 %2584 = OpLoad %2576 
                        Private f32* %2585 = OpAccessChain %33 %58 
                                               OpStore %2585 %2584 
                       Private bool* %2586 = OpAccessChain %2555 %600 
                                bool %2587 = OpLoad %2586 
                                               OpSelectionMerge %2590 None 
                                               OpBranchConditional %2587 %2589 %2593 
                                     %2589 = OpLabel 
                        Private f32* %2591 = OpAccessChain %77 %600 
                                 f32 %2592 = OpLoad %2591 
                                               OpStore %2588 %2592 
                                               OpBranch %2590 
                                     %2593 = OpLabel 
                        Private f32* %2594 = OpAccessChain %111 %600 
                                 f32 %2595 = OpLoad %2594 
                                               OpStore %2588 %2595 
                                               OpBranch %2590 
                                     %2590 = OpLabel 
                                 f32 %2596 = OpLoad %2588 
                        Private f32* %2597 = OpAccessChain %33 %600 
                                               OpStore %2597 %2596 
                               f32_3 %2598 = OpLoad %179 
                               f32_3 %2599 = OpVectorShuffle %2598 %2598 0 0 0 
                               f32_3 %2602 = OpFMul %2599 %2601 
                               f32_3 %2603 = OpLoad %33 
                               f32_3 %2604 = OpFAdd %2602 %2603 
                                               OpStore %179 %2604 
                               f32_3 %2605 = OpLoad %179 
                               f32_3 %2608 = OpFMul %2605 %2607 
                                               OpStore %33 %2608 
                               f32_3 %2609 = OpLoad %179 
                               f32_3 %2612 = OpFAdd %2609 %2611 
                                               OpStore %77 %2612 
                               f32_3 %2613 = OpLoad %77 
                               f32_3 %2616 = OpFMul %2613 %2615 
                                               OpStore %77 %2616 
                               f32_3 %2617 = OpLoad %77 
                               f32_3 %2618 = OpExtInst %1 4 %2617 
                               f32_3 %2619 = OpExtInst %1 40 %2618 %2536 
                                               OpStore %77 %2619 
                               f32_3 %2620 = OpLoad %77 
                               f32_3 %2621 = OpExtInst %1 30 %2620 
                                               OpStore %77 %2621 
                               f32_3 %2622 = OpLoad %77 
                               f32_3 %2625 = OpFMul %2622 %2624 
                                               OpStore %77 %2625 
                               f32_3 %2626 = OpLoad %77 
                               f32_3 %2627 = OpExtInst %1 29 %2626 
                                               OpStore %77 %2627 
                               f32_3 %2631 = OpLoad %179 
                               f32_4 %2632 = OpVectorShuffle %2631 %2631 0 1 2 2 
                              bool_4 %2633 = OpFOrdGreaterThanEqual %2630 %2632 
                              bool_3 %2634 = OpVectorShuffle %2633 %2633 0 1 2 
                                               OpStore %2628 %2634 
                       Private bool* %2637 = OpAccessChain %2628 %85 
                                bool %2638 = OpLoad %2637 
                                               OpSelectionMerge %2641 None 
                                               OpBranchConditional %2638 %2640 %2644 
                                     %2640 = OpLabel 
                        Private f32* %2642 = OpAccessChain %33 %85 
                                 f32 %2643 = OpLoad %2642 
                                               OpStore %2639 %2643 
                                               OpBranch %2641 
                                     %2644 = OpLabel 
                        Private f32* %2645 = OpAccessChain %77 %85 
                                 f32 %2646 = OpLoad %2645 
                                               OpStore %2639 %2646 
                                               OpBranch %2641 
                                     %2641 = OpLabel 
                                 f32 %2647 = OpLoad %2639 
                         Output f32* %2649 = OpAccessChain %2636 %85 
                                               OpStore %2649 %2647 
                       Private bool* %2650 = OpAccessChain %2628 %58 
                                bool %2651 = OpLoad %2650 
                                               OpSelectionMerge %2654 None 
                                               OpBranchConditional %2651 %2653 %2657 
                                     %2653 = OpLabel 
                        Private f32* %2655 = OpAccessChain %33 %58 
                                 f32 %2656 = OpLoad %2655 
                                               OpStore %2652 %2656 
                                               OpBranch %2654 
                                     %2657 = OpLabel 
                        Private f32* %2658 = OpAccessChain %77 %58 
                                 f32 %2659 = OpLoad %2658 
                                               OpStore %2652 %2659 
                                               OpBranch %2654 
                                     %2654 = OpLabel 
                                 f32 %2660 = OpLoad %2652 
                         Output f32* %2661 = OpAccessChain %2636 %58 
                                               OpStore %2661 %2660 
                       Private bool* %2662 = OpAccessChain %2628 %600 
                                bool %2663 = OpLoad %2662 
                                               OpSelectionMerge %2666 None 
                                               OpBranchConditional %2663 %2665 %2669 
                                     %2665 = OpLabel 
                        Private f32* %2667 = OpAccessChain %33 %600 
                                 f32 %2668 = OpLoad %2667 
                                               OpStore %2664 %2668 
                                               OpBranch %2666 
                                     %2669 = OpLabel 
                        Private f32* %2670 = OpAccessChain %77 %600 
                                 f32 %2671 = OpLoad %2670 
                                               OpStore %2664 %2671 
                                               OpBranch %2666 
                                     %2666 = OpLabel 
                                 f32 %2672 = OpLoad %2664 
                         Output f32* %2673 = OpAccessChain %2636 %600 
                                               OpStore %2673 %2672 
                        Private f32* %2674 = OpAccessChain %9 %85 
                                 f32 %2675 = OpLoad %2674 
                         Output f32* %2676 = OpAccessChain %2636 %2468 
                                               OpStore %2676 %2675 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %66 %73 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %22 0 Offset 22 
                                             OpMemberDecorate %22 1 Offset 22 
                                             OpMemberDecorate %22 2 Offset 22 
                                             OpDecorate %22 Block 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate vs_TEXCOORD1 Location 66 
                                             OpDecorate vs_TEXCOORD0 Location 73 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypeStruct %6 %7 %7 
                                     %23 = OpTypePointer Uniform %22 
Uniform struct {f32; f32_4; f32_4;}* %24 = OpVariable Uniform 
                                 i32 %25 = OpConstant 2 
                                     %26 = OpTypePointer Uniform %7 
                                     %35 = OpTypePointer Output %7 
                                 f32 %39 = OpConstant 3.674022E-40 
                                 f32 %40 = OpConstant 3.674022E-40 
                               f32_2 %41 = OpConstantComposite %39 %40 
                                     %45 = OpTypePointer Private %19 
                      Private f32_2* %46 = OpVariable Private 
                               f32_2 %49 = OpConstantComposite %40 %40 
                                 i32 %52 = OpConstant 1 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %58 %58 
                                     %65 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %68 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                      Uniform f32_4* %27 = OpAccessChain %24 %25 
                               f32_4 %28 = OpLoad %27 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpFMul %21 %29 
                      Uniform f32_4* %31 = OpAccessChain %24 %25 
                               f32_4 %32 = OpLoad %31 
                               f32_2 %33 = OpVectorShuffle %32 %32 2 3 
                               f32_2 %34 = OpFAdd %30 %33 
                       Output f32_4* %36 = OpAccessChain %13 %15 
                               f32_4 %37 = OpLoad %36 
                               f32_4 %38 = OpVectorShuffle %37 %34 4 5 2 3 
                                             OpStore %36 %38 
                       Output f32_4* %42 = OpAccessChain %13 %15 
                               f32_4 %43 = OpLoad %42 
                               f32_4 %44 = OpVectorShuffle %43 %41 0 1 4 5 
                                             OpStore %42 %44 
                               f32_3 %47 = OpLoad %18 
                               f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                               f32_2 %50 = OpFAdd %48 %49 
                                             OpStore %46 %50 
                               f32_2 %51 = OpLoad %46 
                      Uniform f32_4* %53 = OpAccessChain %24 %52 
                               f32_4 %54 = OpLoad %53 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               f32_2 %56 = OpFMul %51 %55 
                                             OpStore %46 %56 
                               f32_2 %57 = OpLoad %46 
                               f32_2 %60 = OpFMul %57 %59 
                      Uniform f32_4* %61 = OpAccessChain %24 %52 
                               f32_4 %62 = OpLoad %61 
                               f32_2 %63 = OpVectorShuffle %62 %62 2 3 
                               f32_2 %64 = OpFAdd %60 %63 
                                             OpStore %46 %64 
                               f32_2 %67 = OpLoad %46 
                        Uniform f32* %69 = OpAccessChain %24 %15 
                                 f32 %70 = OpLoad %69 
                               f32_2 %71 = OpCompositeConstruct %70 %70 
                               f32_2 %72 = OpFMul %67 %71 
                                             OpStore vs_TEXCOORD1 %72 
                               f32_2 %74 = OpLoad %46 
                                             OpStore vs_TEXCOORD0 %74 
                         Output f32* %76 = OpAccessChain %13 %15 %9 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                         Output f32* %79 = OpAccessChain %13 %15 %9 
                                             OpStore %79 %78 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 2678
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %11 %2465 %2636 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpDecorate vs_TEXCOORD0 Location 11 
                                               OpMemberDecorate %21 0 Offset 21 
                                               OpMemberDecorate %21 1 Offset 21 
                                               OpMemberDecorate %21 2 Offset 21 
                                               OpDecorate %21 Block 
                                               OpDecorate %23 DescriptorSet 23 
                                               OpDecorate %23 Binding 23 
                                               OpDecorate %36 DescriptorSet 36 
                                               OpDecorate %36 Binding 36 
                                               OpDecorate %40 DescriptorSet 40 
                                               OpDecorate %40 Binding 40 
                                               OpDecorate vs_TEXCOORD1 Location 2465 
                                               OpDecorate %2483 DescriptorSet 2483 
                                               OpDecorate %2483 Binding 2483 
                                               OpDecorate %2485 DescriptorSet 2485 
                                               OpDecorate %2485 Binding 2485 
                                               OpDecorate %2636 Location 2636 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 2 
                                        %8 = OpTypePointer Private %7 
                         Private f32_2* %9 = OpVariable Private 
                                       %10 = OpTypePointer Input %7 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %14 = OpConstant 3.674022E-40 
                                   f32 %15 = OpConstant 3.674022E-40 
                                       %20 = OpTypeVector %6 4 
                                       %21 = OpTypeStruct %6 %20 %20 
                                       %22 = OpTypePointer Uniform %21 
  Uniform struct {f32; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                       %24 = OpTypeInt 32 1 
                                   i32 %25 = OpConstant 0 
                                       %26 = OpTypePointer Uniform %6 
                                       %31 = OpTypeVector %6 3 
                                       %32 = OpTypePointer Private %31 
                        Private f32_3* %33 = OpVariable Private 
                                       %34 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %35 = OpTypePointer UniformConstant %34 
  UniformConstant read_only Texture2D* %36 = OpVariable UniformConstant 
                                       %38 = OpTypeSampler 
                                       %39 = OpTypePointer UniformConstant %38 
              UniformConstant sampler* %40 = OpVariable UniformConstant 
                                       %42 = OpTypeSampledImage %34 
                                       %47 = OpTypePointer Private %6 
                          Private f32* %48 = OpVariable Private 
                                       %53 = OpTypeVector %24 2 
                                   i32 %54 = OpConstant 1 
                                 i32_2 %55 = OpConstantComposite %25 %54 
                                       %57 = OpTypeInt 32 0 
                                   u32 %58 = OpConstant 1 
                          Private f32* %60 = OpVariable Private 
                                 i32_2 %65 = OpConstantComposite %54 %25 
                          Private f32* %68 = OpVariable Private 
                                   i32 %73 = OpConstant -1 
                                 i32_2 %74 = OpConstantComposite %25 %73 
                        Private f32_3* %77 = OpVariable Private 
                                 i32_2 %82 = OpConstantComposite %73 %25 
                                   u32 %85 = OpConstant 0 
                        Private f32_2* %87 = OpVariable Private 
                          Private f32* %93 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_3* %111 = OpVariable Private 
                                  f32 %128 = OpConstant 3.674022E-40 
                                  f32 %137 = OpConstant 3.674022E-40 
                                      %139 = OpTypeBool 
                                      %140 = OpTypePointer Private %139 
                        Private bool* %141 = OpVariable Private 
                                i32_2 %153 = OpConstantComposite %73 %73 
                                i32_2 %160 = OpConstantComposite %54 %54 
                                i32_2 %167 = OpConstantComposite %54 %73 
                                i32_2 %175 = OpConstantComposite %73 %54 
                       Private f32_3* %179 = OpVariable Private 
                       Private f32_2* %184 = OpVariable Private 
                       Private f32_2* %194 = OpVariable Private 
                                  f32 %203 = OpConstant 3.674022E-40 
                         Private f32* %216 = OpVariable Private 
                       Private f32_3* %226 = OpVariable Private 
                                  f32 %250 = OpConstant 3.674022E-40 
                        Private bool* %293 = OpVariable Private 
                                      %306 = OpTypePointer Function %6 
                                  i32 %323 = OpConstant 2 
                                  f32 %332 = OpConstant 3.674022E-40 
                        Private bool* %358 = OpVariable Private 
                                  f32 %412 = OpConstant 3.674022E-40 
                                f32_2 %413 = OpConstantComposite %412 %412 
                                      %423 = OpTypePointer Input %6 
                       Private f32_2* %449 = OpVariable Private 
                                  f32 %457 = OpConstant 3.674022E-40 
                                  f32 %507 = OpConstant 3.674022E-40 
                                      %522 = OpTypePointer Private %24 
                         Private i32* %523 = OpVariable Private 
                                  u32 %527 = OpConstant 4294967295 
                                      %544 = OpTypePointer Private %53 
                       Private i32_2* %545 = OpVariable Private 
                                      %551 = OpTypeVector %139 4 
                                      %553 = OpTypeVector %139 2 
                                      %555 = OpTypeVector %57 2 
                                u32_2 %556 = OpConstantComposite %85 %85 
                                u32_2 %557 = OpConstantComposite %58 %58 
                                  f32 %565 = OpConstant 3.674022E-40 
                                  u32 %600 = OpConstant 2 
                                      %602 = OpTypeVector %24 3 
                                      %603 = OpTypePointer Private %602 
                       Private i32_3* %604 = OpVariable Private 
                         Private i32* %609 = OpVariable Private 
                       Private f32_3* %618 = OpVariable Private 
                       Private i32_2* %794 = OpVariable Private 
                                 f32 %2055 = OpConstant 3.674022E-40 
                                     %2227 = OpTypePointer Private %553 
                     Private bool_2* %2228 = OpVariable Private 
                                 f32 %2239 = OpConstant 3.674022E-40 
                      Private i32_2* %2351 = OpVariable Private 
                               f32_4 %2354 = OpConstantComposite %14 %14 %14 %14 
                     Private bool_2* %2364 = OpVariable Private 
                                     %2366 = OpTypeVector %24 4 
                       Private bool* %2380 = OpVariable Private 
                                     %2382 = OpTypePointer Function %139 
                 Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                 u32 %2468 = OpConstant 3 
                                     %2472 = OpTypePointer Uniform %20 
UniformConstant read_only Texture2D* %2483 = OpVariable UniformConstant 
            UniformConstant sampler* %2485 = OpVariable UniformConstant 
                                 f32 %2496 = OpConstant 3.674022E-40 
                                 f32 %2501 = OpConstant 3.674022E-40 
                                 f32 %2530 = OpConstant 3.674022E-40 
                               f32_3 %2531 = OpConstantComposite %2530 %2530 %2530 
                                 f32 %2535 = OpConstant 3.674022E-40 
                               f32_3 %2536 = OpConstantComposite %2535 %2535 %2535 
                                 f32 %2541 = OpConstant 3.674022E-40 
                               f32_3 %2542 = OpConstantComposite %2541 %2541 %2541 
                                 f32 %2547 = OpConstant 3.674022E-40 
                               f32_3 %2548 = OpConstantComposite %2547 %2547 %2547 
                                 f32 %2550 = OpConstant 3.674022E-40 
                               f32_3 %2551 = OpConstantComposite %2550 %2550 %2550 
                                     %2553 = OpTypeVector %139 3 
                                     %2554 = OpTypePointer Private %2553 
                     Private bool_3* %2555 = OpVariable Private 
                                 f32 %2556 = OpConstant 3.674022E-40 
                               f32_4 %2557 = OpConstantComposite %2556 %2556 %2556 %14 
                                 f32 %2600 = OpConstant 3.674022E-40 
                               f32_3 %2601 = OpConstantComposite %2600 %2600 %2600 
                                 f32 %2606 = OpConstant 3.674022E-40 
                               f32_3 %2607 = OpConstantComposite %2606 %2606 %2606 
                                 f32 %2610 = OpConstant 3.674022E-40 
                               f32_3 %2611 = OpConstantComposite %2610 %2610 %2610 
                                 f32 %2614 = OpConstant 3.674022E-40 
                               f32_3 %2615 = OpConstantComposite %2614 %2614 %2614 
                                 f32 %2623 = OpConstant 3.674022E-40 
                               f32_3 %2624 = OpConstantComposite %2623 %2623 %2623 
                     Private bool_3* %2628 = OpVariable Private 
                                 f32 %2629 = OpConstant 3.674022E-40 
                               f32_4 %2630 = OpConstantComposite %2629 %2629 %2629 %2629 
                                     %2635 = OpTypePointer Output %20 
                       Output f32_4* %2636 = OpVariable Output 
                                     %2648 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %307 = OpVariable Function 
                        Function f32* %320 = OpVariable Function 
                        Function f32* %373 = OpVariable Function 
                        Function f32* %393 = OpVariable Function 
                        Function f32* %402 = OpVariable Function 
                        Function f32* %420 = OpVariable Function 
                        Function f32* %432 = OpVariable Function 
                        Function f32* %573 = OpVariable Function 
                        Function f32* %592 = OpVariable Function 
                        Function f32* %629 = OpVariable Function 
                        Function f32* %649 = OpVariable Function 
                        Function f32* %718 = OpVariable Function 
                        Function f32* %736 = OpVariable Function 
                        Function f32* %766 = OpVariable Function 
                        Function f32* %785 = OpVariable Function 
                        Function f32* %815 = OpVariable Function 
                        Function f32* %835 = OpVariable Function 
                        Function f32* %904 = OpVariable Function 
                        Function f32* %922 = OpVariable Function 
                        Function f32* %952 = OpVariable Function 
                        Function f32* %971 = OpVariable Function 
                       Function f32* %1000 = OpVariable Function 
                       Function f32* %1020 = OpVariable Function 
                       Function f32* %1089 = OpVariable Function 
                       Function f32* %1107 = OpVariable Function 
                       Function f32* %1137 = OpVariable Function 
                       Function f32* %1156 = OpVariable Function 
                       Function f32* %1185 = OpVariable Function 
                       Function f32* %1205 = OpVariable Function 
                       Function f32* %1274 = OpVariable Function 
                       Function f32* %1292 = OpVariable Function 
                       Function f32* %1322 = OpVariable Function 
                       Function f32* %1341 = OpVariable Function 
                       Function f32* %1370 = OpVariable Function 
                       Function f32* %1390 = OpVariable Function 
                       Function f32* %1459 = OpVariable Function 
                       Function f32* %1477 = OpVariable Function 
                       Function f32* %1507 = OpVariable Function 
                       Function f32* %1526 = OpVariable Function 
                       Function f32* %1555 = OpVariable Function 
                       Function f32* %1575 = OpVariable Function 
                       Function f32* %1644 = OpVariable Function 
                       Function f32* %1662 = OpVariable Function 
                       Function f32* %1692 = OpVariable Function 
                       Function f32* %1711 = OpVariable Function 
                       Function f32* %1740 = OpVariable Function 
                       Function f32* %1760 = OpVariable Function 
                       Function f32* %1829 = OpVariable Function 
                       Function f32* %1847 = OpVariable Function 
                       Function f32* %1877 = OpVariable Function 
                       Function f32* %1896 = OpVariable Function 
                       Function f32* %1925 = OpVariable Function 
                       Function f32* %1945 = OpVariable Function 
                       Function f32* %2014 = OpVariable Function 
                       Function f32* %2032 = OpVariable Function 
                       Function f32* %2063 = OpVariable Function 
                       Function f32* %2082 = OpVariable Function 
                       Function f32* %2111 = OpVariable Function 
                       Function f32* %2131 = OpVariable Function 
                       Function f32* %2200 = OpVariable Function 
                       Function f32* %2218 = OpVariable Function 
                       Function f32* %2246 = OpVariable Function 
                       Function f32* %2264 = OpVariable Function 
                       Function f32* %2281 = OpVariable Function 
                       Function f32* %2298 = OpVariable Function 
                       Function f32* %2327 = OpVariable Function 
                       Function f32* %2343 = OpVariable Function 
                      Function bool* %2383 = OpVariable Function 
                       Function f32* %2421 = OpVariable Function 
                       Function f32* %2436 = OpVariable Function 
                       Function f32* %2564 = OpVariable Function 
                       Function f32* %2576 = OpVariable Function 
                       Function f32* %2588 = OpVariable Function 
                       Function f32* %2639 = OpVariable Function 
                       Function f32* %2652 = OpVariable Function 
                       Function f32* %2664 = OpVariable Function 
                                 f32_2 %12 = OpLoad vs_TEXCOORD0 
                                               OpStore %9 %12 
                                 f32_2 %13 = OpLoad %9 
                                 f32_2 %16 = OpCompositeConstruct %14 %14 
                                 f32_2 %17 = OpCompositeConstruct %15 %15 
                                 f32_2 %18 = OpExtInst %1 43 %13 %16 %17 
                                               OpStore %9 %18 
                                 f32_2 %19 = OpLoad %9 
                          Uniform f32* %27 = OpAccessChain %23 %25 
                                   f32 %28 = OpLoad %27 
                                 f32_2 %29 = OpCompositeConstruct %28 %28 
                                 f32_2 %30 = OpFMul %19 %29 
                                               OpStore %9 %30 
                   read_only Texture2D %37 = OpLoad %36 
                               sampler %41 = OpLoad %40 
            read_only Texture2DSampled %43 = OpSampledImage %37 %41 
                                 f32_2 %44 = OpLoad %9 
                                 f32_4 %45 = OpImageSampleExplicitLod %43 %44 Lod %20 
                                 f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                                               OpStore %33 %46 
                   read_only Texture2D %49 = OpLoad %36 
                               sampler %50 = OpLoad %40 
            read_only Texture2DSampled %51 = OpSampledImage %49 %50 
                                 f32_2 %52 = OpLoad %9 
                                 f32_4 %56 = OpImageSampleExplicitLod %51 %52 Lod %20ConstOffset %56 
                                   f32 %59 = OpCompositeExtract %56 1 
                                               OpStore %48 %59 
                   read_only Texture2D %61 = OpLoad %36 
                               sampler %62 = OpLoad %40 
            read_only Texture2DSampled %63 = OpSampledImage %61 %62 
                                 f32_2 %64 = OpLoad %9 
                                 f32_4 %66 = OpImageSampleExplicitLod %63 %64 Lod %20ConstOffset %66 
                                   f32 %67 = OpCompositeExtract %66 1 
                                               OpStore %60 %67 
                   read_only Texture2D %69 = OpLoad %36 
                               sampler %70 = OpLoad %40 
            read_only Texture2DSampled %71 = OpSampledImage %69 %70 
                                 f32_2 %72 = OpLoad %9 
                                 f32_4 %75 = OpImageSampleExplicitLod %71 %72 Lod %20ConstOffset %75 
                                   f32 %76 = OpCompositeExtract %75 1 
                                               OpStore %68 %76 
                   read_only Texture2D %78 = OpLoad %36 
                               sampler %79 = OpLoad %40 
            read_only Texture2DSampled %80 = OpSampledImage %78 %79 
                                 f32_2 %81 = OpLoad %9 
                                 f32_4 %83 = OpImageSampleExplicitLod %80 %81 Lod %20ConstOffset %83 
                                   f32 %84 = OpCompositeExtract %83 1 
                          Private f32* %86 = OpAccessChain %77 %85 
                                               OpStore %86 %84 
                          Private f32* %88 = OpAccessChain %33 %58 
                                   f32 %89 = OpLoad %88 
                                   f32 %90 = OpLoad %48 
                                   f32 %91 = OpExtInst %1 40 %89 %90 
                          Private f32* %92 = OpAccessChain %87 %85 
                                               OpStore %92 %91 
                          Private f32* %94 = OpAccessChain %33 %58 
                                   f32 %95 = OpLoad %94 
                                   f32 %96 = OpLoad %48 
                                   f32 %97 = OpExtInst %1 37 %95 %96 
                                               OpStore %93 %97 
                                   f32 %98 = OpLoad %60 
                          Private f32* %99 = OpAccessChain %87 %85 
                                  f32 %100 = OpLoad %99 
                                  f32 %101 = OpExtInst %1 40 %98 %100 
                         Private f32* %102 = OpAccessChain %87 %85 
                                               OpStore %102 %101 
                                  f32 %103 = OpLoad %60 
                                  f32 %104 = OpLoad %93 
                                  f32 %105 = OpExtInst %1 37 %103 %104 
                                               OpStore %93 %105 
                                  f32 %107 = OpLoad %68 
                         Private f32* %108 = OpAccessChain %77 %85 
                                  f32 %109 = OpLoad %108 
                                  f32 %110 = OpExtInst %1 40 %107 %109 
                                               OpStore %106 %110 
                                  f32 %112 = OpLoad %68 
                         Private f32* %113 = OpAccessChain %77 %85 
                                  f32 %114 = OpLoad %113 
                                  f32 %115 = OpExtInst %1 37 %112 %114 
                         Private f32* %116 = OpAccessChain %111 %85 
                                               OpStore %116 %115 
                         Private f32* %117 = OpAccessChain %87 %85 
                                  f32 %118 = OpLoad %117 
                                  f32 %119 = OpLoad %106 
                                  f32 %120 = OpExtInst %1 40 %118 %119 
                         Private f32* %121 = OpAccessChain %87 %85 
                                               OpStore %121 %120 
                                  f32 %122 = OpLoad %93 
                         Private f32* %123 = OpAccessChain %111 %85 
                                  f32 %124 = OpLoad %123 
                                  f32 %125 = OpExtInst %1 37 %122 %124 
                                               OpStore %93 %125 
                         Private f32* %126 = OpAccessChain %87 %85 
                                  f32 %127 = OpLoad %126 
                                  f32 %129 = OpFMul %127 %128 
                                               OpStore %106 %129 
                                  f32 %130 = OpLoad %93 
                                  f32 %131 = OpFNegate %130 
                         Private f32* %132 = OpAccessChain %87 %85 
                                  f32 %133 = OpLoad %132 
                                  f32 %134 = OpFAdd %131 %133 
                         Private f32* %135 = OpAccessChain %87 %85 
                                               OpStore %135 %134 
                                  f32 %136 = OpLoad %106 
                                  f32 %138 = OpExtInst %1 40 %136 %137 
                                               OpStore %93 %138 
                         Private f32* %142 = OpAccessChain %87 %85 
                                  f32 %143 = OpLoad %142 
                                  f32 %144 = OpLoad %93 
                                 bool %145 = OpFOrdGreaterThanEqual %143 %144 
                                               OpStore %141 %145 
                                 bool %146 = OpLoad %141 
                                               OpSelectionMerge %148 None 
                                               OpBranchConditional %146 %147 %148 
                                      %147 = OpLabel 
                  read_only Texture2D %149 = OpLoad %36 
                              sampler %150 = OpLoad %40 
           read_only Texture2DSampled %151 = OpSampledImage %149 %150 
                                f32_2 %152 = OpLoad %9 
                                f32_4 %154 = OpImageSampleExplicitLod %151 %152 Lod %20ConstOffset %154 
                                  f32 %155 = OpCompositeExtract %154 1 
                                               OpStore %93 %155 
                  read_only Texture2D %156 = OpLoad %36 
                              sampler %157 = OpLoad %40 
           read_only Texture2DSampled %158 = OpSampledImage %156 %157 
                                f32_2 %159 = OpLoad %9 
                                f32_4 %161 = OpImageSampleExplicitLod %158 %159 Lod %20ConstOffset %161 
                                  f32 %162 = OpCompositeExtract %161 1 
                                               OpStore %106 %162 
                  read_only Texture2D %163 = OpLoad %36 
                              sampler %164 = OpLoad %40 
           read_only Texture2DSampled %165 = OpSampledImage %163 %164 
                                f32_2 %166 = OpLoad %9 
                                f32_4 %168 = OpImageSampleExplicitLod %165 %166 Lod %20ConstOffset %168 
                                  f32 %169 = OpCompositeExtract %168 1 
                         Private f32* %170 = OpAccessChain %111 %85 
                                               OpStore %170 %169 
                  read_only Texture2D %171 = OpLoad %36 
                              sampler %172 = OpLoad %40 
           read_only Texture2DSampled %173 = OpSampledImage %171 %172 
                                f32_2 %174 = OpLoad %9 
                                f32_4 %176 = OpImageSampleExplicitLod %173 %174 Lod %20ConstOffset %176 
                                  f32 %177 = OpCompositeExtract %176 1 
                         Private f32* %178 = OpAccessChain %9 %85 
                                               OpStore %178 %177 
                                  f32 %180 = OpLoad %48 
                                  f32 %181 = OpLoad %68 
                                  f32 %182 = OpFAdd %180 %181 
                         Private f32* %183 = OpAccessChain %179 %85 
                                               OpStore %183 %182 
                                  f32 %185 = OpLoad %60 
                         Private f32* %186 = OpAccessChain %77 %85 
                                  f32 %187 = OpLoad %186 
                                  f32 %188 = OpFAdd %185 %187 
                         Private f32* %189 = OpAccessChain %184 %85 
                                               OpStore %189 %188 
                         Private f32* %190 = OpAccessChain %87 %85 
                                  f32 %191 = OpLoad %190 
                                  f32 %192 = OpFDiv %15 %191 
                         Private f32* %193 = OpAccessChain %87 %85 
                                               OpStore %193 %192 
                         Private f32* %195 = OpAccessChain %179 %85 
                                  f32 %196 = OpLoad %195 
                         Private f32* %197 = OpAccessChain %184 %85 
                                  f32 %198 = OpLoad %197 
                                  f32 %199 = OpFAdd %196 %198 
                         Private f32* %200 = OpAccessChain %194 %85 
                                               OpStore %200 %199 
                         Private f32* %201 = OpAccessChain %33 %58 
                                  f32 %202 = OpLoad %201 
                                  f32 %204 = OpFMul %202 %203 
                         Private f32* %205 = OpAccessChain %179 %85 
                                  f32 %206 = OpLoad %205 
                                  f32 %207 = OpFAdd %204 %206 
                         Private f32* %208 = OpAccessChain %179 %85 
                                               OpStore %208 %207 
                         Private f32* %209 = OpAccessChain %33 %58 
                                  f32 %210 = OpLoad %209 
                                  f32 %211 = OpFMul %210 %203 
                         Private f32* %212 = OpAccessChain %184 %85 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFAdd %211 %213 
                         Private f32* %215 = OpAccessChain %184 %85 
                                               OpStore %215 %214 
                                  f32 %217 = OpLoad %106 
                         Private f32* %218 = OpAccessChain %111 %85 
                                  f32 %219 = OpLoad %218 
                                  f32 %220 = OpFAdd %217 %219 
                                               OpStore %216 %220 
                                  f32 %221 = OpLoad %93 
                         Private f32* %222 = OpAccessChain %111 %85 
                                  f32 %223 = OpLoad %222 
                                  f32 %224 = OpFAdd %221 %223 
                         Private f32* %225 = OpAccessChain %111 %85 
                                               OpStore %225 %224 
                                  f32 %227 = OpLoad %60 
                                  f32 %228 = OpFMul %227 %203 
                                  f32 %229 = OpLoad %216 
                                  f32 %230 = OpFAdd %228 %229 
                         Private f32* %231 = OpAccessChain %226 %85 
                                               OpStore %231 %230 
                                  f32 %232 = OpLoad %68 
                                  f32 %233 = OpFMul %232 %203 
                         Private f32* %234 = OpAccessChain %111 %85 
                                  f32 %235 = OpLoad %234 
                                  f32 %236 = OpFAdd %233 %235 
                         Private f32* %237 = OpAccessChain %111 %85 
                                               OpStore %237 %236 
                         Private f32* %238 = OpAccessChain %9 %85 
                                  f32 %239 = OpLoad %238 
                                  f32 %240 = OpLoad %93 
                                  f32 %241 = OpFAdd %239 %240 
                                               OpStore %93 %241 
                                  f32 %242 = OpLoad %106 
                         Private f32* %243 = OpAccessChain %9 %85 
                                  f32 %244 = OpLoad %243 
                                  f32 %245 = OpFAdd %242 %244 
                         Private f32* %246 = OpAccessChain %9 %85 
                                               OpStore %246 %245 
                         Private f32* %247 = OpAccessChain %179 %85 
                                  f32 %248 = OpLoad %247 
                                  f32 %249 = OpExtInst %1 4 %248 
                                  f32 %251 = OpFMul %249 %250 
                         Private f32* %252 = OpAccessChain %226 %85 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpExtInst %1 4 %253 
                                  f32 %255 = OpFAdd %251 %254 
                         Private f32* %256 = OpAccessChain %179 %85 
                                               OpStore %256 %255 
                         Private f32* %257 = OpAccessChain %184 %85 
                                  f32 %258 = OpLoad %257 
                                  f32 %259 = OpExtInst %1 4 %258 
                                  f32 %260 = OpFMul %259 %250 
                         Private f32* %261 = OpAccessChain %111 %85 
                                  f32 %262 = OpLoad %261 
                                  f32 %263 = OpExtInst %1 4 %262 
                                  f32 %264 = OpFAdd %260 %263 
                                               OpStore %106 %264 
                         Private f32* %265 = OpAccessChain %77 %85 
                                  f32 %266 = OpLoad %265 
                                  f32 %267 = OpFMul %266 %203 
                                  f32 %268 = OpLoad %93 
                                  f32 %269 = OpFAdd %267 %268 
                         Private f32* %270 = OpAccessChain %111 %85 
                                               OpStore %270 %269 
                                  f32 %271 = OpLoad %48 
                                  f32 %272 = OpFMul %271 %203 
                         Private f32* %273 = OpAccessChain %9 %85 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpFAdd %272 %274 
                         Private f32* %276 = OpAccessChain %9 %85 
                                               OpStore %276 %275 
                         Private f32* %277 = OpAccessChain %179 %85 
                                  f32 %278 = OpLoad %277 
                         Private f32* %279 = OpAccessChain %111 %85 
                                  f32 %280 = OpLoad %279 
                                  f32 %281 = OpExtInst %1 4 %280 
                                  f32 %282 = OpFAdd %278 %281 
                         Private f32* %283 = OpAccessChain %179 %85 
                                               OpStore %283 %282 
                                  f32 %284 = OpLoad %106 
                         Private f32* %285 = OpAccessChain %9 %85 
                                  f32 %286 = OpLoad %285 
                                  f32 %287 = OpExtInst %1 4 %286 
                                  f32 %288 = OpFAdd %284 %287 
                         Private f32* %289 = OpAccessChain %9 %85 
                                               OpStore %289 %288 
                                  f32 %290 = OpLoad %216 
                                  f32 %291 = OpLoad %93 
                                  f32 %292 = OpFAdd %290 %291 
                                               OpStore %93 %292 
                         Private f32* %294 = OpAccessChain %179 %85 
                                  f32 %295 = OpLoad %294 
                         Private f32* %296 = OpAccessChain %9 %85 
                                  f32 %297 = OpLoad %296 
                                 bool %298 = OpFOrdGreaterThanEqual %295 %297 
                                               OpStore %293 %298 
                         Private f32* %299 = OpAccessChain %194 %85 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFMul %300 %250 
                                  f32 %302 = OpLoad %93 
                                  f32 %303 = OpFAdd %301 %302 
                         Private f32* %304 = OpAccessChain %179 %85 
                                               OpStore %304 %303 
                                 bool %305 = OpLoad %293 
                                               OpSelectionMerge %309 None 
                                               OpBranchConditional %305 %308 %311 
                                      %308 = OpLabel 
                                  f32 %310 = OpLoad %68 
                                               OpStore %307 %310 
                                               OpBranch %309 
                                      %311 = OpLabel 
                         Private f32* %312 = OpAccessChain %77 %85 
                                  f32 %313 = OpLoad %312 
                                               OpStore %307 %313 
                                               OpBranch %309 
                                      %309 = OpLabel 
                                  f32 %314 = OpLoad %307 
                                               OpStore %68 %314 
                                 bool %315 = OpLoad %293 
                                  f32 %316 = OpLoad %48 
                                  f32 %317 = OpLoad %60 
                                  f32 %318 = OpSelect %315 %316 %317 
                                               OpStore %48 %318 
                                 bool %319 = OpLoad %293 
                                               OpSelectionMerge %322 None 
                                               OpBranchConditional %319 %321 %326 
                                      %321 = OpLabel 
                         Uniform f32* %324 = OpAccessChain %23 %323 %58 
                                  f32 %325 = OpLoad %324 
                                               OpStore %320 %325 
                                               OpBranch %322 
                                      %326 = OpLabel 
                         Uniform f32* %327 = OpAccessChain %23 %323 %85 
                                  f32 %328 = OpLoad %327 
                                               OpStore %320 %328 
                                               OpBranch %322 
                                      %322 = OpLabel 
                                  f32 %329 = OpLoad %320 
                                               OpStore %60 %329 
                         Private f32* %330 = OpAccessChain %179 %85 
                                  f32 %331 = OpLoad %330 
                                  f32 %333 = OpFMul %331 %332 
                         Private f32* %334 = OpAccessChain %33 %58 
                                  f32 %335 = OpLoad %334 
                                  f32 %336 = OpFNegate %335 
                                  f32 %337 = OpFAdd %333 %336 
                         Private f32* %338 = OpAccessChain %179 %85 
                                               OpStore %338 %337 
                         Private f32* %339 = OpAccessChain %33 %58 
                                  f32 %340 = OpLoad %339 
                                  f32 %341 = OpFNegate %340 
                                  f32 %342 = OpLoad %68 
                                  f32 %343 = OpFAdd %341 %342 
                         Private f32* %344 = OpAccessChain %77 %85 
                                               OpStore %344 %343 
                         Private f32* %345 = OpAccessChain %33 %58 
                                  f32 %346 = OpLoad %345 
                                  f32 %347 = OpFNegate %346 
                                  f32 %348 = OpLoad %48 
                                  f32 %349 = OpFAdd %347 %348 
                                               OpStore %93 %349 
                         Private f32* %350 = OpAccessChain %33 %58 
                                  f32 %351 = OpLoad %350 
                                  f32 %352 = OpLoad %68 
                                  f32 %353 = OpFAdd %351 %352 
                                               OpStore %68 %353 
                         Private f32* %354 = OpAccessChain %33 %58 
                                  f32 %355 = OpLoad %354 
                                  f32 %356 = OpLoad %48 
                                  f32 %357 = OpFAdd %355 %356 
                                               OpStore %48 %357 
                         Private f32* %359 = OpAccessChain %77 %85 
                                  f32 %360 = OpLoad %359 
                                  f32 %361 = OpExtInst %1 4 %360 
                                  f32 %362 = OpLoad %93 
                                  f32 %363 = OpExtInst %1 4 %362 
                                 bool %364 = OpFOrdGreaterThanEqual %361 %363 
                                               OpStore %358 %364 
                                  f32 %365 = OpLoad %93 
                                  f32 %366 = OpExtInst %1 4 %365 
                         Private f32* %367 = OpAccessChain %77 %85 
                                  f32 %368 = OpLoad %367 
                                  f32 %369 = OpExtInst %1 4 %368 
                                  f32 %370 = OpExtInst %1 40 %366 %369 
                         Private f32* %371 = OpAccessChain %77 %85 
                                               OpStore %371 %370 
                                 bool %372 = OpLoad %358 
                                               OpSelectionMerge %375 None 
                                               OpBranchConditional %372 %374 %378 
                                      %374 = OpLabel 
                                  f32 %376 = OpLoad %60 
                                  f32 %377 = OpFNegate %376 
                                               OpStore %373 %377 
                                               OpBranch %375 
                                      %378 = OpLabel 
                                  f32 %379 = OpLoad %60 
                                               OpStore %373 %379 
                                               OpBranch %375 
                                      %375 = OpLabel 
                                  f32 %380 = OpLoad %373 
                                               OpStore %60 %380 
                         Private f32* %381 = OpAccessChain %87 %85 
                                  f32 %382 = OpLoad %381 
                         Private f32* %383 = OpAccessChain %179 %85 
                                  f32 %384 = OpLoad %383 
                                  f32 %385 = OpExtInst %1 4 %384 
                                  f32 %386 = OpFMul %382 %385 
                         Private f32* %387 = OpAccessChain %179 %85 
                                               OpStore %387 %386 
                         Private f32* %388 = OpAccessChain %179 %85 
                                  f32 %389 = OpLoad %388 
                                  f32 %390 = OpExtInst %1 43 %389 %14 %15 
                         Private f32* %391 = OpAccessChain %179 %85 
                                               OpStore %391 %390 
                                 bool %392 = OpLoad %293 
                                               OpSelectionMerge %395 None 
                                               OpBranchConditional %392 %394 %398 
                                      %394 = OpLabel 
                         Uniform f32* %396 = OpAccessChain %23 %323 %85 
                                  f32 %397 = OpLoad %396 
                                               OpStore %393 %397 
                                               OpBranch %395 
                                      %398 = OpLabel 
                                               OpStore %393 %14 
                                               OpBranch %395 
                                      %395 = OpLabel 
                                  f32 %399 = OpLoad %393 
                         Private f32* %400 = OpAccessChain %87 %85 
                                               OpStore %400 %399 
                                 bool %401 = OpLoad %293 
                                               OpSelectionMerge %404 None 
                                               OpBranchConditional %401 %403 %405 
                                      %403 = OpLabel 
                                               OpStore %402 %14 
                                               OpBranch %404 
                                      %405 = OpLabel 
                         Uniform f32* %406 = OpAccessChain %23 %323 %58 
                                  f32 %407 = OpLoad %406 
                                               OpStore %402 %407 
                                               OpBranch %404 
                                      %404 = OpLabel 
                                  f32 %408 = OpLoad %402 
                         Private f32* %409 = OpAccessChain %87 %58 
                                               OpStore %409 %408 
                                  f32 %410 = OpLoad %60 
                                f32_2 %411 = OpCompositeConstruct %410 %410 
                                f32_2 %414 = OpFMul %411 %413 
                                f32_2 %415 = OpLoad vs_TEXCOORD0 
                                f32_2 %416 = OpFAdd %414 %415 
                                f32_3 %417 = OpLoad %111 
                                f32_3 %418 = OpVectorShuffle %417 %416 3 4 2 
                                               OpStore %111 %418 
                                 bool %419 = OpLoad %293 
                                               OpSelectionMerge %422 None 
                                               OpBranchConditional %419 %421 %426 
                                      %421 = OpLabel 
                           Input f32* %424 = OpAccessChain vs_TEXCOORD0 %85 
                                  f32 %425 = OpLoad %424 
                                               OpStore %420 %425 
                                               OpBranch %422 
                                      %426 = OpLabel 
                         Private f32* %427 = OpAccessChain %111 %85 
                                  f32 %428 = OpLoad %427 
                                               OpStore %420 %428 
                                               OpBranch %422 
                                      %422 = OpLabel 
                                  f32 %429 = OpLoad %420 
                         Private f32* %430 = OpAccessChain %111 %85 
                                               OpStore %430 %429 
                                 bool %431 = OpLoad %293 
                                               OpSelectionMerge %434 None 
                                               OpBranchConditional %431 %433 %437 
                                      %433 = OpLabel 
                         Private f32* %435 = OpAccessChain %111 %58 
                                  f32 %436 = OpLoad %435 
                                               OpStore %432 %436 
                                               OpBranch %434 
                                      %437 = OpLabel 
                           Input f32* %438 = OpAccessChain vs_TEXCOORD0 %58 
                                  f32 %439 = OpLoad %438 
                                               OpStore %432 %439 
                                               OpBranch %434 
                                      %434 = OpLabel 
                                  f32 %440 = OpLoad %432 
                         Private f32* %441 = OpAccessChain %111 %58 
                                               OpStore %441 %440 
                                f32_2 %442 = OpLoad %87 
                                f32_2 %443 = OpFNegate %442 
                                f32_3 %444 = OpLoad %111 
                                f32_2 %445 = OpVectorShuffle %444 %444 0 1 
                                f32_2 %446 = OpFAdd %443 %445 
                                f32_3 %447 = OpLoad %226 
                                f32_3 %448 = OpVectorShuffle %447 %446 3 4 2 
                                               OpStore %226 %448 
                                f32_2 %450 = OpLoad %87 
                                f32_3 %451 = OpLoad %111 
                                f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                f32_2 %453 = OpFAdd %450 %452 
                                               OpStore %449 %453 
                         Private f32* %454 = OpAccessChain %179 %85 
                                  f32 %455 = OpLoad %454 
                                  f32 %456 = OpFMul %455 %203 
                                  f32 %458 = OpFAdd %456 %457 
                         Private f32* %459 = OpAccessChain %111 %85 
                                               OpStore %459 %458 
                                f32_3 %460 = OpLoad %226 
                                f32_2 %461 = OpVectorShuffle %460 %460 0 1 
                                               OpStore %184 %461 
                                f32_2 %462 = OpLoad %184 
                                f32_2 %463 = OpCompositeConstruct %14 %14 
                                f32_2 %464 = OpCompositeConstruct %15 %15 
                                f32_2 %465 = OpExtInst %1 43 %462 %463 %464 
                                               OpStore %184 %465 
                                f32_2 %466 = OpLoad %184 
                         Uniform f32* %467 = OpAccessChain %23 %25 
                                  f32 %468 = OpLoad %467 
                                f32_2 %469 = OpCompositeConstruct %468 %468 
                                f32_2 %470 = OpFMul %466 %469 
                                               OpStore %184 %470 
                  read_only Texture2D %471 = OpLoad %36 
                              sampler %472 = OpLoad %40 
           read_only Texture2DSampled %473 = OpSampledImage %471 %472 
                                f32_2 %474 = OpLoad %184 
                                f32_4 %475 = OpImageSampleExplicitLod %473 %474 Lod %20 
                                  f32 %476 = OpCompositeExtract %475 1 
                         Private f32* %477 = OpAccessChain %184 %85 
                                               OpStore %477 %476 
                         Private f32* %478 = OpAccessChain %179 %85 
                                  f32 %479 = OpLoad %478 
                         Private f32* %480 = OpAccessChain %179 %85 
                                  f32 %481 = OpLoad %480 
                                  f32 %482 = OpFMul %479 %481 
                         Private f32* %483 = OpAccessChain %179 %85 
                                               OpStore %483 %482 
                                f32_2 %484 = OpLoad %449 
                                               OpStore %194 %484 
                                f32_2 %485 = OpLoad %194 
                                f32_2 %486 = OpCompositeConstruct %14 %14 
                                f32_2 %487 = OpCompositeConstruct %15 %15 
                                f32_2 %488 = OpExtInst %1 43 %485 %486 %487 
                                               OpStore %194 %488 
                                f32_2 %489 = OpLoad %194 
                         Uniform f32* %490 = OpAccessChain %23 %25 
                                  f32 %491 = OpLoad %490 
                                f32_2 %492 = OpCompositeConstruct %491 %491 
                                f32_2 %493 = OpFMul %489 %492 
                                               OpStore %194 %493 
                  read_only Texture2D %494 = OpLoad %36 
                              sampler %495 = OpLoad %40 
           read_only Texture2DSampled %496 = OpSampledImage %494 %495 
                                f32_2 %497 = OpLoad %194 
                                f32_4 %498 = OpImageSampleExplicitLod %496 %497 Lod %20 
                                  f32 %499 = OpCompositeExtract %498 1 
                         Private f32* %500 = OpAccessChain %194 %85 
                                               OpStore %500 %499 
                                 bool %501 = OpLoad %358 
                                  f32 %502 = OpLoad %68 
                                  f32 %503 = OpLoad %48 
                                  f32 %504 = OpSelect %501 %502 %503 
                                               OpStore %48 %504 
                         Private f32* %505 = OpAccessChain %77 %85 
                                  f32 %506 = OpLoad %505 
                                  f32 %508 = OpFMul %506 %507 
                                               OpStore %68 %508 
                                  f32 %509 = OpLoad %48 
                                  f32 %510 = OpFNegate %509 
                                  f32 %511 = OpFMul %510 %412 
                         Private f32* %512 = OpAccessChain %33 %58 
                                  f32 %513 = OpLoad %512 
                                  f32 %514 = OpFAdd %511 %513 
                         Private f32* %515 = OpAccessChain %77 %85 
                                               OpStore %515 %514 
                         Private f32* %516 = OpAccessChain %179 %85 
                                  f32 %517 = OpLoad %516 
                         Private f32* %518 = OpAccessChain %111 %85 
                                  f32 %519 = OpLoad %518 
                                  f32 %520 = OpFMul %517 %519 
                         Private f32* %521 = OpAccessChain %179 %85 
                                               OpStore %521 %520 
                         Private f32* %524 = OpAccessChain %77 %85 
                                  f32 %525 = OpLoad %524 
                                 bool %526 = OpFOrdLessThan %525 %14 
                                  u32 %528 = OpSelect %526 %527 %85 
                                  i32 %529 = OpBitcast %528 
                                               OpStore %523 %529 
                                  f32 %530 = OpLoad %48 
                                  f32 %531 = OpFNegate %530 
                                  f32 %532 = OpFMul %531 %412 
                         Private f32* %533 = OpAccessChain %184 %85 
                                  f32 %534 = OpLoad %533 
                                  f32 %535 = OpFAdd %532 %534 
                         Private f32* %536 = OpAccessChain %111 %85 
                                               OpStore %536 %535 
                                  f32 %537 = OpLoad %48 
                                  f32 %538 = OpFNegate %537 
                                  f32 %539 = OpFMul %538 %412 
                         Private f32* %540 = OpAccessChain %194 %85 
                                  f32 %541 = OpLoad %540 
                                  f32 %542 = OpFAdd %539 %541 
                         Private f32* %543 = OpAccessChain %111 %58 
                                               OpStore %543 %542 
                                f32_3 %546 = OpLoad %111 
                                f32_4 %547 = OpVectorShuffle %546 %546 0 1 0 1 
                                f32_4 %548 = OpExtInst %1 4 %547 
                                  f32 %549 = OpLoad %68 
                                f32_4 %550 = OpCompositeConstruct %549 %549 %549 %549 
                               bool_4 %552 = OpFOrdGreaterThanEqual %548 %550 
                               bool_2 %554 = OpVectorShuffle %552 %552 0 1 
                                u32_2 %558 = OpSelect %554 %557 %556 
                                u32_2 %559 = OpCompositeConstruct %527 %527 
                                u32_2 %560 = OpIMul %558 %559 
                                i32_2 %561 = OpBitcast %560 
                                               OpStore %545 %561 
                         Private f32* %562 = OpAccessChain %87 %85 
                                  f32 %563 = OpLoad %562 
                                  f32 %564 = OpFNegate %563 
                                  f32 %566 = OpFMul %564 %565 
                         Private f32* %567 = OpAccessChain %226 %85 
                                  f32 %568 = OpLoad %567 
                                  f32 %569 = OpFAdd %566 %568 
                                               OpStore %106 %569 
                         Private i32* %570 = OpAccessChain %545 %85 
                                  i32 %571 = OpLoad %570 
                                 bool %572 = OpINotEqual %571 %25 
                                               OpSelectionMerge %575 None 
                                               OpBranchConditional %572 %574 %578 
                                      %574 = OpLabel 
                         Private f32* %576 = OpAccessChain %226 %85 
                                  f32 %577 = OpLoad %576 
                                               OpStore %573 %577 
                                               OpBranch %575 
                                      %578 = OpLabel 
                                  f32 %579 = OpLoad %106 
                                               OpStore %573 %579 
                                               OpBranch %575 
                                      %575 = OpLabel 
                                  f32 %580 = OpLoad %573 
                         Private f32* %581 = OpAccessChain %226 %85 
                                               OpStore %581 %580 
                         Private f32* %582 = OpAccessChain %87 %58 
                                  f32 %583 = OpLoad %582 
                                  f32 %584 = OpFNegate %583 
                                  f32 %585 = OpFMul %584 %565 
                         Private f32* %586 = OpAccessChain %226 %58 
                                  f32 %587 = OpLoad %586 
                                  f32 %588 = OpFAdd %585 %587 
                                               OpStore %106 %588 
                         Private i32* %589 = OpAccessChain %545 %85 
                                  i32 %590 = OpLoad %589 
                                 bool %591 = OpINotEqual %590 %25 
                                               OpSelectionMerge %594 None 
                                               OpBranchConditional %591 %593 %597 
                                      %593 = OpLabel 
                         Private f32* %595 = OpAccessChain %226 %58 
                                  f32 %596 = OpLoad %595 
                                               OpStore %592 %596 
                                               OpBranch %594 
                                      %597 = OpLabel 
                                  f32 %598 = OpLoad %106 
                                               OpStore %592 %598 
                                               OpBranch %594 
                                      %594 = OpLabel 
                                  f32 %599 = OpLoad %592 
                         Private f32* %601 = OpAccessChain %226 %600 
                                               OpStore %601 %599 
                                i32_2 %605 = OpLoad %545 
                                i32_2 %606 = OpNot %605 
                                i32_3 %607 = OpLoad %604 
                                i32_3 %608 = OpVectorShuffle %607 %606 3 1 4 
                                               OpStore %604 %608 
                         Private i32* %610 = OpAccessChain %604 %600 
                                  i32 %611 = OpLoad %610 
                                  u32 %612 = OpBitcast %611 
                         Private i32* %613 = OpAccessChain %604 %85 
                                  i32 %614 = OpLoad %613 
                                  u32 %615 = OpBitcast %614 
                                  u32 %616 = OpBitwiseOr %612 %615 
                                  i32 %617 = OpBitcast %616 
                                               OpStore %609 %617 
                         Private f32* %619 = OpAccessChain %87 %85 
                                  f32 %620 = OpLoad %619 
                                  f32 %621 = OpFMul %620 %565 
                         Private f32* %622 = OpAccessChain %449 %85 
                                  f32 %623 = OpLoad %622 
                                  f32 %624 = OpFAdd %621 %623 
                         Private f32* %625 = OpAccessChain %618 %85 
                                               OpStore %625 %624 
                         Private i32* %626 = OpAccessChain %545 %58 
                                  i32 %627 = OpLoad %626 
                                 bool %628 = OpINotEqual %627 %25 
                                               OpSelectionMerge %631 None 
                                               OpBranchConditional %628 %630 %634 
                                      %630 = OpLabel 
                         Private f32* %632 = OpAccessChain %449 %85 
                                  f32 %633 = OpLoad %632 
                                               OpStore %629 %633 
                                               OpBranch %631 
                                      %634 = OpLabel 
                         Private f32* %635 = OpAccessChain %618 %85 
                                  f32 %636 = OpLoad %635 
                                               OpStore %629 %636 
                                               OpBranch %631 
                                      %631 = OpLabel 
                                  f32 %637 = OpLoad %629 
                         Private f32* %638 = OpAccessChain %618 %85 
                                               OpStore %638 %637 
                         Private f32* %639 = OpAccessChain %87 %58 
                                  f32 %640 = OpLoad %639 
                                  f32 %641 = OpFMul %640 %565 
                         Private f32* %642 = OpAccessChain %449 %58 
                                  f32 %643 = OpLoad %642 
                                  f32 %644 = OpFAdd %641 %643 
                         Private f32* %645 = OpAccessChain %449 %85 
                                               OpStore %645 %644 
                         Private i32* %646 = OpAccessChain %545 %58 
                                  i32 %647 = OpLoad %646 
                                 bool %648 = OpINotEqual %647 %25 
                                               OpSelectionMerge %651 None 
                                               OpBranchConditional %648 %650 %654 
                                      %650 = OpLabel 
                         Private f32* %652 = OpAccessChain %449 %58 
                                  f32 %653 = OpLoad %652 
                                               OpStore %649 %653 
                                               OpBranch %651 
                                      %654 = OpLabel 
                         Private f32* %655 = OpAccessChain %449 %85 
                                  f32 %656 = OpLoad %655 
                                               OpStore %649 %656 
                                               OpBranch %651 
                                      %651 = OpLabel 
                                  f32 %657 = OpLoad %649 
                         Private f32* %658 = OpAccessChain %618 %600 
                                               OpStore %658 %657 
                                  i32 %659 = OpLoad %609 
                                 bool %660 = OpINotEqual %659 %25 
                                               OpSelectionMerge %662 None 
                                               OpBranchConditional %660 %661 %662 
                                      %661 = OpLabel 
                         Private i32* %663 = OpAccessChain %545 %85 
                                  i32 %664 = OpLoad %663 
                                 bool %665 = OpIEqual %664 %25 
                                               OpSelectionMerge %667 None 
                                               OpBranchConditional %665 %666 %667 
                                      %666 = OpLabel 
                                f32_3 %668 = OpLoad %226 
                                f32_2 %669 = OpVectorShuffle %668 %668 0 2 
                                               OpStore %449 %669 
                                f32_2 %670 = OpLoad %449 
                                f32_2 %671 = OpCompositeConstruct %14 %14 
                                f32_2 %672 = OpCompositeConstruct %15 %15 
                                f32_2 %673 = OpExtInst %1 43 %670 %671 %672 
                                               OpStore %449 %673 
                                f32_2 %674 = OpLoad %449 
                         Uniform f32* %675 = OpAccessChain %23 %25 
                                  f32 %676 = OpLoad %675 
                                f32_2 %677 = OpCompositeConstruct %676 %676 
                                f32_2 %678 = OpFMul %674 %677 
                                               OpStore %449 %678 
                  read_only Texture2D %679 = OpLoad %36 
                              sampler %680 = OpLoad %40 
           read_only Texture2DSampled %681 = OpSampledImage %679 %680 
                                f32_2 %682 = OpLoad %449 
                                f32_4 %683 = OpImageSampleExplicitLod %681 %682 Lod %20 
                                  f32 %684 = OpCompositeExtract %683 1 
                         Private f32* %685 = OpAccessChain %111 %85 
                                               OpStore %685 %684 
                                               OpBranch %667 
                                      %667 = OpLabel 
                         Private i32* %686 = OpAccessChain %545 %58 
                                  i32 %687 = OpLoad %686 
                                 bool %688 = OpIEqual %687 %25 
                                               OpSelectionMerge %690 None 
                                               OpBranchConditional %688 %689 %690 
                                      %689 = OpLabel 
                                f32_3 %691 = OpLoad %618 
                                f32_2 %692 = OpVectorShuffle %691 %691 0 2 
                                               OpStore %449 %692 
                                f32_2 %693 = OpLoad %449 
                                f32_2 %694 = OpCompositeConstruct %14 %14 
                                f32_2 %695 = OpCompositeConstruct %15 %15 
                                f32_2 %696 = OpExtInst %1 43 %693 %694 %695 
                                               OpStore %449 %696 
                                f32_2 %697 = OpLoad %449 
                         Uniform f32* %698 = OpAccessChain %23 %25 
                                  f32 %699 = OpLoad %698 
                                f32_2 %700 = OpCompositeConstruct %699 %699 
                                f32_2 %701 = OpFMul %697 %700 
                                               OpStore %449 %701 
                  read_only Texture2D %702 = OpLoad %36 
                              sampler %703 = OpLoad %40 
           read_only Texture2DSampled %704 = OpSampledImage %702 %703 
                                f32_2 %705 = OpLoad %449 
                                f32_4 %706 = OpImageSampleExplicitLod %704 %705 Lod %20 
                                  f32 %707 = OpCompositeExtract %706 1 
                         Private f32* %708 = OpAccessChain %111 %58 
                                               OpStore %708 %707 
                                               OpBranch %690 
                                      %690 = OpLabel 
                                  f32 %709 = OpLoad %48 
                                  f32 %710 = OpFNegate %709 
                                  f32 %711 = OpFMul %710 %412 
                         Private f32* %712 = OpAccessChain %111 %85 
                                  f32 %713 = OpLoad %712 
                                  f32 %714 = OpFAdd %711 %713 
                                               OpStore %106 %714 
                         Private i32* %715 = OpAccessChain %545 %85 
                                  i32 %716 = OpLoad %715 
                                 bool %717 = OpINotEqual %716 %25 
                                               OpSelectionMerge %720 None 
                                               OpBranchConditional %717 %719 %723 
                                      %719 = OpLabel 
                         Private f32* %721 = OpAccessChain %111 %85 
                                  f32 %722 = OpLoad %721 
                                               OpStore %718 %722 
                                               OpBranch %720 
                                      %723 = OpLabel 
                                  f32 %724 = OpLoad %106 
                                               OpStore %718 %724 
                                               OpBranch %720 
                                      %720 = OpLabel 
                                  f32 %725 = OpLoad %718 
                         Private f32* %726 = OpAccessChain %111 %85 
                                               OpStore %726 %725 
                                  f32 %727 = OpLoad %48 
                                  f32 %728 = OpFNegate %727 
                                  f32 %729 = OpFMul %728 %412 
                         Private f32* %730 = OpAccessChain %111 %58 
                                  f32 %731 = OpLoad %730 
                                  f32 %732 = OpFAdd %729 %731 
                                               OpStore %106 %732 
                         Private i32* %733 = OpAccessChain %545 %58 
                                  i32 %734 = OpLoad %733 
                                 bool %735 = OpINotEqual %734 %25 
                                               OpSelectionMerge %738 None 
                                               OpBranchConditional %735 %737 %741 
                                      %737 = OpLabel 
                         Private f32* %739 = OpAccessChain %111 %58 
                                  f32 %740 = OpLoad %739 
                                               OpStore %736 %740 
                                               OpBranch %738 
                                      %741 = OpLabel 
                                  f32 %742 = OpLoad %106 
                                               OpStore %736 %742 
                                               OpBranch %738 
                                      %738 = OpLabel 
                                  f32 %743 = OpLoad %736 
                         Private f32* %744 = OpAccessChain %111 %58 
                                               OpStore %744 %743 
                                f32_3 %745 = OpLoad %111 
                                f32_4 %746 = OpVectorShuffle %745 %745 0 1 0 1 
                                f32_4 %747 = OpExtInst %1 4 %746 
                                  f32 %748 = OpLoad %68 
                                f32_4 %749 = OpCompositeConstruct %748 %748 %748 %748 
                               bool_4 %750 = OpFOrdGreaterThanEqual %747 %749 
                               bool_2 %751 = OpVectorShuffle %750 %750 0 1 
                                u32_2 %752 = OpSelect %751 %557 %556 
                                u32_2 %753 = OpCompositeConstruct %527 %527 
                                u32_2 %754 = OpIMul %752 %753 
                                i32_2 %755 = OpBitcast %754 
                                               OpStore %545 %755 
                         Private f32* %756 = OpAccessChain %87 %85 
                                  f32 %757 = OpLoad %756 
                                  f32 %758 = OpFNegate %757 
                                  f32 %759 = OpFMul %758 %250 
                         Private f32* %760 = OpAccessChain %226 %85 
                                  f32 %761 = OpLoad %760 
                                  f32 %762 = OpFAdd %759 %761 
                                               OpStore %106 %762 
                         Private i32* %763 = OpAccessChain %545 %85 
                                  i32 %764 = OpLoad %763 
                                 bool %765 = OpINotEqual %764 %25 
                                               OpSelectionMerge %768 None 
                                               OpBranchConditional %765 %767 %771 
                                      %767 = OpLabel 
                         Private f32* %769 = OpAccessChain %226 %85 
                                  f32 %770 = OpLoad %769 
                                               OpStore %766 %770 
                                               OpBranch %768 
                                      %771 = OpLabel 
                                  f32 %772 = OpLoad %106 
                                               OpStore %766 %772 
                                               OpBranch %768 
                                      %768 = OpLabel 
                                  f32 %773 = OpLoad %766 
                         Private f32* %774 = OpAccessChain %226 %85 
                                               OpStore %774 %773 
                         Private f32* %775 = OpAccessChain %87 %58 
                                  f32 %776 = OpLoad %775 
                                  f32 %777 = OpFNegate %776 
                                  f32 %778 = OpFMul %777 %250 
                         Private f32* %779 = OpAccessChain %226 %600 
                                  f32 %780 = OpLoad %779 
                                  f32 %781 = OpFAdd %778 %780 
                                               OpStore %106 %781 
                         Private i32* %782 = OpAccessChain %545 %85 
                                  i32 %783 = OpLoad %782 
                                 bool %784 = OpINotEqual %783 %25 
                                               OpSelectionMerge %787 None 
                                               OpBranchConditional %784 %786 %790 
                                      %786 = OpLabel 
                         Private f32* %788 = OpAccessChain %226 %600 
                                  f32 %789 = OpLoad %788 
                                               OpStore %785 %789 
                                               OpBranch %787 
                                      %790 = OpLabel 
                                  f32 %791 = OpLoad %106 
                                               OpStore %785 %791 
                                               OpBranch %787 
                                      %787 = OpLabel 
                                  f32 %792 = OpLoad %785 
                         Private f32* %793 = OpAccessChain %226 %600 
                                               OpStore %793 %792 
                                i32_2 %795 = OpLoad %545 
                                i32_2 %796 = OpNot %795 
                                               OpStore %794 %796 
                         Private i32* %797 = OpAccessChain %794 %58 
                                  i32 %798 = OpLoad %797 
                                  u32 %799 = OpBitcast %798 
                         Private i32* %800 = OpAccessChain %794 %85 
                                  i32 %801 = OpLoad %800 
                                  u32 %802 = OpBitcast %801 
                                  u32 %803 = OpBitwiseOr %799 %802 
                                  i32 %804 = OpBitcast %803 
                                               OpStore %609 %804 
                         Private f32* %805 = OpAccessChain %87 %85 
                                  f32 %806 = OpLoad %805 
                                  f32 %807 = OpFMul %806 %250 
                         Private f32* %808 = OpAccessChain %618 %85 
                                  f32 %809 = OpLoad %808 
                                  f32 %810 = OpFAdd %807 %809 
                         Private f32* %811 = OpAccessChain %449 %85 
                                               OpStore %811 %810 
                         Private i32* %812 = OpAccessChain %545 %58 
                                  i32 %813 = OpLoad %812 
                                 bool %814 = OpINotEqual %813 %25 
                                               OpSelectionMerge %817 None 
                                               OpBranchConditional %814 %816 %820 
                                      %816 = OpLabel 
                         Private f32* %818 = OpAccessChain %618 %85 
                                  f32 %819 = OpLoad %818 
                                               OpStore %815 %819 
                                               OpBranch %817 
                                      %820 = OpLabel 
                         Private f32* %821 = OpAccessChain %449 %85 
                                  f32 %822 = OpLoad %821 
                                               OpStore %815 %822 
                                               OpBranch %817 
                                      %817 = OpLabel 
                                  f32 %823 = OpLoad %815 
                         Private f32* %824 = OpAccessChain %618 %85 
                                               OpStore %824 %823 
                         Private f32* %825 = OpAccessChain %87 %58 
                                  f32 %826 = OpLoad %825 
                                  f32 %827 = OpFMul %826 %250 
                         Private f32* %828 = OpAccessChain %618 %600 
                                  f32 %829 = OpLoad %828 
                                  f32 %830 = OpFAdd %827 %829 
                         Private f32* %831 = OpAccessChain %449 %85 
                                               OpStore %831 %830 
                         Private i32* %832 = OpAccessChain %545 %58 
                                  i32 %833 = OpLoad %832 
                                 bool %834 = OpINotEqual %833 %25 
                                               OpSelectionMerge %837 None 
                                               OpBranchConditional %834 %836 %840 
                                      %836 = OpLabel 
                         Private f32* %838 = OpAccessChain %618 %600 
                                  f32 %839 = OpLoad %838 
                                               OpStore %835 %839 
                                               OpBranch %837 
                                      %840 = OpLabel 
                         Private f32* %841 = OpAccessChain %449 %85 
                                  f32 %842 = OpLoad %841 
                                               OpStore %835 %842 
                                               OpBranch %837 
                                      %837 = OpLabel 
                                  f32 %843 = OpLoad %835 
                         Private f32* %844 = OpAccessChain %618 %600 
                                               OpStore %844 %843 
                                  i32 %845 = OpLoad %609 
                                 bool %846 = OpINotEqual %845 %25 
                                               OpSelectionMerge %848 None 
                                               OpBranchConditional %846 %847 %848 
                                      %847 = OpLabel 
                         Private i32* %849 = OpAccessChain %545 %85 
                                  i32 %850 = OpLoad %849 
                                 bool %851 = OpIEqual %850 %25 
                                               OpSelectionMerge %853 None 
                                               OpBranchConditional %851 %852 %853 
                                      %852 = OpLabel 
                                f32_3 %854 = OpLoad %226 
                                f32_2 %855 = OpVectorShuffle %854 %854 0 2 
                                               OpStore %449 %855 
                                f32_2 %856 = OpLoad %449 
                                f32_2 %857 = OpCompositeConstruct %14 %14 
                                f32_2 %858 = OpCompositeConstruct %15 %15 
                                f32_2 %859 = OpExtInst %1 43 %856 %857 %858 
                                               OpStore %449 %859 
                                f32_2 %860 = OpLoad %449 
                         Uniform f32* %861 = OpAccessChain %23 %25 
                                  f32 %862 = OpLoad %861 
                                f32_2 %863 = OpCompositeConstruct %862 %862 
                                f32_2 %864 = OpFMul %860 %863 
                                               OpStore %449 %864 
                  read_only Texture2D %865 = OpLoad %36 
                              sampler %866 = OpLoad %40 
           read_only Texture2DSampled %867 = OpSampledImage %865 %866 
                                f32_2 %868 = OpLoad %449 
                                f32_4 %869 = OpImageSampleExplicitLod %867 %868 Lod %20 
                                  f32 %870 = OpCompositeExtract %869 1 
                         Private f32* %871 = OpAccessChain %111 %85 
                                               OpStore %871 %870 
                                               OpBranch %853 
                                      %853 = OpLabel 
                         Private i32* %872 = OpAccessChain %545 %58 
                                  i32 %873 = OpLoad %872 
                                 bool %874 = OpIEqual %873 %25 
                                               OpSelectionMerge %876 None 
                                               OpBranchConditional %874 %875 %876 
                                      %875 = OpLabel 
                                f32_3 %877 = OpLoad %618 
                                f32_2 %878 = OpVectorShuffle %877 %877 0 2 
                                               OpStore %449 %878 
                                f32_2 %879 = OpLoad %449 
                                f32_2 %880 = OpCompositeConstruct %14 %14 
                                f32_2 %881 = OpCompositeConstruct %15 %15 
                                f32_2 %882 = OpExtInst %1 43 %879 %880 %881 
                                               OpStore %449 %882 
                                f32_2 %883 = OpLoad %449 
                         Uniform f32* %884 = OpAccessChain %23 %25 
                                  f32 %885 = OpLoad %884 
                                f32_2 %886 = OpCompositeConstruct %885 %885 
                                f32_2 %887 = OpFMul %883 %886 
                                               OpStore %449 %887 
                  read_only Texture2D %888 = OpLoad %36 
                              sampler %889 = OpLoad %40 
           read_only Texture2DSampled %890 = OpSampledImage %888 %889 
                                f32_2 %891 = OpLoad %449 
                                f32_4 %892 = OpImageSampleExplicitLod %890 %891 Lod %20 
                                  f32 %893 = OpCompositeExtract %892 1 
                         Private f32* %894 = OpAccessChain %111 %58 
                                               OpStore %894 %893 
                                               OpBranch %876 
                                      %876 = OpLabel 
                                  f32 %895 = OpLoad %48 
                                  f32 %896 = OpFNegate %895 
                                  f32 %897 = OpFMul %896 %412 
                         Private f32* %898 = OpAccessChain %111 %85 
                                  f32 %899 = OpLoad %898 
                                  f32 %900 = OpFAdd %897 %899 
                                               OpStore %106 %900 
                         Private i32* %901 = OpAccessChain %545 %85 
                                  i32 %902 = OpLoad %901 
                                 bool %903 = OpINotEqual %902 %25 
                                               OpSelectionMerge %906 None 
                                               OpBranchConditional %903 %905 %909 
                                      %905 = OpLabel 
                         Private f32* %907 = OpAccessChain %111 %85 
                                  f32 %908 = OpLoad %907 
                                               OpStore %904 %908 
                                               OpBranch %906 
                                      %909 = OpLabel 
                                  f32 %910 = OpLoad %106 
                                               OpStore %904 %910 
                                               OpBranch %906 
                                      %906 = OpLabel 
                                  f32 %911 = OpLoad %904 
                         Private f32* %912 = OpAccessChain %111 %85 
                                               OpStore %912 %911 
                                  f32 %913 = OpLoad %48 
                                  f32 %914 = OpFNegate %913 
                                  f32 %915 = OpFMul %914 %412 
                         Private f32* %916 = OpAccessChain %111 %58 
                                  f32 %917 = OpLoad %916 
                                  f32 %918 = OpFAdd %915 %917 
                                               OpStore %106 %918 
                         Private i32* %919 = OpAccessChain %545 %58 
                                  i32 %920 = OpLoad %919 
                                 bool %921 = OpINotEqual %920 %25 
                                               OpSelectionMerge %924 None 
                                               OpBranchConditional %921 %923 %927 
                                      %923 = OpLabel 
                         Private f32* %925 = OpAccessChain %111 %58 
                                  f32 %926 = OpLoad %925 
                                               OpStore %922 %926 
                                               OpBranch %924 
                                      %927 = OpLabel 
                                  f32 %928 = OpLoad %106 
                                               OpStore %922 %928 
                                               OpBranch %924 
                                      %924 = OpLabel 
                                  f32 %929 = OpLoad %922 
                         Private f32* %930 = OpAccessChain %111 %58 
                                               OpStore %930 %929 
                                f32_3 %931 = OpLoad %111 
                                f32_4 %932 = OpVectorShuffle %931 %931 0 1 0 1 
                                f32_4 %933 = OpExtInst %1 4 %932 
                                  f32 %934 = OpLoad %68 
                                f32_4 %935 = OpCompositeConstruct %934 %934 %934 %934 
                               bool_4 %936 = OpFOrdGreaterThanEqual %933 %935 
                               bool_2 %937 = OpVectorShuffle %936 %936 0 1 
                                u32_2 %938 = OpSelect %937 %557 %556 
                                u32_2 %939 = OpCompositeConstruct %527 %527 
                                u32_2 %940 = OpIMul %938 %939 
                                i32_2 %941 = OpBitcast %940 
                                               OpStore %545 %941 
                         Private f32* %942 = OpAccessChain %87 %85 
                                  f32 %943 = OpLoad %942 
                                  f32 %944 = OpFNegate %943 
                                  f32 %945 = OpFMul %944 %250 
                         Private f32* %946 = OpAccessChain %226 %85 
                                  f32 %947 = OpLoad %946 
                                  f32 %948 = OpFAdd %945 %947 
                                               OpStore %106 %948 
                         Private i32* %949 = OpAccessChain %545 %85 
                                  i32 %950 = OpLoad %949 
                                 bool %951 = OpINotEqual %950 %25 
                                               OpSelectionMerge %954 None 
                                               OpBranchConditional %951 %953 %957 
                                      %953 = OpLabel 
                         Private f32* %955 = OpAccessChain %226 %85 
                                  f32 %956 = OpLoad %955 
                                               OpStore %952 %956 
                                               OpBranch %954 
                                      %957 = OpLabel 
                                  f32 %958 = OpLoad %106 
                                               OpStore %952 %958 
                                               OpBranch %954 
                                      %954 = OpLabel 
                                  f32 %959 = OpLoad %952 
                         Private f32* %960 = OpAccessChain %226 %85 
                                               OpStore %960 %959 
                         Private f32* %961 = OpAccessChain %87 %58 
                                  f32 %962 = OpLoad %961 
                                  f32 %963 = OpFNegate %962 
                                  f32 %964 = OpFMul %963 %250 
                         Private f32* %965 = OpAccessChain %226 %600 
                                  f32 %966 = OpLoad %965 
                                  f32 %967 = OpFAdd %964 %966 
                                               OpStore %106 %967 
                         Private i32* %968 = OpAccessChain %545 %85 
                                  i32 %969 = OpLoad %968 
                                 bool %970 = OpINotEqual %969 %25 
                                               OpSelectionMerge %973 None 
                                               OpBranchConditional %970 %972 %976 
                                      %972 = OpLabel 
                         Private f32* %974 = OpAccessChain %226 %600 
                                  f32 %975 = OpLoad %974 
                                               OpStore %971 %975 
                                               OpBranch %973 
                                      %976 = OpLabel 
                                  f32 %977 = OpLoad %106 
                                               OpStore %971 %977 
                                               OpBranch %973 
                                      %973 = OpLabel 
                                  f32 %978 = OpLoad %971 
                         Private f32* %979 = OpAccessChain %226 %600 
                                               OpStore %979 %978 
                                i32_2 %980 = OpLoad %545 
                                i32_2 %981 = OpNot %980 
                                               OpStore %794 %981 
                         Private i32* %982 = OpAccessChain %794 %58 
                                  i32 %983 = OpLoad %982 
                                  u32 %984 = OpBitcast %983 
                         Private i32* %985 = OpAccessChain %794 %85 
                                  i32 %986 = OpLoad %985 
                                  u32 %987 = OpBitcast %986 
                                  u32 %988 = OpBitwiseOr %984 %987 
                                  i32 %989 = OpBitcast %988 
                                               OpStore %609 %989 
                         Private f32* %990 = OpAccessChain %87 %85 
                                  f32 %991 = OpLoad %990 
                                  f32 %992 = OpFMul %991 %250 
                         Private f32* %993 = OpAccessChain %618 %85 
                                  f32 %994 = OpLoad %993 
                                  f32 %995 = OpFAdd %992 %994 
                         Private f32* %996 = OpAccessChain %449 %85 
                                               OpStore %996 %995 
                         Private i32* %997 = OpAccessChain %545 %58 
                                  i32 %998 = OpLoad %997 
                                 bool %999 = OpINotEqual %998 %25 
                                               OpSelectionMerge %1002 None 
                                               OpBranchConditional %999 %1001 %1005 
                                     %1001 = OpLabel 
                        Private f32* %1003 = OpAccessChain %618 %85 
                                 f32 %1004 = OpLoad %1003 
                                               OpStore %1000 %1004 
                                               OpBranch %1002 
                                     %1005 = OpLabel 
                        Private f32* %1006 = OpAccessChain %449 %85 
                                 f32 %1007 = OpLoad %1006 
                                               OpStore %1000 %1007 
                                               OpBranch %1002 
                                     %1002 = OpLabel 
                                 f32 %1008 = OpLoad %1000 
                        Private f32* %1009 = OpAccessChain %618 %85 
                                               OpStore %1009 %1008 
                        Private f32* %1010 = OpAccessChain %87 %58 
                                 f32 %1011 = OpLoad %1010 
                                 f32 %1012 = OpFMul %1011 %250 
                        Private f32* %1013 = OpAccessChain %618 %600 
                                 f32 %1014 = OpLoad %1013 
                                 f32 %1015 = OpFAdd %1012 %1014 
                        Private f32* %1016 = OpAccessChain %449 %85 
                                               OpStore %1016 %1015 
                        Private i32* %1017 = OpAccessChain %545 %58 
                                 i32 %1018 = OpLoad %1017 
                                bool %1019 = OpINotEqual %1018 %25 
                                               OpSelectionMerge %1022 None 
                                               OpBranchConditional %1019 %1021 %1025 
                                     %1021 = OpLabel 
                        Private f32* %1023 = OpAccessChain %618 %600 
                                 f32 %1024 = OpLoad %1023 
                                               OpStore %1020 %1024 
                                               OpBranch %1022 
                                     %1025 = OpLabel 
                        Private f32* %1026 = OpAccessChain %449 %85 
                                 f32 %1027 = OpLoad %1026 
                                               OpStore %1020 %1027 
                                               OpBranch %1022 
                                     %1022 = OpLabel 
                                 f32 %1028 = OpLoad %1020 
                        Private f32* %1029 = OpAccessChain %618 %600 
                                               OpStore %1029 %1028 
                                 i32 %1030 = OpLoad %609 
                                bool %1031 = OpINotEqual %1030 %25 
                                               OpSelectionMerge %1033 None 
                                               OpBranchConditional %1031 %1032 %1033 
                                     %1032 = OpLabel 
                        Private i32* %1034 = OpAccessChain %545 %85 
                                 i32 %1035 = OpLoad %1034 
                                bool %1036 = OpIEqual %1035 %25 
                                               OpSelectionMerge %1038 None 
                                               OpBranchConditional %1036 %1037 %1038 
                                     %1037 = OpLabel 
                               f32_3 %1039 = OpLoad %226 
                               f32_2 %1040 = OpVectorShuffle %1039 %1039 0 2 
                                               OpStore %449 %1040 
                               f32_2 %1041 = OpLoad %449 
                               f32_2 %1042 = OpCompositeConstruct %14 %14 
                               f32_2 %1043 = OpCompositeConstruct %15 %15 
                               f32_2 %1044 = OpExtInst %1 43 %1041 %1042 %1043 
                                               OpStore %449 %1044 
                               f32_2 %1045 = OpLoad %449 
                        Uniform f32* %1046 = OpAccessChain %23 %25 
                                 f32 %1047 = OpLoad %1046 
                               f32_2 %1048 = OpCompositeConstruct %1047 %1047 
                               f32_2 %1049 = OpFMul %1045 %1048 
                                               OpStore %449 %1049 
                 read_only Texture2D %1050 = OpLoad %36 
                             sampler %1051 = OpLoad %40 
          read_only Texture2DSampled %1052 = OpSampledImage %1050 %1051 
                               f32_2 %1053 = OpLoad %449 
                               f32_4 %1054 = OpImageSampleExplicitLod %1052 %1053 Lod %20 
                                 f32 %1055 = OpCompositeExtract %1054 1 
                        Private f32* %1056 = OpAccessChain %111 %85 
                                               OpStore %1056 %1055 
                                               OpBranch %1038 
                                     %1038 = OpLabel 
                        Private i32* %1057 = OpAccessChain %545 %58 
                                 i32 %1058 = OpLoad %1057 
                                bool %1059 = OpIEqual %1058 %25 
                                               OpSelectionMerge %1061 None 
                                               OpBranchConditional %1059 %1060 %1061 
                                     %1060 = OpLabel 
                               f32_3 %1062 = OpLoad %618 
                               f32_2 %1063 = OpVectorShuffle %1062 %1062 0 2 
                                               OpStore %449 %1063 
                               f32_2 %1064 = OpLoad %449 
                               f32_2 %1065 = OpCompositeConstruct %14 %14 
                               f32_2 %1066 = OpCompositeConstruct %15 %15 
                               f32_2 %1067 = OpExtInst %1 43 %1064 %1065 %1066 
                                               OpStore %449 %1067 
                               f32_2 %1068 = OpLoad %449 
                        Uniform f32* %1069 = OpAccessChain %23 %25 
                                 f32 %1070 = OpLoad %1069 
                               f32_2 %1071 = OpCompositeConstruct %1070 %1070 
                               f32_2 %1072 = OpFMul %1068 %1071 
                                               OpStore %449 %1072 
                 read_only Texture2D %1073 = OpLoad %36 
                             sampler %1074 = OpLoad %40 
          read_only Texture2DSampled %1075 = OpSampledImage %1073 %1074 
                               f32_2 %1076 = OpLoad %449 
                               f32_4 %1077 = OpImageSampleExplicitLod %1075 %1076 Lod %20 
                                 f32 %1078 = OpCompositeExtract %1077 1 
                        Private f32* %1079 = OpAccessChain %111 %58 
                                               OpStore %1079 %1078 
                                               OpBranch %1061 
                                     %1061 = OpLabel 
                                 f32 %1080 = OpLoad %48 
                                 f32 %1081 = OpFNegate %1080 
                                 f32 %1082 = OpFMul %1081 %412 
                        Private f32* %1083 = OpAccessChain %111 %85 
                                 f32 %1084 = OpLoad %1083 
                                 f32 %1085 = OpFAdd %1082 %1084 
                                               OpStore %106 %1085 
                        Private i32* %1086 = OpAccessChain %545 %85 
                                 i32 %1087 = OpLoad %1086 
                                bool %1088 = OpINotEqual %1087 %25 
                                               OpSelectionMerge %1091 None 
                                               OpBranchConditional %1088 %1090 %1094 
                                     %1090 = OpLabel 
                        Private f32* %1092 = OpAccessChain %111 %85 
                                 f32 %1093 = OpLoad %1092 
                                               OpStore %1089 %1093 
                                               OpBranch %1091 
                                     %1094 = OpLabel 
                                 f32 %1095 = OpLoad %106 
                                               OpStore %1089 %1095 
                                               OpBranch %1091 
                                     %1091 = OpLabel 
                                 f32 %1096 = OpLoad %1089 
                        Private f32* %1097 = OpAccessChain %111 %85 
                                               OpStore %1097 %1096 
                                 f32 %1098 = OpLoad %48 
                                 f32 %1099 = OpFNegate %1098 
                                 f32 %1100 = OpFMul %1099 %412 
                        Private f32* %1101 = OpAccessChain %111 %58 
                                 f32 %1102 = OpLoad %1101 
                                 f32 %1103 = OpFAdd %1100 %1102 
                                               OpStore %106 %1103 
                        Private i32* %1104 = OpAccessChain %545 %58 
                                 i32 %1105 = OpLoad %1104 
                                bool %1106 = OpINotEqual %1105 %25 
                                               OpSelectionMerge %1109 None 
                                               OpBranchConditional %1106 %1108 %1112 
                                     %1108 = OpLabel 
                        Private f32* %1110 = OpAccessChain %111 %58 
                                 f32 %1111 = OpLoad %1110 
                                               OpStore %1107 %1111 
                                               OpBranch %1109 
                                     %1112 = OpLabel 
                                 f32 %1113 = OpLoad %106 
                                               OpStore %1107 %1113 
                                               OpBranch %1109 
                                     %1109 = OpLabel 
                                 f32 %1114 = OpLoad %1107 
                        Private f32* %1115 = OpAccessChain %111 %58 
                                               OpStore %1115 %1114 
                               f32_3 %1116 = OpLoad %111 
                               f32_4 %1117 = OpVectorShuffle %1116 %1116 0 1 0 1 
                               f32_4 %1118 = OpExtInst %1 4 %1117 
                                 f32 %1119 = OpLoad %68 
                               f32_4 %1120 = OpCompositeConstruct %1119 %1119 %1119 %1119 
                              bool_4 %1121 = OpFOrdGreaterThanEqual %1118 %1120 
                              bool_2 %1122 = OpVectorShuffle %1121 %1121 0 1 
                               u32_2 %1123 = OpSelect %1122 %557 %556 
                               u32_2 %1124 = OpCompositeConstruct %527 %527 
                               u32_2 %1125 = OpIMul %1123 %1124 
                               i32_2 %1126 = OpBitcast %1125 
                                               OpStore %545 %1126 
                        Private f32* %1127 = OpAccessChain %87 %85 
                                 f32 %1128 = OpLoad %1127 
                                 f32 %1129 = OpFNegate %1128 
                                 f32 %1130 = OpFMul %1129 %250 
                        Private f32* %1131 = OpAccessChain %226 %85 
                                 f32 %1132 = OpLoad %1131 
                                 f32 %1133 = OpFAdd %1130 %1132 
                                               OpStore %106 %1133 
                        Private i32* %1134 = OpAccessChain %545 %85 
                                 i32 %1135 = OpLoad %1134 
                                bool %1136 = OpINotEqual %1135 %25 
                                               OpSelectionMerge %1139 None 
                                               OpBranchConditional %1136 %1138 %1142 
                                     %1138 = OpLabel 
                        Private f32* %1140 = OpAccessChain %226 %85 
                                 f32 %1141 = OpLoad %1140 
                                               OpStore %1137 %1141 
                                               OpBranch %1139 
                                     %1142 = OpLabel 
                                 f32 %1143 = OpLoad %106 
                                               OpStore %1137 %1143 
                                               OpBranch %1139 
                                     %1139 = OpLabel 
                                 f32 %1144 = OpLoad %1137 
                        Private f32* %1145 = OpAccessChain %226 %85 
                                               OpStore %1145 %1144 
                        Private f32* %1146 = OpAccessChain %87 %58 
                                 f32 %1147 = OpLoad %1146 
                                 f32 %1148 = OpFNegate %1147 
                                 f32 %1149 = OpFMul %1148 %250 
                        Private f32* %1150 = OpAccessChain %226 %600 
                                 f32 %1151 = OpLoad %1150 
                                 f32 %1152 = OpFAdd %1149 %1151 
                                               OpStore %106 %1152 
                        Private i32* %1153 = OpAccessChain %545 %85 
                                 i32 %1154 = OpLoad %1153 
                                bool %1155 = OpINotEqual %1154 %25 
                                               OpSelectionMerge %1158 None 
                                               OpBranchConditional %1155 %1157 %1161 
                                     %1157 = OpLabel 
                        Private f32* %1159 = OpAccessChain %226 %600 
                                 f32 %1160 = OpLoad %1159 
                                               OpStore %1156 %1160 
                                               OpBranch %1158 
                                     %1161 = OpLabel 
                                 f32 %1162 = OpLoad %106 
                                               OpStore %1156 %1162 
                                               OpBranch %1158 
                                     %1158 = OpLabel 
                                 f32 %1163 = OpLoad %1156 
                        Private f32* %1164 = OpAccessChain %226 %600 
                                               OpStore %1164 %1163 
                               i32_2 %1165 = OpLoad %545 
                               i32_2 %1166 = OpNot %1165 
                                               OpStore %794 %1166 
                        Private i32* %1167 = OpAccessChain %794 %58 
                                 i32 %1168 = OpLoad %1167 
                                 u32 %1169 = OpBitcast %1168 
                        Private i32* %1170 = OpAccessChain %794 %85 
                                 i32 %1171 = OpLoad %1170 
                                 u32 %1172 = OpBitcast %1171 
                                 u32 %1173 = OpBitwiseOr %1169 %1172 
                                 i32 %1174 = OpBitcast %1173 
                                               OpStore %609 %1174 
                        Private f32* %1175 = OpAccessChain %87 %85 
                                 f32 %1176 = OpLoad %1175 
                                 f32 %1177 = OpFMul %1176 %250 
                        Private f32* %1178 = OpAccessChain %618 %85 
                                 f32 %1179 = OpLoad %1178 
                                 f32 %1180 = OpFAdd %1177 %1179 
                        Private f32* %1181 = OpAccessChain %449 %85 
                                               OpStore %1181 %1180 
                        Private i32* %1182 = OpAccessChain %545 %58 
                                 i32 %1183 = OpLoad %1182 
                                bool %1184 = OpINotEqual %1183 %25 
                                               OpSelectionMerge %1187 None 
                                               OpBranchConditional %1184 %1186 %1190 
                                     %1186 = OpLabel 
                        Private f32* %1188 = OpAccessChain %618 %85 
                                 f32 %1189 = OpLoad %1188 
                                               OpStore %1185 %1189 
                                               OpBranch %1187 
                                     %1190 = OpLabel 
                        Private f32* %1191 = OpAccessChain %449 %85 
                                 f32 %1192 = OpLoad %1191 
                                               OpStore %1185 %1192 
                                               OpBranch %1187 
                                     %1187 = OpLabel 
                                 f32 %1193 = OpLoad %1185 
                        Private f32* %1194 = OpAccessChain %618 %85 
                                               OpStore %1194 %1193 
                        Private f32* %1195 = OpAccessChain %87 %58 
                                 f32 %1196 = OpLoad %1195 
                                 f32 %1197 = OpFMul %1196 %250 
                        Private f32* %1198 = OpAccessChain %618 %600 
                                 f32 %1199 = OpLoad %1198 
                                 f32 %1200 = OpFAdd %1197 %1199 
                        Private f32* %1201 = OpAccessChain %449 %85 
                                               OpStore %1201 %1200 
                        Private i32* %1202 = OpAccessChain %545 %58 
                                 i32 %1203 = OpLoad %1202 
                                bool %1204 = OpINotEqual %1203 %25 
                                               OpSelectionMerge %1207 None 
                                               OpBranchConditional %1204 %1206 %1210 
                                     %1206 = OpLabel 
                        Private f32* %1208 = OpAccessChain %618 %600 
                                 f32 %1209 = OpLoad %1208 
                                               OpStore %1205 %1209 
                                               OpBranch %1207 
                                     %1210 = OpLabel 
                        Private f32* %1211 = OpAccessChain %449 %85 
                                 f32 %1212 = OpLoad %1211 
                                               OpStore %1205 %1212 
                                               OpBranch %1207 
                                     %1207 = OpLabel 
                                 f32 %1213 = OpLoad %1205 
                        Private f32* %1214 = OpAccessChain %618 %600 
                                               OpStore %1214 %1213 
                                 i32 %1215 = OpLoad %609 
                                bool %1216 = OpINotEqual %1215 %25 
                                               OpSelectionMerge %1218 None 
                                               OpBranchConditional %1216 %1217 %1218 
                                     %1217 = OpLabel 
                        Private i32* %1219 = OpAccessChain %545 %85 
                                 i32 %1220 = OpLoad %1219 
                                bool %1221 = OpIEqual %1220 %25 
                                               OpSelectionMerge %1223 None 
                                               OpBranchConditional %1221 %1222 %1223 
                                     %1222 = OpLabel 
                               f32_3 %1224 = OpLoad %226 
                               f32_2 %1225 = OpVectorShuffle %1224 %1224 0 2 
                                               OpStore %449 %1225 
                               f32_2 %1226 = OpLoad %449 
                               f32_2 %1227 = OpCompositeConstruct %14 %14 
                               f32_2 %1228 = OpCompositeConstruct %15 %15 
                               f32_2 %1229 = OpExtInst %1 43 %1226 %1227 %1228 
                                               OpStore %449 %1229 
                               f32_2 %1230 = OpLoad %449 
                        Uniform f32* %1231 = OpAccessChain %23 %25 
                                 f32 %1232 = OpLoad %1231 
                               f32_2 %1233 = OpCompositeConstruct %1232 %1232 
                               f32_2 %1234 = OpFMul %1230 %1233 
                                               OpStore %449 %1234 
                 read_only Texture2D %1235 = OpLoad %36 
                             sampler %1236 = OpLoad %40 
          read_only Texture2DSampled %1237 = OpSampledImage %1235 %1236 
                               f32_2 %1238 = OpLoad %449 
                               f32_4 %1239 = OpImageSampleExplicitLod %1237 %1238 Lod %20 
                                 f32 %1240 = OpCompositeExtract %1239 1 
                        Private f32* %1241 = OpAccessChain %111 %85 
                                               OpStore %1241 %1240 
                                               OpBranch %1223 
                                     %1223 = OpLabel 
                        Private i32* %1242 = OpAccessChain %545 %58 
                                 i32 %1243 = OpLoad %1242 
                                bool %1244 = OpIEqual %1243 %25 
                                               OpSelectionMerge %1246 None 
                                               OpBranchConditional %1244 %1245 %1246 
                                     %1245 = OpLabel 
                               f32_3 %1247 = OpLoad %618 
                               f32_2 %1248 = OpVectorShuffle %1247 %1247 0 2 
                                               OpStore %449 %1248 
                               f32_2 %1249 = OpLoad %449 
                               f32_2 %1250 = OpCompositeConstruct %14 %14 
                               f32_2 %1251 = OpCompositeConstruct %15 %15 
                               f32_2 %1252 = OpExtInst %1 43 %1249 %1250 %1251 
                                               OpStore %449 %1252 
                               f32_2 %1253 = OpLoad %449 
                        Uniform f32* %1254 = OpAccessChain %23 %25 
                                 f32 %1255 = OpLoad %1254 
                               f32_2 %1256 = OpCompositeConstruct %1255 %1255 
                               f32_2 %1257 = OpFMul %1253 %1256 
                                               OpStore %449 %1257 
                 read_only Texture2D %1258 = OpLoad %36 
                             sampler %1259 = OpLoad %40 
          read_only Texture2DSampled %1260 = OpSampledImage %1258 %1259 
                               f32_2 %1261 = OpLoad %449 
                               f32_4 %1262 = OpImageSampleExplicitLod %1260 %1261 Lod %20 
                                 f32 %1263 = OpCompositeExtract %1262 1 
                        Private f32* %1264 = OpAccessChain %111 %58 
                                               OpStore %1264 %1263 
                                               OpBranch %1246 
                                     %1246 = OpLabel 
                                 f32 %1265 = OpLoad %48 
                                 f32 %1266 = OpFNegate %1265 
                                 f32 %1267 = OpFMul %1266 %412 
                        Private f32* %1268 = OpAccessChain %111 %85 
                                 f32 %1269 = OpLoad %1268 
                                 f32 %1270 = OpFAdd %1267 %1269 
                                               OpStore %106 %1270 
                        Private i32* %1271 = OpAccessChain %545 %85 
                                 i32 %1272 = OpLoad %1271 
                                bool %1273 = OpINotEqual %1272 %25 
                                               OpSelectionMerge %1276 None 
                                               OpBranchConditional %1273 %1275 %1279 
                                     %1275 = OpLabel 
                        Private f32* %1277 = OpAccessChain %111 %85 
                                 f32 %1278 = OpLoad %1277 
                                               OpStore %1274 %1278 
                                               OpBranch %1276 
                                     %1279 = OpLabel 
                                 f32 %1280 = OpLoad %106 
                                               OpStore %1274 %1280 
                                               OpBranch %1276 
                                     %1276 = OpLabel 
                                 f32 %1281 = OpLoad %1274 
                        Private f32* %1282 = OpAccessChain %111 %85 
                                               OpStore %1282 %1281 
                                 f32 %1283 = OpLoad %48 
                                 f32 %1284 = OpFNegate %1283 
                                 f32 %1285 = OpFMul %1284 %412 
                        Private f32* %1286 = OpAccessChain %111 %58 
                                 f32 %1287 = OpLoad %1286 
                                 f32 %1288 = OpFAdd %1285 %1287 
                                               OpStore %106 %1288 
                        Private i32* %1289 = OpAccessChain %545 %58 
                                 i32 %1290 = OpLoad %1289 
                                bool %1291 = OpINotEqual %1290 %25 
                                               OpSelectionMerge %1294 None 
                                               OpBranchConditional %1291 %1293 %1297 
                                     %1293 = OpLabel 
                        Private f32* %1295 = OpAccessChain %111 %58 
                                 f32 %1296 = OpLoad %1295 
                                               OpStore %1292 %1296 
                                               OpBranch %1294 
                                     %1297 = OpLabel 
                                 f32 %1298 = OpLoad %106 
                                               OpStore %1292 %1298 
                                               OpBranch %1294 
                                     %1294 = OpLabel 
                                 f32 %1299 = OpLoad %1292 
                        Private f32* %1300 = OpAccessChain %111 %58 
                                               OpStore %1300 %1299 
                               f32_3 %1301 = OpLoad %111 
                               f32_4 %1302 = OpVectorShuffle %1301 %1301 0 1 0 1 
                               f32_4 %1303 = OpExtInst %1 4 %1302 
                                 f32 %1304 = OpLoad %68 
                               f32_4 %1305 = OpCompositeConstruct %1304 %1304 %1304 %1304 
                              bool_4 %1306 = OpFOrdGreaterThanEqual %1303 %1305 
                              bool_2 %1307 = OpVectorShuffle %1306 %1306 0 1 
                               u32_2 %1308 = OpSelect %1307 %557 %556 
                               u32_2 %1309 = OpCompositeConstruct %527 %527 
                               u32_2 %1310 = OpIMul %1308 %1309 
                               i32_2 %1311 = OpBitcast %1310 
                                               OpStore %545 %1311 
                        Private f32* %1312 = OpAccessChain %87 %85 
                                 f32 %1313 = OpLoad %1312 
                                 f32 %1314 = OpFNegate %1313 
                                 f32 %1315 = OpFMul %1314 %250 
                        Private f32* %1316 = OpAccessChain %226 %85 
                                 f32 %1317 = OpLoad %1316 
                                 f32 %1318 = OpFAdd %1315 %1317 
                                               OpStore %106 %1318 
                        Private i32* %1319 = OpAccessChain %545 %85 
                                 i32 %1320 = OpLoad %1319 
                                bool %1321 = OpINotEqual %1320 %25 
                                               OpSelectionMerge %1324 None 
                                               OpBranchConditional %1321 %1323 %1327 
                                     %1323 = OpLabel 
                        Private f32* %1325 = OpAccessChain %226 %85 
                                 f32 %1326 = OpLoad %1325 
                                               OpStore %1322 %1326 
                                               OpBranch %1324 
                                     %1327 = OpLabel 
                                 f32 %1328 = OpLoad %106 
                                               OpStore %1322 %1328 
                                               OpBranch %1324 
                                     %1324 = OpLabel 
                                 f32 %1329 = OpLoad %1322 
                        Private f32* %1330 = OpAccessChain %226 %85 
                                               OpStore %1330 %1329 
                        Private f32* %1331 = OpAccessChain %87 %58 
                                 f32 %1332 = OpLoad %1331 
                                 f32 %1333 = OpFNegate %1332 
                                 f32 %1334 = OpFMul %1333 %250 
                        Private f32* %1335 = OpAccessChain %226 %600 
                                 f32 %1336 = OpLoad %1335 
                                 f32 %1337 = OpFAdd %1334 %1336 
                                               OpStore %106 %1337 
                        Private i32* %1338 = OpAccessChain %545 %85 
                                 i32 %1339 = OpLoad %1338 
                                bool %1340 = OpINotEqual %1339 %25 
                                               OpSelectionMerge %1343 None 
                                               OpBranchConditional %1340 %1342 %1346 
                                     %1342 = OpLabel 
                        Private f32* %1344 = OpAccessChain %226 %600 
                                 f32 %1345 = OpLoad %1344 
                                               OpStore %1341 %1345 
                                               OpBranch %1343 
                                     %1346 = OpLabel 
                                 f32 %1347 = OpLoad %106 
                                               OpStore %1341 %1347 
                                               OpBranch %1343 
                                     %1343 = OpLabel 
                                 f32 %1348 = OpLoad %1341 
                        Private f32* %1349 = OpAccessChain %226 %600 
                                               OpStore %1349 %1348 
                               i32_2 %1350 = OpLoad %545 
                               i32_2 %1351 = OpNot %1350 
                                               OpStore %794 %1351 
                        Private i32* %1352 = OpAccessChain %794 %58 
                                 i32 %1353 = OpLoad %1352 
                                 u32 %1354 = OpBitcast %1353 
                        Private i32* %1355 = OpAccessChain %794 %85 
                                 i32 %1356 = OpLoad %1355 
                                 u32 %1357 = OpBitcast %1356 
                                 u32 %1358 = OpBitwiseOr %1354 %1357 
                                 i32 %1359 = OpBitcast %1358 
                                               OpStore %609 %1359 
                        Private f32* %1360 = OpAccessChain %87 %85 
                                 f32 %1361 = OpLoad %1360 
                                 f32 %1362 = OpFMul %1361 %250 
                        Private f32* %1363 = OpAccessChain %618 %85 
                                 f32 %1364 = OpLoad %1363 
                                 f32 %1365 = OpFAdd %1362 %1364 
                        Private f32* %1366 = OpAccessChain %449 %85 
                                               OpStore %1366 %1365 
                        Private i32* %1367 = OpAccessChain %545 %58 
                                 i32 %1368 = OpLoad %1367 
                                bool %1369 = OpINotEqual %1368 %25 
                                               OpSelectionMerge %1372 None 
                                               OpBranchConditional %1369 %1371 %1375 
                                     %1371 = OpLabel 
                        Private f32* %1373 = OpAccessChain %618 %85 
                                 f32 %1374 = OpLoad %1373 
                                               OpStore %1370 %1374 
                                               OpBranch %1372 
                                     %1375 = OpLabel 
                        Private f32* %1376 = OpAccessChain %449 %85 
                                 f32 %1377 = OpLoad %1376 
                                               OpStore %1370 %1377 
                                               OpBranch %1372 
                                     %1372 = OpLabel 
                                 f32 %1378 = OpLoad %1370 
                        Private f32* %1379 = OpAccessChain %618 %85 
                                               OpStore %1379 %1378 
                        Private f32* %1380 = OpAccessChain %87 %58 
                                 f32 %1381 = OpLoad %1380 
                                 f32 %1382 = OpFMul %1381 %250 
                        Private f32* %1383 = OpAccessChain %618 %600 
                                 f32 %1384 = OpLoad %1383 
                                 f32 %1385 = OpFAdd %1382 %1384 
                        Private f32* %1386 = OpAccessChain %449 %85 
                                               OpStore %1386 %1385 
                        Private i32* %1387 = OpAccessChain %545 %58 
                                 i32 %1388 = OpLoad %1387 
                                bool %1389 = OpINotEqual %1388 %25 
                                               OpSelectionMerge %1392 None 
                                               OpBranchConditional %1389 %1391 %1395 
                                     %1391 = OpLabel 
                        Private f32* %1393 = OpAccessChain %618 %600 
                                 f32 %1394 = OpLoad %1393 
                                               OpStore %1390 %1394 
                                               OpBranch %1392 
                                     %1395 = OpLabel 
                        Private f32* %1396 = OpAccessChain %449 %85 
                                 f32 %1397 = OpLoad %1396 
                                               OpStore %1390 %1397 
                                               OpBranch %1392 
                                     %1392 = OpLabel 
                                 f32 %1398 = OpLoad %1390 
                        Private f32* %1399 = OpAccessChain %618 %600 
                                               OpStore %1399 %1398 
                                 i32 %1400 = OpLoad %609 
                                bool %1401 = OpINotEqual %1400 %25 
                                               OpSelectionMerge %1403 None 
                                               OpBranchConditional %1401 %1402 %1403 
                                     %1402 = OpLabel 
                        Private i32* %1404 = OpAccessChain %545 %85 
                                 i32 %1405 = OpLoad %1404 
                                bool %1406 = OpIEqual %1405 %25 
                                               OpSelectionMerge %1408 None 
                                               OpBranchConditional %1406 %1407 %1408 
                                     %1407 = OpLabel 
                               f32_3 %1409 = OpLoad %226 
                               f32_2 %1410 = OpVectorShuffle %1409 %1409 0 2 
                                               OpStore %449 %1410 
                               f32_2 %1411 = OpLoad %449 
                               f32_2 %1412 = OpCompositeConstruct %14 %14 
                               f32_2 %1413 = OpCompositeConstruct %15 %15 
                               f32_2 %1414 = OpExtInst %1 43 %1411 %1412 %1413 
                                               OpStore %449 %1414 
                               f32_2 %1415 = OpLoad %449 
                        Uniform f32* %1416 = OpAccessChain %23 %25 
                                 f32 %1417 = OpLoad %1416 
                               f32_2 %1418 = OpCompositeConstruct %1417 %1417 
                               f32_2 %1419 = OpFMul %1415 %1418 
                                               OpStore %449 %1419 
                 read_only Texture2D %1420 = OpLoad %36 
                             sampler %1421 = OpLoad %40 
          read_only Texture2DSampled %1422 = OpSampledImage %1420 %1421 
                               f32_2 %1423 = OpLoad %449 
                               f32_4 %1424 = OpImageSampleExplicitLod %1422 %1423 Lod %20 
                                 f32 %1425 = OpCompositeExtract %1424 1 
                        Private f32* %1426 = OpAccessChain %111 %85 
                                               OpStore %1426 %1425 
                                               OpBranch %1408 
                                     %1408 = OpLabel 
                        Private i32* %1427 = OpAccessChain %545 %58 
                                 i32 %1428 = OpLoad %1427 
                                bool %1429 = OpIEqual %1428 %25 
                                               OpSelectionMerge %1431 None 
                                               OpBranchConditional %1429 %1430 %1431 
                                     %1430 = OpLabel 
                               f32_3 %1432 = OpLoad %618 
                               f32_2 %1433 = OpVectorShuffle %1432 %1432 0 2 
                                               OpStore %449 %1433 
                               f32_2 %1434 = OpLoad %449 
                               f32_2 %1435 = OpCompositeConstruct %14 %14 
                               f32_2 %1436 = OpCompositeConstruct %15 %15 
                               f32_2 %1437 = OpExtInst %1 43 %1434 %1435 %1436 
                                               OpStore %449 %1437 
                               f32_2 %1438 = OpLoad %449 
                        Uniform f32* %1439 = OpAccessChain %23 %25 
                                 f32 %1440 = OpLoad %1439 
                               f32_2 %1441 = OpCompositeConstruct %1440 %1440 
                               f32_2 %1442 = OpFMul %1438 %1441 
                                               OpStore %449 %1442 
                 read_only Texture2D %1443 = OpLoad %36 
                             sampler %1444 = OpLoad %40 
          read_only Texture2DSampled %1445 = OpSampledImage %1443 %1444 
                               f32_2 %1446 = OpLoad %449 
                               f32_4 %1447 = OpImageSampleExplicitLod %1445 %1446 Lod %20 
                                 f32 %1448 = OpCompositeExtract %1447 1 
                        Private f32* %1449 = OpAccessChain %111 %58 
                                               OpStore %1449 %1448 
                                               OpBranch %1431 
                                     %1431 = OpLabel 
                                 f32 %1450 = OpLoad %48 
                                 f32 %1451 = OpFNegate %1450 
                                 f32 %1452 = OpFMul %1451 %412 
                        Private f32* %1453 = OpAccessChain %111 %85 
                                 f32 %1454 = OpLoad %1453 
                                 f32 %1455 = OpFAdd %1452 %1454 
                                               OpStore %106 %1455 
                        Private i32* %1456 = OpAccessChain %545 %85 
                                 i32 %1457 = OpLoad %1456 
                                bool %1458 = OpINotEqual %1457 %25 
                                               OpSelectionMerge %1461 None 
                                               OpBranchConditional %1458 %1460 %1464 
                                     %1460 = OpLabel 
                        Private f32* %1462 = OpAccessChain %111 %85 
                                 f32 %1463 = OpLoad %1462 
                                               OpStore %1459 %1463 
                                               OpBranch %1461 
                                     %1464 = OpLabel 
                                 f32 %1465 = OpLoad %106 
                                               OpStore %1459 %1465 
                                               OpBranch %1461 
                                     %1461 = OpLabel 
                                 f32 %1466 = OpLoad %1459 
                        Private f32* %1467 = OpAccessChain %111 %85 
                                               OpStore %1467 %1466 
                                 f32 %1468 = OpLoad %48 
                                 f32 %1469 = OpFNegate %1468 
                                 f32 %1470 = OpFMul %1469 %412 
                        Private f32* %1471 = OpAccessChain %111 %58 
                                 f32 %1472 = OpLoad %1471 
                                 f32 %1473 = OpFAdd %1470 %1472 
                                               OpStore %106 %1473 
                        Private i32* %1474 = OpAccessChain %545 %58 
                                 i32 %1475 = OpLoad %1474 
                                bool %1476 = OpINotEqual %1475 %25 
                                               OpSelectionMerge %1479 None 
                                               OpBranchConditional %1476 %1478 %1482 
                                     %1478 = OpLabel 
                        Private f32* %1480 = OpAccessChain %111 %58 
                                 f32 %1481 = OpLoad %1480 
                                               OpStore %1477 %1481 
                                               OpBranch %1479 
                                     %1482 = OpLabel 
                                 f32 %1483 = OpLoad %106 
                                               OpStore %1477 %1483 
                                               OpBranch %1479 
                                     %1479 = OpLabel 
                                 f32 %1484 = OpLoad %1477 
                        Private f32* %1485 = OpAccessChain %111 %58 
                                               OpStore %1485 %1484 
                               f32_3 %1486 = OpLoad %111 
                               f32_4 %1487 = OpVectorShuffle %1486 %1486 0 1 0 1 
                               f32_4 %1488 = OpExtInst %1 4 %1487 
                                 f32 %1489 = OpLoad %68 
                               f32_4 %1490 = OpCompositeConstruct %1489 %1489 %1489 %1489 
                              bool_4 %1491 = OpFOrdGreaterThanEqual %1488 %1490 
                              bool_2 %1492 = OpVectorShuffle %1491 %1491 0 1 
                               u32_2 %1493 = OpSelect %1492 %557 %556 
                               u32_2 %1494 = OpCompositeConstruct %527 %527 
                               u32_2 %1495 = OpIMul %1493 %1494 
                               i32_2 %1496 = OpBitcast %1495 
                                               OpStore %545 %1496 
                        Private f32* %1497 = OpAccessChain %87 %85 
                                 f32 %1498 = OpLoad %1497 
                                 f32 %1499 = OpFNegate %1498 
                                 f32 %1500 = OpFMul %1499 %250 
                        Private f32* %1501 = OpAccessChain %226 %85 
                                 f32 %1502 = OpLoad %1501 
                                 f32 %1503 = OpFAdd %1500 %1502 
                                               OpStore %106 %1503 
                        Private i32* %1504 = OpAccessChain %545 %85 
                                 i32 %1505 = OpLoad %1504 
                                bool %1506 = OpINotEqual %1505 %25 
                                               OpSelectionMerge %1509 None 
                                               OpBranchConditional %1506 %1508 %1512 
                                     %1508 = OpLabel 
                        Private f32* %1510 = OpAccessChain %226 %85 
                                 f32 %1511 = OpLoad %1510 
                                               OpStore %1507 %1511 
                                               OpBranch %1509 
                                     %1512 = OpLabel 
                                 f32 %1513 = OpLoad %106 
                                               OpStore %1507 %1513 
                                               OpBranch %1509 
                                     %1509 = OpLabel 
                                 f32 %1514 = OpLoad %1507 
                        Private f32* %1515 = OpAccessChain %226 %85 
                                               OpStore %1515 %1514 
                        Private f32* %1516 = OpAccessChain %87 %58 
                                 f32 %1517 = OpLoad %1516 
                                 f32 %1518 = OpFNegate %1517 
                                 f32 %1519 = OpFMul %1518 %250 
                        Private f32* %1520 = OpAccessChain %226 %600 
                                 f32 %1521 = OpLoad %1520 
                                 f32 %1522 = OpFAdd %1519 %1521 
                                               OpStore %106 %1522 
                        Private i32* %1523 = OpAccessChain %545 %85 
                                 i32 %1524 = OpLoad %1523 
                                bool %1525 = OpINotEqual %1524 %25 
                                               OpSelectionMerge %1528 None 
                                               OpBranchConditional %1525 %1527 %1531 
                                     %1527 = OpLabel 
                        Private f32* %1529 = OpAccessChain %226 %600 
                                 f32 %1530 = OpLoad %1529 
                                               OpStore %1526 %1530 
                                               OpBranch %1528 
                                     %1531 = OpLabel 
                                 f32 %1532 = OpLoad %106 
                                               OpStore %1526 %1532 
                                               OpBranch %1528 
                                     %1528 = OpLabel 
                                 f32 %1533 = OpLoad %1526 
                        Private f32* %1534 = OpAccessChain %226 %600 
                                               OpStore %1534 %1533 
                               i32_2 %1535 = OpLoad %545 
                               i32_2 %1536 = OpNot %1535 
                                               OpStore %794 %1536 
                        Private i32* %1537 = OpAccessChain %794 %58 
                                 i32 %1538 = OpLoad %1537 
                                 u32 %1539 = OpBitcast %1538 
                        Private i32* %1540 = OpAccessChain %794 %85 
                                 i32 %1541 = OpLoad %1540 
                                 u32 %1542 = OpBitcast %1541 
                                 u32 %1543 = OpBitwiseOr %1539 %1542 
                                 i32 %1544 = OpBitcast %1543 
                                               OpStore %609 %1544 
                        Private f32* %1545 = OpAccessChain %87 %85 
                                 f32 %1546 = OpLoad %1545 
                                 f32 %1547 = OpFMul %1546 %250 
                        Private f32* %1548 = OpAccessChain %618 %85 
                                 f32 %1549 = OpLoad %1548 
                                 f32 %1550 = OpFAdd %1547 %1549 
                        Private f32* %1551 = OpAccessChain %449 %85 
                                               OpStore %1551 %1550 
                        Private i32* %1552 = OpAccessChain %545 %58 
                                 i32 %1553 = OpLoad %1552 
                                bool %1554 = OpINotEqual %1553 %25 
                                               OpSelectionMerge %1557 None 
                                               OpBranchConditional %1554 %1556 %1560 
                                     %1556 = OpLabel 
                        Private f32* %1558 = OpAccessChain %618 %85 
                                 f32 %1559 = OpLoad %1558 
                                               OpStore %1555 %1559 
                                               OpBranch %1557 
                                     %1560 = OpLabel 
                        Private f32* %1561 = OpAccessChain %449 %85 
                                 f32 %1562 = OpLoad %1561 
                                               OpStore %1555 %1562 
                                               OpBranch %1557 
                                     %1557 = OpLabel 
                                 f32 %1563 = OpLoad %1555 
                        Private f32* %1564 = OpAccessChain %618 %85 
                                               OpStore %1564 %1563 
                        Private f32* %1565 = OpAccessChain %87 %58 
                                 f32 %1566 = OpLoad %1565 
                                 f32 %1567 = OpFMul %1566 %250 
                        Private f32* %1568 = OpAccessChain %618 %600 
                                 f32 %1569 = OpLoad %1568 
                                 f32 %1570 = OpFAdd %1567 %1569 
                        Private f32* %1571 = OpAccessChain %449 %85 
                                               OpStore %1571 %1570 
                        Private i32* %1572 = OpAccessChain %545 %58 
                                 i32 %1573 = OpLoad %1572 
                                bool %1574 = OpINotEqual %1573 %25 
                                               OpSelectionMerge %1577 None 
                                               OpBranchConditional %1574 %1576 %1580 
                                     %1576 = OpLabel 
                        Private f32* %1578 = OpAccessChain %618 %600 
                                 f32 %1579 = OpLoad %1578 
                                               OpStore %1575 %1579 
                                               OpBranch %1577 
                                     %1580 = OpLabel 
                        Private f32* %1581 = OpAccessChain %449 %85 
                                 f32 %1582 = OpLoad %1581 
                                               OpStore %1575 %1582 
                                               OpBranch %1577 
                                     %1577 = OpLabel 
                                 f32 %1583 = OpLoad %1575 
                        Private f32* %1584 = OpAccessChain %618 %600 
                                               OpStore %1584 %1583 
                                 i32 %1585 = OpLoad %609 
                                bool %1586 = OpINotEqual %1585 %25 
                                               OpSelectionMerge %1588 None 
                                               OpBranchConditional %1586 %1587 %1588 
                                     %1587 = OpLabel 
                        Private i32* %1589 = OpAccessChain %545 %85 
                                 i32 %1590 = OpLoad %1589 
                                bool %1591 = OpIEqual %1590 %25 
                                               OpSelectionMerge %1593 None 
                                               OpBranchConditional %1591 %1592 %1593 
                                     %1592 = OpLabel 
                               f32_3 %1594 = OpLoad %226 
                               f32_2 %1595 = OpVectorShuffle %1594 %1594 0 2 
                                               OpStore %449 %1595 
                               f32_2 %1596 = OpLoad %449 
                               f32_2 %1597 = OpCompositeConstruct %14 %14 
                               f32_2 %1598 = OpCompositeConstruct %15 %15 
                               f32_2 %1599 = OpExtInst %1 43 %1596 %1597 %1598 
                                               OpStore %449 %1599 
                               f32_2 %1600 = OpLoad %449 
                        Uniform f32* %1601 = OpAccessChain %23 %25 
                                 f32 %1602 = OpLoad %1601 
                               f32_2 %1603 = OpCompositeConstruct %1602 %1602 
                               f32_2 %1604 = OpFMul %1600 %1603 
                                               OpStore %449 %1604 
                 read_only Texture2D %1605 = OpLoad %36 
                             sampler %1606 = OpLoad %40 
          read_only Texture2DSampled %1607 = OpSampledImage %1605 %1606 
                               f32_2 %1608 = OpLoad %449 
                               f32_4 %1609 = OpImageSampleExplicitLod %1607 %1608 Lod %20 
                                 f32 %1610 = OpCompositeExtract %1609 1 
                        Private f32* %1611 = OpAccessChain %111 %85 
                                               OpStore %1611 %1610 
                                               OpBranch %1593 
                                     %1593 = OpLabel 
                        Private i32* %1612 = OpAccessChain %545 %58 
                                 i32 %1613 = OpLoad %1612 
                                bool %1614 = OpIEqual %1613 %25 
                                               OpSelectionMerge %1616 None 
                                               OpBranchConditional %1614 %1615 %1616 
                                     %1615 = OpLabel 
                               f32_3 %1617 = OpLoad %618 
                               f32_2 %1618 = OpVectorShuffle %1617 %1617 0 2 
                                               OpStore %449 %1618 
                               f32_2 %1619 = OpLoad %449 
                               f32_2 %1620 = OpCompositeConstruct %14 %14 
                               f32_2 %1621 = OpCompositeConstruct %15 %15 
                               f32_2 %1622 = OpExtInst %1 43 %1619 %1620 %1621 
                                               OpStore %449 %1622 
                               f32_2 %1623 = OpLoad %449 
                        Uniform f32* %1624 = OpAccessChain %23 %25 
                                 f32 %1625 = OpLoad %1624 
                               f32_2 %1626 = OpCompositeConstruct %1625 %1625 
                               f32_2 %1627 = OpFMul %1623 %1626 
                                               OpStore %449 %1627 
                 read_only Texture2D %1628 = OpLoad %36 
                             sampler %1629 = OpLoad %40 
          read_only Texture2DSampled %1630 = OpSampledImage %1628 %1629 
                               f32_2 %1631 = OpLoad %449 
                               f32_4 %1632 = OpImageSampleExplicitLod %1630 %1631 Lod %20 
                                 f32 %1633 = OpCompositeExtract %1632 1 
                        Private f32* %1634 = OpAccessChain %111 %58 
                                               OpStore %1634 %1633 
                                               OpBranch %1616 
                                     %1616 = OpLabel 
                                 f32 %1635 = OpLoad %48 
                                 f32 %1636 = OpFNegate %1635 
                                 f32 %1637 = OpFMul %1636 %412 
                        Private f32* %1638 = OpAccessChain %111 %85 
                                 f32 %1639 = OpLoad %1638 
                                 f32 %1640 = OpFAdd %1637 %1639 
                                               OpStore %106 %1640 
                        Private i32* %1641 = OpAccessChain %545 %85 
                                 i32 %1642 = OpLoad %1641 
                                bool %1643 = OpINotEqual %1642 %25 
                                               OpSelectionMerge %1646 None 
                                               OpBranchConditional %1643 %1645 %1649 
                                     %1645 = OpLabel 
                        Private f32* %1647 = OpAccessChain %111 %85 
                                 f32 %1648 = OpLoad %1647 
                                               OpStore %1644 %1648 
                                               OpBranch %1646 
                                     %1649 = OpLabel 
                                 f32 %1650 = OpLoad %106 
                                               OpStore %1644 %1650 
                                               OpBranch %1646 
                                     %1646 = OpLabel 
                                 f32 %1651 = OpLoad %1644 
                        Private f32* %1652 = OpAccessChain %111 %85 
                                               OpStore %1652 %1651 
                                 f32 %1653 = OpLoad %48 
                                 f32 %1654 = OpFNegate %1653 
                                 f32 %1655 = OpFMul %1654 %412 
                        Private f32* %1656 = OpAccessChain %111 %58 
                                 f32 %1657 = OpLoad %1656 
                                 f32 %1658 = OpFAdd %1655 %1657 
                                               OpStore %106 %1658 
                        Private i32* %1659 = OpAccessChain %545 %58 
                                 i32 %1660 = OpLoad %1659 
                                bool %1661 = OpINotEqual %1660 %25 
                                               OpSelectionMerge %1664 None 
                                               OpBranchConditional %1661 %1663 %1667 
                                     %1663 = OpLabel 
                        Private f32* %1665 = OpAccessChain %111 %58 
                                 f32 %1666 = OpLoad %1665 
                                               OpStore %1662 %1666 
                                               OpBranch %1664 
                                     %1667 = OpLabel 
                                 f32 %1668 = OpLoad %106 
                                               OpStore %1662 %1668 
                                               OpBranch %1664 
                                     %1664 = OpLabel 
                                 f32 %1669 = OpLoad %1662 
                        Private f32* %1670 = OpAccessChain %111 %58 
                                               OpStore %1670 %1669 
                               f32_3 %1671 = OpLoad %111 
                               f32_4 %1672 = OpVectorShuffle %1671 %1671 0 1 0 1 
                               f32_4 %1673 = OpExtInst %1 4 %1672 
                                 f32 %1674 = OpLoad %68 
                               f32_4 %1675 = OpCompositeConstruct %1674 %1674 %1674 %1674 
                              bool_4 %1676 = OpFOrdGreaterThanEqual %1673 %1675 
                              bool_2 %1677 = OpVectorShuffle %1676 %1676 0 1 
                               u32_2 %1678 = OpSelect %1677 %557 %556 
                               u32_2 %1679 = OpCompositeConstruct %527 %527 
                               u32_2 %1680 = OpIMul %1678 %1679 
                               i32_2 %1681 = OpBitcast %1680 
                                               OpStore %545 %1681 
                        Private f32* %1682 = OpAccessChain %87 %85 
                                 f32 %1683 = OpLoad %1682 
                                 f32 %1684 = OpFNegate %1683 
                                 f32 %1685 = OpFMul %1684 %250 
                        Private f32* %1686 = OpAccessChain %226 %85 
                                 f32 %1687 = OpLoad %1686 
                                 f32 %1688 = OpFAdd %1685 %1687 
                                               OpStore %106 %1688 
                        Private i32* %1689 = OpAccessChain %545 %85 
                                 i32 %1690 = OpLoad %1689 
                                bool %1691 = OpINotEqual %1690 %25 
                                               OpSelectionMerge %1694 None 
                                               OpBranchConditional %1691 %1693 %1697 
                                     %1693 = OpLabel 
                        Private f32* %1695 = OpAccessChain %226 %85 
                                 f32 %1696 = OpLoad %1695 
                                               OpStore %1692 %1696 
                                               OpBranch %1694 
                                     %1697 = OpLabel 
                                 f32 %1698 = OpLoad %106 
                                               OpStore %1692 %1698 
                                               OpBranch %1694 
                                     %1694 = OpLabel 
                                 f32 %1699 = OpLoad %1692 
                        Private f32* %1700 = OpAccessChain %226 %85 
                                               OpStore %1700 %1699 
                        Private f32* %1701 = OpAccessChain %87 %58 
                                 f32 %1702 = OpLoad %1701 
                                 f32 %1703 = OpFNegate %1702 
                                 f32 %1704 = OpFMul %1703 %250 
                        Private f32* %1705 = OpAccessChain %226 %600 
                                 f32 %1706 = OpLoad %1705 
                                 f32 %1707 = OpFAdd %1704 %1706 
                                               OpStore %106 %1707 
                        Private i32* %1708 = OpAccessChain %545 %85 
                                 i32 %1709 = OpLoad %1708 
                                bool %1710 = OpINotEqual %1709 %25 
                                               OpSelectionMerge %1713 None 
                                               OpBranchConditional %1710 %1712 %1716 
                                     %1712 = OpLabel 
                        Private f32* %1714 = OpAccessChain %226 %600 
                                 f32 %1715 = OpLoad %1714 
                                               OpStore %1711 %1715 
                                               OpBranch %1713 
                                     %1716 = OpLabel 
                                 f32 %1717 = OpLoad %106 
                                               OpStore %1711 %1717 
                                               OpBranch %1713 
                                     %1713 = OpLabel 
                                 f32 %1718 = OpLoad %1711 
                        Private f32* %1719 = OpAccessChain %226 %600 
                                               OpStore %1719 %1718 
                               i32_2 %1720 = OpLoad %545 
                               i32_2 %1721 = OpNot %1720 
                                               OpStore %794 %1721 
                        Private i32* %1722 = OpAccessChain %794 %58 
                                 i32 %1723 = OpLoad %1722 
                                 u32 %1724 = OpBitcast %1723 
                        Private i32* %1725 = OpAccessChain %794 %85 
                                 i32 %1726 = OpLoad %1725 
                                 u32 %1727 = OpBitcast %1726 
                                 u32 %1728 = OpBitwiseOr %1724 %1727 
                                 i32 %1729 = OpBitcast %1728 
                                               OpStore %609 %1729 
                        Private f32* %1730 = OpAccessChain %87 %85 
                                 f32 %1731 = OpLoad %1730 
                                 f32 %1732 = OpFMul %1731 %250 
                        Private f32* %1733 = OpAccessChain %618 %85 
                                 f32 %1734 = OpLoad %1733 
                                 f32 %1735 = OpFAdd %1732 %1734 
                        Private f32* %1736 = OpAccessChain %449 %85 
                                               OpStore %1736 %1735 
                        Private i32* %1737 = OpAccessChain %545 %58 
                                 i32 %1738 = OpLoad %1737 
                                bool %1739 = OpINotEqual %1738 %25 
                                               OpSelectionMerge %1742 None 
                                               OpBranchConditional %1739 %1741 %1745 
                                     %1741 = OpLabel 
                        Private f32* %1743 = OpAccessChain %618 %85 
                                 f32 %1744 = OpLoad %1743 
                                               OpStore %1740 %1744 
                                               OpBranch %1742 
                                     %1745 = OpLabel 
                        Private f32* %1746 = OpAccessChain %449 %85 
                                 f32 %1747 = OpLoad %1746 
                                               OpStore %1740 %1747 
                                               OpBranch %1742 
                                     %1742 = OpLabel 
                                 f32 %1748 = OpLoad %1740 
                        Private f32* %1749 = OpAccessChain %618 %85 
                                               OpStore %1749 %1748 
                        Private f32* %1750 = OpAccessChain %87 %58 
                                 f32 %1751 = OpLoad %1750 
                                 f32 %1752 = OpFMul %1751 %250 
                        Private f32* %1753 = OpAccessChain %618 %600 
                                 f32 %1754 = OpLoad %1753 
                                 f32 %1755 = OpFAdd %1752 %1754 
                        Private f32* %1756 = OpAccessChain %449 %85 
                                               OpStore %1756 %1755 
                        Private i32* %1757 = OpAccessChain %545 %58 
                                 i32 %1758 = OpLoad %1757 
                                bool %1759 = OpINotEqual %1758 %25 
                                               OpSelectionMerge %1762 None 
                                               OpBranchConditional %1759 %1761 %1765 
                                     %1761 = OpLabel 
                        Private f32* %1763 = OpAccessChain %618 %600 
                                 f32 %1764 = OpLoad %1763 
                                               OpStore %1760 %1764 
                                               OpBranch %1762 
                                     %1765 = OpLabel 
                        Private f32* %1766 = OpAccessChain %449 %85 
                                 f32 %1767 = OpLoad %1766 
                                               OpStore %1760 %1767 
                                               OpBranch %1762 
                                     %1762 = OpLabel 
                                 f32 %1768 = OpLoad %1760 
                        Private f32* %1769 = OpAccessChain %618 %600 
                                               OpStore %1769 %1768 
                                 i32 %1770 = OpLoad %609 
                                bool %1771 = OpINotEqual %1770 %25 
                                               OpSelectionMerge %1773 None 
                                               OpBranchConditional %1771 %1772 %1773 
                                     %1772 = OpLabel 
                        Private i32* %1774 = OpAccessChain %545 %85 
                                 i32 %1775 = OpLoad %1774 
                                bool %1776 = OpIEqual %1775 %25 
                                               OpSelectionMerge %1778 None 
                                               OpBranchConditional %1776 %1777 %1778 
                                     %1777 = OpLabel 
                               f32_3 %1779 = OpLoad %226 
                               f32_2 %1780 = OpVectorShuffle %1779 %1779 0 2 
                                               OpStore %449 %1780 
                               f32_2 %1781 = OpLoad %449 
                               f32_2 %1782 = OpCompositeConstruct %14 %14 
                               f32_2 %1783 = OpCompositeConstruct %15 %15 
                               f32_2 %1784 = OpExtInst %1 43 %1781 %1782 %1783 
                                               OpStore %449 %1784 
                               f32_2 %1785 = OpLoad %449 
                        Uniform f32* %1786 = OpAccessChain %23 %25 
                                 f32 %1787 = OpLoad %1786 
                               f32_2 %1788 = OpCompositeConstruct %1787 %1787 
                               f32_2 %1789 = OpFMul %1785 %1788 
                                               OpStore %449 %1789 
                 read_only Texture2D %1790 = OpLoad %36 
                             sampler %1791 = OpLoad %40 
          read_only Texture2DSampled %1792 = OpSampledImage %1790 %1791 
                               f32_2 %1793 = OpLoad %449 
                               f32_4 %1794 = OpImageSampleExplicitLod %1792 %1793 Lod %20 
                                 f32 %1795 = OpCompositeExtract %1794 1 
                        Private f32* %1796 = OpAccessChain %111 %85 
                                               OpStore %1796 %1795 
                                               OpBranch %1778 
                                     %1778 = OpLabel 
                        Private i32* %1797 = OpAccessChain %545 %58 
                                 i32 %1798 = OpLoad %1797 
                                bool %1799 = OpIEqual %1798 %25 
                                               OpSelectionMerge %1801 None 
                                               OpBranchConditional %1799 %1800 %1801 
                                     %1800 = OpLabel 
                               f32_3 %1802 = OpLoad %618 
                               f32_2 %1803 = OpVectorShuffle %1802 %1802 0 2 
                                               OpStore %449 %1803 
                               f32_2 %1804 = OpLoad %449 
                               f32_2 %1805 = OpCompositeConstruct %14 %14 
                               f32_2 %1806 = OpCompositeConstruct %15 %15 
                               f32_2 %1807 = OpExtInst %1 43 %1804 %1805 %1806 
                                               OpStore %449 %1807 
                               f32_2 %1808 = OpLoad %449 
                        Uniform f32* %1809 = OpAccessChain %23 %25 
                                 f32 %1810 = OpLoad %1809 
                               f32_2 %1811 = OpCompositeConstruct %1810 %1810 
                               f32_2 %1812 = OpFMul %1808 %1811 
                                               OpStore %449 %1812 
                 read_only Texture2D %1813 = OpLoad %36 
                             sampler %1814 = OpLoad %40 
          read_only Texture2DSampled %1815 = OpSampledImage %1813 %1814 
                               f32_2 %1816 = OpLoad %449 
                               f32_4 %1817 = OpImageSampleExplicitLod %1815 %1816 Lod %20 
                                 f32 %1818 = OpCompositeExtract %1817 1 
                        Private f32* %1819 = OpAccessChain %111 %58 
                                               OpStore %1819 %1818 
                                               OpBranch %1801 
                                     %1801 = OpLabel 
                                 f32 %1820 = OpLoad %48 
                                 f32 %1821 = OpFNegate %1820 
                                 f32 %1822 = OpFMul %1821 %412 
                        Private f32* %1823 = OpAccessChain %111 %85 
                                 f32 %1824 = OpLoad %1823 
                                 f32 %1825 = OpFAdd %1822 %1824 
                                               OpStore %106 %1825 
                        Private i32* %1826 = OpAccessChain %545 %85 
                                 i32 %1827 = OpLoad %1826 
                                bool %1828 = OpINotEqual %1827 %25 
                                               OpSelectionMerge %1831 None 
                                               OpBranchConditional %1828 %1830 %1834 
                                     %1830 = OpLabel 
                        Private f32* %1832 = OpAccessChain %111 %85 
                                 f32 %1833 = OpLoad %1832 
                                               OpStore %1829 %1833 
                                               OpBranch %1831 
                                     %1834 = OpLabel 
                                 f32 %1835 = OpLoad %106 
                                               OpStore %1829 %1835 
                                               OpBranch %1831 
                                     %1831 = OpLabel 
                                 f32 %1836 = OpLoad %1829 
                        Private f32* %1837 = OpAccessChain %111 %85 
                                               OpStore %1837 %1836 
                                 f32 %1838 = OpLoad %48 
                                 f32 %1839 = OpFNegate %1838 
                                 f32 %1840 = OpFMul %1839 %412 
                        Private f32* %1841 = OpAccessChain %111 %58 
                                 f32 %1842 = OpLoad %1841 
                                 f32 %1843 = OpFAdd %1840 %1842 
                                               OpStore %106 %1843 
                        Private i32* %1844 = OpAccessChain %545 %58 
                                 i32 %1845 = OpLoad %1844 
                                bool %1846 = OpINotEqual %1845 %25 
                                               OpSelectionMerge %1849 None 
                                               OpBranchConditional %1846 %1848 %1852 
                                     %1848 = OpLabel 
                        Private f32* %1850 = OpAccessChain %111 %58 
                                 f32 %1851 = OpLoad %1850 
                                               OpStore %1847 %1851 
                                               OpBranch %1849 
                                     %1852 = OpLabel 
                                 f32 %1853 = OpLoad %106 
                                               OpStore %1847 %1853 
                                               OpBranch %1849 
                                     %1849 = OpLabel 
                                 f32 %1854 = OpLoad %1847 
                        Private f32* %1855 = OpAccessChain %111 %58 
                                               OpStore %1855 %1854 
                               f32_3 %1856 = OpLoad %111 
                               f32_4 %1857 = OpVectorShuffle %1856 %1856 0 1 0 1 
                               f32_4 %1858 = OpExtInst %1 4 %1857 
                                 f32 %1859 = OpLoad %68 
                               f32_4 %1860 = OpCompositeConstruct %1859 %1859 %1859 %1859 
                              bool_4 %1861 = OpFOrdGreaterThanEqual %1858 %1860 
                              bool_2 %1862 = OpVectorShuffle %1861 %1861 0 1 
                               u32_2 %1863 = OpSelect %1862 %557 %556 
                               u32_2 %1864 = OpCompositeConstruct %527 %527 
                               u32_2 %1865 = OpIMul %1863 %1864 
                               i32_2 %1866 = OpBitcast %1865 
                                               OpStore %545 %1866 
                        Private f32* %1867 = OpAccessChain %87 %85 
                                 f32 %1868 = OpLoad %1867 
                                 f32 %1869 = OpFNegate %1868 
                                 f32 %1870 = OpFMul %1869 %250 
                        Private f32* %1871 = OpAccessChain %226 %85 
                                 f32 %1872 = OpLoad %1871 
                                 f32 %1873 = OpFAdd %1870 %1872 
                                               OpStore %106 %1873 
                        Private i32* %1874 = OpAccessChain %545 %85 
                                 i32 %1875 = OpLoad %1874 
                                bool %1876 = OpINotEqual %1875 %25 
                                               OpSelectionMerge %1879 None 
                                               OpBranchConditional %1876 %1878 %1882 
                                     %1878 = OpLabel 
                        Private f32* %1880 = OpAccessChain %226 %85 
                                 f32 %1881 = OpLoad %1880 
                                               OpStore %1877 %1881 
                                               OpBranch %1879 
                                     %1882 = OpLabel 
                                 f32 %1883 = OpLoad %106 
                                               OpStore %1877 %1883 
                                               OpBranch %1879 
                                     %1879 = OpLabel 
                                 f32 %1884 = OpLoad %1877 
                        Private f32* %1885 = OpAccessChain %226 %85 
                                               OpStore %1885 %1884 
                        Private f32* %1886 = OpAccessChain %87 %58 
                                 f32 %1887 = OpLoad %1886 
                                 f32 %1888 = OpFNegate %1887 
                                 f32 %1889 = OpFMul %1888 %250 
                        Private f32* %1890 = OpAccessChain %226 %600 
                                 f32 %1891 = OpLoad %1890 
                                 f32 %1892 = OpFAdd %1889 %1891 
                                               OpStore %106 %1892 
                        Private i32* %1893 = OpAccessChain %545 %85 
                                 i32 %1894 = OpLoad %1893 
                                bool %1895 = OpINotEqual %1894 %25 
                                               OpSelectionMerge %1898 None 
                                               OpBranchConditional %1895 %1897 %1901 
                                     %1897 = OpLabel 
                        Private f32* %1899 = OpAccessChain %226 %600 
                                 f32 %1900 = OpLoad %1899 
                                               OpStore %1896 %1900 
                                               OpBranch %1898 
                                     %1901 = OpLabel 
                                 f32 %1902 = OpLoad %106 
                                               OpStore %1896 %1902 
                                               OpBranch %1898 
                                     %1898 = OpLabel 
                                 f32 %1903 = OpLoad %1896 
                        Private f32* %1904 = OpAccessChain %226 %600 
                                               OpStore %1904 %1903 
                               i32_2 %1905 = OpLoad %545 
                               i32_2 %1906 = OpNot %1905 
                                               OpStore %794 %1906 
                        Private i32* %1907 = OpAccessChain %794 %58 
                                 i32 %1908 = OpLoad %1907 
                                 u32 %1909 = OpBitcast %1908 
                        Private i32* %1910 = OpAccessChain %794 %85 
                                 i32 %1911 = OpLoad %1910 
                                 u32 %1912 = OpBitcast %1911 
                                 u32 %1913 = OpBitwiseOr %1909 %1912 
                                 i32 %1914 = OpBitcast %1913 
                                               OpStore %609 %1914 
                        Private f32* %1915 = OpAccessChain %87 %85 
                                 f32 %1916 = OpLoad %1915 
                                 f32 %1917 = OpFMul %1916 %250 
                        Private f32* %1918 = OpAccessChain %618 %85 
                                 f32 %1919 = OpLoad %1918 
                                 f32 %1920 = OpFAdd %1917 %1919 
                        Private f32* %1921 = OpAccessChain %449 %85 
                                               OpStore %1921 %1920 
                        Private i32* %1922 = OpAccessChain %545 %58 
                                 i32 %1923 = OpLoad %1922 
                                bool %1924 = OpINotEqual %1923 %25 
                                               OpSelectionMerge %1927 None 
                                               OpBranchConditional %1924 %1926 %1930 
                                     %1926 = OpLabel 
                        Private f32* %1928 = OpAccessChain %618 %85 
                                 f32 %1929 = OpLoad %1928 
                                               OpStore %1925 %1929 
                                               OpBranch %1927 
                                     %1930 = OpLabel 
                        Private f32* %1931 = OpAccessChain %449 %85 
                                 f32 %1932 = OpLoad %1931 
                                               OpStore %1925 %1932 
                                               OpBranch %1927 
                                     %1927 = OpLabel 
                                 f32 %1933 = OpLoad %1925 
                        Private f32* %1934 = OpAccessChain %618 %85 
                                               OpStore %1934 %1933 
                        Private f32* %1935 = OpAccessChain %87 %58 
                                 f32 %1936 = OpLoad %1935 
                                 f32 %1937 = OpFMul %1936 %250 
                        Private f32* %1938 = OpAccessChain %618 %600 
                                 f32 %1939 = OpLoad %1938 
                                 f32 %1940 = OpFAdd %1937 %1939 
                        Private f32* %1941 = OpAccessChain %449 %85 
                                               OpStore %1941 %1940 
                        Private i32* %1942 = OpAccessChain %545 %58 
                                 i32 %1943 = OpLoad %1942 
                                bool %1944 = OpINotEqual %1943 %25 
                                               OpSelectionMerge %1947 None 
                                               OpBranchConditional %1944 %1946 %1950 
                                     %1946 = OpLabel 
                        Private f32* %1948 = OpAccessChain %618 %600 
                                 f32 %1949 = OpLoad %1948 
                                               OpStore %1945 %1949 
                                               OpBranch %1947 
                                     %1950 = OpLabel 
                        Private f32* %1951 = OpAccessChain %449 %85 
                                 f32 %1952 = OpLoad %1951 
                                               OpStore %1945 %1952 
                                               OpBranch %1947 
                                     %1947 = OpLabel 
                                 f32 %1953 = OpLoad %1945 
                        Private f32* %1954 = OpAccessChain %618 %600 
                                               OpStore %1954 %1953 
                                 i32 %1955 = OpLoad %609 
                                bool %1956 = OpINotEqual %1955 %25 
                                               OpSelectionMerge %1958 None 
                                               OpBranchConditional %1956 %1957 %1958 
                                     %1957 = OpLabel 
                        Private i32* %1959 = OpAccessChain %545 %85 
                                 i32 %1960 = OpLoad %1959 
                                bool %1961 = OpIEqual %1960 %25 
                                               OpSelectionMerge %1963 None 
                                               OpBranchConditional %1961 %1962 %1963 
                                     %1962 = OpLabel 
                               f32_3 %1964 = OpLoad %226 
                               f32_2 %1965 = OpVectorShuffle %1964 %1964 0 2 
                                               OpStore %449 %1965 
                               f32_2 %1966 = OpLoad %449 
                               f32_2 %1967 = OpCompositeConstruct %14 %14 
                               f32_2 %1968 = OpCompositeConstruct %15 %15 
                               f32_2 %1969 = OpExtInst %1 43 %1966 %1967 %1968 
                                               OpStore %449 %1969 
                               f32_2 %1970 = OpLoad %449 
                        Uniform f32* %1971 = OpAccessChain %23 %25 
                                 f32 %1972 = OpLoad %1971 
                               f32_2 %1973 = OpCompositeConstruct %1972 %1972 
                               f32_2 %1974 = OpFMul %1970 %1973 
                                               OpStore %449 %1974 
                 read_only Texture2D %1975 = OpLoad %36 
                             sampler %1976 = OpLoad %40 
          read_only Texture2DSampled %1977 = OpSampledImage %1975 %1976 
                               f32_2 %1978 = OpLoad %449 
                               f32_4 %1979 = OpImageSampleExplicitLod %1977 %1978 Lod %20 
                                 f32 %1980 = OpCompositeExtract %1979 1 
                        Private f32* %1981 = OpAccessChain %111 %85 
                                               OpStore %1981 %1980 
                                               OpBranch %1963 
                                     %1963 = OpLabel 
                        Private i32* %1982 = OpAccessChain %545 %58 
                                 i32 %1983 = OpLoad %1982 
                                bool %1984 = OpIEqual %1983 %25 
                                               OpSelectionMerge %1986 None 
                                               OpBranchConditional %1984 %1985 %1986 
                                     %1985 = OpLabel 
                               f32_3 %1987 = OpLoad %618 
                               f32_2 %1988 = OpVectorShuffle %1987 %1987 0 2 
                                               OpStore %449 %1988 
                               f32_2 %1989 = OpLoad %449 
                               f32_2 %1990 = OpCompositeConstruct %14 %14 
                               f32_2 %1991 = OpCompositeConstruct %15 %15 
                               f32_2 %1992 = OpExtInst %1 43 %1989 %1990 %1991 
                                               OpStore %449 %1992 
                               f32_2 %1993 = OpLoad %449 
                        Uniform f32* %1994 = OpAccessChain %23 %25 
                                 f32 %1995 = OpLoad %1994 
                               f32_2 %1996 = OpCompositeConstruct %1995 %1995 
                               f32_2 %1997 = OpFMul %1993 %1996 
                                               OpStore %449 %1997 
                 read_only Texture2D %1998 = OpLoad %36 
                             sampler %1999 = OpLoad %40 
          read_only Texture2DSampled %2000 = OpSampledImage %1998 %1999 
                               f32_2 %2001 = OpLoad %449 
                               f32_4 %2002 = OpImageSampleExplicitLod %2000 %2001 Lod %20 
                                 f32 %2003 = OpCompositeExtract %2002 1 
                        Private f32* %2004 = OpAccessChain %111 %58 
                                               OpStore %2004 %2003 
                                               OpBranch %1986 
                                     %1986 = OpLabel 
                                 f32 %2005 = OpLoad %48 
                                 f32 %2006 = OpFNegate %2005 
                                 f32 %2007 = OpFMul %2006 %412 
                        Private f32* %2008 = OpAccessChain %111 %85 
                                 f32 %2009 = OpLoad %2008 
                                 f32 %2010 = OpFAdd %2007 %2009 
                                               OpStore %106 %2010 
                        Private i32* %2011 = OpAccessChain %545 %85 
                                 i32 %2012 = OpLoad %2011 
                                bool %2013 = OpINotEqual %2012 %25 
                                               OpSelectionMerge %2016 None 
                                               OpBranchConditional %2013 %2015 %2019 
                                     %2015 = OpLabel 
                        Private f32* %2017 = OpAccessChain %111 %85 
                                 f32 %2018 = OpLoad %2017 
                                               OpStore %2014 %2018 
                                               OpBranch %2016 
                                     %2019 = OpLabel 
                                 f32 %2020 = OpLoad %106 
                                               OpStore %2014 %2020 
                                               OpBranch %2016 
                                     %2016 = OpLabel 
                                 f32 %2021 = OpLoad %2014 
                        Private f32* %2022 = OpAccessChain %111 %85 
                                               OpStore %2022 %2021 
                                 f32 %2023 = OpLoad %48 
                                 f32 %2024 = OpFNegate %2023 
                                 f32 %2025 = OpFMul %2024 %412 
                        Private f32* %2026 = OpAccessChain %111 %58 
                                 f32 %2027 = OpLoad %2026 
                                 f32 %2028 = OpFAdd %2025 %2027 
                                               OpStore %106 %2028 
                        Private i32* %2029 = OpAccessChain %545 %58 
                                 i32 %2030 = OpLoad %2029 
                                bool %2031 = OpINotEqual %2030 %25 
                                               OpSelectionMerge %2034 None 
                                               OpBranchConditional %2031 %2033 %2037 
                                     %2033 = OpLabel 
                        Private f32* %2035 = OpAccessChain %111 %58 
                                 f32 %2036 = OpLoad %2035 
                                               OpStore %2032 %2036 
                                               OpBranch %2034 
                                     %2037 = OpLabel 
                                 f32 %2038 = OpLoad %106 
                                               OpStore %2032 %2038 
                                               OpBranch %2034 
                                     %2034 = OpLabel 
                                 f32 %2039 = OpLoad %2032 
                        Private f32* %2040 = OpAccessChain %111 %58 
                                               OpStore %2040 %2039 
                               f32_3 %2041 = OpLoad %111 
                               f32_4 %2042 = OpVectorShuffle %2041 %2041 0 1 0 1 
                               f32_4 %2043 = OpExtInst %1 4 %2042 
                                 f32 %2044 = OpLoad %68 
                               f32_4 %2045 = OpCompositeConstruct %2044 %2044 %2044 %2044 
                              bool_4 %2046 = OpFOrdGreaterThanEqual %2043 %2045 
                              bool_2 %2047 = OpVectorShuffle %2046 %2046 0 1 
                               u32_2 %2048 = OpSelect %2047 %557 %556 
                               u32_2 %2049 = OpCompositeConstruct %527 %527 
                               u32_2 %2050 = OpIMul %2048 %2049 
                               i32_2 %2051 = OpBitcast %2050 
                                               OpStore %545 %2051 
                        Private f32* %2052 = OpAccessChain %87 %85 
                                 f32 %2053 = OpLoad %2052 
                                 f32 %2054 = OpFNegate %2053 
                                 f32 %2056 = OpFMul %2054 %2055 
                        Private f32* %2057 = OpAccessChain %226 %85 
                                 f32 %2058 = OpLoad %2057 
                                 f32 %2059 = OpFAdd %2056 %2058 
                                               OpStore %106 %2059 
                        Private i32* %2060 = OpAccessChain %545 %85 
                                 i32 %2061 = OpLoad %2060 
                                bool %2062 = OpINotEqual %2061 %25 
                                               OpSelectionMerge %2065 None 
                                               OpBranchConditional %2062 %2064 %2068 
                                     %2064 = OpLabel 
                        Private f32* %2066 = OpAccessChain %226 %85 
                                 f32 %2067 = OpLoad %2066 
                                               OpStore %2063 %2067 
                                               OpBranch %2065 
                                     %2068 = OpLabel 
                                 f32 %2069 = OpLoad %106 
                                               OpStore %2063 %2069 
                                               OpBranch %2065 
                                     %2065 = OpLabel 
                                 f32 %2070 = OpLoad %2063 
                        Private f32* %2071 = OpAccessChain %226 %85 
                                               OpStore %2071 %2070 
                        Private f32* %2072 = OpAccessChain %87 %58 
                                 f32 %2073 = OpLoad %2072 
                                 f32 %2074 = OpFNegate %2073 
                                 f32 %2075 = OpFMul %2074 %2055 
                        Private f32* %2076 = OpAccessChain %226 %600 
                                 f32 %2077 = OpLoad %2076 
                                 f32 %2078 = OpFAdd %2075 %2077 
                                               OpStore %106 %2078 
                        Private i32* %2079 = OpAccessChain %545 %85 
                                 i32 %2080 = OpLoad %2079 
                                bool %2081 = OpINotEqual %2080 %25 
                                               OpSelectionMerge %2084 None 
                                               OpBranchConditional %2081 %2083 %2087 
                                     %2083 = OpLabel 
                        Private f32* %2085 = OpAccessChain %226 %600 
                                 f32 %2086 = OpLoad %2085 
                                               OpStore %2082 %2086 
                                               OpBranch %2084 
                                     %2087 = OpLabel 
                                 f32 %2088 = OpLoad %106 
                                               OpStore %2082 %2088 
                                               OpBranch %2084 
                                     %2084 = OpLabel 
                                 f32 %2089 = OpLoad %2082 
                        Private f32* %2090 = OpAccessChain %226 %600 
                                               OpStore %2090 %2089 
                               i32_2 %2091 = OpLoad %545 
                               i32_2 %2092 = OpNot %2091 
                                               OpStore %794 %2092 
                        Private i32* %2093 = OpAccessChain %794 %58 
                                 i32 %2094 = OpLoad %2093 
                                 u32 %2095 = OpBitcast %2094 
                        Private i32* %2096 = OpAccessChain %794 %85 
                                 i32 %2097 = OpLoad %2096 
                                 u32 %2098 = OpBitcast %2097 
                                 u32 %2099 = OpBitwiseOr %2095 %2098 
                                 i32 %2100 = OpBitcast %2099 
                                               OpStore %609 %2100 
                        Private f32* %2101 = OpAccessChain %87 %85 
                                 f32 %2102 = OpLoad %2101 
                                 f32 %2103 = OpFMul %2102 %2055 
                        Private f32* %2104 = OpAccessChain %618 %85 
                                 f32 %2105 = OpLoad %2104 
                                 f32 %2106 = OpFAdd %2103 %2105 
                        Private f32* %2107 = OpAccessChain %449 %85 
                                               OpStore %2107 %2106 
                        Private i32* %2108 = OpAccessChain %545 %58 
                                 i32 %2109 = OpLoad %2108 
                                bool %2110 = OpINotEqual %2109 %25 
                                               OpSelectionMerge %2113 None 
                                               OpBranchConditional %2110 %2112 %2116 
                                     %2112 = OpLabel 
                        Private f32* %2114 = OpAccessChain %618 %85 
                                 f32 %2115 = OpLoad %2114 
                                               OpStore %2111 %2115 
                                               OpBranch %2113 
                                     %2116 = OpLabel 
                        Private f32* %2117 = OpAccessChain %449 %85 
                                 f32 %2118 = OpLoad %2117 
                                               OpStore %2111 %2118 
                                               OpBranch %2113 
                                     %2113 = OpLabel 
                                 f32 %2119 = OpLoad %2111 
                        Private f32* %2120 = OpAccessChain %618 %85 
                                               OpStore %2120 %2119 
                        Private f32* %2121 = OpAccessChain %87 %58 
                                 f32 %2122 = OpLoad %2121 
                                 f32 %2123 = OpFMul %2122 %2055 
                        Private f32* %2124 = OpAccessChain %618 %600 
                                 f32 %2125 = OpLoad %2124 
                                 f32 %2126 = OpFAdd %2123 %2125 
                        Private f32* %2127 = OpAccessChain %449 %85 
                                               OpStore %2127 %2126 
                        Private i32* %2128 = OpAccessChain %545 %58 
                                 i32 %2129 = OpLoad %2128 
                                bool %2130 = OpINotEqual %2129 %25 
                                               OpSelectionMerge %2133 None 
                                               OpBranchConditional %2130 %2132 %2136 
                                     %2132 = OpLabel 
                        Private f32* %2134 = OpAccessChain %618 %600 
                                 f32 %2135 = OpLoad %2134 
                                               OpStore %2131 %2135 
                                               OpBranch %2133 
                                     %2136 = OpLabel 
                        Private f32* %2137 = OpAccessChain %449 %85 
                                 f32 %2138 = OpLoad %2137 
                                               OpStore %2131 %2138 
                                               OpBranch %2133 
                                     %2133 = OpLabel 
                                 f32 %2139 = OpLoad %2131 
                        Private f32* %2140 = OpAccessChain %618 %600 
                                               OpStore %2140 %2139 
                                 i32 %2141 = OpLoad %609 
                                bool %2142 = OpINotEqual %2141 %25 
                                               OpSelectionMerge %2144 None 
                                               OpBranchConditional %2142 %2143 %2144 
                                     %2143 = OpLabel 
                        Private i32* %2145 = OpAccessChain %545 %85 
                                 i32 %2146 = OpLoad %2145 
                                bool %2147 = OpIEqual %2146 %25 
                                               OpSelectionMerge %2149 None 
                                               OpBranchConditional %2147 %2148 %2149 
                                     %2148 = OpLabel 
                               f32_3 %2150 = OpLoad %226 
                               f32_2 %2151 = OpVectorShuffle %2150 %2150 0 2 
                                               OpStore %449 %2151 
                               f32_2 %2152 = OpLoad %449 
                               f32_2 %2153 = OpCompositeConstruct %14 %14 
                               f32_2 %2154 = OpCompositeConstruct %15 %15 
                               f32_2 %2155 = OpExtInst %1 43 %2152 %2153 %2154 
                                               OpStore %449 %2155 
                               f32_2 %2156 = OpLoad %449 
                        Uniform f32* %2157 = OpAccessChain %23 %25 
                                 f32 %2158 = OpLoad %2157 
                               f32_2 %2159 = OpCompositeConstruct %2158 %2158 
                               f32_2 %2160 = OpFMul %2156 %2159 
                                               OpStore %449 %2160 
                 read_only Texture2D %2161 = OpLoad %36 
                             sampler %2162 = OpLoad %40 
          read_only Texture2DSampled %2163 = OpSampledImage %2161 %2162 
                               f32_2 %2164 = OpLoad %449 
                               f32_4 %2165 = OpImageSampleExplicitLod %2163 %2164 Lod %20 
                                 f32 %2166 = OpCompositeExtract %2165 1 
                        Private f32* %2167 = OpAccessChain %111 %85 
                                               OpStore %2167 %2166 
                                               OpBranch %2149 
                                     %2149 = OpLabel 
                        Private i32* %2168 = OpAccessChain %545 %58 
                                 i32 %2169 = OpLoad %2168 
                                bool %2170 = OpIEqual %2169 %25 
                                               OpSelectionMerge %2172 None 
                                               OpBranchConditional %2170 %2171 %2172 
                                     %2171 = OpLabel 
                               f32_3 %2173 = OpLoad %618 
                               f32_2 %2174 = OpVectorShuffle %2173 %2173 0 2 
                                               OpStore %449 %2174 
                               f32_2 %2175 = OpLoad %449 
                               f32_2 %2176 = OpCompositeConstruct %14 %14 
                               f32_2 %2177 = OpCompositeConstruct %15 %15 
                               f32_2 %2178 = OpExtInst %1 43 %2175 %2176 %2177 
                                               OpStore %449 %2178 
                               f32_2 %2179 = OpLoad %449 
                        Uniform f32* %2180 = OpAccessChain %23 %25 
                                 f32 %2181 = OpLoad %2180 
                               f32_2 %2182 = OpCompositeConstruct %2181 %2181 
                               f32_2 %2183 = OpFMul %2179 %2182 
                                               OpStore %449 %2183 
                 read_only Texture2D %2184 = OpLoad %36 
                             sampler %2185 = OpLoad %40 
          read_only Texture2DSampled %2186 = OpSampledImage %2184 %2185 
                               f32_2 %2187 = OpLoad %449 
                               f32_4 %2188 = OpImageSampleExplicitLod %2186 %2187 Lod %20 
                                 f32 %2189 = OpCompositeExtract %2188 1 
                        Private f32* %2190 = OpAccessChain %111 %58 
                                               OpStore %2190 %2189 
                                               OpBranch %2172 
                                     %2172 = OpLabel 
                                 f32 %2191 = OpLoad %48 
                                 f32 %2192 = OpFNegate %2191 
                                 f32 %2193 = OpFMul %2192 %412 
                        Private f32* %2194 = OpAccessChain %111 %85 
                                 f32 %2195 = OpLoad %2194 
                                 f32 %2196 = OpFAdd %2193 %2195 
                                               OpStore %106 %2196 
                        Private i32* %2197 = OpAccessChain %545 %85 
                                 i32 %2198 = OpLoad %2197 
                                bool %2199 = OpINotEqual %2198 %25 
                                               OpSelectionMerge %2202 None 
                                               OpBranchConditional %2199 %2201 %2205 
                                     %2201 = OpLabel 
                        Private f32* %2203 = OpAccessChain %111 %85 
                                 f32 %2204 = OpLoad %2203 
                                               OpStore %2200 %2204 
                                               OpBranch %2202 
                                     %2205 = OpLabel 
                                 f32 %2206 = OpLoad %106 
                                               OpStore %2200 %2206 
                                               OpBranch %2202 
                                     %2202 = OpLabel 
                                 f32 %2207 = OpLoad %2200 
                        Private f32* %2208 = OpAccessChain %111 %85 
                                               OpStore %2208 %2207 
                                 f32 %2209 = OpLoad %48 
                                 f32 %2210 = OpFNegate %2209 
                                 f32 %2211 = OpFMul %2210 %412 
                        Private f32* %2212 = OpAccessChain %111 %58 
                                 f32 %2213 = OpLoad %2212 
                                 f32 %2214 = OpFAdd %2211 %2213 
                                               OpStore %48 %2214 
                        Private i32* %2215 = OpAccessChain %545 %58 
                                 i32 %2216 = OpLoad %2215 
                                bool %2217 = OpINotEqual %2216 %25 
                                               OpSelectionMerge %2220 None 
                                               OpBranchConditional %2217 %2219 %2223 
                                     %2219 = OpLabel 
                        Private f32* %2221 = OpAccessChain %111 %58 
                                 f32 %2222 = OpLoad %2221 
                                               OpStore %2218 %2222 
                                               OpBranch %2220 
                                     %2223 = OpLabel 
                                 f32 %2224 = OpLoad %48 
                                               OpStore %2218 %2224 
                                               OpBranch %2220 
                                     %2220 = OpLabel 
                                 f32 %2225 = OpLoad %2218 
                        Private f32* %2226 = OpAccessChain %111 %58 
                                               OpStore %2226 %2225 
                               f32_3 %2229 = OpLoad %111 
                               f32_4 %2230 = OpVectorShuffle %2229 %2229 0 1 0 1 
                               f32_4 %2231 = OpExtInst %1 4 %2230 
                                 f32 %2232 = OpLoad %68 
                               f32_4 %2233 = OpCompositeConstruct %2232 %2232 %2232 %2232 
                              bool_4 %2234 = OpFOrdGreaterThanEqual %2231 %2233 
                              bool_2 %2235 = OpVectorShuffle %2234 %2234 0 1 
                                               OpStore %2228 %2235 
                        Private f32* %2236 = OpAccessChain %87 %85 
                                 f32 %2237 = OpLoad %2236 
                                 f32 %2238 = OpFNegate %2237 
                                 f32 %2240 = OpFMul %2238 %2239 
                        Private f32* %2241 = OpAccessChain %226 %85 
                                 f32 %2242 = OpLoad %2241 
                                 f32 %2243 = OpFAdd %2240 %2242 
                                               OpStore %48 %2243 
                       Private bool* %2244 = OpAccessChain %2228 %85 
                                bool %2245 = OpLoad %2244 
                                               OpSelectionMerge %2248 None 
                                               OpBranchConditional %2245 %2247 %2251 
                                     %2247 = OpLabel 
                        Private f32* %2249 = OpAccessChain %226 %85 
                                 f32 %2250 = OpLoad %2249 
                                               OpStore %2246 %2250 
                                               OpBranch %2248 
                                     %2251 = OpLabel 
                                 f32 %2252 = OpLoad %48 
                                               OpStore %2246 %2252 
                                               OpBranch %2248 
                                     %2248 = OpLabel 
                                 f32 %2253 = OpLoad %2246 
                        Private f32* %2254 = OpAccessChain %226 %85 
                                               OpStore %2254 %2253 
                        Private f32* %2255 = OpAccessChain %87 %58 
                                 f32 %2256 = OpLoad %2255 
                                 f32 %2257 = OpFNegate %2256 
                                 f32 %2258 = OpFMul %2257 %2239 
                        Private f32* %2259 = OpAccessChain %226 %600 
                                 f32 %2260 = OpLoad %2259 
                                 f32 %2261 = OpFAdd %2258 %2260 
                                               OpStore %48 %2261 
                       Private bool* %2262 = OpAccessChain %2228 %85 
                                bool %2263 = OpLoad %2262 
                                               OpSelectionMerge %2266 None 
                                               OpBranchConditional %2263 %2265 %2269 
                                     %2265 = OpLabel 
                        Private f32* %2267 = OpAccessChain %226 %600 
                                 f32 %2268 = OpLoad %2267 
                                               OpStore %2264 %2268 
                                               OpBranch %2266 
                                     %2269 = OpLabel 
                                 f32 %2270 = OpLoad %48 
                                               OpStore %2264 %2270 
                                               OpBranch %2266 
                                     %2266 = OpLabel 
                                 f32 %2271 = OpLoad %2264 
                        Private f32* %2272 = OpAccessChain %226 %600 
                                               OpStore %2272 %2271 
                        Private f32* %2273 = OpAccessChain %87 %85 
                                 f32 %2274 = OpLoad %2273 
                                 f32 %2275 = OpFMul %2274 %2239 
                        Private f32* %2276 = OpAccessChain %618 %85 
                                 f32 %2277 = OpLoad %2276 
                                 f32 %2278 = OpFAdd %2275 %2277 
                                               OpStore %48 %2278 
                       Private bool* %2279 = OpAccessChain %2228 %58 
                                bool %2280 = OpLoad %2279 
                                               OpSelectionMerge %2283 None 
                                               OpBranchConditional %2280 %2282 %2286 
                                     %2282 = OpLabel 
                        Private f32* %2284 = OpAccessChain %618 %85 
                                 f32 %2285 = OpLoad %2284 
                                               OpStore %2281 %2285 
                                               OpBranch %2283 
                                     %2286 = OpLabel 
                                 f32 %2287 = OpLoad %48 
                                               OpStore %2281 %2287 
                                               OpBranch %2283 
                                     %2283 = OpLabel 
                                 f32 %2288 = OpLoad %2281 
                        Private f32* %2289 = OpAccessChain %618 %85 
                                               OpStore %2289 %2288 
                        Private f32* %2290 = OpAccessChain %87 %58 
                                 f32 %2291 = OpLoad %2290 
                                 f32 %2292 = OpFMul %2291 %2239 
                        Private f32* %2293 = OpAccessChain %618 %600 
                                 f32 %2294 = OpLoad %2293 
                                 f32 %2295 = OpFAdd %2292 %2294 
                                               OpStore %48 %2295 
                       Private bool* %2296 = OpAccessChain %2228 %58 
                                bool %2297 = OpLoad %2296 
                                               OpSelectionMerge %2300 None 
                                               OpBranchConditional %2297 %2299 %2303 
                                     %2299 = OpLabel 
                        Private f32* %2301 = OpAccessChain %618 %600 
                                 f32 %2302 = OpLoad %2301 
                                               OpStore %2298 %2302 
                                               OpBranch %2300 
                                     %2303 = OpLabel 
                                 f32 %2304 = OpLoad %48 
                                               OpStore %2298 %2304 
                                               OpBranch %2300 
                                     %2300 = OpLabel 
                                 f32 %2305 = OpLoad %2298 
                        Private f32* %2306 = OpAccessChain %618 %600 
                                               OpStore %2306 %2305 
                                               OpBranch %2144 
                                     %2144 = OpLabel 
                                               OpBranch %1958 
                                     %1958 = OpLabel 
                                               OpBranch %1773 
                                     %1773 = OpLabel 
                                               OpBranch %1588 
                                     %1588 = OpLabel 
                                               OpBranch %1403 
                                     %1403 = OpLabel 
                                               OpBranch %1218 
                                     %1218 = OpLabel 
                                               OpBranch %1033 
                                     %1033 = OpLabel 
                                               OpBranch %848 
                                      %848 = OpLabel 
                                               OpBranch %662 
                                      %662 = OpLabel 
                        Private f32* %2307 = OpAccessChain %226 %85 
                                 f32 %2308 = OpLoad %2307 
                                 f32 %2309 = OpFNegate %2308 
                          Input f32* %2310 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %2311 = OpLoad %2310 
                                 f32 %2312 = OpFAdd %2309 %2311 
                                               OpStore %48 %2312 
                        Private f32* %2313 = OpAccessChain %618 %85 
                                 f32 %2314 = OpLoad %2313 
                          Input f32* %2315 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %2316 = OpLoad %2315 
                                 f32 %2317 = OpFNegate %2316 
                                 f32 %2318 = OpFAdd %2314 %2317 
                                               OpStore %68 %2318 
                        Private f32* %2319 = OpAccessChain %226 %600 
                                 f32 %2320 = OpLoad %2319 
                                 f32 %2321 = OpFNegate %2320 
                          Input f32* %2322 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %2323 = OpLoad %2322 
                                 f32 %2324 = OpFAdd %2321 %2323 
                        Private f32* %2325 = OpAccessChain %87 %85 
                                               OpStore %2325 %2324 
                                bool %2326 = OpLoad %293 
                                               OpSelectionMerge %2329 None 
                                               OpBranchConditional %2326 %2328 %2331 
                                     %2328 = OpLabel 
                                 f32 %2330 = OpLoad %48 
                                               OpStore %2327 %2330 
                                               OpBranch %2329 
                                     %2331 = OpLabel 
                        Private f32* %2332 = OpAccessChain %87 %85 
                                 f32 %2333 = OpLoad %2332 
                                               OpStore %2327 %2333 
                                               OpBranch %2329 
                                     %2329 = OpLabel 
                                 f32 %2334 = OpLoad %2327 
                                               OpStore %48 %2334 
                        Private f32* %2335 = OpAccessChain %618 %600 
                                 f32 %2336 = OpLoad %2335 
                          Input f32* %2337 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %2338 = OpLoad %2337 
                                 f32 %2339 = OpFNegate %2338 
                                 f32 %2340 = OpFAdd %2336 %2339 
                        Private f32* %2341 = OpAccessChain %87 %85 
                                               OpStore %2341 %2340 
                                bool %2342 = OpLoad %293 
                                               OpSelectionMerge %2345 None 
                                               OpBranchConditional %2342 %2344 %2347 
                                     %2344 = OpLabel 
                                 f32 %2346 = OpLoad %68 
                                               OpStore %2343 %2346 
                                               OpBranch %2345 
                                     %2347 = OpLabel 
                        Private f32* %2348 = OpAccessChain %87 %85 
                                 f32 %2349 = OpLoad %2348 
                                               OpStore %2343 %2349 
                                               OpBranch %2345 
                                     %2345 = OpLabel 
                                 f32 %2350 = OpLoad %2343 
                                               OpStore %68 %2350 
                               f32_3 %2352 = OpLoad %111 
                               f32_4 %2353 = OpVectorShuffle %2352 %2352 0 1 0 0 
                              bool_4 %2355 = OpFOrdLessThan %2353 %2354 
                              bool_2 %2356 = OpVectorShuffle %2355 %2355 0 1 
                               u32_2 %2357 = OpSelect %2356 %557 %556 
                               u32_2 %2358 = OpCompositeConstruct %527 %527 
                               u32_2 %2359 = OpIMul %2357 %2358 
                               i32_2 %2360 = OpBitcast %2359 
                                               OpStore %2351 %2360 
                                 f32 %2361 = OpLoad %48 
                                 f32 %2362 = OpLoad %68 
                                 f32 %2363 = OpFAdd %2361 %2362 
                                               OpStore %106 %2363 
                                 i32 %2365 = OpLoad %523 
                               i32_4 %2367 = OpCompositeConstruct %2365 %2365 %2365 %2365 
                               i32_2 %2368 = OpLoad %2351 
                               i32_4 %2369 = OpVectorShuffle %2368 %2368 0 1 0 0 
                              bool_4 %2370 = OpINotEqual %2367 %2369 
                              bool_2 %2371 = OpVectorShuffle %2370 %2370 0 1 
                                               OpStore %2364 %2371 
                                 f32 %2372 = OpLoad %106 
                                 f32 %2373 = OpFDiv %15 %2372 
                                               OpStore %93 %2373 
                                 f32 %2374 = OpLoad %48 
                                 f32 %2375 = OpLoad %68 
                                bool %2376 = OpFOrdLessThan %2374 %2375 
                                               OpStore %358 %2376 
                                 f32 %2377 = OpLoad %48 
                                 f32 %2378 = OpLoad %68 
                                 f32 %2379 = OpExtInst %1 37 %2377 %2378 
                                               OpStore %48 %2379 
                                bool %2381 = OpLoad %358 
                                               OpSelectionMerge %2385 None 
                                               OpBranchConditional %2381 %2384 %2388 
                                     %2384 = OpLabel 
                       Private bool* %2386 = OpAccessChain %2364 %85 
                                bool %2387 = OpLoad %2386 
                                               OpStore %2383 %2387 
                                               OpBranch %2385 
                                     %2388 = OpLabel 
                       Private bool* %2389 = OpAccessChain %2364 %58 
                                bool %2390 = OpLoad %2389 
                                               OpStore %2383 %2390 
                                               OpBranch %2385 
                                     %2385 = OpLabel 
                                bool %2391 = OpLoad %2383 
                                               OpStore %2380 %2391 
                        Private f32* %2392 = OpAccessChain %179 %85 
                                 f32 %2393 = OpLoad %2392 
                        Private f32* %2394 = OpAccessChain %179 %85 
                                 f32 %2395 = OpLoad %2394 
                                 f32 %2396 = OpFMul %2393 %2395 
                        Private f32* %2397 = OpAccessChain %179 %85 
                                               OpStore %2397 %2396 
                                 f32 %2398 = OpLoad %48 
                                 f32 %2399 = OpLoad %93 
                                 f32 %2400 = OpFNegate %2399 
                                 f32 %2401 = OpFMul %2398 %2400 
                                 f32 %2402 = OpFAdd %2401 %412 
                                               OpStore %48 %2402 
                                bool %2403 = OpLoad %2380 
                                 f32 %2404 = OpLoad %48 
                                 f32 %2405 = OpSelect %2403 %2404 %14 
                                               OpStore %48 %2405 
                        Private f32* %2406 = OpAccessChain %179 %85 
                                 f32 %2407 = OpLoad %2406 
                                 f32 %2408 = OpLoad %48 
                                 f32 %2409 = OpExtInst %1 40 %2407 %2408 
                        Private f32* %2410 = OpAccessChain %179 %85 
                                               OpStore %2410 %2409 
                               f32_3 %2411 = OpLoad %179 
                               f32_2 %2412 = OpVectorShuffle %2411 %2411 0 0 
                                 f32 %2413 = OpLoad %60 
                               f32_2 %2414 = OpCompositeConstruct %2413 %2413 
                               f32_2 %2415 = OpFMul %2412 %2414 
                               f32_2 %2416 = OpLoad vs_TEXCOORD0 
                               f32_2 %2417 = OpFAdd %2415 %2416 
                               f32_3 %2418 = OpLoad %179 
                               f32_3 %2419 = OpVectorShuffle %2418 %2417 3 4 2 
                                               OpStore %179 %2419 
                                bool %2420 = OpLoad %293 
                                               OpSelectionMerge %2423 None 
                                               OpBranchConditional %2420 %2422 %2426 
                                     %2422 = OpLabel 
                          Input f32* %2424 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %2425 = OpLoad %2424 
                                               OpStore %2421 %2425 
                                               OpBranch %2423 
                                     %2426 = OpLabel 
                        Private f32* %2427 = OpAccessChain %179 %85 
                                 f32 %2428 = OpLoad %2427 
                                               OpStore %2421 %2428 
                                               OpBranch %2423 
                                     %2423 = OpLabel 
                                 f32 %2429 = OpLoad %2421 
                        Private f32* %2430 = OpAccessChain %77 %85 
                                               OpStore %2430 %2429 
                        Private f32* %2431 = OpAccessChain %77 %85 
                                 f32 %2432 = OpLoad %2431 
                                 f32 %2433 = OpExtInst %1 43 %2432 %14 %15 
                        Private f32* %2434 = OpAccessChain %77 %85 
                                               OpStore %2434 %2433 
                                bool %2435 = OpLoad %293 
                                               OpSelectionMerge %2438 None 
                                               OpBranchConditional %2435 %2437 %2441 
                                     %2437 = OpLabel 
                        Private f32* %2439 = OpAccessChain %179 %58 
                                 f32 %2440 = OpLoad %2439 
                                               OpStore %2436 %2440 
                                               OpBranch %2438 
                                     %2441 = OpLabel 
                          Input f32* %2442 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %2443 = OpLoad %2442 
                                               OpStore %2436 %2443 
                                               OpBranch %2438 
                                     %2438 = OpLabel 
                                 f32 %2444 = OpLoad %2436 
                        Private f32* %2445 = OpAccessChain %77 %58 
                                               OpStore %2445 %2444 
                        Private f32* %2446 = OpAccessChain %77 %58 
                                 f32 %2447 = OpLoad %2446 
                                 f32 %2448 = OpExtInst %1 43 %2447 %14 %15 
                        Private f32* %2449 = OpAccessChain %77 %58 
                                               OpStore %2449 %2448 
                               f32_3 %2450 = OpLoad %77 
                               f32_2 %2451 = OpVectorShuffle %2450 %2450 0 1 
                        Uniform f32* %2452 = OpAccessChain %23 %25 
                                 f32 %2453 = OpLoad %2452 
                               f32_2 %2454 = OpCompositeConstruct %2453 %2453 
                               f32_2 %2455 = OpFMul %2451 %2454 
                                               OpStore %9 %2455 
                 read_only Texture2D %2456 = OpLoad %36 
                             sampler %2457 = OpLoad %40 
          read_only Texture2DSampled %2458 = OpSampledImage %2456 %2457 
                               f32_2 %2459 = OpLoad %9 
                               f32_4 %2460 = OpImageSampleExplicitLod %2458 %2459 Lod %20 
                               f32_3 %2461 = OpVectorShuffle %2460 %2460 0 1 2 
                                               OpStore %33 %2461 
                                               OpBranch %148 
                                      %148 = OpLabel 
                 read_only Texture2D %2462 = OpLoad %36 
                             sampler %2463 = OpLoad %40 
          read_only Texture2DSampled %2464 = OpSampledImage %2462 %2463 
                               f32_2 %2466 = OpLoad vs_TEXCOORD1 
                               f32_4 %2467 = OpImageSampleImplicitLod %2464 %2466 
                                 f32 %2469 = OpCompositeExtract %2467 3 
                        Private f32* %2470 = OpAccessChain %9 %85 
                                               OpStore %2470 %2469 
                               f32_2 %2471 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %2473 = OpAccessChain %23 %54 
                               f32_4 %2474 = OpLoad %2473 
                               f32_2 %2475 = OpVectorShuffle %2474 %2474 0 1 
                               f32_2 %2476 = OpFMul %2471 %2475 
                      Uniform f32_4* %2477 = OpAccessChain %23 %54 
                               f32_4 %2478 = OpLoad %2477 
                               f32_2 %2479 = OpVectorShuffle %2478 %2478 2 3 
                               f32_2 %2480 = OpFAdd %2476 %2479 
                               f32_3 %2481 = OpLoad %179 
                               f32_3 %2482 = OpVectorShuffle %2481 %2480 3 4 2 
                                               OpStore %179 %2482 
                 read_only Texture2D %2484 = OpLoad %2483 
                             sampler %2486 = OpLoad %2485 
          read_only Texture2DSampled %2487 = OpSampledImage %2484 %2486 
                               f32_3 %2488 = OpLoad %179 
                               f32_2 %2489 = OpVectorShuffle %2488 %2488 0 1 
                               f32_4 %2490 = OpImageSampleImplicitLod %2487 %2489 
                                 f32 %2491 = OpCompositeExtract %2490 3 
                        Private f32* %2492 = OpAccessChain %179 %85 
                                               OpStore %2492 %2491 
                        Private f32* %2493 = OpAccessChain %179 %85 
                                 f32 %2494 = OpLoad %2493 
                                 f32 %2495 = OpFMul %2494 %250 
                                 f32 %2497 = OpFAdd %2495 %2496 
                        Private f32* %2498 = OpAccessChain %179 %85 
                                               OpStore %2498 %2497 
                        Private f32* %2499 = OpAccessChain %179 %85 
                                 f32 %2500 = OpLoad %2499 
                                 f32 %2502 = OpFMul %2500 %2501 
                                 f32 %2503 = OpFAdd %2502 %412 
                                               OpStore %48 %2503 
                                 f32 %2504 = OpLoad %48 
                                 f32 %2505 = OpExtInst %1 43 %2504 %14 %15 
                                               OpStore %48 %2505 
                                 f32 %2506 = OpLoad %48 
                                 f32 %2507 = OpFMul %2506 %250 
                                 f32 %2508 = OpFAdd %2507 %2496 
                                               OpStore %48 %2508 
                        Private f32* %2509 = OpAccessChain %179 %85 
                                 f32 %2510 = OpLoad %2509 
                                 f32 %2511 = OpExtInst %1 4 %2510 
                                 f32 %2512 = OpFNegate %2511 
                                 f32 %2513 = OpFAdd %2512 %15 
                        Private f32* %2514 = OpAccessChain %179 %85 
                                               OpStore %2514 %2513 
                        Private f32* %2515 = OpAccessChain %179 %85 
                                 f32 %2516 = OpLoad %2515 
                                 f32 %2517 = OpExtInst %1 31 %2516 
                        Private f32* %2518 = OpAccessChain %179 %85 
                                               OpStore %2518 %2517 
                        Private f32* %2519 = OpAccessChain %179 %85 
                                 f32 %2520 = OpLoad %2519 
                                 f32 %2521 = OpFNegate %2520 
                                 f32 %2522 = OpFAdd %2521 %15 
                        Private f32* %2523 = OpAccessChain %179 %85 
                                               OpStore %2523 %2522 
                        Private f32* %2524 = OpAccessChain %179 %85 
                                 f32 %2525 = OpLoad %2524 
                                 f32 %2526 = OpLoad %48 
                                 f32 %2527 = OpFMul %2525 %2526 
                        Private f32* %2528 = OpAccessChain %179 %85 
                                               OpStore %2528 %2527 
                               f32_3 %2529 = OpLoad %33 
                               f32_3 %2532 = OpFMul %2529 %2531 
                                               OpStore %77 %2532 
                               f32_3 %2533 = OpLoad %33 
                               f32_3 %2534 = OpExtInst %1 4 %2533 
                               f32_3 %2537 = OpExtInst %1 40 %2534 %2536 
                                               OpStore %111 %2537 
                               f32_3 %2538 = OpLoad %111 
                               f32_3 %2539 = OpExtInst %1 30 %2538 
                                               OpStore %111 %2539 
                               f32_3 %2540 = OpLoad %111 
                               f32_3 %2543 = OpFMul %2540 %2542 
                                               OpStore %111 %2543 
                               f32_3 %2544 = OpLoad %111 
                               f32_3 %2545 = OpExtInst %1 29 %2544 
                                               OpStore %111 %2545 
                               f32_3 %2546 = OpLoad %111 
                               f32_3 %2549 = OpFMul %2546 %2548 
                               f32_3 %2552 = OpFAdd %2549 %2551 
                                               OpStore %111 %2552 
                               f32_3 %2558 = OpLoad %33 
                               f32_4 %2559 = OpVectorShuffle %2558 %2558 0 1 2 0 
                              bool_4 %2560 = OpFOrdGreaterThanEqual %2557 %2559 
                              bool_3 %2561 = OpVectorShuffle %2560 %2560 0 1 2 
                                               OpStore %2555 %2561 
                       Private bool* %2562 = OpAccessChain %2555 %85 
                                bool %2563 = OpLoad %2562 
                                               OpSelectionMerge %2566 None 
                                               OpBranchConditional %2563 %2565 %2569 
                                     %2565 = OpLabel 
                        Private f32* %2567 = OpAccessChain %77 %85 
                                 f32 %2568 = OpLoad %2567 
                                               OpStore %2564 %2568 
                                               OpBranch %2566 
                                     %2569 = OpLabel 
                        Private f32* %2570 = OpAccessChain %111 %85 
                                 f32 %2571 = OpLoad %2570 
                                               OpStore %2564 %2571 
                                               OpBranch %2566 
                                     %2566 = OpLabel 
                                 f32 %2572 = OpLoad %2564 
                        Private f32* %2573 = OpAccessChain %33 %85 
                                               OpStore %2573 %2572 
                       Private bool* %2574 = OpAccessChain %2555 %58 
                                bool %2575 = OpLoad %2574 
                                               OpSelectionMerge %2578 None 
                                               OpBranchConditional %2575 %2577 %2581 
                                     %2577 = OpLabel 
                        Private f32* %2579 = OpAccessChain %77 %58 
                                 f32 %2580 = OpLoad %2579 
                                               OpStore %2576 %2580 
                                               OpBranch %2578 
                                     %2581 = OpLabel 
                        Private f32* %2582 = OpAccessChain %111 %58 
                                 f32 %2583 = OpLoad %2582 
                                               OpStore %2576 %2583 
                                               OpBranch %2578 
                                     %2578 = OpLabel 
                                 f32 %2584 = OpLoad %2576 
                        Private f32* %2585 = OpAccessChain %33 %58 
                                               OpStore %2585 %2584 
                       Private bool* %2586 = OpAccessChain %2555 %600 
                                bool %2587 = OpLoad %2586 
                                               OpSelectionMerge %2590 None 
                                               OpBranchConditional %2587 %2589 %2593 
                                     %2589 = OpLabel 
                        Private f32* %2591 = OpAccessChain %77 %600 
                                 f32 %2592 = OpLoad %2591 
                                               OpStore %2588 %2592 
                                               OpBranch %2590 
                                     %2593 = OpLabel 
                        Private f32* %2594 = OpAccessChain %111 %600 
                                 f32 %2595 = OpLoad %2594 
                                               OpStore %2588 %2595 
                                               OpBranch %2590 
                                     %2590 = OpLabel 
                                 f32 %2596 = OpLoad %2588 
                        Private f32* %2597 = OpAccessChain %33 %600 
                                               OpStore %2597 %2596 
                               f32_3 %2598 = OpLoad %179 
                               f32_3 %2599 = OpVectorShuffle %2598 %2598 0 0 0 
                               f32_3 %2602 = OpFMul %2599 %2601 
                               f32_3 %2603 = OpLoad %33 
                               f32_3 %2604 = OpFAdd %2602 %2603 
                                               OpStore %179 %2604 
                               f32_3 %2605 = OpLoad %179 
                               f32_3 %2608 = OpFMul %2605 %2607 
                                               OpStore %33 %2608 
                               f32_3 %2609 = OpLoad %179 
                               f32_3 %2612 = OpFAdd %2609 %2611 
                                               OpStore %77 %2612 
                               f32_3 %2613 = OpLoad %77 
                               f32_3 %2616 = OpFMul %2613 %2615 
                                               OpStore %77 %2616 
                               f32_3 %2617 = OpLoad %77 
                               f32_3 %2618 = OpExtInst %1 4 %2617 
                               f32_3 %2619 = OpExtInst %1 40 %2618 %2536 
                                               OpStore %77 %2619 
                               f32_3 %2620 = OpLoad %77 
                               f32_3 %2621 = OpExtInst %1 30 %2620 
                                               OpStore %77 %2621 
                               f32_3 %2622 = OpLoad %77 
                               f32_3 %2625 = OpFMul %2622 %2624 
                                               OpStore %77 %2625 
                               f32_3 %2626 = OpLoad %77 
                               f32_3 %2627 = OpExtInst %1 29 %2626 
                                               OpStore %77 %2627 
                               f32_3 %2631 = OpLoad %179 
                               f32_4 %2632 = OpVectorShuffle %2631 %2631 0 1 2 2 
                              bool_4 %2633 = OpFOrdGreaterThanEqual %2630 %2632 
                              bool_3 %2634 = OpVectorShuffle %2633 %2633 0 1 2 
                                               OpStore %2628 %2634 
                       Private bool* %2637 = OpAccessChain %2628 %85 
                                bool %2638 = OpLoad %2637 
                                               OpSelectionMerge %2641 None 
                                               OpBranchConditional %2638 %2640 %2644 
                                     %2640 = OpLabel 
                        Private f32* %2642 = OpAccessChain %33 %85 
                                 f32 %2643 = OpLoad %2642 
                                               OpStore %2639 %2643 
                                               OpBranch %2641 
                                     %2644 = OpLabel 
                        Private f32* %2645 = OpAccessChain %77 %85 
                                 f32 %2646 = OpLoad %2645 
                                               OpStore %2639 %2646 
                                               OpBranch %2641 
                                     %2641 = OpLabel 
                                 f32 %2647 = OpLoad %2639 
                         Output f32* %2649 = OpAccessChain %2636 %85 
                                               OpStore %2649 %2647 
                       Private bool* %2650 = OpAccessChain %2628 %58 
                                bool %2651 = OpLoad %2650 
                                               OpSelectionMerge %2654 None 
                                               OpBranchConditional %2651 %2653 %2657 
                                     %2653 = OpLabel 
                        Private f32* %2655 = OpAccessChain %33 %58 
                                 f32 %2656 = OpLoad %2655 
                                               OpStore %2652 %2656 
                                               OpBranch %2654 
                                     %2657 = OpLabel 
                        Private f32* %2658 = OpAccessChain %77 %58 
                                 f32 %2659 = OpLoad %2658 
                                               OpStore %2652 %2659 
                                               OpBranch %2654 
                                     %2654 = OpLabel 
                                 f32 %2660 = OpLoad %2652 
                         Output f32* %2661 = OpAccessChain %2636 %58 
                                               OpStore %2661 %2660 
                       Private bool* %2662 = OpAccessChain %2628 %600 
                                bool %2663 = OpLoad %2662 
                                               OpSelectionMerge %2666 None 
                                               OpBranchConditional %2663 %2665 %2669 
                                     %2665 = OpLabel 
                        Private f32* %2667 = OpAccessChain %33 %600 
                                 f32 %2668 = OpLoad %2667 
                                               OpStore %2664 %2668 
                                               OpBranch %2666 
                                     %2669 = OpLabel 
                        Private f32* %2670 = OpAccessChain %77 %600 
                                 f32 %2671 = OpLoad %2670 
                                               OpStore %2664 %2671 
                                               OpBranch %2666 
                                     %2666 = OpLabel 
                                 f32 %2672 = OpLoad %2664 
                         Output f32* %2673 = OpAccessChain %2636 %600 
                                               OpStore %2673 %2672 
                        Private f32* %2674 = OpAccessChain %9 %85 
                                 f32 %2675 = OpLoad %2674 
                         Output f32* %2676 = OpAccessChain %2636 %2468 
                                               OpStore %2676 %2675 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA" "FXAA_NO_ALPHA" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %57 %64 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %39 0 Offset 39 
                                             OpMemberDecorate %39 1 Offset 39 
                                             OpDecorate %39 Block 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate vs_TEXCOORD1 Location 57 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypePointer Output %7 
                                 f32 %26 = OpConstant 3.674022E-40 
                                 f32 %27 = OpConstant 3.674022E-40 
                               f32_2 %28 = OpConstantComposite %26 %27 
                                     %32 = OpTypePointer Private %19 
                      Private f32_2* %33 = OpVariable Private 
                               f32_2 %36 = OpConstantComposite %27 %27 
                                     %39 = OpTypeStruct %6 %7 
                                     %40 = OpTypePointer Uniform %39 
       Uniform struct {f32; f32_4;}* %41 = OpVariable Uniform 
                                 i32 %42 = OpConstant 1 
                                     %43 = OpTypePointer Uniform %7 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_2 %50 = OpConstantComposite %49 %49 
                                     %56 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %59 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                       Output f32_4* %23 = OpAccessChain %13 %15 
                               f32_4 %24 = OpLoad %23 
                               f32_4 %25 = OpVectorShuffle %24 %21 4 5 2 3 
                                             OpStore %23 %25 
                       Output f32_4* %29 = OpAccessChain %13 %15 
                               f32_4 %30 = OpLoad %29 
                               f32_4 %31 = OpVectorShuffle %30 %28 0 1 4 5 
                                             OpStore %29 %31 
                               f32_3 %34 = OpLoad %18 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %37 = OpFAdd %35 %36 
                                             OpStore %33 %37 
                               f32_2 %38 = OpLoad %33 
                      Uniform f32_4* %44 = OpAccessChain %41 %42 
                               f32_4 %45 = OpLoad %44 
                               f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                               f32_2 %47 = OpFMul %38 %46 
                                             OpStore %33 %47 
                               f32_2 %48 = OpLoad %33 
                               f32_2 %51 = OpFMul %48 %50 
                      Uniform f32_4* %52 = OpAccessChain %41 %42 
                               f32_4 %53 = OpLoad %52 
                               f32_2 %54 = OpVectorShuffle %53 %53 2 3 
                               f32_2 %55 = OpFAdd %51 %54 
                                             OpStore %33 %55 
                               f32_2 %58 = OpLoad %33 
                        Uniform f32* %60 = OpAccessChain %41 %15 
                                 f32 %61 = OpLoad %60 
                               f32_2 %62 = OpCompositeConstruct %61 %61 
                               f32_2 %63 = OpFMul %58 %62 
                                             OpStore vs_TEXCOORD1 %63 
                               f32_2 %65 = OpLoad %33 
                                             OpStore vs_TEXCOORD0 %65 
                         Output f32* %67 = OpAccessChain %13 %15 %9 
                                 f32 %68 = OpLoad %67 
                                 f32 %69 = OpFNegate %68 
                         Output f32* %70 = OpAccessChain %13 %15 %9 
                                             OpStore %70 %69 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 2933
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %2930 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %2751 DescriptorSet 2751 
                                               OpDecorate %2751 Binding 2751 
                                               OpDecorate %2753 DescriptorSet 2753 
                                               OpDecorate %2753 Binding 2753 
                                               OpDecorate %2930 Location 2930 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %18 = OpConstant 3.674022E-40 
                                   f32 %19 = OpConstant 3.674022E-40 
                                       %27 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %6 %27 %27 
                                       %29 = OpTypePointer Uniform %28 
  Uniform struct {f32; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 0 
                                       %33 = OpTypePointer Uniform %6 
                                       %40 = OpTypePointer Private %27 
                        Private f32_4* %41 = OpVariable Private 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypePointer Private %6 
                          Private f32* %56 = OpVariable Private 
                                       %62 = OpTypeVector %31 2 
                                   i32 %63 = OpConstant 1 
                                 i32_2 %64 = OpConstantComposite %32 %63 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 1 
                          Private f32* %69 = OpVariable Private 
                                 i32_2 %75 = OpConstantComposite %63 %32 
                        Private f32_3* %78 = OpVariable Private 
                                   i32 %84 = OpConstant -1 
                                 i32_2 %85 = OpConstantComposite %32 %84 
                                   u32 %88 = OpConstant 0 
                          Private f32* %90 = OpVariable Private 
                                 i32_2 %96 = OpConstantComposite %84 %32 
                                       %99 = OpTypePointer Private %10 
                       Private f32_2* %100 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_3* %119 = OpVariable Private 
                       Private f32_2* %125 = OpVariable Private 
                                  f32 %143 = OpConstant 3.674022E-40 
                                  f32 %154 = OpConstant 3.674022E-40 
                                      %156 = OpTypeBool 
                                      %157 = OpTypePointer Private %156 
                        Private bool* %158 = OpVariable Private 
                                i32_2 %171 = OpConstantComposite %84 %84 
                                i32_2 %179 = OpConstantComposite %63 %63 
                                i32_2 %188 = OpConstantComposite %63 %84 
                                i32_2 %197 = OpConstantComposite %84 %63 
                       Private f32_2* %201 = OpVariable Private 
                       Private f32_2* %207 = OpVariable Private 
                         Private f32* %216 = OpVariable Private 
                                  f32 %224 = OpConstant 3.674022E-40 
                       Private f32_3* %237 = OpVariable Private 
                       Private f32_3* %249 = OpVariable Private 
                                  f32 %276 = OpConstant 3.674022E-40 
                                      %321 = OpTypeVector %156 3 
                                      %322 = OpTypePointer Private %321 
                      Private bool_3* %323 = OpVariable Private 
                                      %337 = OpTypePointer Function %6 
                                  i32 %357 = OpConstant 2 
                                  f32 %366 = OpConstant 3.674022E-40 
                        Private bool* %394 = OpVariable Private 
                                  f32 %447 = OpConstant 3.674022E-40 
                                f32_2 %448 = OpConstantComposite %447 %447 
                                      %457 = OpTypePointer Input %6 
                       Private f32_3* %483 = OpVariable Private 
                                  f32 %492 = OpConstant 3.674022E-40 
                       Private f32_2* %519 = OpVariable Private 
                                  f32 %547 = OpConstant 3.674022E-40 
                                      %562 = OpTypePointer Private %31 
                         Private i32* %563 = OpVariable Private 
                                  u32 %566 = OpConstant 4294967295 
                                      %582 = OpTypePointer Private %62 
                       Private i32_2* %583 = OpVariable Private 
                                      %589 = OpTypeVector %156 4 
                                      %591 = OpTypeVector %156 2 
                                      %593 = OpTypeVector %66 2 
                                u32_2 %594 = OpConstantComposite %88 %88 
                                u32_2 %595 = OpConstantComposite %67 %67 
                                  f32 %603 = OpConstant 3.674022E-40 
                         Private f32* %622 = OpVariable Private 
                                  u32 %641 = OpConstant 2 
                                      %643 = OpTypeVector %31 3 
                                      %644 = OpTypePointer Private %643 
                       Private i32_3* %645 = OpVariable Private 
                                 f32 %2295 = OpConstant 3.674022E-40 
                                     %2491 = OpTypePointer Private %591 
                     Private bool_2* %2492 = OpVariable Private 
                                 f32 %2503 = OpConstant 3.674022E-40 
                      Private i32_2* %2613 = OpVariable Private 
                               f32_4 %2616 = OpConstantComposite %18 %18 %18 %18 
                     Private bool_2* %2628 = OpVariable Private 
                                     %2630 = OpTypeVector %31 4 
                       Private bool* %2647 = OpVariable Private 
                                     %2649 = OpTypePointer Function %156 
                                 u32 %2734 = OpConstant 3 
                                     %2740 = OpTypePointer Uniform %27 
UniformConstant read_only Texture2D* %2751 = OpVariable UniformConstant 
            UniformConstant sampler* %2753 = OpVariable UniformConstant 
                                 f32 %2762 = OpConstant 3.674022E-40 
                                 f32 %2765 = OpConstant 3.674022E-40 
                                 f32 %2792 = OpConstant 3.674022E-40 
                               f32_3 %2793 = OpConstantComposite %2792 %2792 %2792 
                                 f32 %2797 = OpConstant 3.674022E-40 
                               f32_3 %2798 = OpConstantComposite %2797 %2797 %2797 
                                 f32 %2803 = OpConstant 3.674022E-40 
                               f32_3 %2804 = OpConstantComposite %2803 %2803 %2803 
                                 f32 %2809 = OpConstant 3.674022E-40 
                               f32_3 %2810 = OpConstantComposite %2809 %2809 %2809 
                                 f32 %2812 = OpConstant 3.674022E-40 
                               f32_3 %2813 = OpConstantComposite %2812 %2812 %2812 
                                 f32 %2815 = OpConstant 3.674022E-40 
                               f32_4 %2816 = OpConstantComposite %2815 %2815 %2815 %18 
                                 f32 %2859 = OpConstant 3.674022E-40 
                               f32_3 %2860 = OpConstantComposite %2859 %2859 %2859 
                                 f32 %2865 = OpConstant 3.674022E-40 
                               f32_3 %2866 = OpConstantComposite %2865 %2865 %2865 
                                 f32 %2869 = OpConstant 3.674022E-40 
                               f32_3 %2870 = OpConstantComposite %2869 %2869 %2869 
                                 f32 %2873 = OpConstant 3.674022E-40 
                               f32_3 %2874 = OpConstantComposite %2873 %2873 %2873 
                                 f32 %2882 = OpConstant 3.674022E-40 
                               f32_3 %2883 = OpConstantComposite %2882 %2882 %2882 
                                 f32 %2887 = OpConstant 3.674022E-40 
                               f32_4 %2888 = OpConstantComposite %2887 %2887 %2887 %18 
                                     %2929 = OpTypePointer Output %27 
                       Output f32_4* %2930 = OpVariable Output 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %338 = OpVariable Function 
                        Function f32* %354 = OpVariable Function 
                        Function f32* %406 = OpVariable Function 
                        Function f32* %427 = OpVariable Function 
                        Function f32* %437 = OpVariable Function 
                        Function f32* %454 = OpVariable Function 
                        Function f32* %467 = OpVariable Function 
                        Function f32* %538 = OpVariable Function 
                        Function f32* %612 = OpVariable Function 
                        Function f32* %633 = OpVariable Function 
                        Function f32* %668 = OpVariable Function 
                        Function f32* %686 = OpVariable Function 
                        Function f32* %774 = OpVariable Function 
                        Function f32* %794 = OpVariable Function 
                        Function f32* %826 = OpVariable Function 
                        Function f32* %847 = OpVariable Function 
                        Function f32* %879 = OpVariable Function 
                        Function f32* %897 = OpVariable Function 
                        Function f32* %985 = OpVariable Function 
                       Function f32* %1005 = OpVariable Function 
                       Function f32* %1037 = OpVariable Function 
                       Function f32* %1058 = OpVariable Function 
                       Function f32* %1090 = OpVariable Function 
                       Function f32* %1108 = OpVariable Function 
                       Function f32* %1196 = OpVariable Function 
                       Function f32* %1216 = OpVariable Function 
                       Function f32* %1248 = OpVariable Function 
                       Function f32* %1269 = OpVariable Function 
                       Function f32* %1301 = OpVariable Function 
                       Function f32* %1319 = OpVariable Function 
                       Function f32* %1407 = OpVariable Function 
                       Function f32* %1427 = OpVariable Function 
                       Function f32* %1459 = OpVariable Function 
                       Function f32* %1480 = OpVariable Function 
                       Function f32* %1512 = OpVariable Function 
                       Function f32* %1530 = OpVariable Function 
                       Function f32* %1618 = OpVariable Function 
                       Function f32* %1638 = OpVariable Function 
                       Function f32* %1670 = OpVariable Function 
                       Function f32* %1691 = OpVariable Function 
                       Function f32* %1723 = OpVariable Function 
                       Function f32* %1741 = OpVariable Function 
                       Function f32* %1829 = OpVariable Function 
                       Function f32* %1849 = OpVariable Function 
                       Function f32* %1881 = OpVariable Function 
                       Function f32* %1902 = OpVariable Function 
                       Function f32* %1934 = OpVariable Function 
                       Function f32* %1952 = OpVariable Function 
                       Function f32* %2040 = OpVariable Function 
                       Function f32* %2060 = OpVariable Function 
                       Function f32* %2092 = OpVariable Function 
                       Function f32* %2113 = OpVariable Function 
                       Function f32* %2145 = OpVariable Function 
                       Function f32* %2163 = OpVariable Function 
                       Function f32* %2251 = OpVariable Function 
                       Function f32* %2271 = OpVariable Function 
                       Function f32* %2304 = OpVariable Function 
                       Function f32* %2325 = OpVariable Function 
                       Function f32* %2357 = OpVariable Function 
                       Function f32* %2375 = OpVariable Function 
                       Function f32* %2463 = OpVariable Function 
                       Function f32* %2482 = OpVariable Function 
                       Function f32* %2510 = OpVariable Function 
                       Function f32* %2528 = OpVariable Function 
                       Function f32* %2545 = OpVariable Function 
                       Function f32* %2562 = OpVariable Function 
                       Function f32* %2586 = OpVariable Function 
                       Function f32* %2603 = OpVariable Function 
                      Function bool* %2650 = OpVariable Function 
                       Function f32* %2687 = OpVariable Function 
                       Function f32* %2703 = OpVariable Function 
                       Function f32* %2823 = OpVariable Function 
                       Function f32* %2835 = OpVariable Function 
                       Function f32* %2847 = OpVariable Function 
                       Function f32* %2895 = OpVariable Function 
                       Function f32* %2907 = OpVariable Function 
                       Function f32* %2919 = OpVariable Function 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                                 f32_3 %14 = OpLoad %9 
                                 f32_3 %15 = OpVectorShuffle %14 %13 3 4 2 
                                               OpStore %9 %15 
                                 f32_3 %16 = OpLoad %9 
                                 f32_2 %17 = OpVectorShuffle %16 %16 0 1 
                                 f32_2 %20 = OpCompositeConstruct %18 %18 
                                 f32_2 %21 = OpCompositeConstruct %19 %19 
                                 f32_2 %22 = OpExtInst %1 43 %17 %20 %21 
                                 f32_3 %23 = OpLoad %9 
                                 f32_3 %24 = OpVectorShuffle %23 %22 3 4 2 
                                               OpStore %9 %24 
                                 f32_3 %25 = OpLoad %9 
                                 f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                          Uniform f32* %34 = OpAccessChain %30 %32 
                                   f32 %35 = OpLoad %34 
                                 f32_2 %36 = OpCompositeConstruct %35 %35 
                                 f32_2 %37 = OpFMul %26 %36 
                                 f32_3 %38 = OpLoad %9 
                                 f32_3 %39 = OpVectorShuffle %38 %37 3 4 2 
                                               OpStore %9 %39 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_3 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleExplicitLod %51 %53 Lod %27 
                                               OpStore %41 %54 
                   read_only Texture2D %57 = OpLoad %44 
                               sampler %58 = OpLoad %48 
            read_only Texture2DSampled %59 = OpSampledImage %57 %58 
                                 f32_3 %60 = OpLoad %9 
                                 f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                 f32_4 %65 = OpImageSampleExplicitLod %59 %61 Lod %27ConstOffset %65 
                                   f32 %68 = OpCompositeExtract %65 1 
                                               OpStore %56 %68 
                   read_only Texture2D %70 = OpLoad %44 
                               sampler %71 = OpLoad %48 
            read_only Texture2DSampled %72 = OpSampledImage %70 %71 
                                 f32_3 %73 = OpLoad %9 
                                 f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                 f32_4 %76 = OpImageSampleExplicitLod %72 %74 Lod %27ConstOffset %76 
                                   f32 %77 = OpCompositeExtract %76 1 
                                               OpStore %69 %77 
                   read_only Texture2D %79 = OpLoad %44 
                               sampler %80 = OpLoad %48 
            read_only Texture2DSampled %81 = OpSampledImage %79 %80 
                                 f32_3 %82 = OpLoad %9 
                                 f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                                 f32_4 %86 = OpImageSampleExplicitLod %81 %83 Lod %27ConstOffset %86 
                                   f32 %87 = OpCompositeExtract %86 1 
                          Private f32* %89 = OpAccessChain %78 %88 
                                               OpStore %89 %87 
                   read_only Texture2D %91 = OpLoad %44 
                               sampler %92 = OpLoad %48 
            read_only Texture2DSampled %93 = OpSampledImage %91 %92 
                                 f32_3 %94 = OpLoad %9 
                                 f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                 f32_4 %97 = OpImageSampleExplicitLod %93 %95 Lod %27ConstOffset %97 
                                   f32 %98 = OpCompositeExtract %97 1 
                                               OpStore %90 %98 
                         Private f32* %101 = OpAccessChain %41 %67 
                                  f32 %102 = OpLoad %101 
                                  f32 %103 = OpLoad %56 
                                  f32 %104 = OpExtInst %1 40 %102 %103 
                         Private f32* %105 = OpAccessChain %100 %88 
                                               OpStore %105 %104 
                         Private f32* %107 = OpAccessChain %41 %67 
                                  f32 %108 = OpLoad %107 
                                  f32 %109 = OpLoad %56 
                                  f32 %110 = OpExtInst %1 37 %108 %109 
                                               OpStore %106 %110 
                                  f32 %111 = OpLoad %69 
                         Private f32* %112 = OpAccessChain %100 %88 
                                  f32 %113 = OpLoad %112 
                                  f32 %114 = OpExtInst %1 40 %111 %113 
                         Private f32* %115 = OpAccessChain %100 %88 
                                               OpStore %115 %114 
                                  f32 %116 = OpLoad %69 
                                  f32 %117 = OpLoad %106 
                                  f32 %118 = OpExtInst %1 37 %116 %117 
                                               OpStore %106 %118 
                                  f32 %120 = OpLoad %90 
                         Private f32* %121 = OpAccessChain %78 %88 
                                  f32 %122 = OpLoad %121 
                                  f32 %123 = OpExtInst %1 40 %120 %122 
                         Private f32* %124 = OpAccessChain %119 %88 
                                               OpStore %124 %123 
                                  f32 %126 = OpLoad %90 
                         Private f32* %127 = OpAccessChain %78 %88 
                                  f32 %128 = OpLoad %127 
                                  f32 %129 = OpExtInst %1 37 %126 %128 
                         Private f32* %130 = OpAccessChain %125 %88 
                                               OpStore %130 %129 
                         Private f32* %131 = OpAccessChain %100 %88 
                                  f32 %132 = OpLoad %131 
                         Private f32* %133 = OpAccessChain %119 %88 
                                  f32 %134 = OpLoad %133 
                                  f32 %135 = OpExtInst %1 40 %132 %134 
                         Private f32* %136 = OpAccessChain %100 %88 
                                               OpStore %136 %135 
                                  f32 %137 = OpLoad %106 
                         Private f32* %138 = OpAccessChain %125 %88 
                                  f32 %139 = OpLoad %138 
                                  f32 %140 = OpExtInst %1 37 %137 %139 
                                               OpStore %106 %140 
                         Private f32* %141 = OpAccessChain %100 %88 
                                  f32 %142 = OpLoad %141 
                                  f32 %144 = OpFMul %142 %143 
                         Private f32* %145 = OpAccessChain %119 %88 
                                               OpStore %145 %144 
                                  f32 %146 = OpLoad %106 
                                  f32 %147 = OpFNegate %146 
                         Private f32* %148 = OpAccessChain %100 %88 
                                  f32 %149 = OpLoad %148 
                                  f32 %150 = OpFAdd %147 %149 
                         Private f32* %151 = OpAccessChain %100 %88 
                                               OpStore %151 %150 
                         Private f32* %152 = OpAccessChain %119 %88 
                                  f32 %153 = OpLoad %152 
                                  f32 %155 = OpExtInst %1 40 %153 %154 
                                               OpStore %106 %155 
                         Private f32* %159 = OpAccessChain %100 %88 
                                  f32 %160 = OpLoad %159 
                                  f32 %161 = OpLoad %106 
                                 bool %162 = OpFOrdGreaterThanEqual %160 %161 
                                               OpStore %158 %162 
                                 bool %163 = OpLoad %158 
                                               OpSelectionMerge %165 None 
                                               OpBranchConditional %163 %164 %2736 
                                      %164 = OpLabel 
                  read_only Texture2D %166 = OpLoad %44 
                              sampler %167 = OpLoad %48 
           read_only Texture2DSampled %168 = OpSampledImage %166 %167 
                                f32_3 %169 = OpLoad %9 
                                f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                f32_4 %172 = OpImageSampleExplicitLod %168 %170 Lod %27ConstOffset %172 
                                  f32 %173 = OpCompositeExtract %172 1 
                                               OpStore %106 %173 
                  read_only Texture2D %174 = OpLoad %44 
                              sampler %175 = OpLoad %48 
           read_only Texture2DSampled %176 = OpSampledImage %174 %175 
                                f32_3 %177 = OpLoad %9 
                                f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                f32_4 %180 = OpImageSampleExplicitLod %176 %178 Lod %27ConstOffset %180 
                                  f32 %181 = OpCompositeExtract %180 1 
                         Private f32* %182 = OpAccessChain %119 %88 
                                               OpStore %182 %181 
                  read_only Texture2D %183 = OpLoad %44 
                              sampler %184 = OpLoad %48 
           read_only Texture2DSampled %185 = OpSampledImage %183 %184 
                                f32_3 %186 = OpLoad %9 
                                f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                f32_4 %189 = OpImageSampleExplicitLod %185 %187 Lod %27ConstOffset %189 
                                  f32 %190 = OpCompositeExtract %189 1 
                         Private f32* %191 = OpAccessChain %125 %88 
                                               OpStore %191 %190 
                  read_only Texture2D %192 = OpLoad %44 
                              sampler %193 = OpLoad %48 
           read_only Texture2DSampled %194 = OpSampledImage %192 %193 
                                f32_3 %195 = OpLoad %9 
                                f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                f32_4 %198 = OpImageSampleExplicitLod %194 %196 Lod %27ConstOffset %198 
                                  f32 %199 = OpCompositeExtract %198 1 
                         Private f32* %200 = OpAccessChain %9 %88 
                                               OpStore %200 %199 
                                  f32 %202 = OpLoad %56 
                         Private f32* %203 = OpAccessChain %78 %88 
                                  f32 %204 = OpLoad %203 
                                  f32 %205 = OpFAdd %202 %204 
                         Private f32* %206 = OpAccessChain %201 %88 
                                               OpStore %206 %205 
                                  f32 %208 = OpLoad %69 
                                  f32 %209 = OpLoad %90 
                                  f32 %210 = OpFAdd %208 %209 
                         Private f32* %211 = OpAccessChain %207 %88 
                                               OpStore %211 %210 
                         Private f32* %212 = OpAccessChain %100 %88 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFDiv %19 %213 
                         Private f32* %215 = OpAccessChain %100 %88 
                                               OpStore %215 %214 
                         Private f32* %217 = OpAccessChain %201 %88 
                                  f32 %218 = OpLoad %217 
                         Private f32* %219 = OpAccessChain %207 %88 
                                  f32 %220 = OpLoad %219 
                                  f32 %221 = OpFAdd %218 %220 
                                               OpStore %216 %221 
                         Private f32* %222 = OpAccessChain %41 %67 
                                  f32 %223 = OpLoad %222 
                                  f32 %225 = OpFMul %223 %224 
                         Private f32* %226 = OpAccessChain %201 %88 
                                  f32 %227 = OpLoad %226 
                                  f32 %228 = OpFAdd %225 %227 
                         Private f32* %229 = OpAccessChain %201 %88 
                                               OpStore %229 %228 
                         Private f32* %230 = OpAccessChain %41 %67 
                                  f32 %231 = OpLoad %230 
                                  f32 %232 = OpFMul %231 %224 
                         Private f32* %233 = OpAccessChain %207 %88 
                                  f32 %234 = OpLoad %233 
                                  f32 %235 = OpFAdd %232 %234 
                         Private f32* %236 = OpAccessChain %207 %88 
                                               OpStore %236 %235 
                         Private f32* %238 = OpAccessChain %119 %88 
                                  f32 %239 = OpLoad %238 
                         Private f32* %240 = OpAccessChain %125 %88 
                                  f32 %241 = OpLoad %240 
                                  f32 %242 = OpFAdd %239 %241 
                         Private f32* %243 = OpAccessChain %237 %88 
                                               OpStore %243 %242 
                                  f32 %244 = OpLoad %106 
                         Private f32* %245 = OpAccessChain %125 %88 
                                  f32 %246 = OpLoad %245 
                                  f32 %247 = OpFAdd %244 %246 
                         Private f32* %248 = OpAccessChain %125 %88 
                                               OpStore %248 %247 
                                  f32 %250 = OpLoad %69 
                                  f32 %251 = OpFMul %250 %224 
                         Private f32* %252 = OpAccessChain %237 %88 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpFAdd %251 %253 
                         Private f32* %255 = OpAccessChain %249 %88 
                                               OpStore %255 %254 
                         Private f32* %256 = OpAccessChain %78 %88 
                                  f32 %257 = OpLoad %256 
                                  f32 %258 = OpFMul %257 %224 
                         Private f32* %259 = OpAccessChain %125 %88 
                                  f32 %260 = OpLoad %259 
                                  f32 %261 = OpFAdd %258 %260 
                         Private f32* %262 = OpAccessChain %125 %88 
                                               OpStore %262 %261 
                         Private f32* %263 = OpAccessChain %9 %88 
                                  f32 %264 = OpLoad %263 
                                  f32 %265 = OpLoad %106 
                                  f32 %266 = OpFAdd %264 %265 
                                               OpStore %106 %266 
                         Private f32* %267 = OpAccessChain %119 %88 
                                  f32 %268 = OpLoad %267 
                         Private f32* %269 = OpAccessChain %9 %88 
                                  f32 %270 = OpLoad %269 
                                  f32 %271 = OpFAdd %268 %270 
                         Private f32* %272 = OpAccessChain %9 %88 
                                               OpStore %272 %271 
                         Private f32* %273 = OpAccessChain %201 %88 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpExtInst %1 4 %274 
                                  f32 %277 = OpFMul %275 %276 
                         Private f32* %278 = OpAccessChain %249 %88 
                                  f32 %279 = OpLoad %278 
                                  f32 %280 = OpExtInst %1 4 %279 
                                  f32 %281 = OpFAdd %277 %280 
                         Private f32* %282 = OpAccessChain %201 %88 
                                               OpStore %282 %281 
                         Private f32* %283 = OpAccessChain %207 %88 
                                  f32 %284 = OpLoad %283 
                                  f32 %285 = OpExtInst %1 4 %284 
                                  f32 %286 = OpFMul %285 %276 
                         Private f32* %287 = OpAccessChain %125 %88 
                                  f32 %288 = OpLoad %287 
                                  f32 %289 = OpExtInst %1 4 %288 
                                  f32 %290 = OpFAdd %286 %289 
                         Private f32* %291 = OpAccessChain %119 %88 
                                               OpStore %291 %290 
                                  f32 %292 = OpLoad %90 
                                  f32 %293 = OpFMul %292 %224 
                                  f32 %294 = OpLoad %106 
                                  f32 %295 = OpFAdd %293 %294 
                         Private f32* %296 = OpAccessChain %125 %88 
                                               OpStore %296 %295 
                                  f32 %297 = OpLoad %56 
                                  f32 %298 = OpFMul %297 %224 
                         Private f32* %299 = OpAccessChain %9 %88 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFAdd %298 %300 
                         Private f32* %302 = OpAccessChain %9 %88 
                                               OpStore %302 %301 
                         Private f32* %303 = OpAccessChain %201 %88 
                                  f32 %304 = OpLoad %303 
                         Private f32* %305 = OpAccessChain %125 %88 
                                  f32 %306 = OpLoad %305 
                                  f32 %307 = OpExtInst %1 4 %306 
                                  f32 %308 = OpFAdd %304 %307 
                         Private f32* %309 = OpAccessChain %201 %88 
                                               OpStore %309 %308 
                         Private f32* %310 = OpAccessChain %119 %88 
                                  f32 %311 = OpLoad %310 
                         Private f32* %312 = OpAccessChain %9 %88 
                                  f32 %313 = OpLoad %312 
                                  f32 %314 = OpExtInst %1 4 %313 
                                  f32 %315 = OpFAdd %311 %314 
                         Private f32* %316 = OpAccessChain %9 %88 
                                               OpStore %316 %315 
                         Private f32* %317 = OpAccessChain %237 %88 
                                  f32 %318 = OpLoad %317 
                                  f32 %319 = OpLoad %106 
                                  f32 %320 = OpFAdd %318 %319 
                                               OpStore %106 %320 
                         Private f32* %324 = OpAccessChain %201 %88 
                                  f32 %325 = OpLoad %324 
                         Private f32* %326 = OpAccessChain %9 %88 
                                  f32 %327 = OpLoad %326 
                                 bool %328 = OpFOrdGreaterThanEqual %325 %327 
                        Private bool* %329 = OpAccessChain %323 %88 
                                               OpStore %329 %328 
                                  f32 %330 = OpLoad %216 
                                  f32 %331 = OpFMul %330 %276 
                                  f32 %332 = OpLoad %106 
                                  f32 %333 = OpFAdd %331 %332 
                         Private f32* %334 = OpAccessChain %201 %88 
                                               OpStore %334 %333 
                        Private bool* %335 = OpAccessChain %323 %88 
                                 bool %336 = OpLoad %335 
                                               OpSelectionMerge %340 None 
                                               OpBranchConditional %336 %339 %343 
                                      %339 = OpLabel 
                         Private f32* %341 = OpAccessChain %78 %88 
                                  f32 %342 = OpLoad %341 
                                               OpStore %338 %342 
                                               OpBranch %340 
                                      %343 = OpLabel 
                                  f32 %344 = OpLoad %90 
                                               OpStore %338 %344 
                                               OpBranch %340 
                                      %340 = OpLabel 
                                  f32 %345 = OpLoad %338 
                         Private f32* %346 = OpAccessChain %78 %88 
                                               OpStore %346 %345 
                        Private bool* %347 = OpAccessChain %323 %88 
                                 bool %348 = OpLoad %347 
                                  f32 %349 = OpLoad %56 
                                  f32 %350 = OpLoad %69 
                                  f32 %351 = OpSelect %348 %349 %350 
                                               OpStore %56 %351 
                        Private bool* %352 = OpAccessChain %323 %88 
                                 bool %353 = OpLoad %352 
                                               OpSelectionMerge %356 None 
                                               OpBranchConditional %353 %355 %360 
                                      %355 = OpLabel 
                         Uniform f32* %358 = OpAccessChain %30 %357 %67 
                                  f32 %359 = OpLoad %358 
                                               OpStore %354 %359 
                                               OpBranch %356 
                                      %360 = OpLabel 
                         Uniform f32* %361 = OpAccessChain %30 %357 %88 
                                  f32 %362 = OpLoad %361 
                                               OpStore %354 %362 
                                               OpBranch %356 
                                      %356 = OpLabel 
                                  f32 %363 = OpLoad %354 
                                               OpStore %69 %363 
                         Private f32* %364 = OpAccessChain %201 %88 
                                  f32 %365 = OpLoad %364 
                                  f32 %367 = OpFMul %365 %366 
                         Private f32* %368 = OpAccessChain %41 %67 
                                  f32 %369 = OpLoad %368 
                                  f32 %370 = OpFNegate %369 
                                  f32 %371 = OpFAdd %367 %370 
                         Private f32* %372 = OpAccessChain %201 %88 
                                               OpStore %372 %371 
                         Private f32* %373 = OpAccessChain %41 %67 
                                  f32 %374 = OpLoad %373 
                                  f32 %375 = OpFNegate %374 
                         Private f32* %376 = OpAccessChain %78 %88 
                                  f32 %377 = OpLoad %376 
                                  f32 %378 = OpFAdd %375 %377 
                                               OpStore %90 %378 
                         Private f32* %379 = OpAccessChain %41 %67 
                                  f32 %380 = OpLoad %379 
                                  f32 %381 = OpFNegate %380 
                                  f32 %382 = OpLoad %56 
                                  f32 %383 = OpFAdd %381 %382 
                                               OpStore %106 %383 
                         Private f32* %384 = OpAccessChain %41 %67 
                                  f32 %385 = OpLoad %384 
                         Private f32* %386 = OpAccessChain %78 %88 
                                  f32 %387 = OpLoad %386 
                                  f32 %388 = OpFAdd %385 %387 
                         Private f32* %389 = OpAccessChain %78 %88 
                                               OpStore %389 %388 
                         Private f32* %390 = OpAccessChain %41 %67 
                                  f32 %391 = OpLoad %390 
                                  f32 %392 = OpLoad %56 
                                  f32 %393 = OpFAdd %391 %392 
                                               OpStore %56 %393 
                                  f32 %395 = OpLoad %90 
                                  f32 %396 = OpExtInst %1 4 %395 
                                  f32 %397 = OpLoad %106 
                                  f32 %398 = OpExtInst %1 4 %397 
                                 bool %399 = OpFOrdGreaterThanEqual %396 %398 
                                               OpStore %394 %399 
                                  f32 %400 = OpLoad %106 
                                  f32 %401 = OpExtInst %1 4 %400 
                                  f32 %402 = OpLoad %90 
                                  f32 %403 = OpExtInst %1 4 %402 
                                  f32 %404 = OpExtInst %1 40 %401 %403 
                                               OpStore %90 %404 
                                 bool %405 = OpLoad %394 
                                               OpSelectionMerge %408 None 
                                               OpBranchConditional %405 %407 %411 
                                      %407 = OpLabel 
                                  f32 %409 = OpLoad %69 
                                  f32 %410 = OpFNegate %409 
                                               OpStore %406 %410 
                                               OpBranch %408 
                                      %411 = OpLabel 
                                  f32 %412 = OpLoad %69 
                                               OpStore %406 %412 
                                               OpBranch %408 
                                      %408 = OpLabel 
                                  f32 %413 = OpLoad %406 
                                               OpStore %69 %413 
                         Private f32* %414 = OpAccessChain %100 %88 
                                  f32 %415 = OpLoad %414 
                         Private f32* %416 = OpAccessChain %201 %88 
                                  f32 %417 = OpLoad %416 
                                  f32 %418 = OpExtInst %1 4 %417 
                                  f32 %419 = OpFMul %415 %418 
                         Private f32* %420 = OpAccessChain %201 %88 
                                               OpStore %420 %419 
                         Private f32* %421 = OpAccessChain %201 %88 
                                  f32 %422 = OpLoad %421 
                                  f32 %423 = OpExtInst %1 43 %422 %18 %19 
                         Private f32* %424 = OpAccessChain %201 %88 
                                               OpStore %424 %423 
                        Private bool* %425 = OpAccessChain %323 %88 
                                 bool %426 = OpLoad %425 
                                               OpSelectionMerge %429 None 
                                               OpBranchConditional %426 %428 %432 
                                      %428 = OpLabel 
                         Uniform f32* %430 = OpAccessChain %30 %357 %88 
                                  f32 %431 = OpLoad %430 
                                               OpStore %427 %431 
                                               OpBranch %429 
                                      %432 = OpLabel 
                                               OpStore %427 %18 
                                               OpBranch %429 
                                      %429 = OpLabel 
                                  f32 %433 = OpLoad %427 
                         Private f32* %434 = OpAccessChain %100 %88 
                                               OpStore %434 %433 
                        Private bool* %435 = OpAccessChain %323 %88 
                                 bool %436 = OpLoad %435 
                                               OpSelectionMerge %439 None 
                                               OpBranchConditional %436 %438 %440 
                                      %438 = OpLabel 
                                               OpStore %437 %18 
                                               OpBranch %439 
                                      %440 = OpLabel 
                         Uniform f32* %441 = OpAccessChain %30 %357 %67 
                                  f32 %442 = OpLoad %441 
                                               OpStore %437 %442 
                                               OpBranch %439 
                                      %439 = OpLabel 
                                  f32 %443 = OpLoad %437 
                         Private f32* %444 = OpAccessChain %100 %67 
                                               OpStore %444 %443 
                                  f32 %445 = OpLoad %69 
                                f32_2 %446 = OpCompositeConstruct %445 %445 
                                f32_2 %449 = OpFMul %446 %448 
                                f32_2 %450 = OpLoad vs_TEXCOORD0 
                                f32_2 %451 = OpFAdd %449 %450 
                                               OpStore %125 %451 
                        Private bool* %452 = OpAccessChain %323 %88 
                                 bool %453 = OpLoad %452 
                                               OpSelectionMerge %456 None 
                                               OpBranchConditional %453 %455 %460 
                                      %455 = OpLabel 
                           Input f32* %458 = OpAccessChain vs_TEXCOORD0 %88 
                                  f32 %459 = OpLoad %458 
                                               OpStore %454 %459 
                                               OpBranch %456 
                                      %460 = OpLabel 
                         Private f32* %461 = OpAccessChain %125 %88 
                                  f32 %462 = OpLoad %461 
                                               OpStore %454 %462 
                                               OpBranch %456 
                                      %456 = OpLabel 
                                  f32 %463 = OpLoad %454 
                         Private f32* %464 = OpAccessChain %125 %88 
                                               OpStore %464 %463 
                        Private bool* %465 = OpAccessChain %323 %88 
                                 bool %466 = OpLoad %465 
                                               OpSelectionMerge %469 None 
                                               OpBranchConditional %466 %468 %472 
                                      %468 = OpLabel 
                         Private f32* %470 = OpAccessChain %125 %67 
                                  f32 %471 = OpLoad %470 
                                               OpStore %467 %471 
                                               OpBranch %469 
                                      %472 = OpLabel 
                           Input f32* %473 = OpAccessChain vs_TEXCOORD0 %67 
                                  f32 %474 = OpLoad %473 
                                               OpStore %467 %474 
                                               OpBranch %469 
                                      %469 = OpLabel 
                                  f32 %475 = OpLoad %467 
                         Private f32* %476 = OpAccessChain %125 %67 
                                               OpStore %476 %475 
                                f32_2 %477 = OpLoad %100 
                                f32_2 %478 = OpFNegate %477 
                                f32_2 %479 = OpLoad %125 
                                f32_2 %480 = OpFAdd %478 %479 
                                f32_3 %481 = OpLoad %237 
                                f32_3 %482 = OpVectorShuffle %481 %480 3 4 2 
                                               OpStore %237 %482 
                                f32_2 %484 = OpLoad %100 
                                f32_2 %485 = OpLoad %125 
                                f32_2 %486 = OpFAdd %484 %485 
                                f32_3 %487 = OpLoad %483 
                                f32_3 %488 = OpVectorShuffle %487 %486 3 4 2 
                                               OpStore %483 %488 
                         Private f32* %489 = OpAccessChain %201 %88 
                                  f32 %490 = OpLoad %489 
                                  f32 %491 = OpFMul %490 %224 
                                  f32 %493 = OpFAdd %491 %492 
                         Private f32* %494 = OpAccessChain %125 %88 
                                               OpStore %494 %493 
                                f32_3 %495 = OpLoad %237 
                                f32_2 %496 = OpVectorShuffle %495 %495 0 1 
                                               OpStore %207 %496 
                                f32_2 %497 = OpLoad %207 
                                f32_2 %498 = OpCompositeConstruct %18 %18 
                                f32_2 %499 = OpCompositeConstruct %19 %19 
                                f32_2 %500 = OpExtInst %1 43 %497 %498 %499 
                                               OpStore %207 %500 
                                f32_2 %501 = OpLoad %207 
                         Uniform f32* %502 = OpAccessChain %30 %32 
                                  f32 %503 = OpLoad %502 
                                f32_2 %504 = OpCompositeConstruct %503 %503 
                                f32_2 %505 = OpFMul %501 %504 
                                               OpStore %207 %505 
                  read_only Texture2D %506 = OpLoad %44 
                              sampler %507 = OpLoad %48 
           read_only Texture2DSampled %508 = OpSampledImage %506 %507 
                                f32_2 %509 = OpLoad %207 
                                f32_4 %510 = OpImageSampleExplicitLod %508 %509 Lod %27 
                                  f32 %511 = OpCompositeExtract %510 1 
                         Private f32* %512 = OpAccessChain %207 %88 
                                               OpStore %512 %511 
                         Private f32* %513 = OpAccessChain %201 %88 
                                  f32 %514 = OpLoad %513 
                         Private f32* %515 = OpAccessChain %201 %88 
                                  f32 %516 = OpLoad %515 
                                  f32 %517 = OpFMul %514 %516 
                         Private f32* %518 = OpAccessChain %201 %88 
                                               OpStore %518 %517 
                                f32_3 %520 = OpLoad %483 
                                f32_2 %521 = OpVectorShuffle %520 %520 0 1 
                                               OpStore %519 %521 
                                f32_2 %522 = OpLoad %519 
                                f32_2 %523 = OpCompositeConstruct %18 %18 
                                f32_2 %524 = OpCompositeConstruct %19 %19 
                                f32_2 %525 = OpExtInst %1 43 %522 %523 %524 
                                               OpStore %519 %525 
                                f32_2 %526 = OpLoad %519 
                         Uniform f32* %527 = OpAccessChain %30 %32 
                                  f32 %528 = OpLoad %527 
                                f32_2 %529 = OpCompositeConstruct %528 %528 
                                f32_2 %530 = OpFMul %526 %529 
                                               OpStore %519 %530 
                  read_only Texture2D %531 = OpLoad %44 
                              sampler %532 = OpLoad %48 
           read_only Texture2DSampled %533 = OpSampledImage %531 %532 
                                f32_2 %534 = OpLoad %519 
                                f32_4 %535 = OpImageSampleExplicitLod %533 %534 Lod %27 
                                  f32 %536 = OpCompositeExtract %535 1 
                                               OpStore %216 %536 
                                 bool %537 = OpLoad %394 
                                               OpSelectionMerge %540 None 
                                               OpBranchConditional %537 %539 %543 
                                      %539 = OpLabel 
                         Private f32* %541 = OpAccessChain %78 %88 
                                  f32 %542 = OpLoad %541 
                                               OpStore %538 %542 
                                               OpBranch %540 
                                      %543 = OpLabel 
                                  f32 %544 = OpLoad %56 
                                               OpStore %538 %544 
                                               OpBranch %540 
                                      %540 = OpLabel 
                                  f32 %545 = OpLoad %538 
                                               OpStore %56 %545 
                                  f32 %546 = OpLoad %90 
                                  f32 %548 = OpFMul %546 %547 
                         Private f32* %549 = OpAccessChain %78 %88 
                                               OpStore %549 %548 
                                  f32 %550 = OpLoad %56 
                                  f32 %551 = OpFNegate %550 
                                  f32 %552 = OpFMul %551 %447 
                         Private f32* %553 = OpAccessChain %41 %67 
                                  f32 %554 = OpLoad %553 
                                  f32 %555 = OpFAdd %552 %554 
                                               OpStore %90 %555 
                         Private f32* %556 = OpAccessChain %201 %88 
                                  f32 %557 = OpLoad %556 
                         Private f32* %558 = OpAccessChain %125 %88 
                                  f32 %559 = OpLoad %558 
                                  f32 %560 = OpFMul %557 %559 
                         Private f32* %561 = OpAccessChain %201 %88 
                                               OpStore %561 %560 
                                  f32 %564 = OpLoad %90 
                                 bool %565 = OpFOrdLessThan %564 %18 
                                  u32 %567 = OpSelect %565 %566 %88 
                                  i32 %568 = OpBitcast %567 
                                               OpStore %563 %568 
                                  f32 %569 = OpLoad %56 
                                  f32 %570 = OpFNegate %569 
                                  f32 %571 = OpFMul %570 %447 
                         Private f32* %572 = OpAccessChain %207 %88 
                                  f32 %573 = OpLoad %572 
                                  f32 %574 = OpFAdd %571 %573 
                         Private f32* %575 = OpAccessChain %119 %88 
                                               OpStore %575 %574 
                                  f32 %576 = OpLoad %56 
                                  f32 %577 = OpFNegate %576 
                                  f32 %578 = OpFMul %577 %447 
                                  f32 %579 = OpLoad %216 
                                  f32 %580 = OpFAdd %578 %579 
                         Private f32* %581 = OpAccessChain %119 %67 
                                               OpStore %581 %580 
                                f32_3 %584 = OpLoad %119 
                                f32_4 %585 = OpVectorShuffle %584 %584 0 1 0 1 
                                f32_4 %586 = OpExtInst %1 4 %585 
                                f32_3 %587 = OpLoad %78 
                                f32_4 %588 = OpVectorShuffle %587 %587 0 0 0 0 
                               bool_4 %590 = OpFOrdGreaterThanEqual %586 %588 
                               bool_2 %592 = OpVectorShuffle %590 %590 0 1 
                                u32_2 %596 = OpSelect %592 %595 %594 
                                u32_2 %597 = OpCompositeConstruct %566 %566 
                                u32_2 %598 = OpIMul %596 %597 
                                i32_2 %599 = OpBitcast %598 
                                               OpStore %583 %599 
                         Private f32* %600 = OpAccessChain %100 %88 
                                  f32 %601 = OpLoad %600 
                                  f32 %602 = OpFNegate %601 
                                  f32 %604 = OpFMul %602 %603 
                         Private f32* %605 = OpAccessChain %237 %88 
                                  f32 %606 = OpLoad %605 
                                  f32 %607 = OpFAdd %604 %606 
                         Private f32* %608 = OpAccessChain %519 %88 
                                               OpStore %608 %607 
                         Private i32* %609 = OpAccessChain %583 %88 
                                  i32 %610 = OpLoad %609 
                                 bool %611 = OpINotEqual %610 %32 
                                               OpSelectionMerge %614 None 
                                               OpBranchConditional %611 %613 %617 
                                      %613 = OpLabel 
                         Private f32* %615 = OpAccessChain %237 %88 
                                  f32 %616 = OpLoad %615 
                                               OpStore %612 %616 
                                               OpBranch %614 
                                      %617 = OpLabel 
                         Private f32* %618 = OpAccessChain %519 %88 
                                  f32 %619 = OpLoad %618 
                                               OpStore %612 %619 
                                               OpBranch %614 
                                      %614 = OpLabel 
                                  f32 %620 = OpLoad %612 
                         Private f32* %621 = OpAccessChain %237 %88 
                                               OpStore %621 %620 
                         Private f32* %623 = OpAccessChain %100 %67 
                                  f32 %624 = OpLoad %623 
                                  f32 %625 = OpFNegate %624 
                                  f32 %626 = OpFMul %625 %603 
                         Private f32* %627 = OpAccessChain %237 %67 
                                  f32 %628 = OpLoad %627 
                                  f32 %629 = OpFAdd %626 %628 
                                               OpStore %622 %629 
                         Private i32* %630 = OpAccessChain %583 %88 
                                  i32 %631 = OpLoad %630 
                                 bool %632 = OpINotEqual %631 %32 
                                               OpSelectionMerge %635 None 
                                               OpBranchConditional %632 %634 %638 
                                      %634 = OpLabel 
                         Private f32* %636 = OpAccessChain %237 %67 
                                  f32 %637 = OpLoad %636 
                                               OpStore %633 %637 
                                               OpBranch %635 
                                      %638 = OpLabel 
                                  f32 %639 = OpLoad %622 
                                               OpStore %633 %639 
                                               OpBranch %635 
                                      %635 = OpLabel 
                                  f32 %640 = OpLoad %633 
                         Private f32* %642 = OpAccessChain %237 %641 
                                               OpStore %642 %640 
                                i32_2 %646 = OpLoad %583 
                                i32_2 %647 = OpNot %646 
                                i32_3 %648 = OpLoad %645 
                                i32_3 %649 = OpVectorShuffle %648 %647 3 1 4 
                                               OpStore %645 %649 
                         Private i32* %650 = OpAccessChain %645 %641 
                                  i32 %651 = OpLoad %650 
                                  u32 %652 = OpBitcast %651 
                         Private i32* %653 = OpAccessChain %645 %88 
                                  i32 %654 = OpLoad %653 
                                  u32 %655 = OpBitcast %654 
                                  u32 %656 = OpBitwiseOr %652 %655 
                                  i32 %657 = OpBitcast %656 
                         Private i32* %658 = OpAccessChain %645 %88 
                                               OpStore %658 %657 
                         Private f32* %659 = OpAccessChain %100 %88 
                                  f32 %660 = OpLoad %659 
                                  f32 %661 = OpFMul %660 %603 
                         Private f32* %662 = OpAccessChain %483 %88 
                                  f32 %663 = OpLoad %662 
                                  f32 %664 = OpFAdd %661 %663 
                                               OpStore %622 %664 
                         Private i32* %665 = OpAccessChain %583 %67 
                                  i32 %666 = OpLoad %665 
                                 bool %667 = OpINotEqual %666 %32 
                                               OpSelectionMerge %670 None 
                                               OpBranchConditional %667 %669 %673 
                                      %669 = OpLabel 
                         Private f32* %671 = OpAccessChain %483 %88 
                                  f32 %672 = OpLoad %671 
                                               OpStore %668 %672 
                                               OpBranch %670 
                                      %673 = OpLabel 
                                  f32 %674 = OpLoad %622 
                                               OpStore %668 %674 
                                               OpBranch %670 
                                      %670 = OpLabel 
                                  f32 %675 = OpLoad %668 
                         Private f32* %676 = OpAccessChain %483 %88 
                                               OpStore %676 %675 
                         Private f32* %677 = OpAccessChain %100 %67 
                                  f32 %678 = OpLoad %677 
                                  f32 %679 = OpFMul %678 %603 
                         Private f32* %680 = OpAccessChain %483 %67 
                                  f32 %681 = OpLoad %680 
                                  f32 %682 = OpFAdd %679 %681 
                                               OpStore %622 %682 
                         Private i32* %683 = OpAccessChain %583 %67 
                                  i32 %684 = OpLoad %683 
                                 bool %685 = OpINotEqual %684 %32 
                                               OpSelectionMerge %688 None 
                                               OpBranchConditional %685 %687 %691 
                                      %687 = OpLabel 
                         Private f32* %689 = OpAccessChain %483 %67 
                                  f32 %690 = OpLoad %689 
                                               OpStore %686 %690 
                                               OpBranch %688 
                                      %691 = OpLabel 
                                  f32 %692 = OpLoad %622 
                                               OpStore %686 %692 
                                               OpBranch %688 
                                      %688 = OpLabel 
                                  f32 %693 = OpLoad %686 
                         Private f32* %694 = OpAccessChain %483 %641 
                                               OpStore %694 %693 
                         Private i32* %695 = OpAccessChain %645 %88 
                                  i32 %696 = OpLoad %695 
                                 bool %697 = OpINotEqual %696 %32 
                                               OpSelectionMerge %699 None 
                                               OpBranchConditional %697 %698 %699 
                                      %698 = OpLabel 
                         Private i32* %700 = OpAccessChain %583 %88 
                                  i32 %701 = OpLoad %700 
                                 bool %702 = OpIEqual %701 %32 
                                               OpSelectionMerge %704 None 
                                               OpBranchConditional %702 %703 %704 
                                      %703 = OpLabel 
                                f32_3 %705 = OpLoad %237 
                                f32_2 %706 = OpVectorShuffle %705 %705 0 2 
                                f32_3 %707 = OpLoad %249 
                                f32_3 %708 = OpVectorShuffle %707 %706 3 1 4 
                                               OpStore %249 %708 
                                f32_3 %709 = OpLoad %249 
                                f32_2 %710 = OpVectorShuffle %709 %709 0 2 
                                f32_2 %711 = OpCompositeConstruct %18 %18 
                                f32_2 %712 = OpCompositeConstruct %19 %19 
                                f32_2 %713 = OpExtInst %1 43 %710 %711 %712 
                                f32_3 %714 = OpLoad %249 
                                f32_3 %715 = OpVectorShuffle %714 %713 3 1 4 
                                               OpStore %249 %715 
                                f32_3 %716 = OpLoad %249 
                                f32_2 %717 = OpVectorShuffle %716 %716 0 2 
                         Uniform f32* %718 = OpAccessChain %30 %32 
                                  f32 %719 = OpLoad %718 
                                f32_2 %720 = OpCompositeConstruct %719 %719 
                                f32_2 %721 = OpFMul %717 %720 
                                f32_3 %722 = OpLoad %249 
                                f32_3 %723 = OpVectorShuffle %722 %721 3 1 4 
                                               OpStore %249 %723 
                  read_only Texture2D %724 = OpLoad %44 
                              sampler %725 = OpLoad %48 
           read_only Texture2DSampled %726 = OpSampledImage %724 %725 
                                f32_3 %727 = OpLoad %249 
                                f32_2 %728 = OpVectorShuffle %727 %727 0 2 
                                f32_4 %729 = OpImageSampleExplicitLod %726 %728 Lod %27 
                                  f32 %730 = OpCompositeExtract %729 1 
                         Private f32* %731 = OpAccessChain %119 %88 
                                               OpStore %731 %730 
                                               OpBranch %704 
                                      %704 = OpLabel 
                         Private i32* %732 = OpAccessChain %583 %67 
                                  i32 %733 = OpLoad %732 
                                 bool %734 = OpIEqual %733 %32 
                                               OpSelectionMerge %736 None 
                                               OpBranchConditional %734 %735 %736 
                                      %735 = OpLabel 
                                f32_3 %737 = OpLoad %483 
                                f32_2 %738 = OpVectorShuffle %737 %737 0 2 
                                f32_3 %739 = OpLoad %249 
                                f32_3 %740 = OpVectorShuffle %739 %738 3 1 4 
                                               OpStore %249 %740 
                                f32_3 %741 = OpLoad %249 
                                f32_2 %742 = OpVectorShuffle %741 %741 0 2 
                                f32_2 %743 = OpCompositeConstruct %18 %18 
                                f32_2 %744 = OpCompositeConstruct %19 %19 
                                f32_2 %745 = OpExtInst %1 43 %742 %743 %744 
                                f32_3 %746 = OpLoad %249 
                                f32_3 %747 = OpVectorShuffle %746 %745 3 1 4 
                                               OpStore %249 %747 
                                f32_3 %748 = OpLoad %249 
                                f32_2 %749 = OpVectorShuffle %748 %748 0 2 
                         Uniform f32* %750 = OpAccessChain %30 %32 
                                  f32 %751 = OpLoad %750 
                                f32_2 %752 = OpCompositeConstruct %751 %751 
                                f32_2 %753 = OpFMul %749 %752 
                                f32_3 %754 = OpLoad %249 
                                f32_3 %755 = OpVectorShuffle %754 %753 3 1 4 
                                               OpStore %249 %755 
                  read_only Texture2D %756 = OpLoad %44 
                              sampler %757 = OpLoad %48 
           read_only Texture2DSampled %758 = OpSampledImage %756 %757 
                                f32_3 %759 = OpLoad %249 
                                f32_2 %760 = OpVectorShuffle %759 %759 0 2 
                                f32_4 %761 = OpImageSampleExplicitLod %758 %760 Lod %27 
                                  f32 %762 = OpCompositeExtract %761 1 
                         Private f32* %763 = OpAccessChain %119 %67 
                                               OpStore %763 %762 
                                               OpBranch %736 
                                      %736 = OpLabel 
                                  f32 %764 = OpLoad %56 
                                  f32 %765 = OpFNegate %764 
                                  f32 %766 = OpFMul %765 %447 
                         Private f32* %767 = OpAccessChain %119 %88 
                                  f32 %768 = OpLoad %767 
                                  f32 %769 = OpFAdd %766 %768 
                         Private f32* %770 = OpAccessChain %249 %88 
                                               OpStore %770 %769 
                         Private i32* %771 = OpAccessChain %583 %88 
                                  i32 %772 = OpLoad %771 
                                 bool %773 = OpINotEqual %772 %32 
                                               OpSelectionMerge %776 None 
                                               OpBranchConditional %773 %775 %779 
                                      %775 = OpLabel 
                         Private f32* %777 = OpAccessChain %119 %88 
                                  f32 %778 = OpLoad %777 
                                               OpStore %774 %778 
                                               OpBranch %776 
                                      %779 = OpLabel 
                         Private f32* %780 = OpAccessChain %249 %88 
                                  f32 %781 = OpLoad %780 
                                               OpStore %774 %781 
                                               OpBranch %776 
                                      %776 = OpLabel 
                                  f32 %782 = OpLoad %774 
                         Private f32* %783 = OpAccessChain %119 %88 
                                               OpStore %783 %782 
                                  f32 %784 = OpLoad %56 
                                  f32 %785 = OpFNegate %784 
                                  f32 %786 = OpFMul %785 %447 
                         Private f32* %787 = OpAccessChain %119 %67 
                                  f32 %788 = OpLoad %787 
                                  f32 %789 = OpFAdd %786 %788 
                         Private f32* %790 = OpAccessChain %207 %88 
                                               OpStore %790 %789 
                         Private i32* %791 = OpAccessChain %583 %67 
                                  i32 %792 = OpLoad %791 
                                 bool %793 = OpINotEqual %792 %32 
                                               OpSelectionMerge %796 None 
                                               OpBranchConditional %793 %795 %799 
                                      %795 = OpLabel 
                         Private f32* %797 = OpAccessChain %119 %67 
                                  f32 %798 = OpLoad %797 
                                               OpStore %794 %798 
                                               OpBranch %796 
                                      %799 = OpLabel 
                         Private f32* %800 = OpAccessChain %207 %88 
                                  f32 %801 = OpLoad %800 
                                               OpStore %794 %801 
                                               OpBranch %796 
                                      %796 = OpLabel 
                                  f32 %802 = OpLoad %794 
                         Private f32* %803 = OpAccessChain %119 %67 
                                               OpStore %803 %802 
                                f32_3 %804 = OpLoad %119 
                                f32_4 %805 = OpVectorShuffle %804 %804 0 1 0 1 
                                f32_4 %806 = OpExtInst %1 4 %805 
                                f32_3 %807 = OpLoad %78 
                                f32_4 %808 = OpVectorShuffle %807 %807 0 0 0 0 
                               bool_4 %809 = OpFOrdGreaterThanEqual %806 %808 
                               bool_2 %810 = OpVectorShuffle %809 %809 0 1 
                                u32_2 %811 = OpSelect %810 %595 %594 
                                u32_2 %812 = OpCompositeConstruct %566 %566 
                                u32_2 %813 = OpIMul %811 %812 
                                i32_2 %814 = OpBitcast %813 
                                               OpStore %583 %814 
                         Private f32* %815 = OpAccessChain %100 %88 
                                  f32 %816 = OpLoad %815 
                                  f32 %817 = OpFNegate %816 
                                  f32 %818 = OpFMul %817 %276 
                         Private f32* %819 = OpAccessChain %237 %88 
                                  f32 %820 = OpLoad %819 
                                  f32 %821 = OpFAdd %818 %820 
                         Private f32* %822 = OpAccessChain %249 %88 
                                               OpStore %822 %821 
                         Private i32* %823 = OpAccessChain %583 %88 
                                  i32 %824 = OpLoad %823 
                                 bool %825 = OpINotEqual %824 %32 
                                               OpSelectionMerge %828 None 
                                               OpBranchConditional %825 %827 %831 
                                      %827 = OpLabel 
                         Private f32* %829 = OpAccessChain %237 %88 
                                  f32 %830 = OpLoad %829 
                                               OpStore %826 %830 
                                               OpBranch %828 
                                      %831 = OpLabel 
                         Private f32* %832 = OpAccessChain %249 %88 
                                  f32 %833 = OpLoad %832 
                                               OpStore %826 %833 
                                               OpBranch %828 
                                      %828 = OpLabel 
                                  f32 %834 = OpLoad %826 
                         Private f32* %835 = OpAccessChain %237 %88 
                                               OpStore %835 %834 
                         Private f32* %836 = OpAccessChain %100 %67 
                                  f32 %837 = OpLoad %836 
                                  f32 %838 = OpFNegate %837 
                                  f32 %839 = OpFMul %838 %276 
                         Private f32* %840 = OpAccessChain %237 %641 
                                  f32 %841 = OpLoad %840 
                                  f32 %842 = OpFAdd %839 %841 
                         Private f32* %843 = OpAccessChain %249 %88 
                                               OpStore %843 %842 
                         Private i32* %844 = OpAccessChain %583 %88 
                                  i32 %845 = OpLoad %844 
                                 bool %846 = OpINotEqual %845 %32 
                                               OpSelectionMerge %849 None 
                                               OpBranchConditional %846 %848 %852 
                                      %848 = OpLabel 
                         Private f32* %850 = OpAccessChain %237 %641 
                                  f32 %851 = OpLoad %850 
                                               OpStore %847 %851 
                                               OpBranch %849 
                                      %852 = OpLabel 
                         Private f32* %853 = OpAccessChain %249 %88 
                                  f32 %854 = OpLoad %853 
                                               OpStore %847 %854 
                                               OpBranch %849 
                                      %849 = OpLabel 
                                  f32 %855 = OpLoad %847 
                         Private f32* %856 = OpAccessChain %237 %641 
                                               OpStore %856 %855 
                                i32_2 %857 = OpLoad %583 
                                i32_2 %858 = OpNot %857 
                                i32_3 %859 = OpLoad %645 
                                i32_3 %860 = OpVectorShuffle %859 %858 3 1 4 
                                               OpStore %645 %860 
                         Private i32* %861 = OpAccessChain %645 %641 
                                  i32 %862 = OpLoad %861 
                                  u32 %863 = OpBitcast %862 
                         Private i32* %864 = OpAccessChain %645 %88 
                                  i32 %865 = OpLoad %864 
                                  u32 %866 = OpBitcast %865 
                                  u32 %867 = OpBitwiseOr %863 %866 
                                  i32 %868 = OpBitcast %867 
                         Private i32* %869 = OpAccessChain %645 %88 
                                               OpStore %869 %868 
                         Private f32* %870 = OpAccessChain %100 %88 
                                  f32 %871 = OpLoad %870 
                                  f32 %872 = OpFMul %871 %276 
                         Private f32* %873 = OpAccessChain %483 %88 
                                  f32 %874 = OpLoad %873 
                                  f32 %875 = OpFAdd %872 %874 
                                               OpStore %622 %875 
                         Private i32* %876 = OpAccessChain %583 %67 
                                  i32 %877 = OpLoad %876 
                                 bool %878 = OpINotEqual %877 %32 
                                               OpSelectionMerge %881 None 
                                               OpBranchConditional %878 %880 %884 
                                      %880 = OpLabel 
                         Private f32* %882 = OpAccessChain %483 %88 
                                  f32 %883 = OpLoad %882 
                                               OpStore %879 %883 
                                               OpBranch %881 
                                      %884 = OpLabel 
                                  f32 %885 = OpLoad %622 
                                               OpStore %879 %885 
                                               OpBranch %881 
                                      %881 = OpLabel 
                                  f32 %886 = OpLoad %879 
                         Private f32* %887 = OpAccessChain %483 %88 
                                               OpStore %887 %886 
                         Private f32* %888 = OpAccessChain %100 %67 
                                  f32 %889 = OpLoad %888 
                                  f32 %890 = OpFMul %889 %276 
                         Private f32* %891 = OpAccessChain %483 %641 
                                  f32 %892 = OpLoad %891 
                                  f32 %893 = OpFAdd %890 %892 
                                               OpStore %622 %893 
                         Private i32* %894 = OpAccessChain %583 %67 
                                  i32 %895 = OpLoad %894 
                                 bool %896 = OpINotEqual %895 %32 
                                               OpSelectionMerge %899 None 
                                               OpBranchConditional %896 %898 %902 
                                      %898 = OpLabel 
                         Private f32* %900 = OpAccessChain %483 %641 
                                  f32 %901 = OpLoad %900 
                                               OpStore %897 %901 
                                               OpBranch %899 
                                      %902 = OpLabel 
                                  f32 %903 = OpLoad %622 
                                               OpStore %897 %903 
                                               OpBranch %899 
                                      %899 = OpLabel 
                                  f32 %904 = OpLoad %897 
                         Private f32* %905 = OpAccessChain %483 %641 
                                               OpStore %905 %904 
                         Private i32* %906 = OpAccessChain %645 %88 
                                  i32 %907 = OpLoad %906 
                                 bool %908 = OpINotEqual %907 %32 
                                               OpSelectionMerge %910 None 
                                               OpBranchConditional %908 %909 %910 
                                      %909 = OpLabel 
                         Private i32* %911 = OpAccessChain %583 %88 
                                  i32 %912 = OpLoad %911 
                                 bool %913 = OpIEqual %912 %32 
                                               OpSelectionMerge %915 None 
                                               OpBranchConditional %913 %914 %915 
                                      %914 = OpLabel 
                                f32_3 %916 = OpLoad %237 
                                f32_2 %917 = OpVectorShuffle %916 %916 0 2 
                                f32_3 %918 = OpLoad %249 
                                f32_3 %919 = OpVectorShuffle %918 %917 3 1 4 
                                               OpStore %249 %919 
                                f32_3 %920 = OpLoad %249 
                                f32_2 %921 = OpVectorShuffle %920 %920 0 2 
                                f32_2 %922 = OpCompositeConstruct %18 %18 
                                f32_2 %923 = OpCompositeConstruct %19 %19 
                                f32_2 %924 = OpExtInst %1 43 %921 %922 %923 
                                f32_3 %925 = OpLoad %249 
                                f32_3 %926 = OpVectorShuffle %925 %924 3 1 4 
                                               OpStore %249 %926 
                                f32_3 %927 = OpLoad %249 
                                f32_2 %928 = OpVectorShuffle %927 %927 0 2 
                         Uniform f32* %929 = OpAccessChain %30 %32 
                                  f32 %930 = OpLoad %929 
                                f32_2 %931 = OpCompositeConstruct %930 %930 
                                f32_2 %932 = OpFMul %928 %931 
                                f32_3 %933 = OpLoad %249 
                                f32_3 %934 = OpVectorShuffle %933 %932 3 1 4 
                                               OpStore %249 %934 
                  read_only Texture2D %935 = OpLoad %44 
                              sampler %936 = OpLoad %48 
           read_only Texture2DSampled %937 = OpSampledImage %935 %936 
                                f32_3 %938 = OpLoad %249 
                                f32_2 %939 = OpVectorShuffle %938 %938 0 2 
                                f32_4 %940 = OpImageSampleExplicitLod %937 %939 Lod %27 
                                  f32 %941 = OpCompositeExtract %940 1 
                         Private f32* %942 = OpAccessChain %119 %88 
                                               OpStore %942 %941 
                                               OpBranch %915 
                                      %915 = OpLabel 
                         Private i32* %943 = OpAccessChain %583 %67 
                                  i32 %944 = OpLoad %943 
                                 bool %945 = OpIEqual %944 %32 
                                               OpSelectionMerge %947 None 
                                               OpBranchConditional %945 %946 %947 
                                      %946 = OpLabel 
                                f32_3 %948 = OpLoad %483 
                                f32_2 %949 = OpVectorShuffle %948 %948 0 2 
                                f32_3 %950 = OpLoad %249 
                                f32_3 %951 = OpVectorShuffle %950 %949 3 1 4 
                                               OpStore %249 %951 
                                f32_3 %952 = OpLoad %249 
                                f32_2 %953 = OpVectorShuffle %952 %952 0 2 
                                f32_2 %954 = OpCompositeConstruct %18 %18 
                                f32_2 %955 = OpCompositeConstruct %19 %19 
                                f32_2 %956 = OpExtInst %1 43 %953 %954 %955 
                                f32_3 %957 = OpLoad %249 
                                f32_3 %958 = OpVectorShuffle %957 %956 3 1 4 
                                               OpStore %249 %958 
                                f32_3 %959 = OpLoad %249 
                                f32_2 %960 = OpVectorShuffle %959 %959 0 2 
                         Uniform f32* %961 = OpAccessChain %30 %32 
                                  f32 %962 = OpLoad %961 
                                f32_2 %963 = OpCompositeConstruct %962 %962 
                                f32_2 %964 = OpFMul %960 %963 
                                f32_3 %965 = OpLoad %249 
                                f32_3 %966 = OpVectorShuffle %965 %964 3 1 4 
                                               OpStore %249 %966 
                  read_only Texture2D %967 = OpLoad %44 
                              sampler %968 = OpLoad %48 
           read_only Texture2DSampled %969 = OpSampledImage %967 %968 
                                f32_3 %970 = OpLoad %249 
                                f32_2 %971 = OpVectorShuffle %970 %970 0 2 
                                f32_4 %972 = OpImageSampleExplicitLod %969 %971 Lod %27 
                                  f32 %973 = OpCompositeExtract %972 1 
                         Private f32* %974 = OpAccessChain %119 %67 
                                               OpStore %974 %973 
                                               OpBranch %947 
                                      %947 = OpLabel 
                                  f32 %975 = OpLoad %56 
                                  f32 %976 = OpFNegate %975 
                                  f32 %977 = OpFMul %976 %447 
                         Private f32* %978 = OpAccessChain %119 %88 
                                  f32 %979 = OpLoad %978 
                                  f32 %980 = OpFAdd %977 %979 
                         Private f32* %981 = OpAccessChain %249 %88 
                                               OpStore %981 %980 
                         Private i32* %982 = OpAccessChain %583 %88 
                                  i32 %983 = OpLoad %982 
                                 bool %984 = OpINotEqual %983 %32 
                                               OpSelectionMerge %987 None 
                                               OpBranchConditional %984 %986 %990 
                                      %986 = OpLabel 
                         Private f32* %988 = OpAccessChain %119 %88 
                                  f32 %989 = OpLoad %988 
                                               OpStore %985 %989 
                                               OpBranch %987 
                                      %990 = OpLabel 
                         Private f32* %991 = OpAccessChain %249 %88 
                                  f32 %992 = OpLoad %991 
                                               OpStore %985 %992 
                                               OpBranch %987 
                                      %987 = OpLabel 
                                  f32 %993 = OpLoad %985 
                         Private f32* %994 = OpAccessChain %119 %88 
                                               OpStore %994 %993 
                                  f32 %995 = OpLoad %56 
                                  f32 %996 = OpFNegate %995 
                                  f32 %997 = OpFMul %996 %447 
                         Private f32* %998 = OpAccessChain %119 %67 
                                  f32 %999 = OpLoad %998 
                                 f32 %1000 = OpFAdd %997 %999 
                        Private f32* %1001 = OpAccessChain %207 %88 
                                               OpStore %1001 %1000 
                        Private i32* %1002 = OpAccessChain %583 %67 
                                 i32 %1003 = OpLoad %1002 
                                bool %1004 = OpINotEqual %1003 %32 
                                               OpSelectionMerge %1007 None 
                                               OpBranchConditional %1004 %1006 %1010 
                                     %1006 = OpLabel 
                        Private f32* %1008 = OpAccessChain %119 %67 
                                 f32 %1009 = OpLoad %1008 
                                               OpStore %1005 %1009 
                                               OpBranch %1007 
                                     %1010 = OpLabel 
                        Private f32* %1011 = OpAccessChain %207 %88 
                                 f32 %1012 = OpLoad %1011 
                                               OpStore %1005 %1012 
                                               OpBranch %1007 
                                     %1007 = OpLabel 
                                 f32 %1013 = OpLoad %1005 
                        Private f32* %1014 = OpAccessChain %119 %67 
                                               OpStore %1014 %1013 
                               f32_3 %1015 = OpLoad %119 
                               f32_4 %1016 = OpVectorShuffle %1015 %1015 0 1 0 1 
                               f32_4 %1017 = OpExtInst %1 4 %1016 
                               f32_3 %1018 = OpLoad %78 
                               f32_4 %1019 = OpVectorShuffle %1018 %1018 0 0 0 0 
                              bool_4 %1020 = OpFOrdGreaterThanEqual %1017 %1019 
                              bool_2 %1021 = OpVectorShuffle %1020 %1020 0 1 
                               u32_2 %1022 = OpSelect %1021 %595 %594 
                               u32_2 %1023 = OpCompositeConstruct %566 %566 
                               u32_2 %1024 = OpIMul %1022 %1023 
                               i32_2 %1025 = OpBitcast %1024 
                                               OpStore %583 %1025 
                        Private f32* %1026 = OpAccessChain %100 %88 
                                 f32 %1027 = OpLoad %1026 
                                 f32 %1028 = OpFNegate %1027 
                                 f32 %1029 = OpFMul %1028 %276 
                        Private f32* %1030 = OpAccessChain %237 %88 
                                 f32 %1031 = OpLoad %1030 
                                 f32 %1032 = OpFAdd %1029 %1031 
                        Private f32* %1033 = OpAccessChain %249 %88 
                                               OpStore %1033 %1032 
                        Private i32* %1034 = OpAccessChain %583 %88 
                                 i32 %1035 = OpLoad %1034 
                                bool %1036 = OpINotEqual %1035 %32 
                                               OpSelectionMerge %1039 None 
                                               OpBranchConditional %1036 %1038 %1042 
                                     %1038 = OpLabel 
                        Private f32* %1040 = OpAccessChain %237 %88 
                                 f32 %1041 = OpLoad %1040 
                                               OpStore %1037 %1041 
                                               OpBranch %1039 
                                     %1042 = OpLabel 
                        Private f32* %1043 = OpAccessChain %249 %88 
                                 f32 %1044 = OpLoad %1043 
                                               OpStore %1037 %1044 
                                               OpBranch %1039 
                                     %1039 = OpLabel 
                                 f32 %1045 = OpLoad %1037 
                        Private f32* %1046 = OpAccessChain %237 %88 
                                               OpStore %1046 %1045 
                        Private f32* %1047 = OpAccessChain %100 %67 
                                 f32 %1048 = OpLoad %1047 
                                 f32 %1049 = OpFNegate %1048 
                                 f32 %1050 = OpFMul %1049 %276 
                        Private f32* %1051 = OpAccessChain %237 %641 
                                 f32 %1052 = OpLoad %1051 
                                 f32 %1053 = OpFAdd %1050 %1052 
                        Private f32* %1054 = OpAccessChain %249 %88 
                                               OpStore %1054 %1053 
                        Private i32* %1055 = OpAccessChain %583 %88 
                                 i32 %1056 = OpLoad %1055 
                                bool %1057 = OpINotEqual %1056 %32 
                                               OpSelectionMerge %1060 None 
                                               OpBranchConditional %1057 %1059 %1063 
                                     %1059 = OpLabel 
                        Private f32* %1061 = OpAccessChain %237 %641 
                                 f32 %1062 = OpLoad %1061 
                                               OpStore %1058 %1062 
                                               OpBranch %1060 
                                     %1063 = OpLabel 
                        Private f32* %1064 = OpAccessChain %249 %88 
                                 f32 %1065 = OpLoad %1064 
                                               OpStore %1058 %1065 
                                               OpBranch %1060 
                                     %1060 = OpLabel 
                                 f32 %1066 = OpLoad %1058 
                        Private f32* %1067 = OpAccessChain %237 %641 
                                               OpStore %1067 %1066 
                               i32_2 %1068 = OpLoad %583 
                               i32_2 %1069 = OpNot %1068 
                               i32_3 %1070 = OpLoad %645 
                               i32_3 %1071 = OpVectorShuffle %1070 %1069 3 1 4 
                                               OpStore %645 %1071 
                        Private i32* %1072 = OpAccessChain %645 %641 
                                 i32 %1073 = OpLoad %1072 
                                 u32 %1074 = OpBitcast %1073 
                        Private i32* %1075 = OpAccessChain %645 %88 
                                 i32 %1076 = OpLoad %1075 
                                 u32 %1077 = OpBitcast %1076 
                                 u32 %1078 = OpBitwiseOr %1074 %1077 
                                 i32 %1079 = OpBitcast %1078 
                        Private i32* %1080 = OpAccessChain %645 %88 
                                               OpStore %1080 %1079 
                        Private f32* %1081 = OpAccessChain %100 %88 
                                 f32 %1082 = OpLoad %1081 
                                 f32 %1083 = OpFMul %1082 %276 
                        Private f32* %1084 = OpAccessChain %483 %88 
                                 f32 %1085 = OpLoad %1084 
                                 f32 %1086 = OpFAdd %1083 %1085 
                                               OpStore %622 %1086 
                        Private i32* %1087 = OpAccessChain %583 %67 
                                 i32 %1088 = OpLoad %1087 
                                bool %1089 = OpINotEqual %1088 %32 
                                               OpSelectionMerge %1092 None 
                                               OpBranchConditional %1089 %1091 %1095 
                                     %1091 = OpLabel 
                        Private f32* %1093 = OpAccessChain %483 %88 
                                 f32 %1094 = OpLoad %1093 
                                               OpStore %1090 %1094 
                                               OpBranch %1092 
                                     %1095 = OpLabel 
                                 f32 %1096 = OpLoad %622 
                                               OpStore %1090 %1096 
                                               OpBranch %1092 
                                     %1092 = OpLabel 
                                 f32 %1097 = OpLoad %1090 
                        Private f32* %1098 = OpAccessChain %483 %88 
                                               OpStore %1098 %1097 
                        Private f32* %1099 = OpAccessChain %100 %67 
                                 f32 %1100 = OpLoad %1099 
                                 f32 %1101 = OpFMul %1100 %276 
                        Private f32* %1102 = OpAccessChain %483 %641 
                                 f32 %1103 = OpLoad %1102 
                                 f32 %1104 = OpFAdd %1101 %1103 
                                               OpStore %622 %1104 
                        Private i32* %1105 = OpAccessChain %583 %67 
                                 i32 %1106 = OpLoad %1105 
                                bool %1107 = OpINotEqual %1106 %32 
                                               OpSelectionMerge %1110 None 
                                               OpBranchConditional %1107 %1109 %1113 
                                     %1109 = OpLabel 
                        Private f32* %1111 = OpAccessChain %483 %641 
                                 f32 %1112 = OpLoad %1111 
                                               OpStore %1108 %1112 
                                               OpBranch %1110 
                                     %1113 = OpLabel 
                                 f32 %1114 = OpLoad %622 
                                               OpStore %1108 %1114 
                                               OpBranch %1110 
                                     %1110 = OpLabel 
                                 f32 %1115 = OpLoad %1108 
                        Private f32* %1116 = OpAccessChain %483 %641 
                                               OpStore %1116 %1115 
                        Private i32* %1117 = OpAccessChain %645 %88 
                                 i32 %1118 = OpLoad %1117 
                                bool %1119 = OpINotEqual %1118 %32 
                                               OpSelectionMerge %1121 None 
                                               OpBranchConditional %1119 %1120 %1121 
                                     %1120 = OpLabel 
                        Private i32* %1122 = OpAccessChain %583 %88 
                                 i32 %1123 = OpLoad %1122 
                                bool %1124 = OpIEqual %1123 %32 
                                               OpSelectionMerge %1126 None 
                                               OpBranchConditional %1124 %1125 %1126 
                                     %1125 = OpLabel 
                               f32_3 %1127 = OpLoad %237 
                               f32_2 %1128 = OpVectorShuffle %1127 %1127 0 2 
                               f32_3 %1129 = OpLoad %249 
                               f32_3 %1130 = OpVectorShuffle %1129 %1128 3 1 4 
                                               OpStore %249 %1130 
                               f32_3 %1131 = OpLoad %249 
                               f32_2 %1132 = OpVectorShuffle %1131 %1131 0 2 
                               f32_2 %1133 = OpCompositeConstruct %18 %18 
                               f32_2 %1134 = OpCompositeConstruct %19 %19 
                               f32_2 %1135 = OpExtInst %1 43 %1132 %1133 %1134 
                               f32_3 %1136 = OpLoad %249 
                               f32_3 %1137 = OpVectorShuffle %1136 %1135 3 1 4 
                                               OpStore %249 %1137 
                               f32_3 %1138 = OpLoad %249 
                               f32_2 %1139 = OpVectorShuffle %1138 %1138 0 2 
                        Uniform f32* %1140 = OpAccessChain %30 %32 
                                 f32 %1141 = OpLoad %1140 
                               f32_2 %1142 = OpCompositeConstruct %1141 %1141 
                               f32_2 %1143 = OpFMul %1139 %1142 
                               f32_3 %1144 = OpLoad %249 
                               f32_3 %1145 = OpVectorShuffle %1144 %1143 3 1 4 
                                               OpStore %249 %1145 
                 read_only Texture2D %1146 = OpLoad %44 
                             sampler %1147 = OpLoad %48 
          read_only Texture2DSampled %1148 = OpSampledImage %1146 %1147 
                               f32_3 %1149 = OpLoad %249 
                               f32_2 %1150 = OpVectorShuffle %1149 %1149 0 2 
                               f32_4 %1151 = OpImageSampleExplicitLod %1148 %1150 Lod %27 
                                 f32 %1152 = OpCompositeExtract %1151 1 
                        Private f32* %1153 = OpAccessChain %119 %88 
                                               OpStore %1153 %1152 
                                               OpBranch %1126 
                                     %1126 = OpLabel 
                        Private i32* %1154 = OpAccessChain %583 %67 
                                 i32 %1155 = OpLoad %1154 
                                bool %1156 = OpIEqual %1155 %32 
                                               OpSelectionMerge %1158 None 
                                               OpBranchConditional %1156 %1157 %1158 
                                     %1157 = OpLabel 
                               f32_3 %1159 = OpLoad %483 
                               f32_2 %1160 = OpVectorShuffle %1159 %1159 0 2 
                               f32_3 %1161 = OpLoad %249 
                               f32_3 %1162 = OpVectorShuffle %1161 %1160 3 1 4 
                                               OpStore %249 %1162 
                               f32_3 %1163 = OpLoad %249 
                               f32_2 %1164 = OpVectorShuffle %1163 %1163 0 2 
                               f32_2 %1165 = OpCompositeConstruct %18 %18 
                               f32_2 %1166 = OpCompositeConstruct %19 %19 
                               f32_2 %1167 = OpExtInst %1 43 %1164 %1165 %1166 
                               f32_3 %1168 = OpLoad %249 
                               f32_3 %1169 = OpVectorShuffle %1168 %1167 3 1 4 
                                               OpStore %249 %1169 
                               f32_3 %1170 = OpLoad %249 
                               f32_2 %1171 = OpVectorShuffle %1170 %1170 0 2 
                        Uniform f32* %1172 = OpAccessChain %30 %32 
                                 f32 %1173 = OpLoad %1172 
                               f32_2 %1174 = OpCompositeConstruct %1173 %1173 
                               f32_2 %1175 = OpFMul %1171 %1174 
                               f32_3 %1176 = OpLoad %249 
                               f32_3 %1177 = OpVectorShuffle %1176 %1175 3 1 4 
                                               OpStore %249 %1177 
                 read_only Texture2D %1178 = OpLoad %44 
                             sampler %1179 = OpLoad %48 
          read_only Texture2DSampled %1180 = OpSampledImage %1178 %1179 
                               f32_3 %1181 = OpLoad %249 
                               f32_2 %1182 = OpVectorShuffle %1181 %1181 0 2 
                               f32_4 %1183 = OpImageSampleExplicitLod %1180 %1182 Lod %27 
                                 f32 %1184 = OpCompositeExtract %1183 1 
                        Private f32* %1185 = OpAccessChain %119 %67 
                                               OpStore %1185 %1184 
                                               OpBranch %1158 
                                     %1158 = OpLabel 
                                 f32 %1186 = OpLoad %56 
                                 f32 %1187 = OpFNegate %1186 
                                 f32 %1188 = OpFMul %1187 %447 
                        Private f32* %1189 = OpAccessChain %119 %88 
                                 f32 %1190 = OpLoad %1189 
                                 f32 %1191 = OpFAdd %1188 %1190 
                        Private f32* %1192 = OpAccessChain %249 %88 
                                               OpStore %1192 %1191 
                        Private i32* %1193 = OpAccessChain %583 %88 
                                 i32 %1194 = OpLoad %1193 
                                bool %1195 = OpINotEqual %1194 %32 
                                               OpSelectionMerge %1198 None 
                                               OpBranchConditional %1195 %1197 %1201 
                                     %1197 = OpLabel 
                        Private f32* %1199 = OpAccessChain %119 %88 
                                 f32 %1200 = OpLoad %1199 
                                               OpStore %1196 %1200 
                                               OpBranch %1198 
                                     %1201 = OpLabel 
                        Private f32* %1202 = OpAccessChain %249 %88 
                                 f32 %1203 = OpLoad %1202 
                                               OpStore %1196 %1203 
                                               OpBranch %1198 
                                     %1198 = OpLabel 
                                 f32 %1204 = OpLoad %1196 
                        Private f32* %1205 = OpAccessChain %119 %88 
                                               OpStore %1205 %1204 
                                 f32 %1206 = OpLoad %56 
                                 f32 %1207 = OpFNegate %1206 
                                 f32 %1208 = OpFMul %1207 %447 
                        Private f32* %1209 = OpAccessChain %119 %67 
                                 f32 %1210 = OpLoad %1209 
                                 f32 %1211 = OpFAdd %1208 %1210 
                        Private f32* %1212 = OpAccessChain %207 %88 
                                               OpStore %1212 %1211 
                        Private i32* %1213 = OpAccessChain %583 %67 
                                 i32 %1214 = OpLoad %1213 
                                bool %1215 = OpINotEqual %1214 %32 
                                               OpSelectionMerge %1218 None 
                                               OpBranchConditional %1215 %1217 %1221 
                                     %1217 = OpLabel 
                        Private f32* %1219 = OpAccessChain %119 %67 
                                 f32 %1220 = OpLoad %1219 
                                               OpStore %1216 %1220 
                                               OpBranch %1218 
                                     %1221 = OpLabel 
                        Private f32* %1222 = OpAccessChain %207 %88 
                                 f32 %1223 = OpLoad %1222 
                                               OpStore %1216 %1223 
                                               OpBranch %1218 
                                     %1218 = OpLabel 
                                 f32 %1224 = OpLoad %1216 
                        Private f32* %1225 = OpAccessChain %119 %67 
                                               OpStore %1225 %1224 
                               f32_3 %1226 = OpLoad %119 
                               f32_4 %1227 = OpVectorShuffle %1226 %1226 0 1 0 1 
                               f32_4 %1228 = OpExtInst %1 4 %1227 
                               f32_3 %1229 = OpLoad %78 
                               f32_4 %1230 = OpVectorShuffle %1229 %1229 0 0 0 0 
                              bool_4 %1231 = OpFOrdGreaterThanEqual %1228 %1230 
                              bool_2 %1232 = OpVectorShuffle %1231 %1231 0 1 
                               u32_2 %1233 = OpSelect %1232 %595 %594 
                               u32_2 %1234 = OpCompositeConstruct %566 %566 
                               u32_2 %1235 = OpIMul %1233 %1234 
                               i32_2 %1236 = OpBitcast %1235 
                                               OpStore %583 %1236 
                        Private f32* %1237 = OpAccessChain %100 %88 
                                 f32 %1238 = OpLoad %1237 
                                 f32 %1239 = OpFNegate %1238 
                                 f32 %1240 = OpFMul %1239 %276 
                        Private f32* %1241 = OpAccessChain %237 %88 
                                 f32 %1242 = OpLoad %1241 
                                 f32 %1243 = OpFAdd %1240 %1242 
                        Private f32* %1244 = OpAccessChain %249 %88 
                                               OpStore %1244 %1243 
                        Private i32* %1245 = OpAccessChain %583 %88 
                                 i32 %1246 = OpLoad %1245 
                                bool %1247 = OpINotEqual %1246 %32 
                                               OpSelectionMerge %1250 None 
                                               OpBranchConditional %1247 %1249 %1253 
                                     %1249 = OpLabel 
                        Private f32* %1251 = OpAccessChain %237 %88 
                                 f32 %1252 = OpLoad %1251 
                                               OpStore %1248 %1252 
                                               OpBranch %1250 
                                     %1253 = OpLabel 
                        Private f32* %1254 = OpAccessChain %249 %88 
                                 f32 %1255 = OpLoad %1254 
                                               OpStore %1248 %1255 
                                               OpBranch %1250 
                                     %1250 = OpLabel 
                                 f32 %1256 = OpLoad %1248 
                        Private f32* %1257 = OpAccessChain %237 %88 
                                               OpStore %1257 %1256 
                        Private f32* %1258 = OpAccessChain %100 %67 
                                 f32 %1259 = OpLoad %1258 
                                 f32 %1260 = OpFNegate %1259 
                                 f32 %1261 = OpFMul %1260 %276 
                        Private f32* %1262 = OpAccessChain %237 %641 
                                 f32 %1263 = OpLoad %1262 
                                 f32 %1264 = OpFAdd %1261 %1263 
                        Private f32* %1265 = OpAccessChain %249 %88 
                                               OpStore %1265 %1264 
                        Private i32* %1266 = OpAccessChain %583 %88 
                                 i32 %1267 = OpLoad %1266 
                                bool %1268 = OpINotEqual %1267 %32 
                                               OpSelectionMerge %1271 None 
                                               OpBranchConditional %1268 %1270 %1274 
                                     %1270 = OpLabel 
                        Private f32* %1272 = OpAccessChain %237 %641 
                                 f32 %1273 = OpLoad %1272 
                                               OpStore %1269 %1273 
                                               OpBranch %1271 
                                     %1274 = OpLabel 
                        Private f32* %1275 = OpAccessChain %249 %88 
                                 f32 %1276 = OpLoad %1275 
                                               OpStore %1269 %1276 
                                               OpBranch %1271 
                                     %1271 = OpLabel 
                                 f32 %1277 = OpLoad %1269 
                        Private f32* %1278 = OpAccessChain %237 %641 
                                               OpStore %1278 %1277 
                               i32_2 %1279 = OpLoad %583 
                               i32_2 %1280 = OpNot %1279 
                               i32_3 %1281 = OpLoad %645 
                               i32_3 %1282 = OpVectorShuffle %1281 %1280 3 1 4 
                                               OpStore %645 %1282 
                        Private i32* %1283 = OpAccessChain %645 %641 
                                 i32 %1284 = OpLoad %1283 
                                 u32 %1285 = OpBitcast %1284 
                        Private i32* %1286 = OpAccessChain %645 %88 
                                 i32 %1287 = OpLoad %1286 
                                 u32 %1288 = OpBitcast %1287 
                                 u32 %1289 = OpBitwiseOr %1285 %1288 
                                 i32 %1290 = OpBitcast %1289 
                        Private i32* %1291 = OpAccessChain %645 %88 
                                               OpStore %1291 %1290 
                        Private f32* %1292 = OpAccessChain %100 %88 
                                 f32 %1293 = OpLoad %1292 
                                 f32 %1294 = OpFMul %1293 %276 
                        Private f32* %1295 = OpAccessChain %483 %88 
                                 f32 %1296 = OpLoad %1295 
                                 f32 %1297 = OpFAdd %1294 %1296 
                                               OpStore %622 %1297 
                        Private i32* %1298 = OpAccessChain %583 %67 
                                 i32 %1299 = OpLoad %1298 
                                bool %1300 = OpINotEqual %1299 %32 
                                               OpSelectionMerge %1303 None 
                                               OpBranchConditional %1300 %1302 %1306 
                                     %1302 = OpLabel 
                        Private f32* %1304 = OpAccessChain %483 %88 
                                 f32 %1305 = OpLoad %1304 
                                               OpStore %1301 %1305 
                                               OpBranch %1303 
                                     %1306 = OpLabel 
                                 f32 %1307 = OpLoad %622 
                                               OpStore %1301 %1307 
                                               OpBranch %1303 
                                     %1303 = OpLabel 
                                 f32 %1308 = OpLoad %1301 
                        Private f32* %1309 = OpAccessChain %483 %88 
                                               OpStore %1309 %1308 
                        Private f32* %1310 = OpAccessChain %100 %67 
                                 f32 %1311 = OpLoad %1310 
                                 f32 %1312 = OpFMul %1311 %276 
                        Private f32* %1313 = OpAccessChain %483 %641 
                                 f32 %1314 = OpLoad %1313 
                                 f32 %1315 = OpFAdd %1312 %1314 
                                               OpStore %622 %1315 
                        Private i32* %1316 = OpAccessChain %583 %67 
                                 i32 %1317 = OpLoad %1316 
                                bool %1318 = OpINotEqual %1317 %32 
                                               OpSelectionMerge %1321 None 
                                               OpBranchConditional %1318 %1320 %1324 
                                     %1320 = OpLabel 
                        Private f32* %1322 = OpAccessChain %483 %641 
                                 f32 %1323 = OpLoad %1322 
                                               OpStore %1319 %1323 
                                               OpBranch %1321 
                                     %1324 = OpLabel 
                                 f32 %1325 = OpLoad %622 
                                               OpStore %1319 %1325 
                                               OpBranch %1321 
                                     %1321 = OpLabel 
                                 f32 %1326 = OpLoad %1319 
                        Private f32* %1327 = OpAccessChain %483 %641 
                                               OpStore %1327 %1326 
                        Private i32* %1328 = OpAccessChain %645 %88 
                                 i32 %1329 = OpLoad %1328 
                                bool %1330 = OpINotEqual %1329 %32 
                                               OpSelectionMerge %1332 None 
                                               OpBranchConditional %1330 %1331 %1332 
                                     %1331 = OpLabel 
                        Private i32* %1333 = OpAccessChain %583 %88 
                                 i32 %1334 = OpLoad %1333 
                                bool %1335 = OpIEqual %1334 %32 
                                               OpSelectionMerge %1337 None 
                                               OpBranchConditional %1335 %1336 %1337 
                                     %1336 = OpLabel 
                               f32_3 %1338 = OpLoad %237 
                               f32_2 %1339 = OpVectorShuffle %1338 %1338 0 2 
                               f32_3 %1340 = OpLoad %249 
                               f32_3 %1341 = OpVectorShuffle %1340 %1339 3 1 4 
                                               OpStore %249 %1341 
                               f32_3 %1342 = OpLoad %249 
                               f32_2 %1343 = OpVectorShuffle %1342 %1342 0 2 
                               f32_2 %1344 = OpCompositeConstruct %18 %18 
                               f32_2 %1345 = OpCompositeConstruct %19 %19 
                               f32_2 %1346 = OpExtInst %1 43 %1343 %1344 %1345 
                               f32_3 %1347 = OpLoad %249 
                               f32_3 %1348 = OpVectorShuffle %1347 %1346 3 1 4 
                                               OpStore %249 %1348 
                               f32_3 %1349 = OpLoad %249 
                               f32_2 %1350 = OpVectorShuffle %1349 %1349 0 2 
                        Uniform f32* %1351 = OpAccessChain %30 %32 
                                 f32 %1352 = OpLoad %1351 
                               f32_2 %1353 = OpCompositeConstruct %1352 %1352 
                               f32_2 %1354 = OpFMul %1350 %1353 
                               f32_3 %1355 = OpLoad %249 
                               f32_3 %1356 = OpVectorShuffle %1355 %1354 3 1 4 
                                               OpStore %249 %1356 
                 read_only Texture2D %1357 = OpLoad %44 
                             sampler %1358 = OpLoad %48 
          read_only Texture2DSampled %1359 = OpSampledImage %1357 %1358 
                               f32_3 %1360 = OpLoad %249 
                               f32_2 %1361 = OpVectorShuffle %1360 %1360 0 2 
                               f32_4 %1362 = OpImageSampleExplicitLod %1359 %1361 Lod %27 
                                 f32 %1363 = OpCompositeExtract %1362 1 
                        Private f32* %1364 = OpAccessChain %119 %88 
                                               OpStore %1364 %1363 
                                               OpBranch %1337 
                                     %1337 = OpLabel 
                        Private i32* %1365 = OpAccessChain %583 %67 
                                 i32 %1366 = OpLoad %1365 
                                bool %1367 = OpIEqual %1366 %32 
                                               OpSelectionMerge %1369 None 
                                               OpBranchConditional %1367 %1368 %1369 
                                     %1368 = OpLabel 
                               f32_3 %1370 = OpLoad %483 
                               f32_2 %1371 = OpVectorShuffle %1370 %1370 0 2 
                               f32_3 %1372 = OpLoad %249 
                               f32_3 %1373 = OpVectorShuffle %1372 %1371 3 1 4 
                                               OpStore %249 %1373 
                               f32_3 %1374 = OpLoad %249 
                               f32_2 %1375 = OpVectorShuffle %1374 %1374 0 2 
                               f32_2 %1376 = OpCompositeConstruct %18 %18 
                               f32_2 %1377 = OpCompositeConstruct %19 %19 
                               f32_2 %1378 = OpExtInst %1 43 %1375 %1376 %1377 
                               f32_3 %1379 = OpLoad %249 
                               f32_3 %1380 = OpVectorShuffle %1379 %1378 3 1 4 
                                               OpStore %249 %1380 
                               f32_3 %1381 = OpLoad %249 
                               f32_2 %1382 = OpVectorShuffle %1381 %1381 0 2 
                        Uniform f32* %1383 = OpAccessChain %30 %32 
                                 f32 %1384 = OpLoad %1383 
                               f32_2 %1385 = OpCompositeConstruct %1384 %1384 
                               f32_2 %1386 = OpFMul %1382 %1385 
                               f32_3 %1387 = OpLoad %249 
                               f32_3 %1388 = OpVectorShuffle %1387 %1386 3 1 4 
                                               OpStore %249 %1388 
                 read_only Texture2D %1389 = OpLoad %44 
                             sampler %1390 = OpLoad %48 
          read_only Texture2DSampled %1391 = OpSampledImage %1389 %1390 
                               f32_3 %1392 = OpLoad %249 
                               f32_2 %1393 = OpVectorShuffle %1392 %1392 0 2 
                               f32_4 %1394 = OpImageSampleExplicitLod %1391 %1393 Lod %27 
                                 f32 %1395 = OpCompositeExtract %1394 1 
                        Private f32* %1396 = OpAccessChain %119 %67 
                                               OpStore %1396 %1395 
                                               OpBranch %1369 
                                     %1369 = OpLabel 
                                 f32 %1397 = OpLoad %56 
                                 f32 %1398 = OpFNegate %1397 
                                 f32 %1399 = OpFMul %1398 %447 
                        Private f32* %1400 = OpAccessChain %119 %88 
                                 f32 %1401 = OpLoad %1400 
                                 f32 %1402 = OpFAdd %1399 %1401 
                        Private f32* %1403 = OpAccessChain %249 %88 
                                               OpStore %1403 %1402 
                        Private i32* %1404 = OpAccessChain %583 %88 
                                 i32 %1405 = OpLoad %1404 
                                bool %1406 = OpINotEqual %1405 %32 
                                               OpSelectionMerge %1409 None 
                                               OpBranchConditional %1406 %1408 %1412 
                                     %1408 = OpLabel 
                        Private f32* %1410 = OpAccessChain %119 %88 
                                 f32 %1411 = OpLoad %1410 
                                               OpStore %1407 %1411 
                                               OpBranch %1409 
                                     %1412 = OpLabel 
                        Private f32* %1413 = OpAccessChain %249 %88 
                                 f32 %1414 = OpLoad %1413 
                                               OpStore %1407 %1414 
                                               OpBranch %1409 
                                     %1409 = OpLabel 
                                 f32 %1415 = OpLoad %1407 
                        Private f32* %1416 = OpAccessChain %119 %88 
                                               OpStore %1416 %1415 
                                 f32 %1417 = OpLoad %56 
                                 f32 %1418 = OpFNegate %1417 
                                 f32 %1419 = OpFMul %1418 %447 
                        Private f32* %1420 = OpAccessChain %119 %67 
                                 f32 %1421 = OpLoad %1420 
                                 f32 %1422 = OpFAdd %1419 %1421 
                        Private f32* %1423 = OpAccessChain %207 %88 
                                               OpStore %1423 %1422 
                        Private i32* %1424 = OpAccessChain %583 %67 
                                 i32 %1425 = OpLoad %1424 
                                bool %1426 = OpINotEqual %1425 %32 
                                               OpSelectionMerge %1429 None 
                                               OpBranchConditional %1426 %1428 %1432 
                                     %1428 = OpLabel 
                        Private f32* %1430 = OpAccessChain %119 %67 
                                 f32 %1431 = OpLoad %1430 
                                               OpStore %1427 %1431 
                                               OpBranch %1429 
                                     %1432 = OpLabel 
                        Private f32* %1433 = OpAccessChain %207 %88 
                                 f32 %1434 = OpLoad %1433 
                                               OpStore %1427 %1434 
                                               OpBranch %1429 
                                     %1429 = OpLabel 
                                 f32 %1435 = OpLoad %1427 
                        Private f32* %1436 = OpAccessChain %119 %67 
                                               OpStore %1436 %1435 
                               f32_3 %1437 = OpLoad %119 
                               f32_4 %1438 = OpVectorShuffle %1437 %1437 0 1 0 1 
                               f32_4 %1439 = OpExtInst %1 4 %1438 
                               f32_3 %1440 = OpLoad %78 
                               f32_4 %1441 = OpVectorShuffle %1440 %1440 0 0 0 0 
                              bool_4 %1442 = OpFOrdGreaterThanEqual %1439 %1441 
                              bool_2 %1443 = OpVectorShuffle %1442 %1442 0 1 
                               u32_2 %1444 = OpSelect %1443 %595 %594 
                               u32_2 %1445 = OpCompositeConstruct %566 %566 
                               u32_2 %1446 = OpIMul %1444 %1445 
                               i32_2 %1447 = OpBitcast %1446 
                                               OpStore %583 %1447 
                        Private f32* %1448 = OpAccessChain %100 %88 
                                 f32 %1449 = OpLoad %1448 
                                 f32 %1450 = OpFNegate %1449 
                                 f32 %1451 = OpFMul %1450 %276 
                        Private f32* %1452 = OpAccessChain %237 %88 
                                 f32 %1453 = OpLoad %1452 
                                 f32 %1454 = OpFAdd %1451 %1453 
                        Private f32* %1455 = OpAccessChain %249 %88 
                                               OpStore %1455 %1454 
                        Private i32* %1456 = OpAccessChain %583 %88 
                                 i32 %1457 = OpLoad %1456 
                                bool %1458 = OpINotEqual %1457 %32 
                                               OpSelectionMerge %1461 None 
                                               OpBranchConditional %1458 %1460 %1464 
                                     %1460 = OpLabel 
                        Private f32* %1462 = OpAccessChain %237 %88 
                                 f32 %1463 = OpLoad %1462 
                                               OpStore %1459 %1463 
                                               OpBranch %1461 
                                     %1464 = OpLabel 
                        Private f32* %1465 = OpAccessChain %249 %88 
                                 f32 %1466 = OpLoad %1465 
                                               OpStore %1459 %1466 
                                               OpBranch %1461 
                                     %1461 = OpLabel 
                                 f32 %1467 = OpLoad %1459 
                        Private f32* %1468 = OpAccessChain %237 %88 
                                               OpStore %1468 %1467 
                        Private f32* %1469 = OpAccessChain %100 %67 
                                 f32 %1470 = OpLoad %1469 
                                 f32 %1471 = OpFNegate %1470 
                                 f32 %1472 = OpFMul %1471 %276 
                        Private f32* %1473 = OpAccessChain %237 %641 
                                 f32 %1474 = OpLoad %1473 
                                 f32 %1475 = OpFAdd %1472 %1474 
                        Private f32* %1476 = OpAccessChain %249 %88 
                                               OpStore %1476 %1475 
                        Private i32* %1477 = OpAccessChain %583 %88 
                                 i32 %1478 = OpLoad %1477 
                                bool %1479 = OpINotEqual %1478 %32 
                                               OpSelectionMerge %1482 None 
                                               OpBranchConditional %1479 %1481 %1485 
                                     %1481 = OpLabel 
                        Private f32* %1483 = OpAccessChain %237 %641 
                                 f32 %1484 = OpLoad %1483 
                                               OpStore %1480 %1484 
                                               OpBranch %1482 
                                     %1485 = OpLabel 
                        Private f32* %1486 = OpAccessChain %249 %88 
                                 f32 %1487 = OpLoad %1486 
                                               OpStore %1480 %1487 
                                               OpBranch %1482 
                                     %1482 = OpLabel 
                                 f32 %1488 = OpLoad %1480 
                        Private f32* %1489 = OpAccessChain %237 %641 
                                               OpStore %1489 %1488 
                               i32_2 %1490 = OpLoad %583 
                               i32_2 %1491 = OpNot %1490 
                               i32_3 %1492 = OpLoad %645 
                               i32_3 %1493 = OpVectorShuffle %1492 %1491 3 1 4 
                                               OpStore %645 %1493 
                        Private i32* %1494 = OpAccessChain %645 %641 
                                 i32 %1495 = OpLoad %1494 
                                 u32 %1496 = OpBitcast %1495 
                        Private i32* %1497 = OpAccessChain %645 %88 
                                 i32 %1498 = OpLoad %1497 
                                 u32 %1499 = OpBitcast %1498 
                                 u32 %1500 = OpBitwiseOr %1496 %1499 
                                 i32 %1501 = OpBitcast %1500 
                        Private i32* %1502 = OpAccessChain %645 %88 
                                               OpStore %1502 %1501 
                        Private f32* %1503 = OpAccessChain %100 %88 
                                 f32 %1504 = OpLoad %1503 
                                 f32 %1505 = OpFMul %1504 %276 
                        Private f32* %1506 = OpAccessChain %483 %88 
                                 f32 %1507 = OpLoad %1506 
                                 f32 %1508 = OpFAdd %1505 %1507 
                                               OpStore %622 %1508 
                        Private i32* %1509 = OpAccessChain %583 %67 
                                 i32 %1510 = OpLoad %1509 
                                bool %1511 = OpINotEqual %1510 %32 
                                               OpSelectionMerge %1514 None 
                                               OpBranchConditional %1511 %1513 %1517 
                                     %1513 = OpLabel 
                        Private f32* %1515 = OpAccessChain %483 %88 
                                 f32 %1516 = OpLoad %1515 
                                               OpStore %1512 %1516 
                                               OpBranch %1514 
                                     %1517 = OpLabel 
                                 f32 %1518 = OpLoad %622 
                                               OpStore %1512 %1518 
                                               OpBranch %1514 
                                     %1514 = OpLabel 
                                 f32 %1519 = OpLoad %1512 
                        Private f32* %1520 = OpAccessChain %483 %88 
                                               OpStore %1520 %1519 
                        Private f32* %1521 = OpAccessChain %100 %67 
                                 f32 %1522 = OpLoad %1521 
                                 f32 %1523 = OpFMul %1522 %276 
                        Private f32* %1524 = OpAccessChain %483 %641 
                                 f32 %1525 = OpLoad %1524 
                                 f32 %1526 = OpFAdd %1523 %1525 
                                               OpStore %622 %1526 
                        Private i32* %1527 = OpAccessChain %583 %67 
                                 i32 %1528 = OpLoad %1527 
                                bool %1529 = OpINotEqual %1528 %32 
                                               OpSelectionMerge %1532 None 
                                               OpBranchConditional %1529 %1531 %1535 
                                     %1531 = OpLabel 
                        Private f32* %1533 = OpAccessChain %483 %641 
                                 f32 %1534 = OpLoad %1533 
                                               OpStore %1530 %1534 
                                               OpBranch %1532 
                                     %1535 = OpLabel 
                                 f32 %1536 = OpLoad %622 
                                               OpStore %1530 %1536 
                                               OpBranch %1532 
                                     %1532 = OpLabel 
                                 f32 %1537 = OpLoad %1530 
                        Private f32* %1538 = OpAccessChain %483 %641 
                                               OpStore %1538 %1537 
                        Private i32* %1539 = OpAccessChain %645 %88 
                                 i32 %1540 = OpLoad %1539 
                                bool %1541 = OpINotEqual %1540 %32 
                                               OpSelectionMerge %1543 None 
                                               OpBranchConditional %1541 %1542 %1543 
                                     %1542 = OpLabel 
                        Private i32* %1544 = OpAccessChain %583 %88 
                                 i32 %1545 = OpLoad %1544 
                                bool %1546 = OpIEqual %1545 %32 
                                               OpSelectionMerge %1548 None 
                                               OpBranchConditional %1546 %1547 %1548 
                                     %1547 = OpLabel 
                               f32_3 %1549 = OpLoad %237 
                               f32_2 %1550 = OpVectorShuffle %1549 %1549 0 2 
                               f32_3 %1551 = OpLoad %249 
                               f32_3 %1552 = OpVectorShuffle %1551 %1550 3 1 4 
                                               OpStore %249 %1552 
                               f32_3 %1553 = OpLoad %249 
                               f32_2 %1554 = OpVectorShuffle %1553 %1553 0 2 
                               f32_2 %1555 = OpCompositeConstruct %18 %18 
                               f32_2 %1556 = OpCompositeConstruct %19 %19 
                               f32_2 %1557 = OpExtInst %1 43 %1554 %1555 %1556 
                               f32_3 %1558 = OpLoad %249 
                               f32_3 %1559 = OpVectorShuffle %1558 %1557 3 1 4 
                                               OpStore %249 %1559 
                               f32_3 %1560 = OpLoad %249 
                               f32_2 %1561 = OpVectorShuffle %1560 %1560 0 2 
                        Uniform f32* %1562 = OpAccessChain %30 %32 
                                 f32 %1563 = OpLoad %1562 
                               f32_2 %1564 = OpCompositeConstruct %1563 %1563 
                               f32_2 %1565 = OpFMul %1561 %1564 
                               f32_3 %1566 = OpLoad %249 
                               f32_3 %1567 = OpVectorShuffle %1566 %1565 3 1 4 
                                               OpStore %249 %1567 
                 read_only Texture2D %1568 = OpLoad %44 
                             sampler %1569 = OpLoad %48 
          read_only Texture2DSampled %1570 = OpSampledImage %1568 %1569 
                               f32_3 %1571 = OpLoad %249 
                               f32_2 %1572 = OpVectorShuffle %1571 %1571 0 2 
                               f32_4 %1573 = OpImageSampleExplicitLod %1570 %1572 Lod %27 
                                 f32 %1574 = OpCompositeExtract %1573 1 
                        Private f32* %1575 = OpAccessChain %119 %88 
                                               OpStore %1575 %1574 
                                               OpBranch %1548 
                                     %1548 = OpLabel 
                        Private i32* %1576 = OpAccessChain %583 %67 
                                 i32 %1577 = OpLoad %1576 
                                bool %1578 = OpIEqual %1577 %32 
                                               OpSelectionMerge %1580 None 
                                               OpBranchConditional %1578 %1579 %1580 
                                     %1579 = OpLabel 
                               f32_3 %1581 = OpLoad %483 
                               f32_2 %1582 = OpVectorShuffle %1581 %1581 0 2 
                               f32_3 %1583 = OpLoad %249 
                               f32_3 %1584 = OpVectorShuffle %1583 %1582 3 1 4 
                                               OpStore %249 %1584 
                               f32_3 %1585 = OpLoad %249 
                               f32_2 %1586 = OpVectorShuffle %1585 %1585 0 2 
                               f32_2 %1587 = OpCompositeConstruct %18 %18 
                               f32_2 %1588 = OpCompositeConstruct %19 %19 
                               f32_2 %1589 = OpExtInst %1 43 %1586 %1587 %1588 
                               f32_3 %1590 = OpLoad %249 
                               f32_3 %1591 = OpVectorShuffle %1590 %1589 3 1 4 
                                               OpStore %249 %1591 
                               f32_3 %1592 = OpLoad %249 
                               f32_2 %1593 = OpVectorShuffle %1592 %1592 0 2 
                        Uniform f32* %1594 = OpAccessChain %30 %32 
                                 f32 %1595 = OpLoad %1594 
                               f32_2 %1596 = OpCompositeConstruct %1595 %1595 
                               f32_2 %1597 = OpFMul %1593 %1596 
                               f32_3 %1598 = OpLoad %249 
                               f32_3 %1599 = OpVectorShuffle %1598 %1597 3 1 4 
                                               OpStore %249 %1599 
                 read_only Texture2D %1600 = OpLoad %44 
                             sampler %1601 = OpLoad %48 
          read_only Texture2DSampled %1602 = OpSampledImage %1600 %1601 
                               f32_3 %1603 = OpLoad %249 
                               f32_2 %1604 = OpVectorShuffle %1603 %1603 0 2 
                               f32_4 %1605 = OpImageSampleExplicitLod %1602 %1604 Lod %27 
                                 f32 %1606 = OpCompositeExtract %1605 1 
                        Private f32* %1607 = OpAccessChain %119 %67 
                                               OpStore %1607 %1606 
                                               OpBranch %1580 
                                     %1580 = OpLabel 
                                 f32 %1608 = OpLoad %56 
                                 f32 %1609 = OpFNegate %1608 
                                 f32 %1610 = OpFMul %1609 %447 
                        Private f32* %1611 = OpAccessChain %119 %88 
                                 f32 %1612 = OpLoad %1611 
                                 f32 %1613 = OpFAdd %1610 %1612 
                        Private f32* %1614 = OpAccessChain %249 %88 
                                               OpStore %1614 %1613 
                        Private i32* %1615 = OpAccessChain %583 %88 
                                 i32 %1616 = OpLoad %1615 
                                bool %1617 = OpINotEqual %1616 %32 
                                               OpSelectionMerge %1620 None 
                                               OpBranchConditional %1617 %1619 %1623 
                                     %1619 = OpLabel 
                        Private f32* %1621 = OpAccessChain %119 %88 
                                 f32 %1622 = OpLoad %1621 
                                               OpStore %1618 %1622 
                                               OpBranch %1620 
                                     %1623 = OpLabel 
                        Private f32* %1624 = OpAccessChain %249 %88 
                                 f32 %1625 = OpLoad %1624 
                                               OpStore %1618 %1625 
                                               OpBranch %1620 
                                     %1620 = OpLabel 
                                 f32 %1626 = OpLoad %1618 
                        Private f32* %1627 = OpAccessChain %119 %88 
                                               OpStore %1627 %1626 
                                 f32 %1628 = OpLoad %56 
                                 f32 %1629 = OpFNegate %1628 
                                 f32 %1630 = OpFMul %1629 %447 
                        Private f32* %1631 = OpAccessChain %119 %67 
                                 f32 %1632 = OpLoad %1631 
                                 f32 %1633 = OpFAdd %1630 %1632 
                        Private f32* %1634 = OpAccessChain %207 %88 
                                               OpStore %1634 %1633 
                        Private i32* %1635 = OpAccessChain %583 %67 
                                 i32 %1636 = OpLoad %1635 
                                bool %1637 = OpINotEqual %1636 %32 
                                               OpSelectionMerge %1640 None 
                                               OpBranchConditional %1637 %1639 %1643 
                                     %1639 = OpLabel 
                        Private f32* %1641 = OpAccessChain %119 %67 
                                 f32 %1642 = OpLoad %1641 
                                               OpStore %1638 %1642 
                                               OpBranch %1640 
                                     %1643 = OpLabel 
                        Private f32* %1644 = OpAccessChain %207 %88 
                                 f32 %1645 = OpLoad %1644 
                                               OpStore %1638 %1645 
                                               OpBranch %1640 
                                     %1640 = OpLabel 
                                 f32 %1646 = OpLoad %1638 
                        Private f32* %1647 = OpAccessChain %119 %67 
                                               OpStore %1647 %1646 
                               f32_3 %1648 = OpLoad %119 
                               f32_4 %1649 = OpVectorShuffle %1648 %1648 0 1 0 1 
                               f32_4 %1650 = OpExtInst %1 4 %1649 
                               f32_3 %1651 = OpLoad %78 
                               f32_4 %1652 = OpVectorShuffle %1651 %1651 0 0 0 0 
                              bool_4 %1653 = OpFOrdGreaterThanEqual %1650 %1652 
                              bool_2 %1654 = OpVectorShuffle %1653 %1653 0 1 
                               u32_2 %1655 = OpSelect %1654 %595 %594 
                               u32_2 %1656 = OpCompositeConstruct %566 %566 
                               u32_2 %1657 = OpIMul %1655 %1656 
                               i32_2 %1658 = OpBitcast %1657 
                                               OpStore %583 %1658 
                        Private f32* %1659 = OpAccessChain %100 %88 
                                 f32 %1660 = OpLoad %1659 
                                 f32 %1661 = OpFNegate %1660 
                                 f32 %1662 = OpFMul %1661 %276 
                        Private f32* %1663 = OpAccessChain %237 %88 
                                 f32 %1664 = OpLoad %1663 
                                 f32 %1665 = OpFAdd %1662 %1664 
                        Private f32* %1666 = OpAccessChain %249 %88 
                                               OpStore %1666 %1665 
                        Private i32* %1667 = OpAccessChain %583 %88 
                                 i32 %1668 = OpLoad %1667 
                                bool %1669 = OpINotEqual %1668 %32 
                                               OpSelectionMerge %1672 None 
                                               OpBranchConditional %1669 %1671 %1675 
                                     %1671 = OpLabel 
                        Private f32* %1673 = OpAccessChain %237 %88 
                                 f32 %1674 = OpLoad %1673 
                                               OpStore %1670 %1674 
                                               OpBranch %1672 
                                     %1675 = OpLabel 
                        Private f32* %1676 = OpAccessChain %249 %88 
                                 f32 %1677 = OpLoad %1676 
                                               OpStore %1670 %1677 
                                               OpBranch %1672 
                                     %1672 = OpLabel 
                                 f32 %1678 = OpLoad %1670 
                        Private f32* %1679 = OpAccessChain %237 %88 
                                               OpStore %1679 %1678 
                        Private f32* %1680 = OpAccessChain %100 %67 
                                 f32 %1681 = OpLoad %1680 
                                 f32 %1682 = OpFNegate %1681 
                                 f32 %1683 = OpFMul %1682 %276 
                        Private f32* %1684 = OpAccessChain %237 %641 
                                 f32 %1685 = OpLoad %1684 
                                 f32 %1686 = OpFAdd %1683 %1685 
                        Private f32* %1687 = OpAccessChain %249 %88 
                                               OpStore %1687 %1686 
                        Private i32* %1688 = OpAccessChain %583 %88 
                                 i32 %1689 = OpLoad %1688 
                                bool %1690 = OpINotEqual %1689 %32 
                                               OpSelectionMerge %1693 None 
                                               OpBranchConditional %1690 %1692 %1696 
                                     %1692 = OpLabel 
                        Private f32* %1694 = OpAccessChain %237 %641 
                                 f32 %1695 = OpLoad %1694 
                                               OpStore %1691 %1695 
                                               OpBranch %1693 
                                     %1696 = OpLabel 
                        Private f32* %1697 = OpAccessChain %249 %88 
                                 f32 %1698 = OpLoad %1697 
                                               OpStore %1691 %1698 
                                               OpBranch %1693 
                                     %1693 = OpLabel 
                                 f32 %1699 = OpLoad %1691 
                        Private f32* %1700 = OpAccessChain %237 %641 
                                               OpStore %1700 %1699 
                               i32_2 %1701 = OpLoad %583 
                               i32_2 %1702 = OpNot %1701 
                               i32_3 %1703 = OpLoad %645 
                               i32_3 %1704 = OpVectorShuffle %1703 %1702 3 1 4 
                                               OpStore %645 %1704 
                        Private i32* %1705 = OpAccessChain %645 %641 
                                 i32 %1706 = OpLoad %1705 
                                 u32 %1707 = OpBitcast %1706 
                        Private i32* %1708 = OpAccessChain %645 %88 
                                 i32 %1709 = OpLoad %1708 
                                 u32 %1710 = OpBitcast %1709 
                                 u32 %1711 = OpBitwiseOr %1707 %1710 
                                 i32 %1712 = OpBitcast %1711 
                        Private i32* %1713 = OpAccessChain %645 %88 
                                               OpStore %1713 %1712 
                        Private f32* %1714 = OpAccessChain %100 %88 
                                 f32 %1715 = OpLoad %1714 
                                 f32 %1716 = OpFMul %1715 %276 
                        Private f32* %1717 = OpAccessChain %483 %88 
                                 f32 %1718 = OpLoad %1717 
                                 f32 %1719 = OpFAdd %1716 %1718 
                                               OpStore %622 %1719 
                        Private i32* %1720 = OpAccessChain %583 %67 
                                 i32 %1721 = OpLoad %1720 
                                bool %1722 = OpINotEqual %1721 %32 
                                               OpSelectionMerge %1725 None 
                                               OpBranchConditional %1722 %1724 %1728 
                                     %1724 = OpLabel 
                        Private f32* %1726 = OpAccessChain %483 %88 
                                 f32 %1727 = OpLoad %1726 
                                               OpStore %1723 %1727 
                                               OpBranch %1725 
                                     %1728 = OpLabel 
                                 f32 %1729 = OpLoad %622 
                                               OpStore %1723 %1729 
                                               OpBranch %1725 
                                     %1725 = OpLabel 
                                 f32 %1730 = OpLoad %1723 
                        Private f32* %1731 = OpAccessChain %483 %88 
                                               OpStore %1731 %1730 
                        Private f32* %1732 = OpAccessChain %100 %67 
                                 f32 %1733 = OpLoad %1732 
                                 f32 %1734 = OpFMul %1733 %276 
                        Private f32* %1735 = OpAccessChain %483 %641 
                                 f32 %1736 = OpLoad %1735 
                                 f32 %1737 = OpFAdd %1734 %1736 
                                               OpStore %622 %1737 
                        Private i32* %1738 = OpAccessChain %583 %67 
                                 i32 %1739 = OpLoad %1738 
                                bool %1740 = OpINotEqual %1739 %32 
                                               OpSelectionMerge %1743 None 
                                               OpBranchConditional %1740 %1742 %1746 
                                     %1742 = OpLabel 
                        Private f32* %1744 = OpAccessChain %483 %641 
                                 f32 %1745 = OpLoad %1744 
                                               OpStore %1741 %1745 
                                               OpBranch %1743 
                                     %1746 = OpLabel 
                                 f32 %1747 = OpLoad %622 
                                               OpStore %1741 %1747 
                                               OpBranch %1743 
                                     %1743 = OpLabel 
                                 f32 %1748 = OpLoad %1741 
                        Private f32* %1749 = OpAccessChain %483 %641 
                                               OpStore %1749 %1748 
                        Private i32* %1750 = OpAccessChain %645 %88 
                                 i32 %1751 = OpLoad %1750 
                                bool %1752 = OpINotEqual %1751 %32 
                                               OpSelectionMerge %1754 None 
                                               OpBranchConditional %1752 %1753 %1754 
                                     %1753 = OpLabel 
                        Private i32* %1755 = OpAccessChain %583 %88 
                                 i32 %1756 = OpLoad %1755 
                                bool %1757 = OpIEqual %1756 %32 
                                               OpSelectionMerge %1759 None 
                                               OpBranchConditional %1757 %1758 %1759 
                                     %1758 = OpLabel 
                               f32_3 %1760 = OpLoad %237 
                               f32_2 %1761 = OpVectorShuffle %1760 %1760 0 2 
                               f32_3 %1762 = OpLoad %249 
                               f32_3 %1763 = OpVectorShuffle %1762 %1761 3 1 4 
                                               OpStore %249 %1763 
                               f32_3 %1764 = OpLoad %249 
                               f32_2 %1765 = OpVectorShuffle %1764 %1764 0 2 
                               f32_2 %1766 = OpCompositeConstruct %18 %18 
                               f32_2 %1767 = OpCompositeConstruct %19 %19 
                               f32_2 %1768 = OpExtInst %1 43 %1765 %1766 %1767 
                               f32_3 %1769 = OpLoad %249 
                               f32_3 %1770 = OpVectorShuffle %1769 %1768 3 1 4 
                                               OpStore %249 %1770 
                               f32_3 %1771 = OpLoad %249 
                               f32_2 %1772 = OpVectorShuffle %1771 %1771 0 2 
                        Uniform f32* %1773 = OpAccessChain %30 %32 
                                 f32 %1774 = OpLoad %1773 
                               f32_2 %1775 = OpCompositeConstruct %1774 %1774 
                               f32_2 %1776 = OpFMul %1772 %1775 
                               f32_3 %1777 = OpLoad %249 
                               f32_3 %1778 = OpVectorShuffle %1777 %1776 3 1 4 
                                               OpStore %249 %1778 
                 read_only Texture2D %1779 = OpLoad %44 
                             sampler %1780 = OpLoad %48 
          read_only Texture2DSampled %1781 = OpSampledImage %1779 %1780 
                               f32_3 %1782 = OpLoad %249 
                               f32_2 %1783 = OpVectorShuffle %1782 %1782 0 2 
                               f32_4 %1784 = OpImageSampleExplicitLod %1781 %1783 Lod %27 
                                 f32 %1785 = OpCompositeExtract %1784 1 
                        Private f32* %1786 = OpAccessChain %119 %88 
                                               OpStore %1786 %1785 
                                               OpBranch %1759 
                                     %1759 = OpLabel 
                        Private i32* %1787 = OpAccessChain %583 %67 
                                 i32 %1788 = OpLoad %1787 
                                bool %1789 = OpIEqual %1788 %32 
                                               OpSelectionMerge %1791 None 
                                               OpBranchConditional %1789 %1790 %1791 
                                     %1790 = OpLabel 
                               f32_3 %1792 = OpLoad %483 
                               f32_2 %1793 = OpVectorShuffle %1792 %1792 0 2 
                               f32_3 %1794 = OpLoad %249 
                               f32_3 %1795 = OpVectorShuffle %1794 %1793 3 1 4 
                                               OpStore %249 %1795 
                               f32_3 %1796 = OpLoad %249 
                               f32_2 %1797 = OpVectorShuffle %1796 %1796 0 2 
                               f32_2 %1798 = OpCompositeConstruct %18 %18 
                               f32_2 %1799 = OpCompositeConstruct %19 %19 
                               f32_2 %1800 = OpExtInst %1 43 %1797 %1798 %1799 
                               f32_3 %1801 = OpLoad %249 
                               f32_3 %1802 = OpVectorShuffle %1801 %1800 3 1 4 
                                               OpStore %249 %1802 
                               f32_3 %1803 = OpLoad %249 
                               f32_2 %1804 = OpVectorShuffle %1803 %1803 0 2 
                        Uniform f32* %1805 = OpAccessChain %30 %32 
                                 f32 %1806 = OpLoad %1805 
                               f32_2 %1807 = OpCompositeConstruct %1806 %1806 
                               f32_2 %1808 = OpFMul %1804 %1807 
                               f32_3 %1809 = OpLoad %249 
                               f32_3 %1810 = OpVectorShuffle %1809 %1808 3 1 4 
                                               OpStore %249 %1810 
                 read_only Texture2D %1811 = OpLoad %44 
                             sampler %1812 = OpLoad %48 
          read_only Texture2DSampled %1813 = OpSampledImage %1811 %1812 
                               f32_3 %1814 = OpLoad %249 
                               f32_2 %1815 = OpVectorShuffle %1814 %1814 0 2 
                               f32_4 %1816 = OpImageSampleExplicitLod %1813 %1815 Lod %27 
                                 f32 %1817 = OpCompositeExtract %1816 1 
                        Private f32* %1818 = OpAccessChain %119 %67 
                                               OpStore %1818 %1817 
                                               OpBranch %1791 
                                     %1791 = OpLabel 
                                 f32 %1819 = OpLoad %56 
                                 f32 %1820 = OpFNegate %1819 
                                 f32 %1821 = OpFMul %1820 %447 
                        Private f32* %1822 = OpAccessChain %119 %88 
                                 f32 %1823 = OpLoad %1822 
                                 f32 %1824 = OpFAdd %1821 %1823 
                        Private f32* %1825 = OpAccessChain %249 %88 
                                               OpStore %1825 %1824 
                        Private i32* %1826 = OpAccessChain %583 %88 
                                 i32 %1827 = OpLoad %1826 
                                bool %1828 = OpINotEqual %1827 %32 
                                               OpSelectionMerge %1831 None 
                                               OpBranchConditional %1828 %1830 %1834 
                                     %1830 = OpLabel 
                        Private f32* %1832 = OpAccessChain %119 %88 
                                 f32 %1833 = OpLoad %1832 
                                               OpStore %1829 %1833 
                                               OpBranch %1831 
                                     %1834 = OpLabel 
                        Private f32* %1835 = OpAccessChain %249 %88 
                                 f32 %1836 = OpLoad %1835 
                                               OpStore %1829 %1836 
                                               OpBranch %1831 
                                     %1831 = OpLabel 
                                 f32 %1837 = OpLoad %1829 
                        Private f32* %1838 = OpAccessChain %119 %88 
                                               OpStore %1838 %1837 
                                 f32 %1839 = OpLoad %56 
                                 f32 %1840 = OpFNegate %1839 
                                 f32 %1841 = OpFMul %1840 %447 
                        Private f32* %1842 = OpAccessChain %119 %67 
                                 f32 %1843 = OpLoad %1842 
                                 f32 %1844 = OpFAdd %1841 %1843 
                        Private f32* %1845 = OpAccessChain %207 %88 
                                               OpStore %1845 %1844 
                        Private i32* %1846 = OpAccessChain %583 %67 
                                 i32 %1847 = OpLoad %1846 
                                bool %1848 = OpINotEqual %1847 %32 
                                               OpSelectionMerge %1851 None 
                                               OpBranchConditional %1848 %1850 %1854 
                                     %1850 = OpLabel 
                        Private f32* %1852 = OpAccessChain %119 %67 
                                 f32 %1853 = OpLoad %1852 
                                               OpStore %1849 %1853 
                                               OpBranch %1851 
                                     %1854 = OpLabel 
                        Private f32* %1855 = OpAccessChain %207 %88 
                                 f32 %1856 = OpLoad %1855 
                                               OpStore %1849 %1856 
                                               OpBranch %1851 
                                     %1851 = OpLabel 
                                 f32 %1857 = OpLoad %1849 
                        Private f32* %1858 = OpAccessChain %119 %67 
                                               OpStore %1858 %1857 
                               f32_3 %1859 = OpLoad %119 
                               f32_4 %1860 = OpVectorShuffle %1859 %1859 0 1 0 1 
                               f32_4 %1861 = OpExtInst %1 4 %1860 
                               f32_3 %1862 = OpLoad %78 
                               f32_4 %1863 = OpVectorShuffle %1862 %1862 0 0 0 0 
                              bool_4 %1864 = OpFOrdGreaterThanEqual %1861 %1863 
                              bool_2 %1865 = OpVectorShuffle %1864 %1864 0 1 
                               u32_2 %1866 = OpSelect %1865 %595 %594 
                               u32_2 %1867 = OpCompositeConstruct %566 %566 
                               u32_2 %1868 = OpIMul %1866 %1867 
                               i32_2 %1869 = OpBitcast %1868 
                                               OpStore %583 %1869 
                        Private f32* %1870 = OpAccessChain %100 %88 
                                 f32 %1871 = OpLoad %1870 
                                 f32 %1872 = OpFNegate %1871 
                                 f32 %1873 = OpFMul %1872 %276 
                        Private f32* %1874 = OpAccessChain %237 %88 
                                 f32 %1875 = OpLoad %1874 
                                 f32 %1876 = OpFAdd %1873 %1875 
                        Private f32* %1877 = OpAccessChain %249 %88 
                                               OpStore %1877 %1876 
                        Private i32* %1878 = OpAccessChain %583 %88 
                                 i32 %1879 = OpLoad %1878 
                                bool %1880 = OpINotEqual %1879 %32 
                                               OpSelectionMerge %1883 None 
                                               OpBranchConditional %1880 %1882 %1886 
                                     %1882 = OpLabel 
                        Private f32* %1884 = OpAccessChain %237 %88 
                                 f32 %1885 = OpLoad %1884 
                                               OpStore %1881 %1885 
                                               OpBranch %1883 
                                     %1886 = OpLabel 
                        Private f32* %1887 = OpAccessChain %249 %88 
                                 f32 %1888 = OpLoad %1887 
                                               OpStore %1881 %1888 
                                               OpBranch %1883 
                                     %1883 = OpLabel 
                                 f32 %1889 = OpLoad %1881 
                        Private f32* %1890 = OpAccessChain %237 %88 
                                               OpStore %1890 %1889 
                        Private f32* %1891 = OpAccessChain %100 %67 
                                 f32 %1892 = OpLoad %1891 
                                 f32 %1893 = OpFNegate %1892 
                                 f32 %1894 = OpFMul %1893 %276 
                        Private f32* %1895 = OpAccessChain %237 %641 
                                 f32 %1896 = OpLoad %1895 
                                 f32 %1897 = OpFAdd %1894 %1896 
                        Private f32* %1898 = OpAccessChain %249 %88 
                                               OpStore %1898 %1897 
                        Private i32* %1899 = OpAccessChain %583 %88 
                                 i32 %1900 = OpLoad %1899 
                                bool %1901 = OpINotEqual %1900 %32 
                                               OpSelectionMerge %1904 None 
                                               OpBranchConditional %1901 %1903 %1907 
                                     %1903 = OpLabel 
                        Private f32* %1905 = OpAccessChain %237 %641 
                                 f32 %1906 = OpLoad %1905 
                                               OpStore %1902 %1906 
                                               OpBranch %1904 
                                     %1907 = OpLabel 
                        Private f32* %1908 = OpAccessChain %249 %88 
                                 f32 %1909 = OpLoad %1908 
                                               OpStore %1902 %1909 
                                               OpBranch %1904 
                                     %1904 = OpLabel 
                                 f32 %1910 = OpLoad %1902 
                        Private f32* %1911 = OpAccessChain %237 %641 
                                               OpStore %1911 %1910 
                               i32_2 %1912 = OpLoad %583 
                               i32_2 %1913 = OpNot %1912 
                               i32_3 %1914 = OpLoad %645 
                               i32_3 %1915 = OpVectorShuffle %1914 %1913 3 1 4 
                                               OpStore %645 %1915 
                        Private i32* %1916 = OpAccessChain %645 %641 
                                 i32 %1917 = OpLoad %1916 
                                 u32 %1918 = OpBitcast %1917 
                        Private i32* %1919 = OpAccessChain %645 %88 
                                 i32 %1920 = OpLoad %1919 
                                 u32 %1921 = OpBitcast %1920 
                                 u32 %1922 = OpBitwiseOr %1918 %1921 
                                 i32 %1923 = OpBitcast %1922 
                        Private i32* %1924 = OpAccessChain %645 %88 
                                               OpStore %1924 %1923 
                        Private f32* %1925 = OpAccessChain %100 %88 
                                 f32 %1926 = OpLoad %1925 
                                 f32 %1927 = OpFMul %1926 %276 
                        Private f32* %1928 = OpAccessChain %483 %88 
                                 f32 %1929 = OpLoad %1928 
                                 f32 %1930 = OpFAdd %1927 %1929 
                                               OpStore %622 %1930 
                        Private i32* %1931 = OpAccessChain %583 %67 
                                 i32 %1932 = OpLoad %1931 
                                bool %1933 = OpINotEqual %1932 %32 
                                               OpSelectionMerge %1936 None 
                                               OpBranchConditional %1933 %1935 %1939 
                                     %1935 = OpLabel 
                        Private f32* %1937 = OpAccessChain %483 %88 
                                 f32 %1938 = OpLoad %1937 
                                               OpStore %1934 %1938 
                                               OpBranch %1936 
                                     %1939 = OpLabel 
                                 f32 %1940 = OpLoad %622 
                                               OpStore %1934 %1940 
                                               OpBranch %1936 
                                     %1936 = OpLabel 
                                 f32 %1941 = OpLoad %1934 
                        Private f32* %1942 = OpAccessChain %483 %88 
                                               OpStore %1942 %1941 
                        Private f32* %1943 = OpAccessChain %100 %67 
                                 f32 %1944 = OpLoad %1943 
                                 f32 %1945 = OpFMul %1944 %276 
                        Private f32* %1946 = OpAccessChain %483 %641 
                                 f32 %1947 = OpLoad %1946 
                                 f32 %1948 = OpFAdd %1945 %1947 
                                               OpStore %622 %1948 
                        Private i32* %1949 = OpAccessChain %583 %67 
                                 i32 %1950 = OpLoad %1949 
                                bool %1951 = OpINotEqual %1950 %32 
                                               OpSelectionMerge %1954 None 
                                               OpBranchConditional %1951 %1953 %1957 
                                     %1953 = OpLabel 
                        Private f32* %1955 = OpAccessChain %483 %641 
                                 f32 %1956 = OpLoad %1955 
                                               OpStore %1952 %1956 
                                               OpBranch %1954 
                                     %1957 = OpLabel 
                                 f32 %1958 = OpLoad %622 
                                               OpStore %1952 %1958 
                                               OpBranch %1954 
                                     %1954 = OpLabel 
                                 f32 %1959 = OpLoad %1952 
                        Private f32* %1960 = OpAccessChain %483 %641 
                                               OpStore %1960 %1959 
                        Private i32* %1961 = OpAccessChain %645 %88 
                                 i32 %1962 = OpLoad %1961 
                                bool %1963 = OpINotEqual %1962 %32 
                                               OpSelectionMerge %1965 None 
                                               OpBranchConditional %1963 %1964 %1965 
                                     %1964 = OpLabel 
                        Private i32* %1966 = OpAccessChain %583 %88 
                                 i32 %1967 = OpLoad %1966 
                                bool %1968 = OpIEqual %1967 %32 
                                               OpSelectionMerge %1970 None 
                                               OpBranchConditional %1968 %1969 %1970 
                                     %1969 = OpLabel 
                               f32_3 %1971 = OpLoad %237 
                               f32_2 %1972 = OpVectorShuffle %1971 %1971 0 2 
                               f32_3 %1973 = OpLoad %249 
                               f32_3 %1974 = OpVectorShuffle %1973 %1972 3 1 4 
                                               OpStore %249 %1974 
                               f32_3 %1975 = OpLoad %249 
                               f32_2 %1976 = OpVectorShuffle %1975 %1975 0 2 
                               f32_2 %1977 = OpCompositeConstruct %18 %18 
                               f32_2 %1978 = OpCompositeConstruct %19 %19 
                               f32_2 %1979 = OpExtInst %1 43 %1976 %1977 %1978 
                               f32_3 %1980 = OpLoad %249 
                               f32_3 %1981 = OpVectorShuffle %1980 %1979 3 1 4 
                                               OpStore %249 %1981 
                               f32_3 %1982 = OpLoad %249 
                               f32_2 %1983 = OpVectorShuffle %1982 %1982 0 2 
                        Uniform f32* %1984 = OpAccessChain %30 %32 
                                 f32 %1985 = OpLoad %1984 
                               f32_2 %1986 = OpCompositeConstruct %1985 %1985 
                               f32_2 %1987 = OpFMul %1983 %1986 
                               f32_3 %1988 = OpLoad %249 
                               f32_3 %1989 = OpVectorShuffle %1988 %1987 3 1 4 
                                               OpStore %249 %1989 
                 read_only Texture2D %1990 = OpLoad %44 
                             sampler %1991 = OpLoad %48 
          read_only Texture2DSampled %1992 = OpSampledImage %1990 %1991 
                               f32_3 %1993 = OpLoad %249 
                               f32_2 %1994 = OpVectorShuffle %1993 %1993 0 2 
                               f32_4 %1995 = OpImageSampleExplicitLod %1992 %1994 Lod %27 
                                 f32 %1996 = OpCompositeExtract %1995 1 
                        Private f32* %1997 = OpAccessChain %119 %88 
                                               OpStore %1997 %1996 
                                               OpBranch %1970 
                                     %1970 = OpLabel 
                        Private i32* %1998 = OpAccessChain %583 %67 
                                 i32 %1999 = OpLoad %1998 
                                bool %2000 = OpIEqual %1999 %32 
                                               OpSelectionMerge %2002 None 
                                               OpBranchConditional %2000 %2001 %2002 
                                     %2001 = OpLabel 
                               f32_3 %2003 = OpLoad %483 
                               f32_2 %2004 = OpVectorShuffle %2003 %2003 0 2 
                               f32_3 %2005 = OpLoad %249 
                               f32_3 %2006 = OpVectorShuffle %2005 %2004 3 1 4 
                                               OpStore %249 %2006 
                               f32_3 %2007 = OpLoad %249 
                               f32_2 %2008 = OpVectorShuffle %2007 %2007 0 2 
                               f32_2 %2009 = OpCompositeConstruct %18 %18 
                               f32_2 %2010 = OpCompositeConstruct %19 %19 
                               f32_2 %2011 = OpExtInst %1 43 %2008 %2009 %2010 
                               f32_3 %2012 = OpLoad %249 
                               f32_3 %2013 = OpVectorShuffle %2012 %2011 3 1 4 
                                               OpStore %249 %2013 
                               f32_3 %2014 = OpLoad %249 
                               f32_2 %2015 = OpVectorShuffle %2014 %2014 0 2 
                        Uniform f32* %2016 = OpAccessChain %30 %32 
                                 f32 %2017 = OpLoad %2016 
                               f32_2 %2018 = OpCompositeConstruct %2017 %2017 
                               f32_2 %2019 = OpFMul %2015 %2018 
                               f32_3 %2020 = OpLoad %249 
                               f32_3 %2021 = OpVectorShuffle %2020 %2019 3 1 4 
                                               OpStore %249 %2021 
                 read_only Texture2D %2022 = OpLoad %44 
                             sampler %2023 = OpLoad %48 
          read_only Texture2DSampled %2024 = OpSampledImage %2022 %2023 
                               f32_3 %2025 = OpLoad %249 
                               f32_2 %2026 = OpVectorShuffle %2025 %2025 0 2 
                               f32_4 %2027 = OpImageSampleExplicitLod %2024 %2026 Lod %27 
                                 f32 %2028 = OpCompositeExtract %2027 1 
                        Private f32* %2029 = OpAccessChain %119 %67 
                                               OpStore %2029 %2028 
                                               OpBranch %2002 
                                     %2002 = OpLabel 
                                 f32 %2030 = OpLoad %56 
                                 f32 %2031 = OpFNegate %2030 
                                 f32 %2032 = OpFMul %2031 %447 
                        Private f32* %2033 = OpAccessChain %119 %88 
                                 f32 %2034 = OpLoad %2033 
                                 f32 %2035 = OpFAdd %2032 %2034 
                        Private f32* %2036 = OpAccessChain %249 %88 
                                               OpStore %2036 %2035 
                        Private i32* %2037 = OpAccessChain %583 %88 
                                 i32 %2038 = OpLoad %2037 
                                bool %2039 = OpINotEqual %2038 %32 
                                               OpSelectionMerge %2042 None 
                                               OpBranchConditional %2039 %2041 %2045 
                                     %2041 = OpLabel 
                        Private f32* %2043 = OpAccessChain %119 %88 
                                 f32 %2044 = OpLoad %2043 
                                               OpStore %2040 %2044 
                                               OpBranch %2042 
                                     %2045 = OpLabel 
                        Private f32* %2046 = OpAccessChain %249 %88 
                                 f32 %2047 = OpLoad %2046 
                                               OpStore %2040 %2047 
                                               OpBranch %2042 
                                     %2042 = OpLabel 
                                 f32 %2048 = OpLoad %2040 
                        Private f32* %2049 = OpAccessChain %119 %88 
                                               OpStore %2049 %2048 
                                 f32 %2050 = OpLoad %56 
                                 f32 %2051 = OpFNegate %2050 
                                 f32 %2052 = OpFMul %2051 %447 
                        Private f32* %2053 = OpAccessChain %119 %67 
                                 f32 %2054 = OpLoad %2053 
                                 f32 %2055 = OpFAdd %2052 %2054 
                        Private f32* %2056 = OpAccessChain %207 %88 
                                               OpStore %2056 %2055 
                        Private i32* %2057 = OpAccessChain %583 %67 
                                 i32 %2058 = OpLoad %2057 
                                bool %2059 = OpINotEqual %2058 %32 
                                               OpSelectionMerge %2062 None 
                                               OpBranchConditional %2059 %2061 %2065 
                                     %2061 = OpLabel 
                        Private f32* %2063 = OpAccessChain %119 %67 
                                 f32 %2064 = OpLoad %2063 
                                               OpStore %2060 %2064 
                                               OpBranch %2062 
                                     %2065 = OpLabel 
                        Private f32* %2066 = OpAccessChain %207 %88 
                                 f32 %2067 = OpLoad %2066 
                                               OpStore %2060 %2067 
                                               OpBranch %2062 
                                     %2062 = OpLabel 
                                 f32 %2068 = OpLoad %2060 
                        Private f32* %2069 = OpAccessChain %119 %67 
                                               OpStore %2069 %2068 
                               f32_3 %2070 = OpLoad %119 
                               f32_4 %2071 = OpVectorShuffle %2070 %2070 0 1 0 1 
                               f32_4 %2072 = OpExtInst %1 4 %2071 
                               f32_3 %2073 = OpLoad %78 
                               f32_4 %2074 = OpVectorShuffle %2073 %2073 0 0 0 0 
                              bool_4 %2075 = OpFOrdGreaterThanEqual %2072 %2074 
                              bool_2 %2076 = OpVectorShuffle %2075 %2075 0 1 
                               u32_2 %2077 = OpSelect %2076 %595 %594 
                               u32_2 %2078 = OpCompositeConstruct %566 %566 
                               u32_2 %2079 = OpIMul %2077 %2078 
                               i32_2 %2080 = OpBitcast %2079 
                                               OpStore %583 %2080 
                        Private f32* %2081 = OpAccessChain %100 %88 
                                 f32 %2082 = OpLoad %2081 
                                 f32 %2083 = OpFNegate %2082 
                                 f32 %2084 = OpFMul %2083 %276 
                        Private f32* %2085 = OpAccessChain %237 %88 
                                 f32 %2086 = OpLoad %2085 
                                 f32 %2087 = OpFAdd %2084 %2086 
                        Private f32* %2088 = OpAccessChain %249 %88 
                                               OpStore %2088 %2087 
                        Private i32* %2089 = OpAccessChain %583 %88 
                                 i32 %2090 = OpLoad %2089 
                                bool %2091 = OpINotEqual %2090 %32 
                                               OpSelectionMerge %2094 None 
                                               OpBranchConditional %2091 %2093 %2097 
                                     %2093 = OpLabel 
                        Private f32* %2095 = OpAccessChain %237 %88 
                                 f32 %2096 = OpLoad %2095 
                                               OpStore %2092 %2096 
                                               OpBranch %2094 
                                     %2097 = OpLabel 
                        Private f32* %2098 = OpAccessChain %249 %88 
                                 f32 %2099 = OpLoad %2098 
                                               OpStore %2092 %2099 
                                               OpBranch %2094 
                                     %2094 = OpLabel 
                                 f32 %2100 = OpLoad %2092 
                        Private f32* %2101 = OpAccessChain %237 %88 
                                               OpStore %2101 %2100 
                        Private f32* %2102 = OpAccessChain %100 %67 
                                 f32 %2103 = OpLoad %2102 
                                 f32 %2104 = OpFNegate %2103 
                                 f32 %2105 = OpFMul %2104 %276 
                        Private f32* %2106 = OpAccessChain %237 %641 
                                 f32 %2107 = OpLoad %2106 
                                 f32 %2108 = OpFAdd %2105 %2107 
                        Private f32* %2109 = OpAccessChain %249 %88 
                                               OpStore %2109 %2108 
                        Private i32* %2110 = OpAccessChain %583 %88 
                                 i32 %2111 = OpLoad %2110 
                                bool %2112 = OpINotEqual %2111 %32 
                                               OpSelectionMerge %2115 None 
                                               OpBranchConditional %2112 %2114 %2118 
                                     %2114 = OpLabel 
                        Private f32* %2116 = OpAccessChain %237 %641 
                                 f32 %2117 = OpLoad %2116 
                                               OpStore %2113 %2117 
                                               OpBranch %2115 
                                     %2118 = OpLabel 
                        Private f32* %2119 = OpAccessChain %249 %88 
                                 f32 %2120 = OpLoad %2119 
                                               OpStore %2113 %2120 
                                               OpBranch %2115 
                                     %2115 = OpLabel 
                                 f32 %2121 = OpLoad %2113 
                        Private f32* %2122 = OpAccessChain %237 %641 
                                               OpStore %2122 %2121 
                               i32_2 %2123 = OpLoad %583 
                               i32_2 %2124 = OpNot %2123 
                               i32_3 %2125 = OpLoad %645 
                               i32_3 %2126 = OpVectorShuffle %2125 %2124 3 1 4 
                                               OpStore %645 %2126 
                        Private i32* %2127 = OpAccessChain %645 %641 
                                 i32 %2128 = OpLoad %2127 
                                 u32 %2129 = OpBitcast %2128 
                        Private i32* %2130 = OpAccessChain %645 %88 
                                 i32 %2131 = OpLoad %2130 
                                 u32 %2132 = OpBitcast %2131 
                                 u32 %2133 = OpBitwiseOr %2129 %2132 
                                 i32 %2134 = OpBitcast %2133 
                        Private i32* %2135 = OpAccessChain %645 %88 
                                               OpStore %2135 %2134 
                        Private f32* %2136 = OpAccessChain %100 %88 
                                 f32 %2137 = OpLoad %2136 
                                 f32 %2138 = OpFMul %2137 %276 
                        Private f32* %2139 = OpAccessChain %483 %88 
                                 f32 %2140 = OpLoad %2139 
                                 f32 %2141 = OpFAdd %2138 %2140 
                                               OpStore %622 %2141 
                        Private i32* %2142 = OpAccessChain %583 %67 
                                 i32 %2143 = OpLoad %2142 
                                bool %2144 = OpINotEqual %2143 %32 
                                               OpSelectionMerge %2147 None 
                                               OpBranchConditional %2144 %2146 %2150 
                                     %2146 = OpLabel 
                        Private f32* %2148 = OpAccessChain %483 %88 
                                 f32 %2149 = OpLoad %2148 
                                               OpStore %2145 %2149 
                                               OpBranch %2147 
                                     %2150 = OpLabel 
                                 f32 %2151 = OpLoad %622 
                                               OpStore %2145 %2151 
                                               OpBranch %2147 
                                     %2147 = OpLabel 
                                 f32 %2152 = OpLoad %2145 
                        Private f32* %2153 = OpAccessChain %483 %88 
                                               OpStore %2153 %2152 
                        Private f32* %2154 = OpAccessChain %100 %67 
                                 f32 %2155 = OpLoad %2154 
                                 f32 %2156 = OpFMul %2155 %276 
                        Private f32* %2157 = OpAccessChain %483 %641 
                                 f32 %2158 = OpLoad %2157 
                                 f32 %2159 = OpFAdd %2156 %2158 
                                               OpStore %622 %2159 
                        Private i32* %2160 = OpAccessChain %583 %67 
                                 i32 %2161 = OpLoad %2160 
                                bool %2162 = OpINotEqual %2161 %32 
                                               OpSelectionMerge %2165 None 
                                               OpBranchConditional %2162 %2164 %2168 
                                     %2164 = OpLabel 
                        Private f32* %2166 = OpAccessChain %483 %641 
                                 f32 %2167 = OpLoad %2166 
                                               OpStore %2163 %2167 
                                               OpBranch %2165 
                                     %2168 = OpLabel 
                                 f32 %2169 = OpLoad %622 
                                               OpStore %2163 %2169 
                                               OpBranch %2165 
                                     %2165 = OpLabel 
                                 f32 %2170 = OpLoad %2163 
                        Private f32* %2171 = OpAccessChain %483 %641 
                                               OpStore %2171 %2170 
                        Private i32* %2172 = OpAccessChain %645 %88 
                                 i32 %2173 = OpLoad %2172 
                                bool %2174 = OpINotEqual %2173 %32 
                                               OpSelectionMerge %2176 None 
                                               OpBranchConditional %2174 %2175 %2176 
                                     %2175 = OpLabel 
                        Private i32* %2177 = OpAccessChain %583 %88 
                                 i32 %2178 = OpLoad %2177 
                                bool %2179 = OpIEqual %2178 %32 
                                               OpSelectionMerge %2181 None 
                                               OpBranchConditional %2179 %2180 %2181 
                                     %2180 = OpLabel 
                               f32_3 %2182 = OpLoad %237 
                               f32_2 %2183 = OpVectorShuffle %2182 %2182 0 2 
                               f32_3 %2184 = OpLoad %249 
                               f32_3 %2185 = OpVectorShuffle %2184 %2183 3 1 4 
                                               OpStore %249 %2185 
                               f32_3 %2186 = OpLoad %249 
                               f32_2 %2187 = OpVectorShuffle %2186 %2186 0 2 
                               f32_2 %2188 = OpCompositeConstruct %18 %18 
                               f32_2 %2189 = OpCompositeConstruct %19 %19 
                               f32_2 %2190 = OpExtInst %1 43 %2187 %2188 %2189 
                               f32_3 %2191 = OpLoad %249 
                               f32_3 %2192 = OpVectorShuffle %2191 %2190 3 1 4 
                                               OpStore %249 %2192 
                               f32_3 %2193 = OpLoad %249 
                               f32_2 %2194 = OpVectorShuffle %2193 %2193 0 2 
                        Uniform f32* %2195 = OpAccessChain %30 %32 
                                 f32 %2196 = OpLoad %2195 
                               f32_2 %2197 = OpCompositeConstruct %2196 %2196 
                               f32_2 %2198 = OpFMul %2194 %2197 
                               f32_3 %2199 = OpLoad %249 
                               f32_3 %2200 = OpVectorShuffle %2199 %2198 3 1 4 
                                               OpStore %249 %2200 
                 read_only Texture2D %2201 = OpLoad %44 
                             sampler %2202 = OpLoad %48 
          read_only Texture2DSampled %2203 = OpSampledImage %2201 %2202 
                               f32_3 %2204 = OpLoad %249 
                               f32_2 %2205 = OpVectorShuffle %2204 %2204 0 2 
                               f32_4 %2206 = OpImageSampleExplicitLod %2203 %2205 Lod %27 
                                 f32 %2207 = OpCompositeExtract %2206 1 
                        Private f32* %2208 = OpAccessChain %119 %88 
                                               OpStore %2208 %2207 
                                               OpBranch %2181 
                                     %2181 = OpLabel 
                        Private i32* %2209 = OpAccessChain %583 %67 
                                 i32 %2210 = OpLoad %2209 
                                bool %2211 = OpIEqual %2210 %32 
                                               OpSelectionMerge %2213 None 
                                               OpBranchConditional %2211 %2212 %2213 
                                     %2212 = OpLabel 
                               f32_3 %2214 = OpLoad %483 
                               f32_2 %2215 = OpVectorShuffle %2214 %2214 0 2 
                               f32_3 %2216 = OpLoad %249 
                               f32_3 %2217 = OpVectorShuffle %2216 %2215 3 1 4 
                                               OpStore %249 %2217 
                               f32_3 %2218 = OpLoad %249 
                               f32_2 %2219 = OpVectorShuffle %2218 %2218 0 2 
                               f32_2 %2220 = OpCompositeConstruct %18 %18 
                               f32_2 %2221 = OpCompositeConstruct %19 %19 
                               f32_2 %2222 = OpExtInst %1 43 %2219 %2220 %2221 
                               f32_3 %2223 = OpLoad %249 
                               f32_3 %2224 = OpVectorShuffle %2223 %2222 3 1 4 
                                               OpStore %249 %2224 
                               f32_3 %2225 = OpLoad %249 
                               f32_2 %2226 = OpVectorShuffle %2225 %2225 0 2 
                        Uniform f32* %2227 = OpAccessChain %30 %32 
                                 f32 %2228 = OpLoad %2227 
                               f32_2 %2229 = OpCompositeConstruct %2228 %2228 
                               f32_2 %2230 = OpFMul %2226 %2229 
                               f32_3 %2231 = OpLoad %249 
                               f32_3 %2232 = OpVectorShuffle %2231 %2230 3 1 4 
                                               OpStore %249 %2232 
                 read_only Texture2D %2233 = OpLoad %44 
                             sampler %2234 = OpLoad %48 
          read_only Texture2DSampled %2235 = OpSampledImage %2233 %2234 
                               f32_3 %2236 = OpLoad %249 
                               f32_2 %2237 = OpVectorShuffle %2236 %2236 0 2 
                               f32_4 %2238 = OpImageSampleExplicitLod %2235 %2237 Lod %27 
                                 f32 %2239 = OpCompositeExtract %2238 1 
                        Private f32* %2240 = OpAccessChain %119 %67 
                                               OpStore %2240 %2239 
                                               OpBranch %2213 
                                     %2213 = OpLabel 
                                 f32 %2241 = OpLoad %56 
                                 f32 %2242 = OpFNegate %2241 
                                 f32 %2243 = OpFMul %2242 %447 
                        Private f32* %2244 = OpAccessChain %119 %88 
                                 f32 %2245 = OpLoad %2244 
                                 f32 %2246 = OpFAdd %2243 %2245 
                        Private f32* %2247 = OpAccessChain %249 %88 
                                               OpStore %2247 %2246 
                        Private i32* %2248 = OpAccessChain %583 %88 
                                 i32 %2249 = OpLoad %2248 
                                bool %2250 = OpINotEqual %2249 %32 
                                               OpSelectionMerge %2253 None 
                                               OpBranchConditional %2250 %2252 %2256 
                                     %2252 = OpLabel 
                        Private f32* %2254 = OpAccessChain %119 %88 
                                 f32 %2255 = OpLoad %2254 
                                               OpStore %2251 %2255 
                                               OpBranch %2253 
                                     %2256 = OpLabel 
                        Private f32* %2257 = OpAccessChain %249 %88 
                                 f32 %2258 = OpLoad %2257 
                                               OpStore %2251 %2258 
                                               OpBranch %2253 
                                     %2253 = OpLabel 
                                 f32 %2259 = OpLoad %2251 
                        Private f32* %2260 = OpAccessChain %119 %88 
                                               OpStore %2260 %2259 
                                 f32 %2261 = OpLoad %56 
                                 f32 %2262 = OpFNegate %2261 
                                 f32 %2263 = OpFMul %2262 %447 
                        Private f32* %2264 = OpAccessChain %119 %67 
                                 f32 %2265 = OpLoad %2264 
                                 f32 %2266 = OpFAdd %2263 %2265 
                        Private f32* %2267 = OpAccessChain %207 %88 
                                               OpStore %2267 %2266 
                        Private i32* %2268 = OpAccessChain %583 %67 
                                 i32 %2269 = OpLoad %2268 
                                bool %2270 = OpINotEqual %2269 %32 
                                               OpSelectionMerge %2273 None 
                                               OpBranchConditional %2270 %2272 %2276 
                                     %2272 = OpLabel 
                        Private f32* %2274 = OpAccessChain %119 %67 
                                 f32 %2275 = OpLoad %2274 
                                               OpStore %2271 %2275 
                                               OpBranch %2273 
                                     %2276 = OpLabel 
                        Private f32* %2277 = OpAccessChain %207 %88 
                                 f32 %2278 = OpLoad %2277 
                                               OpStore %2271 %2278 
                                               OpBranch %2273 
                                     %2273 = OpLabel 
                                 f32 %2279 = OpLoad %2271 
                        Private f32* %2280 = OpAccessChain %119 %67 
                                               OpStore %2280 %2279 
                               f32_3 %2281 = OpLoad %119 
                               f32_4 %2282 = OpVectorShuffle %2281 %2281 0 1 0 1 
                               f32_4 %2283 = OpExtInst %1 4 %2282 
                               f32_3 %2284 = OpLoad %78 
                               f32_4 %2285 = OpVectorShuffle %2284 %2284 0 0 0 0 
                              bool_4 %2286 = OpFOrdGreaterThanEqual %2283 %2285 
                              bool_2 %2287 = OpVectorShuffle %2286 %2286 0 1 
                               u32_2 %2288 = OpSelect %2287 %595 %594 
                               u32_2 %2289 = OpCompositeConstruct %566 %566 
                               u32_2 %2290 = OpIMul %2288 %2289 
                               i32_2 %2291 = OpBitcast %2290 
                                               OpStore %583 %2291 
                        Private f32* %2292 = OpAccessChain %100 %88 
                                 f32 %2293 = OpLoad %2292 
                                 f32 %2294 = OpFNegate %2293 
                                 f32 %2296 = OpFMul %2294 %2295 
                        Private f32* %2297 = OpAccessChain %237 %88 
                                 f32 %2298 = OpLoad %2297 
                                 f32 %2299 = OpFAdd %2296 %2298 
                        Private f32* %2300 = OpAccessChain %249 %88 
                                               OpStore %2300 %2299 
                        Private i32* %2301 = OpAccessChain %583 %88 
                                 i32 %2302 = OpLoad %2301 
                                bool %2303 = OpINotEqual %2302 %32 
                                               OpSelectionMerge %2306 None 
                                               OpBranchConditional %2303 %2305 %2309 
                                     %2305 = OpLabel 
                        Private f32* %2307 = OpAccessChain %237 %88 
                                 f32 %2308 = OpLoad %2307 
                                               OpStore %2304 %2308 
                                               OpBranch %2306 
                                     %2309 = OpLabel 
                        Private f32* %2310 = OpAccessChain %249 %88 
                                 f32 %2311 = OpLoad %2310 
                                               OpStore %2304 %2311 
                                               OpBranch %2306 
                                     %2306 = OpLabel 
                                 f32 %2312 = OpLoad %2304 
                        Private f32* %2313 = OpAccessChain %237 %88 
                                               OpStore %2313 %2312 
                        Private f32* %2314 = OpAccessChain %100 %67 
                                 f32 %2315 = OpLoad %2314 
                                 f32 %2316 = OpFNegate %2315 
                                 f32 %2317 = OpFMul %2316 %2295 
                        Private f32* %2318 = OpAccessChain %237 %641 
                                 f32 %2319 = OpLoad %2318 
                                 f32 %2320 = OpFAdd %2317 %2319 
                        Private f32* %2321 = OpAccessChain %249 %88 
                                               OpStore %2321 %2320 
                        Private i32* %2322 = OpAccessChain %583 %88 
                                 i32 %2323 = OpLoad %2322 
                                bool %2324 = OpINotEqual %2323 %32 
                                               OpSelectionMerge %2327 None 
                                               OpBranchConditional %2324 %2326 %2330 
                                     %2326 = OpLabel 
                        Private f32* %2328 = OpAccessChain %237 %641 
                                 f32 %2329 = OpLoad %2328 
                                               OpStore %2325 %2329 
                                               OpBranch %2327 
                                     %2330 = OpLabel 
                        Private f32* %2331 = OpAccessChain %249 %88 
                                 f32 %2332 = OpLoad %2331 
                                               OpStore %2325 %2332 
                                               OpBranch %2327 
                                     %2327 = OpLabel 
                                 f32 %2333 = OpLoad %2325 
                        Private f32* %2334 = OpAccessChain %237 %641 
                                               OpStore %2334 %2333 
                               i32_2 %2335 = OpLoad %583 
                               i32_2 %2336 = OpNot %2335 
                               i32_3 %2337 = OpLoad %645 
                               i32_3 %2338 = OpVectorShuffle %2337 %2336 3 1 4 
                                               OpStore %645 %2338 
                        Private i32* %2339 = OpAccessChain %645 %641 
                                 i32 %2340 = OpLoad %2339 
                                 u32 %2341 = OpBitcast %2340 
                        Private i32* %2342 = OpAccessChain %645 %88 
                                 i32 %2343 = OpLoad %2342 
                                 u32 %2344 = OpBitcast %2343 
                                 u32 %2345 = OpBitwiseOr %2341 %2344 
                                 i32 %2346 = OpBitcast %2345 
                        Private i32* %2347 = OpAccessChain %645 %88 
                                               OpStore %2347 %2346 
                        Private f32* %2348 = OpAccessChain %100 %88 
                                 f32 %2349 = OpLoad %2348 
                                 f32 %2350 = OpFMul %2349 %2295 
                        Private f32* %2351 = OpAccessChain %483 %88 
                                 f32 %2352 = OpLoad %2351 
                                 f32 %2353 = OpFAdd %2350 %2352 
                                               OpStore %622 %2353 
                        Private i32* %2354 = OpAccessChain %583 %67 
                                 i32 %2355 = OpLoad %2354 
                                bool %2356 = OpINotEqual %2355 %32 
                                               OpSelectionMerge %2359 None 
                                               OpBranchConditional %2356 %2358 %2362 
                                     %2358 = OpLabel 
                        Private f32* %2360 = OpAccessChain %483 %88 
                                 f32 %2361 = OpLoad %2360 
                                               OpStore %2357 %2361 
                                               OpBranch %2359 
                                     %2362 = OpLabel 
                                 f32 %2363 = OpLoad %622 
                                               OpStore %2357 %2363 
                                               OpBranch %2359 
                                     %2359 = OpLabel 
                                 f32 %2364 = OpLoad %2357 
                        Private f32* %2365 = OpAccessChain %483 %88 
                                               OpStore %2365 %2364 
                        Private f32* %2366 = OpAccessChain %100 %67 
                                 f32 %2367 = OpLoad %2366 
                                 f32 %2368 = OpFMul %2367 %2295 
                        Private f32* %2369 = OpAccessChain %483 %641 
                                 f32 %2370 = OpLoad %2369 
                                 f32 %2371 = OpFAdd %2368 %2370 
                                               OpStore %622 %2371 
                        Private i32* %2372 = OpAccessChain %583 %67 
                                 i32 %2373 = OpLoad %2372 
                                bool %2374 = OpINotEqual %2373 %32 
                                               OpSelectionMerge %2377 None 
                                               OpBranchConditional %2374 %2376 %2380 
                                     %2376 = OpLabel 
                        Private f32* %2378 = OpAccessChain %483 %641 
                                 f32 %2379 = OpLoad %2378 
                                               OpStore %2375 %2379 
                                               OpBranch %2377 
                                     %2380 = OpLabel 
                                 f32 %2381 = OpLoad %622 
                                               OpStore %2375 %2381 
                                               OpBranch %2377 
                                     %2377 = OpLabel 
                                 f32 %2382 = OpLoad %2375 
                        Private f32* %2383 = OpAccessChain %483 %641 
                                               OpStore %2383 %2382 
                        Private i32* %2384 = OpAccessChain %645 %88 
                                 i32 %2385 = OpLoad %2384 
                                bool %2386 = OpINotEqual %2385 %32 
                                               OpSelectionMerge %2388 None 
                                               OpBranchConditional %2386 %2387 %2388 
                                     %2387 = OpLabel 
                        Private i32* %2389 = OpAccessChain %583 %88 
                                 i32 %2390 = OpLoad %2389 
                                bool %2391 = OpIEqual %2390 %32 
                                               OpSelectionMerge %2393 None 
                                               OpBranchConditional %2391 %2392 %2393 
                                     %2392 = OpLabel 
                               f32_3 %2394 = OpLoad %237 
                               f32_2 %2395 = OpVectorShuffle %2394 %2394 0 2 
                               f32_3 %2396 = OpLoad %249 
                               f32_3 %2397 = OpVectorShuffle %2396 %2395 3 1 4 
                                               OpStore %249 %2397 
                               f32_3 %2398 = OpLoad %249 
                               f32_2 %2399 = OpVectorShuffle %2398 %2398 0 2 
                               f32_2 %2400 = OpCompositeConstruct %18 %18 
                               f32_2 %2401 = OpCompositeConstruct %19 %19 
                               f32_2 %2402 = OpExtInst %1 43 %2399 %2400 %2401 
                               f32_3 %2403 = OpLoad %249 
                               f32_3 %2404 = OpVectorShuffle %2403 %2402 3 1 4 
                                               OpStore %249 %2404 
                               f32_3 %2405 = OpLoad %249 
                               f32_2 %2406 = OpVectorShuffle %2405 %2405 0 2 
                        Uniform f32* %2407 = OpAccessChain %30 %32 
                                 f32 %2408 = OpLoad %2407 
                               f32_2 %2409 = OpCompositeConstruct %2408 %2408 
                               f32_2 %2410 = OpFMul %2406 %2409 
                               f32_3 %2411 = OpLoad %249 
                               f32_3 %2412 = OpVectorShuffle %2411 %2410 3 1 4 
                                               OpStore %249 %2412 
                 read_only Texture2D %2413 = OpLoad %44 
                             sampler %2414 = OpLoad %48 
          read_only Texture2DSampled %2415 = OpSampledImage %2413 %2414 
                               f32_3 %2416 = OpLoad %249 
                               f32_2 %2417 = OpVectorShuffle %2416 %2416 0 2 
                               f32_4 %2418 = OpImageSampleExplicitLod %2415 %2417 Lod %27 
                                 f32 %2419 = OpCompositeExtract %2418 1 
                        Private f32* %2420 = OpAccessChain %119 %88 
                                               OpStore %2420 %2419 
                                               OpBranch %2393 
                                     %2393 = OpLabel 
                        Private i32* %2421 = OpAccessChain %583 %67 
                                 i32 %2422 = OpLoad %2421 
                                bool %2423 = OpIEqual %2422 %32 
                                               OpSelectionMerge %2425 None 
                                               OpBranchConditional %2423 %2424 %2425 
                                     %2424 = OpLabel 
                               f32_3 %2426 = OpLoad %483 
                               f32_2 %2427 = OpVectorShuffle %2426 %2426 0 2 
                               f32_3 %2428 = OpLoad %249 
                               f32_3 %2429 = OpVectorShuffle %2428 %2427 3 1 4 
                                               OpStore %249 %2429 
                               f32_3 %2430 = OpLoad %249 
                               f32_2 %2431 = OpVectorShuffle %2430 %2430 0 2 
                               f32_2 %2432 = OpCompositeConstruct %18 %18 
                               f32_2 %2433 = OpCompositeConstruct %19 %19 
                               f32_2 %2434 = OpExtInst %1 43 %2431 %2432 %2433 
                               f32_3 %2435 = OpLoad %249 
                               f32_3 %2436 = OpVectorShuffle %2435 %2434 3 1 4 
                                               OpStore %249 %2436 
                               f32_3 %2437 = OpLoad %249 
                               f32_2 %2438 = OpVectorShuffle %2437 %2437 0 2 
                        Uniform f32* %2439 = OpAccessChain %30 %32 
                                 f32 %2440 = OpLoad %2439 
                               f32_2 %2441 = OpCompositeConstruct %2440 %2440 
                               f32_2 %2442 = OpFMul %2438 %2441 
                               f32_3 %2443 = OpLoad %249 
                               f32_3 %2444 = OpVectorShuffle %2443 %2442 3 1 4 
                                               OpStore %249 %2444 
                 read_only Texture2D %2445 = OpLoad %44 
                             sampler %2446 = OpLoad %48 
          read_only Texture2DSampled %2447 = OpSampledImage %2445 %2446 
                               f32_3 %2448 = OpLoad %249 
                               f32_2 %2449 = OpVectorShuffle %2448 %2448 0 2 
                               f32_4 %2450 = OpImageSampleExplicitLod %2447 %2449 Lod %27 
                                 f32 %2451 = OpCompositeExtract %2450 1 
                        Private f32* %2452 = OpAccessChain %119 %67 
                                               OpStore %2452 %2451 
                                               OpBranch %2425 
                                     %2425 = OpLabel 
                                 f32 %2453 = OpLoad %56 
                                 f32 %2454 = OpFNegate %2453 
                                 f32 %2455 = OpFMul %2454 %447 
                        Private f32* %2456 = OpAccessChain %119 %88 
                                 f32 %2457 = OpLoad %2456 
                                 f32 %2458 = OpFAdd %2455 %2457 
                        Private f32* %2459 = OpAccessChain %249 %88 
                                               OpStore %2459 %2458 
                        Private i32* %2460 = OpAccessChain %583 %88 
                                 i32 %2461 = OpLoad %2460 
                                bool %2462 = OpINotEqual %2461 %32 
                                               OpSelectionMerge %2465 None 
                                               OpBranchConditional %2462 %2464 %2468 
                                     %2464 = OpLabel 
                        Private f32* %2466 = OpAccessChain %119 %88 
                                 f32 %2467 = OpLoad %2466 
                                               OpStore %2463 %2467 
                                               OpBranch %2465 
                                     %2468 = OpLabel 
                        Private f32* %2469 = OpAccessChain %249 %88 
                                 f32 %2470 = OpLoad %2469 
                                               OpStore %2463 %2470 
                                               OpBranch %2465 
                                     %2465 = OpLabel 
                                 f32 %2471 = OpLoad %2463 
                        Private f32* %2472 = OpAccessChain %119 %88 
                                               OpStore %2472 %2471 
                                 f32 %2473 = OpLoad %56 
                                 f32 %2474 = OpFNegate %2473 
                                 f32 %2475 = OpFMul %2474 %447 
                        Private f32* %2476 = OpAccessChain %119 %67 
                                 f32 %2477 = OpLoad %2476 
                                 f32 %2478 = OpFAdd %2475 %2477 
                                               OpStore %56 %2478 
                        Private i32* %2479 = OpAccessChain %583 %67 
                                 i32 %2480 = OpLoad %2479 
                                bool %2481 = OpINotEqual %2480 %32 
                                               OpSelectionMerge %2484 None 
                                               OpBranchConditional %2481 %2483 %2487 
                                     %2483 = OpLabel 
                        Private f32* %2485 = OpAccessChain %119 %67 
                                 f32 %2486 = OpLoad %2485 
                                               OpStore %2482 %2486 
                                               OpBranch %2484 
                                     %2487 = OpLabel 
                                 f32 %2488 = OpLoad %56 
                                               OpStore %2482 %2488 
                                               OpBranch %2484 
                                     %2484 = OpLabel 
                                 f32 %2489 = OpLoad %2482 
                        Private f32* %2490 = OpAccessChain %119 %67 
                                               OpStore %2490 %2489 
                               f32_3 %2493 = OpLoad %119 
                               f32_4 %2494 = OpVectorShuffle %2493 %2493 0 1 0 1 
                               f32_4 %2495 = OpExtInst %1 4 %2494 
                               f32_3 %2496 = OpLoad %78 
                               f32_4 %2497 = OpVectorShuffle %2496 %2496 0 0 0 0 
                              bool_4 %2498 = OpFOrdGreaterThanEqual %2495 %2497 
                              bool_2 %2499 = OpVectorShuffle %2498 %2498 0 1 
                                               OpStore %2492 %2499 
                        Private f32* %2500 = OpAccessChain %100 %88 
                                 f32 %2501 = OpLoad %2500 
                                 f32 %2502 = OpFNegate %2501 
                                 f32 %2504 = OpFMul %2502 %2503 
                        Private f32* %2505 = OpAccessChain %237 %88 
                                 f32 %2506 = OpLoad %2505 
                                 f32 %2507 = OpFAdd %2504 %2506 
                                               OpStore %56 %2507 
                       Private bool* %2508 = OpAccessChain %2492 %88 
                                bool %2509 = OpLoad %2508 
                                               OpSelectionMerge %2512 None 
                                               OpBranchConditional %2509 %2511 %2515 
                                     %2511 = OpLabel 
                        Private f32* %2513 = OpAccessChain %237 %88 
                                 f32 %2514 = OpLoad %2513 
                                               OpStore %2510 %2514 
                                               OpBranch %2512 
                                     %2515 = OpLabel 
                                 f32 %2516 = OpLoad %56 
                                               OpStore %2510 %2516 
                                               OpBranch %2512 
                                     %2512 = OpLabel 
                                 f32 %2517 = OpLoad %2510 
                        Private f32* %2518 = OpAccessChain %237 %88 
                                               OpStore %2518 %2517 
                        Private f32* %2519 = OpAccessChain %100 %67 
                                 f32 %2520 = OpLoad %2519 
                                 f32 %2521 = OpFNegate %2520 
                                 f32 %2522 = OpFMul %2521 %2503 
                        Private f32* %2523 = OpAccessChain %237 %641 
                                 f32 %2524 = OpLoad %2523 
                                 f32 %2525 = OpFAdd %2522 %2524 
                                               OpStore %56 %2525 
                       Private bool* %2526 = OpAccessChain %2492 %88 
                                bool %2527 = OpLoad %2526 
                                               OpSelectionMerge %2530 None 
                                               OpBranchConditional %2527 %2529 %2533 
                                     %2529 = OpLabel 
                        Private f32* %2531 = OpAccessChain %237 %641 
                                 f32 %2532 = OpLoad %2531 
                                               OpStore %2528 %2532 
                                               OpBranch %2530 
                                     %2533 = OpLabel 
                                 f32 %2534 = OpLoad %56 
                                               OpStore %2528 %2534 
                                               OpBranch %2530 
                                     %2530 = OpLabel 
                                 f32 %2535 = OpLoad %2528 
                        Private f32* %2536 = OpAccessChain %237 %641 
                                               OpStore %2536 %2535 
                        Private f32* %2537 = OpAccessChain %100 %88 
                                 f32 %2538 = OpLoad %2537 
                                 f32 %2539 = OpFMul %2538 %2503 
                        Private f32* %2540 = OpAccessChain %483 %88 
                                 f32 %2541 = OpLoad %2540 
                                 f32 %2542 = OpFAdd %2539 %2541 
                                               OpStore %56 %2542 
                       Private bool* %2543 = OpAccessChain %2492 %67 
                                bool %2544 = OpLoad %2543 
                                               OpSelectionMerge %2547 None 
                                               OpBranchConditional %2544 %2546 %2550 
                                     %2546 = OpLabel 
                        Private f32* %2548 = OpAccessChain %483 %88 
                                 f32 %2549 = OpLoad %2548 
                                               OpStore %2545 %2549 
                                               OpBranch %2547 
                                     %2550 = OpLabel 
                                 f32 %2551 = OpLoad %56 
                                               OpStore %2545 %2551 
                                               OpBranch %2547 
                                     %2547 = OpLabel 
                                 f32 %2552 = OpLoad %2545 
                        Private f32* %2553 = OpAccessChain %483 %88 
                                               OpStore %2553 %2552 
                        Private f32* %2554 = OpAccessChain %100 %67 
                                 f32 %2555 = OpLoad %2554 
                                 f32 %2556 = OpFMul %2555 %2503 
                        Private f32* %2557 = OpAccessChain %483 %641 
                                 f32 %2558 = OpLoad %2557 
                                 f32 %2559 = OpFAdd %2556 %2558 
                                               OpStore %56 %2559 
                       Private bool* %2560 = OpAccessChain %2492 %67 
                                bool %2561 = OpLoad %2560 
                                               OpSelectionMerge %2564 None 
                                               OpBranchConditional %2561 %2563 %2567 
                                     %2563 = OpLabel 
                        Private f32* %2565 = OpAccessChain %483 %641 
                                 f32 %2566 = OpLoad %2565 
                                               OpStore %2562 %2566 
                                               OpBranch %2564 
                                     %2567 = OpLabel 
                                 f32 %2568 = OpLoad %56 
                                               OpStore %2562 %2568 
                                               OpBranch %2564 
                                     %2564 = OpLabel 
                                 f32 %2569 = OpLoad %2562 
                        Private f32* %2570 = OpAccessChain %483 %641 
                                               OpStore %2570 %2569 
                                               OpBranch %2388 
                                     %2388 = OpLabel 
                                               OpBranch %2176 
                                     %2176 = OpLabel 
                                               OpBranch %1965 
                                     %1965 = OpLabel 
                                               OpBranch %1754 
                                     %1754 = OpLabel 
                                               OpBranch %1543 
                                     %1543 = OpLabel 
                                               OpBranch %1332 
                                     %1332 = OpLabel 
                                               OpBranch %1121 
                                     %1121 = OpLabel 
                                               OpBranch %910 
                                      %910 = OpLabel 
                                               OpBranch %699 
                                      %699 = OpLabel 
                        Private f32* %2571 = OpAccessChain %237 %88 
                                 f32 %2572 = OpLoad %2571 
                                 f32 %2573 = OpFNegate %2572 
                          Input f32* %2574 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %2575 = OpLoad %2574 
                                 f32 %2576 = OpFAdd %2573 %2575 
                                               OpStore %56 %2576 
                        Private f32* %2577 = OpAccessChain %237 %641 
                                 f32 %2578 = OpLoad %2577 
                                 f32 %2579 = OpFNegate %2578 
                          Input f32* %2580 = OpAccessChain vs_TEXCOORD0 %67 
                                 f32 %2581 = OpLoad %2580 
                                 f32 %2582 = OpFAdd %2579 %2581 
                        Private f32* %2583 = OpAccessChain %100 %88 
                                               OpStore %2583 %2582 
                       Private bool* %2584 = OpAccessChain %323 %88 
                                bool %2585 = OpLoad %2584 
                                               OpSelectionMerge %2588 None 
                                               OpBranchConditional %2585 %2587 %2590 
                                     %2587 = OpLabel 
                                 f32 %2589 = OpLoad %56 
                                               OpStore %2586 %2589 
                                               OpBranch %2588 
                                     %2590 = OpLabel 
                        Private f32* %2591 = OpAccessChain %100 %88 
                                 f32 %2592 = OpLoad %2591 
                                               OpStore %2586 %2592 
                                               OpBranch %2588 
                                     %2588 = OpLabel 
                                 f32 %2593 = OpLoad %2586 
                                               OpStore %56 %2593 
                               f32_3 %2594 = OpLoad %483 
                               f32_2 %2595 = OpVectorShuffle %2594 %2594 0 2 
                               f32_2 %2596 = OpLoad vs_TEXCOORD0 
                               f32_2 %2597 = OpFNegate %2596 
                               f32_2 %2598 = OpFAdd %2595 %2597 
                               f32_3 %2599 = OpLoad %78 
                               f32_3 %2600 = OpVectorShuffle %2599 %2598 3 1 4 
                                               OpStore %78 %2600 
                       Private bool* %2601 = OpAccessChain %323 %88 
                                bool %2602 = OpLoad %2601 
                                               OpSelectionMerge %2605 None 
                                               OpBranchConditional %2602 %2604 %2608 
                                     %2604 = OpLabel 
                        Private f32* %2606 = OpAccessChain %78 %88 
                                 f32 %2607 = OpLoad %2606 
                                               OpStore %2603 %2607 
                                               OpBranch %2605 
                                     %2608 = OpLabel 
                        Private f32* %2609 = OpAccessChain %78 %641 
                                 f32 %2610 = OpLoad %2609 
                                               OpStore %2603 %2610 
                                               OpBranch %2605 
                                     %2605 = OpLabel 
                                 f32 %2611 = OpLoad %2603 
                        Private f32* %2612 = OpAccessChain %78 %88 
                                               OpStore %2612 %2611 
                               f32_3 %2614 = OpLoad %119 
                               f32_4 %2615 = OpVectorShuffle %2614 %2614 0 1 0 1 
                              bool_4 %2617 = OpFOrdLessThan %2615 %2616 
                              bool_2 %2618 = OpVectorShuffle %2617 %2617 0 1 
                               u32_2 %2619 = OpSelect %2618 %595 %594 
                               u32_2 %2620 = OpCompositeConstruct %566 %566 
                               u32_2 %2621 = OpIMul %2619 %2620 
                               i32_2 %2622 = OpBitcast %2621 
                                               OpStore %2613 %2622 
                                 f32 %2623 = OpLoad %56 
                        Private f32* %2624 = OpAccessChain %78 %88 
                                 f32 %2625 = OpLoad %2624 
                                 f32 %2626 = OpFAdd %2623 %2625 
                        Private f32* %2627 = OpAccessChain %119 %88 
                                               OpStore %2627 %2626 
                                 i32 %2629 = OpLoad %563 
                               i32_4 %2631 = OpCompositeConstruct %2629 %2629 %2629 %2629 
                               i32_2 %2632 = OpLoad %2613 
                               i32_4 %2633 = OpVectorShuffle %2632 %2632 0 1 0 0 
                              bool_4 %2634 = OpINotEqual %2631 %2633 
                              bool_2 %2635 = OpVectorShuffle %2634 %2634 0 1 
                                               OpStore %2628 %2635 
                        Private f32* %2636 = OpAccessChain %119 %88 
                                 f32 %2637 = OpLoad %2636 
                                 f32 %2638 = OpFDiv %19 %2637 
                                               OpStore %106 %2638 
                                 f32 %2639 = OpLoad %56 
                        Private f32* %2640 = OpAccessChain %78 %88 
                                 f32 %2641 = OpLoad %2640 
                                bool %2642 = OpFOrdLessThan %2639 %2641 
                                               OpStore %394 %2642 
                                 f32 %2643 = OpLoad %56 
                        Private f32* %2644 = OpAccessChain %78 %88 
                                 f32 %2645 = OpLoad %2644 
                                 f32 %2646 = OpExtInst %1 37 %2643 %2645 
                                               OpStore %56 %2646 
                                bool %2648 = OpLoad %394 
                                               OpSelectionMerge %2652 None 
                                               OpBranchConditional %2648 %2651 %2655 
                                     %2651 = OpLabel 
                       Private bool* %2653 = OpAccessChain %2628 %88 
                                bool %2654 = OpLoad %2653 
                                               OpStore %2650 %2654 
                                               OpBranch %2652 
                                     %2655 = OpLabel 
                       Private bool* %2656 = OpAccessChain %2628 %67 
                                bool %2657 = OpLoad %2656 
                                               OpStore %2650 %2657 
                                               OpBranch %2652 
                                     %2652 = OpLabel 
                                bool %2658 = OpLoad %2650 
                                               OpStore %2647 %2658 
                        Private f32* %2659 = OpAccessChain %201 %88 
                                 f32 %2660 = OpLoad %2659 
                        Private f32* %2661 = OpAccessChain %201 %88 
                                 f32 %2662 = OpLoad %2661 
                                 f32 %2663 = OpFMul %2660 %2662 
                        Private f32* %2664 = OpAccessChain %201 %88 
                                               OpStore %2664 %2663 
                                 f32 %2665 = OpLoad %56 
                                 f32 %2666 = OpLoad %106 
                                 f32 %2667 = OpFNegate %2666 
                                 f32 %2668 = OpFMul %2665 %2667 
                                 f32 %2669 = OpFAdd %2668 %447 
                                               OpStore %56 %2669 
                                bool %2670 = OpLoad %2647 
                                 f32 %2671 = OpLoad %56 
                                 f32 %2672 = OpSelect %2670 %2671 %18 
                                               OpStore %56 %2672 
                        Private f32* %2673 = OpAccessChain %201 %88 
                                 f32 %2674 = OpLoad %2673 
                                 f32 %2675 = OpLoad %56 
                                 f32 %2676 = OpExtInst %1 40 %2674 %2675 
                        Private f32* %2677 = OpAccessChain %201 %88 
                                               OpStore %2677 %2676 
                               f32_2 %2678 = OpLoad %201 
                               f32_2 %2679 = OpVectorShuffle %2678 %2678 0 0 
                                 f32 %2680 = OpLoad %69 
                               f32_2 %2681 = OpCompositeConstruct %2680 %2680 
                               f32_2 %2682 = OpFMul %2679 %2681 
                               f32_2 %2683 = OpLoad vs_TEXCOORD0 
                               f32_2 %2684 = OpFAdd %2682 %2683 
                                               OpStore %201 %2684 
                       Private bool* %2685 = OpAccessChain %323 %88 
                                bool %2686 = OpLoad %2685 
                                               OpSelectionMerge %2689 None 
                                               OpBranchConditional %2686 %2688 %2692 
                                     %2688 = OpLabel 
                          Input f32* %2690 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %2691 = OpLoad %2690 
                                               OpStore %2687 %2691 
                                               OpBranch %2689 
                                     %2692 = OpLabel 
                        Private f32* %2693 = OpAccessChain %201 %88 
                                 f32 %2694 = OpLoad %2693 
                                               OpStore %2687 %2694 
                                               OpBranch %2689 
                                     %2689 = OpLabel 
                                 f32 %2695 = OpLoad %2687 
                        Private f32* %2696 = OpAccessChain %78 %88 
                                               OpStore %2696 %2695 
                        Private f32* %2697 = OpAccessChain %78 %88 
                                 f32 %2698 = OpLoad %2697 
                                 f32 %2699 = OpExtInst %1 43 %2698 %18 %19 
                        Private f32* %2700 = OpAccessChain %78 %88 
                                               OpStore %2700 %2699 
                       Private bool* %2701 = OpAccessChain %323 %88 
                                bool %2702 = OpLoad %2701 
                                               OpSelectionMerge %2705 None 
                                               OpBranchConditional %2702 %2704 %2708 
                                     %2704 = OpLabel 
                        Private f32* %2706 = OpAccessChain %201 %67 
                                 f32 %2707 = OpLoad %2706 
                                               OpStore %2703 %2707 
                                               OpBranch %2705 
                                     %2708 = OpLabel 
                          Input f32* %2709 = OpAccessChain vs_TEXCOORD0 %67 
                                 f32 %2710 = OpLoad %2709 
                                               OpStore %2703 %2710 
                                               OpBranch %2705 
                                     %2705 = OpLabel 
                                 f32 %2711 = OpLoad %2703 
                        Private f32* %2712 = OpAccessChain %78 %67 
                                               OpStore %2712 %2711 
                        Private f32* %2713 = OpAccessChain %78 %67 
                                 f32 %2714 = OpLoad %2713 
                                 f32 %2715 = OpExtInst %1 43 %2714 %18 %19 
                        Private f32* %2716 = OpAccessChain %78 %67 
                                               OpStore %2716 %2715 
                               f32_3 %2717 = OpLoad %78 
                               f32_2 %2718 = OpVectorShuffle %2717 %2717 0 1 
                        Uniform f32* %2719 = OpAccessChain %30 %32 
                                 f32 %2720 = OpLoad %2719 
                               f32_2 %2721 = OpCompositeConstruct %2720 %2720 
                               f32_2 %2722 = OpFMul %2718 %2721 
                               f32_3 %2723 = OpLoad %9 
                               f32_3 %2724 = OpVectorShuffle %2723 %2722 3 4 2 
                                               OpStore %9 %2724 
                 read_only Texture2D %2725 = OpLoad %44 
                             sampler %2726 = OpLoad %48 
          read_only Texture2DSampled %2727 = OpSampledImage %2725 %2726 
                               f32_3 %2728 = OpLoad %9 
                               f32_2 %2729 = OpVectorShuffle %2728 %2728 0 1 
                               f32_4 %2730 = OpImageSampleExplicitLod %2727 %2729 Lod %27 
                               f32_3 %2731 = OpVectorShuffle %2730 %2730 0 1 2 
                                               OpStore %9 %2731 
                        Private f32* %2732 = OpAccessChain %41 %67 
                                 f32 %2733 = OpLoad %2732 
                        Private f32* %2735 = OpAccessChain %41 %2734 
                                               OpStore %2735 %2733 
                                               OpBranch %165 
                                     %2736 = OpLabel 
                               f32_4 %2737 = OpLoad %41 
                               f32_3 %2738 = OpVectorShuffle %2737 %2737 0 1 2 
                                               OpStore %9 %2738 
                                               OpBranch %165 
                                      %165 = OpLabel 
                               f32_2 %2739 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %2741 = OpAccessChain %30 %63 
                               f32_4 %2742 = OpLoad %2741 
                               f32_2 %2743 = OpVectorShuffle %2742 %2742 0 1 
                               f32_2 %2744 = OpFMul %2739 %2743 
                      Uniform f32_4* %2745 = OpAccessChain %30 %63 
                               f32_4 %2746 = OpLoad %2745 
                               f32_2 %2747 = OpVectorShuffle %2746 %2746 2 3 
                               f32_2 %2748 = OpFAdd %2744 %2747 
                               f32_3 %2749 = OpLoad %78 
                               f32_3 %2750 = OpVectorShuffle %2749 %2748 3 4 2 
                                               OpStore %78 %2750 
                 read_only Texture2D %2752 = OpLoad %2751 
                             sampler %2754 = OpLoad %2753 
          read_only Texture2DSampled %2755 = OpSampledImage %2752 %2754 
                               f32_3 %2756 = OpLoad %78 
                               f32_2 %2757 = OpVectorShuffle %2756 %2756 0 1 
                               f32_4 %2758 = OpImageSampleImplicitLod %2755 %2757 
                                 f32 %2759 = OpCompositeExtract %2758 3 
                                               OpStore %69 %2759 
                                 f32 %2760 = OpLoad %69 
                                 f32 %2761 = OpFMul %2760 %276 
                                 f32 %2763 = OpFAdd %2761 %2762 
                                               OpStore %69 %2763 
                                 f32 %2764 = OpLoad %69 
                                 f32 %2766 = OpFMul %2764 %2765 
                                 f32 %2767 = OpFAdd %2766 %447 
                        Private f32* %2768 = OpAccessChain %78 %88 
                                               OpStore %2768 %2767 
                        Private f32* %2769 = OpAccessChain %78 %88 
                                 f32 %2770 = OpLoad %2769 
                                 f32 %2771 = OpExtInst %1 43 %2770 %18 %19 
                        Private f32* %2772 = OpAccessChain %78 %88 
                                               OpStore %2772 %2771 
                        Private f32* %2773 = OpAccessChain %78 %88 
                                 f32 %2774 = OpLoad %2773 
                                 f32 %2775 = OpFMul %2774 %276 
                                 f32 %2776 = OpFAdd %2775 %2762 
                        Private f32* %2777 = OpAccessChain %78 %88 
                                               OpStore %2777 %2776 
                                 f32 %2778 = OpLoad %69 
                                 f32 %2779 = OpExtInst %1 4 %2778 
                                 f32 %2780 = OpFNegate %2779 
                                 f32 %2781 = OpFAdd %2780 %19 
                                               OpStore %69 %2781 
                                 f32 %2782 = OpLoad %69 
                                 f32 %2783 = OpExtInst %1 31 %2782 
                                               OpStore %69 %2783 
                                 f32 %2784 = OpLoad %69 
                                 f32 %2785 = OpFNegate %2784 
                                 f32 %2786 = OpFAdd %2785 %19 
                                               OpStore %69 %2786 
                                 f32 %2787 = OpLoad %69 
                        Private f32* %2788 = OpAccessChain %78 %88 
                                 f32 %2789 = OpLoad %2788 
                                 f32 %2790 = OpFMul %2787 %2789 
                                               OpStore %69 %2790 
                               f32_3 %2791 = OpLoad %9 
                               f32_3 %2794 = OpFMul %2791 %2793 
                                               OpStore %78 %2794 
                               f32_3 %2795 = OpLoad %9 
                               f32_3 %2796 = OpExtInst %1 4 %2795 
                               f32_3 %2799 = OpExtInst %1 40 %2796 %2798 
                                               OpStore %119 %2799 
                               f32_3 %2800 = OpLoad %119 
                               f32_3 %2801 = OpExtInst %1 30 %2800 
                                               OpStore %119 %2801 
                               f32_3 %2802 = OpLoad %119 
                               f32_3 %2805 = OpFMul %2802 %2804 
                                               OpStore %119 %2805 
                               f32_3 %2806 = OpLoad %119 
                               f32_3 %2807 = OpExtInst %1 29 %2806 
                                               OpStore %119 %2807 
                               f32_3 %2808 = OpLoad %119 
                               f32_3 %2811 = OpFMul %2808 %2810 
                               f32_3 %2814 = OpFAdd %2811 %2813 
                                               OpStore %119 %2814 
                               f32_3 %2817 = OpLoad %9 
                               f32_4 %2818 = OpVectorShuffle %2817 %2817 0 1 2 0 
                              bool_4 %2819 = OpFOrdGreaterThanEqual %2816 %2818 
                              bool_3 %2820 = OpVectorShuffle %2819 %2819 0 1 2 
                                               OpStore %323 %2820 
                       Private bool* %2821 = OpAccessChain %323 %88 
                                bool %2822 = OpLoad %2821 
                                               OpSelectionMerge %2825 None 
                                               OpBranchConditional %2822 %2824 %2828 
                                     %2824 = OpLabel 
                        Private f32* %2826 = OpAccessChain %78 %88 
                                 f32 %2827 = OpLoad %2826 
                                               OpStore %2823 %2827 
                                               OpBranch %2825 
                                     %2828 = OpLabel 
                        Private f32* %2829 = OpAccessChain %119 %88 
                                 f32 %2830 = OpLoad %2829 
                                               OpStore %2823 %2830 
                                               OpBranch %2825 
                                     %2825 = OpLabel 
                                 f32 %2831 = OpLoad %2823 
                        Private f32* %2832 = OpAccessChain %9 %88 
                                               OpStore %2832 %2831 
                       Private bool* %2833 = OpAccessChain %323 %67 
                                bool %2834 = OpLoad %2833 
                                               OpSelectionMerge %2837 None 
                                               OpBranchConditional %2834 %2836 %2840 
                                     %2836 = OpLabel 
                        Private f32* %2838 = OpAccessChain %78 %67 
                                 f32 %2839 = OpLoad %2838 
                                               OpStore %2835 %2839 
                                               OpBranch %2837 
                                     %2840 = OpLabel 
                        Private f32* %2841 = OpAccessChain %119 %67 
                                 f32 %2842 = OpLoad %2841 
                                               OpStore %2835 %2842 
                                               OpBranch %2837 
                                     %2837 = OpLabel 
                                 f32 %2843 = OpLoad %2835 
                        Private f32* %2844 = OpAccessChain %9 %67 
                                               OpStore %2844 %2843 
                       Private bool* %2845 = OpAccessChain %323 %641 
                                bool %2846 = OpLoad %2845 
                                               OpSelectionMerge %2849 None 
                                               OpBranchConditional %2846 %2848 %2852 
                                     %2848 = OpLabel 
                        Private f32* %2850 = OpAccessChain %78 %641 
                                 f32 %2851 = OpLoad %2850 
                                               OpStore %2847 %2851 
                                               OpBranch %2849 
                                     %2852 = OpLabel 
                        Private f32* %2853 = OpAccessChain %119 %641 
                                 f32 %2854 = OpLoad %2853 
                                               OpStore %2847 %2854 
                                               OpBranch %2849 
                                     %2849 = OpLabel 
                                 f32 %2855 = OpLoad %2847 
                        Private f32* %2856 = OpAccessChain %9 %641 
                                               OpStore %2856 %2855 
                                 f32 %2857 = OpLoad %69 
                               f32_3 %2858 = OpCompositeConstruct %2857 %2857 %2857 
                               f32_3 %2861 = OpFMul %2858 %2860 
                               f32_3 %2862 = OpLoad %9 
                               f32_3 %2863 = OpFAdd %2861 %2862 
                                               OpStore %9 %2863 
                               f32_3 %2864 = OpLoad %9 
                               f32_3 %2867 = OpFMul %2864 %2866 
                                               OpStore %78 %2867 
                               f32_3 %2868 = OpLoad %9 
                               f32_3 %2871 = OpFAdd %2868 %2870 
                                               OpStore %119 %2871 
                               f32_3 %2872 = OpLoad %119 
                               f32_3 %2875 = OpFMul %2872 %2874 
                                               OpStore %119 %2875 
                               f32_3 %2876 = OpLoad %119 
                               f32_3 %2877 = OpExtInst %1 4 %2876 
                               f32_3 %2878 = OpExtInst %1 40 %2877 %2798 
                                               OpStore %119 %2878 
                               f32_3 %2879 = OpLoad %119 
                               f32_3 %2880 = OpExtInst %1 30 %2879 
                                               OpStore %119 %2880 
                               f32_3 %2881 = OpLoad %119 
                               f32_3 %2884 = OpFMul %2881 %2883 
                                               OpStore %119 %2884 
                               f32_3 %2885 = OpLoad %119 
                               f32_3 %2886 = OpExtInst %1 29 %2885 
                                               OpStore %119 %2886 
                               f32_3 %2889 = OpLoad %9 
                               f32_4 %2890 = OpVectorShuffle %2889 %2889 0 1 2 0 
                              bool_4 %2891 = OpFOrdGreaterThanEqual %2888 %2890 
                              bool_3 %2892 = OpVectorShuffle %2891 %2891 0 1 2 
                                               OpStore %323 %2892 
                       Private bool* %2893 = OpAccessChain %323 %88 
                                bool %2894 = OpLoad %2893 
                                               OpSelectionMerge %2897 None 
                                               OpBranchConditional %2894 %2896 %2900 
                                     %2896 = OpLabel 
                        Private f32* %2898 = OpAccessChain %78 %88 
                                 f32 %2899 = OpLoad %2898 
                                               OpStore %2895 %2899 
                                               OpBranch %2897 
                                     %2900 = OpLabel 
                        Private f32* %2901 = OpAccessChain %119 %88 
                                 f32 %2902 = OpLoad %2901 
                                               OpStore %2895 %2902 
                                               OpBranch %2897 
                                     %2897 = OpLabel 
                                 f32 %2903 = OpLoad %2895 
                        Private f32* %2904 = OpAccessChain %41 %88 
                                               OpStore %2904 %2903 
                       Private bool* %2905 = OpAccessChain %323 %67 
                                bool %2906 = OpLoad %2905 
                                               OpSelectionMerge %2909 None 
                                               OpBranchConditional %2906 %2908 %2912 
                                     %2908 = OpLabel 
                        Private f32* %2910 = OpAccessChain %78 %67 
                                 f32 %2911 = OpLoad %2910 
                                               OpStore %2907 %2911 
                                               OpBranch %2909 
                                     %2912 = OpLabel 
                        Private f32* %2913 = OpAccessChain %119 %67 
                                 f32 %2914 = OpLoad %2913 
                                               OpStore %2907 %2914 
                                               OpBranch %2909 
                                     %2909 = OpLabel 
                                 f32 %2915 = OpLoad %2907 
                        Private f32* %2916 = OpAccessChain %41 %67 
                                               OpStore %2916 %2915 
                       Private bool* %2917 = OpAccessChain %323 %641 
                                bool %2918 = OpLoad %2917 
                                               OpSelectionMerge %2921 None 
                                               OpBranchConditional %2918 %2920 %2924 
                                     %2920 = OpLabel 
                        Private f32* %2922 = OpAccessChain %78 %641 
                                 f32 %2923 = OpLoad %2922 
                                               OpStore %2919 %2923 
                                               OpBranch %2921 
                                     %2924 = OpLabel 
                        Private f32* %2925 = OpAccessChain %119 %641 
                                 f32 %2926 = OpLoad %2925 
                                               OpStore %2919 %2926 
                                               OpBranch %2921 
                                     %2921 = OpLabel 
                                 f32 %2927 = OpLoad %2919 
                        Private f32* %2928 = OpAccessChain %41 %641 
                                               OpStore %2928 %2927 
                               f32_4 %2931 = OpLoad %41 
                                               OpStore %2930 %2931 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %66 %73 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %22 0 Offset 22 
                                             OpMemberDecorate %22 1 Offset 22 
                                             OpMemberDecorate %22 2 Offset 22 
                                             OpDecorate %22 Block 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate vs_TEXCOORD1 Location 66 
                                             OpDecorate vs_TEXCOORD0 Location 73 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypeStruct %6 %7 %7 
                                     %23 = OpTypePointer Uniform %22 
Uniform struct {f32; f32_4; f32_4;}* %24 = OpVariable Uniform 
                                 i32 %25 = OpConstant 2 
                                     %26 = OpTypePointer Uniform %7 
                                     %35 = OpTypePointer Output %7 
                                 f32 %39 = OpConstant 3.674022E-40 
                                 f32 %40 = OpConstant 3.674022E-40 
                               f32_2 %41 = OpConstantComposite %39 %40 
                                     %45 = OpTypePointer Private %19 
                      Private f32_2* %46 = OpVariable Private 
                               f32_2 %49 = OpConstantComposite %40 %40 
                                 i32 %52 = OpConstant 1 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %58 %58 
                                     %65 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %68 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                      Uniform f32_4* %27 = OpAccessChain %24 %25 
                               f32_4 %28 = OpLoad %27 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpFMul %21 %29 
                      Uniform f32_4* %31 = OpAccessChain %24 %25 
                               f32_4 %32 = OpLoad %31 
                               f32_2 %33 = OpVectorShuffle %32 %32 2 3 
                               f32_2 %34 = OpFAdd %30 %33 
                       Output f32_4* %36 = OpAccessChain %13 %15 
                               f32_4 %37 = OpLoad %36 
                               f32_4 %38 = OpVectorShuffle %37 %34 4 5 2 3 
                                             OpStore %36 %38 
                       Output f32_4* %42 = OpAccessChain %13 %15 
                               f32_4 %43 = OpLoad %42 
                               f32_4 %44 = OpVectorShuffle %43 %41 0 1 4 5 
                                             OpStore %42 %44 
                               f32_3 %47 = OpLoad %18 
                               f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                               f32_2 %50 = OpFAdd %48 %49 
                                             OpStore %46 %50 
                               f32_2 %51 = OpLoad %46 
                      Uniform f32_4* %53 = OpAccessChain %24 %52 
                               f32_4 %54 = OpLoad %53 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               f32_2 %56 = OpFMul %51 %55 
                                             OpStore %46 %56 
                               f32_2 %57 = OpLoad %46 
                               f32_2 %60 = OpFMul %57 %59 
                      Uniform f32_4* %61 = OpAccessChain %24 %52 
                               f32_4 %62 = OpLoad %61 
                               f32_2 %63 = OpVectorShuffle %62 %62 2 3 
                               f32_2 %64 = OpFAdd %60 %63 
                                             OpStore %46 %64 
                               f32_2 %67 = OpLoad %46 
                        Uniform f32* %69 = OpAccessChain %24 %15 
                                 f32 %70 = OpLoad %69 
                               f32_2 %71 = OpCompositeConstruct %70 %70 
                               f32_2 %72 = OpFMul %67 %71 
                                             OpStore vs_TEXCOORD1 %72 
                               f32_2 %74 = OpLoad %46 
                                             OpStore vs_TEXCOORD0 %74 
                         Output f32* %76 = OpAccessChain %13 %15 %9 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                         Output f32* %79 = OpAccessChain %13 %15 %9 
                                             OpStore %79 %78 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 2933
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %2930 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %2751 DescriptorSet 2751 
                                               OpDecorate %2751 Binding 2751 
                                               OpDecorate %2753 DescriptorSet 2753 
                                               OpDecorate %2753 Binding 2753 
                                               OpDecorate %2930 Location 2930 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %18 = OpConstant 3.674022E-40 
                                   f32 %19 = OpConstant 3.674022E-40 
                                       %27 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %6 %27 %27 
                                       %29 = OpTypePointer Uniform %28 
  Uniform struct {f32; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 0 
                                       %33 = OpTypePointer Uniform %6 
                                       %40 = OpTypePointer Private %27 
                        Private f32_4* %41 = OpVariable Private 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypePointer Private %6 
                          Private f32* %56 = OpVariable Private 
                                       %62 = OpTypeVector %31 2 
                                   i32 %63 = OpConstant 1 
                                 i32_2 %64 = OpConstantComposite %32 %63 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 1 
                          Private f32* %69 = OpVariable Private 
                                 i32_2 %75 = OpConstantComposite %63 %32 
                        Private f32_3* %78 = OpVariable Private 
                                   i32 %84 = OpConstant -1 
                                 i32_2 %85 = OpConstantComposite %32 %84 
                                   u32 %88 = OpConstant 0 
                          Private f32* %90 = OpVariable Private 
                                 i32_2 %96 = OpConstantComposite %84 %32 
                                       %99 = OpTypePointer Private %10 
                       Private f32_2* %100 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_3* %119 = OpVariable Private 
                       Private f32_2* %125 = OpVariable Private 
                                  f32 %143 = OpConstant 3.674022E-40 
                                  f32 %154 = OpConstant 3.674022E-40 
                                      %156 = OpTypeBool 
                                      %157 = OpTypePointer Private %156 
                        Private bool* %158 = OpVariable Private 
                                i32_2 %171 = OpConstantComposite %84 %84 
                                i32_2 %179 = OpConstantComposite %63 %63 
                                i32_2 %188 = OpConstantComposite %63 %84 
                                i32_2 %197 = OpConstantComposite %84 %63 
                       Private f32_2* %201 = OpVariable Private 
                       Private f32_2* %207 = OpVariable Private 
                         Private f32* %216 = OpVariable Private 
                                  f32 %224 = OpConstant 3.674022E-40 
                       Private f32_3* %237 = OpVariable Private 
                       Private f32_3* %249 = OpVariable Private 
                                  f32 %276 = OpConstant 3.674022E-40 
                                      %321 = OpTypeVector %156 3 
                                      %322 = OpTypePointer Private %321 
                      Private bool_3* %323 = OpVariable Private 
                                      %337 = OpTypePointer Function %6 
                                  i32 %357 = OpConstant 2 
                                  f32 %366 = OpConstant 3.674022E-40 
                        Private bool* %394 = OpVariable Private 
                                  f32 %447 = OpConstant 3.674022E-40 
                                f32_2 %448 = OpConstantComposite %447 %447 
                                      %457 = OpTypePointer Input %6 
                       Private f32_3* %483 = OpVariable Private 
                                  f32 %492 = OpConstant 3.674022E-40 
                       Private f32_2* %519 = OpVariable Private 
                                  f32 %547 = OpConstant 3.674022E-40 
                                      %562 = OpTypePointer Private %31 
                         Private i32* %563 = OpVariable Private 
                                  u32 %566 = OpConstant 4294967295 
                                      %582 = OpTypePointer Private %62 
                       Private i32_2* %583 = OpVariable Private 
                                      %589 = OpTypeVector %156 4 
                                      %591 = OpTypeVector %156 2 
                                      %593 = OpTypeVector %66 2 
                                u32_2 %594 = OpConstantComposite %88 %88 
                                u32_2 %595 = OpConstantComposite %67 %67 
                                  f32 %603 = OpConstant 3.674022E-40 
                         Private f32* %622 = OpVariable Private 
                                  u32 %641 = OpConstant 2 
                                      %643 = OpTypeVector %31 3 
                                      %644 = OpTypePointer Private %643 
                       Private i32_3* %645 = OpVariable Private 
                                 f32 %2295 = OpConstant 3.674022E-40 
                                     %2491 = OpTypePointer Private %591 
                     Private bool_2* %2492 = OpVariable Private 
                                 f32 %2503 = OpConstant 3.674022E-40 
                      Private i32_2* %2613 = OpVariable Private 
                               f32_4 %2616 = OpConstantComposite %18 %18 %18 %18 
                     Private bool_2* %2628 = OpVariable Private 
                                     %2630 = OpTypeVector %31 4 
                       Private bool* %2647 = OpVariable Private 
                                     %2649 = OpTypePointer Function %156 
                                 u32 %2734 = OpConstant 3 
                                     %2740 = OpTypePointer Uniform %27 
UniformConstant read_only Texture2D* %2751 = OpVariable UniformConstant 
            UniformConstant sampler* %2753 = OpVariable UniformConstant 
                                 f32 %2762 = OpConstant 3.674022E-40 
                                 f32 %2765 = OpConstant 3.674022E-40 
                                 f32 %2792 = OpConstant 3.674022E-40 
                               f32_3 %2793 = OpConstantComposite %2792 %2792 %2792 
                                 f32 %2797 = OpConstant 3.674022E-40 
                               f32_3 %2798 = OpConstantComposite %2797 %2797 %2797 
                                 f32 %2803 = OpConstant 3.674022E-40 
                               f32_3 %2804 = OpConstantComposite %2803 %2803 %2803 
                                 f32 %2809 = OpConstant 3.674022E-40 
                               f32_3 %2810 = OpConstantComposite %2809 %2809 %2809 
                                 f32 %2812 = OpConstant 3.674022E-40 
                               f32_3 %2813 = OpConstantComposite %2812 %2812 %2812 
                                 f32 %2815 = OpConstant 3.674022E-40 
                               f32_4 %2816 = OpConstantComposite %2815 %2815 %2815 %18 
                                 f32 %2859 = OpConstant 3.674022E-40 
                               f32_3 %2860 = OpConstantComposite %2859 %2859 %2859 
                                 f32 %2865 = OpConstant 3.674022E-40 
                               f32_3 %2866 = OpConstantComposite %2865 %2865 %2865 
                                 f32 %2869 = OpConstant 3.674022E-40 
                               f32_3 %2870 = OpConstantComposite %2869 %2869 %2869 
                                 f32 %2873 = OpConstant 3.674022E-40 
                               f32_3 %2874 = OpConstantComposite %2873 %2873 %2873 
                                 f32 %2882 = OpConstant 3.674022E-40 
                               f32_3 %2883 = OpConstantComposite %2882 %2882 %2882 
                                 f32 %2887 = OpConstant 3.674022E-40 
                               f32_4 %2888 = OpConstantComposite %2887 %2887 %2887 %18 
                                     %2929 = OpTypePointer Output %27 
                       Output f32_4* %2930 = OpVariable Output 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %338 = OpVariable Function 
                        Function f32* %354 = OpVariable Function 
                        Function f32* %406 = OpVariable Function 
                        Function f32* %427 = OpVariable Function 
                        Function f32* %437 = OpVariable Function 
                        Function f32* %454 = OpVariable Function 
                        Function f32* %467 = OpVariable Function 
                        Function f32* %538 = OpVariable Function 
                        Function f32* %612 = OpVariable Function 
                        Function f32* %633 = OpVariable Function 
                        Function f32* %668 = OpVariable Function 
                        Function f32* %686 = OpVariable Function 
                        Function f32* %774 = OpVariable Function 
                        Function f32* %794 = OpVariable Function 
                        Function f32* %826 = OpVariable Function 
                        Function f32* %847 = OpVariable Function 
                        Function f32* %879 = OpVariable Function 
                        Function f32* %897 = OpVariable Function 
                        Function f32* %985 = OpVariable Function 
                       Function f32* %1005 = OpVariable Function 
                       Function f32* %1037 = OpVariable Function 
                       Function f32* %1058 = OpVariable Function 
                       Function f32* %1090 = OpVariable Function 
                       Function f32* %1108 = OpVariable Function 
                       Function f32* %1196 = OpVariable Function 
                       Function f32* %1216 = OpVariable Function 
                       Function f32* %1248 = OpVariable Function 
                       Function f32* %1269 = OpVariable Function 
                       Function f32* %1301 = OpVariable Function 
                       Function f32* %1319 = OpVariable Function 
                       Function f32* %1407 = OpVariable Function 
                       Function f32* %1427 = OpVariable Function 
                       Function f32* %1459 = OpVariable Function 
                       Function f32* %1480 = OpVariable Function 
                       Function f32* %1512 = OpVariable Function 
                       Function f32* %1530 = OpVariable Function 
                       Function f32* %1618 = OpVariable Function 
                       Function f32* %1638 = OpVariable Function 
                       Function f32* %1670 = OpVariable Function 
                       Function f32* %1691 = OpVariable Function 
                       Function f32* %1723 = OpVariable Function 
                       Function f32* %1741 = OpVariable Function 
                       Function f32* %1829 = OpVariable Function 
                       Function f32* %1849 = OpVariable Function 
                       Function f32* %1881 = OpVariable Function 
                       Function f32* %1902 = OpVariable Function 
                       Function f32* %1934 = OpVariable Function 
                       Function f32* %1952 = OpVariable Function 
                       Function f32* %2040 = OpVariable Function 
                       Function f32* %2060 = OpVariable Function 
                       Function f32* %2092 = OpVariable Function 
                       Function f32* %2113 = OpVariable Function 
                       Function f32* %2145 = OpVariable Function 
                       Function f32* %2163 = OpVariable Function 
                       Function f32* %2251 = OpVariable Function 
                       Function f32* %2271 = OpVariable Function 
                       Function f32* %2304 = OpVariable Function 
                       Function f32* %2325 = OpVariable Function 
                       Function f32* %2357 = OpVariable Function 
                       Function f32* %2375 = OpVariable Function 
                       Function f32* %2463 = OpVariable Function 
                       Function f32* %2482 = OpVariable Function 
                       Function f32* %2510 = OpVariable Function 
                       Function f32* %2528 = OpVariable Function 
                       Function f32* %2545 = OpVariable Function 
                       Function f32* %2562 = OpVariable Function 
                       Function f32* %2586 = OpVariable Function 
                       Function f32* %2603 = OpVariable Function 
                      Function bool* %2650 = OpVariable Function 
                       Function f32* %2687 = OpVariable Function 
                       Function f32* %2703 = OpVariable Function 
                       Function f32* %2823 = OpVariable Function 
                       Function f32* %2835 = OpVariable Function 
                       Function f32* %2847 = OpVariable Function 
                       Function f32* %2895 = OpVariable Function 
                       Function f32* %2907 = OpVariable Function 
                       Function f32* %2919 = OpVariable Function 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                                 f32_3 %14 = OpLoad %9 
                                 f32_3 %15 = OpVectorShuffle %14 %13 3 4 2 
                                               OpStore %9 %15 
                                 f32_3 %16 = OpLoad %9 
                                 f32_2 %17 = OpVectorShuffle %16 %16 0 1 
                                 f32_2 %20 = OpCompositeConstruct %18 %18 
                                 f32_2 %21 = OpCompositeConstruct %19 %19 
                                 f32_2 %22 = OpExtInst %1 43 %17 %20 %21 
                                 f32_3 %23 = OpLoad %9 
                                 f32_3 %24 = OpVectorShuffle %23 %22 3 4 2 
                                               OpStore %9 %24 
                                 f32_3 %25 = OpLoad %9 
                                 f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                          Uniform f32* %34 = OpAccessChain %30 %32 
                                   f32 %35 = OpLoad %34 
                                 f32_2 %36 = OpCompositeConstruct %35 %35 
                                 f32_2 %37 = OpFMul %26 %36 
                                 f32_3 %38 = OpLoad %9 
                                 f32_3 %39 = OpVectorShuffle %38 %37 3 4 2 
                                               OpStore %9 %39 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_3 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleExplicitLod %51 %53 Lod %27 
                                               OpStore %41 %54 
                   read_only Texture2D %57 = OpLoad %44 
                               sampler %58 = OpLoad %48 
            read_only Texture2DSampled %59 = OpSampledImage %57 %58 
                                 f32_3 %60 = OpLoad %9 
                                 f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                 f32_4 %65 = OpImageSampleExplicitLod %59 %61 Lod %27ConstOffset %65 
                                   f32 %68 = OpCompositeExtract %65 1 
                                               OpStore %56 %68 
                   read_only Texture2D %70 = OpLoad %44 
                               sampler %71 = OpLoad %48 
            read_only Texture2DSampled %72 = OpSampledImage %70 %71 
                                 f32_3 %73 = OpLoad %9 
                                 f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                 f32_4 %76 = OpImageSampleExplicitLod %72 %74 Lod %27ConstOffset %76 
                                   f32 %77 = OpCompositeExtract %76 1 
                                               OpStore %69 %77 
                   read_only Texture2D %79 = OpLoad %44 
                               sampler %80 = OpLoad %48 
            read_only Texture2DSampled %81 = OpSampledImage %79 %80 
                                 f32_3 %82 = OpLoad %9 
                                 f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                                 f32_4 %86 = OpImageSampleExplicitLod %81 %83 Lod %27ConstOffset %86 
                                   f32 %87 = OpCompositeExtract %86 1 
                          Private f32* %89 = OpAccessChain %78 %88 
                                               OpStore %89 %87 
                   read_only Texture2D %91 = OpLoad %44 
                               sampler %92 = OpLoad %48 
            read_only Texture2DSampled %93 = OpSampledImage %91 %92 
                                 f32_3 %94 = OpLoad %9 
                                 f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                 f32_4 %97 = OpImageSampleExplicitLod %93 %95 Lod %27ConstOffset %97 
                                   f32 %98 = OpCompositeExtract %97 1 
                                               OpStore %90 %98 
                         Private f32* %101 = OpAccessChain %41 %67 
                                  f32 %102 = OpLoad %101 
                                  f32 %103 = OpLoad %56 
                                  f32 %104 = OpExtInst %1 40 %102 %103 
                         Private f32* %105 = OpAccessChain %100 %88 
                                               OpStore %105 %104 
                         Private f32* %107 = OpAccessChain %41 %67 
                                  f32 %108 = OpLoad %107 
                                  f32 %109 = OpLoad %56 
                                  f32 %110 = OpExtInst %1 37 %108 %109 
                                               OpStore %106 %110 
                                  f32 %111 = OpLoad %69 
                         Private f32* %112 = OpAccessChain %100 %88 
                                  f32 %113 = OpLoad %112 
                                  f32 %114 = OpExtInst %1 40 %111 %113 
                         Private f32* %115 = OpAccessChain %100 %88 
                                               OpStore %115 %114 
                                  f32 %116 = OpLoad %69 
                                  f32 %117 = OpLoad %106 
                                  f32 %118 = OpExtInst %1 37 %116 %117 
                                               OpStore %106 %118 
                                  f32 %120 = OpLoad %90 
                         Private f32* %121 = OpAccessChain %78 %88 
                                  f32 %122 = OpLoad %121 
                                  f32 %123 = OpExtInst %1 40 %120 %122 
                         Private f32* %124 = OpAccessChain %119 %88 
                                               OpStore %124 %123 
                                  f32 %126 = OpLoad %90 
                         Private f32* %127 = OpAccessChain %78 %88 
                                  f32 %128 = OpLoad %127 
                                  f32 %129 = OpExtInst %1 37 %126 %128 
                         Private f32* %130 = OpAccessChain %125 %88 
                                               OpStore %130 %129 
                         Private f32* %131 = OpAccessChain %100 %88 
                                  f32 %132 = OpLoad %131 
                         Private f32* %133 = OpAccessChain %119 %88 
                                  f32 %134 = OpLoad %133 
                                  f32 %135 = OpExtInst %1 40 %132 %134 
                         Private f32* %136 = OpAccessChain %100 %88 
                                               OpStore %136 %135 
                                  f32 %137 = OpLoad %106 
                         Private f32* %138 = OpAccessChain %125 %88 
                                  f32 %139 = OpLoad %138 
                                  f32 %140 = OpExtInst %1 37 %137 %139 
                                               OpStore %106 %140 
                         Private f32* %141 = OpAccessChain %100 %88 
                                  f32 %142 = OpLoad %141 
                                  f32 %144 = OpFMul %142 %143 
                         Private f32* %145 = OpAccessChain %119 %88 
                                               OpStore %145 %144 
                                  f32 %146 = OpLoad %106 
                                  f32 %147 = OpFNegate %146 
                         Private f32* %148 = OpAccessChain %100 %88 
                                  f32 %149 = OpLoad %148 
                                  f32 %150 = OpFAdd %147 %149 
                         Private f32* %151 = OpAccessChain %100 %88 
                                               OpStore %151 %150 
                         Private f32* %152 = OpAccessChain %119 %88 
                                  f32 %153 = OpLoad %152 
                                  f32 %155 = OpExtInst %1 40 %153 %154 
                                               OpStore %106 %155 
                         Private f32* %159 = OpAccessChain %100 %88 
                                  f32 %160 = OpLoad %159 
                                  f32 %161 = OpLoad %106 
                                 bool %162 = OpFOrdGreaterThanEqual %160 %161 
                                               OpStore %158 %162 
                                 bool %163 = OpLoad %158 
                                               OpSelectionMerge %165 None 
                                               OpBranchConditional %163 %164 %2736 
                                      %164 = OpLabel 
                  read_only Texture2D %166 = OpLoad %44 
                              sampler %167 = OpLoad %48 
           read_only Texture2DSampled %168 = OpSampledImage %166 %167 
                                f32_3 %169 = OpLoad %9 
                                f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                f32_4 %172 = OpImageSampleExplicitLod %168 %170 Lod %27ConstOffset %172 
                                  f32 %173 = OpCompositeExtract %172 1 
                                               OpStore %106 %173 
                  read_only Texture2D %174 = OpLoad %44 
                              sampler %175 = OpLoad %48 
           read_only Texture2DSampled %176 = OpSampledImage %174 %175 
                                f32_3 %177 = OpLoad %9 
                                f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                f32_4 %180 = OpImageSampleExplicitLod %176 %178 Lod %27ConstOffset %180 
                                  f32 %181 = OpCompositeExtract %180 1 
                         Private f32* %182 = OpAccessChain %119 %88 
                                               OpStore %182 %181 
                  read_only Texture2D %183 = OpLoad %44 
                              sampler %184 = OpLoad %48 
           read_only Texture2DSampled %185 = OpSampledImage %183 %184 
                                f32_3 %186 = OpLoad %9 
                                f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                f32_4 %189 = OpImageSampleExplicitLod %185 %187 Lod %27ConstOffset %189 
                                  f32 %190 = OpCompositeExtract %189 1 
                         Private f32* %191 = OpAccessChain %125 %88 
                                               OpStore %191 %190 
                  read_only Texture2D %192 = OpLoad %44 
                              sampler %193 = OpLoad %48 
           read_only Texture2DSampled %194 = OpSampledImage %192 %193 
                                f32_3 %195 = OpLoad %9 
                                f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                f32_4 %198 = OpImageSampleExplicitLod %194 %196 Lod %27ConstOffset %198 
                                  f32 %199 = OpCompositeExtract %198 1 
                         Private f32* %200 = OpAccessChain %9 %88 
                                               OpStore %200 %199 
                                  f32 %202 = OpLoad %56 
                         Private f32* %203 = OpAccessChain %78 %88 
                                  f32 %204 = OpLoad %203 
                                  f32 %205 = OpFAdd %202 %204 
                         Private f32* %206 = OpAccessChain %201 %88 
                                               OpStore %206 %205 
                                  f32 %208 = OpLoad %69 
                                  f32 %209 = OpLoad %90 
                                  f32 %210 = OpFAdd %208 %209 
                         Private f32* %211 = OpAccessChain %207 %88 
                                               OpStore %211 %210 
                         Private f32* %212 = OpAccessChain %100 %88 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFDiv %19 %213 
                         Private f32* %215 = OpAccessChain %100 %88 
                                               OpStore %215 %214 
                         Private f32* %217 = OpAccessChain %201 %88 
                                  f32 %218 = OpLoad %217 
                         Private f32* %219 = OpAccessChain %207 %88 
                                  f32 %220 = OpLoad %219 
                                  f32 %221 = OpFAdd %218 %220 
                                               OpStore %216 %221 
                         Private f32* %222 = OpAccessChain %41 %67 
                                  f32 %223 = OpLoad %222 
                                  f32 %225 = OpFMul %223 %224 
                         Private f32* %226 = OpAccessChain %201 %88 
                                  f32 %227 = OpLoad %226 
                                  f32 %228 = OpFAdd %225 %227 
                         Private f32* %229 = OpAccessChain %201 %88 
                                               OpStore %229 %228 
                         Private f32* %230 = OpAccessChain %41 %67 
                                  f32 %231 = OpLoad %230 
                                  f32 %232 = OpFMul %231 %224 
                         Private f32* %233 = OpAccessChain %207 %88 
                                  f32 %234 = OpLoad %233 
                                  f32 %235 = OpFAdd %232 %234 
                         Private f32* %236 = OpAccessChain %207 %88 
                                               OpStore %236 %235 
                         Private f32* %238 = OpAccessChain %119 %88 
                                  f32 %239 = OpLoad %238 
                         Private f32* %240 = OpAccessChain %125 %88 
                                  f32 %241 = OpLoad %240 
                                  f32 %242 = OpFAdd %239 %241 
                         Private f32* %243 = OpAccessChain %237 %88 
                                               OpStore %243 %242 
                                  f32 %244 = OpLoad %106 
                         Private f32* %245 = OpAccessChain %125 %88 
                                  f32 %246 = OpLoad %245 
                                  f32 %247 = OpFAdd %244 %246 
                         Private f32* %248 = OpAccessChain %125 %88 
                                               OpStore %248 %247 
                                  f32 %250 = OpLoad %69 
                                  f32 %251 = OpFMul %250 %224 
                         Private f32* %252 = OpAccessChain %237 %88 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpFAdd %251 %253 
                         Private f32* %255 = OpAccessChain %249 %88 
                                               OpStore %255 %254 
                         Private f32* %256 = OpAccessChain %78 %88 
                                  f32 %257 = OpLoad %256 
                                  f32 %258 = OpFMul %257 %224 
                         Private f32* %259 = OpAccessChain %125 %88 
                                  f32 %260 = OpLoad %259 
                                  f32 %261 = OpFAdd %258 %260 
                         Private f32* %262 = OpAccessChain %125 %88 
                                               OpStore %262 %261 
                         Private f32* %263 = OpAccessChain %9 %88 
                                  f32 %264 = OpLoad %263 
                                  f32 %265 = OpLoad %106 
                                  f32 %266 = OpFAdd %264 %265 
                                               OpStore %106 %266 
                         Private f32* %267 = OpAccessChain %119 %88 
                                  f32 %268 = OpLoad %267 
                         Private f32* %269 = OpAccessChain %9 %88 
                                  f32 %270 = OpLoad %269 
                                  f32 %271 = OpFAdd %268 %270 
                         Private f32* %272 = OpAccessChain %9 %88 
                                               OpStore %272 %271 
                         Private f32* %273 = OpAccessChain %201 %88 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpExtInst %1 4 %274 
                                  f32 %277 = OpFMul %275 %276 
                         Private f32* %278 = OpAccessChain %249 %88 
                                  f32 %279 = OpLoad %278 
                                  f32 %280 = OpExtInst %1 4 %279 
                                  f32 %281 = OpFAdd %277 %280 
                         Private f32* %282 = OpAccessChain %201 %88 
                                               OpStore %282 %281 
                         Private f32* %283 = OpAccessChain %207 %88 
                                  f32 %284 = OpLoad %283 
                                  f32 %285 = OpExtInst %1 4 %284 
                                  f32 %286 = OpFMul %285 %276 
                         Private f32* %287 = OpAccessChain %125 %88 
                                  f32 %288 = OpLoad %287 
                                  f32 %289 = OpExtInst %1 4 %288 
                                  f32 %290 = OpFAdd %286 %289 
                         Private f32* %291 = OpAccessChain %119 %88 
                                               OpStore %291 %290 
                                  f32 %292 = OpLoad %90 
                                  f32 %293 = OpFMul %292 %224 
                                  f32 %294 = OpLoad %106 
                                  f32 %295 = OpFAdd %293 %294 
                         Private f32* %296 = OpAccessChain %125 %88 
                                               OpStore %296 %295 
                                  f32 %297 = OpLoad %56 
                                  f32 %298 = OpFMul %297 %224 
                         Private f32* %299 = OpAccessChain %9 %88 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFAdd %298 %300 
                         Private f32* %302 = OpAccessChain %9 %88 
                                               OpStore %302 %301 
                         Private f32* %303 = OpAccessChain %201 %88 
                                  f32 %304 = OpLoad %303 
                         Private f32* %305 = OpAccessChain %125 %88 
                                  f32 %306 = OpLoad %305 
                                  f32 %307 = OpExtInst %1 4 %306 
                                  f32 %308 = OpFAdd %304 %307 
                         Private f32* %309 = OpAccessChain %201 %88 
                                               OpStore %309 %308 
                         Private f32* %310 = OpAccessChain %119 %88 
                                  f32 %311 = OpLoad %310 
                         Private f32* %312 = OpAccessChain %9 %88 
                                  f32 %313 = OpLoad %312 
                                  f32 %314 = OpExtInst %1 4 %313 
                                  f32 %315 = OpFAdd %311 %314 
                         Private f32* %316 = OpAccessChain %9 %88 
                                               OpStore %316 %315 
                         Private f32* %317 = OpAccessChain %237 %88 
                                  f32 %318 = OpLoad %317 
                                  f32 %319 = OpLoad %106 
                                  f32 %320 = OpFAdd %318 %319 
                                               OpStore %106 %320 
                         Private f32* %324 = OpAccessChain %201 %88 
                                  f32 %325 = OpLoad %324 
                         Private f32* %326 = OpAccessChain %9 %88 
                                  f32 %327 = OpLoad %326 
                                 bool %328 = OpFOrdGreaterThanEqual %325 %327 
                        Private bool* %329 = OpAccessChain %323 %88 
                                               OpStore %329 %328 
                                  f32 %330 = OpLoad %216 
                                  f32 %331 = OpFMul %330 %276 
                                  f32 %332 = OpLoad %106 
                                  f32 %333 = OpFAdd %331 %332 
                         Private f32* %334 = OpAccessChain %201 %88 
                                               OpStore %334 %333 
                        Private bool* %335 = OpAccessChain %323 %88 
                                 bool %336 = OpLoad %335 
                                               OpSelectionMerge %340 None 
                                               OpBranchConditional %336 %339 %343 
                                      %339 = OpLabel 
                         Private f32* %341 = OpAccessChain %78 %88 
                                  f32 %342 = OpLoad %341 
                                               OpStore %338 %342 
                                               OpBranch %340 
                                      %343 = OpLabel 
                                  f32 %344 = OpLoad %90 
                                               OpStore %338 %344 
                                               OpBranch %340 
                                      %340 = OpLabel 
                                  f32 %345 = OpLoad %338 
                         Private f32* %346 = OpAccessChain %78 %88 
                                               OpStore %346 %345 
                        Private bool* %347 = OpAccessChain %323 %88 
                                 bool %348 = OpLoad %347 
                                  f32 %349 = OpLoad %56 
                                  f32 %350 = OpLoad %69 
                                  f32 %351 = OpSelect %348 %349 %350 
                                               OpStore %56 %351 
                        Private bool* %352 = OpAccessChain %323 %88 
                                 bool %353 = OpLoad %352 
                                               OpSelectionMerge %356 None 
                                               OpBranchConditional %353 %355 %360 
                                      %355 = OpLabel 
                         Uniform f32* %358 = OpAccessChain %30 %357 %67 
                                  f32 %359 = OpLoad %358 
                                               OpStore %354 %359 
                                               OpBranch %356 
                                      %360 = OpLabel 
                         Uniform f32* %361 = OpAccessChain %30 %357 %88 
                                  f32 %362 = OpLoad %361 
                                               OpStore %354 %362 
                                               OpBranch %356 
                                      %356 = OpLabel 
                                  f32 %363 = OpLoad %354 
                                               OpStore %69 %363 
                         Private f32* %364 = OpAccessChain %201 %88 
                                  f32 %365 = OpLoad %364 
                                  f32 %367 = OpFMul %365 %366 
                         Private f32* %368 = OpAccessChain %41 %67 
                                  f32 %369 = OpLoad %368 
                                  f32 %370 = OpFNegate %369 
                                  f32 %371 = OpFAdd %367 %370 
                         Private f32* %372 = OpAccessChain %201 %88 
                                               OpStore %372 %371 
                         Private f32* %373 = OpAccessChain %41 %67 
                                  f32 %374 = OpLoad %373 
                                  f32 %375 = OpFNegate %374 
                         Private f32* %376 = OpAccessChain %78 %88 
                                  f32 %377 = OpLoad %376 
                                  f32 %378 = OpFAdd %375 %377 
                                               OpStore %90 %378 
                         Private f32* %379 = OpAccessChain %41 %67 
                                  f32 %380 = OpLoad %379 
                                  f32 %381 = OpFNegate %380 
                                  f32 %382 = OpLoad %56 
                                  f32 %383 = OpFAdd %381 %382 
                                               OpStore %106 %383 
                         Private f32* %384 = OpAccessChain %41 %67 
                                  f32 %385 = OpLoad %384 
                         Private f32* %386 = OpAccessChain %78 %88 
                                  f32 %387 = OpLoad %386 
                                  f32 %388 = OpFAdd %385 %387 
                         Private f32* %389 = OpAccessChain %78 %88 
                                               OpStore %389 %388 
                         Private f32* %390 = OpAccessChain %41 %67 
                                  f32 %391 = OpLoad %390 
                                  f32 %392 = OpLoad %56 
                                  f32 %393 = OpFAdd %391 %392 
                                               OpStore %56 %393 
                                  f32 %395 = OpLoad %90 
                                  f32 %396 = OpExtInst %1 4 %395 
                                  f32 %397 = OpLoad %106 
                                  f32 %398 = OpExtInst %1 4 %397 
                                 bool %399 = OpFOrdGreaterThanEqual %396 %398 
                                               OpStore %394 %399 
                                  f32 %400 = OpLoad %106 
                                  f32 %401 = OpExtInst %1 4 %400 
                                  f32 %402 = OpLoad %90 
                                  f32 %403 = OpExtInst %1 4 %402 
                                  f32 %404 = OpExtInst %1 40 %401 %403 
                                               OpStore %90 %404 
                                 bool %405 = OpLoad %394 
                                               OpSelectionMerge %408 None 
                                               OpBranchConditional %405 %407 %411 
                                      %407 = OpLabel 
                                  f32 %409 = OpLoad %69 
                                  f32 %410 = OpFNegate %409 
                                               OpStore %406 %410 
                                               OpBranch %408 
                                      %411 = OpLabel 
                                  f32 %412 = OpLoad %69 
                                               OpStore %406 %412 
                                               OpBranch %408 
                                      %408 = OpLabel 
                                  f32 %413 = OpLoad %406 
                                               OpStore %69 %413 
                         Private f32* %414 = OpAccessChain %100 %88 
                                  f32 %415 = OpLoad %414 
                         Private f32* %416 = OpAccessChain %201 %88 
                                  f32 %417 = OpLoad %416 
                                  f32 %418 = OpExtInst %1 4 %417 
                                  f32 %419 = OpFMul %415 %418 
                         Private f32* %420 = OpAccessChain %201 %88 
                                               OpStore %420 %419 
                         Private f32* %421 = OpAccessChain %201 %88 
                                  f32 %422 = OpLoad %421 
                                  f32 %423 = OpExtInst %1 43 %422 %18 %19 
                         Private f32* %424 = OpAccessChain %201 %88 
                                               OpStore %424 %423 
                        Private bool* %425 = OpAccessChain %323 %88 
                                 bool %426 = OpLoad %425 
                                               OpSelectionMerge %429 None 
                                               OpBranchConditional %426 %428 %432 
                                      %428 = OpLabel 
                         Uniform f32* %430 = OpAccessChain %30 %357 %88 
                                  f32 %431 = OpLoad %430 
                                               OpStore %427 %431 
                                               OpBranch %429 
                                      %432 = OpLabel 
                                               OpStore %427 %18 
                                               OpBranch %429 
                                      %429 = OpLabel 
                                  f32 %433 = OpLoad %427 
                         Private f32* %434 = OpAccessChain %100 %88 
                                               OpStore %434 %433 
                        Private bool* %435 = OpAccessChain %323 %88 
                                 bool %436 = OpLoad %435 
                                               OpSelectionMerge %439 None 
                                               OpBranchConditional %436 %438 %440 
                                      %438 = OpLabel 
                                               OpStore %437 %18 
                                               OpBranch %439 
                                      %440 = OpLabel 
                         Uniform f32* %441 = OpAccessChain %30 %357 %67 
                                  f32 %442 = OpLoad %441 
                                               OpStore %437 %442 
                                               OpBranch %439 
                                      %439 = OpLabel 
                                  f32 %443 = OpLoad %437 
                         Private f32* %444 = OpAccessChain %100 %67 
                                               OpStore %444 %443 
                                  f32 %445 = OpLoad %69 
                                f32_2 %446 = OpCompositeConstruct %445 %445 
                                f32_2 %449 = OpFMul %446 %448 
                                f32_2 %450 = OpLoad vs_TEXCOORD0 
                                f32_2 %451 = OpFAdd %449 %450 
                                               OpStore %125 %451 
                        Private bool* %452 = OpAccessChain %323 %88 
                                 bool %453 = OpLoad %452 
                                               OpSelectionMerge %456 None 
                                               OpBranchConditional %453 %455 %460 
                                      %455 = OpLabel 
                           Input f32* %458 = OpAccessChain vs_TEXCOORD0 %88 
                                  f32 %459 = OpLoad %458 
                                               OpStore %454 %459 
                                               OpBranch %456 
                                      %460 = OpLabel 
                         Private f32* %461 = OpAccessChain %125 %88 
                                  f32 %462 = OpLoad %461 
                                               OpStore %454 %462 
                                               OpBranch %456 
                                      %456 = OpLabel 
                                  f32 %463 = OpLoad %454 
                         Private f32* %464 = OpAccessChain %125 %88 
                                               OpStore %464 %463 
                        Private bool* %465 = OpAccessChain %323 %88 
                                 bool %466 = OpLoad %465 
                                               OpSelectionMerge %469 None 
                                               OpBranchConditional %466 %468 %472 
                                      %468 = OpLabel 
                         Private f32* %470 = OpAccessChain %125 %67 
                                  f32 %471 = OpLoad %470 
                                               OpStore %467 %471 
                                               OpBranch %469 
                                      %472 = OpLabel 
                           Input f32* %473 = OpAccessChain vs_TEXCOORD0 %67 
                                  f32 %474 = OpLoad %473 
                                               OpStore %467 %474 
                                               OpBranch %469 
                                      %469 = OpLabel 
                                  f32 %475 = OpLoad %467 
                         Private f32* %476 = OpAccessChain %125 %67 
                                               OpStore %476 %475 
                                f32_2 %477 = OpLoad %100 
                                f32_2 %478 = OpFNegate %477 
                                f32_2 %479 = OpLoad %125 
                                f32_2 %480 = OpFAdd %478 %479 
                                f32_3 %481 = OpLoad %237 
                                f32_3 %482 = OpVectorShuffle %481 %480 3 4 2 
                                               OpStore %237 %482 
                                f32_2 %484 = OpLoad %100 
                                f32_2 %485 = OpLoad %125 
                                f32_2 %486 = OpFAdd %484 %485 
                                f32_3 %487 = OpLoad %483 
                                f32_3 %488 = OpVectorShuffle %487 %486 3 4 2 
                                               OpStore %483 %488 
                         Private f32* %489 = OpAccessChain %201 %88 
                                  f32 %490 = OpLoad %489 
                                  f32 %491 = OpFMul %490 %224 
                                  f32 %493 = OpFAdd %491 %492 
                         Private f32* %494 = OpAccessChain %125 %88 
                                               OpStore %494 %493 
                                f32_3 %495 = OpLoad %237 
                                f32_2 %496 = OpVectorShuffle %495 %495 0 1 
                                               OpStore %207 %496 
                                f32_2 %497 = OpLoad %207 
                                f32_2 %498 = OpCompositeConstruct %18 %18 
                                f32_2 %499 = OpCompositeConstruct %19 %19 
                                f32_2 %500 = OpExtInst %1 43 %497 %498 %499 
                                               OpStore %207 %500 
                                f32_2 %501 = OpLoad %207 
                         Uniform f32* %502 = OpAccessChain %30 %32 
                                  f32 %503 = OpLoad %502 
                                f32_2 %504 = OpCompositeConstruct %503 %503 
                                f32_2 %505 = OpFMul %501 %504 
                                               OpStore %207 %505 
                  read_only Texture2D %506 = OpLoad %44 
                              sampler %507 = OpLoad %48 
           read_only Texture2DSampled %508 = OpSampledImage %506 %507 
                                f32_2 %509 = OpLoad %207 
                                f32_4 %510 = OpImageSampleExplicitLod %508 %509 Lod %27 
                                  f32 %511 = OpCompositeExtract %510 1 
                         Private f32* %512 = OpAccessChain %207 %88 
                                               OpStore %512 %511 
                         Private f32* %513 = OpAccessChain %201 %88 
                                  f32 %514 = OpLoad %513 
                         Private f32* %515 = OpAccessChain %201 %88 
                                  f32 %516 = OpLoad %515 
                                  f32 %517 = OpFMul %514 %516 
                         Private f32* %518 = OpAccessChain %201 %88 
                                               OpStore %518 %517 
                                f32_3 %520 = OpLoad %483 
                                f32_2 %521 = OpVectorShuffle %520 %520 0 1 
                                               OpStore %519 %521 
                                f32_2 %522 = OpLoad %519 
                                f32_2 %523 = OpCompositeConstruct %18 %18 
                                f32_2 %524 = OpCompositeConstruct %19 %19 
                                f32_2 %525 = OpExtInst %1 43 %522 %523 %524 
                                               OpStore %519 %525 
                                f32_2 %526 = OpLoad %519 
                         Uniform f32* %527 = OpAccessChain %30 %32 
                                  f32 %528 = OpLoad %527 
                                f32_2 %529 = OpCompositeConstruct %528 %528 
                                f32_2 %530 = OpFMul %526 %529 
                                               OpStore %519 %530 
                  read_only Texture2D %531 = OpLoad %44 
                              sampler %532 = OpLoad %48 
           read_only Texture2DSampled %533 = OpSampledImage %531 %532 
                                f32_2 %534 = OpLoad %519 
                                f32_4 %535 = OpImageSampleExplicitLod %533 %534 Lod %27 
                                  f32 %536 = OpCompositeExtract %535 1 
                                               OpStore %216 %536 
                                 bool %537 = OpLoad %394 
                                               OpSelectionMerge %540 None 
                                               OpBranchConditional %537 %539 %543 
                                      %539 = OpLabel 
                         Private f32* %541 = OpAccessChain %78 %88 
                                  f32 %542 = OpLoad %541 
                                               OpStore %538 %542 
                                               OpBranch %540 
                                      %543 = OpLabel 
                                  f32 %544 = OpLoad %56 
                                               OpStore %538 %544 
                                               OpBranch %540 
                                      %540 = OpLabel 
                                  f32 %545 = OpLoad %538 
                                               OpStore %56 %545 
                                  f32 %546 = OpLoad %90 
                                  f32 %548 = OpFMul %546 %547 
                         Private f32* %549 = OpAccessChain %78 %88 
                                               OpStore %549 %548 
                                  f32 %550 = OpLoad %56 
                                  f32 %551 = OpFNegate %550 
                                  f32 %552 = OpFMul %551 %447 
                         Private f32* %553 = OpAccessChain %41 %67 
                                  f32 %554 = OpLoad %553 
                                  f32 %555 = OpFAdd %552 %554 
                                               OpStore %90 %555 
                         Private f32* %556 = OpAccessChain %201 %88 
                                  f32 %557 = OpLoad %556 
                         Private f32* %558 = OpAccessChain %125 %88 
                                  f32 %559 = OpLoad %558 
                                  f32 %560 = OpFMul %557 %559 
                         Private f32* %561 = OpAccessChain %201 %88 
                                               OpStore %561 %560 
                                  f32 %564 = OpLoad %90 
                                 bool %565 = OpFOrdLessThan %564 %18 
                                  u32 %567 = OpSelect %565 %566 %88 
                                  i32 %568 = OpBitcast %567 
                                               OpStore %563 %568 
                                  f32 %569 = OpLoad %56 
                                  f32 %570 = OpFNegate %569 
                                  f32 %571 = OpFMul %570 %447 
                         Private f32* %572 = OpAccessChain %207 %88 
                                  f32 %573 = OpLoad %572 
                                  f32 %574 = OpFAdd %571 %573 
                         Private f32* %575 = OpAccessChain %119 %88 
                                               OpStore %575 %574 
                                  f32 %576 = OpLoad %56 
                                  f32 %577 = OpFNegate %576 
                                  f32 %578 = OpFMul %577 %447 
                                  f32 %579 = OpLoad %216 
                                  f32 %580 = OpFAdd %578 %579 
                         Private f32* %581 = OpAccessChain %119 %67 
                                               OpStore %581 %580 
                                f32_3 %584 = OpLoad %119 
                                f32_4 %585 = OpVectorShuffle %584 %584 0 1 0 1 
                                f32_4 %586 = OpExtInst %1 4 %585 
                                f32_3 %587 = OpLoad %78 
                                f32_4 %588 = OpVectorShuffle %587 %587 0 0 0 0 
                               bool_4 %590 = OpFOrdGreaterThanEqual %586 %588 
                               bool_2 %592 = OpVectorShuffle %590 %590 0 1 
                                u32_2 %596 = OpSelect %592 %595 %594 
                                u32_2 %597 = OpCompositeConstruct %566 %566 
                                u32_2 %598 = OpIMul %596 %597 
                                i32_2 %599 = OpBitcast %598 
                                               OpStore %583 %599 
                         Private f32* %600 = OpAccessChain %100 %88 
                                  f32 %601 = OpLoad %600 
                                  f32 %602 = OpFNegate %601 
                                  f32 %604 = OpFMul %602 %603 
                         Private f32* %605 = OpAccessChain %237 %88 
                                  f32 %606 = OpLoad %605 
                                  f32 %607 = OpFAdd %604 %606 
                         Private f32* %608 = OpAccessChain %519 %88 
                                               OpStore %608 %607 
                         Private i32* %609 = OpAccessChain %583 %88 
                                  i32 %610 = OpLoad %609 
                                 bool %611 = OpINotEqual %610 %32 
                                               OpSelectionMerge %614 None 
                                               OpBranchConditional %611 %613 %617 
                                      %613 = OpLabel 
                         Private f32* %615 = OpAccessChain %237 %88 
                                  f32 %616 = OpLoad %615 
                                               OpStore %612 %616 
                                               OpBranch %614 
                                      %617 = OpLabel 
                         Private f32* %618 = OpAccessChain %519 %88 
                                  f32 %619 = OpLoad %618 
                                               OpStore %612 %619 
                                               OpBranch %614 
                                      %614 = OpLabel 
                                  f32 %620 = OpLoad %612 
                         Private f32* %621 = OpAccessChain %237 %88 
                                               OpStore %621 %620 
                         Private f32* %623 = OpAccessChain %100 %67 
                                  f32 %624 = OpLoad %623 
                                  f32 %625 = OpFNegate %624 
                                  f32 %626 = OpFMul %625 %603 
                         Private f32* %627 = OpAccessChain %237 %67 
                                  f32 %628 = OpLoad %627 
                                  f32 %629 = OpFAdd %626 %628 
                                               OpStore %622 %629 
                         Private i32* %630 = OpAccessChain %583 %88 
                                  i32 %631 = OpLoad %630 
                                 bool %632 = OpINotEqual %631 %32 
                                               OpSelectionMerge %635 None 
                                               OpBranchConditional %632 %634 %638 
                                      %634 = OpLabel 
                         Private f32* %636 = OpAccessChain %237 %67 
                                  f32 %637 = OpLoad %636 
                                               OpStore %633 %637 
                                               OpBranch %635 
                                      %638 = OpLabel 
                                  f32 %639 = OpLoad %622 
                                               OpStore %633 %639 
                                               OpBranch %635 
                                      %635 = OpLabel 
                                  f32 %640 = OpLoad %633 
                         Private f32* %642 = OpAccessChain %237 %641 
                                               OpStore %642 %640 
                                i32_2 %646 = OpLoad %583 
                                i32_2 %647 = OpNot %646 
                                i32_3 %648 = OpLoad %645 
                                i32_3 %649 = OpVectorShuffle %648 %647 3 1 4 
                                               OpStore %645 %649 
                         Private i32* %650 = OpAccessChain %645 %641 
                                  i32 %651 = OpLoad %650 
                                  u32 %652 = OpBitcast %651 
                         Private i32* %653 = OpAccessChain %645 %88 
                                  i32 %654 = OpLoad %653 
                                  u32 %655 = OpBitcast %654 
                                  u32 %656 = OpBitwiseOr %652 %655 
                                  i32 %657 = OpBitcast %656 
                         Private i32* %658 = OpAccessChain %645 %88 
                                               OpStore %658 %657 
                         Private f32* %659 = OpAccessChain %100 %88 
                                  f32 %660 = OpLoad %659 
                                  f32 %661 = OpFMul %660 %603 
                         Private f32* %662 = OpAccessChain %483 %88 
                                  f32 %663 = OpLoad %662 
                                  f32 %664 = OpFAdd %661 %663 
                                               OpStore %622 %664 
                         Private i32* %665 = OpAccessChain %583 %67 
                                  i32 %666 = OpLoad %665 
                                 bool %667 = OpINotEqual %666 %32 
                                               OpSelectionMerge %670 None 
                                               OpBranchConditional %667 %669 %673 
                                      %669 = OpLabel 
                         Private f32* %671 = OpAccessChain %483 %88 
                                  f32 %672 = OpLoad %671 
                                               OpStore %668 %672 
                                               OpBranch %670 
                                      %673 = OpLabel 
                                  f32 %674 = OpLoad %622 
                                               OpStore %668 %674 
                                               OpBranch %670 
                                      %670 = OpLabel 
                                  f32 %675 = OpLoad %668 
                         Private f32* %676 = OpAccessChain %483 %88 
                                               OpStore %676 %675 
                         Private f32* %677 = OpAccessChain %100 %67 
                                  f32 %678 = OpLoad %677 
                                  f32 %679 = OpFMul %678 %603 
                         Private f32* %680 = OpAccessChain %483 %67 
                                  f32 %681 = OpLoad %680 
                                  f32 %682 = OpFAdd %679 %681 
                                               OpStore %622 %682 
                         Private i32* %683 = OpAccessChain %583 %67 
                                  i32 %684 = OpLoad %683 
                                 bool %685 = OpINotEqual %684 %32 
                                               OpSelectionMerge %688 None 
                                               OpBranchConditional %685 %687 %691 
                                      %687 = OpLabel 
                         Private f32* %689 = OpAccessChain %483 %67 
                                  f32 %690 = OpLoad %689 
                                               OpStore %686 %690 
                                               OpBranch %688 
                                      %691 = OpLabel 
                                  f32 %692 = OpLoad %622 
                                               OpStore %686 %692 
                                               OpBranch %688 
                                      %688 = OpLabel 
                                  f32 %693 = OpLoad %686 
                         Private f32* %694 = OpAccessChain %483 %641 
                                               OpStore %694 %693 
                         Private i32* %695 = OpAccessChain %645 %88 
                                  i32 %696 = OpLoad %695 
                                 bool %697 = OpINotEqual %696 %32 
                                               OpSelectionMerge %699 None 
                                               OpBranchConditional %697 %698 %699 
                                      %698 = OpLabel 
                         Private i32* %700 = OpAccessChain %583 %88 
                                  i32 %701 = OpLoad %700 
                                 bool %702 = OpIEqual %701 %32 
                                               OpSelectionMerge %704 None 
                                               OpBranchConditional %702 %703 %704 
                                      %703 = OpLabel 
                                f32_3 %705 = OpLoad %237 
                                f32_2 %706 = OpVectorShuffle %705 %705 0 2 
                                f32_3 %707 = OpLoad %249 
                                f32_3 %708 = OpVectorShuffle %707 %706 3 1 4 
                                               OpStore %249 %708 
                                f32_3 %709 = OpLoad %249 
                                f32_2 %710 = OpVectorShuffle %709 %709 0 2 
                                f32_2 %711 = OpCompositeConstruct %18 %18 
                                f32_2 %712 = OpCompositeConstruct %19 %19 
                                f32_2 %713 = OpExtInst %1 43 %710 %711 %712 
                                f32_3 %714 = OpLoad %249 
                                f32_3 %715 = OpVectorShuffle %714 %713 3 1 4 
                                               OpStore %249 %715 
                                f32_3 %716 = OpLoad %249 
                                f32_2 %717 = OpVectorShuffle %716 %716 0 2 
                         Uniform f32* %718 = OpAccessChain %30 %32 
                                  f32 %719 = OpLoad %718 
                                f32_2 %720 = OpCompositeConstruct %719 %719 
                                f32_2 %721 = OpFMul %717 %720 
                                f32_3 %722 = OpLoad %249 
                                f32_3 %723 = OpVectorShuffle %722 %721 3 1 4 
                                               OpStore %249 %723 
                  read_only Texture2D %724 = OpLoad %44 
                              sampler %725 = OpLoad %48 
           read_only Texture2DSampled %726 = OpSampledImage %724 %725 
                                f32_3 %727 = OpLoad %249 
                                f32_2 %728 = OpVectorShuffle %727 %727 0 2 
                                f32_4 %729 = OpImageSampleExplicitLod %726 %728 Lod %27 
                                  f32 %730 = OpCompositeExtract %729 1 
                         Private f32* %731 = OpAccessChain %119 %88 
                                               OpStore %731 %730 
                                               OpBranch %704 
                                      %704 = OpLabel 
                         Private i32* %732 = OpAccessChain %583 %67 
                                  i32 %733 = OpLoad %732 
                                 bool %734 = OpIEqual %733 %32 
                                               OpSelectionMerge %736 None 
                                               OpBranchConditional %734 %735 %736 
                                      %735 = OpLabel 
                                f32_3 %737 = OpLoad %483 
                                f32_2 %738 = OpVectorShuffle %737 %737 0 2 
                                f32_3 %739 = OpLoad %249 
                                f32_3 %740 = OpVectorShuffle %739 %738 3 1 4 
                                               OpStore %249 %740 
                                f32_3 %741 = OpLoad %249 
                                f32_2 %742 = OpVectorShuffle %741 %741 0 2 
                                f32_2 %743 = OpCompositeConstruct %18 %18 
                                f32_2 %744 = OpCompositeConstruct %19 %19 
                                f32_2 %745 = OpExtInst %1 43 %742 %743 %744 
                                f32_3 %746 = OpLoad %249 
                                f32_3 %747 = OpVectorShuffle %746 %745 3 1 4 
                                               OpStore %249 %747 
                                f32_3 %748 = OpLoad %249 
                                f32_2 %749 = OpVectorShuffle %748 %748 0 2 
                         Uniform f32* %750 = OpAccessChain %30 %32 
                                  f32 %751 = OpLoad %750 
                                f32_2 %752 = OpCompositeConstruct %751 %751 
                                f32_2 %753 = OpFMul %749 %752 
                                f32_3 %754 = OpLoad %249 
                                f32_3 %755 = OpVectorShuffle %754 %753 3 1 4 
                                               OpStore %249 %755 
                  read_only Texture2D %756 = OpLoad %44 
                              sampler %757 = OpLoad %48 
           read_only Texture2DSampled %758 = OpSampledImage %756 %757 
                                f32_3 %759 = OpLoad %249 
                                f32_2 %760 = OpVectorShuffle %759 %759 0 2 
                                f32_4 %761 = OpImageSampleExplicitLod %758 %760 Lod %27 
                                  f32 %762 = OpCompositeExtract %761 1 
                         Private f32* %763 = OpAccessChain %119 %67 
                                               OpStore %763 %762 
                                               OpBranch %736 
                                      %736 = OpLabel 
                                  f32 %764 = OpLoad %56 
                                  f32 %765 = OpFNegate %764 
                                  f32 %766 = OpFMul %765 %447 
                         Private f32* %767 = OpAccessChain %119 %88 
                                  f32 %768 = OpLoad %767 
                                  f32 %769 = OpFAdd %766 %768 
                         Private f32* %770 = OpAccessChain %249 %88 
                                               OpStore %770 %769 
                         Private i32* %771 = OpAccessChain %583 %88 
                                  i32 %772 = OpLoad %771 
                                 bool %773 = OpINotEqual %772 %32 
                                               OpSelectionMerge %776 None 
                                               OpBranchConditional %773 %775 %779 
                                      %775 = OpLabel 
                         Private f32* %777 = OpAccessChain %119 %88 
                                  f32 %778 = OpLoad %777 
                                               OpStore %774 %778 
                                               OpBranch %776 
                                      %779 = OpLabel 
                         Private f32* %780 = OpAccessChain %249 %88 
                                  f32 %781 = OpLoad %780 
                                               OpStore %774 %781 
                                               OpBranch %776 
                                      %776 = OpLabel 
                                  f32 %782 = OpLoad %774 
                         Private f32* %783 = OpAccessChain %119 %88 
                                               OpStore %783 %782 
                                  f32 %784 = OpLoad %56 
                                  f32 %785 = OpFNegate %784 
                                  f32 %786 = OpFMul %785 %447 
                         Private f32* %787 = OpAccessChain %119 %67 
                                  f32 %788 = OpLoad %787 
                                  f32 %789 = OpFAdd %786 %788 
                         Private f32* %790 = OpAccessChain %207 %88 
                                               OpStore %790 %789 
                         Private i32* %791 = OpAccessChain %583 %67 
                                  i32 %792 = OpLoad %791 
                                 bool %793 = OpINotEqual %792 %32 
                                               OpSelectionMerge %796 None 
                                               OpBranchConditional %793 %795 %799 
                                      %795 = OpLabel 
                         Private f32* %797 = OpAccessChain %119 %67 
                                  f32 %798 = OpLoad %797 
                                               OpStore %794 %798 
                                               OpBranch %796 
                                      %799 = OpLabel 
                         Private f32* %800 = OpAccessChain %207 %88 
                                  f32 %801 = OpLoad %800 
                                               OpStore %794 %801 
                                               OpBranch %796 
                                      %796 = OpLabel 
                                  f32 %802 = OpLoad %794 
                         Private f32* %803 = OpAccessChain %119 %67 
                                               OpStore %803 %802 
                                f32_3 %804 = OpLoad %119 
                                f32_4 %805 = OpVectorShuffle %804 %804 0 1 0 1 
                                f32_4 %806 = OpExtInst %1 4 %805 
                                f32_3 %807 = OpLoad %78 
                                f32_4 %808 = OpVectorShuffle %807 %807 0 0 0 0 
                               bool_4 %809 = OpFOrdGreaterThanEqual %806 %808 
                               bool_2 %810 = OpVectorShuffle %809 %809 0 1 
                                u32_2 %811 = OpSelect %810 %595 %594 
                                u32_2 %812 = OpCompositeConstruct %566 %566 
                                u32_2 %813 = OpIMul %811 %812 
                                i32_2 %814 = OpBitcast %813 
                                               OpStore %583 %814 
                         Private f32* %815 = OpAccessChain %100 %88 
                                  f32 %816 = OpLoad %815 
                                  f32 %817 = OpFNegate %816 
                                  f32 %818 = OpFMul %817 %276 
                         Private f32* %819 = OpAccessChain %237 %88 
                                  f32 %820 = OpLoad %819 
                                  f32 %821 = OpFAdd %818 %820 
                         Private f32* %822 = OpAccessChain %249 %88 
                                               OpStore %822 %821 
                         Private i32* %823 = OpAccessChain %583 %88 
                                  i32 %824 = OpLoad %823 
                                 bool %825 = OpINotEqual %824 %32 
                                               OpSelectionMerge %828 None 
                                               OpBranchConditional %825 %827 %831 
                                      %827 = OpLabel 
                         Private f32* %829 = OpAccessChain %237 %88 
                                  f32 %830 = OpLoad %829 
                                               OpStore %826 %830 
                                               OpBranch %828 
                                      %831 = OpLabel 
                         Private f32* %832 = OpAccessChain %249 %88 
                                  f32 %833 = OpLoad %832 
                                               OpStore %826 %833 
                                               OpBranch %828 
                                      %828 = OpLabel 
                                  f32 %834 = OpLoad %826 
                         Private f32* %835 = OpAccessChain %237 %88 
                                               OpStore %835 %834 
                         Private f32* %836 = OpAccessChain %100 %67 
                                  f32 %837 = OpLoad %836 
                                  f32 %838 = OpFNegate %837 
                                  f32 %839 = OpFMul %838 %276 
                         Private f32* %840 = OpAccessChain %237 %641 
                                  f32 %841 = OpLoad %840 
                                  f32 %842 = OpFAdd %839 %841 
                         Private f32* %843 = OpAccessChain %249 %88 
                                               OpStore %843 %842 
                         Private i32* %844 = OpAccessChain %583 %88 
                                  i32 %845 = OpLoad %844 
                                 bool %846 = OpINotEqual %845 %32 
                                               OpSelectionMerge %849 None 
                                               OpBranchConditional %846 %848 %852 
                                      %848 = OpLabel 
                         Private f32* %850 = OpAccessChain %237 %641 
                                  f32 %851 = OpLoad %850 
                                               OpStore %847 %851 
                                               OpBranch %849 
                                      %852 = OpLabel 
                         Private f32* %853 = OpAccessChain %249 %88 
                                  f32 %854 = OpLoad %853 
                                               OpStore %847 %854 
                                               OpBranch %849 
                                      %849 = OpLabel 
                                  f32 %855 = OpLoad %847 
                         Private f32* %856 = OpAccessChain %237 %641 
                                               OpStore %856 %855 
                                i32_2 %857 = OpLoad %583 
                                i32_2 %858 = OpNot %857 
                                i32_3 %859 = OpLoad %645 
                                i32_3 %860 = OpVectorShuffle %859 %858 3 1 4 
                                               OpStore %645 %860 
                         Private i32* %861 = OpAccessChain %645 %641 
                                  i32 %862 = OpLoad %861 
                                  u32 %863 = OpBitcast %862 
                         Private i32* %864 = OpAccessChain %645 %88 
                                  i32 %865 = OpLoad %864 
                                  u32 %866 = OpBitcast %865 
                                  u32 %867 = OpBitwiseOr %863 %866 
                                  i32 %868 = OpBitcast %867 
                         Private i32* %869 = OpAccessChain %645 %88 
                                               OpStore %869 %868 
                         Private f32* %870 = OpAccessChain %100 %88 
                                  f32 %871 = OpLoad %870 
                                  f32 %872 = OpFMul %871 %276 
                         Private f32* %873 = OpAccessChain %483 %88 
                                  f32 %874 = OpLoad %873 
                                  f32 %875 = OpFAdd %872 %874 
                                               OpStore %622 %875 
                         Private i32* %876 = OpAccessChain %583 %67 
                                  i32 %877 = OpLoad %876 
                                 bool %878 = OpINotEqual %877 %32 
                                               OpSelectionMerge %881 None 
                                               OpBranchConditional %878 %880 %884 
                                      %880 = OpLabel 
                         Private f32* %882 = OpAccessChain %483 %88 
                                  f32 %883 = OpLoad %882 
                                               OpStore %879 %883 
                                               OpBranch %881 
                                      %884 = OpLabel 
                                  f32 %885 = OpLoad %622 
                                               OpStore %879 %885 
                                               OpBranch %881 
                                      %881 = OpLabel 
                                  f32 %886 = OpLoad %879 
                         Private f32* %887 = OpAccessChain %483 %88 
                                               OpStore %887 %886 
                         Private f32* %888 = OpAccessChain %100 %67 
                                  f32 %889 = OpLoad %888 
                                  f32 %890 = OpFMul %889 %276 
                         Private f32* %891 = OpAccessChain %483 %641 
                                  f32 %892 = OpLoad %891 
                                  f32 %893 = OpFAdd %890 %892 
                                               OpStore %622 %893 
                         Private i32* %894 = OpAccessChain %583 %67 
                                  i32 %895 = OpLoad %894 
                                 bool %896 = OpINotEqual %895 %32 
                                               OpSelectionMerge %899 None 
                                               OpBranchConditional %896 %898 %902 
                                      %898 = OpLabel 
                         Private f32* %900 = OpAccessChain %483 %641 
                                  f32 %901 = OpLoad %900 
                                               OpStore %897 %901 
                                               OpBranch %899 
                                      %902 = OpLabel 
                                  f32 %903 = OpLoad %622 
                                               OpStore %897 %903 
                                               OpBranch %899 
                                      %899 = OpLabel 
                                  f32 %904 = OpLoad %897 
                         Private f32* %905 = OpAccessChain %483 %641 
                                               OpStore %905 %904 
                         Private i32* %906 = OpAccessChain %645 %88 
                                  i32 %907 = OpLoad %906 
                                 bool %908 = OpINotEqual %907 %32 
                                               OpSelectionMerge %910 None 
                                               OpBranchConditional %908 %909 %910 
                                      %909 = OpLabel 
                         Private i32* %911 = OpAccessChain %583 %88 
                                  i32 %912 = OpLoad %911 
                                 bool %913 = OpIEqual %912 %32 
                                               OpSelectionMerge %915 None 
                                               OpBranchConditional %913 %914 %915 
                                      %914 = OpLabel 
                                f32_3 %916 = OpLoad %237 
                                f32_2 %917 = OpVectorShuffle %916 %916 0 2 
                                f32_3 %918 = OpLoad %249 
                                f32_3 %919 = OpVectorShuffle %918 %917 3 1 4 
                                               OpStore %249 %919 
                                f32_3 %920 = OpLoad %249 
                                f32_2 %921 = OpVectorShuffle %920 %920 0 2 
                                f32_2 %922 = OpCompositeConstruct %18 %18 
                                f32_2 %923 = OpCompositeConstruct %19 %19 
                                f32_2 %924 = OpExtInst %1 43 %921 %922 %923 
                                f32_3 %925 = OpLoad %249 
                                f32_3 %926 = OpVectorShuffle %925 %924 3 1 4 
                                               OpStore %249 %926 
                                f32_3 %927 = OpLoad %249 
                                f32_2 %928 = OpVectorShuffle %927 %927 0 2 
                         Uniform f32* %929 = OpAccessChain %30 %32 
                                  f32 %930 = OpLoad %929 
                                f32_2 %931 = OpCompositeConstruct %930 %930 
                                f32_2 %932 = OpFMul %928 %931 
                                f32_3 %933 = OpLoad %249 
                                f32_3 %934 = OpVectorShuffle %933 %932 3 1 4 
                                               OpStore %249 %934 
                  read_only Texture2D %935 = OpLoad %44 
                              sampler %936 = OpLoad %48 
           read_only Texture2DSampled %937 = OpSampledImage %935 %936 
                                f32_3 %938 = OpLoad %249 
                                f32_2 %939 = OpVectorShuffle %938 %938 0 2 
                                f32_4 %940 = OpImageSampleExplicitLod %937 %939 Lod %27 
                                  f32 %941 = OpCompositeExtract %940 1 
                         Private f32* %942 = OpAccessChain %119 %88 
                                               OpStore %942 %941 
                                               OpBranch %915 
                                      %915 = OpLabel 
                         Private i32* %943 = OpAccessChain %583 %67 
                                  i32 %944 = OpLoad %943 
                                 bool %945 = OpIEqual %944 %32 
                                               OpSelectionMerge %947 None 
                                               OpBranchConditional %945 %946 %947 
                                      %946 = OpLabel 
                                f32_3 %948 = OpLoad %483 
                                f32_2 %949 = OpVectorShuffle %948 %948 0 2 
                                f32_3 %950 = OpLoad %249 
                                f32_3 %951 = OpVectorShuffle %950 %949 3 1 4 
                                               OpStore %249 %951 
                                f32_3 %952 = OpLoad %249 
                                f32_2 %953 = OpVectorShuffle %952 %952 0 2 
                                f32_2 %954 = OpCompositeConstruct %18 %18 
                                f32_2 %955 = OpCompositeConstruct %19 %19 
                                f32_2 %956 = OpExtInst %1 43 %953 %954 %955 
                                f32_3 %957 = OpLoad %249 
                                f32_3 %958 = OpVectorShuffle %957 %956 3 1 4 
                                               OpStore %249 %958 
                                f32_3 %959 = OpLoad %249 
                                f32_2 %960 = OpVectorShuffle %959 %959 0 2 
                         Uniform f32* %961 = OpAccessChain %30 %32 
                                  f32 %962 = OpLoad %961 
                                f32_2 %963 = OpCompositeConstruct %962 %962 
                                f32_2 %964 = OpFMul %960 %963 
                                f32_3 %965 = OpLoad %249 
                                f32_3 %966 = OpVectorShuffle %965 %964 3 1 4 
                                               OpStore %249 %966 
                  read_only Texture2D %967 = OpLoad %44 
                              sampler %968 = OpLoad %48 
           read_only Texture2DSampled %969 = OpSampledImage %967 %968 
                                f32_3 %970 = OpLoad %249 
                                f32_2 %971 = OpVectorShuffle %970 %970 0 2 
                                f32_4 %972 = OpImageSampleExplicitLod %969 %971 Lod %27 
                                  f32 %973 = OpCompositeExtract %972 1 
                         Private f32* %974 = OpAccessChain %119 %67 
                                               OpStore %974 %973 
                                               OpBranch %947 
                                      %947 = OpLabel 
                                  f32 %975 = OpLoad %56 
                                  f32 %976 = OpFNegate %975 
                                  f32 %977 = OpFMul %976 %447 
                         Private f32* %978 = OpAccessChain %119 %88 
                                  f32 %979 = OpLoad %978 
                                  f32 %980 = OpFAdd %977 %979 
                         Private f32* %981 = OpAccessChain %249 %88 
                                               OpStore %981 %980 
                         Private i32* %982 = OpAccessChain %583 %88 
                                  i32 %983 = OpLoad %982 
                                 bool %984 = OpINotEqual %983 %32 
                                               OpSelectionMerge %987 None 
                                               OpBranchConditional %984 %986 %990 
                                      %986 = OpLabel 
                         Private f32* %988 = OpAccessChain %119 %88 
                                  f32 %989 = OpLoad %988 
                                               OpStore %985 %989 
                                               OpBranch %987 
                                      %990 = OpLabel 
                         Private f32* %991 = OpAccessChain %249 %88 
                                  f32 %992 = OpLoad %991 
                                               OpStore %985 %992 
                                               OpBranch %987 
                                      %987 = OpLabel 
                                  f32 %993 = OpLoad %985 
                         Private f32* %994 = OpAccessChain %119 %88 
                                               OpStore %994 %993 
                                  f32 %995 = OpLoad %56 
                                  f32 %996 = OpFNegate %995 
                                  f32 %997 = OpFMul %996 %447 
                         Private f32* %998 = OpAccessChain %119 %67 
                                  f32 %999 = OpLoad %998 
                                 f32 %1000 = OpFAdd %997 %999 
                        Private f32* %1001 = OpAccessChain %207 %88 
                                               OpStore %1001 %1000 
                        Private i32* %1002 = OpAccessChain %583 %67 
                                 i32 %1003 = OpLoad %1002 
                                bool %1004 = OpINotEqual %1003 %32 
                                               OpSelectionMerge %1007 None 
                                               OpBranchConditional %1004 %1006 %1010 
                                     %1006 = OpLabel 
                        Private f32* %1008 = OpAccessChain %119 %67 
                                 f32 %1009 = OpLoad %1008 
                                               OpStore %1005 %1009 
                                               OpBranch %1007 
                                     %1010 = OpLabel 
                        Private f32* %1011 = OpAccessChain %207 %88 
                                 f32 %1012 = OpLoad %1011 
                                               OpStore %1005 %1012 
                                               OpBranch %1007 
                                     %1007 = OpLabel 
                                 f32 %1013 = OpLoad %1005 
                        Private f32* %1014 = OpAccessChain %119 %67 
                                               OpStore %1014 %1013 
                               f32_3 %1015 = OpLoad %119 
                               f32_4 %1016 = OpVectorShuffle %1015 %1015 0 1 0 1 
                               f32_4 %1017 = OpExtInst %1 4 %1016 
                               f32_3 %1018 = OpLoad %78 
                               f32_4 %1019 = OpVectorShuffle %1018 %1018 0 0 0 0 
                              bool_4 %1020 = OpFOrdGreaterThanEqual %1017 %1019 
                              bool_2 %1021 = OpVectorShuffle %1020 %1020 0 1 
                               u32_2 %1022 = OpSelect %1021 %595 %594 
                               u32_2 %1023 = OpCompositeConstruct %566 %566 
                               u32_2 %1024 = OpIMul %1022 %1023 
                               i32_2 %1025 = OpBitcast %1024 
                                               OpStore %583 %1025 
                        Private f32* %1026 = OpAccessChain %100 %88 
                                 f32 %1027 = OpLoad %1026 
                                 f32 %1028 = OpFNegate %1027 
                                 f32 %1029 = OpFMul %1028 %276 
                        Private f32* %1030 = OpAccessChain %237 %88 
                                 f32 %1031 = OpLoad %1030 
                                 f32 %1032 = OpFAdd %1029 %1031 
                        Private f32* %1033 = OpAccessChain %249 %88 
                                               OpStore %1033 %1032 
                        Private i32* %1034 = OpAccessChain %583 %88 
                                 i32 %1035 = OpLoad %1034 
                                bool %1036 = OpINotEqual %1035 %32 
                                               OpSelectionMerge %1039 None 
                                               OpBranchConditional %1036 %1038 %1042 
                                     %1038 = OpLabel 
                        Private f32* %1040 = OpAccessChain %237 %88 
                                 f32 %1041 = OpLoad %1040 
                                               OpStore %1037 %1041 
                                               OpBranch %1039 
                                     %1042 = OpLabel 
                        Private f32* %1043 = OpAccessChain %249 %88 
                                 f32 %1044 = OpLoad %1043 
                                               OpStore %1037 %1044 
                                               OpBranch %1039 
                                     %1039 = OpLabel 
                                 f32 %1045 = OpLoad %1037 
                        Private f32* %1046 = OpAccessChain %237 %88 
                                               OpStore %1046 %1045 
                        Private f32* %1047 = OpAccessChain %100 %67 
                                 f32 %1048 = OpLoad %1047 
                                 f32 %1049 = OpFNegate %1048 
                                 f32 %1050 = OpFMul %1049 %276 
                        Private f32* %1051 = OpAccessChain %237 %641 
                                 f32 %1052 = OpLoad %1051 
                                 f32 %1053 = OpFAdd %1050 %1052 
                        Private f32* %1054 = OpAccessChain %249 %88 
                                               OpStore %1054 %1053 
                        Private i32* %1055 = OpAccessChain %583 %88 
                                 i32 %1056 = OpLoad %1055 
                                bool %1057 = OpINotEqual %1056 %32 
                                               OpSelectionMerge %1060 None 
                                               OpBranchConditional %1057 %1059 %1063 
                                     %1059 = OpLabel 
                        Private f32* %1061 = OpAccessChain %237 %641 
                                 f32 %1062 = OpLoad %1061 
                                               OpStore %1058 %1062 
                                               OpBranch %1060 
                                     %1063 = OpLabel 
                        Private f32* %1064 = OpAccessChain %249 %88 
                                 f32 %1065 = OpLoad %1064 
                                               OpStore %1058 %1065 
                                               OpBranch %1060 
                                     %1060 = OpLabel 
                                 f32 %1066 = OpLoad %1058 
                        Private f32* %1067 = OpAccessChain %237 %641 
                                               OpStore %1067 %1066 
                               i32_2 %1068 = OpLoad %583 
                               i32_2 %1069 = OpNot %1068 
                               i32_3 %1070 = OpLoad %645 
                               i32_3 %1071 = OpVectorShuffle %1070 %1069 3 1 4 
                                               OpStore %645 %1071 
                        Private i32* %1072 = OpAccessChain %645 %641 
                                 i32 %1073 = OpLoad %1072 
                                 u32 %1074 = OpBitcast %1073 
                        Private i32* %1075 = OpAccessChain %645 %88 
                                 i32 %1076 = OpLoad %1075 
                                 u32 %1077 = OpBitcast %1076 
                                 u32 %1078 = OpBitwiseOr %1074 %1077 
                                 i32 %1079 = OpBitcast %1078 
                        Private i32* %1080 = OpAccessChain %645 %88 
                                               OpStore %1080 %1079 
                        Private f32* %1081 = OpAccessChain %100 %88 
                                 f32 %1082 = OpLoad %1081 
                                 f32 %1083 = OpFMul %1082 %276 
                        Private f32* %1084 = OpAccessChain %483 %88 
                                 f32 %1085 = OpLoad %1084 
                                 f32 %1086 = OpFAdd %1083 %1085 
                                               OpStore %622 %1086 
                        Private i32* %1087 = OpAccessChain %583 %67 
                                 i32 %1088 = OpLoad %1087 
                                bool %1089 = OpINotEqual %1088 %32 
                                               OpSelectionMerge %1092 None 
                                               OpBranchConditional %1089 %1091 %1095 
                                     %1091 = OpLabel 
                        Private f32* %1093 = OpAccessChain %483 %88 
                                 f32 %1094 = OpLoad %1093 
                                               OpStore %1090 %1094 
                                               OpBranch %1092 
                                     %1095 = OpLabel 
                                 f32 %1096 = OpLoad %622 
                                               OpStore %1090 %1096 
                                               OpBranch %1092 
                                     %1092 = OpLabel 
                                 f32 %1097 = OpLoad %1090 
                        Private f32* %1098 = OpAccessChain %483 %88 
                                               OpStore %1098 %1097 
                        Private f32* %1099 = OpAccessChain %100 %67 
                                 f32 %1100 = OpLoad %1099 
                                 f32 %1101 = OpFMul %1100 %276 
                        Private f32* %1102 = OpAccessChain %483 %641 
                                 f32 %1103 = OpLoad %1102 
                                 f32 %1104 = OpFAdd %1101 %1103 
                                               OpStore %622 %1104 
                        Private i32* %1105 = OpAccessChain %583 %67 
                                 i32 %1106 = OpLoad %1105 
                                bool %1107 = OpINotEqual %1106 %32 
                                               OpSelectionMerge %1110 None 
                                               OpBranchConditional %1107 %1109 %1113 
                                     %1109 = OpLabel 
                        Private f32* %1111 = OpAccessChain %483 %641 
                                 f32 %1112 = OpLoad %1111 
                                               OpStore %1108 %1112 
                                               OpBranch %1110 
                                     %1113 = OpLabel 
                                 f32 %1114 = OpLoad %622 
                                               OpStore %1108 %1114 
                                               OpBranch %1110 
                                     %1110 = OpLabel 
                                 f32 %1115 = OpLoad %1108 
                        Private f32* %1116 = OpAccessChain %483 %641 
                                               OpStore %1116 %1115 
                        Private i32* %1117 = OpAccessChain %645 %88 
                                 i32 %1118 = OpLoad %1117 
                                bool %1119 = OpINotEqual %1118 %32 
                                               OpSelectionMerge %1121 None 
                                               OpBranchConditional %1119 %1120 %1121 
                                     %1120 = OpLabel 
                        Private i32* %1122 = OpAccessChain %583 %88 
                                 i32 %1123 = OpLoad %1122 
                                bool %1124 = OpIEqual %1123 %32 
                                               OpSelectionMerge %1126 None 
                                               OpBranchConditional %1124 %1125 %1126 
                                     %1125 = OpLabel 
                               f32_3 %1127 = OpLoad %237 
                               f32_2 %1128 = OpVectorShuffle %1127 %1127 0 2 
                               f32_3 %1129 = OpLoad %249 
                               f32_3 %1130 = OpVectorShuffle %1129 %1128 3 1 4 
                                               OpStore %249 %1130 
                               f32_3 %1131 = OpLoad %249 
                               f32_2 %1132 = OpVectorShuffle %1131 %1131 0 2 
                               f32_2 %1133 = OpCompositeConstruct %18 %18 
                               f32_2 %1134 = OpCompositeConstruct %19 %19 
                               f32_2 %1135 = OpExtInst %1 43 %1132 %1133 %1134 
                               f32_3 %1136 = OpLoad %249 
                               f32_3 %1137 = OpVectorShuffle %1136 %1135 3 1 4 
                                               OpStore %249 %1137 
                               f32_3 %1138 = OpLoad %249 
                               f32_2 %1139 = OpVectorShuffle %1138 %1138 0 2 
                        Uniform f32* %1140 = OpAccessChain %30 %32 
                                 f32 %1141 = OpLoad %1140 
                               f32_2 %1142 = OpCompositeConstruct %1141 %1141 
                               f32_2 %1143 = OpFMul %1139 %1142 
                               f32_3 %1144 = OpLoad %249 
                               f32_3 %1145 = OpVectorShuffle %1144 %1143 3 1 4 
                                               OpStore %249 %1145 
                 read_only Texture2D %1146 = OpLoad %44 
                             sampler %1147 = OpLoad %48 
          read_only Texture2DSampled %1148 = OpSampledImage %1146 %1147 
                               f32_3 %1149 = OpLoad %249 
                               f32_2 %1150 = OpVectorShuffle %1149 %1149 0 2 
                               f32_4 %1151 = OpImageSampleExplicitLod %1148 %1150 Lod %27 
                                 f32 %1152 = OpCompositeExtract %1151 1 
                        Private f32* %1153 = OpAccessChain %119 %88 
                                               OpStore %1153 %1152 
                                               OpBranch %1126 
                                     %1126 = OpLabel 
                        Private i32* %1154 = OpAccessChain %583 %67 
                                 i32 %1155 = OpLoad %1154 
                                bool %1156 = OpIEqual %1155 %32 
                                               OpSelectionMerge %1158 None 
                                               OpBranchConditional %1156 %1157 %1158 
                                     %1157 = OpLabel 
                               f32_3 %1159 = OpLoad %483 
                               f32_2 %1160 = OpVectorShuffle %1159 %1159 0 2 
                               f32_3 %1161 = OpLoad %249 
                               f32_3 %1162 = OpVectorShuffle %1161 %1160 3 1 4 
                                               OpStore %249 %1162 
                               f32_3 %1163 = OpLoad %249 
                               f32_2 %1164 = OpVectorShuffle %1163 %1163 0 2 
                               f32_2 %1165 = OpCompositeConstruct %18 %18 
                               f32_2 %1166 = OpCompositeConstruct %19 %19 
                               f32_2 %1167 = OpExtInst %1 43 %1164 %1165 %1166 
                               f32_3 %1168 = OpLoad %249 
                               f32_3 %1169 = OpVectorShuffle %1168 %1167 3 1 4 
                                               OpStore %249 %1169 
                               f32_3 %1170 = OpLoad %249 
                               f32_2 %1171 = OpVectorShuffle %1170 %1170 0 2 
                        Uniform f32* %1172 = OpAccessChain %30 %32 
                                 f32 %1173 = OpLoad %1172 
                               f32_2 %1174 = OpCompositeConstruct %1173 %1173 
                               f32_2 %1175 = OpFMul %1171 %1174 
                               f32_3 %1176 = OpLoad %249 
                               f32_3 %1177 = OpVectorShuffle %1176 %1175 3 1 4 
                                               OpStore %249 %1177 
                 read_only Texture2D %1178 = OpLoad %44 
                             sampler %1179 = OpLoad %48 
          read_only Texture2DSampled %1180 = OpSampledImage %1178 %1179 
                               f32_3 %1181 = OpLoad %249 
                               f32_2 %1182 = OpVectorShuffle %1181 %1181 0 2 
                               f32_4 %1183 = OpImageSampleExplicitLod %1180 %1182 Lod %27 
                                 f32 %1184 = OpCompositeExtract %1183 1 
                        Private f32* %1185 = OpAccessChain %119 %67 
                                               OpStore %1185 %1184 
                                               OpBranch %1158 
                                     %1158 = OpLabel 
                                 f32 %1186 = OpLoad %56 
                                 f32 %1187 = OpFNegate %1186 
                                 f32 %1188 = OpFMul %1187 %447 
                        Private f32* %1189 = OpAccessChain %119 %88 
                                 f32 %1190 = OpLoad %1189 
                                 f32 %1191 = OpFAdd %1188 %1190 
                        Private f32* %1192 = OpAccessChain %249 %88 
                                               OpStore %1192 %1191 
                        Private i32* %1193 = OpAccessChain %583 %88 
                                 i32 %1194 = OpLoad %1193 
                                bool %1195 = OpINotEqual %1194 %32 
                                               OpSelectionMerge %1198 None 
                                               OpBranchConditional %1195 %1197 %1201 
                                     %1197 = OpLabel 
                        Private f32* %1199 = OpAccessChain %119 %88 
                                 f32 %1200 = OpLoad %1199 
                                               OpStore %1196 %1200 
                                               OpBranch %1198 
                                     %1201 = OpLabel 
                        Private f32* %1202 = OpAccessChain %249 %88 
                                 f32 %1203 = OpLoad %1202 
                                               OpStore %1196 %1203 
                                               OpBranch %1198 
                                     %1198 = OpLabel 
                                 f32 %1204 = OpLoad %1196 
                        Private f32* %1205 = OpAccessChain %119 %88 
                                               OpStore %1205 %1204 
                                 f32 %1206 = OpLoad %56 
                                 f32 %1207 = OpFNegate %1206 
                                 f32 %1208 = OpFMul %1207 %447 
                        Private f32* %1209 = OpAccessChain %119 %67 
                                 f32 %1210 = OpLoad %1209 
                                 f32 %1211 = OpFAdd %1208 %1210 
                        Private f32* %1212 = OpAccessChain %207 %88 
                                               OpStore %1212 %1211 
                        Private i32* %1213 = OpAccessChain %583 %67 
                                 i32 %1214 = OpLoad %1213 
                                bool %1215 = OpINotEqual %1214 %32 
                                               OpSelectionMerge %1218 None 
                                               OpBranchConditional %1215 %1217 %1221 
                                     %1217 = OpLabel 
                        Private f32* %1219 = OpAccessChain %119 %67 
                                 f32 %1220 = OpLoad %1219 
                                               OpStore %1216 %1220 
                                               OpBranch %1218 
                                     %1221 = OpLabel 
                        Private f32* %1222 = OpAccessChain %207 %88 
                                 f32 %1223 = OpLoad %1222 
                                               OpStore %1216 %1223 
                                               OpBranch %1218 
                                     %1218 = OpLabel 
                                 f32 %1224 = OpLoad %1216 
                        Private f32* %1225 = OpAccessChain %119 %67 
                                               OpStore %1225 %1224 
                               f32_3 %1226 = OpLoad %119 
                               f32_4 %1227 = OpVectorShuffle %1226 %1226 0 1 0 1 
                               f32_4 %1228 = OpExtInst %1 4 %1227 
                               f32_3 %1229 = OpLoad %78 
                               f32_4 %1230 = OpVectorShuffle %1229 %1229 0 0 0 0 
                              bool_4 %1231 = OpFOrdGreaterThanEqual %1228 %1230 
                              bool_2 %1232 = OpVectorShuffle %1231 %1231 0 1 
                               u32_2 %1233 = OpSelect %1232 %595 %594 
                               u32_2 %1234 = OpCompositeConstruct %566 %566 
                               u32_2 %1235 = OpIMul %1233 %1234 
                               i32_2 %1236 = OpBitcast %1235 
                                               OpStore %583 %1236 
                        Private f32* %1237 = OpAccessChain %100 %88 
                                 f32 %1238 = OpLoad %1237 
                                 f32 %1239 = OpFNegate %1238 
                                 f32 %1240 = OpFMul %1239 %276 
                        Private f32* %1241 = OpAccessChain %237 %88 
                                 f32 %1242 = OpLoad %1241 
                                 f32 %1243 = OpFAdd %1240 %1242 
                        Private f32* %1244 = OpAccessChain %249 %88 
                                               OpStore %1244 %1243 
                        Private i32* %1245 = OpAccessChain %583 %88 
                                 i32 %1246 = OpLoad %1245 
                                bool %1247 = OpINotEqual %1246 %32 
                                               OpSelectionMerge %1250 None 
                                               OpBranchConditional %1247 %1249 %1253 
                                     %1249 = OpLabel 
                        Private f32* %1251 = OpAccessChain %237 %88 
                                 f32 %1252 = OpLoad %1251 
                                               OpStore %1248 %1252 
                                               OpBranch %1250 
                                     %1253 = OpLabel 
                        Private f32* %1254 = OpAccessChain %249 %88 
                                 f32 %1255 = OpLoad %1254 
                                               OpStore %1248 %1255 
                                               OpBranch %1250 
                                     %1250 = OpLabel 
                                 f32 %1256 = OpLoad %1248 
                        Private f32* %1257 = OpAccessChain %237 %88 
                                               OpStore %1257 %1256 
                        Private f32* %1258 = OpAccessChain %100 %67 
                                 f32 %1259 = OpLoad %1258 
                                 f32 %1260 = OpFNegate %1259 
                                 f32 %1261 = OpFMul %1260 %276 
                        Private f32* %1262 = OpAccessChain %237 %641 
                                 f32 %1263 = OpLoad %1262 
                                 f32 %1264 = OpFAdd %1261 %1263 
                        Private f32* %1265 = OpAccessChain %249 %88 
                                               OpStore %1265 %1264 
                        Private i32* %1266 = OpAccessChain %583 %88 
                                 i32 %1267 = OpLoad %1266 
                                bool %1268 = OpINotEqual %1267 %32 
                                               OpSelectionMerge %1271 None 
                                               OpBranchConditional %1268 %1270 %1274 
                                     %1270 = OpLabel 
                        Private f32* %1272 = OpAccessChain %237 %641 
                                 f32 %1273 = OpLoad %1272 
                                               OpStore %1269 %1273 
                                               OpBranch %1271 
                                     %1274 = OpLabel 
                        Private f32* %1275 = OpAccessChain %249 %88 
                                 f32 %1276 = OpLoad %1275 
                                               OpStore %1269 %1276 
                                               OpBranch %1271 
                                     %1271 = OpLabel 
                                 f32 %1277 = OpLoad %1269 
                        Private f32* %1278 = OpAccessChain %237 %641 
                                               OpStore %1278 %1277 
                               i32_2 %1279 = OpLoad %583 
                               i32_2 %1280 = OpNot %1279 
                               i32_3 %1281 = OpLoad %645 
                               i32_3 %1282 = OpVectorShuffle %1281 %1280 3 1 4 
                                               OpStore %645 %1282 
                        Private i32* %1283 = OpAccessChain %645 %641 
                                 i32 %1284 = OpLoad %1283 
                                 u32 %1285 = OpBitcast %1284 
                        Private i32* %1286 = OpAccessChain %645 %88 
                                 i32 %1287 = OpLoad %1286 
                                 u32 %1288 = OpBitcast %1287 
                                 u32 %1289 = OpBitwiseOr %1285 %1288 
                                 i32 %1290 = OpBitcast %1289 
                        Private i32* %1291 = OpAccessChain %645 %88 
                                               OpStore %1291 %1290 
                        Private f32* %1292 = OpAccessChain %100 %88 
                                 f32 %1293 = OpLoad %1292 
                                 f32 %1294 = OpFMul %1293 %276 
                        Private f32* %1295 = OpAccessChain %483 %88 
                                 f32 %1296 = OpLoad %1295 
                                 f32 %1297 = OpFAdd %1294 %1296 
                                               OpStore %622 %1297 
                        Private i32* %1298 = OpAccessChain %583 %67 
                                 i32 %1299 = OpLoad %1298 
                                bool %1300 = OpINotEqual %1299 %32 
                                               OpSelectionMerge %1303 None 
                                               OpBranchConditional %1300 %1302 %1306 
                                     %1302 = OpLabel 
                        Private f32* %1304 = OpAccessChain %483 %88 
                                 f32 %1305 = OpLoad %1304 
                                               OpStore %1301 %1305 
                                               OpBranch %1303 
                                     %1306 = OpLabel 
                                 f32 %1307 = OpLoad %622 
                                               OpStore %1301 %1307 
                                               OpBranch %1303 
                                     %1303 = OpLabel 
                                 f32 %1308 = OpLoad %1301 
                        Private f32* %1309 = OpAccessChain %483 %88 
                                               OpStore %1309 %1308 
                        Private f32* %1310 = OpAccessChain %100 %67 
                                 f32 %1311 = OpLoad %1310 
                                 f32 %1312 = OpFMul %1311 %276 
                        Private f32* %1313 = OpAccessChain %483 %641 
                                 f32 %1314 = OpLoad %1313 
                                 f32 %1315 = OpFAdd %1312 %1314 
                                               OpStore %622 %1315 
                        Private i32* %1316 = OpAccessChain %583 %67 
                                 i32 %1317 = OpLoad %1316 
                                bool %1318 = OpINotEqual %1317 %32 
                                               OpSelectionMerge %1321 None 
                                               OpBranchConditional %1318 %1320 %1324 
                                     %1320 = OpLabel 
                        Private f32* %1322 = OpAccessChain %483 %641 
                                 f32 %1323 = OpLoad %1322 
                                               OpStore %1319 %1323 
                                               OpBranch %1321 
                                     %1324 = OpLabel 
                                 f32 %1325 = OpLoad %622 
                                               OpStore %1319 %1325 
                                               OpBranch %1321 
                                     %1321 = OpLabel 
                                 f32 %1326 = OpLoad %1319 
                        Private f32* %1327 = OpAccessChain %483 %641 
                                               OpStore %1327 %1326 
                        Private i32* %1328 = OpAccessChain %645 %88 
                                 i32 %1329 = OpLoad %1328 
                                bool %1330 = OpINotEqual %1329 %32 
                                               OpSelectionMerge %1332 None 
                                               OpBranchConditional %1330 %1331 %1332 
                                     %1331 = OpLabel 
                        Private i32* %1333 = OpAccessChain %583 %88 
                                 i32 %1334 = OpLoad %1333 
                                bool %1335 = OpIEqual %1334 %32 
                                               OpSelectionMerge %1337 None 
                                               OpBranchConditional %1335 %1336 %1337 
                                     %1336 = OpLabel 
                               f32_3 %1338 = OpLoad %237 
                               f32_2 %1339 = OpVectorShuffle %1338 %1338 0 2 
                               f32_3 %1340 = OpLoad %249 
                               f32_3 %1341 = OpVectorShuffle %1340 %1339 3 1 4 
                                               OpStore %249 %1341 
                               f32_3 %1342 = OpLoad %249 
                               f32_2 %1343 = OpVectorShuffle %1342 %1342 0 2 
                               f32_2 %1344 = OpCompositeConstruct %18 %18 
                               f32_2 %1345 = OpCompositeConstruct %19 %19 
                               f32_2 %1346 = OpExtInst %1 43 %1343 %1344 %1345 
                               f32_3 %1347 = OpLoad %249 
                               f32_3 %1348 = OpVectorShuffle %1347 %1346 3 1 4 
                                               OpStore %249 %1348 
                               f32_3 %1349 = OpLoad %249 
                               f32_2 %1350 = OpVectorShuffle %1349 %1349 0 2 
                        Uniform f32* %1351 = OpAccessChain %30 %32 
                                 f32 %1352 = OpLoad %1351 
                               f32_2 %1353 = OpCompositeConstruct %1352 %1352 
                               f32_2 %1354 = OpFMul %1350 %1353 
                               f32_3 %1355 = OpLoad %249 
                               f32_3 %1356 = OpVectorShuffle %1355 %1354 3 1 4 
                                               OpStore %249 %1356 
                 read_only Texture2D %1357 = OpLoad %44 
                             sampler %1358 = OpLoad %48 
          read_only Texture2DSampled %1359 = OpSampledImage %1357 %1358 
                               f32_3 %1360 = OpLoad %249 
                               f32_2 %1361 = OpVectorShuffle %1360 %1360 0 2 
                               f32_4 %1362 = OpImageSampleExplicitLod %1359 %1361 Lod %27 
                                 f32 %1363 = OpCompositeExtract %1362 1 
                        Private f32* %1364 = OpAccessChain %119 %88 
                                               OpStore %1364 %1363 
                                               OpBranch %1337 
                                     %1337 = OpLabel 
                        Private i32* %1365 = OpAccessChain %583 %67 
                                 i32 %1366 = OpLoad %1365 
                                bool %1367 = OpIEqual %1366 %32 
                                               OpSelectionMerge %1369 None 
                                               OpBranchConditional %1367 %1368 %1369 
                                     %1368 = OpLabel 
                               f32_3 %1370 = OpLoad %483 
                               f32_2 %1371 = OpVectorShuffle %1370 %1370 0 2 
                               f32_3 %1372 = OpLoad %249 
                               f32_3 %1373 = OpVectorShuffle %1372 %1371 3 1 4 
                                               OpStore %249 %1373 
                               f32_3 %1374 = OpLoad %249 
                               f32_2 %1375 = OpVectorShuffle %1374 %1374 0 2 
                               f32_2 %1376 = OpCompositeConstruct %18 %18 
                               f32_2 %1377 = OpCompositeConstruct %19 %19 
                               f32_2 %1378 = OpExtInst %1 43 %1375 %1376 %1377 
                               f32_3 %1379 = OpLoad %249 
                               f32_3 %1380 = OpVectorShuffle %1379 %1378 3 1 4 
                                               OpStore %249 %1380 
                               f32_3 %1381 = OpLoad %249 
                               f32_2 %1382 = OpVectorShuffle %1381 %1381 0 2 
                        Uniform f32* %1383 = OpAccessChain %30 %32 
                                 f32 %1384 = OpLoad %1383 
                               f32_2 %1385 = OpCompositeConstruct %1384 %1384 
                               f32_2 %1386 = OpFMul %1382 %1385 
                               f32_3 %1387 = OpLoad %249 
                               f32_3 %1388 = OpVectorShuffle %1387 %1386 3 1 4 
                                               OpStore %249 %1388 
                 read_only Texture2D %1389 = OpLoad %44 
                             sampler %1390 = OpLoad %48 
          read_only Texture2DSampled %1391 = OpSampledImage %1389 %1390 
                               f32_3 %1392 = OpLoad %249 
                               f32_2 %1393 = OpVectorShuffle %1392 %1392 0 2 
                               f32_4 %1394 = OpImageSampleExplicitLod %1391 %1393 Lod %27 
                                 f32 %1395 = OpCompositeExtract %1394 1 
                        Private f32* %1396 = OpAccessChain %119 %67 
                                               OpStore %1396 %1395 
                                               OpBranch %1369 
                                     %1369 = OpLabel 
                                 f32 %1397 = OpLoad %56 
                                 f32 %1398 = OpFNegate %1397 
                                 f32 %1399 = OpFMul %1398 %447 
                        Private f32* %1400 = OpAccessChain %119 %88 
                                 f32 %1401 = OpLoad %1400 
                                 f32 %1402 = OpFAdd %1399 %1401 
                        Private f32* %1403 = OpAccessChain %249 %88 
                                               OpStore %1403 %1402 
                        Private i32* %1404 = OpAccessChain %583 %88 
                                 i32 %1405 = OpLoad %1404 
                                bool %1406 = OpINotEqual %1405 %32 
                                               OpSelectionMerge %1409 None 
                                               OpBranchConditional %1406 %1408 %1412 
                                     %1408 = OpLabel 
                        Private f32* %1410 = OpAccessChain %119 %88 
                                 f32 %1411 = OpLoad %1410 
                                               OpStore %1407 %1411 
                                               OpBranch %1409 
                                     %1412 = OpLabel 
                        Private f32* %1413 = OpAccessChain %249 %88 
                                 f32 %1414 = OpLoad %1413 
                                               OpStore %1407 %1414 
                                               OpBranch %1409 
                                     %1409 = OpLabel 
                                 f32 %1415 = OpLoad %1407 
                        Private f32* %1416 = OpAccessChain %119 %88 
                                               OpStore %1416 %1415 
                                 f32 %1417 = OpLoad %56 
                                 f32 %1418 = OpFNegate %1417 
                                 f32 %1419 = OpFMul %1418 %447 
                        Private f32* %1420 = OpAccessChain %119 %67 
                                 f32 %1421 = OpLoad %1420 
                                 f32 %1422 = OpFAdd %1419 %1421 
                        Private f32* %1423 = OpAccessChain %207 %88 
                                               OpStore %1423 %1422 
                        Private i32* %1424 = OpAccessChain %583 %67 
                                 i32 %1425 = OpLoad %1424 
                                bool %1426 = OpINotEqual %1425 %32 
                                               OpSelectionMerge %1429 None 
                                               OpBranchConditional %1426 %1428 %1432 
                                     %1428 = OpLabel 
                        Private f32* %1430 = OpAccessChain %119 %67 
                                 f32 %1431 = OpLoad %1430 
                                               OpStore %1427 %1431 
                                               OpBranch %1429 
                                     %1432 = OpLabel 
                        Private f32* %1433 = OpAccessChain %207 %88 
                                 f32 %1434 = OpLoad %1433 
                                               OpStore %1427 %1434 
                                               OpBranch %1429 
                                     %1429 = OpLabel 
                                 f32 %1435 = OpLoad %1427 
                        Private f32* %1436 = OpAccessChain %119 %67 
                                               OpStore %1436 %1435 
                               f32_3 %1437 = OpLoad %119 
                               f32_4 %1438 = OpVectorShuffle %1437 %1437 0 1 0 1 
                               f32_4 %1439 = OpExtInst %1 4 %1438 
                               f32_3 %1440 = OpLoad %78 
                               f32_4 %1441 = OpVectorShuffle %1440 %1440 0 0 0 0 
                              bool_4 %1442 = OpFOrdGreaterThanEqual %1439 %1441 
                              bool_2 %1443 = OpVectorShuffle %1442 %1442 0 1 
                               u32_2 %1444 = OpSelect %1443 %595 %594 
                               u32_2 %1445 = OpCompositeConstruct %566 %566 
                               u32_2 %1446 = OpIMul %1444 %1445 
                               i32_2 %1447 = OpBitcast %1446 
                                               OpStore %583 %1447 
                        Private f32* %1448 = OpAccessChain %100 %88 
                                 f32 %1449 = OpLoad %1448 
                                 f32 %1450 = OpFNegate %1449 
                                 f32 %1451 = OpFMul %1450 %276 
                        Private f32* %1452 = OpAccessChain %237 %88 
                                 f32 %1453 = OpLoad %1452 
                                 f32 %1454 = OpFAdd %1451 %1453 
                        Private f32* %1455 = OpAccessChain %249 %88 
                                               OpStore %1455 %1454 
                        Private i32* %1456 = OpAccessChain %583 %88 
                                 i32 %1457 = OpLoad %1456 
                                bool %1458 = OpINotEqual %1457 %32 
                                               OpSelectionMerge %1461 None 
                                               OpBranchConditional %1458 %1460 %1464 
                                     %1460 = OpLabel 
                        Private f32* %1462 = OpAccessChain %237 %88 
                                 f32 %1463 = OpLoad %1462 
                                               OpStore %1459 %1463 
                                               OpBranch %1461 
                                     %1464 = OpLabel 
                        Private f32* %1465 = OpAccessChain %249 %88 
                                 f32 %1466 = OpLoad %1465 
                                               OpStore %1459 %1466 
                                               OpBranch %1461 
                                     %1461 = OpLabel 
                                 f32 %1467 = OpLoad %1459 
                        Private f32* %1468 = OpAccessChain %237 %88 
                                               OpStore %1468 %1467 
                        Private f32* %1469 = OpAccessChain %100 %67 
                                 f32 %1470 = OpLoad %1469 
                                 f32 %1471 = OpFNegate %1470 
                                 f32 %1472 = OpFMul %1471 %276 
                        Private f32* %1473 = OpAccessChain %237 %641 
                                 f32 %1474 = OpLoad %1473 
                                 f32 %1475 = OpFAdd %1472 %1474 
                        Private f32* %1476 = OpAccessChain %249 %88 
                                               OpStore %1476 %1475 
                        Private i32* %1477 = OpAccessChain %583 %88 
                                 i32 %1478 = OpLoad %1477 
                                bool %1479 = OpINotEqual %1478 %32 
                                               OpSelectionMerge %1482 None 
                                               OpBranchConditional %1479 %1481 %1485 
                                     %1481 = OpLabel 
                        Private f32* %1483 = OpAccessChain %237 %641 
                                 f32 %1484 = OpLoad %1483 
                                               OpStore %1480 %1484 
                                               OpBranch %1482 
                                     %1485 = OpLabel 
                        Private f32* %1486 = OpAccessChain %249 %88 
                                 f32 %1487 = OpLoad %1486 
                                               OpStore %1480 %1487 
                                               OpBranch %1482 
                                     %1482 = OpLabel 
                                 f32 %1488 = OpLoad %1480 
                        Private f32* %1489 = OpAccessChain %237 %641 
                                               OpStore %1489 %1488 
                               i32_2 %1490 = OpLoad %583 
                               i32_2 %1491 = OpNot %1490 
                               i32_3 %1492 = OpLoad %645 
                               i32_3 %1493 = OpVectorShuffle %1492 %1491 3 1 4 
                                               OpStore %645 %1493 
                        Private i32* %1494 = OpAccessChain %645 %641 
                                 i32 %1495 = OpLoad %1494 
                                 u32 %1496 = OpBitcast %1495 
                        Private i32* %1497 = OpAccessChain %645 %88 
                                 i32 %1498 = OpLoad %1497 
                                 u32 %1499 = OpBitcast %1498 
                                 u32 %1500 = OpBitwiseOr %1496 %1499 
                                 i32 %1501 = OpBitcast %1500 
                        Private i32* %1502 = OpAccessChain %645 %88 
                                               OpStore %1502 %1501 
                        Private f32* %1503 = OpAccessChain %100 %88 
                                 f32 %1504 = OpLoad %1503 
                                 f32 %1505 = OpFMul %1504 %276 
                        Private f32* %1506 = OpAccessChain %483 %88 
                                 f32 %1507 = OpLoad %1506 
                                 f32 %1508 = OpFAdd %1505 %1507 
                                               OpStore %622 %1508 
                        Private i32* %1509 = OpAccessChain %583 %67 
                                 i32 %1510 = OpLoad %1509 
                                bool %1511 = OpINotEqual %1510 %32 
                                               OpSelectionMerge %1514 None 
                                               OpBranchConditional %1511 %1513 %1517 
                                     %1513 = OpLabel 
                        Private f32* %1515 = OpAccessChain %483 %88 
                                 f32 %1516 = OpLoad %1515 
                                               OpStore %1512 %1516 
                                               OpBranch %1514 
                                     %1517 = OpLabel 
                                 f32 %1518 = OpLoad %622 
                                               OpStore %1512 %1518 
                                               OpBranch %1514 
                                     %1514 = OpLabel 
                                 f32 %1519 = OpLoad %1512 
                        Private f32* %1520 = OpAccessChain %483 %88 
                                               OpStore %1520 %1519 
                        Private f32* %1521 = OpAccessChain %100 %67 
                                 f32 %1522 = OpLoad %1521 
                                 f32 %1523 = OpFMul %1522 %276 
                        Private f32* %1524 = OpAccessChain %483 %641 
                                 f32 %1525 = OpLoad %1524 
                                 f32 %1526 = OpFAdd %1523 %1525 
                                               OpStore %622 %1526 
                        Private i32* %1527 = OpAccessChain %583 %67 
                                 i32 %1528 = OpLoad %1527 
                                bool %1529 = OpINotEqual %1528 %32 
                                               OpSelectionMerge %1532 None 
                                               OpBranchConditional %1529 %1531 %1535 
                                     %1531 = OpLabel 
                        Private f32* %1533 = OpAccessChain %483 %641 
                                 f32 %1534 = OpLoad %1533 
                                               OpStore %1530 %1534 
                                               OpBranch %1532 
                                     %1535 = OpLabel 
                                 f32 %1536 = OpLoad %622 
                                               OpStore %1530 %1536 
                                               OpBranch %1532 
                                     %1532 = OpLabel 
                                 f32 %1537 = OpLoad %1530 
                        Private f32* %1538 = OpAccessChain %483 %641 
                                               OpStore %1538 %1537 
                        Private i32* %1539 = OpAccessChain %645 %88 
                                 i32 %1540 = OpLoad %1539 
                                bool %1541 = OpINotEqual %1540 %32 
                                               OpSelectionMerge %1543 None 
                                               OpBranchConditional %1541 %1542 %1543 
                                     %1542 = OpLabel 
                        Private i32* %1544 = OpAccessChain %583 %88 
                                 i32 %1545 = OpLoad %1544 
                                bool %1546 = OpIEqual %1545 %32 
                                               OpSelectionMerge %1548 None 
                                               OpBranchConditional %1546 %1547 %1548 
                                     %1547 = OpLabel 
                               f32_3 %1549 = OpLoad %237 
                               f32_2 %1550 = OpVectorShuffle %1549 %1549 0 2 
                               f32_3 %1551 = OpLoad %249 
                               f32_3 %1552 = OpVectorShuffle %1551 %1550 3 1 4 
                                               OpStore %249 %1552 
                               f32_3 %1553 = OpLoad %249 
                               f32_2 %1554 = OpVectorShuffle %1553 %1553 0 2 
                               f32_2 %1555 = OpCompositeConstruct %18 %18 
                               f32_2 %1556 = OpCompositeConstruct %19 %19 
                               f32_2 %1557 = OpExtInst %1 43 %1554 %1555 %1556 
                               f32_3 %1558 = OpLoad %249 
                               f32_3 %1559 = OpVectorShuffle %1558 %1557 3 1 4 
                                               OpStore %249 %1559 
                               f32_3 %1560 = OpLoad %249 
                               f32_2 %1561 = OpVectorShuffle %1560 %1560 0 2 
                        Uniform f32* %1562 = OpAccessChain %30 %32 
                                 f32 %1563 = OpLoad %1562 
                               f32_2 %1564 = OpCompositeConstruct %1563 %1563 
                               f32_2 %1565 = OpFMul %1561 %1564 
                               f32_3 %1566 = OpLoad %249 
                               f32_3 %1567 = OpVectorShuffle %1566 %1565 3 1 4 
                                               OpStore %249 %1567 
                 read_only Texture2D %1568 = OpLoad %44 
                             sampler %1569 = OpLoad %48 
          read_only Texture2DSampled %1570 = OpSampledImage %1568 %1569 
                               f32_3 %1571 = OpLoad %249 
                               f32_2 %1572 = OpVectorShuffle %1571 %1571 0 2 
                               f32_4 %1573 = OpImageSampleExplicitLod %1570 %1572 Lod %27 
                                 f32 %1574 = OpCompositeExtract %1573 1 
                        Private f32* %1575 = OpAccessChain %119 %88 
                                               OpStore %1575 %1574 
                                               OpBranch %1548 
                                     %1548 = OpLabel 
                        Private i32* %1576 = OpAccessChain %583 %67 
                                 i32 %1577 = OpLoad %1576 
                                bool %1578 = OpIEqual %1577 %32 
                                               OpSelectionMerge %1580 None 
                                               OpBranchConditional %1578 %1579 %1580 
                                     %1579 = OpLabel 
                               f32_3 %1581 = OpLoad %483 
                               f32_2 %1582 = OpVectorShuffle %1581 %1581 0 2 
                               f32_3 %1583 = OpLoad %249 
                               f32_3 %1584 = OpVectorShuffle %1583 %1582 3 1 4 
                                               OpStore %249 %1584 
                               f32_3 %1585 = OpLoad %249 
                               f32_2 %1586 = OpVectorShuffle %1585 %1585 0 2 
                               f32_2 %1587 = OpCompositeConstruct %18 %18 
                               f32_2 %1588 = OpCompositeConstruct %19 %19 
                               f32_2 %1589 = OpExtInst %1 43 %1586 %1587 %1588 
                               f32_3 %1590 = OpLoad %249 
                               f32_3 %1591 = OpVectorShuffle %1590 %1589 3 1 4 
                                               OpStore %249 %1591 
                               f32_3 %1592 = OpLoad %249 
                               f32_2 %1593 = OpVectorShuffle %1592 %1592 0 2 
                        Uniform f32* %1594 = OpAccessChain %30 %32 
                                 f32 %1595 = OpLoad %1594 
                               f32_2 %1596 = OpCompositeConstruct %1595 %1595 
                               f32_2 %1597 = OpFMul %1593 %1596 
                               f32_3 %1598 = OpLoad %249 
                               f32_3 %1599 = OpVectorShuffle %1598 %1597 3 1 4 
                                               OpStore %249 %1599 
                 read_only Texture2D %1600 = OpLoad %44 
                             sampler %1601 = OpLoad %48 
          read_only Texture2DSampled %1602 = OpSampledImage %1600 %1601 
                               f32_3 %1603 = OpLoad %249 
                               f32_2 %1604 = OpVectorShuffle %1603 %1603 0 2 
                               f32_4 %1605 = OpImageSampleExplicitLod %1602 %1604 Lod %27 
                                 f32 %1606 = OpCompositeExtract %1605 1 
                        Private f32* %1607 = OpAccessChain %119 %67 
                                               OpStore %1607 %1606 
                                               OpBranch %1580 
                                     %1580 = OpLabel 
                                 f32 %1608 = OpLoad %56 
                                 f32 %1609 = OpFNegate %1608 
                                 f32 %1610 = OpFMul %1609 %447 
                        Private f32* %1611 = OpAccessChain %119 %88 
                                 f32 %1612 = OpLoad %1611 
                                 f32 %1613 = OpFAdd %1610 %1612 
                        Private f32* %1614 = OpAccessChain %249 %88 
                                               OpStore %1614 %1613 
                        Private i32* %1615 = OpAccessChain %583 %88 
                                 i32 %1616 = OpLoad %1615 
                                bool %1617 = OpINotEqual %1616 %32 
                                               OpSelectionMerge %1620 None 
                                               OpBranchConditional %1617 %1619 %1623 
                                     %1619 = OpLabel 
                        Private f32* %1621 = OpAccessChain %119 %88 
                                 f32 %1622 = OpLoad %1621 
                                               OpStore %1618 %1622 
                                               OpBranch %1620 
                                     %1623 = OpLabel 
                        Private f32* %1624 = OpAccessChain %249 %88 
                                 f32 %1625 = OpLoad %1624 
                                               OpStore %1618 %1625 
                                               OpBranch %1620 
                                     %1620 = OpLabel 
                                 f32 %1626 = OpLoad %1618 
                        Private f32* %1627 = OpAccessChain %119 %88 
                                               OpStore %1627 %1626 
                                 f32 %1628 = OpLoad %56 
                                 f32 %1629 = OpFNegate %1628 
                                 f32 %1630 = OpFMul %1629 %447 
                        Private f32* %1631 = OpAccessChain %119 %67 
                                 f32 %1632 = OpLoad %1631 
                                 f32 %1633 = OpFAdd %1630 %1632 
                        Private f32* %1634 = OpAccessChain %207 %88 
                                               OpStore %1634 %1633 
                        Private i32* %1635 = OpAccessChain %583 %67 
                                 i32 %1636 = OpLoad %1635 
                                bool %1637 = OpINotEqual %1636 %32 
                                               OpSelectionMerge %1640 None 
                                               OpBranchConditional %1637 %1639 %1643 
                                     %1639 = OpLabel 
                        Private f32* %1641 = OpAccessChain %119 %67 
                                 f32 %1642 = OpLoad %1641 
                                               OpStore %1638 %1642 
                                               OpBranch %1640 
                                     %1643 = OpLabel 
                        Private f32* %1644 = OpAccessChain %207 %88 
                                 f32 %1645 = OpLoad %1644 
                                               OpStore %1638 %1645 
                                               OpBranch %1640 
                                     %1640 = OpLabel 
                                 f32 %1646 = OpLoad %1638 
                        Private f32* %1647 = OpAccessChain %119 %67 
                                               OpStore %1647 %1646 
                               f32_3 %1648 = OpLoad %119 
                               f32_4 %1649 = OpVectorShuffle %1648 %1648 0 1 0 1 
                               f32_4 %1650 = OpExtInst %1 4 %1649 
                               f32_3 %1651 = OpLoad %78 
                               f32_4 %1652 = OpVectorShuffle %1651 %1651 0 0 0 0 
                              bool_4 %1653 = OpFOrdGreaterThanEqual %1650 %1652 
                              bool_2 %1654 = OpVectorShuffle %1653 %1653 0 1 
                               u32_2 %1655 = OpSelect %1654 %595 %594 
                               u32_2 %1656 = OpCompositeConstruct %566 %566 
                               u32_2 %1657 = OpIMul %1655 %1656 
                               i32_2 %1658 = OpBitcast %1657 
                                               OpStore %583 %1658 
                        Private f32* %1659 = OpAccessChain %100 %88 
                                 f32 %1660 = OpLoad %1659 
                                 f32 %1661 = OpFNegate %1660 
                                 f32 %1662 = OpFMul %1661 %276 
                        Private f32* %1663 = OpAccessChain %237 %88 
                                 f32 %1664 = OpLoad %1663 
                                 f32 %1665 = OpFAdd %1662 %1664 
                        Private f32* %1666 = OpAccessChain %249 %88 
                                               OpStore %1666 %1665 
                        Private i32* %1667 = OpAccessChain %583 %88 
                                 i32 %1668 = OpLoad %1667 
                                bool %1669 = OpINotEqual %1668 %32 
                                               OpSelectionMerge %1672 None 
                                               OpBranchConditional %1669 %1671 %1675 
                                     %1671 = OpLabel 
                        Private f32* %1673 = OpAccessChain %237 %88 
                                 f32 %1674 = OpLoad %1673 
                                               OpStore %1670 %1674 
                                               OpBranch %1672 
                                     %1675 = OpLabel 
                        Private f32* %1676 = OpAccessChain %249 %88 
                                 f32 %1677 = OpLoad %1676 
                                               OpStore %1670 %1677 
                                               OpBranch %1672 
                                     %1672 = OpLabel 
                                 f32 %1678 = OpLoad %1670 
                        Private f32* %1679 = OpAccessChain %237 %88 
                                               OpStore %1679 %1678 
                        Private f32* %1680 = OpAccessChain %100 %67 
                                 f32 %1681 = OpLoad %1680 
                                 f32 %1682 = OpFNegate %1681 
                                 f32 %1683 = OpFMul %1682 %276 
                        Private f32* %1684 = OpAccessChain %237 %641 
                                 f32 %1685 = OpLoad %1684 
                                 f32 %1686 = OpFAdd %1683 %1685 
                        Private f32* %1687 = OpAccessChain %249 %88 
                                               OpStore %1687 %1686 
                        Private i32* %1688 = OpAccessChain %583 %88 
                                 i32 %1689 = OpLoad %1688 
                                bool %1690 = OpINotEqual %1689 %32 
                                               OpSelectionMerge %1693 None 
                                               OpBranchConditional %1690 %1692 %1696 
                                     %1692 = OpLabel 
                        Private f32* %1694 = OpAccessChain %237 %641 
                                 f32 %1695 = OpLoad %1694 
                                               OpStore %1691 %1695 
                                               OpBranch %1693 
                                     %1696 = OpLabel 
                        Private f32* %1697 = OpAccessChain %249 %88 
                                 f32 %1698 = OpLoad %1697 
                                               OpStore %1691 %1698 
                                               OpBranch %1693 
                                     %1693 = OpLabel 
                                 f32 %1699 = OpLoad %1691 
                        Private f32* %1700 = OpAccessChain %237 %641 
                                               OpStore %1700 %1699 
                               i32_2 %1701 = OpLoad %583 
                               i32_2 %1702 = OpNot %1701 
                               i32_3 %1703 = OpLoad %645 
                               i32_3 %1704 = OpVectorShuffle %1703 %1702 3 1 4 
                                               OpStore %645 %1704 
                        Private i32* %1705 = OpAccessChain %645 %641 
                                 i32 %1706 = OpLoad %1705 
                                 u32 %1707 = OpBitcast %1706 
                        Private i32* %1708 = OpAccessChain %645 %88 
                                 i32 %1709 = OpLoad %1708 
                                 u32 %1710 = OpBitcast %1709 
                                 u32 %1711 = OpBitwiseOr %1707 %1710 
                                 i32 %1712 = OpBitcast %1711 
                        Private i32* %1713 = OpAccessChain %645 %88 
                                               OpStore %1713 %1712 
                        Private f32* %1714 = OpAccessChain %100 %88 
                                 f32 %1715 = OpLoad %1714 
                                 f32 %1716 = OpFMul %1715 %276 
                        Private f32* %1717 = OpAccessChain %483 %88 
                                 f32 %1718 = OpLoad %1717 
                                 f32 %1719 = OpFAdd %1716 %1718 
                                               OpStore %622 %1719 
                        Private i32* %1720 = OpAccessChain %583 %67 
                                 i32 %1721 = OpLoad %1720 
                                bool %1722 = OpINotEqual %1721 %32 
                                               OpSelectionMerge %1725 None 
                                               OpBranchConditional %1722 %1724 %1728 
                                     %1724 = OpLabel 
                        Private f32* %1726 = OpAccessChain %483 %88 
                                 f32 %1727 = OpLoad %1726 
                                               OpStore %1723 %1727 
                                               OpBranch %1725 
                                     %1728 = OpLabel 
                                 f32 %1729 = OpLoad %622 
                                               OpStore %1723 %1729 
                                               OpBranch %1725 
                                     %1725 = OpLabel 
                                 f32 %1730 = OpLoad %1723 
                        Private f32* %1731 = OpAccessChain %483 %88 
                                               OpStore %1731 %1730 
                        Private f32* %1732 = OpAccessChain %100 %67 
                                 f32 %1733 = OpLoad %1732 
                                 f32 %1734 = OpFMul %1733 %276 
                        Private f32* %1735 = OpAccessChain %483 %641 
                                 f32 %1736 = OpLoad %1735 
                                 f32 %1737 = OpFAdd %1734 %1736 
                                               OpStore %622 %1737 
                        Private i32* %1738 = OpAccessChain %583 %67 
                                 i32 %1739 = OpLoad %1738 
                                bool %1740 = OpINotEqual %1739 %32 
                                               OpSelectionMerge %1743 None 
                                               OpBranchConditional %1740 %1742 %1746 
                                     %1742 = OpLabel 
                        Private f32* %1744 = OpAccessChain %483 %641 
                                 f32 %1745 = OpLoad %1744 
                                               OpStore %1741 %1745 
                                               OpBranch %1743 
                                     %1746 = OpLabel 
                                 f32 %1747 = OpLoad %622 
                                               OpStore %1741 %1747 
                                               OpBranch %1743 
                                     %1743 = OpLabel 
                                 f32 %1748 = OpLoad %1741 
                        Private f32* %1749 = OpAccessChain %483 %641 
                                               OpStore %1749 %1748 
                        Private i32* %1750 = OpAccessChain %645 %88 
                                 i32 %1751 = OpLoad %1750 
                                bool %1752 = OpINotEqual %1751 %32 
                                               OpSelectionMerge %1754 None 
                                               OpBranchConditional %1752 %1753 %1754 
                                     %1753 = OpLabel 
                        Private i32* %1755 = OpAccessChain %583 %88 
                                 i32 %1756 = OpLoad %1755 
                                bool %1757 = OpIEqual %1756 %32 
                                               OpSelectionMerge %1759 None 
                                               OpBranchConditional %1757 %1758 %1759 
                                     %1758 = OpLabel 
                               f32_3 %1760 = OpLoad %237 
                               f32_2 %1761 = OpVectorShuffle %1760 %1760 0 2 
                               f32_3 %1762 = OpLoad %249 
                               f32_3 %1763 = OpVectorShuffle %1762 %1761 3 1 4 
                                               OpStore %249 %1763 
                               f32_3 %1764 = OpLoad %249 
                               f32_2 %1765 = OpVectorShuffle %1764 %1764 0 2 
                               f32_2 %1766 = OpCompositeConstruct %18 %18 
                               f32_2 %1767 = OpCompositeConstruct %19 %19 
                               f32_2 %1768 = OpExtInst %1 43 %1765 %1766 %1767 
                               f32_3 %1769 = OpLoad %249 
                               f32_3 %1770 = OpVectorShuffle %1769 %1768 3 1 4 
                                               OpStore %249 %1770 
                               f32_3 %1771 = OpLoad %249 
                               f32_2 %1772 = OpVectorShuffle %1771 %1771 0 2 
                        Uniform f32* %1773 = OpAccessChain %30 %32 
                                 f32 %1774 = OpLoad %1773 
                               f32_2 %1775 = OpCompositeConstruct %1774 %1774 
                               f32_2 %1776 = OpFMul %1772 %1775 
                               f32_3 %1777 = OpLoad %249 
                               f32_3 %1778 = OpVectorShuffle %1777 %1776 3 1 4 
                                               OpStore %249 %1778 
                 read_only Texture2D %1779 = OpLoad %44 
                             sampler %1780 = OpLoad %48 
          read_only Texture2DSampled %1781 = OpSampledImage %1779 %1780 
                               f32_3 %1782 = OpLoad %249 
                               f32_2 %1783 = OpVectorShuffle %1782 %1782 0 2 
                               f32_4 %1784 = OpImageSampleExplicitLod %1781 %1783 Lod %27 
                                 f32 %1785 = OpCompositeExtract %1784 1 
                        Private f32* %1786 = OpAccessChain %119 %88 
                                               OpStore %1786 %1785 
                                               OpBranch %1759 
                                     %1759 = OpLabel 
                        Private i32* %1787 = OpAccessChain %583 %67 
                                 i32 %1788 = OpLoad %1787 
                                bool %1789 = OpIEqual %1788 %32 
                                               OpSelectionMerge %1791 None 
                                               OpBranchConditional %1789 %1790 %1791 
                                     %1790 = OpLabel 
                               f32_3 %1792 = OpLoad %483 
                               f32_2 %1793 = OpVectorShuffle %1792 %1792 0 2 
                               f32_3 %1794 = OpLoad %249 
                               f32_3 %1795 = OpVectorShuffle %1794 %1793 3 1 4 
                                               OpStore %249 %1795 
                               f32_3 %1796 = OpLoad %249 
                               f32_2 %1797 = OpVectorShuffle %1796 %1796 0 2 
                               f32_2 %1798 = OpCompositeConstruct %18 %18 
                               f32_2 %1799 = OpCompositeConstruct %19 %19 
                               f32_2 %1800 = OpExtInst %1 43 %1797 %1798 %1799 
                               f32_3 %1801 = OpLoad %249 
                               f32_3 %1802 = OpVectorShuffle %1801 %1800 3 1 4 
                                               OpStore %249 %1802 
                               f32_3 %1803 = OpLoad %249 
                               f32_2 %1804 = OpVectorShuffle %1803 %1803 0 2 
                        Uniform f32* %1805 = OpAccessChain %30 %32 
                                 f32 %1806 = OpLoad %1805 
                               f32_2 %1807 = OpCompositeConstruct %1806 %1806 
                               f32_2 %1808 = OpFMul %1804 %1807 
                               f32_3 %1809 = OpLoad %249 
                               f32_3 %1810 = OpVectorShuffle %1809 %1808 3 1 4 
                                               OpStore %249 %1810 
                 read_only Texture2D %1811 = OpLoad %44 
                             sampler %1812 = OpLoad %48 
          read_only Texture2DSampled %1813 = OpSampledImage %1811 %1812 
                               f32_3 %1814 = OpLoad %249 
                               f32_2 %1815 = OpVectorShuffle %1814 %1814 0 2 
                               f32_4 %1816 = OpImageSampleExplicitLod %1813 %1815 Lod %27 
                                 f32 %1817 = OpCompositeExtract %1816 1 
                        Private f32* %1818 = OpAccessChain %119 %67 
                                               OpStore %1818 %1817 
                                               OpBranch %1791 
                                     %1791 = OpLabel 
                                 f32 %1819 = OpLoad %56 
                                 f32 %1820 = OpFNegate %1819 
                                 f32 %1821 = OpFMul %1820 %447 
                        Private f32* %1822 = OpAccessChain %119 %88 
                                 f32 %1823 = OpLoad %1822 
                                 f32 %1824 = OpFAdd %1821 %1823 
                        Private f32* %1825 = OpAccessChain %249 %88 
                                               OpStore %1825 %1824 
                        Private i32* %1826 = OpAccessChain %583 %88 
                                 i32 %1827 = OpLoad %1826 
                                bool %1828 = OpINotEqual %1827 %32 
                                               OpSelectionMerge %1831 None 
                                               OpBranchConditional %1828 %1830 %1834 
                                     %1830 = OpLabel 
                        Private f32* %1832 = OpAccessChain %119 %88 
                                 f32 %1833 = OpLoad %1832 
                                               OpStore %1829 %1833 
                                               OpBranch %1831 
                                     %1834 = OpLabel 
                        Private f32* %1835 = OpAccessChain %249 %88 
                                 f32 %1836 = OpLoad %1835 
                                               OpStore %1829 %1836 
                                               OpBranch %1831 
                                     %1831 = OpLabel 
                                 f32 %1837 = OpLoad %1829 
                        Private f32* %1838 = OpAccessChain %119 %88 
                                               OpStore %1838 %1837 
                                 f32 %1839 = OpLoad %56 
                                 f32 %1840 = OpFNegate %1839 
                                 f32 %1841 = OpFMul %1840 %447 
                        Private f32* %1842 = OpAccessChain %119 %67 
                                 f32 %1843 = OpLoad %1842 
                                 f32 %1844 = OpFAdd %1841 %1843 
                        Private f32* %1845 = OpAccessChain %207 %88 
                                               OpStore %1845 %1844 
                        Private i32* %1846 = OpAccessChain %583 %67 
                                 i32 %1847 = OpLoad %1846 
                                bool %1848 = OpINotEqual %1847 %32 
                                               OpSelectionMerge %1851 None 
                                               OpBranchConditional %1848 %1850 %1854 
                                     %1850 = OpLabel 
                        Private f32* %1852 = OpAccessChain %119 %67 
                                 f32 %1853 = OpLoad %1852 
                                               OpStore %1849 %1853 
                                               OpBranch %1851 
                                     %1854 = OpLabel 
                        Private f32* %1855 = OpAccessChain %207 %88 
                                 f32 %1856 = OpLoad %1855 
                                               OpStore %1849 %1856 
                                               OpBranch %1851 
                                     %1851 = OpLabel 
                                 f32 %1857 = OpLoad %1849 
                        Private f32* %1858 = OpAccessChain %119 %67 
                                               OpStore %1858 %1857 
                               f32_3 %1859 = OpLoad %119 
                               f32_4 %1860 = OpVectorShuffle %1859 %1859 0 1 0 1 
                               f32_4 %1861 = OpExtInst %1 4 %1860 
                               f32_3 %1862 = OpLoad %78 
                               f32_4 %1863 = OpVectorShuffle %1862 %1862 0 0 0 0 
                              bool_4 %1864 = OpFOrdGreaterThanEqual %1861 %1863 
                              bool_2 %1865 = OpVectorShuffle %1864 %1864 0 1 
                               u32_2 %1866 = OpSelect %1865 %595 %594 
                               u32_2 %1867 = OpCompositeConstruct %566 %566 
                               u32_2 %1868 = OpIMul %1866 %1867 
                               i32_2 %1869 = OpBitcast %1868 
                                               OpStore %583 %1869 
                        Private f32* %1870 = OpAccessChain %100 %88 
                                 f32 %1871 = OpLoad %1870 
                                 f32 %1872 = OpFNegate %1871 
                                 f32 %1873 = OpFMul %1872 %276 
                        Private f32* %1874 = OpAccessChain %237 %88 
                                 f32 %1875 = OpLoad %1874 
                                 f32 %1876 = OpFAdd %1873 %1875 
                        Private f32* %1877 = OpAccessChain %249 %88 
                                               OpStore %1877 %1876 
                        Private i32* %1878 = OpAccessChain %583 %88 
                                 i32 %1879 = OpLoad %1878 
                                bool %1880 = OpINotEqual %1879 %32 
                                               OpSelectionMerge %1883 None 
                                               OpBranchConditional %1880 %1882 %1886 
                                     %1882 = OpLabel 
                        Private f32* %1884 = OpAccessChain %237 %88 
                                 f32 %1885 = OpLoad %1884 
                                               OpStore %1881 %1885 
                                               OpBranch %1883 
                                     %1886 = OpLabel 
                        Private f32* %1887 = OpAccessChain %249 %88 
                                 f32 %1888 = OpLoad %1887 
                                               OpStore %1881 %1888 
                                               OpBranch %1883 
                                     %1883 = OpLabel 
                                 f32 %1889 = OpLoad %1881 
                        Private f32* %1890 = OpAccessChain %237 %88 
                                               OpStore %1890 %1889 
                        Private f32* %1891 = OpAccessChain %100 %67 
                                 f32 %1892 = OpLoad %1891 
                                 f32 %1893 = OpFNegate %1892 
                                 f32 %1894 = OpFMul %1893 %276 
                        Private f32* %1895 = OpAccessChain %237 %641 
                                 f32 %1896 = OpLoad %1895 
                                 f32 %1897 = OpFAdd %1894 %1896 
                        Private f32* %1898 = OpAccessChain %249 %88 
                                               OpStore %1898 %1897 
                        Private i32* %1899 = OpAccessChain %583 %88 
                                 i32 %1900 = OpLoad %1899 
                                bool %1901 = OpINotEqual %1900 %32 
                                               OpSelectionMerge %1904 None 
                                               OpBranchConditional %1901 %1903 %1907 
                                     %1903 = OpLabel 
                        Private f32* %1905 = OpAccessChain %237 %641 
                                 f32 %1906 = OpLoad %1905 
                                               OpStore %1902 %1906 
                                               OpBranch %1904 
                                     %1907 = OpLabel 
                        Private f32* %1908 = OpAccessChain %249 %88 
                                 f32 %1909 = OpLoad %1908 
                                               OpStore %1902 %1909 
                                               OpBranch %1904 
                                     %1904 = OpLabel 
                                 f32 %1910 = OpLoad %1902 
                        Private f32* %1911 = OpAccessChain %237 %641 
                                               OpStore %1911 %1910 
                               i32_2 %1912 = OpLoad %583 
                               i32_2 %1913 = OpNot %1912 
                               i32_3 %1914 = OpLoad %645 
                               i32_3 %1915 = OpVectorShuffle %1914 %1913 3 1 4 
                                               OpStore %645 %1915 
                        Private i32* %1916 = OpAccessChain %645 %641 
                                 i32 %1917 = OpLoad %1916 
                                 u32 %1918 = OpBitcast %1917 
                        Private i32* %1919 = OpAccessChain %645 %88 
                                 i32 %1920 = OpLoad %1919 
                                 u32 %1921 = OpBitcast %1920 
                                 u32 %1922 = OpBitwiseOr %1918 %1921 
                                 i32 %1923 = OpBitcast %1922 
                        Private i32* %1924 = OpAccessChain %645 %88 
                                               OpStore %1924 %1923 
                        Private f32* %1925 = OpAccessChain %100 %88 
                                 f32 %1926 = OpLoad %1925 
                                 f32 %1927 = OpFMul %1926 %276 
                        Private f32* %1928 = OpAccessChain %483 %88 
                                 f32 %1929 = OpLoad %1928 
                                 f32 %1930 = OpFAdd %1927 %1929 
                                               OpStore %622 %1930 
                        Private i32* %1931 = OpAccessChain %583 %67 
                                 i32 %1932 = OpLoad %1931 
                                bool %1933 = OpINotEqual %1932 %32 
                                               OpSelectionMerge %1936 None 
                                               OpBranchConditional %1933 %1935 %1939 
                                     %1935 = OpLabel 
                        Private f32* %1937 = OpAccessChain %483 %88 
                                 f32 %1938 = OpLoad %1937 
                                               OpStore %1934 %1938 
                                               OpBranch %1936 
                                     %1939 = OpLabel 
                                 f32 %1940 = OpLoad %622 
                                               OpStore %1934 %1940 
                                               OpBranch %1936 
                                     %1936 = OpLabel 
                                 f32 %1941 = OpLoad %1934 
                        Private f32* %1942 = OpAccessChain %483 %88 
                                               OpStore %1942 %1941 
                        Private f32* %1943 = OpAccessChain %100 %67 
                                 f32 %1944 = OpLoad %1943 
                                 f32 %1945 = OpFMul %1944 %276 
                        Private f32* %1946 = OpAccessChain %483 %641 
                                 f32 %1947 = OpLoad %1946 
                                 f32 %1948 = OpFAdd %1945 %1947 
                                               OpStore %622 %1948 
                        Private i32* %1949 = OpAccessChain %583 %67 
                                 i32 %1950 = OpLoad %1949 
                                bool %1951 = OpINotEqual %1950 %32 
                                               OpSelectionMerge %1954 None 
                                               OpBranchConditional %1951 %1953 %1957 
                                     %1953 = OpLabel 
                        Private f32* %1955 = OpAccessChain %483 %641 
                                 f32 %1956 = OpLoad %1955 
                                               OpStore %1952 %1956 
                                               OpBranch %1954 
                                     %1957 = OpLabel 
                                 f32 %1958 = OpLoad %622 
                                               OpStore %1952 %1958 
                                               OpBranch %1954 
                                     %1954 = OpLabel 
                                 f32 %1959 = OpLoad %1952 
                        Private f32* %1960 = OpAccessChain %483 %641 
                                               OpStore %1960 %1959 
                        Private i32* %1961 = OpAccessChain %645 %88 
                                 i32 %1962 = OpLoad %1961 
                                bool %1963 = OpINotEqual %1962 %32 
                                               OpSelectionMerge %1965 None 
                                               OpBranchConditional %1963 %1964 %1965 
                                     %1964 = OpLabel 
                        Private i32* %1966 = OpAccessChain %583 %88 
                                 i32 %1967 = OpLoad %1966 
                                bool %1968 = OpIEqual %1967 %32 
                                               OpSelectionMerge %1970 None 
                                               OpBranchConditional %1968 %1969 %1970 
                                     %1969 = OpLabel 
                               f32_3 %1971 = OpLoad %237 
                               f32_2 %1972 = OpVectorShuffle %1971 %1971 0 2 
                               f32_3 %1973 = OpLoad %249 
                               f32_3 %1974 = OpVectorShuffle %1973 %1972 3 1 4 
                                               OpStore %249 %1974 
                               f32_3 %1975 = OpLoad %249 
                               f32_2 %1976 = OpVectorShuffle %1975 %1975 0 2 
                               f32_2 %1977 = OpCompositeConstruct %18 %18 
                               f32_2 %1978 = OpCompositeConstruct %19 %19 
                               f32_2 %1979 = OpExtInst %1 43 %1976 %1977 %1978 
                               f32_3 %1980 = OpLoad %249 
                               f32_3 %1981 = OpVectorShuffle %1980 %1979 3 1 4 
                                               OpStore %249 %1981 
                               f32_3 %1982 = OpLoad %249 
                               f32_2 %1983 = OpVectorShuffle %1982 %1982 0 2 
                        Uniform f32* %1984 = OpAccessChain %30 %32 
                                 f32 %1985 = OpLoad %1984 
                               f32_2 %1986 = OpCompositeConstruct %1985 %1985 
                               f32_2 %1987 = OpFMul %1983 %1986 
                               f32_3 %1988 = OpLoad %249 
                               f32_3 %1989 = OpVectorShuffle %1988 %1987 3 1 4 
                                               OpStore %249 %1989 
                 read_only Texture2D %1990 = OpLoad %44 
                             sampler %1991 = OpLoad %48 
          read_only Texture2DSampled %1992 = OpSampledImage %1990 %1991 
                               f32_3 %1993 = OpLoad %249 
                               f32_2 %1994 = OpVectorShuffle %1993 %1993 0 2 
                               f32_4 %1995 = OpImageSampleExplicitLod %1992 %1994 Lod %27 
                                 f32 %1996 = OpCompositeExtract %1995 1 
                        Private f32* %1997 = OpAccessChain %119 %88 
                                               OpStore %1997 %1996 
                                               OpBranch %1970 
                                     %1970 = OpLabel 
                        Private i32* %1998 = OpAccessChain %583 %67 
                                 i32 %1999 = OpLoad %1998 
                                bool %2000 = OpIEqual %1999 %32 
                                               OpSelectionMerge %2002 None 
                                               OpBranchConditional %2000 %2001 %2002 
                                     %2001 = OpLabel 
                               f32_3 %2003 = OpLoad %483 
                               f32_2 %2004 = OpVectorShuffle %2003 %2003 0 2 
                               f32_3 %2005 = OpLoad %249 
                               f32_3 %2006 = OpVectorShuffle %2005 %2004 3 1 4 
                                               OpStore %249 %2006 
                               f32_3 %2007 = OpLoad %249 
                               f32_2 %2008 = OpVectorShuffle %2007 %2007 0 2 
                               f32_2 %2009 = OpCompositeConstruct %18 %18 
                               f32_2 %2010 = OpCompositeConstruct %19 %19 
                               f32_2 %2011 = OpExtInst %1 43 %2008 %2009 %2010 
                               f32_3 %2012 = OpLoad %249 
                               f32_3 %2013 = OpVectorShuffle %2012 %2011 3 1 4 
                                               OpStore %249 %2013 
                               f32_3 %2014 = OpLoad %249 
                               f32_2 %2015 = OpVectorShuffle %2014 %2014 0 2 
                        Uniform f32* %2016 = OpAccessChain %30 %32 
                                 f32 %2017 = OpLoad %2016 
                               f32_2 %2018 = OpCompositeConstruct %2017 %2017 
                               f32_2 %2019 = OpFMul %2015 %2018 
                               f32_3 %2020 = OpLoad %249 
                               f32_3 %2021 = OpVectorShuffle %2020 %2019 3 1 4 
                                               OpStore %249 %2021 
                 read_only Texture2D %2022 = OpLoad %44 
                             sampler %2023 = OpLoad %48 
          read_only Texture2DSampled %2024 = OpSampledImage %2022 %2023 
                               f32_3 %2025 = OpLoad %249 
                               f32_2 %2026 = OpVectorShuffle %2025 %2025 0 2 
                               f32_4 %2027 = OpImageSampleExplicitLod %2024 %2026 Lod %27 
                                 f32 %2028 = OpCompositeExtract %2027 1 
                        Private f32* %2029 = OpAccessChain %119 %67 
                                               OpStore %2029 %2028 
                                               OpBranch %2002 
                                     %2002 = OpLabel 
                                 f32 %2030 = OpLoad %56 
                                 f32 %2031 = OpFNegate %2030 
                                 f32 %2032 = OpFMul %2031 %447 
                        Private f32* %2033 = OpAccessChain %119 %88 
                                 f32 %2034 = OpLoad %2033 
                                 f32 %2035 = OpFAdd %2032 %2034 
                        Private f32* %2036 = OpAccessChain %249 %88 
                                               OpStore %2036 %2035 
                        Private i32* %2037 = OpAccessChain %583 %88 
                                 i32 %2038 = OpLoad %2037 
                                bool %2039 = OpINotEqual %2038 %32 
                                               OpSelectionMerge %2042 None 
                                               OpBranchConditional %2039 %2041 %2045 
                                     %2041 = OpLabel 
                        Private f32* %2043 = OpAccessChain %119 %88 
                                 f32 %2044 = OpLoad %2043 
                                               OpStore %2040 %2044 
                                               OpBranch %2042 
                                     %2045 = OpLabel 
                        Private f32* %2046 = OpAccessChain %249 %88 
                                 f32 %2047 = OpLoad %2046 
                                               OpStore %2040 %2047 
                                               OpBranch %2042 
                                     %2042 = OpLabel 
                                 f32 %2048 = OpLoad %2040 
                        Private f32* %2049 = OpAccessChain %119 %88 
                                               OpStore %2049 %2048 
                                 f32 %2050 = OpLoad %56 
                                 f32 %2051 = OpFNegate %2050 
                                 f32 %2052 = OpFMul %2051 %447 
                        Private f32* %2053 = OpAccessChain %119 %67 
                                 f32 %2054 = OpLoad %2053 
                                 f32 %2055 = OpFAdd %2052 %2054 
                        Private f32* %2056 = OpAccessChain %207 %88 
                                               OpStore %2056 %2055 
                        Private i32* %2057 = OpAccessChain %583 %67 
                                 i32 %2058 = OpLoad %2057 
                                bool %2059 = OpINotEqual %2058 %32 
                                               OpSelectionMerge %2062 None 
                                               OpBranchConditional %2059 %2061 %2065 
                                     %2061 = OpLabel 
                        Private f32* %2063 = OpAccessChain %119 %67 
                                 f32 %2064 = OpLoad %2063 
                                               OpStore %2060 %2064 
                                               OpBranch %2062 
                                     %2065 = OpLabel 
                        Private f32* %2066 = OpAccessChain %207 %88 
                                 f32 %2067 = OpLoad %2066 
                                               OpStore %2060 %2067 
                                               OpBranch %2062 
                                     %2062 = OpLabel 
                                 f32 %2068 = OpLoad %2060 
                        Private f32* %2069 = OpAccessChain %119 %67 
                                               OpStore %2069 %2068 
                               f32_3 %2070 = OpLoad %119 
                               f32_4 %2071 = OpVectorShuffle %2070 %2070 0 1 0 1 
                               f32_4 %2072 = OpExtInst %1 4 %2071 
                               f32_3 %2073 = OpLoad %78 
                               f32_4 %2074 = OpVectorShuffle %2073 %2073 0 0 0 0 
                              bool_4 %2075 = OpFOrdGreaterThanEqual %2072 %2074 
                              bool_2 %2076 = OpVectorShuffle %2075 %2075 0 1 
                               u32_2 %2077 = OpSelect %2076 %595 %594 
                               u32_2 %2078 = OpCompositeConstruct %566 %566 
                               u32_2 %2079 = OpIMul %2077 %2078 
                               i32_2 %2080 = OpBitcast %2079 
                                               OpStore %583 %2080 
                        Private f32* %2081 = OpAccessChain %100 %88 
                                 f32 %2082 = OpLoad %2081 
                                 f32 %2083 = OpFNegate %2082 
                                 f32 %2084 = OpFMul %2083 %276 
                        Private f32* %2085 = OpAccessChain %237 %88 
                                 f32 %2086 = OpLoad %2085 
                                 f32 %2087 = OpFAdd %2084 %2086 
                        Private f32* %2088 = OpAccessChain %249 %88 
                                               OpStore %2088 %2087 
                        Private i32* %2089 = OpAccessChain %583 %88 
                                 i32 %2090 = OpLoad %2089 
                                bool %2091 = OpINotEqual %2090 %32 
                                               OpSelectionMerge %2094 None 
                                               OpBranchConditional %2091 %2093 %2097 
                                     %2093 = OpLabel 
                        Private f32* %2095 = OpAccessChain %237 %88 
                                 f32 %2096 = OpLoad %2095 
                                               OpStore %2092 %2096 
                                               OpBranch %2094 
                                     %2097 = OpLabel 
                        Private f32* %2098 = OpAccessChain %249 %88 
                                 f32 %2099 = OpLoad %2098 
                                               OpStore %2092 %2099 
                                               OpBranch %2094 
                                     %2094 = OpLabel 
                                 f32 %2100 = OpLoad %2092 
                        Private f32* %2101 = OpAccessChain %237 %88 
                                               OpStore %2101 %2100 
                        Private f32* %2102 = OpAccessChain %100 %67 
                                 f32 %2103 = OpLoad %2102 
                                 f32 %2104 = OpFNegate %2103 
                                 f32 %2105 = OpFMul %2104 %276 
                        Private f32* %2106 = OpAccessChain %237 %641 
                                 f32 %2107 = OpLoad %2106 
                                 f32 %2108 = OpFAdd %2105 %2107 
                        Private f32* %2109 = OpAccessChain %249 %88 
                                               OpStore %2109 %2108 
                        Private i32* %2110 = OpAccessChain %583 %88 
                                 i32 %2111 = OpLoad %2110 
                                bool %2112 = OpINotEqual %2111 %32 
                                               OpSelectionMerge %2115 None 
                                               OpBranchConditional %2112 %2114 %2118 
                                     %2114 = OpLabel 
                        Private f32* %2116 = OpAccessChain %237 %641 
                                 f32 %2117 = OpLoad %2116 
                                               OpStore %2113 %2117 
                                               OpBranch %2115 
                                     %2118 = OpLabel 
                        Private f32* %2119 = OpAccessChain %249 %88 
                                 f32 %2120 = OpLoad %2119 
                                               OpStore %2113 %2120 
                                               OpBranch %2115 
                                     %2115 = OpLabel 
                                 f32 %2121 = OpLoad %2113 
                        Private f32* %2122 = OpAccessChain %237 %641 
                                               OpStore %2122 %2121 
                               i32_2 %2123 = OpLoad %583 
                               i32_2 %2124 = OpNot %2123 
                               i32_3 %2125 = OpLoad %645 
                               i32_3 %2126 = OpVectorShuffle %2125 %2124 3 1 4 
                                               OpStore %645 %2126 
                        Private i32* %2127 = OpAccessChain %645 %641 
                                 i32 %2128 = OpLoad %2127 
                                 u32 %2129 = OpBitcast %2128 
                        Private i32* %2130 = OpAccessChain %645 %88 
                                 i32 %2131 = OpLoad %2130 
                                 u32 %2132 = OpBitcast %2131 
                                 u32 %2133 = OpBitwiseOr %2129 %2132 
                                 i32 %2134 = OpBitcast %2133 
                        Private i32* %2135 = OpAccessChain %645 %88 
                                               OpStore %2135 %2134 
                        Private f32* %2136 = OpAccessChain %100 %88 
                                 f32 %2137 = OpLoad %2136 
                                 f32 %2138 = OpFMul %2137 %276 
                        Private f32* %2139 = OpAccessChain %483 %88 
                                 f32 %2140 = OpLoad %2139 
                                 f32 %2141 = OpFAdd %2138 %2140 
                                               OpStore %622 %2141 
                        Private i32* %2142 = OpAccessChain %583 %67 
                                 i32 %2143 = OpLoad %2142 
                                bool %2144 = OpINotEqual %2143 %32 
                                               OpSelectionMerge %2147 None 
                                               OpBranchConditional %2144 %2146 %2150 
                                     %2146 = OpLabel 
                        Private f32* %2148 = OpAccessChain %483 %88 
                                 f32 %2149 = OpLoad %2148 
                                               OpStore %2145 %2149 
                                               OpBranch %2147 
                                     %2150 = OpLabel 
                                 f32 %2151 = OpLoad %622 
                                               OpStore %2145 %2151 
                                               OpBranch %2147 
                                     %2147 = OpLabel 
                                 f32 %2152 = OpLoad %2145 
                        Private f32* %2153 = OpAccessChain %483 %88 
                                               OpStore %2153 %2152 
                        Private f32* %2154 = OpAccessChain %100 %67 
                                 f32 %2155 = OpLoad %2154 
                                 f32 %2156 = OpFMul %2155 %276 
                        Private f32* %2157 = OpAccessChain %483 %641 
                                 f32 %2158 = OpLoad %2157 
                                 f32 %2159 = OpFAdd %2156 %2158 
                                               OpStore %622 %2159 
                        Private i32* %2160 = OpAccessChain %583 %67 
                                 i32 %2161 = OpLoad %2160 
                                bool %2162 = OpINotEqual %2161 %32 
                                               OpSelectionMerge %2165 None 
                                               OpBranchConditional %2162 %2164 %2168 
                                     %2164 = OpLabel 
                        Private f32* %2166 = OpAccessChain %483 %641 
                                 f32 %2167 = OpLoad %2166 
                                               OpStore %2163 %2167 
                                               OpBranch %2165 
                                     %2168 = OpLabel 
                                 f32 %2169 = OpLoad %622 
                                               OpStore %2163 %2169 
                                               OpBranch %2165 
                                     %2165 = OpLabel 
                                 f32 %2170 = OpLoad %2163 
                        Private f32* %2171 = OpAccessChain %483 %641 
                                               OpStore %2171 %2170 
                        Private i32* %2172 = OpAccessChain %645 %88 
                                 i32 %2173 = OpLoad %2172 
                                bool %2174 = OpINotEqual %2173 %32 
                                               OpSelectionMerge %2176 None 
                                               OpBranchConditional %2174 %2175 %2176 
                                     %2175 = OpLabel 
                        Private i32* %2177 = OpAccessChain %583 %88 
                                 i32 %2178 = OpLoad %2177 
                                bool %2179 = OpIEqual %2178 %32 
                                               OpSelectionMerge %2181 None 
                                               OpBranchConditional %2179 %2180 %2181 
                                     %2180 = OpLabel 
                               f32_3 %2182 = OpLoad %237 
                               f32_2 %2183 = OpVectorShuffle %2182 %2182 0 2 
                               f32_3 %2184 = OpLoad %249 
                               f32_3 %2185 = OpVectorShuffle %2184 %2183 3 1 4 
                                               OpStore %249 %2185 
                               f32_3 %2186 = OpLoad %249 
                               f32_2 %2187 = OpVectorShuffle %2186 %2186 0 2 
                               f32_2 %2188 = OpCompositeConstruct %18 %18 
                               f32_2 %2189 = OpCompositeConstruct %19 %19 
                               f32_2 %2190 = OpExtInst %1 43 %2187 %2188 %2189 
                               f32_3 %2191 = OpLoad %249 
                               f32_3 %2192 = OpVectorShuffle %2191 %2190 3 1 4 
                                               OpStore %249 %2192 
                               f32_3 %2193 = OpLoad %249 
                               f32_2 %2194 = OpVectorShuffle %2193 %2193 0 2 
                        Uniform f32* %2195 = OpAccessChain %30 %32 
                                 f32 %2196 = OpLoad %2195 
                               f32_2 %2197 = OpCompositeConstruct %2196 %2196 
                               f32_2 %2198 = OpFMul %2194 %2197 
                               f32_3 %2199 = OpLoad %249 
                               f32_3 %2200 = OpVectorShuffle %2199 %2198 3 1 4 
                                               OpStore %249 %2200 
                 read_only Texture2D %2201 = OpLoad %44 
                             sampler %2202 = OpLoad %48 
          read_only Texture2DSampled %2203 = OpSampledImage %2201 %2202 
                               f32_3 %2204 = OpLoad %249 
                               f32_2 %2205 = OpVectorShuffle %2204 %2204 0 2 
                               f32_4 %2206 = OpImageSampleExplicitLod %2203 %2205 Lod %27 
                                 f32 %2207 = OpCompositeExtract %2206 1 
                        Private f32* %2208 = OpAccessChain %119 %88 
                                               OpStore %2208 %2207 
                                               OpBranch %2181 
                                     %2181 = OpLabel 
                        Private i32* %2209 = OpAccessChain %583 %67 
                                 i32 %2210 = OpLoad %2209 
                                bool %2211 = OpIEqual %2210 %32 
                                               OpSelectionMerge %2213 None 
                                               OpBranchConditional %2211 %2212 %2213 
                                     %2212 = OpLabel 
                               f32_3 %2214 = OpLoad %483 
                               f32_2 %2215 = OpVectorShuffle %2214 %2214 0 2 
                               f32_3 %2216 = OpLoad %249 
                               f32_3 %2217 = OpVectorShuffle %2216 %2215 3 1 4 
                                               OpStore %249 %2217 
                               f32_3 %2218 = OpLoad %249 
                               f32_2 %2219 = OpVectorShuffle %2218 %2218 0 2 
                               f32_2 %2220 = OpCompositeConstruct %18 %18 
                               f32_2 %2221 = OpCompositeConstruct %19 %19 
                               f32_2 %2222 = OpExtInst %1 43 %2219 %2220 %2221 
                               f32_3 %2223 = OpLoad %249 
                               f32_3 %2224 = OpVectorShuffle %2223 %2222 3 1 4 
                                               OpStore %249 %2224 
                               f32_3 %2225 = OpLoad %249 
                               f32_2 %2226 = OpVectorShuffle %2225 %2225 0 2 
                        Uniform f32* %2227 = OpAccessChain %30 %32 
                                 f32 %2228 = OpLoad %2227 
                               f32_2 %2229 = OpCompositeConstruct %2228 %2228 
                               f32_2 %2230 = OpFMul %2226 %2229 
                               f32_3 %2231 = OpLoad %249 
                               f32_3 %2232 = OpVectorShuffle %2231 %2230 3 1 4 
                                               OpStore %249 %2232 
                 read_only Texture2D %2233 = OpLoad %44 
                             sampler %2234 = OpLoad %48 
          read_only Texture2DSampled %2235 = OpSampledImage %2233 %2234 
                               f32_3 %2236 = OpLoad %249 
                               f32_2 %2237 = OpVectorShuffle %2236 %2236 0 2 
                               f32_4 %2238 = OpImageSampleExplicitLod %2235 %2237 Lod %27 
                                 f32 %2239 = OpCompositeExtract %2238 1 
                        Private f32* %2240 = OpAccessChain %119 %67 
                                               OpStore %2240 %2239 
                                               OpBranch %2213 
                                     %2213 = OpLabel 
                                 f32 %2241 = OpLoad %56 
                                 f32 %2242 = OpFNegate %2241 
                                 f32 %2243 = OpFMul %2242 %447 
                        Private f32* %2244 = OpAccessChain %119 %88 
                                 f32 %2245 = OpLoad %2244 
                                 f32 %2246 = OpFAdd %2243 %2245 
                        Private f32* %2247 = OpAccessChain %249 %88 
                                               OpStore %2247 %2246 
                        Private i32* %2248 = OpAccessChain %583 %88 
                                 i32 %2249 = OpLoad %2248 
                                bool %2250 = OpINotEqual %2249 %32 
                                               OpSelectionMerge %2253 None 
                                               OpBranchConditional %2250 %2252 %2256 
                                     %2252 = OpLabel 
                        Private f32* %2254 = OpAccessChain %119 %88 
                                 f32 %2255 = OpLoad %2254 
                                               OpStore %2251 %2255 
                                               OpBranch %2253 
                                     %2256 = OpLabel 
                        Private f32* %2257 = OpAccessChain %249 %88 
                                 f32 %2258 = OpLoad %2257 
                                               OpStore %2251 %2258 
                                               OpBranch %2253 
                                     %2253 = OpLabel 
                                 f32 %2259 = OpLoad %2251 
                        Private f32* %2260 = OpAccessChain %119 %88 
                                               OpStore %2260 %2259 
                                 f32 %2261 = OpLoad %56 
                                 f32 %2262 = OpFNegate %2261 
                                 f32 %2263 = OpFMul %2262 %447 
                        Private f32* %2264 = OpAccessChain %119 %67 
                                 f32 %2265 = OpLoad %2264 
                                 f32 %2266 = OpFAdd %2263 %2265 
                        Private f32* %2267 = OpAccessChain %207 %88 
                                               OpStore %2267 %2266 
                        Private i32* %2268 = OpAccessChain %583 %67 
                                 i32 %2269 = OpLoad %2268 
                                bool %2270 = OpINotEqual %2269 %32 
                                               OpSelectionMerge %2273 None 
                                               OpBranchConditional %2270 %2272 %2276 
                                     %2272 = OpLabel 
                        Private f32* %2274 = OpAccessChain %119 %67 
                                 f32 %2275 = OpLoad %2274 
                                               OpStore %2271 %2275 
                                               OpBranch %2273 
                                     %2276 = OpLabel 
                        Private f32* %2277 = OpAccessChain %207 %88 
                                 f32 %2278 = OpLoad %2277 
                                               OpStore %2271 %2278 
                                               OpBranch %2273 
                                     %2273 = OpLabel 
                                 f32 %2279 = OpLoad %2271 
                        Private f32* %2280 = OpAccessChain %119 %67 
                                               OpStore %2280 %2279 
                               f32_3 %2281 = OpLoad %119 
                               f32_4 %2282 = OpVectorShuffle %2281 %2281 0 1 0 1 
                               f32_4 %2283 = OpExtInst %1 4 %2282 
                               f32_3 %2284 = OpLoad %78 
                               f32_4 %2285 = OpVectorShuffle %2284 %2284 0 0 0 0 
                              bool_4 %2286 = OpFOrdGreaterThanEqual %2283 %2285 
                              bool_2 %2287 = OpVectorShuffle %2286 %2286 0 1 
                               u32_2 %2288 = OpSelect %2287 %595 %594 
                               u32_2 %2289 = OpCompositeConstruct %566 %566 
                               u32_2 %2290 = OpIMul %2288 %2289 
                               i32_2 %2291 = OpBitcast %2290 
                                               OpStore %583 %2291 
                        Private f32* %2292 = OpAccessChain %100 %88 
                                 f32 %2293 = OpLoad %2292 
                                 f32 %2294 = OpFNegate %2293 
                                 f32 %2296 = OpFMul %2294 %2295 
                        Private f32* %2297 = OpAccessChain %237 %88 
                                 f32 %2298 = OpLoad %2297 
                                 f32 %2299 = OpFAdd %2296 %2298 
                        Private f32* %2300 = OpAccessChain %249 %88 
                                               OpStore %2300 %2299 
                        Private i32* %2301 = OpAccessChain %583 %88 
                                 i32 %2302 = OpLoad %2301 
                                bool %2303 = OpINotEqual %2302 %32 
                                               OpSelectionMerge %2306 None 
                                               OpBranchConditional %2303 %2305 %2309 
                                     %2305 = OpLabel 
                        Private f32* %2307 = OpAccessChain %237 %88 
                                 f32 %2308 = OpLoad %2307 
                                               OpStore %2304 %2308 
                                               OpBranch %2306 
                                     %2309 = OpLabel 
                        Private f32* %2310 = OpAccessChain %249 %88 
                                 f32 %2311 = OpLoad %2310 
                                               OpStore %2304 %2311 
                                               OpBranch %2306 
                                     %2306 = OpLabel 
                                 f32 %2312 = OpLoad %2304 
                        Private f32* %2313 = OpAccessChain %237 %88 
                                               OpStore %2313 %2312 
                        Private f32* %2314 = OpAccessChain %100 %67 
                                 f32 %2315 = OpLoad %2314 
                                 f32 %2316 = OpFNegate %2315 
                                 f32 %2317 = OpFMul %2316 %2295 
                        Private f32* %2318 = OpAccessChain %237 %641 
                                 f32 %2319 = OpLoad %2318 
                                 f32 %2320 = OpFAdd %2317 %2319 
                        Private f32* %2321 = OpAccessChain %249 %88 
                                               OpStore %2321 %2320 
                        Private i32* %2322 = OpAccessChain %583 %88 
                                 i32 %2323 = OpLoad %2322 
                                bool %2324 = OpINotEqual %2323 %32 
                                               OpSelectionMerge %2327 None 
                                               OpBranchConditional %2324 %2326 %2330 
                                     %2326 = OpLabel 
                        Private f32* %2328 = OpAccessChain %237 %641 
                                 f32 %2329 = OpLoad %2328 
                                               OpStore %2325 %2329 
                                               OpBranch %2327 
                                     %2330 = OpLabel 
                        Private f32* %2331 = OpAccessChain %249 %88 
                                 f32 %2332 = OpLoad %2331 
                                               OpStore %2325 %2332 
                                               OpBranch %2327 
                                     %2327 = OpLabel 
                                 f32 %2333 = OpLoad %2325 
                        Private f32* %2334 = OpAccessChain %237 %641 
                                               OpStore %2334 %2333 
                               i32_2 %2335 = OpLoad %583 
                               i32_2 %2336 = OpNot %2335 
                               i32_3 %2337 = OpLoad %645 
                               i32_3 %2338 = OpVectorShuffle %2337 %2336 3 1 4 
                                               OpStore %645 %2338 
                        Private i32* %2339 = OpAccessChain %645 %641 
                                 i32 %2340 = OpLoad %2339 
                                 u32 %2341 = OpBitcast %2340 
                        Private i32* %2342 = OpAccessChain %645 %88 
                                 i32 %2343 = OpLoad %2342 
                                 u32 %2344 = OpBitcast %2343 
                                 u32 %2345 = OpBitwiseOr %2341 %2344 
                                 i32 %2346 = OpBitcast %2345 
                        Private i32* %2347 = OpAccessChain %645 %88 
                                               OpStore %2347 %2346 
                        Private f32* %2348 = OpAccessChain %100 %88 
                                 f32 %2349 = OpLoad %2348 
                                 f32 %2350 = OpFMul %2349 %2295 
                        Private f32* %2351 = OpAccessChain %483 %88 
                                 f32 %2352 = OpLoad %2351 
                                 f32 %2353 = OpFAdd %2350 %2352 
                                               OpStore %622 %2353 
                        Private i32* %2354 = OpAccessChain %583 %67 
                                 i32 %2355 = OpLoad %2354 
                                bool %2356 = OpINotEqual %2355 %32 
                                               OpSelectionMerge %2359 None 
                                               OpBranchConditional %2356 %2358 %2362 
                                     %2358 = OpLabel 
                        Private f32* %2360 = OpAccessChain %483 %88 
                                 f32 %2361 = OpLoad %2360 
                                               OpStore %2357 %2361 
                                               OpBranch %2359 
                                     %2362 = OpLabel 
                                 f32 %2363 = OpLoad %622 
                                               OpStore %2357 %2363 
                                               OpBranch %2359 
                                     %2359 = OpLabel 
                                 f32 %2364 = OpLoad %2357 
                        Private f32* %2365 = OpAccessChain %483 %88 
                                               OpStore %2365 %2364 
                        Private f32* %2366 = OpAccessChain %100 %67 
                                 f32 %2367 = OpLoad %2366 
                                 f32 %2368 = OpFMul %2367 %2295 
                        Private f32* %2369 = OpAccessChain %483 %641 
                                 f32 %2370 = OpLoad %2369 
                                 f32 %2371 = OpFAdd %2368 %2370 
                                               OpStore %622 %2371 
                        Private i32* %2372 = OpAccessChain %583 %67 
                                 i32 %2373 = OpLoad %2372 
                                bool %2374 = OpINotEqual %2373 %32 
                                               OpSelectionMerge %2377 None 
                                               OpBranchConditional %2374 %2376 %2380 
                                     %2376 = OpLabel 
                        Private f32* %2378 = OpAccessChain %483 %641 
                                 f32 %2379 = OpLoad %2378 
                                               OpStore %2375 %2379 
                                               OpBranch %2377 
                                     %2380 = OpLabel 
                                 f32 %2381 = OpLoad %622 
                                               OpStore %2375 %2381 
                                               OpBranch %2377 
                                     %2377 = OpLabel 
                                 f32 %2382 = OpLoad %2375 
                        Private f32* %2383 = OpAccessChain %483 %641 
                                               OpStore %2383 %2382 
                        Private i32* %2384 = OpAccessChain %645 %88 
                                 i32 %2385 = OpLoad %2384 
                                bool %2386 = OpINotEqual %2385 %32 
                                               OpSelectionMerge %2388 None 
                                               OpBranchConditional %2386 %2387 %2388 
                                     %2387 = OpLabel 
                        Private i32* %2389 = OpAccessChain %583 %88 
                                 i32 %2390 = OpLoad %2389 
                                bool %2391 = OpIEqual %2390 %32 
                                               OpSelectionMerge %2393 None 
                                               OpBranchConditional %2391 %2392 %2393 
                                     %2392 = OpLabel 
                               f32_3 %2394 = OpLoad %237 
                               f32_2 %2395 = OpVectorShuffle %2394 %2394 0 2 
                               f32_3 %2396 = OpLoad %249 
                               f32_3 %2397 = OpVectorShuffle %2396 %2395 3 1 4 
                                               OpStore %249 %2397 
                               f32_3 %2398 = OpLoad %249 
                               f32_2 %2399 = OpVectorShuffle %2398 %2398 0 2 
                               f32_2 %2400 = OpCompositeConstruct %18 %18 
                               f32_2 %2401 = OpCompositeConstruct %19 %19 
                               f32_2 %2402 = OpExtInst %1 43 %2399 %2400 %2401 
                               f32_3 %2403 = OpLoad %249 
                               f32_3 %2404 = OpVectorShuffle %2403 %2402 3 1 4 
                                               OpStore %249 %2404 
                               f32_3 %2405 = OpLoad %249 
                               f32_2 %2406 = OpVectorShuffle %2405 %2405 0 2 
                        Uniform f32* %2407 = OpAccessChain %30 %32 
                                 f32 %2408 = OpLoad %2407 
                               f32_2 %2409 = OpCompositeConstruct %2408 %2408 
                               f32_2 %2410 = OpFMul %2406 %2409 
                               f32_3 %2411 = OpLoad %249 
                               f32_3 %2412 = OpVectorShuffle %2411 %2410 3 1 4 
                                               OpStore %249 %2412 
                 read_only Texture2D %2413 = OpLoad %44 
                             sampler %2414 = OpLoad %48 
          read_only Texture2DSampled %2415 = OpSampledImage %2413 %2414 
                               f32_3 %2416 = OpLoad %249 
                               f32_2 %2417 = OpVectorShuffle %2416 %2416 0 2 
                               f32_4 %2418 = OpImageSampleExplicitLod %2415 %2417 Lod %27 
                                 f32 %2419 = OpCompositeExtract %2418 1 
                        Private f32* %2420 = OpAccessChain %119 %88 
                                               OpStore %2420 %2419 
                                               OpBranch %2393 
                                     %2393 = OpLabel 
                        Private i32* %2421 = OpAccessChain %583 %67 
                                 i32 %2422 = OpLoad %2421 
                                bool %2423 = OpIEqual %2422 %32 
                                               OpSelectionMerge %2425 None 
                                               OpBranchConditional %2423 %2424 %2425 
                                     %2424 = OpLabel 
                               f32_3 %2426 = OpLoad %483 
                               f32_2 %2427 = OpVectorShuffle %2426 %2426 0 2 
                               f32_3 %2428 = OpLoad %249 
                               f32_3 %2429 = OpVectorShuffle %2428 %2427 3 1 4 
                                               OpStore %249 %2429 
                               f32_3 %2430 = OpLoad %249 
                               f32_2 %2431 = OpVectorShuffle %2430 %2430 0 2 
                               f32_2 %2432 = OpCompositeConstruct %18 %18 
                               f32_2 %2433 = OpCompositeConstruct %19 %19 
                               f32_2 %2434 = OpExtInst %1 43 %2431 %2432 %2433 
                               f32_3 %2435 = OpLoad %249 
                               f32_3 %2436 = OpVectorShuffle %2435 %2434 3 1 4 
                                               OpStore %249 %2436 
                               f32_3 %2437 = OpLoad %249 
                               f32_2 %2438 = OpVectorShuffle %2437 %2437 0 2 
                        Uniform f32* %2439 = OpAccessChain %30 %32 
                                 f32 %2440 = OpLoad %2439 
                               f32_2 %2441 = OpCompositeConstruct %2440 %2440 
                               f32_2 %2442 = OpFMul %2438 %2441 
                               f32_3 %2443 = OpLoad %249 
                               f32_3 %2444 = OpVectorShuffle %2443 %2442 3 1 4 
                                               OpStore %249 %2444 
                 read_only Texture2D %2445 = OpLoad %44 
                             sampler %2446 = OpLoad %48 
          read_only Texture2DSampled %2447 = OpSampledImage %2445 %2446 
                               f32_3 %2448 = OpLoad %249 
                               f32_2 %2449 = OpVectorShuffle %2448 %2448 0 2 
                               f32_4 %2450 = OpImageSampleExplicitLod %2447 %2449 Lod %27 
                                 f32 %2451 = OpCompositeExtract %2450 1 
                        Private f32* %2452 = OpAccessChain %119 %67 
                                               OpStore %2452 %2451 
                                               OpBranch %2425 
                                     %2425 = OpLabel 
                                 f32 %2453 = OpLoad %56 
                                 f32 %2454 = OpFNegate %2453 
                                 f32 %2455 = OpFMul %2454 %447 
                        Private f32* %2456 = OpAccessChain %119 %88 
                                 f32 %2457 = OpLoad %2456 
                                 f32 %2458 = OpFAdd %2455 %2457 
                        Private f32* %2459 = OpAccessChain %249 %88 
                                               OpStore %2459 %2458 
                        Private i32* %2460 = OpAccessChain %583 %88 
                                 i32 %2461 = OpLoad %2460 
                                bool %2462 = OpINotEqual %2461 %32 
                                               OpSelectionMerge %2465 None 
                                               OpBranchConditional %2462 %2464 %2468 
                                     %2464 = OpLabel 
                        Private f32* %2466 = OpAccessChain %119 %88 
                                 f32 %2467 = OpLoad %2466 
                                               OpStore %2463 %2467 
                                               OpBranch %2465 
                                     %2468 = OpLabel 
                        Private f32* %2469 = OpAccessChain %249 %88 
                                 f32 %2470 = OpLoad %2469 
                                               OpStore %2463 %2470 
                                               OpBranch %2465 
                                     %2465 = OpLabel 
                                 f32 %2471 = OpLoad %2463 
                        Private f32* %2472 = OpAccessChain %119 %88 
                                               OpStore %2472 %2471 
                                 f32 %2473 = OpLoad %56 
                                 f32 %2474 = OpFNegate %2473 
                                 f32 %2475 = OpFMul %2474 %447 
                        Private f32* %2476 = OpAccessChain %119 %67 
                                 f32 %2477 = OpLoad %2476 
                                 f32 %2478 = OpFAdd %2475 %2477 
                                               OpStore %56 %2478 
                        Private i32* %2479 = OpAccessChain %583 %67 
                                 i32 %2480 = OpLoad %2479 
                                bool %2481 = OpINotEqual %2480 %32 
                                               OpSelectionMerge %2484 None 
                                               OpBranchConditional %2481 %2483 %2487 
                                     %2483 = OpLabel 
                        Private f32* %2485 = OpAccessChain %119 %67 
                                 f32 %2486 = OpLoad %2485 
                                               OpStore %2482 %2486 
                                               OpBranch %2484 
                                     %2487 = OpLabel 
                                 f32 %2488 = OpLoad %56 
                                               OpStore %2482 %2488 
                                               OpBranch %2484 
                                     %2484 = OpLabel 
                                 f32 %2489 = OpLoad %2482 
                        Private f32* %2490 = OpAccessChain %119 %67 
                                               OpStore %2490 %2489 
                               f32_3 %2493 = OpLoad %119 
                               f32_4 %2494 = OpVectorShuffle %2493 %2493 0 1 0 1 
                               f32_4 %2495 = OpExtInst %1 4 %2494 
                               f32_3 %2496 = OpLoad %78 
                               f32_4 %2497 = OpVectorShuffle %2496 %2496 0 0 0 0 
                              bool_4 %2498 = OpFOrdGreaterThanEqual %2495 %2497 
                              bool_2 %2499 = OpVectorShuffle %2498 %2498 0 1 
                                               OpStore %2492 %2499 
                        Private f32* %2500 = OpAccessChain %100 %88 
                                 f32 %2501 = OpLoad %2500 
                                 f32 %2502 = OpFNegate %2501 
                                 f32 %2504 = OpFMul %2502 %2503 
                        Private f32* %2505 = OpAccessChain %237 %88 
                                 f32 %2506 = OpLoad %2505 
                                 f32 %2507 = OpFAdd %2504 %2506 
                                               OpStore %56 %2507 
                       Private bool* %2508 = OpAccessChain %2492 %88 
                                bool %2509 = OpLoad %2508 
                                               OpSelectionMerge %2512 None 
                                               OpBranchConditional %2509 %2511 %2515 
                                     %2511 = OpLabel 
                        Private f32* %2513 = OpAccessChain %237 %88 
                                 f32 %2514 = OpLoad %2513 
                                               OpStore %2510 %2514 
                                               OpBranch %2512 
                                     %2515 = OpLabel 
                                 f32 %2516 = OpLoad %56 
                                               OpStore %2510 %2516 
                                               OpBranch %2512 
                                     %2512 = OpLabel 
                                 f32 %2517 = OpLoad %2510 
                        Private f32* %2518 = OpAccessChain %237 %88 
                                               OpStore %2518 %2517 
                        Private f32* %2519 = OpAccessChain %100 %67 
                                 f32 %2520 = OpLoad %2519 
                                 f32 %2521 = OpFNegate %2520 
                                 f32 %2522 = OpFMul %2521 %2503 
                        Private f32* %2523 = OpAccessChain %237 %641 
                                 f32 %2524 = OpLoad %2523 
                                 f32 %2525 = OpFAdd %2522 %2524 
                                               OpStore %56 %2525 
                       Private bool* %2526 = OpAccessChain %2492 %88 
                                bool %2527 = OpLoad %2526 
                                               OpSelectionMerge %2530 None 
                                               OpBranchConditional %2527 %2529 %2533 
                                     %2529 = OpLabel 
                        Private f32* %2531 = OpAccessChain %237 %641 
                                 f32 %2532 = OpLoad %2531 
                                               OpStore %2528 %2532 
                                               OpBranch %2530 
                                     %2533 = OpLabel 
                                 f32 %2534 = OpLoad %56 
                                               OpStore %2528 %2534 
                                               OpBranch %2530 
                                     %2530 = OpLabel 
                                 f32 %2535 = OpLoad %2528 
                        Private f32* %2536 = OpAccessChain %237 %641 
                                               OpStore %2536 %2535 
                        Private f32* %2537 = OpAccessChain %100 %88 
                                 f32 %2538 = OpLoad %2537 
                                 f32 %2539 = OpFMul %2538 %2503 
                        Private f32* %2540 = OpAccessChain %483 %88 
                                 f32 %2541 = OpLoad %2540 
                                 f32 %2542 = OpFAdd %2539 %2541 
                                               OpStore %56 %2542 
                       Private bool* %2543 = OpAccessChain %2492 %67 
                                bool %2544 = OpLoad %2543 
                                               OpSelectionMerge %2547 None 
                                               OpBranchConditional %2544 %2546 %2550 
                                     %2546 = OpLabel 
                        Private f32* %2548 = OpAccessChain %483 %88 
                                 f32 %2549 = OpLoad %2548 
                                               OpStore %2545 %2549 
                                               OpBranch %2547 
                                     %2550 = OpLabel 
                                 f32 %2551 = OpLoad %56 
                                               OpStore %2545 %2551 
                                               OpBranch %2547 
                                     %2547 = OpLabel 
                                 f32 %2552 = OpLoad %2545 
                        Private f32* %2553 = OpAccessChain %483 %88 
                                               OpStore %2553 %2552 
                        Private f32* %2554 = OpAccessChain %100 %67 
                                 f32 %2555 = OpLoad %2554 
                                 f32 %2556 = OpFMul %2555 %2503 
                        Private f32* %2557 = OpAccessChain %483 %641 
                                 f32 %2558 = OpLoad %2557 
                                 f32 %2559 = OpFAdd %2556 %2558 
                                               OpStore %56 %2559 
                       Private bool* %2560 = OpAccessChain %2492 %67 
                                bool %2561 = OpLoad %2560 
                                               OpSelectionMerge %2564 None 
                                               OpBranchConditional %2561 %2563 %2567 
                                     %2563 = OpLabel 
                        Private f32* %2565 = OpAccessChain %483 %641 
                                 f32 %2566 = OpLoad %2565 
                                               OpStore %2562 %2566 
                                               OpBranch %2564 
                                     %2567 = OpLabel 
                                 f32 %2568 = OpLoad %56 
                                               OpStore %2562 %2568 
                                               OpBranch %2564 
                                     %2564 = OpLabel 
                                 f32 %2569 = OpLoad %2562 
                        Private f32* %2570 = OpAccessChain %483 %641 
                                               OpStore %2570 %2569 
                                               OpBranch %2388 
                                     %2388 = OpLabel 
                                               OpBranch %2176 
                                     %2176 = OpLabel 
                                               OpBranch %1965 
                                     %1965 = OpLabel 
                                               OpBranch %1754 
                                     %1754 = OpLabel 
                                               OpBranch %1543 
                                     %1543 = OpLabel 
                                               OpBranch %1332 
                                     %1332 = OpLabel 
                                               OpBranch %1121 
                                     %1121 = OpLabel 
                                               OpBranch %910 
                                      %910 = OpLabel 
                                               OpBranch %699 
                                      %699 = OpLabel 
                        Private f32* %2571 = OpAccessChain %237 %88 
                                 f32 %2572 = OpLoad %2571 
                                 f32 %2573 = OpFNegate %2572 
                          Input f32* %2574 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %2575 = OpLoad %2574 
                                 f32 %2576 = OpFAdd %2573 %2575 
                                               OpStore %56 %2576 
                        Private f32* %2577 = OpAccessChain %237 %641 
                                 f32 %2578 = OpLoad %2577 
                                 f32 %2579 = OpFNegate %2578 
                          Input f32* %2580 = OpAccessChain vs_TEXCOORD0 %67 
                                 f32 %2581 = OpLoad %2580 
                                 f32 %2582 = OpFAdd %2579 %2581 
                        Private f32* %2583 = OpAccessChain %100 %88 
                                               OpStore %2583 %2582 
                       Private bool* %2584 = OpAccessChain %323 %88 
                                bool %2585 = OpLoad %2584 
                                               OpSelectionMerge %2588 None 
                                               OpBranchConditional %2585 %2587 %2590 
                                     %2587 = OpLabel 
                                 f32 %2589 = OpLoad %56 
                                               OpStore %2586 %2589 
                                               OpBranch %2588 
                                     %2590 = OpLabel 
                        Private f32* %2591 = OpAccessChain %100 %88 
                                 f32 %2592 = OpLoad %2591 
                                               OpStore %2586 %2592 
                                               OpBranch %2588 
                                     %2588 = OpLabel 
                                 f32 %2593 = OpLoad %2586 
                                               OpStore %56 %2593 
                               f32_3 %2594 = OpLoad %483 
                               f32_2 %2595 = OpVectorShuffle %2594 %2594 0 2 
                               f32_2 %2596 = OpLoad vs_TEXCOORD0 
                               f32_2 %2597 = OpFNegate %2596 
                               f32_2 %2598 = OpFAdd %2595 %2597 
                               f32_3 %2599 = OpLoad %78 
                               f32_3 %2600 = OpVectorShuffle %2599 %2598 3 1 4 
                                               OpStore %78 %2600 
                       Private bool* %2601 = OpAccessChain %323 %88 
                                bool %2602 = OpLoad %2601 
                                               OpSelectionMerge %2605 None 
                                               OpBranchConditional %2602 %2604 %2608 
                                     %2604 = OpLabel 
                        Private f32* %2606 = OpAccessChain %78 %88 
                                 f32 %2607 = OpLoad %2606 
                                               OpStore %2603 %2607 
                                               OpBranch %2605 
                                     %2608 = OpLabel 
                        Private f32* %2609 = OpAccessChain %78 %641 
                                 f32 %2610 = OpLoad %2609 
                                               OpStore %2603 %2610 
                                               OpBranch %2605 
                                     %2605 = OpLabel 
                                 f32 %2611 = OpLoad %2603 
                        Private f32* %2612 = OpAccessChain %78 %88 
                                               OpStore %2612 %2611 
                               f32_3 %2614 = OpLoad %119 
                               f32_4 %2615 = OpVectorShuffle %2614 %2614 0 1 0 1 
                              bool_4 %2617 = OpFOrdLessThan %2615 %2616 
                              bool_2 %2618 = OpVectorShuffle %2617 %2617 0 1 
                               u32_2 %2619 = OpSelect %2618 %595 %594 
                               u32_2 %2620 = OpCompositeConstruct %566 %566 
                               u32_2 %2621 = OpIMul %2619 %2620 
                               i32_2 %2622 = OpBitcast %2621 
                                               OpStore %2613 %2622 
                                 f32 %2623 = OpLoad %56 
                        Private f32* %2624 = OpAccessChain %78 %88 
                                 f32 %2625 = OpLoad %2624 
                                 f32 %2626 = OpFAdd %2623 %2625 
                        Private f32* %2627 = OpAccessChain %119 %88 
                                               OpStore %2627 %2626 
                                 i32 %2629 = OpLoad %563 
                               i32_4 %2631 = OpCompositeConstruct %2629 %2629 %2629 %2629 
                               i32_2 %2632 = OpLoad %2613 
                               i32_4 %2633 = OpVectorShuffle %2632 %2632 0 1 0 0 
                              bool_4 %2634 = OpINotEqual %2631 %2633 
                              bool_2 %2635 = OpVectorShuffle %2634 %2634 0 1 
                                               OpStore %2628 %2635 
                        Private f32* %2636 = OpAccessChain %119 %88 
                                 f32 %2637 = OpLoad %2636 
                                 f32 %2638 = OpFDiv %19 %2637 
                                               OpStore %106 %2638 
                                 f32 %2639 = OpLoad %56 
                        Private f32* %2640 = OpAccessChain %78 %88 
                                 f32 %2641 = OpLoad %2640 
                                bool %2642 = OpFOrdLessThan %2639 %2641 
                                               OpStore %394 %2642 
                                 f32 %2643 = OpLoad %56 
                        Private f32* %2644 = OpAccessChain %78 %88 
                                 f32 %2645 = OpLoad %2644 
                                 f32 %2646 = OpExtInst %1 37 %2643 %2645 
                                               OpStore %56 %2646 
                                bool %2648 = OpLoad %394 
                                               OpSelectionMerge %2652 None 
                                               OpBranchConditional %2648 %2651 %2655 
                                     %2651 = OpLabel 
                       Private bool* %2653 = OpAccessChain %2628 %88 
                                bool %2654 = OpLoad %2653 
                                               OpStore %2650 %2654 
                                               OpBranch %2652 
                                     %2655 = OpLabel 
                       Private bool* %2656 = OpAccessChain %2628 %67 
                                bool %2657 = OpLoad %2656 
                                               OpStore %2650 %2657 
                                               OpBranch %2652 
                                     %2652 = OpLabel 
                                bool %2658 = OpLoad %2650 
                                               OpStore %2647 %2658 
                        Private f32* %2659 = OpAccessChain %201 %88 
                                 f32 %2660 = OpLoad %2659 
                        Private f32* %2661 = OpAccessChain %201 %88 
                                 f32 %2662 = OpLoad %2661 
                                 f32 %2663 = OpFMul %2660 %2662 
                        Private f32* %2664 = OpAccessChain %201 %88 
                                               OpStore %2664 %2663 
                                 f32 %2665 = OpLoad %56 
                                 f32 %2666 = OpLoad %106 
                                 f32 %2667 = OpFNegate %2666 
                                 f32 %2668 = OpFMul %2665 %2667 
                                 f32 %2669 = OpFAdd %2668 %447 
                                               OpStore %56 %2669 
                                bool %2670 = OpLoad %2647 
                                 f32 %2671 = OpLoad %56 
                                 f32 %2672 = OpSelect %2670 %2671 %18 
                                               OpStore %56 %2672 
                        Private f32* %2673 = OpAccessChain %201 %88 
                                 f32 %2674 = OpLoad %2673 
                                 f32 %2675 = OpLoad %56 
                                 f32 %2676 = OpExtInst %1 40 %2674 %2675 
                        Private f32* %2677 = OpAccessChain %201 %88 
                                               OpStore %2677 %2676 
                               f32_2 %2678 = OpLoad %201 
                               f32_2 %2679 = OpVectorShuffle %2678 %2678 0 0 
                                 f32 %2680 = OpLoad %69 
                               f32_2 %2681 = OpCompositeConstruct %2680 %2680 
                               f32_2 %2682 = OpFMul %2679 %2681 
                               f32_2 %2683 = OpLoad vs_TEXCOORD0 
                               f32_2 %2684 = OpFAdd %2682 %2683 
                                               OpStore %201 %2684 
                       Private bool* %2685 = OpAccessChain %323 %88 
                                bool %2686 = OpLoad %2685 
                                               OpSelectionMerge %2689 None 
                                               OpBranchConditional %2686 %2688 %2692 
                                     %2688 = OpLabel 
                          Input f32* %2690 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %2691 = OpLoad %2690 
                                               OpStore %2687 %2691 
                                               OpBranch %2689 
                                     %2692 = OpLabel 
                        Private f32* %2693 = OpAccessChain %201 %88 
                                 f32 %2694 = OpLoad %2693 
                                               OpStore %2687 %2694 
                                               OpBranch %2689 
                                     %2689 = OpLabel 
                                 f32 %2695 = OpLoad %2687 
                        Private f32* %2696 = OpAccessChain %78 %88 
                                               OpStore %2696 %2695 
                        Private f32* %2697 = OpAccessChain %78 %88 
                                 f32 %2698 = OpLoad %2697 
                                 f32 %2699 = OpExtInst %1 43 %2698 %18 %19 
                        Private f32* %2700 = OpAccessChain %78 %88 
                                               OpStore %2700 %2699 
                       Private bool* %2701 = OpAccessChain %323 %88 
                                bool %2702 = OpLoad %2701 
                                               OpSelectionMerge %2705 None 
                                               OpBranchConditional %2702 %2704 %2708 
                                     %2704 = OpLabel 
                        Private f32* %2706 = OpAccessChain %201 %67 
                                 f32 %2707 = OpLoad %2706 
                                               OpStore %2703 %2707 
                                               OpBranch %2705 
                                     %2708 = OpLabel 
                          Input f32* %2709 = OpAccessChain vs_TEXCOORD0 %67 
                                 f32 %2710 = OpLoad %2709 
                                               OpStore %2703 %2710 
                                               OpBranch %2705 
                                     %2705 = OpLabel 
                                 f32 %2711 = OpLoad %2703 
                        Private f32* %2712 = OpAccessChain %78 %67 
                                               OpStore %2712 %2711 
                        Private f32* %2713 = OpAccessChain %78 %67 
                                 f32 %2714 = OpLoad %2713 
                                 f32 %2715 = OpExtInst %1 43 %2714 %18 %19 
                        Private f32* %2716 = OpAccessChain %78 %67 
                                               OpStore %2716 %2715 
                               f32_3 %2717 = OpLoad %78 
                               f32_2 %2718 = OpVectorShuffle %2717 %2717 0 1 
                        Uniform f32* %2719 = OpAccessChain %30 %32 
                                 f32 %2720 = OpLoad %2719 
                               f32_2 %2721 = OpCompositeConstruct %2720 %2720 
                               f32_2 %2722 = OpFMul %2718 %2721 
                               f32_3 %2723 = OpLoad %9 
                               f32_3 %2724 = OpVectorShuffle %2723 %2722 3 4 2 
                                               OpStore %9 %2724 
                 read_only Texture2D %2725 = OpLoad %44 
                             sampler %2726 = OpLoad %48 
          read_only Texture2DSampled %2727 = OpSampledImage %2725 %2726 
                               f32_3 %2728 = OpLoad %9 
                               f32_2 %2729 = OpVectorShuffle %2728 %2728 0 1 
                               f32_4 %2730 = OpImageSampleExplicitLod %2727 %2729 Lod %27 
                               f32_3 %2731 = OpVectorShuffle %2730 %2730 0 1 2 
                                               OpStore %9 %2731 
                        Private f32* %2732 = OpAccessChain %41 %67 
                                 f32 %2733 = OpLoad %2732 
                        Private f32* %2735 = OpAccessChain %41 %2734 
                                               OpStore %2735 %2733 
                                               OpBranch %165 
                                     %2736 = OpLabel 
                               f32_4 %2737 = OpLoad %41 
                               f32_3 %2738 = OpVectorShuffle %2737 %2737 0 1 2 
                                               OpStore %9 %2738 
                                               OpBranch %165 
                                      %165 = OpLabel 
                               f32_2 %2739 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %2741 = OpAccessChain %30 %63 
                               f32_4 %2742 = OpLoad %2741 
                               f32_2 %2743 = OpVectorShuffle %2742 %2742 0 1 
                               f32_2 %2744 = OpFMul %2739 %2743 
                      Uniform f32_4* %2745 = OpAccessChain %30 %63 
                               f32_4 %2746 = OpLoad %2745 
                               f32_2 %2747 = OpVectorShuffle %2746 %2746 2 3 
                               f32_2 %2748 = OpFAdd %2744 %2747 
                               f32_3 %2749 = OpLoad %78 
                               f32_3 %2750 = OpVectorShuffle %2749 %2748 3 4 2 
                                               OpStore %78 %2750 
                 read_only Texture2D %2752 = OpLoad %2751 
                             sampler %2754 = OpLoad %2753 
          read_only Texture2DSampled %2755 = OpSampledImage %2752 %2754 
                               f32_3 %2756 = OpLoad %78 
                               f32_2 %2757 = OpVectorShuffle %2756 %2756 0 1 
                               f32_4 %2758 = OpImageSampleImplicitLod %2755 %2757 
                                 f32 %2759 = OpCompositeExtract %2758 3 
                                               OpStore %69 %2759 
                                 f32 %2760 = OpLoad %69 
                                 f32 %2761 = OpFMul %2760 %276 
                                 f32 %2763 = OpFAdd %2761 %2762 
                                               OpStore %69 %2763 
                                 f32 %2764 = OpLoad %69 
                                 f32 %2766 = OpFMul %2764 %2765 
                                 f32 %2767 = OpFAdd %2766 %447 
                        Private f32* %2768 = OpAccessChain %78 %88 
                                               OpStore %2768 %2767 
                        Private f32* %2769 = OpAccessChain %78 %88 
                                 f32 %2770 = OpLoad %2769 
                                 f32 %2771 = OpExtInst %1 43 %2770 %18 %19 
                        Private f32* %2772 = OpAccessChain %78 %88 
                                               OpStore %2772 %2771 
                        Private f32* %2773 = OpAccessChain %78 %88 
                                 f32 %2774 = OpLoad %2773 
                                 f32 %2775 = OpFMul %2774 %276 
                                 f32 %2776 = OpFAdd %2775 %2762 
                        Private f32* %2777 = OpAccessChain %78 %88 
                                               OpStore %2777 %2776 
                                 f32 %2778 = OpLoad %69 
                                 f32 %2779 = OpExtInst %1 4 %2778 
                                 f32 %2780 = OpFNegate %2779 
                                 f32 %2781 = OpFAdd %2780 %19 
                                               OpStore %69 %2781 
                                 f32 %2782 = OpLoad %69 
                                 f32 %2783 = OpExtInst %1 31 %2782 
                                               OpStore %69 %2783 
                                 f32 %2784 = OpLoad %69 
                                 f32 %2785 = OpFNegate %2784 
                                 f32 %2786 = OpFAdd %2785 %19 
                                               OpStore %69 %2786 
                                 f32 %2787 = OpLoad %69 
                        Private f32* %2788 = OpAccessChain %78 %88 
                                 f32 %2789 = OpLoad %2788 
                                 f32 %2790 = OpFMul %2787 %2789 
                                               OpStore %69 %2790 
                               f32_3 %2791 = OpLoad %9 
                               f32_3 %2794 = OpFMul %2791 %2793 
                                               OpStore %78 %2794 
                               f32_3 %2795 = OpLoad %9 
                               f32_3 %2796 = OpExtInst %1 4 %2795 
                               f32_3 %2799 = OpExtInst %1 40 %2796 %2798 
                                               OpStore %119 %2799 
                               f32_3 %2800 = OpLoad %119 
                               f32_3 %2801 = OpExtInst %1 30 %2800 
                                               OpStore %119 %2801 
                               f32_3 %2802 = OpLoad %119 
                               f32_3 %2805 = OpFMul %2802 %2804 
                                               OpStore %119 %2805 
                               f32_3 %2806 = OpLoad %119 
                               f32_3 %2807 = OpExtInst %1 29 %2806 
                                               OpStore %119 %2807 
                               f32_3 %2808 = OpLoad %119 
                               f32_3 %2811 = OpFMul %2808 %2810 
                               f32_3 %2814 = OpFAdd %2811 %2813 
                                               OpStore %119 %2814 
                               f32_3 %2817 = OpLoad %9 
                               f32_4 %2818 = OpVectorShuffle %2817 %2817 0 1 2 0 
                              bool_4 %2819 = OpFOrdGreaterThanEqual %2816 %2818 
                              bool_3 %2820 = OpVectorShuffle %2819 %2819 0 1 2 
                                               OpStore %323 %2820 
                       Private bool* %2821 = OpAccessChain %323 %88 
                                bool %2822 = OpLoad %2821 
                                               OpSelectionMerge %2825 None 
                                               OpBranchConditional %2822 %2824 %2828 
                                     %2824 = OpLabel 
                        Private f32* %2826 = OpAccessChain %78 %88 
                                 f32 %2827 = OpLoad %2826 
                                               OpStore %2823 %2827 
                                               OpBranch %2825 
                                     %2828 = OpLabel 
                        Private f32* %2829 = OpAccessChain %119 %88 
                                 f32 %2830 = OpLoad %2829 
                                               OpStore %2823 %2830 
                                               OpBranch %2825 
                                     %2825 = OpLabel 
                                 f32 %2831 = OpLoad %2823 
                        Private f32* %2832 = OpAccessChain %9 %88 
                                               OpStore %2832 %2831 
                       Private bool* %2833 = OpAccessChain %323 %67 
                                bool %2834 = OpLoad %2833 
                                               OpSelectionMerge %2837 None 
                                               OpBranchConditional %2834 %2836 %2840 
                                     %2836 = OpLabel 
                        Private f32* %2838 = OpAccessChain %78 %67 
                                 f32 %2839 = OpLoad %2838 
                                               OpStore %2835 %2839 
                                               OpBranch %2837 
                                     %2840 = OpLabel 
                        Private f32* %2841 = OpAccessChain %119 %67 
                                 f32 %2842 = OpLoad %2841 
                                               OpStore %2835 %2842 
                                               OpBranch %2837 
                                     %2837 = OpLabel 
                                 f32 %2843 = OpLoad %2835 
                        Private f32* %2844 = OpAccessChain %9 %67 
                                               OpStore %2844 %2843 
                       Private bool* %2845 = OpAccessChain %323 %641 
                                bool %2846 = OpLoad %2845 
                                               OpSelectionMerge %2849 None 
                                               OpBranchConditional %2846 %2848 %2852 
                                     %2848 = OpLabel 
                        Private f32* %2850 = OpAccessChain %78 %641 
                                 f32 %2851 = OpLoad %2850 
                                               OpStore %2847 %2851 
                                               OpBranch %2849 
                                     %2852 = OpLabel 
                        Private f32* %2853 = OpAccessChain %119 %641 
                                 f32 %2854 = OpLoad %2853 
                                               OpStore %2847 %2854 
                                               OpBranch %2849 
                                     %2849 = OpLabel 
                                 f32 %2855 = OpLoad %2847 
                        Private f32* %2856 = OpAccessChain %9 %641 
                                               OpStore %2856 %2855 
                                 f32 %2857 = OpLoad %69 
                               f32_3 %2858 = OpCompositeConstruct %2857 %2857 %2857 
                               f32_3 %2861 = OpFMul %2858 %2860 
                               f32_3 %2862 = OpLoad %9 
                               f32_3 %2863 = OpFAdd %2861 %2862 
                                               OpStore %9 %2863 
                               f32_3 %2864 = OpLoad %9 
                               f32_3 %2867 = OpFMul %2864 %2866 
                                               OpStore %78 %2867 
                               f32_3 %2868 = OpLoad %9 
                               f32_3 %2871 = OpFAdd %2868 %2870 
                                               OpStore %119 %2871 
                               f32_3 %2872 = OpLoad %119 
                               f32_3 %2875 = OpFMul %2872 %2874 
                                               OpStore %119 %2875 
                               f32_3 %2876 = OpLoad %119 
                               f32_3 %2877 = OpExtInst %1 4 %2876 
                               f32_3 %2878 = OpExtInst %1 40 %2877 %2798 
                                               OpStore %119 %2878 
                               f32_3 %2879 = OpLoad %119 
                               f32_3 %2880 = OpExtInst %1 30 %2879 
                                               OpStore %119 %2880 
                               f32_3 %2881 = OpLoad %119 
                               f32_3 %2884 = OpFMul %2881 %2883 
                                               OpStore %119 %2884 
                               f32_3 %2885 = OpLoad %119 
                               f32_3 %2886 = OpExtInst %1 29 %2885 
                                               OpStore %119 %2886 
                               f32_3 %2889 = OpLoad %9 
                               f32_4 %2890 = OpVectorShuffle %2889 %2889 0 1 2 0 
                              bool_4 %2891 = OpFOrdGreaterThanEqual %2888 %2890 
                              bool_3 %2892 = OpVectorShuffle %2891 %2891 0 1 2 
                                               OpStore %323 %2892 
                       Private bool* %2893 = OpAccessChain %323 %88 
                                bool %2894 = OpLoad %2893 
                                               OpSelectionMerge %2897 None 
                                               OpBranchConditional %2894 %2896 %2900 
                                     %2896 = OpLabel 
                        Private f32* %2898 = OpAccessChain %78 %88 
                                 f32 %2899 = OpLoad %2898 
                                               OpStore %2895 %2899 
                                               OpBranch %2897 
                                     %2900 = OpLabel 
                        Private f32* %2901 = OpAccessChain %119 %88 
                                 f32 %2902 = OpLoad %2901 
                                               OpStore %2895 %2902 
                                               OpBranch %2897 
                                     %2897 = OpLabel 
                                 f32 %2903 = OpLoad %2895 
                        Private f32* %2904 = OpAccessChain %41 %88 
                                               OpStore %2904 %2903 
                       Private bool* %2905 = OpAccessChain %323 %67 
                                bool %2906 = OpLoad %2905 
                                               OpSelectionMerge %2909 None 
                                               OpBranchConditional %2906 %2908 %2912 
                                     %2908 = OpLabel 
                        Private f32* %2910 = OpAccessChain %78 %67 
                                 f32 %2911 = OpLoad %2910 
                                               OpStore %2907 %2911 
                                               OpBranch %2909 
                                     %2912 = OpLabel 
                        Private f32* %2913 = OpAccessChain %119 %67 
                                 f32 %2914 = OpLoad %2913 
                                               OpStore %2907 %2914 
                                               OpBranch %2909 
                                     %2909 = OpLabel 
                                 f32 %2915 = OpLoad %2907 
                        Private f32* %2916 = OpAccessChain %41 %67 
                                               OpStore %2916 %2915 
                       Private bool* %2917 = OpAccessChain %323 %641 
                                bool %2918 = OpLoad %2917 
                                               OpSelectionMerge %2921 None 
                                               OpBranchConditional %2918 %2920 %2924 
                                     %2920 = OpLabel 
                        Private f32* %2922 = OpAccessChain %78 %641 
                                 f32 %2923 = OpLoad %2922 
                                               OpStore %2919 %2923 
                                               OpBranch %2921 
                                     %2924 = OpLabel 
                        Private f32* %2925 = OpAccessChain %119 %641 
                                 f32 %2926 = OpLoad %2925 
                                               OpStore %2919 %2926 
                                               OpBranch %2921 
                                     %2921 = OpLabel 
                                 f32 %2927 = OpLoad %2919 
                        Private f32* %2928 = OpAccessChain %41 %641 
                                               OpStore %2928 %2927 
                               f32_4 %2931 = OpLoad %41 
                                               OpStore %2930 %2931 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA_LOW" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %57 %64 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %39 0 Offset 39 
                                             OpMemberDecorate %39 1 Offset 39 
                                             OpDecorate %39 Block 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate vs_TEXCOORD1 Location 57 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypePointer Output %7 
                                 f32 %26 = OpConstant 3.674022E-40 
                                 f32 %27 = OpConstant 3.674022E-40 
                               f32_2 %28 = OpConstantComposite %26 %27 
                                     %32 = OpTypePointer Private %19 
                      Private f32_2* %33 = OpVariable Private 
                               f32_2 %36 = OpConstantComposite %27 %27 
                                     %39 = OpTypeStruct %6 %7 
                                     %40 = OpTypePointer Uniform %39 
       Uniform struct {f32; f32_4;}* %41 = OpVariable Uniform 
                                 i32 %42 = OpConstant 1 
                                     %43 = OpTypePointer Uniform %7 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_2 %50 = OpConstantComposite %49 %49 
                                     %56 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %59 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                       Output f32_4* %23 = OpAccessChain %13 %15 
                               f32_4 %24 = OpLoad %23 
                               f32_4 %25 = OpVectorShuffle %24 %21 4 5 2 3 
                                             OpStore %23 %25 
                       Output f32_4* %29 = OpAccessChain %13 %15 
                               f32_4 %30 = OpLoad %29 
                               f32_4 %31 = OpVectorShuffle %30 %28 0 1 4 5 
                                             OpStore %29 %31 
                               f32_3 %34 = OpLoad %18 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %37 = OpFAdd %35 %36 
                                             OpStore %33 %37 
                               f32_2 %38 = OpLoad %33 
                      Uniform f32_4* %44 = OpAccessChain %41 %42 
                               f32_4 %45 = OpLoad %44 
                               f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                               f32_2 %47 = OpFMul %38 %46 
                                             OpStore %33 %47 
                               f32_2 %48 = OpLoad %33 
                               f32_2 %51 = OpFMul %48 %50 
                      Uniform f32_4* %52 = OpAccessChain %41 %42 
                               f32_4 %53 = OpLoad %52 
                               f32_2 %54 = OpVectorShuffle %53 %53 2 3 
                               f32_2 %55 = OpFAdd %51 %54 
                                             OpStore %33 %55 
                               f32_2 %58 = OpLoad %33 
                        Uniform f32* %60 = OpAccessChain %41 %15 
                                 f32 %61 = OpLoad %60 
                               f32_2 %62 = OpCompositeConstruct %61 %61 
                               f32_2 %63 = OpFMul %58 %62 
                                             OpStore vs_TEXCOORD1 %63 
                               f32_2 %65 = OpLoad %33 
                                             OpStore vs_TEXCOORD0 %65 
                         Output f32* %67 = OpAccessChain %13 %15 %9 
                                 f32 %68 = OpLoad %67 
                                 f32 %69 = OpFNegate %68 
                         Output f32* %70 = OpAccessChain %13 %15 %9 
                                             OpStore %70 %69 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1689
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %1647 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %1483 DescriptorSet 1483 
                                               OpDecorate %1483 Binding 1483 
                                               OpDecorate %1485 DescriptorSet 1485 
                                               OpDecorate %1485 Binding 1485 
                                               OpDecorate %1647 Location 1647 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %18 = OpConstant 3.674022E-40 
                                   f32 %19 = OpConstant 3.674022E-40 
                                       %27 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %6 %27 %27 
                                       %29 = OpTypePointer Uniform %28 
  Uniform struct {f32; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 0 
                                       %33 = OpTypePointer Uniform %6 
                                       %40 = OpTypePointer Private %27 
                        Private f32_4* %41 = OpVariable Private 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypePointer Private %6 
                          Private f32* %56 = OpVariable Private 
                                       %62 = OpTypeVector %31 2 
                                   i32 %63 = OpConstant 1 
                                 i32_2 %64 = OpConstantComposite %32 %63 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 3 
                          Private f32* %69 = OpVariable Private 
                                 i32_2 %75 = OpConstantComposite %63 %32 
                        Private f32_3* %78 = OpVariable Private 
                                   i32 %84 = OpConstant -1 
                                 i32_2 %85 = OpConstantComposite %32 %84 
                                   u32 %88 = OpConstant 0 
                          Private f32* %90 = OpVariable Private 
                                 i32_2 %96 = OpConstantComposite %84 %32 
                                       %99 = OpTypePointer Private %10 
                       Private f32_2* %100 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_2* %119 = OpVariable Private 
                       Private f32_2* %125 = OpVariable Private 
                                  f32 %143 = OpConstant 3.674022E-40 
                                  f32 %154 = OpConstant 3.674022E-40 
                                      %156 = OpTypeBool 
                                      %157 = OpTypePointer Private %156 
                        Private bool* %158 = OpVariable Private 
                                i32_2 %171 = OpConstantComposite %84 %84 
                                i32_2 %179 = OpConstantComposite %63 %63 
                                i32_2 %188 = OpConstantComposite %63 %84 
                                i32_2 %197 = OpConstantComposite %84 %63 
                       Private f32_3* %201 = OpVariable Private 
                       Private f32_2* %207 = OpVariable Private 
                         Private f32* %216 = OpVariable Private 
                                  f32 %224 = OpConstant 3.674022E-40 
                       Private f32_3* %237 = OpVariable Private 
                       Private f32_3* %249 = OpVariable Private 
                                  f32 %276 = OpConstant 3.674022E-40 
                                      %321 = OpTypeVector %156 3 
                                      %322 = OpTypePointer Private %321 
                      Private bool_3* %323 = OpVariable Private 
                                      %337 = OpTypePointer Function %6 
                                  i32 %357 = OpConstant 2 
                                  u32 %358 = OpConstant 1 
                                  f32 %367 = OpConstant 3.674022E-40 
                        Private bool* %395 = OpVariable Private 
                                  f32 %448 = OpConstant 3.674022E-40 
                                f32_2 %449 = OpConstantComposite %448 %448 
                                      %458 = OpTypePointer Input %6 
                       Private f32_3* %484 = OpVariable Private 
                                  f32 %493 = OpConstant 3.674022E-40 
                       Private f32_2* %520 = OpVariable Private 
                                  f32 %548 = OpConstant 3.674022E-40 
                                      %563 = OpTypePointer Private %31 
                         Private i32* %564 = OpVariable Private 
                                  u32 %567 = OpConstant 4294967295 
                                      %583 = OpTypePointer Private %62 
                       Private i32_2* %584 = OpVariable Private 
                                      %590 = OpTypeVector %156 4 
                                      %592 = OpTypeVector %156 2 
                                      %594 = OpTypeVector %66 2 
                                u32_2 %595 = OpConstantComposite %88 %88 
                                u32_2 %596 = OpConstantComposite %358 %358 
                                  f32 %604 = OpConstant 3.674022E-40 
                         Private f32* %623 = OpVariable Private 
                                  u32 %642 = OpConstant 2 
                                      %644 = OpTypeVector %31 3 
                                      %645 = OpTypePointer Private %644 
                       Private i32_3* %646 = OpVariable Private 
                                 f32 %1030 = OpConstant 3.674022E-40 
                                     %1226 = OpTypePointer Private %592 
                     Private bool_2* %1227 = OpVariable Private 
                                 f32 %1238 = OpConstant 3.674022E-40 
                      Private i32_2* %1348 = OpVariable Private 
                               f32_4 %1351 = OpConstantComposite %18 %18 %18 %18 
                     Private bool_2* %1363 = OpVariable Private 
                                     %1365 = OpTypeVector %31 4 
                       Private bool* %1382 = OpVariable Private 
                                     %1384 = OpTypePointer Function %156 
                                     %1472 = OpTypePointer Uniform %27 
UniformConstant read_only Texture2D* %1483 = OpVariable UniformConstant 
            UniformConstant sampler* %1485 = OpVariable UniformConstant 
                                 f32 %1496 = OpConstant 3.674022E-40 
                                 f32 %1501 = OpConstant 3.674022E-40 
                                 f32 %1537 = OpConstant 3.674022E-40 
                               f32_3 %1538 = OpConstantComposite %1537 %1537 %1537 
                                 f32 %1543 = OpConstant 3.674022E-40 
                               f32_3 %1544 = OpConstantComposite %1543 %1543 %1543 
                                 f32 %1549 = OpConstant 3.674022E-40 
                               f32_3 %1550 = OpConstantComposite %1549 %1549 %1549 
                                 f32 %1555 = OpConstant 3.674022E-40 
                               f32_3 %1556 = OpConstantComposite %1555 %1555 %1555 
                                 f32 %1558 = OpConstant 3.674022E-40 
                               f32_3 %1559 = OpConstantComposite %1558 %1558 %1558 
                     Private bool_3* %1561 = OpVariable Private 
                                 f32 %1562 = OpConstant 3.674022E-40 
                               f32_4 %1563 = OpConstantComposite %1562 %1562 %1562 %18 
                                     %1568 = OpTypePointer Function %7 
                                 f32 %1610 = OpConstant 3.674022E-40 
                               f32_3 %1611 = OpConstantComposite %1610 %1610 %1610 
                                 f32 %1616 = OpConstant 3.674022E-40 
                               f32_3 %1617 = OpConstantComposite %1616 %1616 %1616 
                                 f32 %1622 = OpConstant 3.674022E-40 
                               f32_3 %1623 = OpConstantComposite %1622 %1622 %1622 
                                 f32 %1626 = OpConstant 3.674022E-40 
                               f32_3 %1627 = OpConstantComposite %1626 %1626 %1626 
                                 f32 %1635 = OpConstant 3.674022E-40 
                               f32_3 %1636 = OpConstantComposite %1635 %1635 %1635 
                                 f32 %1640 = OpConstant 3.674022E-40 
                               f32_4 %1641 = OpConstantComposite %1640 %1640 %1640 %18 
                                     %1646 = OpTypePointer Output %27 
                       Output f32_4* %1647 = OpVariable Output 
                                     %1659 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %338 = OpVariable Function 
                        Function f32* %354 = OpVariable Function 
                        Function f32* %407 = OpVariable Function 
                        Function f32* %428 = OpVariable Function 
                        Function f32* %438 = OpVariable Function 
                        Function f32* %455 = OpVariable Function 
                        Function f32* %468 = OpVariable Function 
                        Function f32* %539 = OpVariable Function 
                        Function f32* %613 = OpVariable Function 
                        Function f32* %634 = OpVariable Function 
                        Function f32* %669 = OpVariable Function 
                        Function f32* %687 = OpVariable Function 
                        Function f32* %775 = OpVariable Function 
                        Function f32* %795 = OpVariable Function 
                        Function f32* %827 = OpVariable Function 
                        Function f32* %848 = OpVariable Function 
                        Function f32* %880 = OpVariable Function 
                        Function f32* %898 = OpVariable Function 
                        Function f32* %986 = OpVariable Function 
                       Function f32* %1006 = OpVariable Function 
                       Function f32* %1039 = OpVariable Function 
                       Function f32* %1060 = OpVariable Function 
                       Function f32* %1092 = OpVariable Function 
                       Function f32* %1110 = OpVariable Function 
                       Function f32* %1198 = OpVariable Function 
                       Function f32* %1217 = OpVariable Function 
                       Function f32* %1245 = OpVariable Function 
                       Function f32* %1263 = OpVariable Function 
                       Function f32* %1280 = OpVariable Function 
                       Function f32* %1297 = OpVariable Function 
                       Function f32* %1321 = OpVariable Function 
                       Function f32* %1338 = OpVariable Function 
                      Function bool* %1385 = OpVariable Function 
                       Function f32* %1424 = OpVariable Function 
                       Function f32* %1440 = OpVariable Function 
                     Function f32_3* %1569 = OpVariable Function 
                       Function f32* %1573 = OpVariable Function 
                       Function f32* %1585 = OpVariable Function 
                       Function f32* %1597 = OpVariable Function 
                       Function f32* %1650 = OpVariable Function 
                       Function f32* %1663 = OpVariable Function 
                       Function f32* %1675 = OpVariable Function 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                                 f32_3 %14 = OpLoad %9 
                                 f32_3 %15 = OpVectorShuffle %14 %13 3 4 2 
                                               OpStore %9 %15 
                                 f32_3 %16 = OpLoad %9 
                                 f32_2 %17 = OpVectorShuffle %16 %16 0 1 
                                 f32_2 %20 = OpCompositeConstruct %18 %18 
                                 f32_2 %21 = OpCompositeConstruct %19 %19 
                                 f32_2 %22 = OpExtInst %1 43 %17 %20 %21 
                                 f32_3 %23 = OpLoad %9 
                                 f32_3 %24 = OpVectorShuffle %23 %22 3 4 2 
                                               OpStore %9 %24 
                                 f32_3 %25 = OpLoad %9 
                                 f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                          Uniform f32* %34 = OpAccessChain %30 %32 
                                   f32 %35 = OpLoad %34 
                                 f32_2 %36 = OpCompositeConstruct %35 %35 
                                 f32_2 %37 = OpFMul %26 %36 
                                 f32_3 %38 = OpLoad %9 
                                 f32_3 %39 = OpVectorShuffle %38 %37 3 4 2 
                                               OpStore %9 %39 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_3 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleExplicitLod %51 %53 Lod %27 
                                               OpStore %41 %54 
                   read_only Texture2D %57 = OpLoad %44 
                               sampler %58 = OpLoad %48 
            read_only Texture2DSampled %59 = OpSampledImage %57 %58 
                                 f32_3 %60 = OpLoad %9 
                                 f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                 f32_4 %65 = OpImageSampleExplicitLod %59 %61 Lod %27ConstOffset %65 
                                   f32 %68 = OpCompositeExtract %65 3 
                                               OpStore %56 %68 
                   read_only Texture2D %70 = OpLoad %44 
                               sampler %71 = OpLoad %48 
            read_only Texture2DSampled %72 = OpSampledImage %70 %71 
                                 f32_3 %73 = OpLoad %9 
                                 f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                 f32_4 %76 = OpImageSampleExplicitLod %72 %74 Lod %27ConstOffset %76 
                                   f32 %77 = OpCompositeExtract %76 3 
                                               OpStore %69 %77 
                   read_only Texture2D %79 = OpLoad %44 
                               sampler %80 = OpLoad %48 
            read_only Texture2DSampled %81 = OpSampledImage %79 %80 
                                 f32_3 %82 = OpLoad %9 
                                 f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                                 f32_4 %86 = OpImageSampleExplicitLod %81 %83 Lod %27ConstOffset %86 
                                   f32 %87 = OpCompositeExtract %86 3 
                          Private f32* %89 = OpAccessChain %78 %88 
                                               OpStore %89 %87 
                   read_only Texture2D %91 = OpLoad %44 
                               sampler %92 = OpLoad %48 
            read_only Texture2DSampled %93 = OpSampledImage %91 %92 
                                 f32_3 %94 = OpLoad %9 
                                 f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                 f32_4 %97 = OpImageSampleExplicitLod %93 %95 Lod %27ConstOffset %97 
                                   f32 %98 = OpCompositeExtract %97 3 
                                               OpStore %90 %98 
                         Private f32* %101 = OpAccessChain %41 %67 
                                  f32 %102 = OpLoad %101 
                                  f32 %103 = OpLoad %56 
                                  f32 %104 = OpExtInst %1 40 %102 %103 
                         Private f32* %105 = OpAccessChain %100 %88 
                                               OpStore %105 %104 
                         Private f32* %107 = OpAccessChain %41 %67 
                                  f32 %108 = OpLoad %107 
                                  f32 %109 = OpLoad %56 
                                  f32 %110 = OpExtInst %1 37 %108 %109 
                                               OpStore %106 %110 
                                  f32 %111 = OpLoad %69 
                         Private f32* %112 = OpAccessChain %100 %88 
                                  f32 %113 = OpLoad %112 
                                  f32 %114 = OpExtInst %1 40 %111 %113 
                         Private f32* %115 = OpAccessChain %100 %88 
                                               OpStore %115 %114 
                                  f32 %116 = OpLoad %69 
                                  f32 %117 = OpLoad %106 
                                  f32 %118 = OpExtInst %1 37 %116 %117 
                                               OpStore %106 %118 
                                  f32 %120 = OpLoad %90 
                         Private f32* %121 = OpAccessChain %78 %88 
                                  f32 %122 = OpLoad %121 
                                  f32 %123 = OpExtInst %1 40 %120 %122 
                         Private f32* %124 = OpAccessChain %119 %88 
                                               OpStore %124 %123 
                                  f32 %126 = OpLoad %90 
                         Private f32* %127 = OpAccessChain %78 %88 
                                  f32 %128 = OpLoad %127 
                                  f32 %129 = OpExtInst %1 37 %126 %128 
                         Private f32* %130 = OpAccessChain %125 %88 
                                               OpStore %130 %129 
                         Private f32* %131 = OpAccessChain %100 %88 
                                  f32 %132 = OpLoad %131 
                         Private f32* %133 = OpAccessChain %119 %88 
                                  f32 %134 = OpLoad %133 
                                  f32 %135 = OpExtInst %1 40 %132 %134 
                         Private f32* %136 = OpAccessChain %100 %88 
                                               OpStore %136 %135 
                                  f32 %137 = OpLoad %106 
                         Private f32* %138 = OpAccessChain %125 %88 
                                  f32 %139 = OpLoad %138 
                                  f32 %140 = OpExtInst %1 37 %137 %139 
                                               OpStore %106 %140 
                         Private f32* %141 = OpAccessChain %100 %88 
                                  f32 %142 = OpLoad %141 
                                  f32 %144 = OpFMul %142 %143 
                         Private f32* %145 = OpAccessChain %119 %88 
                                               OpStore %145 %144 
                                  f32 %146 = OpLoad %106 
                                  f32 %147 = OpFNegate %146 
                         Private f32* %148 = OpAccessChain %100 %88 
                                  f32 %149 = OpLoad %148 
                                  f32 %150 = OpFAdd %147 %149 
                         Private f32* %151 = OpAccessChain %100 %88 
                                               OpStore %151 %150 
                         Private f32* %152 = OpAccessChain %119 %88 
                                  f32 %153 = OpLoad %152 
                                  f32 %155 = OpExtInst %1 40 %153 %154 
                                               OpStore %106 %155 
                         Private f32* %159 = OpAccessChain %100 %88 
                                  f32 %160 = OpLoad %159 
                                  f32 %161 = OpLoad %106 
                                 bool %162 = OpFOrdGreaterThanEqual %160 %161 
                                               OpStore %158 %162 
                                 bool %163 = OpLoad %158 
                                               OpSelectionMerge %165 None 
                                               OpBranchConditional %163 %164 %165 
                                      %164 = OpLabel 
                  read_only Texture2D %166 = OpLoad %44 
                              sampler %167 = OpLoad %48 
           read_only Texture2DSampled %168 = OpSampledImage %166 %167 
                                f32_3 %169 = OpLoad %9 
                                f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                f32_4 %172 = OpImageSampleExplicitLod %168 %170 Lod %27ConstOffset %172 
                                  f32 %173 = OpCompositeExtract %172 3 
                                               OpStore %106 %173 
                  read_only Texture2D %174 = OpLoad %44 
                              sampler %175 = OpLoad %48 
           read_only Texture2DSampled %176 = OpSampledImage %174 %175 
                                f32_3 %177 = OpLoad %9 
                                f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                f32_4 %180 = OpImageSampleExplicitLod %176 %178 Lod %27ConstOffset %180 
                                  f32 %181 = OpCompositeExtract %180 3 
                         Private f32* %182 = OpAccessChain %119 %88 
                                               OpStore %182 %181 
                  read_only Texture2D %183 = OpLoad %44 
                              sampler %184 = OpLoad %48 
           read_only Texture2DSampled %185 = OpSampledImage %183 %184 
                                f32_3 %186 = OpLoad %9 
                                f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                f32_4 %189 = OpImageSampleExplicitLod %185 %187 Lod %27ConstOffset %189 
                                  f32 %190 = OpCompositeExtract %189 3 
                         Private f32* %191 = OpAccessChain %125 %88 
                                               OpStore %191 %190 
                  read_only Texture2D %192 = OpLoad %44 
                              sampler %193 = OpLoad %48 
           read_only Texture2DSampled %194 = OpSampledImage %192 %193 
                                f32_3 %195 = OpLoad %9 
                                f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                f32_4 %198 = OpImageSampleExplicitLod %194 %196 Lod %27ConstOffset %198 
                                  f32 %199 = OpCompositeExtract %198 3 
                         Private f32* %200 = OpAccessChain %9 %88 
                                               OpStore %200 %199 
                                  f32 %202 = OpLoad %56 
                         Private f32* %203 = OpAccessChain %78 %88 
                                  f32 %204 = OpLoad %203 
                                  f32 %205 = OpFAdd %202 %204 
                         Private f32* %206 = OpAccessChain %201 %88 
                                               OpStore %206 %205 
                                  f32 %208 = OpLoad %69 
                                  f32 %209 = OpLoad %90 
                                  f32 %210 = OpFAdd %208 %209 
                         Private f32* %211 = OpAccessChain %207 %88 
                                               OpStore %211 %210 
                         Private f32* %212 = OpAccessChain %100 %88 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFDiv %19 %213 
                         Private f32* %215 = OpAccessChain %100 %88 
                                               OpStore %215 %214 
                         Private f32* %217 = OpAccessChain %201 %88 
                                  f32 %218 = OpLoad %217 
                         Private f32* %219 = OpAccessChain %207 %88 
                                  f32 %220 = OpLoad %219 
                                  f32 %221 = OpFAdd %218 %220 
                                               OpStore %216 %221 
                         Private f32* %222 = OpAccessChain %41 %67 
                                  f32 %223 = OpLoad %222 
                                  f32 %225 = OpFMul %223 %224 
                         Private f32* %226 = OpAccessChain %201 %88 
                                  f32 %227 = OpLoad %226 
                                  f32 %228 = OpFAdd %225 %227 
                         Private f32* %229 = OpAccessChain %201 %88 
                                               OpStore %229 %228 
                         Private f32* %230 = OpAccessChain %41 %67 
                                  f32 %231 = OpLoad %230 
                                  f32 %232 = OpFMul %231 %224 
                         Private f32* %233 = OpAccessChain %207 %88 
                                  f32 %234 = OpLoad %233 
                                  f32 %235 = OpFAdd %232 %234 
                         Private f32* %236 = OpAccessChain %207 %88 
                                               OpStore %236 %235 
                         Private f32* %238 = OpAccessChain %119 %88 
                                  f32 %239 = OpLoad %238 
                         Private f32* %240 = OpAccessChain %125 %88 
                                  f32 %241 = OpLoad %240 
                                  f32 %242 = OpFAdd %239 %241 
                         Private f32* %243 = OpAccessChain %237 %88 
                                               OpStore %243 %242 
                                  f32 %244 = OpLoad %106 
                         Private f32* %245 = OpAccessChain %125 %88 
                                  f32 %246 = OpLoad %245 
                                  f32 %247 = OpFAdd %244 %246 
                         Private f32* %248 = OpAccessChain %125 %88 
                                               OpStore %248 %247 
                                  f32 %250 = OpLoad %69 
                                  f32 %251 = OpFMul %250 %224 
                         Private f32* %252 = OpAccessChain %237 %88 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpFAdd %251 %253 
                         Private f32* %255 = OpAccessChain %249 %88 
                                               OpStore %255 %254 
                         Private f32* %256 = OpAccessChain %78 %88 
                                  f32 %257 = OpLoad %256 
                                  f32 %258 = OpFMul %257 %224 
                         Private f32* %259 = OpAccessChain %125 %88 
                                  f32 %260 = OpLoad %259 
                                  f32 %261 = OpFAdd %258 %260 
                         Private f32* %262 = OpAccessChain %125 %88 
                                               OpStore %262 %261 
                         Private f32* %263 = OpAccessChain %9 %88 
                                  f32 %264 = OpLoad %263 
                                  f32 %265 = OpLoad %106 
                                  f32 %266 = OpFAdd %264 %265 
                                               OpStore %106 %266 
                         Private f32* %267 = OpAccessChain %119 %88 
                                  f32 %268 = OpLoad %267 
                         Private f32* %269 = OpAccessChain %9 %88 
                                  f32 %270 = OpLoad %269 
                                  f32 %271 = OpFAdd %268 %270 
                         Private f32* %272 = OpAccessChain %9 %88 
                                               OpStore %272 %271 
                         Private f32* %273 = OpAccessChain %201 %88 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpExtInst %1 4 %274 
                                  f32 %277 = OpFMul %275 %276 
                         Private f32* %278 = OpAccessChain %249 %88 
                                  f32 %279 = OpLoad %278 
                                  f32 %280 = OpExtInst %1 4 %279 
                                  f32 %281 = OpFAdd %277 %280 
                         Private f32* %282 = OpAccessChain %201 %88 
                                               OpStore %282 %281 
                         Private f32* %283 = OpAccessChain %207 %88 
                                  f32 %284 = OpLoad %283 
                                  f32 %285 = OpExtInst %1 4 %284 
                                  f32 %286 = OpFMul %285 %276 
                         Private f32* %287 = OpAccessChain %125 %88 
                                  f32 %288 = OpLoad %287 
                                  f32 %289 = OpExtInst %1 4 %288 
                                  f32 %290 = OpFAdd %286 %289 
                         Private f32* %291 = OpAccessChain %119 %88 
                                               OpStore %291 %290 
                                  f32 %292 = OpLoad %90 
                                  f32 %293 = OpFMul %292 %224 
                                  f32 %294 = OpLoad %106 
                                  f32 %295 = OpFAdd %293 %294 
                         Private f32* %296 = OpAccessChain %125 %88 
                                               OpStore %296 %295 
                                  f32 %297 = OpLoad %56 
                                  f32 %298 = OpFMul %297 %224 
                         Private f32* %299 = OpAccessChain %9 %88 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFAdd %298 %300 
                         Private f32* %302 = OpAccessChain %9 %88 
                                               OpStore %302 %301 
                         Private f32* %303 = OpAccessChain %201 %88 
                                  f32 %304 = OpLoad %303 
                         Private f32* %305 = OpAccessChain %125 %88 
                                  f32 %306 = OpLoad %305 
                                  f32 %307 = OpExtInst %1 4 %306 
                                  f32 %308 = OpFAdd %304 %307 
                         Private f32* %309 = OpAccessChain %201 %88 
                                               OpStore %309 %308 
                         Private f32* %310 = OpAccessChain %119 %88 
                                  f32 %311 = OpLoad %310 
                         Private f32* %312 = OpAccessChain %9 %88 
                                  f32 %313 = OpLoad %312 
                                  f32 %314 = OpExtInst %1 4 %313 
                                  f32 %315 = OpFAdd %311 %314 
                         Private f32* %316 = OpAccessChain %9 %88 
                                               OpStore %316 %315 
                         Private f32* %317 = OpAccessChain %237 %88 
                                  f32 %318 = OpLoad %317 
                                  f32 %319 = OpLoad %106 
                                  f32 %320 = OpFAdd %318 %319 
                                               OpStore %106 %320 
                         Private f32* %324 = OpAccessChain %201 %88 
                                  f32 %325 = OpLoad %324 
                         Private f32* %326 = OpAccessChain %9 %88 
                                  f32 %327 = OpLoad %326 
                                 bool %328 = OpFOrdGreaterThanEqual %325 %327 
                        Private bool* %329 = OpAccessChain %323 %88 
                                               OpStore %329 %328 
                                  f32 %330 = OpLoad %216 
                                  f32 %331 = OpFMul %330 %276 
                                  f32 %332 = OpLoad %106 
                                  f32 %333 = OpFAdd %331 %332 
                         Private f32* %334 = OpAccessChain %201 %88 
                                               OpStore %334 %333 
                        Private bool* %335 = OpAccessChain %323 %88 
                                 bool %336 = OpLoad %335 
                                               OpSelectionMerge %340 None 
                                               OpBranchConditional %336 %339 %343 
                                      %339 = OpLabel 
                         Private f32* %341 = OpAccessChain %78 %88 
                                  f32 %342 = OpLoad %341 
                                               OpStore %338 %342 
                                               OpBranch %340 
                                      %343 = OpLabel 
                                  f32 %344 = OpLoad %90 
                                               OpStore %338 %344 
                                               OpBranch %340 
                                      %340 = OpLabel 
                                  f32 %345 = OpLoad %338 
                         Private f32* %346 = OpAccessChain %78 %88 
                                               OpStore %346 %345 
                        Private bool* %347 = OpAccessChain %323 %88 
                                 bool %348 = OpLoad %347 
                                  f32 %349 = OpLoad %56 
                                  f32 %350 = OpLoad %69 
                                  f32 %351 = OpSelect %348 %349 %350 
                                               OpStore %56 %351 
                        Private bool* %352 = OpAccessChain %323 %88 
                                 bool %353 = OpLoad %352 
                                               OpSelectionMerge %356 None 
                                               OpBranchConditional %353 %355 %361 
                                      %355 = OpLabel 
                         Uniform f32* %359 = OpAccessChain %30 %357 %358 
                                  f32 %360 = OpLoad %359 
                                               OpStore %354 %360 
                                               OpBranch %356 
                                      %361 = OpLabel 
                         Uniform f32* %362 = OpAccessChain %30 %357 %88 
                                  f32 %363 = OpLoad %362 
                                               OpStore %354 %363 
                                               OpBranch %356 
                                      %356 = OpLabel 
                                  f32 %364 = OpLoad %354 
                                               OpStore %69 %364 
                         Private f32* %365 = OpAccessChain %201 %88 
                                  f32 %366 = OpLoad %365 
                                  f32 %368 = OpFMul %366 %367 
                         Private f32* %369 = OpAccessChain %41 %67 
                                  f32 %370 = OpLoad %369 
                                  f32 %371 = OpFNegate %370 
                                  f32 %372 = OpFAdd %368 %371 
                         Private f32* %373 = OpAccessChain %201 %88 
                                               OpStore %373 %372 
                         Private f32* %374 = OpAccessChain %41 %67 
                                  f32 %375 = OpLoad %374 
                                  f32 %376 = OpFNegate %375 
                         Private f32* %377 = OpAccessChain %78 %88 
                                  f32 %378 = OpLoad %377 
                                  f32 %379 = OpFAdd %376 %378 
                                               OpStore %90 %379 
                         Private f32* %380 = OpAccessChain %41 %67 
                                  f32 %381 = OpLoad %380 
                                  f32 %382 = OpFNegate %381 
                                  f32 %383 = OpLoad %56 
                                  f32 %384 = OpFAdd %382 %383 
                                               OpStore %106 %384 
                         Private f32* %385 = OpAccessChain %41 %67 
                                  f32 %386 = OpLoad %385 
                         Private f32* %387 = OpAccessChain %78 %88 
                                  f32 %388 = OpLoad %387 
                                  f32 %389 = OpFAdd %386 %388 
                         Private f32* %390 = OpAccessChain %78 %88 
                                               OpStore %390 %389 
                         Private f32* %391 = OpAccessChain %41 %67 
                                  f32 %392 = OpLoad %391 
                                  f32 %393 = OpLoad %56 
                                  f32 %394 = OpFAdd %392 %393 
                                               OpStore %56 %394 
                                  f32 %396 = OpLoad %90 
                                  f32 %397 = OpExtInst %1 4 %396 
                                  f32 %398 = OpLoad %106 
                                  f32 %399 = OpExtInst %1 4 %398 
                                 bool %400 = OpFOrdGreaterThanEqual %397 %399 
                                               OpStore %395 %400 
                                  f32 %401 = OpLoad %106 
                                  f32 %402 = OpExtInst %1 4 %401 
                                  f32 %403 = OpLoad %90 
                                  f32 %404 = OpExtInst %1 4 %403 
                                  f32 %405 = OpExtInst %1 40 %402 %404 
                                               OpStore %90 %405 
                                 bool %406 = OpLoad %395 
                                               OpSelectionMerge %409 None 
                                               OpBranchConditional %406 %408 %412 
                                      %408 = OpLabel 
                                  f32 %410 = OpLoad %69 
                                  f32 %411 = OpFNegate %410 
                                               OpStore %407 %411 
                                               OpBranch %409 
                                      %412 = OpLabel 
                                  f32 %413 = OpLoad %69 
                                               OpStore %407 %413 
                                               OpBranch %409 
                                      %409 = OpLabel 
                                  f32 %414 = OpLoad %407 
                                               OpStore %69 %414 
                         Private f32* %415 = OpAccessChain %100 %88 
                                  f32 %416 = OpLoad %415 
                         Private f32* %417 = OpAccessChain %201 %88 
                                  f32 %418 = OpLoad %417 
                                  f32 %419 = OpExtInst %1 4 %418 
                                  f32 %420 = OpFMul %416 %419 
                         Private f32* %421 = OpAccessChain %201 %88 
                                               OpStore %421 %420 
                         Private f32* %422 = OpAccessChain %201 %88 
                                  f32 %423 = OpLoad %422 
                                  f32 %424 = OpExtInst %1 43 %423 %18 %19 
                         Private f32* %425 = OpAccessChain %201 %88 
                                               OpStore %425 %424 
                        Private bool* %426 = OpAccessChain %323 %88 
                                 bool %427 = OpLoad %426 
                                               OpSelectionMerge %430 None 
                                               OpBranchConditional %427 %429 %433 
                                      %429 = OpLabel 
                         Uniform f32* %431 = OpAccessChain %30 %357 %88 
                                  f32 %432 = OpLoad %431 
                                               OpStore %428 %432 
                                               OpBranch %430 
                                      %433 = OpLabel 
                                               OpStore %428 %18 
                                               OpBranch %430 
                                      %430 = OpLabel 
                                  f32 %434 = OpLoad %428 
                         Private f32* %435 = OpAccessChain %100 %88 
                                               OpStore %435 %434 
                        Private bool* %436 = OpAccessChain %323 %88 
                                 bool %437 = OpLoad %436 
                                               OpSelectionMerge %440 None 
                                               OpBranchConditional %437 %439 %441 
                                      %439 = OpLabel 
                                               OpStore %438 %18 
                                               OpBranch %440 
                                      %441 = OpLabel 
                         Uniform f32* %442 = OpAccessChain %30 %357 %358 
                                  f32 %443 = OpLoad %442 
                                               OpStore %438 %443 
                                               OpBranch %440 
                                      %440 = OpLabel 
                                  f32 %444 = OpLoad %438 
                         Private f32* %445 = OpAccessChain %100 %358 
                                               OpStore %445 %444 
                                  f32 %446 = OpLoad %69 
                                f32_2 %447 = OpCompositeConstruct %446 %446 
                                f32_2 %450 = OpFMul %447 %449 
                                f32_2 %451 = OpLoad vs_TEXCOORD0 
                                f32_2 %452 = OpFAdd %450 %451 
                                               OpStore %125 %452 
                        Private bool* %453 = OpAccessChain %323 %88 
                                 bool %454 = OpLoad %453 
                                               OpSelectionMerge %457 None 
                                               OpBranchConditional %454 %456 %461 
                                      %456 = OpLabel 
                           Input f32* %459 = OpAccessChain vs_TEXCOORD0 %88 
                                  f32 %460 = OpLoad %459 
                                               OpStore %455 %460 
                                               OpBranch %457 
                                      %461 = OpLabel 
                         Private f32* %462 = OpAccessChain %125 %88 
                                  f32 %463 = OpLoad %462 
                                               OpStore %455 %463 
                                               OpBranch %457 
                                      %457 = OpLabel 
                                  f32 %464 = OpLoad %455 
                         Private f32* %465 = OpAccessChain %125 %88 
                                               OpStore %465 %464 
                        Private bool* %466 = OpAccessChain %323 %88 
                                 bool %467 = OpLoad %466 
                                               OpSelectionMerge %470 None 
                                               OpBranchConditional %467 %469 %473 
                                      %469 = OpLabel 
                         Private f32* %471 = OpAccessChain %125 %358 
                                  f32 %472 = OpLoad %471 
                                               OpStore %468 %472 
                                               OpBranch %470 
                                      %473 = OpLabel 
                           Input f32* %474 = OpAccessChain vs_TEXCOORD0 %358 
                                  f32 %475 = OpLoad %474 
                                               OpStore %468 %475 
                                               OpBranch %470 
                                      %470 = OpLabel 
                                  f32 %476 = OpLoad %468 
                         Private f32* %477 = OpAccessChain %125 %358 
                                               OpStore %477 %476 
                                f32_2 %478 = OpLoad %100 
                                f32_2 %479 = OpFNegate %478 
                                f32_2 %480 = OpLoad %125 
                                f32_2 %481 = OpFAdd %479 %480 
                                f32_3 %482 = OpLoad %237 
                                f32_3 %483 = OpVectorShuffle %482 %481 3 4 2 
                                               OpStore %237 %483 
                                f32_2 %485 = OpLoad %100 
                                f32_2 %486 = OpLoad %125 
                                f32_2 %487 = OpFAdd %485 %486 
                                f32_3 %488 = OpLoad %484 
                                f32_3 %489 = OpVectorShuffle %488 %487 3 4 2 
                                               OpStore %484 %489 
                         Private f32* %490 = OpAccessChain %201 %88 
                                  f32 %491 = OpLoad %490 
                                  f32 %492 = OpFMul %491 %224 
                                  f32 %494 = OpFAdd %492 %493 
                         Private f32* %495 = OpAccessChain %125 %88 
                                               OpStore %495 %494 
                                f32_3 %496 = OpLoad %237 
                                f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                                               OpStore %207 %497 
                                f32_2 %498 = OpLoad %207 
                                f32_2 %499 = OpCompositeConstruct %18 %18 
                                f32_2 %500 = OpCompositeConstruct %19 %19 
                                f32_2 %501 = OpExtInst %1 43 %498 %499 %500 
                                               OpStore %207 %501 
                                f32_2 %502 = OpLoad %207 
                         Uniform f32* %503 = OpAccessChain %30 %32 
                                  f32 %504 = OpLoad %503 
                                f32_2 %505 = OpCompositeConstruct %504 %504 
                                f32_2 %506 = OpFMul %502 %505 
                                               OpStore %207 %506 
                  read_only Texture2D %507 = OpLoad %44 
                              sampler %508 = OpLoad %48 
           read_only Texture2DSampled %509 = OpSampledImage %507 %508 
                                f32_2 %510 = OpLoad %207 
                                f32_4 %511 = OpImageSampleExplicitLod %509 %510 Lod %27 
                                  f32 %512 = OpCompositeExtract %511 3 
                         Private f32* %513 = OpAccessChain %207 %88 
                                               OpStore %513 %512 
                         Private f32* %514 = OpAccessChain %201 %88 
                                  f32 %515 = OpLoad %514 
                         Private f32* %516 = OpAccessChain %201 %88 
                                  f32 %517 = OpLoad %516 
                                  f32 %518 = OpFMul %515 %517 
                         Private f32* %519 = OpAccessChain %201 %88 
                                               OpStore %519 %518 
                                f32_3 %521 = OpLoad %484 
                                f32_2 %522 = OpVectorShuffle %521 %521 0 1 
                                               OpStore %520 %522 
                                f32_2 %523 = OpLoad %520 
                                f32_2 %524 = OpCompositeConstruct %18 %18 
                                f32_2 %525 = OpCompositeConstruct %19 %19 
                                f32_2 %526 = OpExtInst %1 43 %523 %524 %525 
                                               OpStore %520 %526 
                                f32_2 %527 = OpLoad %520 
                         Uniform f32* %528 = OpAccessChain %30 %32 
                                  f32 %529 = OpLoad %528 
                                f32_2 %530 = OpCompositeConstruct %529 %529 
                                f32_2 %531 = OpFMul %527 %530 
                                               OpStore %520 %531 
                  read_only Texture2D %532 = OpLoad %44 
                              sampler %533 = OpLoad %48 
           read_only Texture2DSampled %534 = OpSampledImage %532 %533 
                                f32_2 %535 = OpLoad %520 
                                f32_4 %536 = OpImageSampleExplicitLod %534 %535 Lod %27 
                                  f32 %537 = OpCompositeExtract %536 3 
                                               OpStore %216 %537 
                                 bool %538 = OpLoad %395 
                                               OpSelectionMerge %541 None 
                                               OpBranchConditional %538 %540 %544 
                                      %540 = OpLabel 
                         Private f32* %542 = OpAccessChain %78 %88 
                                  f32 %543 = OpLoad %542 
                                               OpStore %539 %543 
                                               OpBranch %541 
                                      %544 = OpLabel 
                                  f32 %545 = OpLoad %56 
                                               OpStore %539 %545 
                                               OpBranch %541 
                                      %541 = OpLabel 
                                  f32 %546 = OpLoad %539 
                                               OpStore %56 %546 
                                  f32 %547 = OpLoad %90 
                                  f32 %549 = OpFMul %547 %548 
                         Private f32* %550 = OpAccessChain %78 %88 
                                               OpStore %550 %549 
                                  f32 %551 = OpLoad %56 
                                  f32 %552 = OpFNegate %551 
                                  f32 %553 = OpFMul %552 %448 
                         Private f32* %554 = OpAccessChain %41 %67 
                                  f32 %555 = OpLoad %554 
                                  f32 %556 = OpFAdd %553 %555 
                                               OpStore %90 %556 
                         Private f32* %557 = OpAccessChain %201 %88 
                                  f32 %558 = OpLoad %557 
                         Private f32* %559 = OpAccessChain %125 %88 
                                  f32 %560 = OpLoad %559 
                                  f32 %561 = OpFMul %558 %560 
                         Private f32* %562 = OpAccessChain %201 %88 
                                               OpStore %562 %561 
                                  f32 %565 = OpLoad %90 
                                 bool %566 = OpFOrdLessThan %565 %18 
                                  u32 %568 = OpSelect %566 %567 %88 
                                  i32 %569 = OpBitcast %568 
                                               OpStore %564 %569 
                                  f32 %570 = OpLoad %56 
                                  f32 %571 = OpFNegate %570 
                                  f32 %572 = OpFMul %571 %448 
                         Private f32* %573 = OpAccessChain %207 %88 
                                  f32 %574 = OpLoad %573 
                                  f32 %575 = OpFAdd %572 %574 
                         Private f32* %576 = OpAccessChain %119 %88 
                                               OpStore %576 %575 
                                  f32 %577 = OpLoad %56 
                                  f32 %578 = OpFNegate %577 
                                  f32 %579 = OpFMul %578 %448 
                                  f32 %580 = OpLoad %216 
                                  f32 %581 = OpFAdd %579 %580 
                         Private f32* %582 = OpAccessChain %119 %358 
                                               OpStore %582 %581 
                                f32_2 %585 = OpLoad %119 
                                f32_4 %586 = OpVectorShuffle %585 %585 0 1 0 1 
                                f32_4 %587 = OpExtInst %1 4 %586 
                                f32_3 %588 = OpLoad %78 
                                f32_4 %589 = OpVectorShuffle %588 %588 0 0 0 0 
                               bool_4 %591 = OpFOrdGreaterThanEqual %587 %589 
                               bool_2 %593 = OpVectorShuffle %591 %591 0 1 
                                u32_2 %597 = OpSelect %593 %596 %595 
                                u32_2 %598 = OpCompositeConstruct %567 %567 
                                u32_2 %599 = OpIMul %597 %598 
                                i32_2 %600 = OpBitcast %599 
                                               OpStore %584 %600 
                         Private f32* %601 = OpAccessChain %100 %88 
                                  f32 %602 = OpLoad %601 
                                  f32 %603 = OpFNegate %602 
                                  f32 %605 = OpFMul %603 %604 
                         Private f32* %606 = OpAccessChain %237 %88 
                                  f32 %607 = OpLoad %606 
                                  f32 %608 = OpFAdd %605 %607 
                         Private f32* %609 = OpAccessChain %520 %88 
                                               OpStore %609 %608 
                         Private i32* %610 = OpAccessChain %584 %88 
                                  i32 %611 = OpLoad %610 
                                 bool %612 = OpINotEqual %611 %32 
                                               OpSelectionMerge %615 None 
                                               OpBranchConditional %612 %614 %618 
                                      %614 = OpLabel 
                         Private f32* %616 = OpAccessChain %237 %88 
                                  f32 %617 = OpLoad %616 
                                               OpStore %613 %617 
                                               OpBranch %615 
                                      %618 = OpLabel 
                         Private f32* %619 = OpAccessChain %520 %88 
                                  f32 %620 = OpLoad %619 
                                               OpStore %613 %620 
                                               OpBranch %615 
                                      %615 = OpLabel 
                                  f32 %621 = OpLoad %613 
                         Private f32* %622 = OpAccessChain %237 %88 
                                               OpStore %622 %621 
                         Private f32* %624 = OpAccessChain %100 %358 
                                  f32 %625 = OpLoad %624 
                                  f32 %626 = OpFNegate %625 
                                  f32 %627 = OpFMul %626 %604 
                         Private f32* %628 = OpAccessChain %237 %358 
                                  f32 %629 = OpLoad %628 
                                  f32 %630 = OpFAdd %627 %629 
                                               OpStore %623 %630 
                         Private i32* %631 = OpAccessChain %584 %88 
                                  i32 %632 = OpLoad %631 
                                 bool %633 = OpINotEqual %632 %32 
                                               OpSelectionMerge %636 None 
                                               OpBranchConditional %633 %635 %639 
                                      %635 = OpLabel 
                         Private f32* %637 = OpAccessChain %237 %358 
                                  f32 %638 = OpLoad %637 
                                               OpStore %634 %638 
                                               OpBranch %636 
                                      %639 = OpLabel 
                                  f32 %640 = OpLoad %623 
                                               OpStore %634 %640 
                                               OpBranch %636 
                                      %636 = OpLabel 
                                  f32 %641 = OpLoad %634 
                         Private f32* %643 = OpAccessChain %237 %642 
                                               OpStore %643 %641 
                                i32_2 %647 = OpLoad %584 
                                i32_2 %648 = OpNot %647 
                                i32_3 %649 = OpLoad %646 
                                i32_3 %650 = OpVectorShuffle %649 %648 3 1 4 
                                               OpStore %646 %650 
                         Private i32* %651 = OpAccessChain %646 %642 
                                  i32 %652 = OpLoad %651 
                                  u32 %653 = OpBitcast %652 
                         Private i32* %654 = OpAccessChain %646 %88 
                                  i32 %655 = OpLoad %654 
                                  u32 %656 = OpBitcast %655 
                                  u32 %657 = OpBitwiseOr %653 %656 
                                  i32 %658 = OpBitcast %657 
                         Private i32* %659 = OpAccessChain %646 %88 
                                               OpStore %659 %658 
                         Private f32* %660 = OpAccessChain %100 %88 
                                  f32 %661 = OpLoad %660 
                                  f32 %662 = OpFMul %661 %604 
                         Private f32* %663 = OpAccessChain %484 %88 
                                  f32 %664 = OpLoad %663 
                                  f32 %665 = OpFAdd %662 %664 
                                               OpStore %623 %665 
                         Private i32* %666 = OpAccessChain %584 %358 
                                  i32 %667 = OpLoad %666 
                                 bool %668 = OpINotEqual %667 %32 
                                               OpSelectionMerge %671 None 
                                               OpBranchConditional %668 %670 %674 
                                      %670 = OpLabel 
                         Private f32* %672 = OpAccessChain %484 %88 
                                  f32 %673 = OpLoad %672 
                                               OpStore %669 %673 
                                               OpBranch %671 
                                      %674 = OpLabel 
                                  f32 %675 = OpLoad %623 
                                               OpStore %669 %675 
                                               OpBranch %671 
                                      %671 = OpLabel 
                                  f32 %676 = OpLoad %669 
                         Private f32* %677 = OpAccessChain %484 %88 
                                               OpStore %677 %676 
                         Private f32* %678 = OpAccessChain %100 %358 
                                  f32 %679 = OpLoad %678 
                                  f32 %680 = OpFMul %679 %604 
                         Private f32* %681 = OpAccessChain %484 %358 
                                  f32 %682 = OpLoad %681 
                                  f32 %683 = OpFAdd %680 %682 
                                               OpStore %623 %683 
                         Private i32* %684 = OpAccessChain %584 %358 
                                  i32 %685 = OpLoad %684 
                                 bool %686 = OpINotEqual %685 %32 
                                               OpSelectionMerge %689 None 
                                               OpBranchConditional %686 %688 %692 
                                      %688 = OpLabel 
                         Private f32* %690 = OpAccessChain %484 %358 
                                  f32 %691 = OpLoad %690 
                                               OpStore %687 %691 
                                               OpBranch %689 
                                      %692 = OpLabel 
                                  f32 %693 = OpLoad %623 
                                               OpStore %687 %693 
                                               OpBranch %689 
                                      %689 = OpLabel 
                                  f32 %694 = OpLoad %687 
                         Private f32* %695 = OpAccessChain %484 %642 
                                               OpStore %695 %694 
                         Private i32* %696 = OpAccessChain %646 %88 
                                  i32 %697 = OpLoad %696 
                                 bool %698 = OpINotEqual %697 %32 
                                               OpSelectionMerge %700 None 
                                               OpBranchConditional %698 %699 %700 
                                      %699 = OpLabel 
                         Private i32* %701 = OpAccessChain %584 %88 
                                  i32 %702 = OpLoad %701 
                                 bool %703 = OpIEqual %702 %32 
                                               OpSelectionMerge %705 None 
                                               OpBranchConditional %703 %704 %705 
                                      %704 = OpLabel 
                                f32_3 %706 = OpLoad %237 
                                f32_2 %707 = OpVectorShuffle %706 %706 0 2 
                                f32_3 %708 = OpLoad %249 
                                f32_3 %709 = OpVectorShuffle %708 %707 3 1 4 
                                               OpStore %249 %709 
                                f32_3 %710 = OpLoad %249 
                                f32_2 %711 = OpVectorShuffle %710 %710 0 2 
                                f32_2 %712 = OpCompositeConstruct %18 %18 
                                f32_2 %713 = OpCompositeConstruct %19 %19 
                                f32_2 %714 = OpExtInst %1 43 %711 %712 %713 
                                f32_3 %715 = OpLoad %249 
                                f32_3 %716 = OpVectorShuffle %715 %714 3 1 4 
                                               OpStore %249 %716 
                                f32_3 %717 = OpLoad %249 
                                f32_2 %718 = OpVectorShuffle %717 %717 0 2 
                         Uniform f32* %719 = OpAccessChain %30 %32 
                                  f32 %720 = OpLoad %719 
                                f32_2 %721 = OpCompositeConstruct %720 %720 
                                f32_2 %722 = OpFMul %718 %721 
                                f32_3 %723 = OpLoad %249 
                                f32_3 %724 = OpVectorShuffle %723 %722 3 1 4 
                                               OpStore %249 %724 
                  read_only Texture2D %725 = OpLoad %44 
                              sampler %726 = OpLoad %48 
           read_only Texture2DSampled %727 = OpSampledImage %725 %726 
                                f32_3 %728 = OpLoad %249 
                                f32_2 %729 = OpVectorShuffle %728 %728 0 2 
                                f32_4 %730 = OpImageSampleExplicitLod %727 %729 Lod %27 
                                  f32 %731 = OpCompositeExtract %730 3 
                         Private f32* %732 = OpAccessChain %119 %88 
                                               OpStore %732 %731 
                                               OpBranch %705 
                                      %705 = OpLabel 
                         Private i32* %733 = OpAccessChain %584 %358 
                                  i32 %734 = OpLoad %733 
                                 bool %735 = OpIEqual %734 %32 
                                               OpSelectionMerge %737 None 
                                               OpBranchConditional %735 %736 %737 
                                      %736 = OpLabel 
                                f32_3 %738 = OpLoad %484 
                                f32_2 %739 = OpVectorShuffle %738 %738 0 2 
                                f32_3 %740 = OpLoad %249 
                                f32_3 %741 = OpVectorShuffle %740 %739 3 1 4 
                                               OpStore %249 %741 
                                f32_3 %742 = OpLoad %249 
                                f32_2 %743 = OpVectorShuffle %742 %742 0 2 
                                f32_2 %744 = OpCompositeConstruct %18 %18 
                                f32_2 %745 = OpCompositeConstruct %19 %19 
                                f32_2 %746 = OpExtInst %1 43 %743 %744 %745 
                                f32_3 %747 = OpLoad %249 
                                f32_3 %748 = OpVectorShuffle %747 %746 3 1 4 
                                               OpStore %249 %748 
                                f32_3 %749 = OpLoad %249 
                                f32_2 %750 = OpVectorShuffle %749 %749 0 2 
                         Uniform f32* %751 = OpAccessChain %30 %32 
                                  f32 %752 = OpLoad %751 
                                f32_2 %753 = OpCompositeConstruct %752 %752 
                                f32_2 %754 = OpFMul %750 %753 
                                f32_3 %755 = OpLoad %249 
                                f32_3 %756 = OpVectorShuffle %755 %754 3 1 4 
                                               OpStore %249 %756 
                  read_only Texture2D %757 = OpLoad %44 
                              sampler %758 = OpLoad %48 
           read_only Texture2DSampled %759 = OpSampledImage %757 %758 
                                f32_3 %760 = OpLoad %249 
                                f32_2 %761 = OpVectorShuffle %760 %760 0 2 
                                f32_4 %762 = OpImageSampleExplicitLod %759 %761 Lod %27 
                                  f32 %763 = OpCompositeExtract %762 3 
                         Private f32* %764 = OpAccessChain %119 %358 
                                               OpStore %764 %763 
                                               OpBranch %737 
                                      %737 = OpLabel 
                                  f32 %765 = OpLoad %56 
                                  f32 %766 = OpFNegate %765 
                                  f32 %767 = OpFMul %766 %448 
                         Private f32* %768 = OpAccessChain %119 %88 
                                  f32 %769 = OpLoad %768 
                                  f32 %770 = OpFAdd %767 %769 
                         Private f32* %771 = OpAccessChain %249 %88 
                                               OpStore %771 %770 
                         Private i32* %772 = OpAccessChain %584 %88 
                                  i32 %773 = OpLoad %772 
                                 bool %774 = OpINotEqual %773 %32 
                                               OpSelectionMerge %777 None 
                                               OpBranchConditional %774 %776 %780 
                                      %776 = OpLabel 
                         Private f32* %778 = OpAccessChain %119 %88 
                                  f32 %779 = OpLoad %778 
                                               OpStore %775 %779 
                                               OpBranch %777 
                                      %780 = OpLabel 
                         Private f32* %781 = OpAccessChain %249 %88 
                                  f32 %782 = OpLoad %781 
                                               OpStore %775 %782 
                                               OpBranch %777 
                                      %777 = OpLabel 
                                  f32 %783 = OpLoad %775 
                         Private f32* %784 = OpAccessChain %119 %88 
                                               OpStore %784 %783 
                                  f32 %785 = OpLoad %56 
                                  f32 %786 = OpFNegate %785 
                                  f32 %787 = OpFMul %786 %448 
                         Private f32* %788 = OpAccessChain %119 %358 
                                  f32 %789 = OpLoad %788 
                                  f32 %790 = OpFAdd %787 %789 
                         Private f32* %791 = OpAccessChain %207 %88 
                                               OpStore %791 %790 
                         Private i32* %792 = OpAccessChain %584 %358 
                                  i32 %793 = OpLoad %792 
                                 bool %794 = OpINotEqual %793 %32 
                                               OpSelectionMerge %797 None 
                                               OpBranchConditional %794 %796 %800 
                                      %796 = OpLabel 
                         Private f32* %798 = OpAccessChain %119 %358 
                                  f32 %799 = OpLoad %798 
                                               OpStore %795 %799 
                                               OpBranch %797 
                                      %800 = OpLabel 
                         Private f32* %801 = OpAccessChain %207 %88 
                                  f32 %802 = OpLoad %801 
                                               OpStore %795 %802 
                                               OpBranch %797 
                                      %797 = OpLabel 
                                  f32 %803 = OpLoad %795 
                         Private f32* %804 = OpAccessChain %119 %358 
                                               OpStore %804 %803 
                                f32_2 %805 = OpLoad %119 
                                f32_4 %806 = OpVectorShuffle %805 %805 0 1 0 1 
                                f32_4 %807 = OpExtInst %1 4 %806 
                                f32_3 %808 = OpLoad %78 
                                f32_4 %809 = OpVectorShuffle %808 %808 0 0 0 0 
                               bool_4 %810 = OpFOrdGreaterThanEqual %807 %809 
                               bool_2 %811 = OpVectorShuffle %810 %810 0 1 
                                u32_2 %812 = OpSelect %811 %596 %595 
                                u32_2 %813 = OpCompositeConstruct %567 %567 
                                u32_2 %814 = OpIMul %812 %813 
                                i32_2 %815 = OpBitcast %814 
                                               OpStore %584 %815 
                         Private f32* %816 = OpAccessChain %100 %88 
                                  f32 %817 = OpLoad %816 
                                  f32 %818 = OpFNegate %817 
                                  f32 %819 = OpFMul %818 %276 
                         Private f32* %820 = OpAccessChain %237 %88 
                                  f32 %821 = OpLoad %820 
                                  f32 %822 = OpFAdd %819 %821 
                         Private f32* %823 = OpAccessChain %249 %88 
                                               OpStore %823 %822 
                         Private i32* %824 = OpAccessChain %584 %88 
                                  i32 %825 = OpLoad %824 
                                 bool %826 = OpINotEqual %825 %32 
                                               OpSelectionMerge %829 None 
                                               OpBranchConditional %826 %828 %832 
                                      %828 = OpLabel 
                         Private f32* %830 = OpAccessChain %237 %88 
                                  f32 %831 = OpLoad %830 
                                               OpStore %827 %831 
                                               OpBranch %829 
                                      %832 = OpLabel 
                         Private f32* %833 = OpAccessChain %249 %88 
                                  f32 %834 = OpLoad %833 
                                               OpStore %827 %834 
                                               OpBranch %829 
                                      %829 = OpLabel 
                                  f32 %835 = OpLoad %827 
                         Private f32* %836 = OpAccessChain %237 %88 
                                               OpStore %836 %835 
                         Private f32* %837 = OpAccessChain %100 %358 
                                  f32 %838 = OpLoad %837 
                                  f32 %839 = OpFNegate %838 
                                  f32 %840 = OpFMul %839 %276 
                         Private f32* %841 = OpAccessChain %237 %642 
                                  f32 %842 = OpLoad %841 
                                  f32 %843 = OpFAdd %840 %842 
                         Private f32* %844 = OpAccessChain %249 %88 
                                               OpStore %844 %843 
                         Private i32* %845 = OpAccessChain %584 %88 
                                  i32 %846 = OpLoad %845 
                                 bool %847 = OpINotEqual %846 %32 
                                               OpSelectionMerge %850 None 
                                               OpBranchConditional %847 %849 %853 
                                      %849 = OpLabel 
                         Private f32* %851 = OpAccessChain %237 %642 
                                  f32 %852 = OpLoad %851 
                                               OpStore %848 %852 
                                               OpBranch %850 
                                      %853 = OpLabel 
                         Private f32* %854 = OpAccessChain %249 %88 
                                  f32 %855 = OpLoad %854 
                                               OpStore %848 %855 
                                               OpBranch %850 
                                      %850 = OpLabel 
                                  f32 %856 = OpLoad %848 
                         Private f32* %857 = OpAccessChain %237 %642 
                                               OpStore %857 %856 
                                i32_2 %858 = OpLoad %584 
                                i32_2 %859 = OpNot %858 
                                i32_3 %860 = OpLoad %646 
                                i32_3 %861 = OpVectorShuffle %860 %859 3 1 4 
                                               OpStore %646 %861 
                         Private i32* %862 = OpAccessChain %646 %642 
                                  i32 %863 = OpLoad %862 
                                  u32 %864 = OpBitcast %863 
                         Private i32* %865 = OpAccessChain %646 %88 
                                  i32 %866 = OpLoad %865 
                                  u32 %867 = OpBitcast %866 
                                  u32 %868 = OpBitwiseOr %864 %867 
                                  i32 %869 = OpBitcast %868 
                         Private i32* %870 = OpAccessChain %646 %88 
                                               OpStore %870 %869 
                         Private f32* %871 = OpAccessChain %100 %88 
                                  f32 %872 = OpLoad %871 
                                  f32 %873 = OpFMul %872 %276 
                         Private f32* %874 = OpAccessChain %484 %88 
                                  f32 %875 = OpLoad %874 
                                  f32 %876 = OpFAdd %873 %875 
                                               OpStore %623 %876 
                         Private i32* %877 = OpAccessChain %584 %358 
                                  i32 %878 = OpLoad %877 
                                 bool %879 = OpINotEqual %878 %32 
                                               OpSelectionMerge %882 None 
                                               OpBranchConditional %879 %881 %885 
                                      %881 = OpLabel 
                         Private f32* %883 = OpAccessChain %484 %88 
                                  f32 %884 = OpLoad %883 
                                               OpStore %880 %884 
                                               OpBranch %882 
                                      %885 = OpLabel 
                                  f32 %886 = OpLoad %623 
                                               OpStore %880 %886 
                                               OpBranch %882 
                                      %882 = OpLabel 
                                  f32 %887 = OpLoad %880 
                         Private f32* %888 = OpAccessChain %484 %88 
                                               OpStore %888 %887 
                         Private f32* %889 = OpAccessChain %100 %358 
                                  f32 %890 = OpLoad %889 
                                  f32 %891 = OpFMul %890 %276 
                         Private f32* %892 = OpAccessChain %484 %642 
                                  f32 %893 = OpLoad %892 
                                  f32 %894 = OpFAdd %891 %893 
                                               OpStore %623 %894 
                         Private i32* %895 = OpAccessChain %584 %358 
                                  i32 %896 = OpLoad %895 
                                 bool %897 = OpINotEqual %896 %32 
                                               OpSelectionMerge %900 None 
                                               OpBranchConditional %897 %899 %903 
                                      %899 = OpLabel 
                         Private f32* %901 = OpAccessChain %484 %642 
                                  f32 %902 = OpLoad %901 
                                               OpStore %898 %902 
                                               OpBranch %900 
                                      %903 = OpLabel 
                                  f32 %904 = OpLoad %623 
                                               OpStore %898 %904 
                                               OpBranch %900 
                                      %900 = OpLabel 
                                  f32 %905 = OpLoad %898 
                         Private f32* %906 = OpAccessChain %484 %642 
                                               OpStore %906 %905 
                         Private i32* %907 = OpAccessChain %646 %88 
                                  i32 %908 = OpLoad %907 
                                 bool %909 = OpINotEqual %908 %32 
                                               OpSelectionMerge %911 None 
                                               OpBranchConditional %909 %910 %911 
                                      %910 = OpLabel 
                         Private i32* %912 = OpAccessChain %584 %88 
                                  i32 %913 = OpLoad %912 
                                 bool %914 = OpIEqual %913 %32 
                                               OpSelectionMerge %916 None 
                                               OpBranchConditional %914 %915 %916 
                                      %915 = OpLabel 
                                f32_3 %917 = OpLoad %237 
                                f32_2 %918 = OpVectorShuffle %917 %917 0 2 
                                f32_3 %919 = OpLoad %249 
                                f32_3 %920 = OpVectorShuffle %919 %918 3 1 4 
                                               OpStore %249 %920 
                                f32_3 %921 = OpLoad %249 
                                f32_2 %922 = OpVectorShuffle %921 %921 0 2 
                                f32_2 %923 = OpCompositeConstruct %18 %18 
                                f32_2 %924 = OpCompositeConstruct %19 %19 
                                f32_2 %925 = OpExtInst %1 43 %922 %923 %924 
                                f32_3 %926 = OpLoad %249 
                                f32_3 %927 = OpVectorShuffle %926 %925 3 1 4 
                                               OpStore %249 %927 
                                f32_3 %928 = OpLoad %249 
                                f32_2 %929 = OpVectorShuffle %928 %928 0 2 
                         Uniform f32* %930 = OpAccessChain %30 %32 
                                  f32 %931 = OpLoad %930 
                                f32_2 %932 = OpCompositeConstruct %931 %931 
                                f32_2 %933 = OpFMul %929 %932 
                                f32_3 %934 = OpLoad %249 
                                f32_3 %935 = OpVectorShuffle %934 %933 3 1 4 
                                               OpStore %249 %935 
                  read_only Texture2D %936 = OpLoad %44 
                              sampler %937 = OpLoad %48 
           read_only Texture2DSampled %938 = OpSampledImage %936 %937 
                                f32_3 %939 = OpLoad %249 
                                f32_2 %940 = OpVectorShuffle %939 %939 0 2 
                                f32_4 %941 = OpImageSampleExplicitLod %938 %940 Lod %27 
                                  f32 %942 = OpCompositeExtract %941 3 
                         Private f32* %943 = OpAccessChain %119 %88 
                                               OpStore %943 %942 
                                               OpBranch %916 
                                      %916 = OpLabel 
                         Private i32* %944 = OpAccessChain %584 %358 
                                  i32 %945 = OpLoad %944 
                                 bool %946 = OpIEqual %945 %32 
                                               OpSelectionMerge %948 None 
                                               OpBranchConditional %946 %947 %948 
                                      %947 = OpLabel 
                                f32_3 %949 = OpLoad %484 
                                f32_2 %950 = OpVectorShuffle %949 %949 0 2 
                                f32_3 %951 = OpLoad %249 
                                f32_3 %952 = OpVectorShuffle %951 %950 3 1 4 
                                               OpStore %249 %952 
                                f32_3 %953 = OpLoad %249 
                                f32_2 %954 = OpVectorShuffle %953 %953 0 2 
                                f32_2 %955 = OpCompositeConstruct %18 %18 
                                f32_2 %956 = OpCompositeConstruct %19 %19 
                                f32_2 %957 = OpExtInst %1 43 %954 %955 %956 
                                f32_3 %958 = OpLoad %249 
                                f32_3 %959 = OpVectorShuffle %958 %957 3 1 4 
                                               OpStore %249 %959 
                                f32_3 %960 = OpLoad %249 
                                f32_2 %961 = OpVectorShuffle %960 %960 0 2 
                         Uniform f32* %962 = OpAccessChain %30 %32 
                                  f32 %963 = OpLoad %962 
                                f32_2 %964 = OpCompositeConstruct %963 %963 
                                f32_2 %965 = OpFMul %961 %964 
                                f32_3 %966 = OpLoad %249 
                                f32_3 %967 = OpVectorShuffle %966 %965 3 1 4 
                                               OpStore %249 %967 
                  read_only Texture2D %968 = OpLoad %44 
                              sampler %969 = OpLoad %48 
           read_only Texture2DSampled %970 = OpSampledImage %968 %969 
                                f32_3 %971 = OpLoad %249 
                                f32_2 %972 = OpVectorShuffle %971 %971 0 2 
                                f32_4 %973 = OpImageSampleExplicitLod %970 %972 Lod %27 
                                  f32 %974 = OpCompositeExtract %973 3 
                         Private f32* %975 = OpAccessChain %119 %358 
                                               OpStore %975 %974 
                                               OpBranch %948 
                                      %948 = OpLabel 
                                  f32 %976 = OpLoad %56 
                                  f32 %977 = OpFNegate %976 
                                  f32 %978 = OpFMul %977 %448 
                         Private f32* %979 = OpAccessChain %119 %88 
                                  f32 %980 = OpLoad %979 
                                  f32 %981 = OpFAdd %978 %980 
                         Private f32* %982 = OpAccessChain %249 %88 
                                               OpStore %982 %981 
                         Private i32* %983 = OpAccessChain %584 %88 
                                  i32 %984 = OpLoad %983 
                                 bool %985 = OpINotEqual %984 %32 
                                               OpSelectionMerge %988 None 
                                               OpBranchConditional %985 %987 %991 
                                      %987 = OpLabel 
                         Private f32* %989 = OpAccessChain %119 %88 
                                  f32 %990 = OpLoad %989 
                                               OpStore %986 %990 
                                               OpBranch %988 
                                      %991 = OpLabel 
                         Private f32* %992 = OpAccessChain %249 %88 
                                  f32 %993 = OpLoad %992 
                                               OpStore %986 %993 
                                               OpBranch %988 
                                      %988 = OpLabel 
                                  f32 %994 = OpLoad %986 
                         Private f32* %995 = OpAccessChain %119 %88 
                                               OpStore %995 %994 
                                  f32 %996 = OpLoad %56 
                                  f32 %997 = OpFNegate %996 
                                  f32 %998 = OpFMul %997 %448 
                         Private f32* %999 = OpAccessChain %119 %358 
                                 f32 %1000 = OpLoad %999 
                                 f32 %1001 = OpFAdd %998 %1000 
                        Private f32* %1002 = OpAccessChain %207 %88 
                                               OpStore %1002 %1001 
                        Private i32* %1003 = OpAccessChain %584 %358 
                                 i32 %1004 = OpLoad %1003 
                                bool %1005 = OpINotEqual %1004 %32 
                                               OpSelectionMerge %1008 None 
                                               OpBranchConditional %1005 %1007 %1011 
                                     %1007 = OpLabel 
                        Private f32* %1009 = OpAccessChain %119 %358 
                                 f32 %1010 = OpLoad %1009 
                                               OpStore %1006 %1010 
                                               OpBranch %1008 
                                     %1011 = OpLabel 
                        Private f32* %1012 = OpAccessChain %207 %88 
                                 f32 %1013 = OpLoad %1012 
                                               OpStore %1006 %1013 
                                               OpBranch %1008 
                                     %1008 = OpLabel 
                                 f32 %1014 = OpLoad %1006 
                        Private f32* %1015 = OpAccessChain %119 %358 
                                               OpStore %1015 %1014 
                               f32_2 %1016 = OpLoad %119 
                               f32_4 %1017 = OpVectorShuffle %1016 %1016 0 1 0 1 
                               f32_4 %1018 = OpExtInst %1 4 %1017 
                               f32_3 %1019 = OpLoad %78 
                               f32_4 %1020 = OpVectorShuffle %1019 %1019 0 0 0 0 
                              bool_4 %1021 = OpFOrdGreaterThanEqual %1018 %1020 
                              bool_2 %1022 = OpVectorShuffle %1021 %1021 0 1 
                               u32_2 %1023 = OpSelect %1022 %596 %595 
                               u32_2 %1024 = OpCompositeConstruct %567 %567 
                               u32_2 %1025 = OpIMul %1023 %1024 
                               i32_2 %1026 = OpBitcast %1025 
                                               OpStore %584 %1026 
                        Private f32* %1027 = OpAccessChain %100 %88 
                                 f32 %1028 = OpLoad %1027 
                                 f32 %1029 = OpFNegate %1028 
                                 f32 %1031 = OpFMul %1029 %1030 
                        Private f32* %1032 = OpAccessChain %237 %88 
                                 f32 %1033 = OpLoad %1032 
                                 f32 %1034 = OpFAdd %1031 %1033 
                        Private f32* %1035 = OpAccessChain %249 %88 
                                               OpStore %1035 %1034 
                        Private i32* %1036 = OpAccessChain %584 %88 
                                 i32 %1037 = OpLoad %1036 
                                bool %1038 = OpINotEqual %1037 %32 
                                               OpSelectionMerge %1041 None 
                                               OpBranchConditional %1038 %1040 %1044 
                                     %1040 = OpLabel 
                        Private f32* %1042 = OpAccessChain %237 %88 
                                 f32 %1043 = OpLoad %1042 
                                               OpStore %1039 %1043 
                                               OpBranch %1041 
                                     %1044 = OpLabel 
                        Private f32* %1045 = OpAccessChain %249 %88 
                                 f32 %1046 = OpLoad %1045 
                                               OpStore %1039 %1046 
                                               OpBranch %1041 
                                     %1041 = OpLabel 
                                 f32 %1047 = OpLoad %1039 
                        Private f32* %1048 = OpAccessChain %237 %88 
                                               OpStore %1048 %1047 
                        Private f32* %1049 = OpAccessChain %100 %358 
                                 f32 %1050 = OpLoad %1049 
                                 f32 %1051 = OpFNegate %1050 
                                 f32 %1052 = OpFMul %1051 %1030 
                        Private f32* %1053 = OpAccessChain %237 %642 
                                 f32 %1054 = OpLoad %1053 
                                 f32 %1055 = OpFAdd %1052 %1054 
                        Private f32* %1056 = OpAccessChain %249 %88 
                                               OpStore %1056 %1055 
                        Private i32* %1057 = OpAccessChain %584 %88 
                                 i32 %1058 = OpLoad %1057 
                                bool %1059 = OpINotEqual %1058 %32 
                                               OpSelectionMerge %1062 None 
                                               OpBranchConditional %1059 %1061 %1065 
                                     %1061 = OpLabel 
                        Private f32* %1063 = OpAccessChain %237 %642 
                                 f32 %1064 = OpLoad %1063 
                                               OpStore %1060 %1064 
                                               OpBranch %1062 
                                     %1065 = OpLabel 
                        Private f32* %1066 = OpAccessChain %249 %88 
                                 f32 %1067 = OpLoad %1066 
                                               OpStore %1060 %1067 
                                               OpBranch %1062 
                                     %1062 = OpLabel 
                                 f32 %1068 = OpLoad %1060 
                        Private f32* %1069 = OpAccessChain %237 %642 
                                               OpStore %1069 %1068 
                               i32_2 %1070 = OpLoad %584 
                               i32_2 %1071 = OpNot %1070 
                               i32_3 %1072 = OpLoad %646 
                               i32_3 %1073 = OpVectorShuffle %1072 %1071 3 1 4 
                                               OpStore %646 %1073 
                        Private i32* %1074 = OpAccessChain %646 %642 
                                 i32 %1075 = OpLoad %1074 
                                 u32 %1076 = OpBitcast %1075 
                        Private i32* %1077 = OpAccessChain %646 %88 
                                 i32 %1078 = OpLoad %1077 
                                 u32 %1079 = OpBitcast %1078 
                                 u32 %1080 = OpBitwiseOr %1076 %1079 
                                 i32 %1081 = OpBitcast %1080 
                        Private i32* %1082 = OpAccessChain %646 %88 
                                               OpStore %1082 %1081 
                        Private f32* %1083 = OpAccessChain %100 %88 
                                 f32 %1084 = OpLoad %1083 
                                 f32 %1085 = OpFMul %1084 %1030 
                        Private f32* %1086 = OpAccessChain %484 %88 
                                 f32 %1087 = OpLoad %1086 
                                 f32 %1088 = OpFAdd %1085 %1087 
                                               OpStore %623 %1088 
                        Private i32* %1089 = OpAccessChain %584 %358 
                                 i32 %1090 = OpLoad %1089 
                                bool %1091 = OpINotEqual %1090 %32 
                                               OpSelectionMerge %1094 None 
                                               OpBranchConditional %1091 %1093 %1097 
                                     %1093 = OpLabel 
                        Private f32* %1095 = OpAccessChain %484 %88 
                                 f32 %1096 = OpLoad %1095 
                                               OpStore %1092 %1096 
                                               OpBranch %1094 
                                     %1097 = OpLabel 
                                 f32 %1098 = OpLoad %623 
                                               OpStore %1092 %1098 
                                               OpBranch %1094 
                                     %1094 = OpLabel 
                                 f32 %1099 = OpLoad %1092 
                        Private f32* %1100 = OpAccessChain %484 %88 
                                               OpStore %1100 %1099 
                        Private f32* %1101 = OpAccessChain %100 %358 
                                 f32 %1102 = OpLoad %1101 
                                 f32 %1103 = OpFMul %1102 %1030 
                        Private f32* %1104 = OpAccessChain %484 %642 
                                 f32 %1105 = OpLoad %1104 
                                 f32 %1106 = OpFAdd %1103 %1105 
                                               OpStore %623 %1106 
                        Private i32* %1107 = OpAccessChain %584 %358 
                                 i32 %1108 = OpLoad %1107 
                                bool %1109 = OpINotEqual %1108 %32 
                                               OpSelectionMerge %1112 None 
                                               OpBranchConditional %1109 %1111 %1115 
                                     %1111 = OpLabel 
                        Private f32* %1113 = OpAccessChain %484 %642 
                                 f32 %1114 = OpLoad %1113 
                                               OpStore %1110 %1114 
                                               OpBranch %1112 
                                     %1115 = OpLabel 
                                 f32 %1116 = OpLoad %623 
                                               OpStore %1110 %1116 
                                               OpBranch %1112 
                                     %1112 = OpLabel 
                                 f32 %1117 = OpLoad %1110 
                        Private f32* %1118 = OpAccessChain %484 %642 
                                               OpStore %1118 %1117 
                        Private i32* %1119 = OpAccessChain %646 %88 
                                 i32 %1120 = OpLoad %1119 
                                bool %1121 = OpINotEqual %1120 %32 
                                               OpSelectionMerge %1123 None 
                                               OpBranchConditional %1121 %1122 %1123 
                                     %1122 = OpLabel 
                        Private i32* %1124 = OpAccessChain %584 %88 
                                 i32 %1125 = OpLoad %1124 
                                bool %1126 = OpIEqual %1125 %32 
                                               OpSelectionMerge %1128 None 
                                               OpBranchConditional %1126 %1127 %1128 
                                     %1127 = OpLabel 
                               f32_3 %1129 = OpLoad %237 
                               f32_2 %1130 = OpVectorShuffle %1129 %1129 0 2 
                               f32_3 %1131 = OpLoad %249 
                               f32_3 %1132 = OpVectorShuffle %1131 %1130 3 1 4 
                                               OpStore %249 %1132 
                               f32_3 %1133 = OpLoad %249 
                               f32_2 %1134 = OpVectorShuffle %1133 %1133 0 2 
                               f32_2 %1135 = OpCompositeConstruct %18 %18 
                               f32_2 %1136 = OpCompositeConstruct %19 %19 
                               f32_2 %1137 = OpExtInst %1 43 %1134 %1135 %1136 
                               f32_3 %1138 = OpLoad %249 
                               f32_3 %1139 = OpVectorShuffle %1138 %1137 3 1 4 
                                               OpStore %249 %1139 
                               f32_3 %1140 = OpLoad %249 
                               f32_2 %1141 = OpVectorShuffle %1140 %1140 0 2 
                        Uniform f32* %1142 = OpAccessChain %30 %32 
                                 f32 %1143 = OpLoad %1142 
                               f32_2 %1144 = OpCompositeConstruct %1143 %1143 
                               f32_2 %1145 = OpFMul %1141 %1144 
                               f32_3 %1146 = OpLoad %249 
                               f32_3 %1147 = OpVectorShuffle %1146 %1145 3 1 4 
                                               OpStore %249 %1147 
                 read_only Texture2D %1148 = OpLoad %44 
                             sampler %1149 = OpLoad %48 
          read_only Texture2DSampled %1150 = OpSampledImage %1148 %1149 
                               f32_3 %1151 = OpLoad %249 
                               f32_2 %1152 = OpVectorShuffle %1151 %1151 0 2 
                               f32_4 %1153 = OpImageSampleExplicitLod %1150 %1152 Lod %27 
                                 f32 %1154 = OpCompositeExtract %1153 3 
                        Private f32* %1155 = OpAccessChain %119 %88 
                                               OpStore %1155 %1154 
                                               OpBranch %1128 
                                     %1128 = OpLabel 
                        Private i32* %1156 = OpAccessChain %584 %358 
                                 i32 %1157 = OpLoad %1156 
                                bool %1158 = OpIEqual %1157 %32 
                                               OpSelectionMerge %1160 None 
                                               OpBranchConditional %1158 %1159 %1160 
                                     %1159 = OpLabel 
                               f32_3 %1161 = OpLoad %484 
                               f32_2 %1162 = OpVectorShuffle %1161 %1161 0 2 
                               f32_3 %1163 = OpLoad %249 
                               f32_3 %1164 = OpVectorShuffle %1163 %1162 3 1 4 
                                               OpStore %249 %1164 
                               f32_3 %1165 = OpLoad %249 
                               f32_2 %1166 = OpVectorShuffle %1165 %1165 0 2 
                               f32_2 %1167 = OpCompositeConstruct %18 %18 
                               f32_2 %1168 = OpCompositeConstruct %19 %19 
                               f32_2 %1169 = OpExtInst %1 43 %1166 %1167 %1168 
                               f32_3 %1170 = OpLoad %249 
                               f32_3 %1171 = OpVectorShuffle %1170 %1169 3 1 4 
                                               OpStore %249 %1171 
                               f32_3 %1172 = OpLoad %249 
                               f32_2 %1173 = OpVectorShuffle %1172 %1172 0 2 
                        Uniform f32* %1174 = OpAccessChain %30 %32 
                                 f32 %1175 = OpLoad %1174 
                               f32_2 %1176 = OpCompositeConstruct %1175 %1175 
                               f32_2 %1177 = OpFMul %1173 %1176 
                               f32_3 %1178 = OpLoad %249 
                               f32_3 %1179 = OpVectorShuffle %1178 %1177 3 1 4 
                                               OpStore %249 %1179 
                 read_only Texture2D %1180 = OpLoad %44 
                             sampler %1181 = OpLoad %48 
          read_only Texture2DSampled %1182 = OpSampledImage %1180 %1181 
                               f32_3 %1183 = OpLoad %249 
                               f32_2 %1184 = OpVectorShuffle %1183 %1183 0 2 
                               f32_4 %1185 = OpImageSampleExplicitLod %1182 %1184 Lod %27 
                                 f32 %1186 = OpCompositeExtract %1185 3 
                        Private f32* %1187 = OpAccessChain %119 %358 
                                               OpStore %1187 %1186 
                                               OpBranch %1160 
                                     %1160 = OpLabel 
                                 f32 %1188 = OpLoad %56 
                                 f32 %1189 = OpFNegate %1188 
                                 f32 %1190 = OpFMul %1189 %448 
                        Private f32* %1191 = OpAccessChain %119 %88 
                                 f32 %1192 = OpLoad %1191 
                                 f32 %1193 = OpFAdd %1190 %1192 
                        Private f32* %1194 = OpAccessChain %249 %88 
                                               OpStore %1194 %1193 
                        Private i32* %1195 = OpAccessChain %584 %88 
                                 i32 %1196 = OpLoad %1195 
                                bool %1197 = OpINotEqual %1196 %32 
                                               OpSelectionMerge %1200 None 
                                               OpBranchConditional %1197 %1199 %1203 
                                     %1199 = OpLabel 
                        Private f32* %1201 = OpAccessChain %119 %88 
                                 f32 %1202 = OpLoad %1201 
                                               OpStore %1198 %1202 
                                               OpBranch %1200 
                                     %1203 = OpLabel 
                        Private f32* %1204 = OpAccessChain %249 %88 
                                 f32 %1205 = OpLoad %1204 
                                               OpStore %1198 %1205 
                                               OpBranch %1200 
                                     %1200 = OpLabel 
                                 f32 %1206 = OpLoad %1198 
                        Private f32* %1207 = OpAccessChain %119 %88 
                                               OpStore %1207 %1206 
                                 f32 %1208 = OpLoad %56 
                                 f32 %1209 = OpFNegate %1208 
                                 f32 %1210 = OpFMul %1209 %448 
                        Private f32* %1211 = OpAccessChain %119 %358 
                                 f32 %1212 = OpLoad %1211 
                                 f32 %1213 = OpFAdd %1210 %1212 
                                               OpStore %56 %1213 
                        Private i32* %1214 = OpAccessChain %584 %358 
                                 i32 %1215 = OpLoad %1214 
                                bool %1216 = OpINotEqual %1215 %32 
                                               OpSelectionMerge %1219 None 
                                               OpBranchConditional %1216 %1218 %1222 
                                     %1218 = OpLabel 
                        Private f32* %1220 = OpAccessChain %119 %358 
                                 f32 %1221 = OpLoad %1220 
                                               OpStore %1217 %1221 
                                               OpBranch %1219 
                                     %1222 = OpLabel 
                                 f32 %1223 = OpLoad %56 
                                               OpStore %1217 %1223 
                                               OpBranch %1219 
                                     %1219 = OpLabel 
                                 f32 %1224 = OpLoad %1217 
                        Private f32* %1225 = OpAccessChain %119 %358 
                                               OpStore %1225 %1224 
                               f32_2 %1228 = OpLoad %119 
                               f32_4 %1229 = OpVectorShuffle %1228 %1228 0 1 0 1 
                               f32_4 %1230 = OpExtInst %1 4 %1229 
                               f32_3 %1231 = OpLoad %78 
                               f32_4 %1232 = OpVectorShuffle %1231 %1231 0 0 0 0 
                              bool_4 %1233 = OpFOrdGreaterThanEqual %1230 %1232 
                              bool_2 %1234 = OpVectorShuffle %1233 %1233 0 1 
                                               OpStore %1227 %1234 
                        Private f32* %1235 = OpAccessChain %100 %88 
                                 f32 %1236 = OpLoad %1235 
                                 f32 %1237 = OpFNegate %1236 
                                 f32 %1239 = OpFMul %1237 %1238 
                        Private f32* %1240 = OpAccessChain %237 %88 
                                 f32 %1241 = OpLoad %1240 
                                 f32 %1242 = OpFAdd %1239 %1241 
                                               OpStore %56 %1242 
                       Private bool* %1243 = OpAccessChain %1227 %88 
                                bool %1244 = OpLoad %1243 
                                               OpSelectionMerge %1247 None 
                                               OpBranchConditional %1244 %1246 %1250 
                                     %1246 = OpLabel 
                        Private f32* %1248 = OpAccessChain %237 %88 
                                 f32 %1249 = OpLoad %1248 
                                               OpStore %1245 %1249 
                                               OpBranch %1247 
                                     %1250 = OpLabel 
                                 f32 %1251 = OpLoad %56 
                                               OpStore %1245 %1251 
                                               OpBranch %1247 
                                     %1247 = OpLabel 
                                 f32 %1252 = OpLoad %1245 
                        Private f32* %1253 = OpAccessChain %237 %88 
                                               OpStore %1253 %1252 
                        Private f32* %1254 = OpAccessChain %100 %358 
                                 f32 %1255 = OpLoad %1254 
                                 f32 %1256 = OpFNegate %1255 
                                 f32 %1257 = OpFMul %1256 %1238 
                        Private f32* %1258 = OpAccessChain %237 %642 
                                 f32 %1259 = OpLoad %1258 
                                 f32 %1260 = OpFAdd %1257 %1259 
                                               OpStore %56 %1260 
                       Private bool* %1261 = OpAccessChain %1227 %88 
                                bool %1262 = OpLoad %1261 
                                               OpSelectionMerge %1265 None 
                                               OpBranchConditional %1262 %1264 %1268 
                                     %1264 = OpLabel 
                        Private f32* %1266 = OpAccessChain %237 %642 
                                 f32 %1267 = OpLoad %1266 
                                               OpStore %1263 %1267 
                                               OpBranch %1265 
                                     %1268 = OpLabel 
                                 f32 %1269 = OpLoad %56 
                                               OpStore %1263 %1269 
                                               OpBranch %1265 
                                     %1265 = OpLabel 
                                 f32 %1270 = OpLoad %1263 
                        Private f32* %1271 = OpAccessChain %237 %642 
                                               OpStore %1271 %1270 
                        Private f32* %1272 = OpAccessChain %100 %88 
                                 f32 %1273 = OpLoad %1272 
                                 f32 %1274 = OpFMul %1273 %1238 
                        Private f32* %1275 = OpAccessChain %484 %88 
                                 f32 %1276 = OpLoad %1275 
                                 f32 %1277 = OpFAdd %1274 %1276 
                                               OpStore %56 %1277 
                       Private bool* %1278 = OpAccessChain %1227 %358 
                                bool %1279 = OpLoad %1278 
                                               OpSelectionMerge %1282 None 
                                               OpBranchConditional %1279 %1281 %1285 
                                     %1281 = OpLabel 
                        Private f32* %1283 = OpAccessChain %484 %88 
                                 f32 %1284 = OpLoad %1283 
                                               OpStore %1280 %1284 
                                               OpBranch %1282 
                                     %1285 = OpLabel 
                                 f32 %1286 = OpLoad %56 
                                               OpStore %1280 %1286 
                                               OpBranch %1282 
                                     %1282 = OpLabel 
                                 f32 %1287 = OpLoad %1280 
                        Private f32* %1288 = OpAccessChain %484 %88 
                                               OpStore %1288 %1287 
                        Private f32* %1289 = OpAccessChain %100 %358 
                                 f32 %1290 = OpLoad %1289 
                                 f32 %1291 = OpFMul %1290 %1238 
                        Private f32* %1292 = OpAccessChain %484 %642 
                                 f32 %1293 = OpLoad %1292 
                                 f32 %1294 = OpFAdd %1291 %1293 
                                               OpStore %56 %1294 
                       Private bool* %1295 = OpAccessChain %1227 %358 
                                bool %1296 = OpLoad %1295 
                                               OpSelectionMerge %1299 None 
                                               OpBranchConditional %1296 %1298 %1302 
                                     %1298 = OpLabel 
                        Private f32* %1300 = OpAccessChain %484 %642 
                                 f32 %1301 = OpLoad %1300 
                                               OpStore %1297 %1301 
                                               OpBranch %1299 
                                     %1302 = OpLabel 
                                 f32 %1303 = OpLoad %56 
                                               OpStore %1297 %1303 
                                               OpBranch %1299 
                                     %1299 = OpLabel 
                                 f32 %1304 = OpLoad %1297 
                        Private f32* %1305 = OpAccessChain %484 %642 
                                               OpStore %1305 %1304 
                                               OpBranch %1123 
                                     %1123 = OpLabel 
                                               OpBranch %911 
                                      %911 = OpLabel 
                                               OpBranch %700 
                                      %700 = OpLabel 
                        Private f32* %1306 = OpAccessChain %237 %88 
                                 f32 %1307 = OpLoad %1306 
                                 f32 %1308 = OpFNegate %1307 
                          Input f32* %1309 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %1310 = OpLoad %1309 
                                 f32 %1311 = OpFAdd %1308 %1310 
                                               OpStore %56 %1311 
                        Private f32* %1312 = OpAccessChain %237 %642 
                                 f32 %1313 = OpLoad %1312 
                                 f32 %1314 = OpFNegate %1313 
                          Input f32* %1315 = OpAccessChain vs_TEXCOORD0 %358 
                                 f32 %1316 = OpLoad %1315 
                                 f32 %1317 = OpFAdd %1314 %1316 
                        Private f32* %1318 = OpAccessChain %100 %88 
                                               OpStore %1318 %1317 
                       Private bool* %1319 = OpAccessChain %323 %88 
                                bool %1320 = OpLoad %1319 
                                               OpSelectionMerge %1323 None 
                                               OpBranchConditional %1320 %1322 %1325 
                                     %1322 = OpLabel 
                                 f32 %1324 = OpLoad %56 
                                               OpStore %1321 %1324 
                                               OpBranch %1323 
                                     %1325 = OpLabel 
                        Private f32* %1326 = OpAccessChain %100 %88 
                                 f32 %1327 = OpLoad %1326 
                                               OpStore %1321 %1327 
                                               OpBranch %1323 
                                     %1323 = OpLabel 
                                 f32 %1328 = OpLoad %1321 
                                               OpStore %56 %1328 
                               f32_3 %1329 = OpLoad %484 
                               f32_2 %1330 = OpVectorShuffle %1329 %1329 0 2 
                               f32_2 %1331 = OpLoad vs_TEXCOORD0 
                               f32_2 %1332 = OpFNegate %1331 
                               f32_2 %1333 = OpFAdd %1330 %1332 
                               f32_3 %1334 = OpLoad %78 
                               f32_3 %1335 = OpVectorShuffle %1334 %1333 3 1 4 
                                               OpStore %78 %1335 
                       Private bool* %1336 = OpAccessChain %323 %88 
                                bool %1337 = OpLoad %1336 
                                               OpSelectionMerge %1340 None 
                                               OpBranchConditional %1337 %1339 %1343 
                                     %1339 = OpLabel 
                        Private f32* %1341 = OpAccessChain %78 %88 
                                 f32 %1342 = OpLoad %1341 
                                               OpStore %1338 %1342 
                                               OpBranch %1340 
                                     %1343 = OpLabel 
                        Private f32* %1344 = OpAccessChain %78 %642 
                                 f32 %1345 = OpLoad %1344 
                                               OpStore %1338 %1345 
                                               OpBranch %1340 
                                     %1340 = OpLabel 
                                 f32 %1346 = OpLoad %1338 
                        Private f32* %1347 = OpAccessChain %78 %88 
                                               OpStore %1347 %1346 
                               f32_2 %1349 = OpLoad %119 
                               f32_4 %1350 = OpVectorShuffle %1349 %1349 0 1 0 1 
                              bool_4 %1352 = OpFOrdLessThan %1350 %1351 
                              bool_2 %1353 = OpVectorShuffle %1352 %1352 0 1 
                               u32_2 %1354 = OpSelect %1353 %596 %595 
                               u32_2 %1355 = OpCompositeConstruct %567 %567 
                               u32_2 %1356 = OpIMul %1354 %1355 
                               i32_2 %1357 = OpBitcast %1356 
                                               OpStore %1348 %1357 
                                 f32 %1358 = OpLoad %56 
                        Private f32* %1359 = OpAccessChain %78 %88 
                                 f32 %1360 = OpLoad %1359 
                                 f32 %1361 = OpFAdd %1358 %1360 
                        Private f32* %1362 = OpAccessChain %119 %88 
                                               OpStore %1362 %1361 
                                 i32 %1364 = OpLoad %564 
                               i32_4 %1366 = OpCompositeConstruct %1364 %1364 %1364 %1364 
                               i32_2 %1367 = OpLoad %1348 
                               i32_4 %1368 = OpVectorShuffle %1367 %1367 0 1 0 0 
                              bool_4 %1369 = OpINotEqual %1366 %1368 
                              bool_2 %1370 = OpVectorShuffle %1369 %1369 0 1 
                                               OpStore %1363 %1370 
                        Private f32* %1371 = OpAccessChain %119 %88 
                                 f32 %1372 = OpLoad %1371 
                                 f32 %1373 = OpFDiv %19 %1372 
                                               OpStore %106 %1373 
                                 f32 %1374 = OpLoad %56 
                        Private f32* %1375 = OpAccessChain %78 %88 
                                 f32 %1376 = OpLoad %1375 
                                bool %1377 = OpFOrdLessThan %1374 %1376 
                                               OpStore %395 %1377 
                                 f32 %1378 = OpLoad %56 
                        Private f32* %1379 = OpAccessChain %78 %88 
                                 f32 %1380 = OpLoad %1379 
                                 f32 %1381 = OpExtInst %1 37 %1378 %1380 
                                               OpStore %56 %1381 
                                bool %1383 = OpLoad %395 
                                               OpSelectionMerge %1387 None 
                                               OpBranchConditional %1383 %1386 %1390 
                                     %1386 = OpLabel 
                       Private bool* %1388 = OpAccessChain %1363 %88 
                                bool %1389 = OpLoad %1388 
                                               OpStore %1385 %1389 
                                               OpBranch %1387 
                                     %1390 = OpLabel 
                       Private bool* %1391 = OpAccessChain %1363 %358 
                                bool %1392 = OpLoad %1391 
                                               OpStore %1385 %1392 
                                               OpBranch %1387 
                                     %1387 = OpLabel 
                                bool %1393 = OpLoad %1385 
                                               OpStore %1382 %1393 
                        Private f32* %1394 = OpAccessChain %201 %88 
                                 f32 %1395 = OpLoad %1394 
                        Private f32* %1396 = OpAccessChain %201 %88 
                                 f32 %1397 = OpLoad %1396 
                                 f32 %1398 = OpFMul %1395 %1397 
                        Private f32* %1399 = OpAccessChain %201 %88 
                                               OpStore %1399 %1398 
                                 f32 %1400 = OpLoad %56 
                                 f32 %1401 = OpLoad %106 
                                 f32 %1402 = OpFNegate %1401 
                                 f32 %1403 = OpFMul %1400 %1402 
                                 f32 %1404 = OpFAdd %1403 %448 
                                               OpStore %56 %1404 
                                bool %1405 = OpLoad %1382 
                                 f32 %1406 = OpLoad %56 
                                 f32 %1407 = OpSelect %1405 %1406 %18 
                                               OpStore %56 %1407 
                        Private f32* %1408 = OpAccessChain %201 %88 
                                 f32 %1409 = OpLoad %1408 
                                 f32 %1410 = OpLoad %56 
                                 f32 %1411 = OpExtInst %1 40 %1409 %1410 
                        Private f32* %1412 = OpAccessChain %201 %88 
                                               OpStore %1412 %1411 
                               f32_3 %1413 = OpLoad %201 
                               f32_2 %1414 = OpVectorShuffle %1413 %1413 0 0 
                                 f32 %1415 = OpLoad %69 
                               f32_2 %1416 = OpCompositeConstruct %1415 %1415 
                               f32_2 %1417 = OpFMul %1414 %1416 
                               f32_2 %1418 = OpLoad vs_TEXCOORD0 
                               f32_2 %1419 = OpFAdd %1417 %1418 
                               f32_3 %1420 = OpLoad %201 
                               f32_3 %1421 = OpVectorShuffle %1420 %1419 3 4 2 
                                               OpStore %201 %1421 
                       Private bool* %1422 = OpAccessChain %323 %88 
                                bool %1423 = OpLoad %1422 
                                               OpSelectionMerge %1426 None 
                                               OpBranchConditional %1423 %1425 %1429 
                                     %1425 = OpLabel 
                          Input f32* %1427 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %1428 = OpLoad %1427 
                                               OpStore %1424 %1428 
                                               OpBranch %1426 
                                     %1429 = OpLabel 
                        Private f32* %1430 = OpAccessChain %201 %88 
                                 f32 %1431 = OpLoad %1430 
                                               OpStore %1424 %1431 
                                               OpBranch %1426 
                                     %1426 = OpLabel 
                                 f32 %1432 = OpLoad %1424 
                        Private f32* %1433 = OpAccessChain %78 %88 
                                               OpStore %1433 %1432 
                        Private f32* %1434 = OpAccessChain %78 %88 
                                 f32 %1435 = OpLoad %1434 
                                 f32 %1436 = OpExtInst %1 43 %1435 %18 %19 
                        Private f32* %1437 = OpAccessChain %78 %88 
                                               OpStore %1437 %1436 
                       Private bool* %1438 = OpAccessChain %323 %88 
                                bool %1439 = OpLoad %1438 
                                               OpSelectionMerge %1442 None 
                                               OpBranchConditional %1439 %1441 %1445 
                                     %1441 = OpLabel 
                        Private f32* %1443 = OpAccessChain %201 %358 
                                 f32 %1444 = OpLoad %1443 
                                               OpStore %1440 %1444 
                                               OpBranch %1442 
                                     %1445 = OpLabel 
                          Input f32* %1446 = OpAccessChain vs_TEXCOORD0 %358 
                                 f32 %1447 = OpLoad %1446 
                                               OpStore %1440 %1447 
                                               OpBranch %1442 
                                     %1442 = OpLabel 
                                 f32 %1448 = OpLoad %1440 
                        Private f32* %1449 = OpAccessChain %78 %358 
                                               OpStore %1449 %1448 
                        Private f32* %1450 = OpAccessChain %78 %358 
                                 f32 %1451 = OpLoad %1450 
                                 f32 %1452 = OpExtInst %1 43 %1451 %18 %19 
                        Private f32* %1453 = OpAccessChain %78 %358 
                                               OpStore %1453 %1452 
                               f32_3 %1454 = OpLoad %78 
                               f32_2 %1455 = OpVectorShuffle %1454 %1454 0 1 
                        Uniform f32* %1456 = OpAccessChain %30 %32 
                                 f32 %1457 = OpLoad %1456 
                               f32_2 %1458 = OpCompositeConstruct %1457 %1457 
                               f32_2 %1459 = OpFMul %1455 %1458 
                               f32_3 %1460 = OpLoad %9 
                               f32_3 %1461 = OpVectorShuffle %1460 %1459 3 4 2 
                                               OpStore %9 %1461 
                 read_only Texture2D %1462 = OpLoad %44 
                             sampler %1463 = OpLoad %48 
          read_only Texture2DSampled %1464 = OpSampledImage %1462 %1463 
                               f32_3 %1465 = OpLoad %9 
                               f32_2 %1466 = OpVectorShuffle %1465 %1465 0 1 
                               f32_4 %1467 = OpImageSampleExplicitLod %1464 %1466 Lod %27 
                               f32_3 %1468 = OpVectorShuffle %1467 %1467 0 1 2 
                               f32_4 %1469 = OpLoad %41 
                               f32_4 %1470 = OpVectorShuffle %1469 %1468 4 5 6 3 
                                               OpStore %41 %1470 
                                               OpBranch %165 
                                      %165 = OpLabel 
                               f32_2 %1471 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %1473 = OpAccessChain %30 %63 
                               f32_4 %1474 = OpLoad %1473 
                               f32_2 %1475 = OpVectorShuffle %1474 %1474 0 1 
                               f32_2 %1476 = OpFMul %1471 %1475 
                      Uniform f32_4* %1477 = OpAccessChain %30 %63 
                               f32_4 %1478 = OpLoad %1477 
                               f32_2 %1479 = OpVectorShuffle %1478 %1478 2 3 
                               f32_2 %1480 = OpFAdd %1476 %1479 
                               f32_3 %1481 = OpLoad %9 
                               f32_3 %1482 = OpVectorShuffle %1481 %1480 3 4 2 
                                               OpStore %9 %1482 
                 read_only Texture2D %1484 = OpLoad %1483 
                             sampler %1486 = OpLoad %1485 
          read_only Texture2DSampled %1487 = OpSampledImage %1484 %1486 
                               f32_3 %1488 = OpLoad %9 
                               f32_2 %1489 = OpVectorShuffle %1488 %1488 0 1 
                               f32_4 %1490 = OpImageSampleImplicitLod %1487 %1489 
                                 f32 %1491 = OpCompositeExtract %1490 3 
                        Private f32* %1492 = OpAccessChain %9 %88 
                                               OpStore %1492 %1491 
                        Private f32* %1493 = OpAccessChain %9 %88 
                                 f32 %1494 = OpLoad %1493 
                                 f32 %1495 = OpFMul %1494 %276 
                                 f32 %1497 = OpFAdd %1495 %1496 
                        Private f32* %1498 = OpAccessChain %9 %88 
                                               OpStore %1498 %1497 
                        Private f32* %1499 = OpAccessChain %9 %88 
                                 f32 %1500 = OpLoad %1499 
                                 f32 %1502 = OpFMul %1500 %1501 
                                 f32 %1503 = OpFAdd %1502 %448 
                        Private f32* %1504 = OpAccessChain %201 %88 
                                               OpStore %1504 %1503 
                        Private f32* %1505 = OpAccessChain %201 %88 
                                 f32 %1506 = OpLoad %1505 
                                 f32 %1507 = OpExtInst %1 43 %1506 %18 %19 
                        Private f32* %1508 = OpAccessChain %201 %88 
                                               OpStore %1508 %1507 
                        Private f32* %1509 = OpAccessChain %201 %88 
                                 f32 %1510 = OpLoad %1509 
                                 f32 %1511 = OpFMul %1510 %276 
                                 f32 %1512 = OpFAdd %1511 %1496 
                        Private f32* %1513 = OpAccessChain %201 %88 
                                               OpStore %1513 %1512 
                        Private f32* %1514 = OpAccessChain %9 %88 
                                 f32 %1515 = OpLoad %1514 
                                 f32 %1516 = OpExtInst %1 4 %1515 
                                 f32 %1517 = OpFNegate %1516 
                                 f32 %1518 = OpFAdd %1517 %19 
                        Private f32* %1519 = OpAccessChain %9 %88 
                                               OpStore %1519 %1518 
                        Private f32* %1520 = OpAccessChain %9 %88 
                                 f32 %1521 = OpLoad %1520 
                                 f32 %1522 = OpExtInst %1 31 %1521 
                        Private f32* %1523 = OpAccessChain %9 %88 
                                               OpStore %1523 %1522 
                        Private f32* %1524 = OpAccessChain %9 %88 
                                 f32 %1525 = OpLoad %1524 
                                 f32 %1526 = OpFNegate %1525 
                                 f32 %1527 = OpFAdd %1526 %19 
                        Private f32* %1528 = OpAccessChain %9 %88 
                                               OpStore %1528 %1527 
                        Private f32* %1529 = OpAccessChain %9 %88 
                                 f32 %1530 = OpLoad %1529 
                        Private f32* %1531 = OpAccessChain %201 %88 
                                 f32 %1532 = OpLoad %1531 
                                 f32 %1533 = OpFMul %1530 %1532 
                        Private f32* %1534 = OpAccessChain %9 %88 
                                               OpStore %1534 %1533 
                               f32_4 %1535 = OpLoad %41 
                               f32_3 %1536 = OpVectorShuffle %1535 %1535 0 1 2 
                               f32_3 %1539 = OpFMul %1536 %1538 
                                               OpStore %201 %1539 
                               f32_4 %1540 = OpLoad %41 
                               f32_3 %1541 = OpVectorShuffle %1540 %1540 0 1 2 
                               f32_3 %1542 = OpExtInst %1 4 %1541 
                               f32_3 %1545 = OpExtInst %1 40 %1542 %1544 
                                               OpStore %78 %1545 
                               f32_3 %1546 = OpLoad %78 
                               f32_3 %1547 = OpExtInst %1 30 %1546 
                                               OpStore %78 %1547 
                               f32_3 %1548 = OpLoad %78 
                               f32_3 %1551 = OpFMul %1548 %1550 
                                               OpStore %78 %1551 
                               f32_3 %1552 = OpLoad %78 
                               f32_3 %1553 = OpExtInst %1 29 %1552 
                                               OpStore %78 %1553 
                               f32_3 %1554 = OpLoad %78 
                               f32_3 %1557 = OpFMul %1554 %1556 
                               f32_3 %1560 = OpFAdd %1557 %1559 
                                               OpStore %78 %1560 
                               f32_4 %1564 = OpLoad %41 
                               f32_4 %1565 = OpVectorShuffle %1564 %1564 0 1 2 0 
                              bool_4 %1566 = OpFOrdGreaterThanEqual %1563 %1565 
                              bool_3 %1567 = OpVectorShuffle %1566 %1566 0 1 2 
                                               OpStore %1561 %1567 
                               f32_3 %1570 = OpLoad %201 
                                               OpStore %1569 %1570 
                       Private bool* %1571 = OpAccessChain %1561 %88 
                                bool %1572 = OpLoad %1571 
                                               OpSelectionMerge %1575 None 
                                               OpBranchConditional %1572 %1574 %1578 
                                     %1574 = OpLabel 
                        Private f32* %1576 = OpAccessChain %201 %88 
                                 f32 %1577 = OpLoad %1576 
                                               OpStore %1573 %1577 
                                               OpBranch %1575 
                                     %1578 = OpLabel 
                        Private f32* %1579 = OpAccessChain %78 %88 
                                 f32 %1580 = OpLoad %1579 
                                               OpStore %1573 %1580 
                                               OpBranch %1575 
                                     %1575 = OpLabel 
                                 f32 %1581 = OpLoad %1573 
                       Function f32* %1582 = OpAccessChain %1569 %88 
                                               OpStore %1582 %1581 
                       Private bool* %1583 = OpAccessChain %1561 %358 
                                bool %1584 = OpLoad %1583 
                                               OpSelectionMerge %1587 None 
                                               OpBranchConditional %1584 %1586 %1590 
                                     %1586 = OpLabel 
                        Private f32* %1588 = OpAccessChain %201 %358 
                                 f32 %1589 = OpLoad %1588 
                                               OpStore %1585 %1589 
                                               OpBranch %1587 
                                     %1590 = OpLabel 
                        Private f32* %1591 = OpAccessChain %78 %358 
                                 f32 %1592 = OpLoad %1591 
                                               OpStore %1585 %1592 
                                               OpBranch %1587 
                                     %1587 = OpLabel 
                                 f32 %1593 = OpLoad %1585 
                       Function f32* %1594 = OpAccessChain %1569 %358 
                                               OpStore %1594 %1593 
                       Private bool* %1595 = OpAccessChain %1561 %642 
                                bool %1596 = OpLoad %1595 
                                               OpSelectionMerge %1599 None 
                                               OpBranchConditional %1596 %1598 %1602 
                                     %1598 = OpLabel 
                        Private f32* %1600 = OpAccessChain %201 %642 
                                 f32 %1601 = OpLoad %1600 
                                               OpStore %1597 %1601 
                                               OpBranch %1599 
                                     %1602 = OpLabel 
                        Private f32* %1603 = OpAccessChain %78 %642 
                                 f32 %1604 = OpLoad %1603 
                                               OpStore %1597 %1604 
                                               OpBranch %1599 
                                     %1599 = OpLabel 
                                 f32 %1605 = OpLoad %1597 
                       Function f32* %1606 = OpAccessChain %1569 %642 
                                               OpStore %1606 %1605 
                               f32_3 %1607 = OpLoad %1569 
                                               OpStore %201 %1607 
                               f32_3 %1608 = OpLoad %9 
                               f32_3 %1609 = OpVectorShuffle %1608 %1608 0 0 0 
                               f32_3 %1612 = OpFMul %1609 %1611 
                               f32_3 %1613 = OpLoad %201 
                               f32_3 %1614 = OpFAdd %1612 %1613 
                                               OpStore %9 %1614 
                               f32_3 %1615 = OpLoad %9 
                               f32_3 %1618 = OpFMul %1615 %1617 
                               f32_4 %1619 = OpLoad %41 
                               f32_4 %1620 = OpVectorShuffle %1619 %1618 4 5 6 3 
                                               OpStore %41 %1620 
                               f32_3 %1621 = OpLoad %9 
                               f32_3 %1624 = OpFAdd %1621 %1623 
                                               OpStore %78 %1624 
                               f32_3 %1625 = OpLoad %78 
                               f32_3 %1628 = OpFMul %1625 %1627 
                                               OpStore %78 %1628 
                               f32_3 %1629 = OpLoad %78 
                               f32_3 %1630 = OpExtInst %1 4 %1629 
                               f32_3 %1631 = OpExtInst %1 40 %1630 %1544 
                                               OpStore %78 %1631 
                               f32_3 %1632 = OpLoad %78 
                               f32_3 %1633 = OpExtInst %1 30 %1632 
                                               OpStore %78 %1633 
                               f32_3 %1634 = OpLoad %78 
                               f32_3 %1637 = OpFMul %1634 %1636 
                                               OpStore %78 %1637 
                               f32_3 %1638 = OpLoad %78 
                               f32_3 %1639 = OpExtInst %1 29 %1638 
                                               OpStore %78 %1639 
                               f32_3 %1642 = OpLoad %9 
                               f32_4 %1643 = OpVectorShuffle %1642 %1642 0 1 2 0 
                              bool_4 %1644 = OpFOrdGreaterThanEqual %1641 %1643 
                              bool_3 %1645 = OpVectorShuffle %1644 %1644 0 1 2 
                                               OpStore %323 %1645 
                       Private bool* %1648 = OpAccessChain %323 %88 
                                bool %1649 = OpLoad %1648 
                                               OpSelectionMerge %1652 None 
                                               OpBranchConditional %1649 %1651 %1655 
                                     %1651 = OpLabel 
                        Private f32* %1653 = OpAccessChain %41 %88 
                                 f32 %1654 = OpLoad %1653 
                                               OpStore %1650 %1654 
                                               OpBranch %1652 
                                     %1655 = OpLabel 
                        Private f32* %1656 = OpAccessChain %78 %88 
                                 f32 %1657 = OpLoad %1656 
                                               OpStore %1650 %1657 
                                               OpBranch %1652 
                                     %1652 = OpLabel 
                                 f32 %1658 = OpLoad %1650 
                         Output f32* %1660 = OpAccessChain %1647 %88 
                                               OpStore %1660 %1658 
                       Private bool* %1661 = OpAccessChain %323 %358 
                                bool %1662 = OpLoad %1661 
                                               OpSelectionMerge %1665 None 
                                               OpBranchConditional %1662 %1664 %1668 
                                     %1664 = OpLabel 
                        Private f32* %1666 = OpAccessChain %41 %358 
                                 f32 %1667 = OpLoad %1666 
                                               OpStore %1663 %1667 
                                               OpBranch %1665 
                                     %1668 = OpLabel 
                        Private f32* %1669 = OpAccessChain %78 %358 
                                 f32 %1670 = OpLoad %1669 
                                               OpStore %1663 %1670 
                                               OpBranch %1665 
                                     %1665 = OpLabel 
                                 f32 %1671 = OpLoad %1663 
                         Output f32* %1672 = OpAccessChain %1647 %358 
                                               OpStore %1672 %1671 
                       Private bool* %1673 = OpAccessChain %323 %642 
                                bool %1674 = OpLoad %1673 
                                               OpSelectionMerge %1677 None 
                                               OpBranchConditional %1674 %1676 %1680 
                                     %1676 = OpLabel 
                        Private f32* %1678 = OpAccessChain %41 %642 
                                 f32 %1679 = OpLoad %1678 
                                               OpStore %1675 %1679 
                                               OpBranch %1677 
                                     %1680 = OpLabel 
                        Private f32* %1681 = OpAccessChain %78 %642 
                                 f32 %1682 = OpLoad %1681 
                                               OpStore %1675 %1682 
                                               OpBranch %1677 
                                     %1677 = OpLabel 
                                 f32 %1683 = OpLoad %1675 
                         Output f32* %1684 = OpAccessChain %1647 %642 
                                               OpStore %1684 %1683 
                        Private f32* %1685 = OpAccessChain %41 %67 
                                 f32 %1686 = OpLoad %1685 
                         Output f32* %1687 = OpAccessChain %1647 %67 
                                               OpStore %1687 %1686 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %66 %73 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %22 0 Offset 22 
                                             OpMemberDecorate %22 1 Offset 22 
                                             OpMemberDecorate %22 2 Offset 22 
                                             OpDecorate %22 Block 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate vs_TEXCOORD1 Location 66 
                                             OpDecorate vs_TEXCOORD0 Location 73 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypeStruct %6 %7 %7 
                                     %23 = OpTypePointer Uniform %22 
Uniform struct {f32; f32_4; f32_4;}* %24 = OpVariable Uniform 
                                 i32 %25 = OpConstant 2 
                                     %26 = OpTypePointer Uniform %7 
                                     %35 = OpTypePointer Output %7 
                                 f32 %39 = OpConstant 3.674022E-40 
                                 f32 %40 = OpConstant 3.674022E-40 
                               f32_2 %41 = OpConstantComposite %39 %40 
                                     %45 = OpTypePointer Private %19 
                      Private f32_2* %46 = OpVariable Private 
                               f32_2 %49 = OpConstantComposite %40 %40 
                                 i32 %52 = OpConstant 1 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %58 %58 
                                     %65 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %68 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                      Uniform f32_4* %27 = OpAccessChain %24 %25 
                               f32_4 %28 = OpLoad %27 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpFMul %21 %29 
                      Uniform f32_4* %31 = OpAccessChain %24 %25 
                               f32_4 %32 = OpLoad %31 
                               f32_2 %33 = OpVectorShuffle %32 %32 2 3 
                               f32_2 %34 = OpFAdd %30 %33 
                       Output f32_4* %36 = OpAccessChain %13 %15 
                               f32_4 %37 = OpLoad %36 
                               f32_4 %38 = OpVectorShuffle %37 %34 4 5 2 3 
                                             OpStore %36 %38 
                       Output f32_4* %42 = OpAccessChain %13 %15 
                               f32_4 %43 = OpLoad %42 
                               f32_4 %44 = OpVectorShuffle %43 %41 0 1 4 5 
                                             OpStore %42 %44 
                               f32_3 %47 = OpLoad %18 
                               f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                               f32_2 %50 = OpFAdd %48 %49 
                                             OpStore %46 %50 
                               f32_2 %51 = OpLoad %46 
                      Uniform f32_4* %53 = OpAccessChain %24 %52 
                               f32_4 %54 = OpLoad %53 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               f32_2 %56 = OpFMul %51 %55 
                                             OpStore %46 %56 
                               f32_2 %57 = OpLoad %46 
                               f32_2 %60 = OpFMul %57 %59 
                      Uniform f32_4* %61 = OpAccessChain %24 %52 
                               f32_4 %62 = OpLoad %61 
                               f32_2 %63 = OpVectorShuffle %62 %62 2 3 
                               f32_2 %64 = OpFAdd %60 %63 
                                             OpStore %46 %64 
                               f32_2 %67 = OpLoad %46 
                        Uniform f32* %69 = OpAccessChain %24 %15 
                                 f32 %70 = OpLoad %69 
                               f32_2 %71 = OpCompositeConstruct %70 %70 
                               f32_2 %72 = OpFMul %67 %71 
                                             OpStore vs_TEXCOORD1 %72 
                               f32_2 %74 = OpLoad %46 
                                             OpStore vs_TEXCOORD0 %74 
                         Output f32* %76 = OpAccessChain %13 %15 %9 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                         Output f32* %79 = OpAccessChain %13 %15 %9 
                                             OpStore %79 %78 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1689
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %1647 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %1483 DescriptorSet 1483 
                                               OpDecorate %1483 Binding 1483 
                                               OpDecorate %1485 DescriptorSet 1485 
                                               OpDecorate %1485 Binding 1485 
                                               OpDecorate %1647 Location 1647 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %18 = OpConstant 3.674022E-40 
                                   f32 %19 = OpConstant 3.674022E-40 
                                       %27 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %6 %27 %27 
                                       %29 = OpTypePointer Uniform %28 
  Uniform struct {f32; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 0 
                                       %33 = OpTypePointer Uniform %6 
                                       %40 = OpTypePointer Private %27 
                        Private f32_4* %41 = OpVariable Private 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypePointer Private %6 
                          Private f32* %56 = OpVariable Private 
                                       %62 = OpTypeVector %31 2 
                                   i32 %63 = OpConstant 1 
                                 i32_2 %64 = OpConstantComposite %32 %63 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 3 
                          Private f32* %69 = OpVariable Private 
                                 i32_2 %75 = OpConstantComposite %63 %32 
                        Private f32_3* %78 = OpVariable Private 
                                   i32 %84 = OpConstant -1 
                                 i32_2 %85 = OpConstantComposite %32 %84 
                                   u32 %88 = OpConstant 0 
                          Private f32* %90 = OpVariable Private 
                                 i32_2 %96 = OpConstantComposite %84 %32 
                                       %99 = OpTypePointer Private %10 
                       Private f32_2* %100 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_2* %119 = OpVariable Private 
                       Private f32_2* %125 = OpVariable Private 
                                  f32 %143 = OpConstant 3.674022E-40 
                                  f32 %154 = OpConstant 3.674022E-40 
                                      %156 = OpTypeBool 
                                      %157 = OpTypePointer Private %156 
                        Private bool* %158 = OpVariable Private 
                                i32_2 %171 = OpConstantComposite %84 %84 
                                i32_2 %179 = OpConstantComposite %63 %63 
                                i32_2 %188 = OpConstantComposite %63 %84 
                                i32_2 %197 = OpConstantComposite %84 %63 
                       Private f32_3* %201 = OpVariable Private 
                       Private f32_2* %207 = OpVariable Private 
                         Private f32* %216 = OpVariable Private 
                                  f32 %224 = OpConstant 3.674022E-40 
                       Private f32_3* %237 = OpVariable Private 
                       Private f32_3* %249 = OpVariable Private 
                                  f32 %276 = OpConstant 3.674022E-40 
                                      %321 = OpTypeVector %156 3 
                                      %322 = OpTypePointer Private %321 
                      Private bool_3* %323 = OpVariable Private 
                                      %337 = OpTypePointer Function %6 
                                  i32 %357 = OpConstant 2 
                                  u32 %358 = OpConstant 1 
                                  f32 %367 = OpConstant 3.674022E-40 
                        Private bool* %395 = OpVariable Private 
                                  f32 %448 = OpConstant 3.674022E-40 
                                f32_2 %449 = OpConstantComposite %448 %448 
                                      %458 = OpTypePointer Input %6 
                       Private f32_3* %484 = OpVariable Private 
                                  f32 %493 = OpConstant 3.674022E-40 
                       Private f32_2* %520 = OpVariable Private 
                                  f32 %548 = OpConstant 3.674022E-40 
                                      %563 = OpTypePointer Private %31 
                         Private i32* %564 = OpVariable Private 
                                  u32 %567 = OpConstant 4294967295 
                                      %583 = OpTypePointer Private %62 
                       Private i32_2* %584 = OpVariable Private 
                                      %590 = OpTypeVector %156 4 
                                      %592 = OpTypeVector %156 2 
                                      %594 = OpTypeVector %66 2 
                                u32_2 %595 = OpConstantComposite %88 %88 
                                u32_2 %596 = OpConstantComposite %358 %358 
                                  f32 %604 = OpConstant 3.674022E-40 
                         Private f32* %623 = OpVariable Private 
                                  u32 %642 = OpConstant 2 
                                      %644 = OpTypeVector %31 3 
                                      %645 = OpTypePointer Private %644 
                       Private i32_3* %646 = OpVariable Private 
                                 f32 %1030 = OpConstant 3.674022E-40 
                                     %1226 = OpTypePointer Private %592 
                     Private bool_2* %1227 = OpVariable Private 
                                 f32 %1238 = OpConstant 3.674022E-40 
                      Private i32_2* %1348 = OpVariable Private 
                               f32_4 %1351 = OpConstantComposite %18 %18 %18 %18 
                     Private bool_2* %1363 = OpVariable Private 
                                     %1365 = OpTypeVector %31 4 
                       Private bool* %1382 = OpVariable Private 
                                     %1384 = OpTypePointer Function %156 
                                     %1472 = OpTypePointer Uniform %27 
UniformConstant read_only Texture2D* %1483 = OpVariable UniformConstant 
            UniformConstant sampler* %1485 = OpVariable UniformConstant 
                                 f32 %1496 = OpConstant 3.674022E-40 
                                 f32 %1501 = OpConstant 3.674022E-40 
                                 f32 %1537 = OpConstant 3.674022E-40 
                               f32_3 %1538 = OpConstantComposite %1537 %1537 %1537 
                                 f32 %1543 = OpConstant 3.674022E-40 
                               f32_3 %1544 = OpConstantComposite %1543 %1543 %1543 
                                 f32 %1549 = OpConstant 3.674022E-40 
                               f32_3 %1550 = OpConstantComposite %1549 %1549 %1549 
                                 f32 %1555 = OpConstant 3.674022E-40 
                               f32_3 %1556 = OpConstantComposite %1555 %1555 %1555 
                                 f32 %1558 = OpConstant 3.674022E-40 
                               f32_3 %1559 = OpConstantComposite %1558 %1558 %1558 
                     Private bool_3* %1561 = OpVariable Private 
                                 f32 %1562 = OpConstant 3.674022E-40 
                               f32_4 %1563 = OpConstantComposite %1562 %1562 %1562 %18 
                                     %1568 = OpTypePointer Function %7 
                                 f32 %1610 = OpConstant 3.674022E-40 
                               f32_3 %1611 = OpConstantComposite %1610 %1610 %1610 
                                 f32 %1616 = OpConstant 3.674022E-40 
                               f32_3 %1617 = OpConstantComposite %1616 %1616 %1616 
                                 f32 %1622 = OpConstant 3.674022E-40 
                               f32_3 %1623 = OpConstantComposite %1622 %1622 %1622 
                                 f32 %1626 = OpConstant 3.674022E-40 
                               f32_3 %1627 = OpConstantComposite %1626 %1626 %1626 
                                 f32 %1635 = OpConstant 3.674022E-40 
                               f32_3 %1636 = OpConstantComposite %1635 %1635 %1635 
                                 f32 %1640 = OpConstant 3.674022E-40 
                               f32_4 %1641 = OpConstantComposite %1640 %1640 %1640 %18 
                                     %1646 = OpTypePointer Output %27 
                       Output f32_4* %1647 = OpVariable Output 
                                     %1659 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %338 = OpVariable Function 
                        Function f32* %354 = OpVariable Function 
                        Function f32* %407 = OpVariable Function 
                        Function f32* %428 = OpVariable Function 
                        Function f32* %438 = OpVariable Function 
                        Function f32* %455 = OpVariable Function 
                        Function f32* %468 = OpVariable Function 
                        Function f32* %539 = OpVariable Function 
                        Function f32* %613 = OpVariable Function 
                        Function f32* %634 = OpVariable Function 
                        Function f32* %669 = OpVariable Function 
                        Function f32* %687 = OpVariable Function 
                        Function f32* %775 = OpVariable Function 
                        Function f32* %795 = OpVariable Function 
                        Function f32* %827 = OpVariable Function 
                        Function f32* %848 = OpVariable Function 
                        Function f32* %880 = OpVariable Function 
                        Function f32* %898 = OpVariable Function 
                        Function f32* %986 = OpVariable Function 
                       Function f32* %1006 = OpVariable Function 
                       Function f32* %1039 = OpVariable Function 
                       Function f32* %1060 = OpVariable Function 
                       Function f32* %1092 = OpVariable Function 
                       Function f32* %1110 = OpVariable Function 
                       Function f32* %1198 = OpVariable Function 
                       Function f32* %1217 = OpVariable Function 
                       Function f32* %1245 = OpVariable Function 
                       Function f32* %1263 = OpVariable Function 
                       Function f32* %1280 = OpVariable Function 
                       Function f32* %1297 = OpVariable Function 
                       Function f32* %1321 = OpVariable Function 
                       Function f32* %1338 = OpVariable Function 
                      Function bool* %1385 = OpVariable Function 
                       Function f32* %1424 = OpVariable Function 
                       Function f32* %1440 = OpVariable Function 
                     Function f32_3* %1569 = OpVariable Function 
                       Function f32* %1573 = OpVariable Function 
                       Function f32* %1585 = OpVariable Function 
                       Function f32* %1597 = OpVariable Function 
                       Function f32* %1650 = OpVariable Function 
                       Function f32* %1663 = OpVariable Function 
                       Function f32* %1675 = OpVariable Function 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                                 f32_3 %14 = OpLoad %9 
                                 f32_3 %15 = OpVectorShuffle %14 %13 3 4 2 
                                               OpStore %9 %15 
                                 f32_3 %16 = OpLoad %9 
                                 f32_2 %17 = OpVectorShuffle %16 %16 0 1 
                                 f32_2 %20 = OpCompositeConstruct %18 %18 
                                 f32_2 %21 = OpCompositeConstruct %19 %19 
                                 f32_2 %22 = OpExtInst %1 43 %17 %20 %21 
                                 f32_3 %23 = OpLoad %9 
                                 f32_3 %24 = OpVectorShuffle %23 %22 3 4 2 
                                               OpStore %9 %24 
                                 f32_3 %25 = OpLoad %9 
                                 f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                          Uniform f32* %34 = OpAccessChain %30 %32 
                                   f32 %35 = OpLoad %34 
                                 f32_2 %36 = OpCompositeConstruct %35 %35 
                                 f32_2 %37 = OpFMul %26 %36 
                                 f32_3 %38 = OpLoad %9 
                                 f32_3 %39 = OpVectorShuffle %38 %37 3 4 2 
                                               OpStore %9 %39 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_3 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleExplicitLod %51 %53 Lod %27 
                                               OpStore %41 %54 
                   read_only Texture2D %57 = OpLoad %44 
                               sampler %58 = OpLoad %48 
            read_only Texture2DSampled %59 = OpSampledImage %57 %58 
                                 f32_3 %60 = OpLoad %9 
                                 f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                 f32_4 %65 = OpImageSampleExplicitLod %59 %61 Lod %27ConstOffset %65 
                                   f32 %68 = OpCompositeExtract %65 3 
                                               OpStore %56 %68 
                   read_only Texture2D %70 = OpLoad %44 
                               sampler %71 = OpLoad %48 
            read_only Texture2DSampled %72 = OpSampledImage %70 %71 
                                 f32_3 %73 = OpLoad %9 
                                 f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                 f32_4 %76 = OpImageSampleExplicitLod %72 %74 Lod %27ConstOffset %76 
                                   f32 %77 = OpCompositeExtract %76 3 
                                               OpStore %69 %77 
                   read_only Texture2D %79 = OpLoad %44 
                               sampler %80 = OpLoad %48 
            read_only Texture2DSampled %81 = OpSampledImage %79 %80 
                                 f32_3 %82 = OpLoad %9 
                                 f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                                 f32_4 %86 = OpImageSampleExplicitLod %81 %83 Lod %27ConstOffset %86 
                                   f32 %87 = OpCompositeExtract %86 3 
                          Private f32* %89 = OpAccessChain %78 %88 
                                               OpStore %89 %87 
                   read_only Texture2D %91 = OpLoad %44 
                               sampler %92 = OpLoad %48 
            read_only Texture2DSampled %93 = OpSampledImage %91 %92 
                                 f32_3 %94 = OpLoad %9 
                                 f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                 f32_4 %97 = OpImageSampleExplicitLod %93 %95 Lod %27ConstOffset %97 
                                   f32 %98 = OpCompositeExtract %97 3 
                                               OpStore %90 %98 
                         Private f32* %101 = OpAccessChain %41 %67 
                                  f32 %102 = OpLoad %101 
                                  f32 %103 = OpLoad %56 
                                  f32 %104 = OpExtInst %1 40 %102 %103 
                         Private f32* %105 = OpAccessChain %100 %88 
                                               OpStore %105 %104 
                         Private f32* %107 = OpAccessChain %41 %67 
                                  f32 %108 = OpLoad %107 
                                  f32 %109 = OpLoad %56 
                                  f32 %110 = OpExtInst %1 37 %108 %109 
                                               OpStore %106 %110 
                                  f32 %111 = OpLoad %69 
                         Private f32* %112 = OpAccessChain %100 %88 
                                  f32 %113 = OpLoad %112 
                                  f32 %114 = OpExtInst %1 40 %111 %113 
                         Private f32* %115 = OpAccessChain %100 %88 
                                               OpStore %115 %114 
                                  f32 %116 = OpLoad %69 
                                  f32 %117 = OpLoad %106 
                                  f32 %118 = OpExtInst %1 37 %116 %117 
                                               OpStore %106 %118 
                                  f32 %120 = OpLoad %90 
                         Private f32* %121 = OpAccessChain %78 %88 
                                  f32 %122 = OpLoad %121 
                                  f32 %123 = OpExtInst %1 40 %120 %122 
                         Private f32* %124 = OpAccessChain %119 %88 
                                               OpStore %124 %123 
                                  f32 %126 = OpLoad %90 
                         Private f32* %127 = OpAccessChain %78 %88 
                                  f32 %128 = OpLoad %127 
                                  f32 %129 = OpExtInst %1 37 %126 %128 
                         Private f32* %130 = OpAccessChain %125 %88 
                                               OpStore %130 %129 
                         Private f32* %131 = OpAccessChain %100 %88 
                                  f32 %132 = OpLoad %131 
                         Private f32* %133 = OpAccessChain %119 %88 
                                  f32 %134 = OpLoad %133 
                                  f32 %135 = OpExtInst %1 40 %132 %134 
                         Private f32* %136 = OpAccessChain %100 %88 
                                               OpStore %136 %135 
                                  f32 %137 = OpLoad %106 
                         Private f32* %138 = OpAccessChain %125 %88 
                                  f32 %139 = OpLoad %138 
                                  f32 %140 = OpExtInst %1 37 %137 %139 
                                               OpStore %106 %140 
                         Private f32* %141 = OpAccessChain %100 %88 
                                  f32 %142 = OpLoad %141 
                                  f32 %144 = OpFMul %142 %143 
                         Private f32* %145 = OpAccessChain %119 %88 
                                               OpStore %145 %144 
                                  f32 %146 = OpLoad %106 
                                  f32 %147 = OpFNegate %146 
                         Private f32* %148 = OpAccessChain %100 %88 
                                  f32 %149 = OpLoad %148 
                                  f32 %150 = OpFAdd %147 %149 
                         Private f32* %151 = OpAccessChain %100 %88 
                                               OpStore %151 %150 
                         Private f32* %152 = OpAccessChain %119 %88 
                                  f32 %153 = OpLoad %152 
                                  f32 %155 = OpExtInst %1 40 %153 %154 
                                               OpStore %106 %155 
                         Private f32* %159 = OpAccessChain %100 %88 
                                  f32 %160 = OpLoad %159 
                                  f32 %161 = OpLoad %106 
                                 bool %162 = OpFOrdGreaterThanEqual %160 %161 
                                               OpStore %158 %162 
                                 bool %163 = OpLoad %158 
                                               OpSelectionMerge %165 None 
                                               OpBranchConditional %163 %164 %165 
                                      %164 = OpLabel 
                  read_only Texture2D %166 = OpLoad %44 
                              sampler %167 = OpLoad %48 
           read_only Texture2DSampled %168 = OpSampledImage %166 %167 
                                f32_3 %169 = OpLoad %9 
                                f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                f32_4 %172 = OpImageSampleExplicitLod %168 %170 Lod %27ConstOffset %172 
                                  f32 %173 = OpCompositeExtract %172 3 
                                               OpStore %106 %173 
                  read_only Texture2D %174 = OpLoad %44 
                              sampler %175 = OpLoad %48 
           read_only Texture2DSampled %176 = OpSampledImage %174 %175 
                                f32_3 %177 = OpLoad %9 
                                f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                f32_4 %180 = OpImageSampleExplicitLod %176 %178 Lod %27ConstOffset %180 
                                  f32 %181 = OpCompositeExtract %180 3 
                         Private f32* %182 = OpAccessChain %119 %88 
                                               OpStore %182 %181 
                  read_only Texture2D %183 = OpLoad %44 
                              sampler %184 = OpLoad %48 
           read_only Texture2DSampled %185 = OpSampledImage %183 %184 
                                f32_3 %186 = OpLoad %9 
                                f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                f32_4 %189 = OpImageSampleExplicitLod %185 %187 Lod %27ConstOffset %189 
                                  f32 %190 = OpCompositeExtract %189 3 
                         Private f32* %191 = OpAccessChain %125 %88 
                                               OpStore %191 %190 
                  read_only Texture2D %192 = OpLoad %44 
                              sampler %193 = OpLoad %48 
           read_only Texture2DSampled %194 = OpSampledImage %192 %193 
                                f32_3 %195 = OpLoad %9 
                                f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                f32_4 %198 = OpImageSampleExplicitLod %194 %196 Lod %27ConstOffset %198 
                                  f32 %199 = OpCompositeExtract %198 3 
                         Private f32* %200 = OpAccessChain %9 %88 
                                               OpStore %200 %199 
                                  f32 %202 = OpLoad %56 
                         Private f32* %203 = OpAccessChain %78 %88 
                                  f32 %204 = OpLoad %203 
                                  f32 %205 = OpFAdd %202 %204 
                         Private f32* %206 = OpAccessChain %201 %88 
                                               OpStore %206 %205 
                                  f32 %208 = OpLoad %69 
                                  f32 %209 = OpLoad %90 
                                  f32 %210 = OpFAdd %208 %209 
                         Private f32* %211 = OpAccessChain %207 %88 
                                               OpStore %211 %210 
                         Private f32* %212 = OpAccessChain %100 %88 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFDiv %19 %213 
                         Private f32* %215 = OpAccessChain %100 %88 
                                               OpStore %215 %214 
                         Private f32* %217 = OpAccessChain %201 %88 
                                  f32 %218 = OpLoad %217 
                         Private f32* %219 = OpAccessChain %207 %88 
                                  f32 %220 = OpLoad %219 
                                  f32 %221 = OpFAdd %218 %220 
                                               OpStore %216 %221 
                         Private f32* %222 = OpAccessChain %41 %67 
                                  f32 %223 = OpLoad %222 
                                  f32 %225 = OpFMul %223 %224 
                         Private f32* %226 = OpAccessChain %201 %88 
                                  f32 %227 = OpLoad %226 
                                  f32 %228 = OpFAdd %225 %227 
                         Private f32* %229 = OpAccessChain %201 %88 
                                               OpStore %229 %228 
                         Private f32* %230 = OpAccessChain %41 %67 
                                  f32 %231 = OpLoad %230 
                                  f32 %232 = OpFMul %231 %224 
                         Private f32* %233 = OpAccessChain %207 %88 
                                  f32 %234 = OpLoad %233 
                                  f32 %235 = OpFAdd %232 %234 
                         Private f32* %236 = OpAccessChain %207 %88 
                                               OpStore %236 %235 
                         Private f32* %238 = OpAccessChain %119 %88 
                                  f32 %239 = OpLoad %238 
                         Private f32* %240 = OpAccessChain %125 %88 
                                  f32 %241 = OpLoad %240 
                                  f32 %242 = OpFAdd %239 %241 
                         Private f32* %243 = OpAccessChain %237 %88 
                                               OpStore %243 %242 
                                  f32 %244 = OpLoad %106 
                         Private f32* %245 = OpAccessChain %125 %88 
                                  f32 %246 = OpLoad %245 
                                  f32 %247 = OpFAdd %244 %246 
                         Private f32* %248 = OpAccessChain %125 %88 
                                               OpStore %248 %247 
                                  f32 %250 = OpLoad %69 
                                  f32 %251 = OpFMul %250 %224 
                         Private f32* %252 = OpAccessChain %237 %88 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpFAdd %251 %253 
                         Private f32* %255 = OpAccessChain %249 %88 
                                               OpStore %255 %254 
                         Private f32* %256 = OpAccessChain %78 %88 
                                  f32 %257 = OpLoad %256 
                                  f32 %258 = OpFMul %257 %224 
                         Private f32* %259 = OpAccessChain %125 %88 
                                  f32 %260 = OpLoad %259 
                                  f32 %261 = OpFAdd %258 %260 
                         Private f32* %262 = OpAccessChain %125 %88 
                                               OpStore %262 %261 
                         Private f32* %263 = OpAccessChain %9 %88 
                                  f32 %264 = OpLoad %263 
                                  f32 %265 = OpLoad %106 
                                  f32 %266 = OpFAdd %264 %265 
                                               OpStore %106 %266 
                         Private f32* %267 = OpAccessChain %119 %88 
                                  f32 %268 = OpLoad %267 
                         Private f32* %269 = OpAccessChain %9 %88 
                                  f32 %270 = OpLoad %269 
                                  f32 %271 = OpFAdd %268 %270 
                         Private f32* %272 = OpAccessChain %9 %88 
                                               OpStore %272 %271 
                         Private f32* %273 = OpAccessChain %201 %88 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpExtInst %1 4 %274 
                                  f32 %277 = OpFMul %275 %276 
                         Private f32* %278 = OpAccessChain %249 %88 
                                  f32 %279 = OpLoad %278 
                                  f32 %280 = OpExtInst %1 4 %279 
                                  f32 %281 = OpFAdd %277 %280 
                         Private f32* %282 = OpAccessChain %201 %88 
                                               OpStore %282 %281 
                         Private f32* %283 = OpAccessChain %207 %88 
                                  f32 %284 = OpLoad %283 
                                  f32 %285 = OpExtInst %1 4 %284 
                                  f32 %286 = OpFMul %285 %276 
                         Private f32* %287 = OpAccessChain %125 %88 
                                  f32 %288 = OpLoad %287 
                                  f32 %289 = OpExtInst %1 4 %288 
                                  f32 %290 = OpFAdd %286 %289 
                         Private f32* %291 = OpAccessChain %119 %88 
                                               OpStore %291 %290 
                                  f32 %292 = OpLoad %90 
                                  f32 %293 = OpFMul %292 %224 
                                  f32 %294 = OpLoad %106 
                                  f32 %295 = OpFAdd %293 %294 
                         Private f32* %296 = OpAccessChain %125 %88 
                                               OpStore %296 %295 
                                  f32 %297 = OpLoad %56 
                                  f32 %298 = OpFMul %297 %224 
                         Private f32* %299 = OpAccessChain %9 %88 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFAdd %298 %300 
                         Private f32* %302 = OpAccessChain %9 %88 
                                               OpStore %302 %301 
                         Private f32* %303 = OpAccessChain %201 %88 
                                  f32 %304 = OpLoad %303 
                         Private f32* %305 = OpAccessChain %125 %88 
                                  f32 %306 = OpLoad %305 
                                  f32 %307 = OpExtInst %1 4 %306 
                                  f32 %308 = OpFAdd %304 %307 
                         Private f32* %309 = OpAccessChain %201 %88 
                                               OpStore %309 %308 
                         Private f32* %310 = OpAccessChain %119 %88 
                                  f32 %311 = OpLoad %310 
                         Private f32* %312 = OpAccessChain %9 %88 
                                  f32 %313 = OpLoad %312 
                                  f32 %314 = OpExtInst %1 4 %313 
                                  f32 %315 = OpFAdd %311 %314 
                         Private f32* %316 = OpAccessChain %9 %88 
                                               OpStore %316 %315 
                         Private f32* %317 = OpAccessChain %237 %88 
                                  f32 %318 = OpLoad %317 
                                  f32 %319 = OpLoad %106 
                                  f32 %320 = OpFAdd %318 %319 
                                               OpStore %106 %320 
                         Private f32* %324 = OpAccessChain %201 %88 
                                  f32 %325 = OpLoad %324 
                         Private f32* %326 = OpAccessChain %9 %88 
                                  f32 %327 = OpLoad %326 
                                 bool %328 = OpFOrdGreaterThanEqual %325 %327 
                        Private bool* %329 = OpAccessChain %323 %88 
                                               OpStore %329 %328 
                                  f32 %330 = OpLoad %216 
                                  f32 %331 = OpFMul %330 %276 
                                  f32 %332 = OpLoad %106 
                                  f32 %333 = OpFAdd %331 %332 
                         Private f32* %334 = OpAccessChain %201 %88 
                                               OpStore %334 %333 
                        Private bool* %335 = OpAccessChain %323 %88 
                                 bool %336 = OpLoad %335 
                                               OpSelectionMerge %340 None 
                                               OpBranchConditional %336 %339 %343 
                                      %339 = OpLabel 
                         Private f32* %341 = OpAccessChain %78 %88 
                                  f32 %342 = OpLoad %341 
                                               OpStore %338 %342 
                                               OpBranch %340 
                                      %343 = OpLabel 
                                  f32 %344 = OpLoad %90 
                                               OpStore %338 %344 
                                               OpBranch %340 
                                      %340 = OpLabel 
                                  f32 %345 = OpLoad %338 
                         Private f32* %346 = OpAccessChain %78 %88 
                                               OpStore %346 %345 
                        Private bool* %347 = OpAccessChain %323 %88 
                                 bool %348 = OpLoad %347 
                                  f32 %349 = OpLoad %56 
                                  f32 %350 = OpLoad %69 
                                  f32 %351 = OpSelect %348 %349 %350 
                                               OpStore %56 %351 
                        Private bool* %352 = OpAccessChain %323 %88 
                                 bool %353 = OpLoad %352 
                                               OpSelectionMerge %356 None 
                                               OpBranchConditional %353 %355 %361 
                                      %355 = OpLabel 
                         Uniform f32* %359 = OpAccessChain %30 %357 %358 
                                  f32 %360 = OpLoad %359 
                                               OpStore %354 %360 
                                               OpBranch %356 
                                      %361 = OpLabel 
                         Uniform f32* %362 = OpAccessChain %30 %357 %88 
                                  f32 %363 = OpLoad %362 
                                               OpStore %354 %363 
                                               OpBranch %356 
                                      %356 = OpLabel 
                                  f32 %364 = OpLoad %354 
                                               OpStore %69 %364 
                         Private f32* %365 = OpAccessChain %201 %88 
                                  f32 %366 = OpLoad %365 
                                  f32 %368 = OpFMul %366 %367 
                         Private f32* %369 = OpAccessChain %41 %67 
                                  f32 %370 = OpLoad %369 
                                  f32 %371 = OpFNegate %370 
                                  f32 %372 = OpFAdd %368 %371 
                         Private f32* %373 = OpAccessChain %201 %88 
                                               OpStore %373 %372 
                         Private f32* %374 = OpAccessChain %41 %67 
                                  f32 %375 = OpLoad %374 
                                  f32 %376 = OpFNegate %375 
                         Private f32* %377 = OpAccessChain %78 %88 
                                  f32 %378 = OpLoad %377 
                                  f32 %379 = OpFAdd %376 %378 
                                               OpStore %90 %379 
                         Private f32* %380 = OpAccessChain %41 %67 
                                  f32 %381 = OpLoad %380 
                                  f32 %382 = OpFNegate %381 
                                  f32 %383 = OpLoad %56 
                                  f32 %384 = OpFAdd %382 %383 
                                               OpStore %106 %384 
                         Private f32* %385 = OpAccessChain %41 %67 
                                  f32 %386 = OpLoad %385 
                         Private f32* %387 = OpAccessChain %78 %88 
                                  f32 %388 = OpLoad %387 
                                  f32 %389 = OpFAdd %386 %388 
                         Private f32* %390 = OpAccessChain %78 %88 
                                               OpStore %390 %389 
                         Private f32* %391 = OpAccessChain %41 %67 
                                  f32 %392 = OpLoad %391 
                                  f32 %393 = OpLoad %56 
                                  f32 %394 = OpFAdd %392 %393 
                                               OpStore %56 %394 
                                  f32 %396 = OpLoad %90 
                                  f32 %397 = OpExtInst %1 4 %396 
                                  f32 %398 = OpLoad %106 
                                  f32 %399 = OpExtInst %1 4 %398 
                                 bool %400 = OpFOrdGreaterThanEqual %397 %399 
                                               OpStore %395 %400 
                                  f32 %401 = OpLoad %106 
                                  f32 %402 = OpExtInst %1 4 %401 
                                  f32 %403 = OpLoad %90 
                                  f32 %404 = OpExtInst %1 4 %403 
                                  f32 %405 = OpExtInst %1 40 %402 %404 
                                               OpStore %90 %405 
                                 bool %406 = OpLoad %395 
                                               OpSelectionMerge %409 None 
                                               OpBranchConditional %406 %408 %412 
                                      %408 = OpLabel 
                                  f32 %410 = OpLoad %69 
                                  f32 %411 = OpFNegate %410 
                                               OpStore %407 %411 
                                               OpBranch %409 
                                      %412 = OpLabel 
                                  f32 %413 = OpLoad %69 
                                               OpStore %407 %413 
                                               OpBranch %409 
                                      %409 = OpLabel 
                                  f32 %414 = OpLoad %407 
                                               OpStore %69 %414 
                         Private f32* %415 = OpAccessChain %100 %88 
                                  f32 %416 = OpLoad %415 
                         Private f32* %417 = OpAccessChain %201 %88 
                                  f32 %418 = OpLoad %417 
                                  f32 %419 = OpExtInst %1 4 %418 
                                  f32 %420 = OpFMul %416 %419 
                         Private f32* %421 = OpAccessChain %201 %88 
                                               OpStore %421 %420 
                         Private f32* %422 = OpAccessChain %201 %88 
                                  f32 %423 = OpLoad %422 
                                  f32 %424 = OpExtInst %1 43 %423 %18 %19 
                         Private f32* %425 = OpAccessChain %201 %88 
                                               OpStore %425 %424 
                        Private bool* %426 = OpAccessChain %323 %88 
                                 bool %427 = OpLoad %426 
                                               OpSelectionMerge %430 None 
                                               OpBranchConditional %427 %429 %433 
                                      %429 = OpLabel 
                         Uniform f32* %431 = OpAccessChain %30 %357 %88 
                                  f32 %432 = OpLoad %431 
                                               OpStore %428 %432 
                                               OpBranch %430 
                                      %433 = OpLabel 
                                               OpStore %428 %18 
                                               OpBranch %430 
                                      %430 = OpLabel 
                                  f32 %434 = OpLoad %428 
                         Private f32* %435 = OpAccessChain %100 %88 
                                               OpStore %435 %434 
                        Private bool* %436 = OpAccessChain %323 %88 
                                 bool %437 = OpLoad %436 
                                               OpSelectionMerge %440 None 
                                               OpBranchConditional %437 %439 %441 
                                      %439 = OpLabel 
                                               OpStore %438 %18 
                                               OpBranch %440 
                                      %441 = OpLabel 
                         Uniform f32* %442 = OpAccessChain %30 %357 %358 
                                  f32 %443 = OpLoad %442 
                                               OpStore %438 %443 
                                               OpBranch %440 
                                      %440 = OpLabel 
                                  f32 %444 = OpLoad %438 
                         Private f32* %445 = OpAccessChain %100 %358 
                                               OpStore %445 %444 
                                  f32 %446 = OpLoad %69 
                                f32_2 %447 = OpCompositeConstruct %446 %446 
                                f32_2 %450 = OpFMul %447 %449 
                                f32_2 %451 = OpLoad vs_TEXCOORD0 
                                f32_2 %452 = OpFAdd %450 %451 
                                               OpStore %125 %452 
                        Private bool* %453 = OpAccessChain %323 %88 
                                 bool %454 = OpLoad %453 
                                               OpSelectionMerge %457 None 
                                               OpBranchConditional %454 %456 %461 
                                      %456 = OpLabel 
                           Input f32* %459 = OpAccessChain vs_TEXCOORD0 %88 
                                  f32 %460 = OpLoad %459 
                                               OpStore %455 %460 
                                               OpBranch %457 
                                      %461 = OpLabel 
                         Private f32* %462 = OpAccessChain %125 %88 
                                  f32 %463 = OpLoad %462 
                                               OpStore %455 %463 
                                               OpBranch %457 
                                      %457 = OpLabel 
                                  f32 %464 = OpLoad %455 
                         Private f32* %465 = OpAccessChain %125 %88 
                                               OpStore %465 %464 
                        Private bool* %466 = OpAccessChain %323 %88 
                                 bool %467 = OpLoad %466 
                                               OpSelectionMerge %470 None 
                                               OpBranchConditional %467 %469 %473 
                                      %469 = OpLabel 
                         Private f32* %471 = OpAccessChain %125 %358 
                                  f32 %472 = OpLoad %471 
                                               OpStore %468 %472 
                                               OpBranch %470 
                                      %473 = OpLabel 
                           Input f32* %474 = OpAccessChain vs_TEXCOORD0 %358 
                                  f32 %475 = OpLoad %474 
                                               OpStore %468 %475 
                                               OpBranch %470 
                                      %470 = OpLabel 
                                  f32 %476 = OpLoad %468 
                         Private f32* %477 = OpAccessChain %125 %358 
                                               OpStore %477 %476 
                                f32_2 %478 = OpLoad %100 
                                f32_2 %479 = OpFNegate %478 
                                f32_2 %480 = OpLoad %125 
                                f32_2 %481 = OpFAdd %479 %480 
                                f32_3 %482 = OpLoad %237 
                                f32_3 %483 = OpVectorShuffle %482 %481 3 4 2 
                                               OpStore %237 %483 
                                f32_2 %485 = OpLoad %100 
                                f32_2 %486 = OpLoad %125 
                                f32_2 %487 = OpFAdd %485 %486 
                                f32_3 %488 = OpLoad %484 
                                f32_3 %489 = OpVectorShuffle %488 %487 3 4 2 
                                               OpStore %484 %489 
                         Private f32* %490 = OpAccessChain %201 %88 
                                  f32 %491 = OpLoad %490 
                                  f32 %492 = OpFMul %491 %224 
                                  f32 %494 = OpFAdd %492 %493 
                         Private f32* %495 = OpAccessChain %125 %88 
                                               OpStore %495 %494 
                                f32_3 %496 = OpLoad %237 
                                f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                                               OpStore %207 %497 
                                f32_2 %498 = OpLoad %207 
                                f32_2 %499 = OpCompositeConstruct %18 %18 
                                f32_2 %500 = OpCompositeConstruct %19 %19 
                                f32_2 %501 = OpExtInst %1 43 %498 %499 %500 
                                               OpStore %207 %501 
                                f32_2 %502 = OpLoad %207 
                         Uniform f32* %503 = OpAccessChain %30 %32 
                                  f32 %504 = OpLoad %503 
                                f32_2 %505 = OpCompositeConstruct %504 %504 
                                f32_2 %506 = OpFMul %502 %505 
                                               OpStore %207 %506 
                  read_only Texture2D %507 = OpLoad %44 
                              sampler %508 = OpLoad %48 
           read_only Texture2DSampled %509 = OpSampledImage %507 %508 
                                f32_2 %510 = OpLoad %207 
                                f32_4 %511 = OpImageSampleExplicitLod %509 %510 Lod %27 
                                  f32 %512 = OpCompositeExtract %511 3 
                         Private f32* %513 = OpAccessChain %207 %88 
                                               OpStore %513 %512 
                         Private f32* %514 = OpAccessChain %201 %88 
                                  f32 %515 = OpLoad %514 
                         Private f32* %516 = OpAccessChain %201 %88 
                                  f32 %517 = OpLoad %516 
                                  f32 %518 = OpFMul %515 %517 
                         Private f32* %519 = OpAccessChain %201 %88 
                                               OpStore %519 %518 
                                f32_3 %521 = OpLoad %484 
                                f32_2 %522 = OpVectorShuffle %521 %521 0 1 
                                               OpStore %520 %522 
                                f32_2 %523 = OpLoad %520 
                                f32_2 %524 = OpCompositeConstruct %18 %18 
                                f32_2 %525 = OpCompositeConstruct %19 %19 
                                f32_2 %526 = OpExtInst %1 43 %523 %524 %525 
                                               OpStore %520 %526 
                                f32_2 %527 = OpLoad %520 
                         Uniform f32* %528 = OpAccessChain %30 %32 
                                  f32 %529 = OpLoad %528 
                                f32_2 %530 = OpCompositeConstruct %529 %529 
                                f32_2 %531 = OpFMul %527 %530 
                                               OpStore %520 %531 
                  read_only Texture2D %532 = OpLoad %44 
                              sampler %533 = OpLoad %48 
           read_only Texture2DSampled %534 = OpSampledImage %532 %533 
                                f32_2 %535 = OpLoad %520 
                                f32_4 %536 = OpImageSampleExplicitLod %534 %535 Lod %27 
                                  f32 %537 = OpCompositeExtract %536 3 
                                               OpStore %216 %537 
                                 bool %538 = OpLoad %395 
                                               OpSelectionMerge %541 None 
                                               OpBranchConditional %538 %540 %544 
                                      %540 = OpLabel 
                         Private f32* %542 = OpAccessChain %78 %88 
                                  f32 %543 = OpLoad %542 
                                               OpStore %539 %543 
                                               OpBranch %541 
                                      %544 = OpLabel 
                                  f32 %545 = OpLoad %56 
                                               OpStore %539 %545 
                                               OpBranch %541 
                                      %541 = OpLabel 
                                  f32 %546 = OpLoad %539 
                                               OpStore %56 %546 
                                  f32 %547 = OpLoad %90 
                                  f32 %549 = OpFMul %547 %548 
                         Private f32* %550 = OpAccessChain %78 %88 
                                               OpStore %550 %549 
                                  f32 %551 = OpLoad %56 
                                  f32 %552 = OpFNegate %551 
                                  f32 %553 = OpFMul %552 %448 
                         Private f32* %554 = OpAccessChain %41 %67 
                                  f32 %555 = OpLoad %554 
                                  f32 %556 = OpFAdd %553 %555 
                                               OpStore %90 %556 
                         Private f32* %557 = OpAccessChain %201 %88 
                                  f32 %558 = OpLoad %557 
                         Private f32* %559 = OpAccessChain %125 %88 
                                  f32 %560 = OpLoad %559 
                                  f32 %561 = OpFMul %558 %560 
                         Private f32* %562 = OpAccessChain %201 %88 
                                               OpStore %562 %561 
                                  f32 %565 = OpLoad %90 
                                 bool %566 = OpFOrdLessThan %565 %18 
                                  u32 %568 = OpSelect %566 %567 %88 
                                  i32 %569 = OpBitcast %568 
                                               OpStore %564 %569 
                                  f32 %570 = OpLoad %56 
                                  f32 %571 = OpFNegate %570 
                                  f32 %572 = OpFMul %571 %448 
                         Private f32* %573 = OpAccessChain %207 %88 
                                  f32 %574 = OpLoad %573 
                                  f32 %575 = OpFAdd %572 %574 
                         Private f32* %576 = OpAccessChain %119 %88 
                                               OpStore %576 %575 
                                  f32 %577 = OpLoad %56 
                                  f32 %578 = OpFNegate %577 
                                  f32 %579 = OpFMul %578 %448 
                                  f32 %580 = OpLoad %216 
                                  f32 %581 = OpFAdd %579 %580 
                         Private f32* %582 = OpAccessChain %119 %358 
                                               OpStore %582 %581 
                                f32_2 %585 = OpLoad %119 
                                f32_4 %586 = OpVectorShuffle %585 %585 0 1 0 1 
                                f32_4 %587 = OpExtInst %1 4 %586 
                                f32_3 %588 = OpLoad %78 
                                f32_4 %589 = OpVectorShuffle %588 %588 0 0 0 0 
                               bool_4 %591 = OpFOrdGreaterThanEqual %587 %589 
                               bool_2 %593 = OpVectorShuffle %591 %591 0 1 
                                u32_2 %597 = OpSelect %593 %596 %595 
                                u32_2 %598 = OpCompositeConstruct %567 %567 
                                u32_2 %599 = OpIMul %597 %598 
                                i32_2 %600 = OpBitcast %599 
                                               OpStore %584 %600 
                         Private f32* %601 = OpAccessChain %100 %88 
                                  f32 %602 = OpLoad %601 
                                  f32 %603 = OpFNegate %602 
                                  f32 %605 = OpFMul %603 %604 
                         Private f32* %606 = OpAccessChain %237 %88 
                                  f32 %607 = OpLoad %606 
                                  f32 %608 = OpFAdd %605 %607 
                         Private f32* %609 = OpAccessChain %520 %88 
                                               OpStore %609 %608 
                         Private i32* %610 = OpAccessChain %584 %88 
                                  i32 %611 = OpLoad %610 
                                 bool %612 = OpINotEqual %611 %32 
                                               OpSelectionMerge %615 None 
                                               OpBranchConditional %612 %614 %618 
                                      %614 = OpLabel 
                         Private f32* %616 = OpAccessChain %237 %88 
                                  f32 %617 = OpLoad %616 
                                               OpStore %613 %617 
                                               OpBranch %615 
                                      %618 = OpLabel 
                         Private f32* %619 = OpAccessChain %520 %88 
                                  f32 %620 = OpLoad %619 
                                               OpStore %613 %620 
                                               OpBranch %615 
                                      %615 = OpLabel 
                                  f32 %621 = OpLoad %613 
                         Private f32* %622 = OpAccessChain %237 %88 
                                               OpStore %622 %621 
                         Private f32* %624 = OpAccessChain %100 %358 
                                  f32 %625 = OpLoad %624 
                                  f32 %626 = OpFNegate %625 
                                  f32 %627 = OpFMul %626 %604 
                         Private f32* %628 = OpAccessChain %237 %358 
                                  f32 %629 = OpLoad %628 
                                  f32 %630 = OpFAdd %627 %629 
                                               OpStore %623 %630 
                         Private i32* %631 = OpAccessChain %584 %88 
                                  i32 %632 = OpLoad %631 
                                 bool %633 = OpINotEqual %632 %32 
                                               OpSelectionMerge %636 None 
                                               OpBranchConditional %633 %635 %639 
                                      %635 = OpLabel 
                         Private f32* %637 = OpAccessChain %237 %358 
                                  f32 %638 = OpLoad %637 
                                               OpStore %634 %638 
                                               OpBranch %636 
                                      %639 = OpLabel 
                                  f32 %640 = OpLoad %623 
                                               OpStore %634 %640 
                                               OpBranch %636 
                                      %636 = OpLabel 
                                  f32 %641 = OpLoad %634 
                         Private f32* %643 = OpAccessChain %237 %642 
                                               OpStore %643 %641 
                                i32_2 %647 = OpLoad %584 
                                i32_2 %648 = OpNot %647 
                                i32_3 %649 = OpLoad %646 
                                i32_3 %650 = OpVectorShuffle %649 %648 3 1 4 
                                               OpStore %646 %650 
                         Private i32* %651 = OpAccessChain %646 %642 
                                  i32 %652 = OpLoad %651 
                                  u32 %653 = OpBitcast %652 
                         Private i32* %654 = OpAccessChain %646 %88 
                                  i32 %655 = OpLoad %654 
                                  u32 %656 = OpBitcast %655 
                                  u32 %657 = OpBitwiseOr %653 %656 
                                  i32 %658 = OpBitcast %657 
                         Private i32* %659 = OpAccessChain %646 %88 
                                               OpStore %659 %658 
                         Private f32* %660 = OpAccessChain %100 %88 
                                  f32 %661 = OpLoad %660 
                                  f32 %662 = OpFMul %661 %604 
                         Private f32* %663 = OpAccessChain %484 %88 
                                  f32 %664 = OpLoad %663 
                                  f32 %665 = OpFAdd %662 %664 
                                               OpStore %623 %665 
                         Private i32* %666 = OpAccessChain %584 %358 
                                  i32 %667 = OpLoad %666 
                                 bool %668 = OpINotEqual %667 %32 
                                               OpSelectionMerge %671 None 
                                               OpBranchConditional %668 %670 %674 
                                      %670 = OpLabel 
                         Private f32* %672 = OpAccessChain %484 %88 
                                  f32 %673 = OpLoad %672 
                                               OpStore %669 %673 
                                               OpBranch %671 
                                      %674 = OpLabel 
                                  f32 %675 = OpLoad %623 
                                               OpStore %669 %675 
                                               OpBranch %671 
                                      %671 = OpLabel 
                                  f32 %676 = OpLoad %669 
                         Private f32* %677 = OpAccessChain %484 %88 
                                               OpStore %677 %676 
                         Private f32* %678 = OpAccessChain %100 %358 
                                  f32 %679 = OpLoad %678 
                                  f32 %680 = OpFMul %679 %604 
                         Private f32* %681 = OpAccessChain %484 %358 
                                  f32 %682 = OpLoad %681 
                                  f32 %683 = OpFAdd %680 %682 
                                               OpStore %623 %683 
                         Private i32* %684 = OpAccessChain %584 %358 
                                  i32 %685 = OpLoad %684 
                                 bool %686 = OpINotEqual %685 %32 
                                               OpSelectionMerge %689 None 
                                               OpBranchConditional %686 %688 %692 
                                      %688 = OpLabel 
                         Private f32* %690 = OpAccessChain %484 %358 
                                  f32 %691 = OpLoad %690 
                                               OpStore %687 %691 
                                               OpBranch %689 
                                      %692 = OpLabel 
                                  f32 %693 = OpLoad %623 
                                               OpStore %687 %693 
                                               OpBranch %689 
                                      %689 = OpLabel 
                                  f32 %694 = OpLoad %687 
                         Private f32* %695 = OpAccessChain %484 %642 
                                               OpStore %695 %694 
                         Private i32* %696 = OpAccessChain %646 %88 
                                  i32 %697 = OpLoad %696 
                                 bool %698 = OpINotEqual %697 %32 
                                               OpSelectionMerge %700 None 
                                               OpBranchConditional %698 %699 %700 
                                      %699 = OpLabel 
                         Private i32* %701 = OpAccessChain %584 %88 
                                  i32 %702 = OpLoad %701 
                                 bool %703 = OpIEqual %702 %32 
                                               OpSelectionMerge %705 None 
                                               OpBranchConditional %703 %704 %705 
                                      %704 = OpLabel 
                                f32_3 %706 = OpLoad %237 
                                f32_2 %707 = OpVectorShuffle %706 %706 0 2 
                                f32_3 %708 = OpLoad %249 
                                f32_3 %709 = OpVectorShuffle %708 %707 3 1 4 
                                               OpStore %249 %709 
                                f32_3 %710 = OpLoad %249 
                                f32_2 %711 = OpVectorShuffle %710 %710 0 2 
                                f32_2 %712 = OpCompositeConstruct %18 %18 
                                f32_2 %713 = OpCompositeConstruct %19 %19 
                                f32_2 %714 = OpExtInst %1 43 %711 %712 %713 
                                f32_3 %715 = OpLoad %249 
                                f32_3 %716 = OpVectorShuffle %715 %714 3 1 4 
                                               OpStore %249 %716 
                                f32_3 %717 = OpLoad %249 
                                f32_2 %718 = OpVectorShuffle %717 %717 0 2 
                         Uniform f32* %719 = OpAccessChain %30 %32 
                                  f32 %720 = OpLoad %719 
                                f32_2 %721 = OpCompositeConstruct %720 %720 
                                f32_2 %722 = OpFMul %718 %721 
                                f32_3 %723 = OpLoad %249 
                                f32_3 %724 = OpVectorShuffle %723 %722 3 1 4 
                                               OpStore %249 %724 
                  read_only Texture2D %725 = OpLoad %44 
                              sampler %726 = OpLoad %48 
           read_only Texture2DSampled %727 = OpSampledImage %725 %726 
                                f32_3 %728 = OpLoad %249 
                                f32_2 %729 = OpVectorShuffle %728 %728 0 2 
                                f32_4 %730 = OpImageSampleExplicitLod %727 %729 Lod %27 
                                  f32 %731 = OpCompositeExtract %730 3 
                         Private f32* %732 = OpAccessChain %119 %88 
                                               OpStore %732 %731 
                                               OpBranch %705 
                                      %705 = OpLabel 
                         Private i32* %733 = OpAccessChain %584 %358 
                                  i32 %734 = OpLoad %733 
                                 bool %735 = OpIEqual %734 %32 
                                               OpSelectionMerge %737 None 
                                               OpBranchConditional %735 %736 %737 
                                      %736 = OpLabel 
                                f32_3 %738 = OpLoad %484 
                                f32_2 %739 = OpVectorShuffle %738 %738 0 2 
                                f32_3 %740 = OpLoad %249 
                                f32_3 %741 = OpVectorShuffle %740 %739 3 1 4 
                                               OpStore %249 %741 
                                f32_3 %742 = OpLoad %249 
                                f32_2 %743 = OpVectorShuffle %742 %742 0 2 
                                f32_2 %744 = OpCompositeConstruct %18 %18 
                                f32_2 %745 = OpCompositeConstruct %19 %19 
                                f32_2 %746 = OpExtInst %1 43 %743 %744 %745 
                                f32_3 %747 = OpLoad %249 
                                f32_3 %748 = OpVectorShuffle %747 %746 3 1 4 
                                               OpStore %249 %748 
                                f32_3 %749 = OpLoad %249 
                                f32_2 %750 = OpVectorShuffle %749 %749 0 2 
                         Uniform f32* %751 = OpAccessChain %30 %32 
                                  f32 %752 = OpLoad %751 
                                f32_2 %753 = OpCompositeConstruct %752 %752 
                                f32_2 %754 = OpFMul %750 %753 
                                f32_3 %755 = OpLoad %249 
                                f32_3 %756 = OpVectorShuffle %755 %754 3 1 4 
                                               OpStore %249 %756 
                  read_only Texture2D %757 = OpLoad %44 
                              sampler %758 = OpLoad %48 
           read_only Texture2DSampled %759 = OpSampledImage %757 %758 
                                f32_3 %760 = OpLoad %249 
                                f32_2 %761 = OpVectorShuffle %760 %760 0 2 
                                f32_4 %762 = OpImageSampleExplicitLod %759 %761 Lod %27 
                                  f32 %763 = OpCompositeExtract %762 3 
                         Private f32* %764 = OpAccessChain %119 %358 
                                               OpStore %764 %763 
                                               OpBranch %737 
                                      %737 = OpLabel 
                                  f32 %765 = OpLoad %56 
                                  f32 %766 = OpFNegate %765 
                                  f32 %767 = OpFMul %766 %448 
                         Private f32* %768 = OpAccessChain %119 %88 
                                  f32 %769 = OpLoad %768 
                                  f32 %770 = OpFAdd %767 %769 
                         Private f32* %771 = OpAccessChain %249 %88 
                                               OpStore %771 %770 
                         Private i32* %772 = OpAccessChain %584 %88 
                                  i32 %773 = OpLoad %772 
                                 bool %774 = OpINotEqual %773 %32 
                                               OpSelectionMerge %777 None 
                                               OpBranchConditional %774 %776 %780 
                                      %776 = OpLabel 
                         Private f32* %778 = OpAccessChain %119 %88 
                                  f32 %779 = OpLoad %778 
                                               OpStore %775 %779 
                                               OpBranch %777 
                                      %780 = OpLabel 
                         Private f32* %781 = OpAccessChain %249 %88 
                                  f32 %782 = OpLoad %781 
                                               OpStore %775 %782 
                                               OpBranch %777 
                                      %777 = OpLabel 
                                  f32 %783 = OpLoad %775 
                         Private f32* %784 = OpAccessChain %119 %88 
                                               OpStore %784 %783 
                                  f32 %785 = OpLoad %56 
                                  f32 %786 = OpFNegate %785 
                                  f32 %787 = OpFMul %786 %448 
                         Private f32* %788 = OpAccessChain %119 %358 
                                  f32 %789 = OpLoad %788 
                                  f32 %790 = OpFAdd %787 %789 
                         Private f32* %791 = OpAccessChain %207 %88 
                                               OpStore %791 %790 
                         Private i32* %792 = OpAccessChain %584 %358 
                                  i32 %793 = OpLoad %792 
                                 bool %794 = OpINotEqual %793 %32 
                                               OpSelectionMerge %797 None 
                                               OpBranchConditional %794 %796 %800 
                                      %796 = OpLabel 
                         Private f32* %798 = OpAccessChain %119 %358 
                                  f32 %799 = OpLoad %798 
                                               OpStore %795 %799 
                                               OpBranch %797 
                                      %800 = OpLabel 
                         Private f32* %801 = OpAccessChain %207 %88 
                                  f32 %802 = OpLoad %801 
                                               OpStore %795 %802 
                                               OpBranch %797 
                                      %797 = OpLabel 
                                  f32 %803 = OpLoad %795 
                         Private f32* %804 = OpAccessChain %119 %358 
                                               OpStore %804 %803 
                                f32_2 %805 = OpLoad %119 
                                f32_4 %806 = OpVectorShuffle %805 %805 0 1 0 1 
                                f32_4 %807 = OpExtInst %1 4 %806 
                                f32_3 %808 = OpLoad %78 
                                f32_4 %809 = OpVectorShuffle %808 %808 0 0 0 0 
                               bool_4 %810 = OpFOrdGreaterThanEqual %807 %809 
                               bool_2 %811 = OpVectorShuffle %810 %810 0 1 
                                u32_2 %812 = OpSelect %811 %596 %595 
                                u32_2 %813 = OpCompositeConstruct %567 %567 
                                u32_2 %814 = OpIMul %812 %813 
                                i32_2 %815 = OpBitcast %814 
                                               OpStore %584 %815 
                         Private f32* %816 = OpAccessChain %100 %88 
                                  f32 %817 = OpLoad %816 
                                  f32 %818 = OpFNegate %817 
                                  f32 %819 = OpFMul %818 %276 
                         Private f32* %820 = OpAccessChain %237 %88 
                                  f32 %821 = OpLoad %820 
                                  f32 %822 = OpFAdd %819 %821 
                         Private f32* %823 = OpAccessChain %249 %88 
                                               OpStore %823 %822 
                         Private i32* %824 = OpAccessChain %584 %88 
                                  i32 %825 = OpLoad %824 
                                 bool %826 = OpINotEqual %825 %32 
                                               OpSelectionMerge %829 None 
                                               OpBranchConditional %826 %828 %832 
                                      %828 = OpLabel 
                         Private f32* %830 = OpAccessChain %237 %88 
                                  f32 %831 = OpLoad %830 
                                               OpStore %827 %831 
                                               OpBranch %829 
                                      %832 = OpLabel 
                         Private f32* %833 = OpAccessChain %249 %88 
                                  f32 %834 = OpLoad %833 
                                               OpStore %827 %834 
                                               OpBranch %829 
                                      %829 = OpLabel 
                                  f32 %835 = OpLoad %827 
                         Private f32* %836 = OpAccessChain %237 %88 
                                               OpStore %836 %835 
                         Private f32* %837 = OpAccessChain %100 %358 
                                  f32 %838 = OpLoad %837 
                                  f32 %839 = OpFNegate %838 
                                  f32 %840 = OpFMul %839 %276 
                         Private f32* %841 = OpAccessChain %237 %642 
                                  f32 %842 = OpLoad %841 
                                  f32 %843 = OpFAdd %840 %842 
                         Private f32* %844 = OpAccessChain %249 %88 
                                               OpStore %844 %843 
                         Private i32* %845 = OpAccessChain %584 %88 
                                  i32 %846 = OpLoad %845 
                                 bool %847 = OpINotEqual %846 %32 
                                               OpSelectionMerge %850 None 
                                               OpBranchConditional %847 %849 %853 
                                      %849 = OpLabel 
                         Private f32* %851 = OpAccessChain %237 %642 
                                  f32 %852 = OpLoad %851 
                                               OpStore %848 %852 
                                               OpBranch %850 
                                      %853 = OpLabel 
                         Private f32* %854 = OpAccessChain %249 %88 
                                  f32 %855 = OpLoad %854 
                                               OpStore %848 %855 
                                               OpBranch %850 
                                      %850 = OpLabel 
                                  f32 %856 = OpLoad %848 
                         Private f32* %857 = OpAccessChain %237 %642 
                                               OpStore %857 %856 
                                i32_2 %858 = OpLoad %584 
                                i32_2 %859 = OpNot %858 
                                i32_3 %860 = OpLoad %646 
                                i32_3 %861 = OpVectorShuffle %860 %859 3 1 4 
                                               OpStore %646 %861 
                         Private i32* %862 = OpAccessChain %646 %642 
                                  i32 %863 = OpLoad %862 
                                  u32 %864 = OpBitcast %863 
                         Private i32* %865 = OpAccessChain %646 %88 
                                  i32 %866 = OpLoad %865 
                                  u32 %867 = OpBitcast %866 
                                  u32 %868 = OpBitwiseOr %864 %867 
                                  i32 %869 = OpBitcast %868 
                         Private i32* %870 = OpAccessChain %646 %88 
                                               OpStore %870 %869 
                         Private f32* %871 = OpAccessChain %100 %88 
                                  f32 %872 = OpLoad %871 
                                  f32 %873 = OpFMul %872 %276 
                         Private f32* %874 = OpAccessChain %484 %88 
                                  f32 %875 = OpLoad %874 
                                  f32 %876 = OpFAdd %873 %875 
                                               OpStore %623 %876 
                         Private i32* %877 = OpAccessChain %584 %358 
                                  i32 %878 = OpLoad %877 
                                 bool %879 = OpINotEqual %878 %32 
                                               OpSelectionMerge %882 None 
                                               OpBranchConditional %879 %881 %885 
                                      %881 = OpLabel 
                         Private f32* %883 = OpAccessChain %484 %88 
                                  f32 %884 = OpLoad %883 
                                               OpStore %880 %884 
                                               OpBranch %882 
                                      %885 = OpLabel 
                                  f32 %886 = OpLoad %623 
                                               OpStore %880 %886 
                                               OpBranch %882 
                                      %882 = OpLabel 
                                  f32 %887 = OpLoad %880 
                         Private f32* %888 = OpAccessChain %484 %88 
                                               OpStore %888 %887 
                         Private f32* %889 = OpAccessChain %100 %358 
                                  f32 %890 = OpLoad %889 
                                  f32 %891 = OpFMul %890 %276 
                         Private f32* %892 = OpAccessChain %484 %642 
                                  f32 %893 = OpLoad %892 
                                  f32 %894 = OpFAdd %891 %893 
                                               OpStore %623 %894 
                         Private i32* %895 = OpAccessChain %584 %358 
                                  i32 %896 = OpLoad %895 
                                 bool %897 = OpINotEqual %896 %32 
                                               OpSelectionMerge %900 None 
                                               OpBranchConditional %897 %899 %903 
                                      %899 = OpLabel 
                         Private f32* %901 = OpAccessChain %484 %642 
                                  f32 %902 = OpLoad %901 
                                               OpStore %898 %902 
                                               OpBranch %900 
                                      %903 = OpLabel 
                                  f32 %904 = OpLoad %623 
                                               OpStore %898 %904 
                                               OpBranch %900 
                                      %900 = OpLabel 
                                  f32 %905 = OpLoad %898 
                         Private f32* %906 = OpAccessChain %484 %642 
                                               OpStore %906 %905 
                         Private i32* %907 = OpAccessChain %646 %88 
                                  i32 %908 = OpLoad %907 
                                 bool %909 = OpINotEqual %908 %32 
                                               OpSelectionMerge %911 None 
                                               OpBranchConditional %909 %910 %911 
                                      %910 = OpLabel 
                         Private i32* %912 = OpAccessChain %584 %88 
                                  i32 %913 = OpLoad %912 
                                 bool %914 = OpIEqual %913 %32 
                                               OpSelectionMerge %916 None 
                                               OpBranchConditional %914 %915 %916 
                                      %915 = OpLabel 
                                f32_3 %917 = OpLoad %237 
                                f32_2 %918 = OpVectorShuffle %917 %917 0 2 
                                f32_3 %919 = OpLoad %249 
                                f32_3 %920 = OpVectorShuffle %919 %918 3 1 4 
                                               OpStore %249 %920 
                                f32_3 %921 = OpLoad %249 
                                f32_2 %922 = OpVectorShuffle %921 %921 0 2 
                                f32_2 %923 = OpCompositeConstruct %18 %18 
                                f32_2 %924 = OpCompositeConstruct %19 %19 
                                f32_2 %925 = OpExtInst %1 43 %922 %923 %924 
                                f32_3 %926 = OpLoad %249 
                                f32_3 %927 = OpVectorShuffle %926 %925 3 1 4 
                                               OpStore %249 %927 
                                f32_3 %928 = OpLoad %249 
                                f32_2 %929 = OpVectorShuffle %928 %928 0 2 
                         Uniform f32* %930 = OpAccessChain %30 %32 
                                  f32 %931 = OpLoad %930 
                                f32_2 %932 = OpCompositeConstruct %931 %931 
                                f32_2 %933 = OpFMul %929 %932 
                                f32_3 %934 = OpLoad %249 
                                f32_3 %935 = OpVectorShuffle %934 %933 3 1 4 
                                               OpStore %249 %935 
                  read_only Texture2D %936 = OpLoad %44 
                              sampler %937 = OpLoad %48 
           read_only Texture2DSampled %938 = OpSampledImage %936 %937 
                                f32_3 %939 = OpLoad %249 
                                f32_2 %940 = OpVectorShuffle %939 %939 0 2 
                                f32_4 %941 = OpImageSampleExplicitLod %938 %940 Lod %27 
                                  f32 %942 = OpCompositeExtract %941 3 
                         Private f32* %943 = OpAccessChain %119 %88 
                                               OpStore %943 %942 
                                               OpBranch %916 
                                      %916 = OpLabel 
                         Private i32* %944 = OpAccessChain %584 %358 
                                  i32 %945 = OpLoad %944 
                                 bool %946 = OpIEqual %945 %32 
                                               OpSelectionMerge %948 None 
                                               OpBranchConditional %946 %947 %948 
                                      %947 = OpLabel 
                                f32_3 %949 = OpLoad %484 
                                f32_2 %950 = OpVectorShuffle %949 %949 0 2 
                                f32_3 %951 = OpLoad %249 
                                f32_3 %952 = OpVectorShuffle %951 %950 3 1 4 
                                               OpStore %249 %952 
                                f32_3 %953 = OpLoad %249 
                                f32_2 %954 = OpVectorShuffle %953 %953 0 2 
                                f32_2 %955 = OpCompositeConstruct %18 %18 
                                f32_2 %956 = OpCompositeConstruct %19 %19 
                                f32_2 %957 = OpExtInst %1 43 %954 %955 %956 
                                f32_3 %958 = OpLoad %249 
                                f32_3 %959 = OpVectorShuffle %958 %957 3 1 4 
                                               OpStore %249 %959 
                                f32_3 %960 = OpLoad %249 
                                f32_2 %961 = OpVectorShuffle %960 %960 0 2 
                         Uniform f32* %962 = OpAccessChain %30 %32 
                                  f32 %963 = OpLoad %962 
                                f32_2 %964 = OpCompositeConstruct %963 %963 
                                f32_2 %965 = OpFMul %961 %964 
                                f32_3 %966 = OpLoad %249 
                                f32_3 %967 = OpVectorShuffle %966 %965 3 1 4 
                                               OpStore %249 %967 
                  read_only Texture2D %968 = OpLoad %44 
                              sampler %969 = OpLoad %48 
           read_only Texture2DSampled %970 = OpSampledImage %968 %969 
                                f32_3 %971 = OpLoad %249 
                                f32_2 %972 = OpVectorShuffle %971 %971 0 2 
                                f32_4 %973 = OpImageSampleExplicitLod %970 %972 Lod %27 
                                  f32 %974 = OpCompositeExtract %973 3 
                         Private f32* %975 = OpAccessChain %119 %358 
                                               OpStore %975 %974 
                                               OpBranch %948 
                                      %948 = OpLabel 
                                  f32 %976 = OpLoad %56 
                                  f32 %977 = OpFNegate %976 
                                  f32 %978 = OpFMul %977 %448 
                         Private f32* %979 = OpAccessChain %119 %88 
                                  f32 %980 = OpLoad %979 
                                  f32 %981 = OpFAdd %978 %980 
                         Private f32* %982 = OpAccessChain %249 %88 
                                               OpStore %982 %981 
                         Private i32* %983 = OpAccessChain %584 %88 
                                  i32 %984 = OpLoad %983 
                                 bool %985 = OpINotEqual %984 %32 
                                               OpSelectionMerge %988 None 
                                               OpBranchConditional %985 %987 %991 
                                      %987 = OpLabel 
                         Private f32* %989 = OpAccessChain %119 %88 
                                  f32 %990 = OpLoad %989 
                                               OpStore %986 %990 
                                               OpBranch %988 
                                      %991 = OpLabel 
                         Private f32* %992 = OpAccessChain %249 %88 
                                  f32 %993 = OpLoad %992 
                                               OpStore %986 %993 
                                               OpBranch %988 
                                      %988 = OpLabel 
                                  f32 %994 = OpLoad %986 
                         Private f32* %995 = OpAccessChain %119 %88 
                                               OpStore %995 %994 
                                  f32 %996 = OpLoad %56 
                                  f32 %997 = OpFNegate %996 
                                  f32 %998 = OpFMul %997 %448 
                         Private f32* %999 = OpAccessChain %119 %358 
                                 f32 %1000 = OpLoad %999 
                                 f32 %1001 = OpFAdd %998 %1000 
                        Private f32* %1002 = OpAccessChain %207 %88 
                                               OpStore %1002 %1001 
                        Private i32* %1003 = OpAccessChain %584 %358 
                                 i32 %1004 = OpLoad %1003 
                                bool %1005 = OpINotEqual %1004 %32 
                                               OpSelectionMerge %1008 None 
                                               OpBranchConditional %1005 %1007 %1011 
                                     %1007 = OpLabel 
                        Private f32* %1009 = OpAccessChain %119 %358 
                                 f32 %1010 = OpLoad %1009 
                                               OpStore %1006 %1010 
                                               OpBranch %1008 
                                     %1011 = OpLabel 
                        Private f32* %1012 = OpAccessChain %207 %88 
                                 f32 %1013 = OpLoad %1012 
                                               OpStore %1006 %1013 
                                               OpBranch %1008 
                                     %1008 = OpLabel 
                                 f32 %1014 = OpLoad %1006 
                        Private f32* %1015 = OpAccessChain %119 %358 
                                               OpStore %1015 %1014 
                               f32_2 %1016 = OpLoad %119 
                               f32_4 %1017 = OpVectorShuffle %1016 %1016 0 1 0 1 
                               f32_4 %1018 = OpExtInst %1 4 %1017 
                               f32_3 %1019 = OpLoad %78 
                               f32_4 %1020 = OpVectorShuffle %1019 %1019 0 0 0 0 
                              bool_4 %1021 = OpFOrdGreaterThanEqual %1018 %1020 
                              bool_2 %1022 = OpVectorShuffle %1021 %1021 0 1 
                               u32_2 %1023 = OpSelect %1022 %596 %595 
                               u32_2 %1024 = OpCompositeConstruct %567 %567 
                               u32_2 %1025 = OpIMul %1023 %1024 
                               i32_2 %1026 = OpBitcast %1025 
                                               OpStore %584 %1026 
                        Private f32* %1027 = OpAccessChain %100 %88 
                                 f32 %1028 = OpLoad %1027 
                                 f32 %1029 = OpFNegate %1028 
                                 f32 %1031 = OpFMul %1029 %1030 
                        Private f32* %1032 = OpAccessChain %237 %88 
                                 f32 %1033 = OpLoad %1032 
                                 f32 %1034 = OpFAdd %1031 %1033 
                        Private f32* %1035 = OpAccessChain %249 %88 
                                               OpStore %1035 %1034 
                        Private i32* %1036 = OpAccessChain %584 %88 
                                 i32 %1037 = OpLoad %1036 
                                bool %1038 = OpINotEqual %1037 %32 
                                               OpSelectionMerge %1041 None 
                                               OpBranchConditional %1038 %1040 %1044 
                                     %1040 = OpLabel 
                        Private f32* %1042 = OpAccessChain %237 %88 
                                 f32 %1043 = OpLoad %1042 
                                               OpStore %1039 %1043 
                                               OpBranch %1041 
                                     %1044 = OpLabel 
                        Private f32* %1045 = OpAccessChain %249 %88 
                                 f32 %1046 = OpLoad %1045 
                                               OpStore %1039 %1046 
                                               OpBranch %1041 
                                     %1041 = OpLabel 
                                 f32 %1047 = OpLoad %1039 
                        Private f32* %1048 = OpAccessChain %237 %88 
                                               OpStore %1048 %1047 
                        Private f32* %1049 = OpAccessChain %100 %358 
                                 f32 %1050 = OpLoad %1049 
                                 f32 %1051 = OpFNegate %1050 
                                 f32 %1052 = OpFMul %1051 %1030 
                        Private f32* %1053 = OpAccessChain %237 %642 
                                 f32 %1054 = OpLoad %1053 
                                 f32 %1055 = OpFAdd %1052 %1054 
                        Private f32* %1056 = OpAccessChain %249 %88 
                                               OpStore %1056 %1055 
                        Private i32* %1057 = OpAccessChain %584 %88 
                                 i32 %1058 = OpLoad %1057 
                                bool %1059 = OpINotEqual %1058 %32 
                                               OpSelectionMerge %1062 None 
                                               OpBranchConditional %1059 %1061 %1065 
                                     %1061 = OpLabel 
                        Private f32* %1063 = OpAccessChain %237 %642 
                                 f32 %1064 = OpLoad %1063 
                                               OpStore %1060 %1064 
                                               OpBranch %1062 
                                     %1065 = OpLabel 
                        Private f32* %1066 = OpAccessChain %249 %88 
                                 f32 %1067 = OpLoad %1066 
                                               OpStore %1060 %1067 
                                               OpBranch %1062 
                                     %1062 = OpLabel 
                                 f32 %1068 = OpLoad %1060 
                        Private f32* %1069 = OpAccessChain %237 %642 
                                               OpStore %1069 %1068 
                               i32_2 %1070 = OpLoad %584 
                               i32_2 %1071 = OpNot %1070 
                               i32_3 %1072 = OpLoad %646 
                               i32_3 %1073 = OpVectorShuffle %1072 %1071 3 1 4 
                                               OpStore %646 %1073 
                        Private i32* %1074 = OpAccessChain %646 %642 
                                 i32 %1075 = OpLoad %1074 
                                 u32 %1076 = OpBitcast %1075 
                        Private i32* %1077 = OpAccessChain %646 %88 
                                 i32 %1078 = OpLoad %1077 
                                 u32 %1079 = OpBitcast %1078 
                                 u32 %1080 = OpBitwiseOr %1076 %1079 
                                 i32 %1081 = OpBitcast %1080 
                        Private i32* %1082 = OpAccessChain %646 %88 
                                               OpStore %1082 %1081 
                        Private f32* %1083 = OpAccessChain %100 %88 
                                 f32 %1084 = OpLoad %1083 
                                 f32 %1085 = OpFMul %1084 %1030 
                        Private f32* %1086 = OpAccessChain %484 %88 
                                 f32 %1087 = OpLoad %1086 
                                 f32 %1088 = OpFAdd %1085 %1087 
                                               OpStore %623 %1088 
                        Private i32* %1089 = OpAccessChain %584 %358 
                                 i32 %1090 = OpLoad %1089 
                                bool %1091 = OpINotEqual %1090 %32 
                                               OpSelectionMerge %1094 None 
                                               OpBranchConditional %1091 %1093 %1097 
                                     %1093 = OpLabel 
                        Private f32* %1095 = OpAccessChain %484 %88 
                                 f32 %1096 = OpLoad %1095 
                                               OpStore %1092 %1096 
                                               OpBranch %1094 
                                     %1097 = OpLabel 
                                 f32 %1098 = OpLoad %623 
                                               OpStore %1092 %1098 
                                               OpBranch %1094 
                                     %1094 = OpLabel 
                                 f32 %1099 = OpLoad %1092 
                        Private f32* %1100 = OpAccessChain %484 %88 
                                               OpStore %1100 %1099 
                        Private f32* %1101 = OpAccessChain %100 %358 
                                 f32 %1102 = OpLoad %1101 
                                 f32 %1103 = OpFMul %1102 %1030 
                        Private f32* %1104 = OpAccessChain %484 %642 
                                 f32 %1105 = OpLoad %1104 
                                 f32 %1106 = OpFAdd %1103 %1105 
                                               OpStore %623 %1106 
                        Private i32* %1107 = OpAccessChain %584 %358 
                                 i32 %1108 = OpLoad %1107 
                                bool %1109 = OpINotEqual %1108 %32 
                                               OpSelectionMerge %1112 None 
                                               OpBranchConditional %1109 %1111 %1115 
                                     %1111 = OpLabel 
                        Private f32* %1113 = OpAccessChain %484 %642 
                                 f32 %1114 = OpLoad %1113 
                                               OpStore %1110 %1114 
                                               OpBranch %1112 
                                     %1115 = OpLabel 
                                 f32 %1116 = OpLoad %623 
                                               OpStore %1110 %1116 
                                               OpBranch %1112 
                                     %1112 = OpLabel 
                                 f32 %1117 = OpLoad %1110 
                        Private f32* %1118 = OpAccessChain %484 %642 
                                               OpStore %1118 %1117 
                        Private i32* %1119 = OpAccessChain %646 %88 
                                 i32 %1120 = OpLoad %1119 
                                bool %1121 = OpINotEqual %1120 %32 
                                               OpSelectionMerge %1123 None 
                                               OpBranchConditional %1121 %1122 %1123 
                                     %1122 = OpLabel 
                        Private i32* %1124 = OpAccessChain %584 %88 
                                 i32 %1125 = OpLoad %1124 
                                bool %1126 = OpIEqual %1125 %32 
                                               OpSelectionMerge %1128 None 
                                               OpBranchConditional %1126 %1127 %1128 
                                     %1127 = OpLabel 
                               f32_3 %1129 = OpLoad %237 
                               f32_2 %1130 = OpVectorShuffle %1129 %1129 0 2 
                               f32_3 %1131 = OpLoad %249 
                               f32_3 %1132 = OpVectorShuffle %1131 %1130 3 1 4 
                                               OpStore %249 %1132 
                               f32_3 %1133 = OpLoad %249 
                               f32_2 %1134 = OpVectorShuffle %1133 %1133 0 2 
                               f32_2 %1135 = OpCompositeConstruct %18 %18 
                               f32_2 %1136 = OpCompositeConstruct %19 %19 
                               f32_2 %1137 = OpExtInst %1 43 %1134 %1135 %1136 
                               f32_3 %1138 = OpLoad %249 
                               f32_3 %1139 = OpVectorShuffle %1138 %1137 3 1 4 
                                               OpStore %249 %1139 
                               f32_3 %1140 = OpLoad %249 
                               f32_2 %1141 = OpVectorShuffle %1140 %1140 0 2 
                        Uniform f32* %1142 = OpAccessChain %30 %32 
                                 f32 %1143 = OpLoad %1142 
                               f32_2 %1144 = OpCompositeConstruct %1143 %1143 
                               f32_2 %1145 = OpFMul %1141 %1144 
                               f32_3 %1146 = OpLoad %249 
                               f32_3 %1147 = OpVectorShuffle %1146 %1145 3 1 4 
                                               OpStore %249 %1147 
                 read_only Texture2D %1148 = OpLoad %44 
                             sampler %1149 = OpLoad %48 
          read_only Texture2DSampled %1150 = OpSampledImage %1148 %1149 
                               f32_3 %1151 = OpLoad %249 
                               f32_2 %1152 = OpVectorShuffle %1151 %1151 0 2 
                               f32_4 %1153 = OpImageSampleExplicitLod %1150 %1152 Lod %27 
                                 f32 %1154 = OpCompositeExtract %1153 3 
                        Private f32* %1155 = OpAccessChain %119 %88 
                                               OpStore %1155 %1154 
                                               OpBranch %1128 
                                     %1128 = OpLabel 
                        Private i32* %1156 = OpAccessChain %584 %358 
                                 i32 %1157 = OpLoad %1156 
                                bool %1158 = OpIEqual %1157 %32 
                                               OpSelectionMerge %1160 None 
                                               OpBranchConditional %1158 %1159 %1160 
                                     %1159 = OpLabel 
                               f32_3 %1161 = OpLoad %484 
                               f32_2 %1162 = OpVectorShuffle %1161 %1161 0 2 
                               f32_3 %1163 = OpLoad %249 
                               f32_3 %1164 = OpVectorShuffle %1163 %1162 3 1 4 
                                               OpStore %249 %1164 
                               f32_3 %1165 = OpLoad %249 
                               f32_2 %1166 = OpVectorShuffle %1165 %1165 0 2 
                               f32_2 %1167 = OpCompositeConstruct %18 %18 
                               f32_2 %1168 = OpCompositeConstruct %19 %19 
                               f32_2 %1169 = OpExtInst %1 43 %1166 %1167 %1168 
                               f32_3 %1170 = OpLoad %249 
                               f32_3 %1171 = OpVectorShuffle %1170 %1169 3 1 4 
                                               OpStore %249 %1171 
                               f32_3 %1172 = OpLoad %249 
                               f32_2 %1173 = OpVectorShuffle %1172 %1172 0 2 
                        Uniform f32* %1174 = OpAccessChain %30 %32 
                                 f32 %1175 = OpLoad %1174 
                               f32_2 %1176 = OpCompositeConstruct %1175 %1175 
                               f32_2 %1177 = OpFMul %1173 %1176 
                               f32_3 %1178 = OpLoad %249 
                               f32_3 %1179 = OpVectorShuffle %1178 %1177 3 1 4 
                                               OpStore %249 %1179 
                 read_only Texture2D %1180 = OpLoad %44 
                             sampler %1181 = OpLoad %48 
          read_only Texture2DSampled %1182 = OpSampledImage %1180 %1181 
                               f32_3 %1183 = OpLoad %249 
                               f32_2 %1184 = OpVectorShuffle %1183 %1183 0 2 
                               f32_4 %1185 = OpImageSampleExplicitLod %1182 %1184 Lod %27 
                                 f32 %1186 = OpCompositeExtract %1185 3 
                        Private f32* %1187 = OpAccessChain %119 %358 
                                               OpStore %1187 %1186 
                                               OpBranch %1160 
                                     %1160 = OpLabel 
                                 f32 %1188 = OpLoad %56 
                                 f32 %1189 = OpFNegate %1188 
                                 f32 %1190 = OpFMul %1189 %448 
                        Private f32* %1191 = OpAccessChain %119 %88 
                                 f32 %1192 = OpLoad %1191 
                                 f32 %1193 = OpFAdd %1190 %1192 
                        Private f32* %1194 = OpAccessChain %249 %88 
                                               OpStore %1194 %1193 
                        Private i32* %1195 = OpAccessChain %584 %88 
                                 i32 %1196 = OpLoad %1195 
                                bool %1197 = OpINotEqual %1196 %32 
                                               OpSelectionMerge %1200 None 
                                               OpBranchConditional %1197 %1199 %1203 
                                     %1199 = OpLabel 
                        Private f32* %1201 = OpAccessChain %119 %88 
                                 f32 %1202 = OpLoad %1201 
                                               OpStore %1198 %1202 
                                               OpBranch %1200 
                                     %1203 = OpLabel 
                        Private f32* %1204 = OpAccessChain %249 %88 
                                 f32 %1205 = OpLoad %1204 
                                               OpStore %1198 %1205 
                                               OpBranch %1200 
                                     %1200 = OpLabel 
                                 f32 %1206 = OpLoad %1198 
                        Private f32* %1207 = OpAccessChain %119 %88 
                                               OpStore %1207 %1206 
                                 f32 %1208 = OpLoad %56 
                                 f32 %1209 = OpFNegate %1208 
                                 f32 %1210 = OpFMul %1209 %448 
                        Private f32* %1211 = OpAccessChain %119 %358 
                                 f32 %1212 = OpLoad %1211 
                                 f32 %1213 = OpFAdd %1210 %1212 
                                               OpStore %56 %1213 
                        Private i32* %1214 = OpAccessChain %584 %358 
                                 i32 %1215 = OpLoad %1214 
                                bool %1216 = OpINotEqual %1215 %32 
                                               OpSelectionMerge %1219 None 
                                               OpBranchConditional %1216 %1218 %1222 
                                     %1218 = OpLabel 
                        Private f32* %1220 = OpAccessChain %119 %358 
                                 f32 %1221 = OpLoad %1220 
                                               OpStore %1217 %1221 
                                               OpBranch %1219 
                                     %1222 = OpLabel 
                                 f32 %1223 = OpLoad %56 
                                               OpStore %1217 %1223 
                                               OpBranch %1219 
                                     %1219 = OpLabel 
                                 f32 %1224 = OpLoad %1217 
                        Private f32* %1225 = OpAccessChain %119 %358 
                                               OpStore %1225 %1224 
                               f32_2 %1228 = OpLoad %119 
                               f32_4 %1229 = OpVectorShuffle %1228 %1228 0 1 0 1 
                               f32_4 %1230 = OpExtInst %1 4 %1229 
                               f32_3 %1231 = OpLoad %78 
                               f32_4 %1232 = OpVectorShuffle %1231 %1231 0 0 0 0 
                              bool_4 %1233 = OpFOrdGreaterThanEqual %1230 %1232 
                              bool_2 %1234 = OpVectorShuffle %1233 %1233 0 1 
                                               OpStore %1227 %1234 
                        Private f32* %1235 = OpAccessChain %100 %88 
                                 f32 %1236 = OpLoad %1235 
                                 f32 %1237 = OpFNegate %1236 
                                 f32 %1239 = OpFMul %1237 %1238 
                        Private f32* %1240 = OpAccessChain %237 %88 
                                 f32 %1241 = OpLoad %1240 
                                 f32 %1242 = OpFAdd %1239 %1241 
                                               OpStore %56 %1242 
                       Private bool* %1243 = OpAccessChain %1227 %88 
                                bool %1244 = OpLoad %1243 
                                               OpSelectionMerge %1247 None 
                                               OpBranchConditional %1244 %1246 %1250 
                                     %1246 = OpLabel 
                        Private f32* %1248 = OpAccessChain %237 %88 
                                 f32 %1249 = OpLoad %1248 
                                               OpStore %1245 %1249 
                                               OpBranch %1247 
                                     %1250 = OpLabel 
                                 f32 %1251 = OpLoad %56 
                                               OpStore %1245 %1251 
                                               OpBranch %1247 
                                     %1247 = OpLabel 
                                 f32 %1252 = OpLoad %1245 
                        Private f32* %1253 = OpAccessChain %237 %88 
                                               OpStore %1253 %1252 
                        Private f32* %1254 = OpAccessChain %100 %358 
                                 f32 %1255 = OpLoad %1254 
                                 f32 %1256 = OpFNegate %1255 
                                 f32 %1257 = OpFMul %1256 %1238 
                        Private f32* %1258 = OpAccessChain %237 %642 
                                 f32 %1259 = OpLoad %1258 
                                 f32 %1260 = OpFAdd %1257 %1259 
                                               OpStore %56 %1260 
                       Private bool* %1261 = OpAccessChain %1227 %88 
                                bool %1262 = OpLoad %1261 
                                               OpSelectionMerge %1265 None 
                                               OpBranchConditional %1262 %1264 %1268 
                                     %1264 = OpLabel 
                        Private f32* %1266 = OpAccessChain %237 %642 
                                 f32 %1267 = OpLoad %1266 
                                               OpStore %1263 %1267 
                                               OpBranch %1265 
                                     %1268 = OpLabel 
                                 f32 %1269 = OpLoad %56 
                                               OpStore %1263 %1269 
                                               OpBranch %1265 
                                     %1265 = OpLabel 
                                 f32 %1270 = OpLoad %1263 
                        Private f32* %1271 = OpAccessChain %237 %642 
                                               OpStore %1271 %1270 
                        Private f32* %1272 = OpAccessChain %100 %88 
                                 f32 %1273 = OpLoad %1272 
                                 f32 %1274 = OpFMul %1273 %1238 
                        Private f32* %1275 = OpAccessChain %484 %88 
                                 f32 %1276 = OpLoad %1275 
                                 f32 %1277 = OpFAdd %1274 %1276 
                                               OpStore %56 %1277 
                       Private bool* %1278 = OpAccessChain %1227 %358 
                                bool %1279 = OpLoad %1278 
                                               OpSelectionMerge %1282 None 
                                               OpBranchConditional %1279 %1281 %1285 
                                     %1281 = OpLabel 
                        Private f32* %1283 = OpAccessChain %484 %88 
                                 f32 %1284 = OpLoad %1283 
                                               OpStore %1280 %1284 
                                               OpBranch %1282 
                                     %1285 = OpLabel 
                                 f32 %1286 = OpLoad %56 
                                               OpStore %1280 %1286 
                                               OpBranch %1282 
                                     %1282 = OpLabel 
                                 f32 %1287 = OpLoad %1280 
                        Private f32* %1288 = OpAccessChain %484 %88 
                                               OpStore %1288 %1287 
                        Private f32* %1289 = OpAccessChain %100 %358 
                                 f32 %1290 = OpLoad %1289 
                                 f32 %1291 = OpFMul %1290 %1238 
                        Private f32* %1292 = OpAccessChain %484 %642 
                                 f32 %1293 = OpLoad %1292 
                                 f32 %1294 = OpFAdd %1291 %1293 
                                               OpStore %56 %1294 
                       Private bool* %1295 = OpAccessChain %1227 %358 
                                bool %1296 = OpLoad %1295 
                                               OpSelectionMerge %1299 None 
                                               OpBranchConditional %1296 %1298 %1302 
                                     %1298 = OpLabel 
                        Private f32* %1300 = OpAccessChain %484 %642 
                                 f32 %1301 = OpLoad %1300 
                                               OpStore %1297 %1301 
                                               OpBranch %1299 
                                     %1302 = OpLabel 
                                 f32 %1303 = OpLoad %56 
                                               OpStore %1297 %1303 
                                               OpBranch %1299 
                                     %1299 = OpLabel 
                                 f32 %1304 = OpLoad %1297 
                        Private f32* %1305 = OpAccessChain %484 %642 
                                               OpStore %1305 %1304 
                                               OpBranch %1123 
                                     %1123 = OpLabel 
                                               OpBranch %911 
                                      %911 = OpLabel 
                                               OpBranch %700 
                                      %700 = OpLabel 
                        Private f32* %1306 = OpAccessChain %237 %88 
                                 f32 %1307 = OpLoad %1306 
                                 f32 %1308 = OpFNegate %1307 
                          Input f32* %1309 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %1310 = OpLoad %1309 
                                 f32 %1311 = OpFAdd %1308 %1310 
                                               OpStore %56 %1311 
                        Private f32* %1312 = OpAccessChain %237 %642 
                                 f32 %1313 = OpLoad %1312 
                                 f32 %1314 = OpFNegate %1313 
                          Input f32* %1315 = OpAccessChain vs_TEXCOORD0 %358 
                                 f32 %1316 = OpLoad %1315 
                                 f32 %1317 = OpFAdd %1314 %1316 
                        Private f32* %1318 = OpAccessChain %100 %88 
                                               OpStore %1318 %1317 
                       Private bool* %1319 = OpAccessChain %323 %88 
                                bool %1320 = OpLoad %1319 
                                               OpSelectionMerge %1323 None 
                                               OpBranchConditional %1320 %1322 %1325 
                                     %1322 = OpLabel 
                                 f32 %1324 = OpLoad %56 
                                               OpStore %1321 %1324 
                                               OpBranch %1323 
                                     %1325 = OpLabel 
                        Private f32* %1326 = OpAccessChain %100 %88 
                                 f32 %1327 = OpLoad %1326 
                                               OpStore %1321 %1327 
                                               OpBranch %1323 
                                     %1323 = OpLabel 
                                 f32 %1328 = OpLoad %1321 
                                               OpStore %56 %1328 
                               f32_3 %1329 = OpLoad %484 
                               f32_2 %1330 = OpVectorShuffle %1329 %1329 0 2 
                               f32_2 %1331 = OpLoad vs_TEXCOORD0 
                               f32_2 %1332 = OpFNegate %1331 
                               f32_2 %1333 = OpFAdd %1330 %1332 
                               f32_3 %1334 = OpLoad %78 
                               f32_3 %1335 = OpVectorShuffle %1334 %1333 3 1 4 
                                               OpStore %78 %1335 
                       Private bool* %1336 = OpAccessChain %323 %88 
                                bool %1337 = OpLoad %1336 
                                               OpSelectionMerge %1340 None 
                                               OpBranchConditional %1337 %1339 %1343 
                                     %1339 = OpLabel 
                        Private f32* %1341 = OpAccessChain %78 %88 
                                 f32 %1342 = OpLoad %1341 
                                               OpStore %1338 %1342 
                                               OpBranch %1340 
                                     %1343 = OpLabel 
                        Private f32* %1344 = OpAccessChain %78 %642 
                                 f32 %1345 = OpLoad %1344 
                                               OpStore %1338 %1345 
                                               OpBranch %1340 
                                     %1340 = OpLabel 
                                 f32 %1346 = OpLoad %1338 
                        Private f32* %1347 = OpAccessChain %78 %88 
                                               OpStore %1347 %1346 
                               f32_2 %1349 = OpLoad %119 
                               f32_4 %1350 = OpVectorShuffle %1349 %1349 0 1 0 1 
                              bool_4 %1352 = OpFOrdLessThan %1350 %1351 
                              bool_2 %1353 = OpVectorShuffle %1352 %1352 0 1 
                               u32_2 %1354 = OpSelect %1353 %596 %595 
                               u32_2 %1355 = OpCompositeConstruct %567 %567 
                               u32_2 %1356 = OpIMul %1354 %1355 
                               i32_2 %1357 = OpBitcast %1356 
                                               OpStore %1348 %1357 
                                 f32 %1358 = OpLoad %56 
                        Private f32* %1359 = OpAccessChain %78 %88 
                                 f32 %1360 = OpLoad %1359 
                                 f32 %1361 = OpFAdd %1358 %1360 
                        Private f32* %1362 = OpAccessChain %119 %88 
                                               OpStore %1362 %1361 
                                 i32 %1364 = OpLoad %564 
                               i32_4 %1366 = OpCompositeConstruct %1364 %1364 %1364 %1364 
                               i32_2 %1367 = OpLoad %1348 
                               i32_4 %1368 = OpVectorShuffle %1367 %1367 0 1 0 0 
                              bool_4 %1369 = OpINotEqual %1366 %1368 
                              bool_2 %1370 = OpVectorShuffle %1369 %1369 0 1 
                                               OpStore %1363 %1370 
                        Private f32* %1371 = OpAccessChain %119 %88 
                                 f32 %1372 = OpLoad %1371 
                                 f32 %1373 = OpFDiv %19 %1372 
                                               OpStore %106 %1373 
                                 f32 %1374 = OpLoad %56 
                        Private f32* %1375 = OpAccessChain %78 %88 
                                 f32 %1376 = OpLoad %1375 
                                bool %1377 = OpFOrdLessThan %1374 %1376 
                                               OpStore %395 %1377 
                                 f32 %1378 = OpLoad %56 
                        Private f32* %1379 = OpAccessChain %78 %88 
                                 f32 %1380 = OpLoad %1379 
                                 f32 %1381 = OpExtInst %1 37 %1378 %1380 
                                               OpStore %56 %1381 
                                bool %1383 = OpLoad %395 
                                               OpSelectionMerge %1387 None 
                                               OpBranchConditional %1383 %1386 %1390 
                                     %1386 = OpLabel 
                       Private bool* %1388 = OpAccessChain %1363 %88 
                                bool %1389 = OpLoad %1388 
                                               OpStore %1385 %1389 
                                               OpBranch %1387 
                                     %1390 = OpLabel 
                       Private bool* %1391 = OpAccessChain %1363 %358 
                                bool %1392 = OpLoad %1391 
                                               OpStore %1385 %1392 
                                               OpBranch %1387 
                                     %1387 = OpLabel 
                                bool %1393 = OpLoad %1385 
                                               OpStore %1382 %1393 
                        Private f32* %1394 = OpAccessChain %201 %88 
                                 f32 %1395 = OpLoad %1394 
                        Private f32* %1396 = OpAccessChain %201 %88 
                                 f32 %1397 = OpLoad %1396 
                                 f32 %1398 = OpFMul %1395 %1397 
                        Private f32* %1399 = OpAccessChain %201 %88 
                                               OpStore %1399 %1398 
                                 f32 %1400 = OpLoad %56 
                                 f32 %1401 = OpLoad %106 
                                 f32 %1402 = OpFNegate %1401 
                                 f32 %1403 = OpFMul %1400 %1402 
                                 f32 %1404 = OpFAdd %1403 %448 
                                               OpStore %56 %1404 
                                bool %1405 = OpLoad %1382 
                                 f32 %1406 = OpLoad %56 
                                 f32 %1407 = OpSelect %1405 %1406 %18 
                                               OpStore %56 %1407 
                        Private f32* %1408 = OpAccessChain %201 %88 
                                 f32 %1409 = OpLoad %1408 
                                 f32 %1410 = OpLoad %56 
                                 f32 %1411 = OpExtInst %1 40 %1409 %1410 
                        Private f32* %1412 = OpAccessChain %201 %88 
                                               OpStore %1412 %1411 
                               f32_3 %1413 = OpLoad %201 
                               f32_2 %1414 = OpVectorShuffle %1413 %1413 0 0 
                                 f32 %1415 = OpLoad %69 
                               f32_2 %1416 = OpCompositeConstruct %1415 %1415 
                               f32_2 %1417 = OpFMul %1414 %1416 
                               f32_2 %1418 = OpLoad vs_TEXCOORD0 
                               f32_2 %1419 = OpFAdd %1417 %1418 
                               f32_3 %1420 = OpLoad %201 
                               f32_3 %1421 = OpVectorShuffle %1420 %1419 3 4 2 
                                               OpStore %201 %1421 
                       Private bool* %1422 = OpAccessChain %323 %88 
                                bool %1423 = OpLoad %1422 
                                               OpSelectionMerge %1426 None 
                                               OpBranchConditional %1423 %1425 %1429 
                                     %1425 = OpLabel 
                          Input f32* %1427 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %1428 = OpLoad %1427 
                                               OpStore %1424 %1428 
                                               OpBranch %1426 
                                     %1429 = OpLabel 
                        Private f32* %1430 = OpAccessChain %201 %88 
                                 f32 %1431 = OpLoad %1430 
                                               OpStore %1424 %1431 
                                               OpBranch %1426 
                                     %1426 = OpLabel 
                                 f32 %1432 = OpLoad %1424 
                        Private f32* %1433 = OpAccessChain %78 %88 
                                               OpStore %1433 %1432 
                        Private f32* %1434 = OpAccessChain %78 %88 
                                 f32 %1435 = OpLoad %1434 
                                 f32 %1436 = OpExtInst %1 43 %1435 %18 %19 
                        Private f32* %1437 = OpAccessChain %78 %88 
                                               OpStore %1437 %1436 
                       Private bool* %1438 = OpAccessChain %323 %88 
                                bool %1439 = OpLoad %1438 
                                               OpSelectionMerge %1442 None 
                                               OpBranchConditional %1439 %1441 %1445 
                                     %1441 = OpLabel 
                        Private f32* %1443 = OpAccessChain %201 %358 
                                 f32 %1444 = OpLoad %1443 
                                               OpStore %1440 %1444 
                                               OpBranch %1442 
                                     %1445 = OpLabel 
                          Input f32* %1446 = OpAccessChain vs_TEXCOORD0 %358 
                                 f32 %1447 = OpLoad %1446 
                                               OpStore %1440 %1447 
                                               OpBranch %1442 
                                     %1442 = OpLabel 
                                 f32 %1448 = OpLoad %1440 
                        Private f32* %1449 = OpAccessChain %78 %358 
                                               OpStore %1449 %1448 
                        Private f32* %1450 = OpAccessChain %78 %358 
                                 f32 %1451 = OpLoad %1450 
                                 f32 %1452 = OpExtInst %1 43 %1451 %18 %19 
                        Private f32* %1453 = OpAccessChain %78 %358 
                                               OpStore %1453 %1452 
                               f32_3 %1454 = OpLoad %78 
                               f32_2 %1455 = OpVectorShuffle %1454 %1454 0 1 
                        Uniform f32* %1456 = OpAccessChain %30 %32 
                                 f32 %1457 = OpLoad %1456 
                               f32_2 %1458 = OpCompositeConstruct %1457 %1457 
                               f32_2 %1459 = OpFMul %1455 %1458 
                               f32_3 %1460 = OpLoad %9 
                               f32_3 %1461 = OpVectorShuffle %1460 %1459 3 4 2 
                                               OpStore %9 %1461 
                 read_only Texture2D %1462 = OpLoad %44 
                             sampler %1463 = OpLoad %48 
          read_only Texture2DSampled %1464 = OpSampledImage %1462 %1463 
                               f32_3 %1465 = OpLoad %9 
                               f32_2 %1466 = OpVectorShuffle %1465 %1465 0 1 
                               f32_4 %1467 = OpImageSampleExplicitLod %1464 %1466 Lod %27 
                               f32_3 %1468 = OpVectorShuffle %1467 %1467 0 1 2 
                               f32_4 %1469 = OpLoad %41 
                               f32_4 %1470 = OpVectorShuffle %1469 %1468 4 5 6 3 
                                               OpStore %41 %1470 
                                               OpBranch %165 
                                      %165 = OpLabel 
                               f32_2 %1471 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %1473 = OpAccessChain %30 %63 
                               f32_4 %1474 = OpLoad %1473 
                               f32_2 %1475 = OpVectorShuffle %1474 %1474 0 1 
                               f32_2 %1476 = OpFMul %1471 %1475 
                      Uniform f32_4* %1477 = OpAccessChain %30 %63 
                               f32_4 %1478 = OpLoad %1477 
                               f32_2 %1479 = OpVectorShuffle %1478 %1478 2 3 
                               f32_2 %1480 = OpFAdd %1476 %1479 
                               f32_3 %1481 = OpLoad %9 
                               f32_3 %1482 = OpVectorShuffle %1481 %1480 3 4 2 
                                               OpStore %9 %1482 
                 read_only Texture2D %1484 = OpLoad %1483 
                             sampler %1486 = OpLoad %1485 
          read_only Texture2DSampled %1487 = OpSampledImage %1484 %1486 
                               f32_3 %1488 = OpLoad %9 
                               f32_2 %1489 = OpVectorShuffle %1488 %1488 0 1 
                               f32_4 %1490 = OpImageSampleImplicitLod %1487 %1489 
                                 f32 %1491 = OpCompositeExtract %1490 3 
                        Private f32* %1492 = OpAccessChain %9 %88 
                                               OpStore %1492 %1491 
                        Private f32* %1493 = OpAccessChain %9 %88 
                                 f32 %1494 = OpLoad %1493 
                                 f32 %1495 = OpFMul %1494 %276 
                                 f32 %1497 = OpFAdd %1495 %1496 
                        Private f32* %1498 = OpAccessChain %9 %88 
                                               OpStore %1498 %1497 
                        Private f32* %1499 = OpAccessChain %9 %88 
                                 f32 %1500 = OpLoad %1499 
                                 f32 %1502 = OpFMul %1500 %1501 
                                 f32 %1503 = OpFAdd %1502 %448 
                        Private f32* %1504 = OpAccessChain %201 %88 
                                               OpStore %1504 %1503 
                        Private f32* %1505 = OpAccessChain %201 %88 
                                 f32 %1506 = OpLoad %1505 
                                 f32 %1507 = OpExtInst %1 43 %1506 %18 %19 
                        Private f32* %1508 = OpAccessChain %201 %88 
                                               OpStore %1508 %1507 
                        Private f32* %1509 = OpAccessChain %201 %88 
                                 f32 %1510 = OpLoad %1509 
                                 f32 %1511 = OpFMul %1510 %276 
                                 f32 %1512 = OpFAdd %1511 %1496 
                        Private f32* %1513 = OpAccessChain %201 %88 
                                               OpStore %1513 %1512 
                        Private f32* %1514 = OpAccessChain %9 %88 
                                 f32 %1515 = OpLoad %1514 
                                 f32 %1516 = OpExtInst %1 4 %1515 
                                 f32 %1517 = OpFNegate %1516 
                                 f32 %1518 = OpFAdd %1517 %19 
                        Private f32* %1519 = OpAccessChain %9 %88 
                                               OpStore %1519 %1518 
                        Private f32* %1520 = OpAccessChain %9 %88 
                                 f32 %1521 = OpLoad %1520 
                                 f32 %1522 = OpExtInst %1 31 %1521 
                        Private f32* %1523 = OpAccessChain %9 %88 
                                               OpStore %1523 %1522 
                        Private f32* %1524 = OpAccessChain %9 %88 
                                 f32 %1525 = OpLoad %1524 
                                 f32 %1526 = OpFNegate %1525 
                                 f32 %1527 = OpFAdd %1526 %19 
                        Private f32* %1528 = OpAccessChain %9 %88 
                                               OpStore %1528 %1527 
                        Private f32* %1529 = OpAccessChain %9 %88 
                                 f32 %1530 = OpLoad %1529 
                        Private f32* %1531 = OpAccessChain %201 %88 
                                 f32 %1532 = OpLoad %1531 
                                 f32 %1533 = OpFMul %1530 %1532 
                        Private f32* %1534 = OpAccessChain %9 %88 
                                               OpStore %1534 %1533 
                               f32_4 %1535 = OpLoad %41 
                               f32_3 %1536 = OpVectorShuffle %1535 %1535 0 1 2 
                               f32_3 %1539 = OpFMul %1536 %1538 
                                               OpStore %201 %1539 
                               f32_4 %1540 = OpLoad %41 
                               f32_3 %1541 = OpVectorShuffle %1540 %1540 0 1 2 
                               f32_3 %1542 = OpExtInst %1 4 %1541 
                               f32_3 %1545 = OpExtInst %1 40 %1542 %1544 
                                               OpStore %78 %1545 
                               f32_3 %1546 = OpLoad %78 
                               f32_3 %1547 = OpExtInst %1 30 %1546 
                                               OpStore %78 %1547 
                               f32_3 %1548 = OpLoad %78 
                               f32_3 %1551 = OpFMul %1548 %1550 
                                               OpStore %78 %1551 
                               f32_3 %1552 = OpLoad %78 
                               f32_3 %1553 = OpExtInst %1 29 %1552 
                                               OpStore %78 %1553 
                               f32_3 %1554 = OpLoad %78 
                               f32_3 %1557 = OpFMul %1554 %1556 
                               f32_3 %1560 = OpFAdd %1557 %1559 
                                               OpStore %78 %1560 
                               f32_4 %1564 = OpLoad %41 
                               f32_4 %1565 = OpVectorShuffle %1564 %1564 0 1 2 0 
                              bool_4 %1566 = OpFOrdGreaterThanEqual %1563 %1565 
                              bool_3 %1567 = OpVectorShuffle %1566 %1566 0 1 2 
                                               OpStore %1561 %1567 
                               f32_3 %1570 = OpLoad %201 
                                               OpStore %1569 %1570 
                       Private bool* %1571 = OpAccessChain %1561 %88 
                                bool %1572 = OpLoad %1571 
                                               OpSelectionMerge %1575 None 
                                               OpBranchConditional %1572 %1574 %1578 
                                     %1574 = OpLabel 
                        Private f32* %1576 = OpAccessChain %201 %88 
                                 f32 %1577 = OpLoad %1576 
                                               OpStore %1573 %1577 
                                               OpBranch %1575 
                                     %1578 = OpLabel 
                        Private f32* %1579 = OpAccessChain %78 %88 
                                 f32 %1580 = OpLoad %1579 
                                               OpStore %1573 %1580 
                                               OpBranch %1575 
                                     %1575 = OpLabel 
                                 f32 %1581 = OpLoad %1573 
                       Function f32* %1582 = OpAccessChain %1569 %88 
                                               OpStore %1582 %1581 
                       Private bool* %1583 = OpAccessChain %1561 %358 
                                bool %1584 = OpLoad %1583 
                                               OpSelectionMerge %1587 None 
                                               OpBranchConditional %1584 %1586 %1590 
                                     %1586 = OpLabel 
                        Private f32* %1588 = OpAccessChain %201 %358 
                                 f32 %1589 = OpLoad %1588 
                                               OpStore %1585 %1589 
                                               OpBranch %1587 
                                     %1590 = OpLabel 
                        Private f32* %1591 = OpAccessChain %78 %358 
                                 f32 %1592 = OpLoad %1591 
                                               OpStore %1585 %1592 
                                               OpBranch %1587 
                                     %1587 = OpLabel 
                                 f32 %1593 = OpLoad %1585 
                       Function f32* %1594 = OpAccessChain %1569 %358 
                                               OpStore %1594 %1593 
                       Private bool* %1595 = OpAccessChain %1561 %642 
                                bool %1596 = OpLoad %1595 
                                               OpSelectionMerge %1599 None 
                                               OpBranchConditional %1596 %1598 %1602 
                                     %1598 = OpLabel 
                        Private f32* %1600 = OpAccessChain %201 %642 
                                 f32 %1601 = OpLoad %1600 
                                               OpStore %1597 %1601 
                                               OpBranch %1599 
                                     %1602 = OpLabel 
                        Private f32* %1603 = OpAccessChain %78 %642 
                                 f32 %1604 = OpLoad %1603 
                                               OpStore %1597 %1604 
                                               OpBranch %1599 
                                     %1599 = OpLabel 
                                 f32 %1605 = OpLoad %1597 
                       Function f32* %1606 = OpAccessChain %1569 %642 
                                               OpStore %1606 %1605 
                               f32_3 %1607 = OpLoad %1569 
                                               OpStore %201 %1607 
                               f32_3 %1608 = OpLoad %9 
                               f32_3 %1609 = OpVectorShuffle %1608 %1608 0 0 0 
                               f32_3 %1612 = OpFMul %1609 %1611 
                               f32_3 %1613 = OpLoad %201 
                               f32_3 %1614 = OpFAdd %1612 %1613 
                                               OpStore %9 %1614 
                               f32_3 %1615 = OpLoad %9 
                               f32_3 %1618 = OpFMul %1615 %1617 
                               f32_4 %1619 = OpLoad %41 
                               f32_4 %1620 = OpVectorShuffle %1619 %1618 4 5 6 3 
                                               OpStore %41 %1620 
                               f32_3 %1621 = OpLoad %9 
                               f32_3 %1624 = OpFAdd %1621 %1623 
                                               OpStore %78 %1624 
                               f32_3 %1625 = OpLoad %78 
                               f32_3 %1628 = OpFMul %1625 %1627 
                                               OpStore %78 %1628 
                               f32_3 %1629 = OpLoad %78 
                               f32_3 %1630 = OpExtInst %1 4 %1629 
                               f32_3 %1631 = OpExtInst %1 40 %1630 %1544 
                                               OpStore %78 %1631 
                               f32_3 %1632 = OpLoad %78 
                               f32_3 %1633 = OpExtInst %1 30 %1632 
                                               OpStore %78 %1633 
                               f32_3 %1634 = OpLoad %78 
                               f32_3 %1637 = OpFMul %1634 %1636 
                                               OpStore %78 %1637 
                               f32_3 %1638 = OpLoad %78 
                               f32_3 %1639 = OpExtInst %1 29 %1638 
                                               OpStore %78 %1639 
                               f32_3 %1642 = OpLoad %9 
                               f32_4 %1643 = OpVectorShuffle %1642 %1642 0 1 2 0 
                              bool_4 %1644 = OpFOrdGreaterThanEqual %1641 %1643 
                              bool_3 %1645 = OpVectorShuffle %1644 %1644 0 1 2 
                                               OpStore %323 %1645 
                       Private bool* %1648 = OpAccessChain %323 %88 
                                bool %1649 = OpLoad %1648 
                                               OpSelectionMerge %1652 None 
                                               OpBranchConditional %1649 %1651 %1655 
                                     %1651 = OpLabel 
                        Private f32* %1653 = OpAccessChain %41 %88 
                                 f32 %1654 = OpLoad %1653 
                                               OpStore %1650 %1654 
                                               OpBranch %1652 
                                     %1655 = OpLabel 
                        Private f32* %1656 = OpAccessChain %78 %88 
                                 f32 %1657 = OpLoad %1656 
                                               OpStore %1650 %1657 
                                               OpBranch %1652 
                                     %1652 = OpLabel 
                                 f32 %1658 = OpLoad %1650 
                         Output f32* %1660 = OpAccessChain %1647 %88 
                                               OpStore %1660 %1658 
                       Private bool* %1661 = OpAccessChain %323 %358 
                                bool %1662 = OpLoad %1661 
                                               OpSelectionMerge %1665 None 
                                               OpBranchConditional %1662 %1664 %1668 
                                     %1664 = OpLabel 
                        Private f32* %1666 = OpAccessChain %41 %358 
                                 f32 %1667 = OpLoad %1666 
                                               OpStore %1663 %1667 
                                               OpBranch %1665 
                                     %1668 = OpLabel 
                        Private f32* %1669 = OpAccessChain %78 %358 
                                 f32 %1670 = OpLoad %1669 
                                               OpStore %1663 %1670 
                                               OpBranch %1665 
                                     %1665 = OpLabel 
                                 f32 %1671 = OpLoad %1663 
                         Output f32* %1672 = OpAccessChain %1647 %358 
                                               OpStore %1672 %1671 
                       Private bool* %1673 = OpAccessChain %323 %642 
                                bool %1674 = OpLoad %1673 
                                               OpSelectionMerge %1677 None 
                                               OpBranchConditional %1674 %1676 %1680 
                                     %1676 = OpLabel 
                        Private f32* %1678 = OpAccessChain %41 %642 
                                 f32 %1679 = OpLoad %1678 
                                               OpStore %1675 %1679 
                                               OpBranch %1677 
                                     %1680 = OpLabel 
                        Private f32* %1681 = OpAccessChain %78 %642 
                                 f32 %1682 = OpLoad %1681 
                                               OpStore %1675 %1682 
                                               OpBranch %1677 
                                     %1677 = OpLabel 
                                 f32 %1683 = OpLoad %1675 
                         Output f32* %1684 = OpAccessChain %1647 %642 
                                               OpStore %1684 %1683 
                        Private f32* %1685 = OpAccessChain %41 %67 
                                 f32 %1686 = OpLoad %1685 
                         Output f32* %1687 = OpAccessChain %1647 %67 
                                               OpStore %1687 %1686 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %57 %64 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %39 0 Offset 39 
                                             OpMemberDecorate %39 1 Offset 39 
                                             OpDecorate %39 Block 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate vs_TEXCOORD1 Location 57 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypePointer Output %7 
                                 f32 %26 = OpConstant 3.674022E-40 
                                 f32 %27 = OpConstant 3.674022E-40 
                               f32_2 %28 = OpConstantComposite %26 %27 
                                     %32 = OpTypePointer Private %19 
                      Private f32_2* %33 = OpVariable Private 
                               f32_2 %36 = OpConstantComposite %27 %27 
                                     %39 = OpTypeStruct %6 %7 
                                     %40 = OpTypePointer Uniform %39 
       Uniform struct {f32; f32_4;}* %41 = OpVariable Uniform 
                                 i32 %42 = OpConstant 1 
                                     %43 = OpTypePointer Uniform %7 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_2 %50 = OpConstantComposite %49 %49 
                                     %56 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %59 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                       Output f32_4* %23 = OpAccessChain %13 %15 
                               f32_4 %24 = OpLoad %23 
                               f32_4 %25 = OpVectorShuffle %24 %21 4 5 2 3 
                                             OpStore %23 %25 
                       Output f32_4* %29 = OpAccessChain %13 %15 
                               f32_4 %30 = OpLoad %29 
                               f32_4 %31 = OpVectorShuffle %30 %28 0 1 4 5 
                                             OpStore %29 %31 
                               f32_3 %34 = OpLoad %18 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %37 = OpFAdd %35 %36 
                                             OpStore %33 %37 
                               f32_2 %38 = OpLoad %33 
                      Uniform f32_4* %44 = OpAccessChain %41 %42 
                               f32_4 %45 = OpLoad %44 
                               f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                               f32_2 %47 = OpFMul %38 %46 
                                             OpStore %33 %47 
                               f32_2 %48 = OpLoad %33 
                               f32_2 %51 = OpFMul %48 %50 
                      Uniform f32_4* %52 = OpAccessChain %41 %42 
                               f32_4 %53 = OpLoad %52 
                               f32_2 %54 = OpVectorShuffle %53 %53 2 3 
                               f32_2 %55 = OpFAdd %51 %54 
                                             OpStore %33 %55 
                               f32_2 %58 = OpLoad %33 
                        Uniform f32* %60 = OpAccessChain %41 %15 
                                 f32 %61 = OpLoad %60 
                               f32_2 %62 = OpCompositeConstruct %61 %61 
                               f32_2 %63 = OpFMul %58 %62 
                                             OpStore vs_TEXCOORD1 %63 
                               f32_2 %65 = OpLoad %33 
                                             OpStore vs_TEXCOORD0 %65 
                         Output f32* %67 = OpAccessChain %13 %15 %9 
                                 f32 %68 = OpLoad %67 
                                 f32 %69 = OpFNegate %68 
                         Output f32* %70 = OpAccessChain %13 %15 %9 
                                             OpStore %70 %69 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1568
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %11 %1355 %1526 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpDecorate vs_TEXCOORD0 Location 11 
                                               OpMemberDecorate %21 0 Offset 21 
                                               OpMemberDecorate %21 1 Offset 21 
                                               OpMemberDecorate %21 2 Offset 21 
                                               OpDecorate %21 Block 
                                               OpDecorate %23 DescriptorSet 23 
                                               OpDecorate %23 Binding 23 
                                               OpDecorate %36 DescriptorSet 36 
                                               OpDecorate %36 Binding 36 
                                               OpDecorate %40 DescriptorSet 40 
                                               OpDecorate %40 Binding 40 
                                               OpDecorate vs_TEXCOORD1 Location 1355 
                                               OpDecorate %1373 DescriptorSet 1373 
                                               OpDecorate %1373 Binding 1373 
                                               OpDecorate %1375 DescriptorSet 1375 
                                               OpDecorate %1375 Binding 1375 
                                               OpDecorate %1526 Location 1526 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 2 
                                        %8 = OpTypePointer Private %7 
                         Private f32_2* %9 = OpVariable Private 
                                       %10 = OpTypePointer Input %7 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %14 = OpConstant 3.674022E-40 
                                   f32 %15 = OpConstant 3.674022E-40 
                                       %20 = OpTypeVector %6 4 
                                       %21 = OpTypeStruct %6 %20 %20 
                                       %22 = OpTypePointer Uniform %21 
  Uniform struct {f32; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                       %24 = OpTypeInt 32 1 
                                   i32 %25 = OpConstant 0 
                                       %26 = OpTypePointer Uniform %6 
                                       %31 = OpTypeVector %6 3 
                                       %32 = OpTypePointer Private %31 
                        Private f32_3* %33 = OpVariable Private 
                                       %34 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %35 = OpTypePointer UniformConstant %34 
  UniformConstant read_only Texture2D* %36 = OpVariable UniformConstant 
                                       %38 = OpTypeSampler 
                                       %39 = OpTypePointer UniformConstant %38 
              UniformConstant sampler* %40 = OpVariable UniformConstant 
                                       %42 = OpTypeSampledImage %34 
                                       %47 = OpTypePointer Private %6 
                          Private f32* %48 = OpVariable Private 
                                       %53 = OpTypeVector %24 2 
                                   i32 %54 = OpConstant 1 
                                 i32_2 %55 = OpConstantComposite %25 %54 
                                       %57 = OpTypeInt 32 0 
                                   u32 %58 = OpConstant 1 
                          Private f32* %60 = OpVariable Private 
                                 i32_2 %65 = OpConstantComposite %54 %25 
                          Private f32* %68 = OpVariable Private 
                                   i32 %73 = OpConstant -1 
                                 i32_2 %74 = OpConstantComposite %25 %73 
                        Private f32_3* %77 = OpVariable Private 
                                 i32_2 %82 = OpConstantComposite %73 %25 
                                   u32 %85 = OpConstant 0 
                        Private f32_2* %87 = OpVariable Private 
                          Private f32* %93 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_3* %111 = OpVariable Private 
                                  f32 %128 = OpConstant 3.674022E-40 
                                  f32 %137 = OpConstant 3.674022E-40 
                                      %139 = OpTypeBool 
                                      %140 = OpTypePointer Private %139 
                        Private bool* %141 = OpVariable Private 
                                i32_2 %153 = OpConstantComposite %73 %73 
                                i32_2 %160 = OpConstantComposite %54 %54 
                                i32_2 %167 = OpConstantComposite %54 %73 
                                i32_2 %175 = OpConstantComposite %73 %54 
                       Private f32_3* %179 = OpVariable Private 
                       Private f32_2* %184 = OpVariable Private 
                       Private f32_2* %194 = OpVariable Private 
                                  f32 %203 = OpConstant 3.674022E-40 
                         Private f32* %216 = OpVariable Private 
                       Private f32_3* %226 = OpVariable Private 
                                  f32 %250 = OpConstant 3.674022E-40 
                        Private bool* %293 = OpVariable Private 
                                      %306 = OpTypePointer Function %6 
                                  i32 %323 = OpConstant 2 
                                  f32 %332 = OpConstant 3.674022E-40 
                        Private bool* %358 = OpVariable Private 
                                  f32 %412 = OpConstant 3.674022E-40 
                                f32_2 %413 = OpConstantComposite %412 %412 
                                      %423 = OpTypePointer Input %6 
                       Private f32_2* %449 = OpVariable Private 
                                  f32 %457 = OpConstant 3.674022E-40 
                                  f32 %507 = OpConstant 3.674022E-40 
                                      %522 = OpTypePointer Private %24 
                         Private i32* %523 = OpVariable Private 
                                  u32 %527 = OpConstant 4294967295 
                                      %544 = OpTypePointer Private %53 
                       Private i32_2* %545 = OpVariable Private 
                                      %551 = OpTypeVector %139 4 
                                      %553 = OpTypeVector %139 2 
                                      %555 = OpTypeVector %57 2 
                                u32_2 %556 = OpConstantComposite %85 %85 
                                u32_2 %557 = OpConstantComposite %58 %58 
                                  f32 %565 = OpConstant 3.674022E-40 
                                  u32 %600 = OpConstant 2 
                                      %602 = OpTypeVector %24 3 
                                      %603 = OpTypePointer Private %602 
                       Private i32_3* %604 = OpVariable Private 
                         Private i32* %609 = OpVariable Private 
                       Private f32_3* %618 = OpVariable Private 
                       Private i32_2* %794 = OpVariable Private 
                                  f32 %945 = OpConstant 3.674022E-40 
                                     %1117 = OpTypePointer Private %553 
                     Private bool_2* %1118 = OpVariable Private 
                                 f32 %1129 = OpConstant 3.674022E-40 
                      Private i32_2* %1241 = OpVariable Private 
                               f32_4 %1244 = OpConstantComposite %14 %14 %14 %14 
                     Private bool_2* %1254 = OpVariable Private 
                                     %1256 = OpTypeVector %24 4 
                       Private bool* %1270 = OpVariable Private 
                                     %1272 = OpTypePointer Function %139 
                 Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                 u32 %1358 = OpConstant 3 
                                     %1362 = OpTypePointer Uniform %20 
UniformConstant read_only Texture2D* %1373 = OpVariable UniformConstant 
            UniformConstant sampler* %1375 = OpVariable UniformConstant 
                                 f32 %1386 = OpConstant 3.674022E-40 
                                 f32 %1391 = OpConstant 3.674022E-40 
                                 f32 %1420 = OpConstant 3.674022E-40 
                               f32_3 %1421 = OpConstantComposite %1420 %1420 %1420 
                                 f32 %1425 = OpConstant 3.674022E-40 
                               f32_3 %1426 = OpConstantComposite %1425 %1425 %1425 
                                 f32 %1431 = OpConstant 3.674022E-40 
                               f32_3 %1432 = OpConstantComposite %1431 %1431 %1431 
                                 f32 %1437 = OpConstant 3.674022E-40 
                               f32_3 %1438 = OpConstantComposite %1437 %1437 %1437 
                                 f32 %1440 = OpConstant 3.674022E-40 
                               f32_3 %1441 = OpConstantComposite %1440 %1440 %1440 
                                     %1443 = OpTypeVector %139 3 
                                     %1444 = OpTypePointer Private %1443 
                     Private bool_3* %1445 = OpVariable Private 
                                 f32 %1446 = OpConstant 3.674022E-40 
                               f32_4 %1447 = OpConstantComposite %1446 %1446 %1446 %14 
                                 f32 %1490 = OpConstant 3.674022E-40 
                               f32_3 %1491 = OpConstantComposite %1490 %1490 %1490 
                                 f32 %1496 = OpConstant 3.674022E-40 
                               f32_3 %1497 = OpConstantComposite %1496 %1496 %1496 
                                 f32 %1500 = OpConstant 3.674022E-40 
                               f32_3 %1501 = OpConstantComposite %1500 %1500 %1500 
                                 f32 %1504 = OpConstant 3.674022E-40 
                               f32_3 %1505 = OpConstantComposite %1504 %1504 %1504 
                                 f32 %1513 = OpConstant 3.674022E-40 
                               f32_3 %1514 = OpConstantComposite %1513 %1513 %1513 
                     Private bool_3* %1518 = OpVariable Private 
                                 f32 %1519 = OpConstant 3.674022E-40 
                               f32_4 %1520 = OpConstantComposite %1519 %1519 %1519 %1519 
                                     %1525 = OpTypePointer Output %20 
                       Output f32_4* %1526 = OpVariable Output 
                                     %1538 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %307 = OpVariable Function 
                        Function f32* %320 = OpVariable Function 
                        Function f32* %373 = OpVariable Function 
                        Function f32* %393 = OpVariable Function 
                        Function f32* %402 = OpVariable Function 
                        Function f32* %420 = OpVariable Function 
                        Function f32* %432 = OpVariable Function 
                        Function f32* %573 = OpVariable Function 
                        Function f32* %592 = OpVariable Function 
                        Function f32* %629 = OpVariable Function 
                        Function f32* %649 = OpVariable Function 
                        Function f32* %718 = OpVariable Function 
                        Function f32* %736 = OpVariable Function 
                        Function f32* %766 = OpVariable Function 
                        Function f32* %785 = OpVariable Function 
                        Function f32* %815 = OpVariable Function 
                        Function f32* %835 = OpVariable Function 
                        Function f32* %904 = OpVariable Function 
                        Function f32* %922 = OpVariable Function 
                        Function f32* %953 = OpVariable Function 
                        Function f32* %972 = OpVariable Function 
                       Function f32* %1001 = OpVariable Function 
                       Function f32* %1021 = OpVariable Function 
                       Function f32* %1090 = OpVariable Function 
                       Function f32* %1108 = OpVariable Function 
                       Function f32* %1136 = OpVariable Function 
                       Function f32* %1154 = OpVariable Function 
                       Function f32* %1171 = OpVariable Function 
                       Function f32* %1188 = OpVariable Function 
                       Function f32* %1217 = OpVariable Function 
                       Function f32* %1233 = OpVariable Function 
                      Function bool* %1273 = OpVariable Function 
                       Function f32* %1311 = OpVariable Function 
                       Function f32* %1326 = OpVariable Function 
                       Function f32* %1454 = OpVariable Function 
                       Function f32* %1466 = OpVariable Function 
                       Function f32* %1478 = OpVariable Function 
                       Function f32* %1529 = OpVariable Function 
                       Function f32* %1542 = OpVariable Function 
                       Function f32* %1554 = OpVariable Function 
                                 f32_2 %12 = OpLoad vs_TEXCOORD0 
                                               OpStore %9 %12 
                                 f32_2 %13 = OpLoad %9 
                                 f32_2 %16 = OpCompositeConstruct %14 %14 
                                 f32_2 %17 = OpCompositeConstruct %15 %15 
                                 f32_2 %18 = OpExtInst %1 43 %13 %16 %17 
                                               OpStore %9 %18 
                                 f32_2 %19 = OpLoad %9 
                          Uniform f32* %27 = OpAccessChain %23 %25 
                                   f32 %28 = OpLoad %27 
                                 f32_2 %29 = OpCompositeConstruct %28 %28 
                                 f32_2 %30 = OpFMul %19 %29 
                                               OpStore %9 %30 
                   read_only Texture2D %37 = OpLoad %36 
                               sampler %41 = OpLoad %40 
            read_only Texture2DSampled %43 = OpSampledImage %37 %41 
                                 f32_2 %44 = OpLoad %9 
                                 f32_4 %45 = OpImageSampleExplicitLod %43 %44 Lod %20 
                                 f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                                               OpStore %33 %46 
                   read_only Texture2D %49 = OpLoad %36 
                               sampler %50 = OpLoad %40 
            read_only Texture2DSampled %51 = OpSampledImage %49 %50 
                                 f32_2 %52 = OpLoad %9 
                                 f32_4 %56 = OpImageSampleExplicitLod %51 %52 Lod %20ConstOffset %56 
                                   f32 %59 = OpCompositeExtract %56 1 
                                               OpStore %48 %59 
                   read_only Texture2D %61 = OpLoad %36 
                               sampler %62 = OpLoad %40 
            read_only Texture2DSampled %63 = OpSampledImage %61 %62 
                                 f32_2 %64 = OpLoad %9 
                                 f32_4 %66 = OpImageSampleExplicitLod %63 %64 Lod %20ConstOffset %66 
                                   f32 %67 = OpCompositeExtract %66 1 
                                               OpStore %60 %67 
                   read_only Texture2D %69 = OpLoad %36 
                               sampler %70 = OpLoad %40 
            read_only Texture2DSampled %71 = OpSampledImage %69 %70 
                                 f32_2 %72 = OpLoad %9 
                                 f32_4 %75 = OpImageSampleExplicitLod %71 %72 Lod %20ConstOffset %75 
                                   f32 %76 = OpCompositeExtract %75 1 
                                               OpStore %68 %76 
                   read_only Texture2D %78 = OpLoad %36 
                               sampler %79 = OpLoad %40 
            read_only Texture2DSampled %80 = OpSampledImage %78 %79 
                                 f32_2 %81 = OpLoad %9 
                                 f32_4 %83 = OpImageSampleExplicitLod %80 %81 Lod %20ConstOffset %83 
                                   f32 %84 = OpCompositeExtract %83 1 
                          Private f32* %86 = OpAccessChain %77 %85 
                                               OpStore %86 %84 
                          Private f32* %88 = OpAccessChain %33 %58 
                                   f32 %89 = OpLoad %88 
                                   f32 %90 = OpLoad %48 
                                   f32 %91 = OpExtInst %1 40 %89 %90 
                          Private f32* %92 = OpAccessChain %87 %85 
                                               OpStore %92 %91 
                          Private f32* %94 = OpAccessChain %33 %58 
                                   f32 %95 = OpLoad %94 
                                   f32 %96 = OpLoad %48 
                                   f32 %97 = OpExtInst %1 37 %95 %96 
                                               OpStore %93 %97 
                                   f32 %98 = OpLoad %60 
                          Private f32* %99 = OpAccessChain %87 %85 
                                  f32 %100 = OpLoad %99 
                                  f32 %101 = OpExtInst %1 40 %98 %100 
                         Private f32* %102 = OpAccessChain %87 %85 
                                               OpStore %102 %101 
                                  f32 %103 = OpLoad %60 
                                  f32 %104 = OpLoad %93 
                                  f32 %105 = OpExtInst %1 37 %103 %104 
                                               OpStore %93 %105 
                                  f32 %107 = OpLoad %68 
                         Private f32* %108 = OpAccessChain %77 %85 
                                  f32 %109 = OpLoad %108 
                                  f32 %110 = OpExtInst %1 40 %107 %109 
                                               OpStore %106 %110 
                                  f32 %112 = OpLoad %68 
                         Private f32* %113 = OpAccessChain %77 %85 
                                  f32 %114 = OpLoad %113 
                                  f32 %115 = OpExtInst %1 37 %112 %114 
                         Private f32* %116 = OpAccessChain %111 %85 
                                               OpStore %116 %115 
                         Private f32* %117 = OpAccessChain %87 %85 
                                  f32 %118 = OpLoad %117 
                                  f32 %119 = OpLoad %106 
                                  f32 %120 = OpExtInst %1 40 %118 %119 
                         Private f32* %121 = OpAccessChain %87 %85 
                                               OpStore %121 %120 
                                  f32 %122 = OpLoad %93 
                         Private f32* %123 = OpAccessChain %111 %85 
                                  f32 %124 = OpLoad %123 
                                  f32 %125 = OpExtInst %1 37 %122 %124 
                                               OpStore %93 %125 
                         Private f32* %126 = OpAccessChain %87 %85 
                                  f32 %127 = OpLoad %126 
                                  f32 %129 = OpFMul %127 %128 
                                               OpStore %106 %129 
                                  f32 %130 = OpLoad %93 
                                  f32 %131 = OpFNegate %130 
                         Private f32* %132 = OpAccessChain %87 %85 
                                  f32 %133 = OpLoad %132 
                                  f32 %134 = OpFAdd %131 %133 
                         Private f32* %135 = OpAccessChain %87 %85 
                                               OpStore %135 %134 
                                  f32 %136 = OpLoad %106 
                                  f32 %138 = OpExtInst %1 40 %136 %137 
                                               OpStore %93 %138 
                         Private f32* %142 = OpAccessChain %87 %85 
                                  f32 %143 = OpLoad %142 
                                  f32 %144 = OpLoad %93 
                                 bool %145 = OpFOrdGreaterThanEqual %143 %144 
                                               OpStore %141 %145 
                                 bool %146 = OpLoad %141 
                                               OpSelectionMerge %148 None 
                                               OpBranchConditional %146 %147 %148 
                                      %147 = OpLabel 
                  read_only Texture2D %149 = OpLoad %36 
                              sampler %150 = OpLoad %40 
           read_only Texture2DSampled %151 = OpSampledImage %149 %150 
                                f32_2 %152 = OpLoad %9 
                                f32_4 %154 = OpImageSampleExplicitLod %151 %152 Lod %20ConstOffset %154 
                                  f32 %155 = OpCompositeExtract %154 1 
                                               OpStore %93 %155 
                  read_only Texture2D %156 = OpLoad %36 
                              sampler %157 = OpLoad %40 
           read_only Texture2DSampled %158 = OpSampledImage %156 %157 
                                f32_2 %159 = OpLoad %9 
                                f32_4 %161 = OpImageSampleExplicitLod %158 %159 Lod %20ConstOffset %161 
                                  f32 %162 = OpCompositeExtract %161 1 
                                               OpStore %106 %162 
                  read_only Texture2D %163 = OpLoad %36 
                              sampler %164 = OpLoad %40 
           read_only Texture2DSampled %165 = OpSampledImage %163 %164 
                                f32_2 %166 = OpLoad %9 
                                f32_4 %168 = OpImageSampleExplicitLod %165 %166 Lod %20ConstOffset %168 
                                  f32 %169 = OpCompositeExtract %168 1 
                         Private f32* %170 = OpAccessChain %111 %85 
                                               OpStore %170 %169 
                  read_only Texture2D %171 = OpLoad %36 
                              sampler %172 = OpLoad %40 
           read_only Texture2DSampled %173 = OpSampledImage %171 %172 
                                f32_2 %174 = OpLoad %9 
                                f32_4 %176 = OpImageSampleExplicitLod %173 %174 Lod %20ConstOffset %176 
                                  f32 %177 = OpCompositeExtract %176 1 
                         Private f32* %178 = OpAccessChain %9 %85 
                                               OpStore %178 %177 
                                  f32 %180 = OpLoad %48 
                                  f32 %181 = OpLoad %68 
                                  f32 %182 = OpFAdd %180 %181 
                         Private f32* %183 = OpAccessChain %179 %85 
                                               OpStore %183 %182 
                                  f32 %185 = OpLoad %60 
                         Private f32* %186 = OpAccessChain %77 %85 
                                  f32 %187 = OpLoad %186 
                                  f32 %188 = OpFAdd %185 %187 
                         Private f32* %189 = OpAccessChain %184 %85 
                                               OpStore %189 %188 
                         Private f32* %190 = OpAccessChain %87 %85 
                                  f32 %191 = OpLoad %190 
                                  f32 %192 = OpFDiv %15 %191 
                         Private f32* %193 = OpAccessChain %87 %85 
                                               OpStore %193 %192 
                         Private f32* %195 = OpAccessChain %179 %85 
                                  f32 %196 = OpLoad %195 
                         Private f32* %197 = OpAccessChain %184 %85 
                                  f32 %198 = OpLoad %197 
                                  f32 %199 = OpFAdd %196 %198 
                         Private f32* %200 = OpAccessChain %194 %85 
                                               OpStore %200 %199 
                         Private f32* %201 = OpAccessChain %33 %58 
                                  f32 %202 = OpLoad %201 
                                  f32 %204 = OpFMul %202 %203 
                         Private f32* %205 = OpAccessChain %179 %85 
                                  f32 %206 = OpLoad %205 
                                  f32 %207 = OpFAdd %204 %206 
                         Private f32* %208 = OpAccessChain %179 %85 
                                               OpStore %208 %207 
                         Private f32* %209 = OpAccessChain %33 %58 
                                  f32 %210 = OpLoad %209 
                                  f32 %211 = OpFMul %210 %203 
                         Private f32* %212 = OpAccessChain %184 %85 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFAdd %211 %213 
                         Private f32* %215 = OpAccessChain %184 %85 
                                               OpStore %215 %214 
                                  f32 %217 = OpLoad %106 
                         Private f32* %218 = OpAccessChain %111 %85 
                                  f32 %219 = OpLoad %218 
                                  f32 %220 = OpFAdd %217 %219 
                                               OpStore %216 %220 
                                  f32 %221 = OpLoad %93 
                         Private f32* %222 = OpAccessChain %111 %85 
                                  f32 %223 = OpLoad %222 
                                  f32 %224 = OpFAdd %221 %223 
                         Private f32* %225 = OpAccessChain %111 %85 
                                               OpStore %225 %224 
                                  f32 %227 = OpLoad %60 
                                  f32 %228 = OpFMul %227 %203 
                                  f32 %229 = OpLoad %216 
                                  f32 %230 = OpFAdd %228 %229 
                         Private f32* %231 = OpAccessChain %226 %85 
                                               OpStore %231 %230 
                                  f32 %232 = OpLoad %68 
                                  f32 %233 = OpFMul %232 %203 
                         Private f32* %234 = OpAccessChain %111 %85 
                                  f32 %235 = OpLoad %234 
                                  f32 %236 = OpFAdd %233 %235 
                         Private f32* %237 = OpAccessChain %111 %85 
                                               OpStore %237 %236 
                         Private f32* %238 = OpAccessChain %9 %85 
                                  f32 %239 = OpLoad %238 
                                  f32 %240 = OpLoad %93 
                                  f32 %241 = OpFAdd %239 %240 
                                               OpStore %93 %241 
                                  f32 %242 = OpLoad %106 
                         Private f32* %243 = OpAccessChain %9 %85 
                                  f32 %244 = OpLoad %243 
                                  f32 %245 = OpFAdd %242 %244 
                         Private f32* %246 = OpAccessChain %9 %85 
                                               OpStore %246 %245 
                         Private f32* %247 = OpAccessChain %179 %85 
                                  f32 %248 = OpLoad %247 
                                  f32 %249 = OpExtInst %1 4 %248 
                                  f32 %251 = OpFMul %249 %250 
                         Private f32* %252 = OpAccessChain %226 %85 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpExtInst %1 4 %253 
                                  f32 %255 = OpFAdd %251 %254 
                         Private f32* %256 = OpAccessChain %179 %85 
                                               OpStore %256 %255 
                         Private f32* %257 = OpAccessChain %184 %85 
                                  f32 %258 = OpLoad %257 
                                  f32 %259 = OpExtInst %1 4 %258 
                                  f32 %260 = OpFMul %259 %250 
                         Private f32* %261 = OpAccessChain %111 %85 
                                  f32 %262 = OpLoad %261 
                                  f32 %263 = OpExtInst %1 4 %262 
                                  f32 %264 = OpFAdd %260 %263 
                                               OpStore %106 %264 
                         Private f32* %265 = OpAccessChain %77 %85 
                                  f32 %266 = OpLoad %265 
                                  f32 %267 = OpFMul %266 %203 
                                  f32 %268 = OpLoad %93 
                                  f32 %269 = OpFAdd %267 %268 
                         Private f32* %270 = OpAccessChain %111 %85 
                                               OpStore %270 %269 
                                  f32 %271 = OpLoad %48 
                                  f32 %272 = OpFMul %271 %203 
                         Private f32* %273 = OpAccessChain %9 %85 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpFAdd %272 %274 
                         Private f32* %276 = OpAccessChain %9 %85 
                                               OpStore %276 %275 
                         Private f32* %277 = OpAccessChain %179 %85 
                                  f32 %278 = OpLoad %277 
                         Private f32* %279 = OpAccessChain %111 %85 
                                  f32 %280 = OpLoad %279 
                                  f32 %281 = OpExtInst %1 4 %280 
                                  f32 %282 = OpFAdd %278 %281 
                         Private f32* %283 = OpAccessChain %179 %85 
                                               OpStore %283 %282 
                                  f32 %284 = OpLoad %106 
                         Private f32* %285 = OpAccessChain %9 %85 
                                  f32 %286 = OpLoad %285 
                                  f32 %287 = OpExtInst %1 4 %286 
                                  f32 %288 = OpFAdd %284 %287 
                         Private f32* %289 = OpAccessChain %9 %85 
                                               OpStore %289 %288 
                                  f32 %290 = OpLoad %216 
                                  f32 %291 = OpLoad %93 
                                  f32 %292 = OpFAdd %290 %291 
                                               OpStore %93 %292 
                         Private f32* %294 = OpAccessChain %179 %85 
                                  f32 %295 = OpLoad %294 
                         Private f32* %296 = OpAccessChain %9 %85 
                                  f32 %297 = OpLoad %296 
                                 bool %298 = OpFOrdGreaterThanEqual %295 %297 
                                               OpStore %293 %298 
                         Private f32* %299 = OpAccessChain %194 %85 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFMul %300 %250 
                                  f32 %302 = OpLoad %93 
                                  f32 %303 = OpFAdd %301 %302 
                         Private f32* %304 = OpAccessChain %179 %85 
                                               OpStore %304 %303 
                                 bool %305 = OpLoad %293 
                                               OpSelectionMerge %309 None 
                                               OpBranchConditional %305 %308 %311 
                                      %308 = OpLabel 
                                  f32 %310 = OpLoad %68 
                                               OpStore %307 %310 
                                               OpBranch %309 
                                      %311 = OpLabel 
                         Private f32* %312 = OpAccessChain %77 %85 
                                  f32 %313 = OpLoad %312 
                                               OpStore %307 %313 
                                               OpBranch %309 
                                      %309 = OpLabel 
                                  f32 %314 = OpLoad %307 
                                               OpStore %68 %314 
                                 bool %315 = OpLoad %293 
                                  f32 %316 = OpLoad %48 
                                  f32 %317 = OpLoad %60 
                                  f32 %318 = OpSelect %315 %316 %317 
                                               OpStore %48 %318 
                                 bool %319 = OpLoad %293 
                                               OpSelectionMerge %322 None 
                                               OpBranchConditional %319 %321 %326 
                                      %321 = OpLabel 
                         Uniform f32* %324 = OpAccessChain %23 %323 %58 
                                  f32 %325 = OpLoad %324 
                                               OpStore %320 %325 
                                               OpBranch %322 
                                      %326 = OpLabel 
                         Uniform f32* %327 = OpAccessChain %23 %323 %85 
                                  f32 %328 = OpLoad %327 
                                               OpStore %320 %328 
                                               OpBranch %322 
                                      %322 = OpLabel 
                                  f32 %329 = OpLoad %320 
                                               OpStore %60 %329 
                         Private f32* %330 = OpAccessChain %179 %85 
                                  f32 %331 = OpLoad %330 
                                  f32 %333 = OpFMul %331 %332 
                         Private f32* %334 = OpAccessChain %33 %58 
                                  f32 %335 = OpLoad %334 
                                  f32 %336 = OpFNegate %335 
                                  f32 %337 = OpFAdd %333 %336 
                         Private f32* %338 = OpAccessChain %179 %85 
                                               OpStore %338 %337 
                         Private f32* %339 = OpAccessChain %33 %58 
                                  f32 %340 = OpLoad %339 
                                  f32 %341 = OpFNegate %340 
                                  f32 %342 = OpLoad %68 
                                  f32 %343 = OpFAdd %341 %342 
                         Private f32* %344 = OpAccessChain %77 %85 
                                               OpStore %344 %343 
                         Private f32* %345 = OpAccessChain %33 %58 
                                  f32 %346 = OpLoad %345 
                                  f32 %347 = OpFNegate %346 
                                  f32 %348 = OpLoad %48 
                                  f32 %349 = OpFAdd %347 %348 
                                               OpStore %93 %349 
                         Private f32* %350 = OpAccessChain %33 %58 
                                  f32 %351 = OpLoad %350 
                                  f32 %352 = OpLoad %68 
                                  f32 %353 = OpFAdd %351 %352 
                                               OpStore %68 %353 
                         Private f32* %354 = OpAccessChain %33 %58 
                                  f32 %355 = OpLoad %354 
                                  f32 %356 = OpLoad %48 
                                  f32 %357 = OpFAdd %355 %356 
                                               OpStore %48 %357 
                         Private f32* %359 = OpAccessChain %77 %85 
                                  f32 %360 = OpLoad %359 
                                  f32 %361 = OpExtInst %1 4 %360 
                                  f32 %362 = OpLoad %93 
                                  f32 %363 = OpExtInst %1 4 %362 
                                 bool %364 = OpFOrdGreaterThanEqual %361 %363 
                                               OpStore %358 %364 
                                  f32 %365 = OpLoad %93 
                                  f32 %366 = OpExtInst %1 4 %365 
                         Private f32* %367 = OpAccessChain %77 %85 
                                  f32 %368 = OpLoad %367 
                                  f32 %369 = OpExtInst %1 4 %368 
                                  f32 %370 = OpExtInst %1 40 %366 %369 
                         Private f32* %371 = OpAccessChain %77 %85 
                                               OpStore %371 %370 
                                 bool %372 = OpLoad %358 
                                               OpSelectionMerge %375 None 
                                               OpBranchConditional %372 %374 %378 
                                      %374 = OpLabel 
                                  f32 %376 = OpLoad %60 
                                  f32 %377 = OpFNegate %376 
                                               OpStore %373 %377 
                                               OpBranch %375 
                                      %378 = OpLabel 
                                  f32 %379 = OpLoad %60 
                                               OpStore %373 %379 
                                               OpBranch %375 
                                      %375 = OpLabel 
                                  f32 %380 = OpLoad %373 
                                               OpStore %60 %380 
                         Private f32* %381 = OpAccessChain %87 %85 
                                  f32 %382 = OpLoad %381 
                         Private f32* %383 = OpAccessChain %179 %85 
                                  f32 %384 = OpLoad %383 
                                  f32 %385 = OpExtInst %1 4 %384 
                                  f32 %386 = OpFMul %382 %385 
                         Private f32* %387 = OpAccessChain %179 %85 
                                               OpStore %387 %386 
                         Private f32* %388 = OpAccessChain %179 %85 
                                  f32 %389 = OpLoad %388 
                                  f32 %390 = OpExtInst %1 43 %389 %14 %15 
                         Private f32* %391 = OpAccessChain %179 %85 
                                               OpStore %391 %390 
                                 bool %392 = OpLoad %293 
                                               OpSelectionMerge %395 None 
                                               OpBranchConditional %392 %394 %398 
                                      %394 = OpLabel 
                         Uniform f32* %396 = OpAccessChain %23 %323 %85 
                                  f32 %397 = OpLoad %396 
                                               OpStore %393 %397 
                                               OpBranch %395 
                                      %398 = OpLabel 
                                               OpStore %393 %14 
                                               OpBranch %395 
                                      %395 = OpLabel 
                                  f32 %399 = OpLoad %393 
                         Private f32* %400 = OpAccessChain %87 %85 
                                               OpStore %400 %399 
                                 bool %401 = OpLoad %293 
                                               OpSelectionMerge %404 None 
                                               OpBranchConditional %401 %403 %405 
                                      %403 = OpLabel 
                                               OpStore %402 %14 
                                               OpBranch %404 
                                      %405 = OpLabel 
                         Uniform f32* %406 = OpAccessChain %23 %323 %58 
                                  f32 %407 = OpLoad %406 
                                               OpStore %402 %407 
                                               OpBranch %404 
                                      %404 = OpLabel 
                                  f32 %408 = OpLoad %402 
                         Private f32* %409 = OpAccessChain %87 %58 
                                               OpStore %409 %408 
                                  f32 %410 = OpLoad %60 
                                f32_2 %411 = OpCompositeConstruct %410 %410 
                                f32_2 %414 = OpFMul %411 %413 
                                f32_2 %415 = OpLoad vs_TEXCOORD0 
                                f32_2 %416 = OpFAdd %414 %415 
                                f32_3 %417 = OpLoad %111 
                                f32_3 %418 = OpVectorShuffle %417 %416 3 4 2 
                                               OpStore %111 %418 
                                 bool %419 = OpLoad %293 
                                               OpSelectionMerge %422 None 
                                               OpBranchConditional %419 %421 %426 
                                      %421 = OpLabel 
                           Input f32* %424 = OpAccessChain vs_TEXCOORD0 %85 
                                  f32 %425 = OpLoad %424 
                                               OpStore %420 %425 
                                               OpBranch %422 
                                      %426 = OpLabel 
                         Private f32* %427 = OpAccessChain %111 %85 
                                  f32 %428 = OpLoad %427 
                                               OpStore %420 %428 
                                               OpBranch %422 
                                      %422 = OpLabel 
                                  f32 %429 = OpLoad %420 
                         Private f32* %430 = OpAccessChain %111 %85 
                                               OpStore %430 %429 
                                 bool %431 = OpLoad %293 
                                               OpSelectionMerge %434 None 
                                               OpBranchConditional %431 %433 %437 
                                      %433 = OpLabel 
                         Private f32* %435 = OpAccessChain %111 %58 
                                  f32 %436 = OpLoad %435 
                                               OpStore %432 %436 
                                               OpBranch %434 
                                      %437 = OpLabel 
                           Input f32* %438 = OpAccessChain vs_TEXCOORD0 %58 
                                  f32 %439 = OpLoad %438 
                                               OpStore %432 %439 
                                               OpBranch %434 
                                      %434 = OpLabel 
                                  f32 %440 = OpLoad %432 
                         Private f32* %441 = OpAccessChain %111 %58 
                                               OpStore %441 %440 
                                f32_2 %442 = OpLoad %87 
                                f32_2 %443 = OpFNegate %442 
                                f32_3 %444 = OpLoad %111 
                                f32_2 %445 = OpVectorShuffle %444 %444 0 1 
                                f32_2 %446 = OpFAdd %443 %445 
                                f32_3 %447 = OpLoad %226 
                                f32_3 %448 = OpVectorShuffle %447 %446 3 4 2 
                                               OpStore %226 %448 
                                f32_2 %450 = OpLoad %87 
                                f32_3 %451 = OpLoad %111 
                                f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                f32_2 %453 = OpFAdd %450 %452 
                                               OpStore %449 %453 
                         Private f32* %454 = OpAccessChain %179 %85 
                                  f32 %455 = OpLoad %454 
                                  f32 %456 = OpFMul %455 %203 
                                  f32 %458 = OpFAdd %456 %457 
                         Private f32* %459 = OpAccessChain %111 %85 
                                               OpStore %459 %458 
                                f32_3 %460 = OpLoad %226 
                                f32_2 %461 = OpVectorShuffle %460 %460 0 1 
                                               OpStore %184 %461 
                                f32_2 %462 = OpLoad %184 
                                f32_2 %463 = OpCompositeConstruct %14 %14 
                                f32_2 %464 = OpCompositeConstruct %15 %15 
                                f32_2 %465 = OpExtInst %1 43 %462 %463 %464 
                                               OpStore %184 %465 
                                f32_2 %466 = OpLoad %184 
                         Uniform f32* %467 = OpAccessChain %23 %25 
                                  f32 %468 = OpLoad %467 
                                f32_2 %469 = OpCompositeConstruct %468 %468 
                                f32_2 %470 = OpFMul %466 %469 
                                               OpStore %184 %470 
                  read_only Texture2D %471 = OpLoad %36 
                              sampler %472 = OpLoad %40 
           read_only Texture2DSampled %473 = OpSampledImage %471 %472 
                                f32_2 %474 = OpLoad %184 
                                f32_4 %475 = OpImageSampleExplicitLod %473 %474 Lod %20 
                                  f32 %476 = OpCompositeExtract %475 1 
                         Private f32* %477 = OpAccessChain %184 %85 
                                               OpStore %477 %476 
                         Private f32* %478 = OpAccessChain %179 %85 
                                  f32 %479 = OpLoad %478 
                         Private f32* %480 = OpAccessChain %179 %85 
                                  f32 %481 = OpLoad %480 
                                  f32 %482 = OpFMul %479 %481 
                         Private f32* %483 = OpAccessChain %179 %85 
                                               OpStore %483 %482 
                                f32_2 %484 = OpLoad %449 
                                               OpStore %194 %484 
                                f32_2 %485 = OpLoad %194 
                                f32_2 %486 = OpCompositeConstruct %14 %14 
                                f32_2 %487 = OpCompositeConstruct %15 %15 
                                f32_2 %488 = OpExtInst %1 43 %485 %486 %487 
                                               OpStore %194 %488 
                                f32_2 %489 = OpLoad %194 
                         Uniform f32* %490 = OpAccessChain %23 %25 
                                  f32 %491 = OpLoad %490 
                                f32_2 %492 = OpCompositeConstruct %491 %491 
                                f32_2 %493 = OpFMul %489 %492 
                                               OpStore %194 %493 
                  read_only Texture2D %494 = OpLoad %36 
                              sampler %495 = OpLoad %40 
           read_only Texture2DSampled %496 = OpSampledImage %494 %495 
                                f32_2 %497 = OpLoad %194 
                                f32_4 %498 = OpImageSampleExplicitLod %496 %497 Lod %20 
                                  f32 %499 = OpCompositeExtract %498 1 
                         Private f32* %500 = OpAccessChain %194 %85 
                                               OpStore %500 %499 
                                 bool %501 = OpLoad %358 
                                  f32 %502 = OpLoad %68 
                                  f32 %503 = OpLoad %48 
                                  f32 %504 = OpSelect %501 %502 %503 
                                               OpStore %48 %504 
                         Private f32* %505 = OpAccessChain %77 %85 
                                  f32 %506 = OpLoad %505 
                                  f32 %508 = OpFMul %506 %507 
                                               OpStore %68 %508 
                                  f32 %509 = OpLoad %48 
                                  f32 %510 = OpFNegate %509 
                                  f32 %511 = OpFMul %510 %412 
                         Private f32* %512 = OpAccessChain %33 %58 
                                  f32 %513 = OpLoad %512 
                                  f32 %514 = OpFAdd %511 %513 
                         Private f32* %515 = OpAccessChain %77 %85 
                                               OpStore %515 %514 
                         Private f32* %516 = OpAccessChain %179 %85 
                                  f32 %517 = OpLoad %516 
                         Private f32* %518 = OpAccessChain %111 %85 
                                  f32 %519 = OpLoad %518 
                                  f32 %520 = OpFMul %517 %519 
                         Private f32* %521 = OpAccessChain %179 %85 
                                               OpStore %521 %520 
                         Private f32* %524 = OpAccessChain %77 %85 
                                  f32 %525 = OpLoad %524 
                                 bool %526 = OpFOrdLessThan %525 %14 
                                  u32 %528 = OpSelect %526 %527 %85 
                                  i32 %529 = OpBitcast %528 
                                               OpStore %523 %529 
                                  f32 %530 = OpLoad %48 
                                  f32 %531 = OpFNegate %530 
                                  f32 %532 = OpFMul %531 %412 
                         Private f32* %533 = OpAccessChain %184 %85 
                                  f32 %534 = OpLoad %533 
                                  f32 %535 = OpFAdd %532 %534 
                         Private f32* %536 = OpAccessChain %111 %85 
                                               OpStore %536 %535 
                                  f32 %537 = OpLoad %48 
                                  f32 %538 = OpFNegate %537 
                                  f32 %539 = OpFMul %538 %412 
                         Private f32* %540 = OpAccessChain %194 %85 
                                  f32 %541 = OpLoad %540 
                                  f32 %542 = OpFAdd %539 %541 
                         Private f32* %543 = OpAccessChain %111 %58 
                                               OpStore %543 %542 
                                f32_3 %546 = OpLoad %111 
                                f32_4 %547 = OpVectorShuffle %546 %546 0 1 0 1 
                                f32_4 %548 = OpExtInst %1 4 %547 
                                  f32 %549 = OpLoad %68 
                                f32_4 %550 = OpCompositeConstruct %549 %549 %549 %549 
                               bool_4 %552 = OpFOrdGreaterThanEqual %548 %550 
                               bool_2 %554 = OpVectorShuffle %552 %552 0 1 
                                u32_2 %558 = OpSelect %554 %557 %556 
                                u32_2 %559 = OpCompositeConstruct %527 %527 
                                u32_2 %560 = OpIMul %558 %559 
                                i32_2 %561 = OpBitcast %560 
                                               OpStore %545 %561 
                         Private f32* %562 = OpAccessChain %87 %85 
                                  f32 %563 = OpLoad %562 
                                  f32 %564 = OpFNegate %563 
                                  f32 %566 = OpFMul %564 %565 
                         Private f32* %567 = OpAccessChain %226 %85 
                                  f32 %568 = OpLoad %567 
                                  f32 %569 = OpFAdd %566 %568 
                                               OpStore %106 %569 
                         Private i32* %570 = OpAccessChain %545 %85 
                                  i32 %571 = OpLoad %570 
                                 bool %572 = OpINotEqual %571 %25 
                                               OpSelectionMerge %575 None 
                                               OpBranchConditional %572 %574 %578 
                                      %574 = OpLabel 
                         Private f32* %576 = OpAccessChain %226 %85 
                                  f32 %577 = OpLoad %576 
                                               OpStore %573 %577 
                                               OpBranch %575 
                                      %578 = OpLabel 
                                  f32 %579 = OpLoad %106 
                                               OpStore %573 %579 
                                               OpBranch %575 
                                      %575 = OpLabel 
                                  f32 %580 = OpLoad %573 
                         Private f32* %581 = OpAccessChain %226 %85 
                                               OpStore %581 %580 
                         Private f32* %582 = OpAccessChain %87 %58 
                                  f32 %583 = OpLoad %582 
                                  f32 %584 = OpFNegate %583 
                                  f32 %585 = OpFMul %584 %565 
                         Private f32* %586 = OpAccessChain %226 %58 
                                  f32 %587 = OpLoad %586 
                                  f32 %588 = OpFAdd %585 %587 
                                               OpStore %106 %588 
                         Private i32* %589 = OpAccessChain %545 %85 
                                  i32 %590 = OpLoad %589 
                                 bool %591 = OpINotEqual %590 %25 
                                               OpSelectionMerge %594 None 
                                               OpBranchConditional %591 %593 %597 
                                      %593 = OpLabel 
                         Private f32* %595 = OpAccessChain %226 %58 
                                  f32 %596 = OpLoad %595 
                                               OpStore %592 %596 
                                               OpBranch %594 
                                      %597 = OpLabel 
                                  f32 %598 = OpLoad %106 
                                               OpStore %592 %598 
                                               OpBranch %594 
                                      %594 = OpLabel 
                                  f32 %599 = OpLoad %592 
                         Private f32* %601 = OpAccessChain %226 %600 
                                               OpStore %601 %599 
                                i32_2 %605 = OpLoad %545 
                                i32_2 %606 = OpNot %605 
                                i32_3 %607 = OpLoad %604 
                                i32_3 %608 = OpVectorShuffle %607 %606 3 1 4 
                                               OpStore %604 %608 
                         Private i32* %610 = OpAccessChain %604 %600 
                                  i32 %611 = OpLoad %610 
                                  u32 %612 = OpBitcast %611 
                         Private i32* %613 = OpAccessChain %604 %85 
                                  i32 %614 = OpLoad %613 
                                  u32 %615 = OpBitcast %614 
                                  u32 %616 = OpBitwiseOr %612 %615 
                                  i32 %617 = OpBitcast %616 
                                               OpStore %609 %617 
                         Private f32* %619 = OpAccessChain %87 %85 
                                  f32 %620 = OpLoad %619 
                                  f32 %621 = OpFMul %620 %565 
                         Private f32* %622 = OpAccessChain %449 %85 
                                  f32 %623 = OpLoad %622 
                                  f32 %624 = OpFAdd %621 %623 
                         Private f32* %625 = OpAccessChain %618 %85 
                                               OpStore %625 %624 
                         Private i32* %626 = OpAccessChain %545 %58 
                                  i32 %627 = OpLoad %626 
                                 bool %628 = OpINotEqual %627 %25 
                                               OpSelectionMerge %631 None 
                                               OpBranchConditional %628 %630 %634 
                                      %630 = OpLabel 
                         Private f32* %632 = OpAccessChain %449 %85 
                                  f32 %633 = OpLoad %632 
                                               OpStore %629 %633 
                                               OpBranch %631 
                                      %634 = OpLabel 
                         Private f32* %635 = OpAccessChain %618 %85 
                                  f32 %636 = OpLoad %635 
                                               OpStore %629 %636 
                                               OpBranch %631 
                                      %631 = OpLabel 
                                  f32 %637 = OpLoad %629 
                         Private f32* %638 = OpAccessChain %618 %85 
                                               OpStore %638 %637 
                         Private f32* %639 = OpAccessChain %87 %58 
                                  f32 %640 = OpLoad %639 
                                  f32 %641 = OpFMul %640 %565 
                         Private f32* %642 = OpAccessChain %449 %58 
                                  f32 %643 = OpLoad %642 
                                  f32 %644 = OpFAdd %641 %643 
                         Private f32* %645 = OpAccessChain %449 %85 
                                               OpStore %645 %644 
                         Private i32* %646 = OpAccessChain %545 %58 
                                  i32 %647 = OpLoad %646 
                                 bool %648 = OpINotEqual %647 %25 
                                               OpSelectionMerge %651 None 
                                               OpBranchConditional %648 %650 %654 
                                      %650 = OpLabel 
                         Private f32* %652 = OpAccessChain %449 %58 
                                  f32 %653 = OpLoad %652 
                                               OpStore %649 %653 
                                               OpBranch %651 
                                      %654 = OpLabel 
                         Private f32* %655 = OpAccessChain %449 %85 
                                  f32 %656 = OpLoad %655 
                                               OpStore %649 %656 
                                               OpBranch %651 
                                      %651 = OpLabel 
                                  f32 %657 = OpLoad %649 
                         Private f32* %658 = OpAccessChain %618 %600 
                                               OpStore %658 %657 
                                  i32 %659 = OpLoad %609 
                                 bool %660 = OpINotEqual %659 %25 
                                               OpSelectionMerge %662 None 
                                               OpBranchConditional %660 %661 %662 
                                      %661 = OpLabel 
                         Private i32* %663 = OpAccessChain %545 %85 
                                  i32 %664 = OpLoad %663 
                                 bool %665 = OpIEqual %664 %25 
                                               OpSelectionMerge %667 None 
                                               OpBranchConditional %665 %666 %667 
                                      %666 = OpLabel 
                                f32_3 %668 = OpLoad %226 
                                f32_2 %669 = OpVectorShuffle %668 %668 0 2 
                                               OpStore %449 %669 
                                f32_2 %670 = OpLoad %449 
                                f32_2 %671 = OpCompositeConstruct %14 %14 
                                f32_2 %672 = OpCompositeConstruct %15 %15 
                                f32_2 %673 = OpExtInst %1 43 %670 %671 %672 
                                               OpStore %449 %673 
                                f32_2 %674 = OpLoad %449 
                         Uniform f32* %675 = OpAccessChain %23 %25 
                                  f32 %676 = OpLoad %675 
                                f32_2 %677 = OpCompositeConstruct %676 %676 
                                f32_2 %678 = OpFMul %674 %677 
                                               OpStore %449 %678 
                  read_only Texture2D %679 = OpLoad %36 
                              sampler %680 = OpLoad %40 
           read_only Texture2DSampled %681 = OpSampledImage %679 %680 
                                f32_2 %682 = OpLoad %449 
                                f32_4 %683 = OpImageSampleExplicitLod %681 %682 Lod %20 
                                  f32 %684 = OpCompositeExtract %683 1 
                         Private f32* %685 = OpAccessChain %111 %85 
                                               OpStore %685 %684 
                                               OpBranch %667 
                                      %667 = OpLabel 
                         Private i32* %686 = OpAccessChain %545 %58 
                                  i32 %687 = OpLoad %686 
                                 bool %688 = OpIEqual %687 %25 
                                               OpSelectionMerge %690 None 
                                               OpBranchConditional %688 %689 %690 
                                      %689 = OpLabel 
                                f32_3 %691 = OpLoad %618 
                                f32_2 %692 = OpVectorShuffle %691 %691 0 2 
                                               OpStore %449 %692 
                                f32_2 %693 = OpLoad %449 
                                f32_2 %694 = OpCompositeConstruct %14 %14 
                                f32_2 %695 = OpCompositeConstruct %15 %15 
                                f32_2 %696 = OpExtInst %1 43 %693 %694 %695 
                                               OpStore %449 %696 
                                f32_2 %697 = OpLoad %449 
                         Uniform f32* %698 = OpAccessChain %23 %25 
                                  f32 %699 = OpLoad %698 
                                f32_2 %700 = OpCompositeConstruct %699 %699 
                                f32_2 %701 = OpFMul %697 %700 
                                               OpStore %449 %701 
                  read_only Texture2D %702 = OpLoad %36 
                              sampler %703 = OpLoad %40 
           read_only Texture2DSampled %704 = OpSampledImage %702 %703 
                                f32_2 %705 = OpLoad %449 
                                f32_4 %706 = OpImageSampleExplicitLod %704 %705 Lod %20 
                                  f32 %707 = OpCompositeExtract %706 1 
                         Private f32* %708 = OpAccessChain %111 %58 
                                               OpStore %708 %707 
                                               OpBranch %690 
                                      %690 = OpLabel 
                                  f32 %709 = OpLoad %48 
                                  f32 %710 = OpFNegate %709 
                                  f32 %711 = OpFMul %710 %412 
                         Private f32* %712 = OpAccessChain %111 %85 
                                  f32 %713 = OpLoad %712 
                                  f32 %714 = OpFAdd %711 %713 
                                               OpStore %106 %714 
                         Private i32* %715 = OpAccessChain %545 %85 
                                  i32 %716 = OpLoad %715 
                                 bool %717 = OpINotEqual %716 %25 
                                               OpSelectionMerge %720 None 
                                               OpBranchConditional %717 %719 %723 
                                      %719 = OpLabel 
                         Private f32* %721 = OpAccessChain %111 %85 
                                  f32 %722 = OpLoad %721 
                                               OpStore %718 %722 
                                               OpBranch %720 
                                      %723 = OpLabel 
                                  f32 %724 = OpLoad %106 
                                               OpStore %718 %724 
                                               OpBranch %720 
                                      %720 = OpLabel 
                                  f32 %725 = OpLoad %718 
                         Private f32* %726 = OpAccessChain %111 %85 
                                               OpStore %726 %725 
                                  f32 %727 = OpLoad %48 
                                  f32 %728 = OpFNegate %727 
                                  f32 %729 = OpFMul %728 %412 
                         Private f32* %730 = OpAccessChain %111 %58 
                                  f32 %731 = OpLoad %730 
                                  f32 %732 = OpFAdd %729 %731 
                                               OpStore %106 %732 
                         Private i32* %733 = OpAccessChain %545 %58 
                                  i32 %734 = OpLoad %733 
                                 bool %735 = OpINotEqual %734 %25 
                                               OpSelectionMerge %738 None 
                                               OpBranchConditional %735 %737 %741 
                                      %737 = OpLabel 
                         Private f32* %739 = OpAccessChain %111 %58 
                                  f32 %740 = OpLoad %739 
                                               OpStore %736 %740 
                                               OpBranch %738 
                                      %741 = OpLabel 
                                  f32 %742 = OpLoad %106 
                                               OpStore %736 %742 
                                               OpBranch %738 
                                      %738 = OpLabel 
                                  f32 %743 = OpLoad %736 
                         Private f32* %744 = OpAccessChain %111 %58 
                                               OpStore %744 %743 
                                f32_3 %745 = OpLoad %111 
                                f32_4 %746 = OpVectorShuffle %745 %745 0 1 0 1 
                                f32_4 %747 = OpExtInst %1 4 %746 
                                  f32 %748 = OpLoad %68 
                                f32_4 %749 = OpCompositeConstruct %748 %748 %748 %748 
                               bool_4 %750 = OpFOrdGreaterThanEqual %747 %749 
                               bool_2 %751 = OpVectorShuffle %750 %750 0 1 
                                u32_2 %752 = OpSelect %751 %557 %556 
                                u32_2 %753 = OpCompositeConstruct %527 %527 
                                u32_2 %754 = OpIMul %752 %753 
                                i32_2 %755 = OpBitcast %754 
                                               OpStore %545 %755 
                         Private f32* %756 = OpAccessChain %87 %85 
                                  f32 %757 = OpLoad %756 
                                  f32 %758 = OpFNegate %757 
                                  f32 %759 = OpFMul %758 %250 
                         Private f32* %760 = OpAccessChain %226 %85 
                                  f32 %761 = OpLoad %760 
                                  f32 %762 = OpFAdd %759 %761 
                                               OpStore %106 %762 
                         Private i32* %763 = OpAccessChain %545 %85 
                                  i32 %764 = OpLoad %763 
                                 bool %765 = OpINotEqual %764 %25 
                                               OpSelectionMerge %768 None 
                                               OpBranchConditional %765 %767 %771 
                                      %767 = OpLabel 
                         Private f32* %769 = OpAccessChain %226 %85 
                                  f32 %770 = OpLoad %769 
                                               OpStore %766 %770 
                                               OpBranch %768 
                                      %771 = OpLabel 
                                  f32 %772 = OpLoad %106 
                                               OpStore %766 %772 
                                               OpBranch %768 
                                      %768 = OpLabel 
                                  f32 %773 = OpLoad %766 
                         Private f32* %774 = OpAccessChain %226 %85 
                                               OpStore %774 %773 
                         Private f32* %775 = OpAccessChain %87 %58 
                                  f32 %776 = OpLoad %775 
                                  f32 %777 = OpFNegate %776 
                                  f32 %778 = OpFMul %777 %250 
                         Private f32* %779 = OpAccessChain %226 %600 
                                  f32 %780 = OpLoad %779 
                                  f32 %781 = OpFAdd %778 %780 
                                               OpStore %106 %781 
                         Private i32* %782 = OpAccessChain %545 %85 
                                  i32 %783 = OpLoad %782 
                                 bool %784 = OpINotEqual %783 %25 
                                               OpSelectionMerge %787 None 
                                               OpBranchConditional %784 %786 %790 
                                      %786 = OpLabel 
                         Private f32* %788 = OpAccessChain %226 %600 
                                  f32 %789 = OpLoad %788 
                                               OpStore %785 %789 
                                               OpBranch %787 
                                      %790 = OpLabel 
                                  f32 %791 = OpLoad %106 
                                               OpStore %785 %791 
                                               OpBranch %787 
                                      %787 = OpLabel 
                                  f32 %792 = OpLoad %785 
                         Private f32* %793 = OpAccessChain %226 %600 
                                               OpStore %793 %792 
                                i32_2 %795 = OpLoad %545 
                                i32_2 %796 = OpNot %795 
                                               OpStore %794 %796 
                         Private i32* %797 = OpAccessChain %794 %58 
                                  i32 %798 = OpLoad %797 
                                  u32 %799 = OpBitcast %798 
                         Private i32* %800 = OpAccessChain %794 %85 
                                  i32 %801 = OpLoad %800 
                                  u32 %802 = OpBitcast %801 
                                  u32 %803 = OpBitwiseOr %799 %802 
                                  i32 %804 = OpBitcast %803 
                                               OpStore %609 %804 
                         Private f32* %805 = OpAccessChain %87 %85 
                                  f32 %806 = OpLoad %805 
                                  f32 %807 = OpFMul %806 %250 
                         Private f32* %808 = OpAccessChain %618 %85 
                                  f32 %809 = OpLoad %808 
                                  f32 %810 = OpFAdd %807 %809 
                         Private f32* %811 = OpAccessChain %449 %85 
                                               OpStore %811 %810 
                         Private i32* %812 = OpAccessChain %545 %58 
                                  i32 %813 = OpLoad %812 
                                 bool %814 = OpINotEqual %813 %25 
                                               OpSelectionMerge %817 None 
                                               OpBranchConditional %814 %816 %820 
                                      %816 = OpLabel 
                         Private f32* %818 = OpAccessChain %618 %85 
                                  f32 %819 = OpLoad %818 
                                               OpStore %815 %819 
                                               OpBranch %817 
                                      %820 = OpLabel 
                         Private f32* %821 = OpAccessChain %449 %85 
                                  f32 %822 = OpLoad %821 
                                               OpStore %815 %822 
                                               OpBranch %817 
                                      %817 = OpLabel 
                                  f32 %823 = OpLoad %815 
                         Private f32* %824 = OpAccessChain %618 %85 
                                               OpStore %824 %823 
                         Private f32* %825 = OpAccessChain %87 %58 
                                  f32 %826 = OpLoad %825 
                                  f32 %827 = OpFMul %826 %250 
                         Private f32* %828 = OpAccessChain %618 %600 
                                  f32 %829 = OpLoad %828 
                                  f32 %830 = OpFAdd %827 %829 
                         Private f32* %831 = OpAccessChain %449 %85 
                                               OpStore %831 %830 
                         Private i32* %832 = OpAccessChain %545 %58 
                                  i32 %833 = OpLoad %832 
                                 bool %834 = OpINotEqual %833 %25 
                                               OpSelectionMerge %837 None 
                                               OpBranchConditional %834 %836 %840 
                                      %836 = OpLabel 
                         Private f32* %838 = OpAccessChain %618 %600 
                                  f32 %839 = OpLoad %838 
                                               OpStore %835 %839 
                                               OpBranch %837 
                                      %840 = OpLabel 
                         Private f32* %841 = OpAccessChain %449 %85 
                                  f32 %842 = OpLoad %841 
                                               OpStore %835 %842 
                                               OpBranch %837 
                                      %837 = OpLabel 
                                  f32 %843 = OpLoad %835 
                         Private f32* %844 = OpAccessChain %618 %600 
                                               OpStore %844 %843 
                                  i32 %845 = OpLoad %609 
                                 bool %846 = OpINotEqual %845 %25 
                                               OpSelectionMerge %848 None 
                                               OpBranchConditional %846 %847 %848 
                                      %847 = OpLabel 
                         Private i32* %849 = OpAccessChain %545 %85 
                                  i32 %850 = OpLoad %849 
                                 bool %851 = OpIEqual %850 %25 
                                               OpSelectionMerge %853 None 
                                               OpBranchConditional %851 %852 %853 
                                      %852 = OpLabel 
                                f32_3 %854 = OpLoad %226 
                                f32_2 %855 = OpVectorShuffle %854 %854 0 2 
                                               OpStore %449 %855 
                                f32_2 %856 = OpLoad %449 
                                f32_2 %857 = OpCompositeConstruct %14 %14 
                                f32_2 %858 = OpCompositeConstruct %15 %15 
                                f32_2 %859 = OpExtInst %1 43 %856 %857 %858 
                                               OpStore %449 %859 
                                f32_2 %860 = OpLoad %449 
                         Uniform f32* %861 = OpAccessChain %23 %25 
                                  f32 %862 = OpLoad %861 
                                f32_2 %863 = OpCompositeConstruct %862 %862 
                                f32_2 %864 = OpFMul %860 %863 
                                               OpStore %449 %864 
                  read_only Texture2D %865 = OpLoad %36 
                              sampler %866 = OpLoad %40 
           read_only Texture2DSampled %867 = OpSampledImage %865 %866 
                                f32_2 %868 = OpLoad %449 
                                f32_4 %869 = OpImageSampleExplicitLod %867 %868 Lod %20 
                                  f32 %870 = OpCompositeExtract %869 1 
                         Private f32* %871 = OpAccessChain %111 %85 
                                               OpStore %871 %870 
                                               OpBranch %853 
                                      %853 = OpLabel 
                         Private i32* %872 = OpAccessChain %545 %58 
                                  i32 %873 = OpLoad %872 
                                 bool %874 = OpIEqual %873 %25 
                                               OpSelectionMerge %876 None 
                                               OpBranchConditional %874 %875 %876 
                                      %875 = OpLabel 
                                f32_3 %877 = OpLoad %618 
                                f32_2 %878 = OpVectorShuffle %877 %877 0 2 
                                               OpStore %449 %878 
                                f32_2 %879 = OpLoad %449 
                                f32_2 %880 = OpCompositeConstruct %14 %14 
                                f32_2 %881 = OpCompositeConstruct %15 %15 
                                f32_2 %882 = OpExtInst %1 43 %879 %880 %881 
                                               OpStore %449 %882 
                                f32_2 %883 = OpLoad %449 
                         Uniform f32* %884 = OpAccessChain %23 %25 
                                  f32 %885 = OpLoad %884 
                                f32_2 %886 = OpCompositeConstruct %885 %885 
                                f32_2 %887 = OpFMul %883 %886 
                                               OpStore %449 %887 
                  read_only Texture2D %888 = OpLoad %36 
                              sampler %889 = OpLoad %40 
           read_only Texture2DSampled %890 = OpSampledImage %888 %889 
                                f32_2 %891 = OpLoad %449 
                                f32_4 %892 = OpImageSampleExplicitLod %890 %891 Lod %20 
                                  f32 %893 = OpCompositeExtract %892 1 
                         Private f32* %894 = OpAccessChain %111 %58 
                                               OpStore %894 %893 
                                               OpBranch %876 
                                      %876 = OpLabel 
                                  f32 %895 = OpLoad %48 
                                  f32 %896 = OpFNegate %895 
                                  f32 %897 = OpFMul %896 %412 
                         Private f32* %898 = OpAccessChain %111 %85 
                                  f32 %899 = OpLoad %898 
                                  f32 %900 = OpFAdd %897 %899 
                                               OpStore %106 %900 
                         Private i32* %901 = OpAccessChain %545 %85 
                                  i32 %902 = OpLoad %901 
                                 bool %903 = OpINotEqual %902 %25 
                                               OpSelectionMerge %906 None 
                                               OpBranchConditional %903 %905 %909 
                                      %905 = OpLabel 
                         Private f32* %907 = OpAccessChain %111 %85 
                                  f32 %908 = OpLoad %907 
                                               OpStore %904 %908 
                                               OpBranch %906 
                                      %909 = OpLabel 
                                  f32 %910 = OpLoad %106 
                                               OpStore %904 %910 
                                               OpBranch %906 
                                      %906 = OpLabel 
                                  f32 %911 = OpLoad %904 
                         Private f32* %912 = OpAccessChain %111 %85 
                                               OpStore %912 %911 
                                  f32 %913 = OpLoad %48 
                                  f32 %914 = OpFNegate %913 
                                  f32 %915 = OpFMul %914 %412 
                         Private f32* %916 = OpAccessChain %111 %58 
                                  f32 %917 = OpLoad %916 
                                  f32 %918 = OpFAdd %915 %917 
                                               OpStore %106 %918 
                         Private i32* %919 = OpAccessChain %545 %58 
                                  i32 %920 = OpLoad %919 
                                 bool %921 = OpINotEqual %920 %25 
                                               OpSelectionMerge %924 None 
                                               OpBranchConditional %921 %923 %927 
                                      %923 = OpLabel 
                         Private f32* %925 = OpAccessChain %111 %58 
                                  f32 %926 = OpLoad %925 
                                               OpStore %922 %926 
                                               OpBranch %924 
                                      %927 = OpLabel 
                                  f32 %928 = OpLoad %106 
                                               OpStore %922 %928 
                                               OpBranch %924 
                                      %924 = OpLabel 
                                  f32 %929 = OpLoad %922 
                         Private f32* %930 = OpAccessChain %111 %58 
                                               OpStore %930 %929 
                                f32_3 %931 = OpLoad %111 
                                f32_4 %932 = OpVectorShuffle %931 %931 0 1 0 1 
                                f32_4 %933 = OpExtInst %1 4 %932 
                                  f32 %934 = OpLoad %68 
                                f32_4 %935 = OpCompositeConstruct %934 %934 %934 %934 
                               bool_4 %936 = OpFOrdGreaterThanEqual %933 %935 
                               bool_2 %937 = OpVectorShuffle %936 %936 0 1 
                                u32_2 %938 = OpSelect %937 %557 %556 
                                u32_2 %939 = OpCompositeConstruct %527 %527 
                                u32_2 %940 = OpIMul %938 %939 
                                i32_2 %941 = OpBitcast %940 
                                               OpStore %545 %941 
                         Private f32* %942 = OpAccessChain %87 %85 
                                  f32 %943 = OpLoad %942 
                                  f32 %944 = OpFNegate %943 
                                  f32 %946 = OpFMul %944 %945 
                         Private f32* %947 = OpAccessChain %226 %85 
                                  f32 %948 = OpLoad %947 
                                  f32 %949 = OpFAdd %946 %948 
                                               OpStore %106 %949 
                         Private i32* %950 = OpAccessChain %545 %85 
                                  i32 %951 = OpLoad %950 
                                 bool %952 = OpINotEqual %951 %25 
                                               OpSelectionMerge %955 None 
                                               OpBranchConditional %952 %954 %958 
                                      %954 = OpLabel 
                         Private f32* %956 = OpAccessChain %226 %85 
                                  f32 %957 = OpLoad %956 
                                               OpStore %953 %957 
                                               OpBranch %955 
                                      %958 = OpLabel 
                                  f32 %959 = OpLoad %106 
                                               OpStore %953 %959 
                                               OpBranch %955 
                                      %955 = OpLabel 
                                  f32 %960 = OpLoad %953 
                         Private f32* %961 = OpAccessChain %226 %85 
                                               OpStore %961 %960 
                         Private f32* %962 = OpAccessChain %87 %58 
                                  f32 %963 = OpLoad %962 
                                  f32 %964 = OpFNegate %963 
                                  f32 %965 = OpFMul %964 %945 
                         Private f32* %966 = OpAccessChain %226 %600 
                                  f32 %967 = OpLoad %966 
                                  f32 %968 = OpFAdd %965 %967 
                                               OpStore %106 %968 
                         Private i32* %969 = OpAccessChain %545 %85 
                                  i32 %970 = OpLoad %969 
                                 bool %971 = OpINotEqual %970 %25 
                                               OpSelectionMerge %974 None 
                                               OpBranchConditional %971 %973 %977 
                                      %973 = OpLabel 
                         Private f32* %975 = OpAccessChain %226 %600 
                                  f32 %976 = OpLoad %975 
                                               OpStore %972 %976 
                                               OpBranch %974 
                                      %977 = OpLabel 
                                  f32 %978 = OpLoad %106 
                                               OpStore %972 %978 
                                               OpBranch %974 
                                      %974 = OpLabel 
                                  f32 %979 = OpLoad %972 
                         Private f32* %980 = OpAccessChain %226 %600 
                                               OpStore %980 %979 
                                i32_2 %981 = OpLoad %545 
                                i32_2 %982 = OpNot %981 
                                               OpStore %794 %982 
                         Private i32* %983 = OpAccessChain %794 %58 
                                  i32 %984 = OpLoad %983 
                                  u32 %985 = OpBitcast %984 
                         Private i32* %986 = OpAccessChain %794 %85 
                                  i32 %987 = OpLoad %986 
                                  u32 %988 = OpBitcast %987 
                                  u32 %989 = OpBitwiseOr %985 %988 
                                  i32 %990 = OpBitcast %989 
                                               OpStore %609 %990 
                         Private f32* %991 = OpAccessChain %87 %85 
                                  f32 %992 = OpLoad %991 
                                  f32 %993 = OpFMul %992 %945 
                         Private f32* %994 = OpAccessChain %618 %85 
                                  f32 %995 = OpLoad %994 
                                  f32 %996 = OpFAdd %993 %995 
                         Private f32* %997 = OpAccessChain %449 %85 
                                               OpStore %997 %996 
                         Private i32* %998 = OpAccessChain %545 %58 
                                  i32 %999 = OpLoad %998 
                                bool %1000 = OpINotEqual %999 %25 
                                               OpSelectionMerge %1003 None 
                                               OpBranchConditional %1000 %1002 %1006 
                                     %1002 = OpLabel 
                        Private f32* %1004 = OpAccessChain %618 %85 
                                 f32 %1005 = OpLoad %1004 
                                               OpStore %1001 %1005 
                                               OpBranch %1003 
                                     %1006 = OpLabel 
                        Private f32* %1007 = OpAccessChain %449 %85 
                                 f32 %1008 = OpLoad %1007 
                                               OpStore %1001 %1008 
                                               OpBranch %1003 
                                     %1003 = OpLabel 
                                 f32 %1009 = OpLoad %1001 
                        Private f32* %1010 = OpAccessChain %618 %85 
                                               OpStore %1010 %1009 
                        Private f32* %1011 = OpAccessChain %87 %58 
                                 f32 %1012 = OpLoad %1011 
                                 f32 %1013 = OpFMul %1012 %945 
                        Private f32* %1014 = OpAccessChain %618 %600 
                                 f32 %1015 = OpLoad %1014 
                                 f32 %1016 = OpFAdd %1013 %1015 
                        Private f32* %1017 = OpAccessChain %449 %85 
                                               OpStore %1017 %1016 
                        Private i32* %1018 = OpAccessChain %545 %58 
                                 i32 %1019 = OpLoad %1018 
                                bool %1020 = OpINotEqual %1019 %25 
                                               OpSelectionMerge %1023 None 
                                               OpBranchConditional %1020 %1022 %1026 
                                     %1022 = OpLabel 
                        Private f32* %1024 = OpAccessChain %618 %600 
                                 f32 %1025 = OpLoad %1024 
                                               OpStore %1021 %1025 
                                               OpBranch %1023 
                                     %1026 = OpLabel 
                        Private f32* %1027 = OpAccessChain %449 %85 
                                 f32 %1028 = OpLoad %1027 
                                               OpStore %1021 %1028 
                                               OpBranch %1023 
                                     %1023 = OpLabel 
                                 f32 %1029 = OpLoad %1021 
                        Private f32* %1030 = OpAccessChain %618 %600 
                                               OpStore %1030 %1029 
                                 i32 %1031 = OpLoad %609 
                                bool %1032 = OpINotEqual %1031 %25 
                                               OpSelectionMerge %1034 None 
                                               OpBranchConditional %1032 %1033 %1034 
                                     %1033 = OpLabel 
                        Private i32* %1035 = OpAccessChain %545 %85 
                                 i32 %1036 = OpLoad %1035 
                                bool %1037 = OpIEqual %1036 %25 
                                               OpSelectionMerge %1039 None 
                                               OpBranchConditional %1037 %1038 %1039 
                                     %1038 = OpLabel 
                               f32_3 %1040 = OpLoad %226 
                               f32_2 %1041 = OpVectorShuffle %1040 %1040 0 2 
                                               OpStore %449 %1041 
                               f32_2 %1042 = OpLoad %449 
                               f32_2 %1043 = OpCompositeConstruct %14 %14 
                               f32_2 %1044 = OpCompositeConstruct %15 %15 
                               f32_2 %1045 = OpExtInst %1 43 %1042 %1043 %1044 
                                               OpStore %449 %1045 
                               f32_2 %1046 = OpLoad %449 
                        Uniform f32* %1047 = OpAccessChain %23 %25 
                                 f32 %1048 = OpLoad %1047 
                               f32_2 %1049 = OpCompositeConstruct %1048 %1048 
                               f32_2 %1050 = OpFMul %1046 %1049 
                                               OpStore %449 %1050 
                 read_only Texture2D %1051 = OpLoad %36 
                             sampler %1052 = OpLoad %40 
          read_only Texture2DSampled %1053 = OpSampledImage %1051 %1052 
                               f32_2 %1054 = OpLoad %449 
                               f32_4 %1055 = OpImageSampleExplicitLod %1053 %1054 Lod %20 
                                 f32 %1056 = OpCompositeExtract %1055 1 
                        Private f32* %1057 = OpAccessChain %111 %85 
                                               OpStore %1057 %1056 
                                               OpBranch %1039 
                                     %1039 = OpLabel 
                        Private i32* %1058 = OpAccessChain %545 %58 
                                 i32 %1059 = OpLoad %1058 
                                bool %1060 = OpIEqual %1059 %25 
                                               OpSelectionMerge %1062 None 
                                               OpBranchConditional %1060 %1061 %1062 
                                     %1061 = OpLabel 
                               f32_3 %1063 = OpLoad %618 
                               f32_2 %1064 = OpVectorShuffle %1063 %1063 0 2 
                                               OpStore %449 %1064 
                               f32_2 %1065 = OpLoad %449 
                               f32_2 %1066 = OpCompositeConstruct %14 %14 
                               f32_2 %1067 = OpCompositeConstruct %15 %15 
                               f32_2 %1068 = OpExtInst %1 43 %1065 %1066 %1067 
                                               OpStore %449 %1068 
                               f32_2 %1069 = OpLoad %449 
                        Uniform f32* %1070 = OpAccessChain %23 %25 
                                 f32 %1071 = OpLoad %1070 
                               f32_2 %1072 = OpCompositeConstruct %1071 %1071 
                               f32_2 %1073 = OpFMul %1069 %1072 
                                               OpStore %449 %1073 
                 read_only Texture2D %1074 = OpLoad %36 
                             sampler %1075 = OpLoad %40 
          read_only Texture2DSampled %1076 = OpSampledImage %1074 %1075 
                               f32_2 %1077 = OpLoad %449 
                               f32_4 %1078 = OpImageSampleExplicitLod %1076 %1077 Lod %20 
                                 f32 %1079 = OpCompositeExtract %1078 1 
                        Private f32* %1080 = OpAccessChain %111 %58 
                                               OpStore %1080 %1079 
                                               OpBranch %1062 
                                     %1062 = OpLabel 
                                 f32 %1081 = OpLoad %48 
                                 f32 %1082 = OpFNegate %1081 
                                 f32 %1083 = OpFMul %1082 %412 
                        Private f32* %1084 = OpAccessChain %111 %85 
                                 f32 %1085 = OpLoad %1084 
                                 f32 %1086 = OpFAdd %1083 %1085 
                                               OpStore %106 %1086 
                        Private i32* %1087 = OpAccessChain %545 %85 
                                 i32 %1088 = OpLoad %1087 
                                bool %1089 = OpINotEqual %1088 %25 
                                               OpSelectionMerge %1092 None 
                                               OpBranchConditional %1089 %1091 %1095 
                                     %1091 = OpLabel 
                        Private f32* %1093 = OpAccessChain %111 %85 
                                 f32 %1094 = OpLoad %1093 
                                               OpStore %1090 %1094 
                                               OpBranch %1092 
                                     %1095 = OpLabel 
                                 f32 %1096 = OpLoad %106 
                                               OpStore %1090 %1096 
                                               OpBranch %1092 
                                     %1092 = OpLabel 
                                 f32 %1097 = OpLoad %1090 
                        Private f32* %1098 = OpAccessChain %111 %85 
                                               OpStore %1098 %1097 
                                 f32 %1099 = OpLoad %48 
                                 f32 %1100 = OpFNegate %1099 
                                 f32 %1101 = OpFMul %1100 %412 
                        Private f32* %1102 = OpAccessChain %111 %58 
                                 f32 %1103 = OpLoad %1102 
                                 f32 %1104 = OpFAdd %1101 %1103 
                                               OpStore %48 %1104 
                        Private i32* %1105 = OpAccessChain %545 %58 
                                 i32 %1106 = OpLoad %1105 
                                bool %1107 = OpINotEqual %1106 %25 
                                               OpSelectionMerge %1110 None 
                                               OpBranchConditional %1107 %1109 %1113 
                                     %1109 = OpLabel 
                        Private f32* %1111 = OpAccessChain %111 %58 
                                 f32 %1112 = OpLoad %1111 
                                               OpStore %1108 %1112 
                                               OpBranch %1110 
                                     %1113 = OpLabel 
                                 f32 %1114 = OpLoad %48 
                                               OpStore %1108 %1114 
                                               OpBranch %1110 
                                     %1110 = OpLabel 
                                 f32 %1115 = OpLoad %1108 
                        Private f32* %1116 = OpAccessChain %111 %58 
                                               OpStore %1116 %1115 
                               f32_3 %1119 = OpLoad %111 
                               f32_4 %1120 = OpVectorShuffle %1119 %1119 0 1 0 1 
                               f32_4 %1121 = OpExtInst %1 4 %1120 
                                 f32 %1122 = OpLoad %68 
                               f32_4 %1123 = OpCompositeConstruct %1122 %1122 %1122 %1122 
                              bool_4 %1124 = OpFOrdGreaterThanEqual %1121 %1123 
                              bool_2 %1125 = OpVectorShuffle %1124 %1124 0 1 
                                               OpStore %1118 %1125 
                        Private f32* %1126 = OpAccessChain %87 %85 
                                 f32 %1127 = OpLoad %1126 
                                 f32 %1128 = OpFNegate %1127 
                                 f32 %1130 = OpFMul %1128 %1129 
                        Private f32* %1131 = OpAccessChain %226 %85 
                                 f32 %1132 = OpLoad %1131 
                                 f32 %1133 = OpFAdd %1130 %1132 
                                               OpStore %48 %1133 
                       Private bool* %1134 = OpAccessChain %1118 %85 
                                bool %1135 = OpLoad %1134 
                                               OpSelectionMerge %1138 None 
                                               OpBranchConditional %1135 %1137 %1141 
                                     %1137 = OpLabel 
                        Private f32* %1139 = OpAccessChain %226 %85 
                                 f32 %1140 = OpLoad %1139 
                                               OpStore %1136 %1140 
                                               OpBranch %1138 
                                     %1141 = OpLabel 
                                 f32 %1142 = OpLoad %48 
                                               OpStore %1136 %1142 
                                               OpBranch %1138 
                                     %1138 = OpLabel 
                                 f32 %1143 = OpLoad %1136 
                        Private f32* %1144 = OpAccessChain %226 %85 
                                               OpStore %1144 %1143 
                        Private f32* %1145 = OpAccessChain %87 %58 
                                 f32 %1146 = OpLoad %1145 
                                 f32 %1147 = OpFNegate %1146 
                                 f32 %1148 = OpFMul %1147 %1129 
                        Private f32* %1149 = OpAccessChain %226 %600 
                                 f32 %1150 = OpLoad %1149 
                                 f32 %1151 = OpFAdd %1148 %1150 
                                               OpStore %48 %1151 
                       Private bool* %1152 = OpAccessChain %1118 %85 
                                bool %1153 = OpLoad %1152 
                                               OpSelectionMerge %1156 None 
                                               OpBranchConditional %1153 %1155 %1159 
                                     %1155 = OpLabel 
                        Private f32* %1157 = OpAccessChain %226 %600 
                                 f32 %1158 = OpLoad %1157 
                                               OpStore %1154 %1158 
                                               OpBranch %1156 
                                     %1159 = OpLabel 
                                 f32 %1160 = OpLoad %48 
                                               OpStore %1154 %1160 
                                               OpBranch %1156 
                                     %1156 = OpLabel 
                                 f32 %1161 = OpLoad %1154 
                        Private f32* %1162 = OpAccessChain %226 %600 
                                               OpStore %1162 %1161 
                        Private f32* %1163 = OpAccessChain %87 %85 
                                 f32 %1164 = OpLoad %1163 
                                 f32 %1165 = OpFMul %1164 %1129 
                        Private f32* %1166 = OpAccessChain %618 %85 
                                 f32 %1167 = OpLoad %1166 
                                 f32 %1168 = OpFAdd %1165 %1167 
                                               OpStore %48 %1168 
                       Private bool* %1169 = OpAccessChain %1118 %58 
                                bool %1170 = OpLoad %1169 
                                               OpSelectionMerge %1173 None 
                                               OpBranchConditional %1170 %1172 %1176 
                                     %1172 = OpLabel 
                        Private f32* %1174 = OpAccessChain %618 %85 
                                 f32 %1175 = OpLoad %1174 
                                               OpStore %1171 %1175 
                                               OpBranch %1173 
                                     %1176 = OpLabel 
                                 f32 %1177 = OpLoad %48 
                                               OpStore %1171 %1177 
                                               OpBranch %1173 
                                     %1173 = OpLabel 
                                 f32 %1178 = OpLoad %1171 
                        Private f32* %1179 = OpAccessChain %618 %85 
                                               OpStore %1179 %1178 
                        Private f32* %1180 = OpAccessChain %87 %58 
                                 f32 %1181 = OpLoad %1180 
                                 f32 %1182 = OpFMul %1181 %1129 
                        Private f32* %1183 = OpAccessChain %618 %600 
                                 f32 %1184 = OpLoad %1183 
                                 f32 %1185 = OpFAdd %1182 %1184 
                                               OpStore %48 %1185 
                       Private bool* %1186 = OpAccessChain %1118 %58 
                                bool %1187 = OpLoad %1186 
                                               OpSelectionMerge %1190 None 
                                               OpBranchConditional %1187 %1189 %1193 
                                     %1189 = OpLabel 
                        Private f32* %1191 = OpAccessChain %618 %600 
                                 f32 %1192 = OpLoad %1191 
                                               OpStore %1188 %1192 
                                               OpBranch %1190 
                                     %1193 = OpLabel 
                                 f32 %1194 = OpLoad %48 
                                               OpStore %1188 %1194 
                                               OpBranch %1190 
                                     %1190 = OpLabel 
                                 f32 %1195 = OpLoad %1188 
                        Private f32* %1196 = OpAccessChain %618 %600 
                                               OpStore %1196 %1195 
                                               OpBranch %1034 
                                     %1034 = OpLabel 
                                               OpBranch %848 
                                      %848 = OpLabel 
                                               OpBranch %662 
                                      %662 = OpLabel 
                        Private f32* %1197 = OpAccessChain %226 %85 
                                 f32 %1198 = OpLoad %1197 
                                 f32 %1199 = OpFNegate %1198 
                          Input f32* %1200 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %1201 = OpLoad %1200 
                                 f32 %1202 = OpFAdd %1199 %1201 
                                               OpStore %48 %1202 
                        Private f32* %1203 = OpAccessChain %618 %85 
                                 f32 %1204 = OpLoad %1203 
                          Input f32* %1205 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %1206 = OpLoad %1205 
                                 f32 %1207 = OpFNegate %1206 
                                 f32 %1208 = OpFAdd %1204 %1207 
                                               OpStore %68 %1208 
                        Private f32* %1209 = OpAccessChain %226 %600 
                                 f32 %1210 = OpLoad %1209 
                                 f32 %1211 = OpFNegate %1210 
                          Input f32* %1212 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %1213 = OpLoad %1212 
                                 f32 %1214 = OpFAdd %1211 %1213 
                        Private f32* %1215 = OpAccessChain %87 %85 
                                               OpStore %1215 %1214 
                                bool %1216 = OpLoad %293 
                                               OpSelectionMerge %1219 None 
                                               OpBranchConditional %1216 %1218 %1221 
                                     %1218 = OpLabel 
                                 f32 %1220 = OpLoad %48 
                                               OpStore %1217 %1220 
                                               OpBranch %1219 
                                     %1221 = OpLabel 
                        Private f32* %1222 = OpAccessChain %87 %85 
                                 f32 %1223 = OpLoad %1222 
                                               OpStore %1217 %1223 
                                               OpBranch %1219 
                                     %1219 = OpLabel 
                                 f32 %1224 = OpLoad %1217 
                                               OpStore %48 %1224 
                        Private f32* %1225 = OpAccessChain %618 %600 
                                 f32 %1226 = OpLoad %1225 
                          Input f32* %1227 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %1228 = OpLoad %1227 
                                 f32 %1229 = OpFNegate %1228 
                                 f32 %1230 = OpFAdd %1226 %1229 
                        Private f32* %1231 = OpAccessChain %87 %85 
                                               OpStore %1231 %1230 
                                bool %1232 = OpLoad %293 
                                               OpSelectionMerge %1235 None 
                                               OpBranchConditional %1232 %1234 %1237 
                                     %1234 = OpLabel 
                                 f32 %1236 = OpLoad %68 
                                               OpStore %1233 %1236 
                                               OpBranch %1235 
                                     %1237 = OpLabel 
                        Private f32* %1238 = OpAccessChain %87 %85 
                                 f32 %1239 = OpLoad %1238 
                                               OpStore %1233 %1239 
                                               OpBranch %1235 
                                     %1235 = OpLabel 
                                 f32 %1240 = OpLoad %1233 
                                               OpStore %68 %1240 
                               f32_3 %1242 = OpLoad %111 
                               f32_4 %1243 = OpVectorShuffle %1242 %1242 0 1 0 0 
                              bool_4 %1245 = OpFOrdLessThan %1243 %1244 
                              bool_2 %1246 = OpVectorShuffle %1245 %1245 0 1 
                               u32_2 %1247 = OpSelect %1246 %557 %556 
                               u32_2 %1248 = OpCompositeConstruct %527 %527 
                               u32_2 %1249 = OpIMul %1247 %1248 
                               i32_2 %1250 = OpBitcast %1249 
                                               OpStore %1241 %1250 
                                 f32 %1251 = OpLoad %48 
                                 f32 %1252 = OpLoad %68 
                                 f32 %1253 = OpFAdd %1251 %1252 
                                               OpStore %106 %1253 
                                 i32 %1255 = OpLoad %523 
                               i32_4 %1257 = OpCompositeConstruct %1255 %1255 %1255 %1255 
                               i32_2 %1258 = OpLoad %1241 
                               i32_4 %1259 = OpVectorShuffle %1258 %1258 0 1 0 0 
                              bool_4 %1260 = OpINotEqual %1257 %1259 
                              bool_2 %1261 = OpVectorShuffle %1260 %1260 0 1 
                                               OpStore %1254 %1261 
                                 f32 %1262 = OpLoad %106 
                                 f32 %1263 = OpFDiv %15 %1262 
                                               OpStore %93 %1263 
                                 f32 %1264 = OpLoad %48 
                                 f32 %1265 = OpLoad %68 
                                bool %1266 = OpFOrdLessThan %1264 %1265 
                                               OpStore %358 %1266 
                                 f32 %1267 = OpLoad %48 
                                 f32 %1268 = OpLoad %68 
                                 f32 %1269 = OpExtInst %1 37 %1267 %1268 
                                               OpStore %48 %1269 
                                bool %1271 = OpLoad %358 
                                               OpSelectionMerge %1275 None 
                                               OpBranchConditional %1271 %1274 %1278 
                                     %1274 = OpLabel 
                       Private bool* %1276 = OpAccessChain %1254 %85 
                                bool %1277 = OpLoad %1276 
                                               OpStore %1273 %1277 
                                               OpBranch %1275 
                                     %1278 = OpLabel 
                       Private bool* %1279 = OpAccessChain %1254 %58 
                                bool %1280 = OpLoad %1279 
                                               OpStore %1273 %1280 
                                               OpBranch %1275 
                                     %1275 = OpLabel 
                                bool %1281 = OpLoad %1273 
                                               OpStore %1270 %1281 
                        Private f32* %1282 = OpAccessChain %179 %85 
                                 f32 %1283 = OpLoad %1282 
                        Private f32* %1284 = OpAccessChain %179 %85 
                                 f32 %1285 = OpLoad %1284 
                                 f32 %1286 = OpFMul %1283 %1285 
                        Private f32* %1287 = OpAccessChain %179 %85 
                                               OpStore %1287 %1286 
                                 f32 %1288 = OpLoad %48 
                                 f32 %1289 = OpLoad %93 
                                 f32 %1290 = OpFNegate %1289 
                                 f32 %1291 = OpFMul %1288 %1290 
                                 f32 %1292 = OpFAdd %1291 %412 
                                               OpStore %48 %1292 
                                bool %1293 = OpLoad %1270 
                                 f32 %1294 = OpLoad %48 
                                 f32 %1295 = OpSelect %1293 %1294 %14 
                                               OpStore %48 %1295 
                        Private f32* %1296 = OpAccessChain %179 %85 
                                 f32 %1297 = OpLoad %1296 
                                 f32 %1298 = OpLoad %48 
                                 f32 %1299 = OpExtInst %1 40 %1297 %1298 
                        Private f32* %1300 = OpAccessChain %179 %85 
                                               OpStore %1300 %1299 
                               f32_3 %1301 = OpLoad %179 
                               f32_2 %1302 = OpVectorShuffle %1301 %1301 0 0 
                                 f32 %1303 = OpLoad %60 
                               f32_2 %1304 = OpCompositeConstruct %1303 %1303 
                               f32_2 %1305 = OpFMul %1302 %1304 
                               f32_2 %1306 = OpLoad vs_TEXCOORD0 
                               f32_2 %1307 = OpFAdd %1305 %1306 
                               f32_3 %1308 = OpLoad %179 
                               f32_3 %1309 = OpVectorShuffle %1308 %1307 3 4 2 
                                               OpStore %179 %1309 
                                bool %1310 = OpLoad %293 
                                               OpSelectionMerge %1313 None 
                                               OpBranchConditional %1310 %1312 %1316 
                                     %1312 = OpLabel 
                          Input f32* %1314 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %1315 = OpLoad %1314 
                                               OpStore %1311 %1315 
                                               OpBranch %1313 
                                     %1316 = OpLabel 
                        Private f32* %1317 = OpAccessChain %179 %85 
                                 f32 %1318 = OpLoad %1317 
                                               OpStore %1311 %1318 
                                               OpBranch %1313 
                                     %1313 = OpLabel 
                                 f32 %1319 = OpLoad %1311 
                        Private f32* %1320 = OpAccessChain %77 %85 
                                               OpStore %1320 %1319 
                        Private f32* %1321 = OpAccessChain %77 %85 
                                 f32 %1322 = OpLoad %1321 
                                 f32 %1323 = OpExtInst %1 43 %1322 %14 %15 
                        Private f32* %1324 = OpAccessChain %77 %85 
                                               OpStore %1324 %1323 
                                bool %1325 = OpLoad %293 
                                               OpSelectionMerge %1328 None 
                                               OpBranchConditional %1325 %1327 %1331 
                                     %1327 = OpLabel 
                        Private f32* %1329 = OpAccessChain %179 %58 
                                 f32 %1330 = OpLoad %1329 
                                               OpStore %1326 %1330 
                                               OpBranch %1328 
                                     %1331 = OpLabel 
                          Input f32* %1332 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %1333 = OpLoad %1332 
                                               OpStore %1326 %1333 
                                               OpBranch %1328 
                                     %1328 = OpLabel 
                                 f32 %1334 = OpLoad %1326 
                        Private f32* %1335 = OpAccessChain %77 %58 
                                               OpStore %1335 %1334 
                        Private f32* %1336 = OpAccessChain %77 %58 
                                 f32 %1337 = OpLoad %1336 
                                 f32 %1338 = OpExtInst %1 43 %1337 %14 %15 
                        Private f32* %1339 = OpAccessChain %77 %58 
                                               OpStore %1339 %1338 
                               f32_3 %1340 = OpLoad %77 
                               f32_2 %1341 = OpVectorShuffle %1340 %1340 0 1 
                        Uniform f32* %1342 = OpAccessChain %23 %25 
                                 f32 %1343 = OpLoad %1342 
                               f32_2 %1344 = OpCompositeConstruct %1343 %1343 
                               f32_2 %1345 = OpFMul %1341 %1344 
                                               OpStore %9 %1345 
                 read_only Texture2D %1346 = OpLoad %36 
                             sampler %1347 = OpLoad %40 
          read_only Texture2DSampled %1348 = OpSampledImage %1346 %1347 
                               f32_2 %1349 = OpLoad %9 
                               f32_4 %1350 = OpImageSampleExplicitLod %1348 %1349 Lod %20 
                               f32_3 %1351 = OpVectorShuffle %1350 %1350 0 1 2 
                                               OpStore %33 %1351 
                                               OpBranch %148 
                                      %148 = OpLabel 
                 read_only Texture2D %1352 = OpLoad %36 
                             sampler %1353 = OpLoad %40 
          read_only Texture2DSampled %1354 = OpSampledImage %1352 %1353 
                               f32_2 %1356 = OpLoad vs_TEXCOORD1 
                               f32_4 %1357 = OpImageSampleImplicitLod %1354 %1356 
                                 f32 %1359 = OpCompositeExtract %1357 3 
                        Private f32* %1360 = OpAccessChain %9 %85 
                                               OpStore %1360 %1359 
                               f32_2 %1361 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %1363 = OpAccessChain %23 %54 
                               f32_4 %1364 = OpLoad %1363 
                               f32_2 %1365 = OpVectorShuffle %1364 %1364 0 1 
                               f32_2 %1366 = OpFMul %1361 %1365 
                      Uniform f32_4* %1367 = OpAccessChain %23 %54 
                               f32_4 %1368 = OpLoad %1367 
                               f32_2 %1369 = OpVectorShuffle %1368 %1368 2 3 
                               f32_2 %1370 = OpFAdd %1366 %1369 
                               f32_3 %1371 = OpLoad %179 
                               f32_3 %1372 = OpVectorShuffle %1371 %1370 3 4 2 
                                               OpStore %179 %1372 
                 read_only Texture2D %1374 = OpLoad %1373 
                             sampler %1376 = OpLoad %1375 
          read_only Texture2DSampled %1377 = OpSampledImage %1374 %1376 
                               f32_3 %1378 = OpLoad %179 
                               f32_2 %1379 = OpVectorShuffle %1378 %1378 0 1 
                               f32_4 %1380 = OpImageSampleImplicitLod %1377 %1379 
                                 f32 %1381 = OpCompositeExtract %1380 3 
                        Private f32* %1382 = OpAccessChain %179 %85 
                                               OpStore %1382 %1381 
                        Private f32* %1383 = OpAccessChain %179 %85 
                                 f32 %1384 = OpLoad %1383 
                                 f32 %1385 = OpFMul %1384 %250 
                                 f32 %1387 = OpFAdd %1385 %1386 
                        Private f32* %1388 = OpAccessChain %179 %85 
                                               OpStore %1388 %1387 
                        Private f32* %1389 = OpAccessChain %179 %85 
                                 f32 %1390 = OpLoad %1389 
                                 f32 %1392 = OpFMul %1390 %1391 
                                 f32 %1393 = OpFAdd %1392 %412 
                                               OpStore %48 %1393 
                                 f32 %1394 = OpLoad %48 
                                 f32 %1395 = OpExtInst %1 43 %1394 %14 %15 
                                               OpStore %48 %1395 
                                 f32 %1396 = OpLoad %48 
                                 f32 %1397 = OpFMul %1396 %250 
                                 f32 %1398 = OpFAdd %1397 %1386 
                                               OpStore %48 %1398 
                        Private f32* %1399 = OpAccessChain %179 %85 
                                 f32 %1400 = OpLoad %1399 
                                 f32 %1401 = OpExtInst %1 4 %1400 
                                 f32 %1402 = OpFNegate %1401 
                                 f32 %1403 = OpFAdd %1402 %15 
                        Private f32* %1404 = OpAccessChain %179 %85 
                                               OpStore %1404 %1403 
                        Private f32* %1405 = OpAccessChain %179 %85 
                                 f32 %1406 = OpLoad %1405 
                                 f32 %1407 = OpExtInst %1 31 %1406 
                        Private f32* %1408 = OpAccessChain %179 %85 
                                               OpStore %1408 %1407 
                        Private f32* %1409 = OpAccessChain %179 %85 
                                 f32 %1410 = OpLoad %1409 
                                 f32 %1411 = OpFNegate %1410 
                                 f32 %1412 = OpFAdd %1411 %15 
                        Private f32* %1413 = OpAccessChain %179 %85 
                                               OpStore %1413 %1412 
                        Private f32* %1414 = OpAccessChain %179 %85 
                                 f32 %1415 = OpLoad %1414 
                                 f32 %1416 = OpLoad %48 
                                 f32 %1417 = OpFMul %1415 %1416 
                        Private f32* %1418 = OpAccessChain %179 %85 
                                               OpStore %1418 %1417 
                               f32_3 %1419 = OpLoad %33 
                               f32_3 %1422 = OpFMul %1419 %1421 
                                               OpStore %77 %1422 
                               f32_3 %1423 = OpLoad %33 
                               f32_3 %1424 = OpExtInst %1 4 %1423 
                               f32_3 %1427 = OpExtInst %1 40 %1424 %1426 
                                               OpStore %111 %1427 
                               f32_3 %1428 = OpLoad %111 
                               f32_3 %1429 = OpExtInst %1 30 %1428 
                                               OpStore %111 %1429 
                               f32_3 %1430 = OpLoad %111 
                               f32_3 %1433 = OpFMul %1430 %1432 
                                               OpStore %111 %1433 
                               f32_3 %1434 = OpLoad %111 
                               f32_3 %1435 = OpExtInst %1 29 %1434 
                                               OpStore %111 %1435 
                               f32_3 %1436 = OpLoad %111 
                               f32_3 %1439 = OpFMul %1436 %1438 
                               f32_3 %1442 = OpFAdd %1439 %1441 
                                               OpStore %111 %1442 
                               f32_3 %1448 = OpLoad %33 
                               f32_4 %1449 = OpVectorShuffle %1448 %1448 0 1 2 0 
                              bool_4 %1450 = OpFOrdGreaterThanEqual %1447 %1449 
                              bool_3 %1451 = OpVectorShuffle %1450 %1450 0 1 2 
                                               OpStore %1445 %1451 
                       Private bool* %1452 = OpAccessChain %1445 %85 
                                bool %1453 = OpLoad %1452 
                                               OpSelectionMerge %1456 None 
                                               OpBranchConditional %1453 %1455 %1459 
                                     %1455 = OpLabel 
                        Private f32* %1457 = OpAccessChain %77 %85 
                                 f32 %1458 = OpLoad %1457 
                                               OpStore %1454 %1458 
                                               OpBranch %1456 
                                     %1459 = OpLabel 
                        Private f32* %1460 = OpAccessChain %111 %85 
                                 f32 %1461 = OpLoad %1460 
                                               OpStore %1454 %1461 
                                               OpBranch %1456 
                                     %1456 = OpLabel 
                                 f32 %1462 = OpLoad %1454 
                        Private f32* %1463 = OpAccessChain %33 %85 
                                               OpStore %1463 %1462 
                       Private bool* %1464 = OpAccessChain %1445 %58 
                                bool %1465 = OpLoad %1464 
                                               OpSelectionMerge %1468 None 
                                               OpBranchConditional %1465 %1467 %1471 
                                     %1467 = OpLabel 
                        Private f32* %1469 = OpAccessChain %77 %58 
                                 f32 %1470 = OpLoad %1469 
                                               OpStore %1466 %1470 
                                               OpBranch %1468 
                                     %1471 = OpLabel 
                        Private f32* %1472 = OpAccessChain %111 %58 
                                 f32 %1473 = OpLoad %1472 
                                               OpStore %1466 %1473 
                                               OpBranch %1468 
                                     %1468 = OpLabel 
                                 f32 %1474 = OpLoad %1466 
                        Private f32* %1475 = OpAccessChain %33 %58 
                                               OpStore %1475 %1474 
                       Private bool* %1476 = OpAccessChain %1445 %600 
                                bool %1477 = OpLoad %1476 
                                               OpSelectionMerge %1480 None 
                                               OpBranchConditional %1477 %1479 %1483 
                                     %1479 = OpLabel 
                        Private f32* %1481 = OpAccessChain %77 %600 
                                 f32 %1482 = OpLoad %1481 
                                               OpStore %1478 %1482 
                                               OpBranch %1480 
                                     %1483 = OpLabel 
                        Private f32* %1484 = OpAccessChain %111 %600 
                                 f32 %1485 = OpLoad %1484 
                                               OpStore %1478 %1485 
                                               OpBranch %1480 
                                     %1480 = OpLabel 
                                 f32 %1486 = OpLoad %1478 
                        Private f32* %1487 = OpAccessChain %33 %600 
                                               OpStore %1487 %1486 
                               f32_3 %1488 = OpLoad %179 
                               f32_3 %1489 = OpVectorShuffle %1488 %1488 0 0 0 
                               f32_3 %1492 = OpFMul %1489 %1491 
                               f32_3 %1493 = OpLoad %33 
                               f32_3 %1494 = OpFAdd %1492 %1493 
                                               OpStore %179 %1494 
                               f32_3 %1495 = OpLoad %179 
                               f32_3 %1498 = OpFMul %1495 %1497 
                                               OpStore %33 %1498 
                               f32_3 %1499 = OpLoad %179 
                               f32_3 %1502 = OpFAdd %1499 %1501 
                                               OpStore %77 %1502 
                               f32_3 %1503 = OpLoad %77 
                               f32_3 %1506 = OpFMul %1503 %1505 
                                               OpStore %77 %1506 
                               f32_3 %1507 = OpLoad %77 
                               f32_3 %1508 = OpExtInst %1 4 %1507 
                               f32_3 %1509 = OpExtInst %1 40 %1508 %1426 
                                               OpStore %77 %1509 
                               f32_3 %1510 = OpLoad %77 
                               f32_3 %1511 = OpExtInst %1 30 %1510 
                                               OpStore %77 %1511 
                               f32_3 %1512 = OpLoad %77 
                               f32_3 %1515 = OpFMul %1512 %1514 
                                               OpStore %77 %1515 
                               f32_3 %1516 = OpLoad %77 
                               f32_3 %1517 = OpExtInst %1 29 %1516 
                                               OpStore %77 %1517 
                               f32_3 %1521 = OpLoad %179 
                               f32_4 %1522 = OpVectorShuffle %1521 %1521 0 1 2 2 
                              bool_4 %1523 = OpFOrdGreaterThanEqual %1520 %1522 
                              bool_3 %1524 = OpVectorShuffle %1523 %1523 0 1 2 
                                               OpStore %1518 %1524 
                       Private bool* %1527 = OpAccessChain %1518 %85 
                                bool %1528 = OpLoad %1527 
                                               OpSelectionMerge %1531 None 
                                               OpBranchConditional %1528 %1530 %1534 
                                     %1530 = OpLabel 
                        Private f32* %1532 = OpAccessChain %33 %85 
                                 f32 %1533 = OpLoad %1532 
                                               OpStore %1529 %1533 
                                               OpBranch %1531 
                                     %1534 = OpLabel 
                        Private f32* %1535 = OpAccessChain %77 %85 
                                 f32 %1536 = OpLoad %1535 
                                               OpStore %1529 %1536 
                                               OpBranch %1531 
                                     %1531 = OpLabel 
                                 f32 %1537 = OpLoad %1529 
                         Output f32* %1539 = OpAccessChain %1526 %85 
                                               OpStore %1539 %1537 
                       Private bool* %1540 = OpAccessChain %1518 %58 
                                bool %1541 = OpLoad %1540 
                                               OpSelectionMerge %1544 None 
                                               OpBranchConditional %1541 %1543 %1547 
                                     %1543 = OpLabel 
                        Private f32* %1545 = OpAccessChain %33 %58 
                                 f32 %1546 = OpLoad %1545 
                                               OpStore %1542 %1546 
                                               OpBranch %1544 
                                     %1547 = OpLabel 
                        Private f32* %1548 = OpAccessChain %77 %58 
                                 f32 %1549 = OpLoad %1548 
                                               OpStore %1542 %1549 
                                               OpBranch %1544 
                                     %1544 = OpLabel 
                                 f32 %1550 = OpLoad %1542 
                         Output f32* %1551 = OpAccessChain %1526 %58 
                                               OpStore %1551 %1550 
                       Private bool* %1552 = OpAccessChain %1518 %600 
                                bool %1553 = OpLoad %1552 
                                               OpSelectionMerge %1556 None 
                                               OpBranchConditional %1553 %1555 %1559 
                                     %1555 = OpLabel 
                        Private f32* %1557 = OpAccessChain %33 %600 
                                 f32 %1558 = OpLoad %1557 
                                               OpStore %1554 %1558 
                                               OpBranch %1556 
                                     %1559 = OpLabel 
                        Private f32* %1560 = OpAccessChain %77 %600 
                                 f32 %1561 = OpLoad %1560 
                                               OpStore %1554 %1561 
                                               OpBranch %1556 
                                     %1556 = OpLabel 
                                 f32 %1562 = OpLoad %1554 
                         Output f32* %1563 = OpAccessChain %1526 %600 
                                               OpStore %1563 %1562 
                        Private f32* %1564 = OpAccessChain %9 %85 
                                 f32 %1565 = OpLoad %1564 
                         Output f32* %1566 = OpAccessChain %1526 %1358 
                                               OpStore %1566 %1565 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %66 %73 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %22 0 Offset 22 
                                             OpMemberDecorate %22 1 Offset 22 
                                             OpMemberDecorate %22 2 Offset 22 
                                             OpDecorate %22 Block 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate vs_TEXCOORD1 Location 66 
                                             OpDecorate vs_TEXCOORD0 Location 73 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypeStruct %6 %7 %7 
                                     %23 = OpTypePointer Uniform %22 
Uniform struct {f32; f32_4; f32_4;}* %24 = OpVariable Uniform 
                                 i32 %25 = OpConstant 2 
                                     %26 = OpTypePointer Uniform %7 
                                     %35 = OpTypePointer Output %7 
                                 f32 %39 = OpConstant 3.674022E-40 
                                 f32 %40 = OpConstant 3.674022E-40 
                               f32_2 %41 = OpConstantComposite %39 %40 
                                     %45 = OpTypePointer Private %19 
                      Private f32_2* %46 = OpVariable Private 
                               f32_2 %49 = OpConstantComposite %40 %40 
                                 i32 %52 = OpConstant 1 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %58 %58 
                                     %65 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %68 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                      Uniform f32_4* %27 = OpAccessChain %24 %25 
                               f32_4 %28 = OpLoad %27 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpFMul %21 %29 
                      Uniform f32_4* %31 = OpAccessChain %24 %25 
                               f32_4 %32 = OpLoad %31 
                               f32_2 %33 = OpVectorShuffle %32 %32 2 3 
                               f32_2 %34 = OpFAdd %30 %33 
                       Output f32_4* %36 = OpAccessChain %13 %15 
                               f32_4 %37 = OpLoad %36 
                               f32_4 %38 = OpVectorShuffle %37 %34 4 5 2 3 
                                             OpStore %36 %38 
                       Output f32_4* %42 = OpAccessChain %13 %15 
                               f32_4 %43 = OpLoad %42 
                               f32_4 %44 = OpVectorShuffle %43 %41 0 1 4 5 
                                             OpStore %42 %44 
                               f32_3 %47 = OpLoad %18 
                               f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                               f32_2 %50 = OpFAdd %48 %49 
                                             OpStore %46 %50 
                               f32_2 %51 = OpLoad %46 
                      Uniform f32_4* %53 = OpAccessChain %24 %52 
                               f32_4 %54 = OpLoad %53 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               f32_2 %56 = OpFMul %51 %55 
                                             OpStore %46 %56 
                               f32_2 %57 = OpLoad %46 
                               f32_2 %60 = OpFMul %57 %59 
                      Uniform f32_4* %61 = OpAccessChain %24 %52 
                               f32_4 %62 = OpLoad %61 
                               f32_2 %63 = OpVectorShuffle %62 %62 2 3 
                               f32_2 %64 = OpFAdd %60 %63 
                                             OpStore %46 %64 
                               f32_2 %67 = OpLoad %46 
                        Uniform f32* %69 = OpAccessChain %24 %15 
                                 f32 %70 = OpLoad %69 
                               f32_2 %71 = OpCompositeConstruct %70 %70 
                               f32_2 %72 = OpFMul %67 %71 
                                             OpStore vs_TEXCOORD1 %72 
                               f32_2 %74 = OpLoad %46 
                                             OpStore vs_TEXCOORD0 %74 
                         Output f32* %76 = OpAccessChain %13 %15 %9 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                         Output f32* %79 = OpAccessChain %13 %15 %9 
                                             OpStore %79 %78 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1568
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %11 %1355 %1526 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpDecorate vs_TEXCOORD0 Location 11 
                                               OpMemberDecorate %21 0 Offset 21 
                                               OpMemberDecorate %21 1 Offset 21 
                                               OpMemberDecorate %21 2 Offset 21 
                                               OpDecorate %21 Block 
                                               OpDecorate %23 DescriptorSet 23 
                                               OpDecorate %23 Binding 23 
                                               OpDecorate %36 DescriptorSet 36 
                                               OpDecorate %36 Binding 36 
                                               OpDecorate %40 DescriptorSet 40 
                                               OpDecorate %40 Binding 40 
                                               OpDecorate vs_TEXCOORD1 Location 1355 
                                               OpDecorate %1373 DescriptorSet 1373 
                                               OpDecorate %1373 Binding 1373 
                                               OpDecorate %1375 DescriptorSet 1375 
                                               OpDecorate %1375 Binding 1375 
                                               OpDecorate %1526 Location 1526 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 2 
                                        %8 = OpTypePointer Private %7 
                         Private f32_2* %9 = OpVariable Private 
                                       %10 = OpTypePointer Input %7 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %14 = OpConstant 3.674022E-40 
                                   f32 %15 = OpConstant 3.674022E-40 
                                       %20 = OpTypeVector %6 4 
                                       %21 = OpTypeStruct %6 %20 %20 
                                       %22 = OpTypePointer Uniform %21 
  Uniform struct {f32; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                       %24 = OpTypeInt 32 1 
                                   i32 %25 = OpConstant 0 
                                       %26 = OpTypePointer Uniform %6 
                                       %31 = OpTypeVector %6 3 
                                       %32 = OpTypePointer Private %31 
                        Private f32_3* %33 = OpVariable Private 
                                       %34 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %35 = OpTypePointer UniformConstant %34 
  UniformConstant read_only Texture2D* %36 = OpVariable UniformConstant 
                                       %38 = OpTypeSampler 
                                       %39 = OpTypePointer UniformConstant %38 
              UniformConstant sampler* %40 = OpVariable UniformConstant 
                                       %42 = OpTypeSampledImage %34 
                                       %47 = OpTypePointer Private %6 
                          Private f32* %48 = OpVariable Private 
                                       %53 = OpTypeVector %24 2 
                                   i32 %54 = OpConstant 1 
                                 i32_2 %55 = OpConstantComposite %25 %54 
                                       %57 = OpTypeInt 32 0 
                                   u32 %58 = OpConstant 1 
                          Private f32* %60 = OpVariable Private 
                                 i32_2 %65 = OpConstantComposite %54 %25 
                          Private f32* %68 = OpVariable Private 
                                   i32 %73 = OpConstant -1 
                                 i32_2 %74 = OpConstantComposite %25 %73 
                        Private f32_3* %77 = OpVariable Private 
                                 i32_2 %82 = OpConstantComposite %73 %25 
                                   u32 %85 = OpConstant 0 
                        Private f32_2* %87 = OpVariable Private 
                          Private f32* %93 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_3* %111 = OpVariable Private 
                                  f32 %128 = OpConstant 3.674022E-40 
                                  f32 %137 = OpConstant 3.674022E-40 
                                      %139 = OpTypeBool 
                                      %140 = OpTypePointer Private %139 
                        Private bool* %141 = OpVariable Private 
                                i32_2 %153 = OpConstantComposite %73 %73 
                                i32_2 %160 = OpConstantComposite %54 %54 
                                i32_2 %167 = OpConstantComposite %54 %73 
                                i32_2 %175 = OpConstantComposite %73 %54 
                       Private f32_3* %179 = OpVariable Private 
                       Private f32_2* %184 = OpVariable Private 
                       Private f32_2* %194 = OpVariable Private 
                                  f32 %203 = OpConstant 3.674022E-40 
                         Private f32* %216 = OpVariable Private 
                       Private f32_3* %226 = OpVariable Private 
                                  f32 %250 = OpConstant 3.674022E-40 
                        Private bool* %293 = OpVariable Private 
                                      %306 = OpTypePointer Function %6 
                                  i32 %323 = OpConstant 2 
                                  f32 %332 = OpConstant 3.674022E-40 
                        Private bool* %358 = OpVariable Private 
                                  f32 %412 = OpConstant 3.674022E-40 
                                f32_2 %413 = OpConstantComposite %412 %412 
                                      %423 = OpTypePointer Input %6 
                       Private f32_2* %449 = OpVariable Private 
                                  f32 %457 = OpConstant 3.674022E-40 
                                  f32 %507 = OpConstant 3.674022E-40 
                                      %522 = OpTypePointer Private %24 
                         Private i32* %523 = OpVariable Private 
                                  u32 %527 = OpConstant 4294967295 
                                      %544 = OpTypePointer Private %53 
                       Private i32_2* %545 = OpVariable Private 
                                      %551 = OpTypeVector %139 4 
                                      %553 = OpTypeVector %139 2 
                                      %555 = OpTypeVector %57 2 
                                u32_2 %556 = OpConstantComposite %85 %85 
                                u32_2 %557 = OpConstantComposite %58 %58 
                                  f32 %565 = OpConstant 3.674022E-40 
                                  u32 %600 = OpConstant 2 
                                      %602 = OpTypeVector %24 3 
                                      %603 = OpTypePointer Private %602 
                       Private i32_3* %604 = OpVariable Private 
                         Private i32* %609 = OpVariable Private 
                       Private f32_3* %618 = OpVariable Private 
                       Private i32_2* %794 = OpVariable Private 
                                  f32 %945 = OpConstant 3.674022E-40 
                                     %1117 = OpTypePointer Private %553 
                     Private bool_2* %1118 = OpVariable Private 
                                 f32 %1129 = OpConstant 3.674022E-40 
                      Private i32_2* %1241 = OpVariable Private 
                               f32_4 %1244 = OpConstantComposite %14 %14 %14 %14 
                     Private bool_2* %1254 = OpVariable Private 
                                     %1256 = OpTypeVector %24 4 
                       Private bool* %1270 = OpVariable Private 
                                     %1272 = OpTypePointer Function %139 
                 Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                 u32 %1358 = OpConstant 3 
                                     %1362 = OpTypePointer Uniform %20 
UniformConstant read_only Texture2D* %1373 = OpVariable UniformConstant 
            UniformConstant sampler* %1375 = OpVariable UniformConstant 
                                 f32 %1386 = OpConstant 3.674022E-40 
                                 f32 %1391 = OpConstant 3.674022E-40 
                                 f32 %1420 = OpConstant 3.674022E-40 
                               f32_3 %1421 = OpConstantComposite %1420 %1420 %1420 
                                 f32 %1425 = OpConstant 3.674022E-40 
                               f32_3 %1426 = OpConstantComposite %1425 %1425 %1425 
                                 f32 %1431 = OpConstant 3.674022E-40 
                               f32_3 %1432 = OpConstantComposite %1431 %1431 %1431 
                                 f32 %1437 = OpConstant 3.674022E-40 
                               f32_3 %1438 = OpConstantComposite %1437 %1437 %1437 
                                 f32 %1440 = OpConstant 3.674022E-40 
                               f32_3 %1441 = OpConstantComposite %1440 %1440 %1440 
                                     %1443 = OpTypeVector %139 3 
                                     %1444 = OpTypePointer Private %1443 
                     Private bool_3* %1445 = OpVariable Private 
                                 f32 %1446 = OpConstant 3.674022E-40 
                               f32_4 %1447 = OpConstantComposite %1446 %1446 %1446 %14 
                                 f32 %1490 = OpConstant 3.674022E-40 
                               f32_3 %1491 = OpConstantComposite %1490 %1490 %1490 
                                 f32 %1496 = OpConstant 3.674022E-40 
                               f32_3 %1497 = OpConstantComposite %1496 %1496 %1496 
                                 f32 %1500 = OpConstant 3.674022E-40 
                               f32_3 %1501 = OpConstantComposite %1500 %1500 %1500 
                                 f32 %1504 = OpConstant 3.674022E-40 
                               f32_3 %1505 = OpConstantComposite %1504 %1504 %1504 
                                 f32 %1513 = OpConstant 3.674022E-40 
                               f32_3 %1514 = OpConstantComposite %1513 %1513 %1513 
                     Private bool_3* %1518 = OpVariable Private 
                                 f32 %1519 = OpConstant 3.674022E-40 
                               f32_4 %1520 = OpConstantComposite %1519 %1519 %1519 %1519 
                                     %1525 = OpTypePointer Output %20 
                       Output f32_4* %1526 = OpVariable Output 
                                     %1538 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %307 = OpVariable Function 
                        Function f32* %320 = OpVariable Function 
                        Function f32* %373 = OpVariable Function 
                        Function f32* %393 = OpVariable Function 
                        Function f32* %402 = OpVariable Function 
                        Function f32* %420 = OpVariable Function 
                        Function f32* %432 = OpVariable Function 
                        Function f32* %573 = OpVariable Function 
                        Function f32* %592 = OpVariable Function 
                        Function f32* %629 = OpVariable Function 
                        Function f32* %649 = OpVariable Function 
                        Function f32* %718 = OpVariable Function 
                        Function f32* %736 = OpVariable Function 
                        Function f32* %766 = OpVariable Function 
                        Function f32* %785 = OpVariable Function 
                        Function f32* %815 = OpVariable Function 
                        Function f32* %835 = OpVariable Function 
                        Function f32* %904 = OpVariable Function 
                        Function f32* %922 = OpVariable Function 
                        Function f32* %953 = OpVariable Function 
                        Function f32* %972 = OpVariable Function 
                       Function f32* %1001 = OpVariable Function 
                       Function f32* %1021 = OpVariable Function 
                       Function f32* %1090 = OpVariable Function 
                       Function f32* %1108 = OpVariable Function 
                       Function f32* %1136 = OpVariable Function 
                       Function f32* %1154 = OpVariable Function 
                       Function f32* %1171 = OpVariable Function 
                       Function f32* %1188 = OpVariable Function 
                       Function f32* %1217 = OpVariable Function 
                       Function f32* %1233 = OpVariable Function 
                      Function bool* %1273 = OpVariable Function 
                       Function f32* %1311 = OpVariable Function 
                       Function f32* %1326 = OpVariable Function 
                       Function f32* %1454 = OpVariable Function 
                       Function f32* %1466 = OpVariable Function 
                       Function f32* %1478 = OpVariable Function 
                       Function f32* %1529 = OpVariable Function 
                       Function f32* %1542 = OpVariable Function 
                       Function f32* %1554 = OpVariable Function 
                                 f32_2 %12 = OpLoad vs_TEXCOORD0 
                                               OpStore %9 %12 
                                 f32_2 %13 = OpLoad %9 
                                 f32_2 %16 = OpCompositeConstruct %14 %14 
                                 f32_2 %17 = OpCompositeConstruct %15 %15 
                                 f32_2 %18 = OpExtInst %1 43 %13 %16 %17 
                                               OpStore %9 %18 
                                 f32_2 %19 = OpLoad %9 
                          Uniform f32* %27 = OpAccessChain %23 %25 
                                   f32 %28 = OpLoad %27 
                                 f32_2 %29 = OpCompositeConstruct %28 %28 
                                 f32_2 %30 = OpFMul %19 %29 
                                               OpStore %9 %30 
                   read_only Texture2D %37 = OpLoad %36 
                               sampler %41 = OpLoad %40 
            read_only Texture2DSampled %43 = OpSampledImage %37 %41 
                                 f32_2 %44 = OpLoad %9 
                                 f32_4 %45 = OpImageSampleExplicitLod %43 %44 Lod %20 
                                 f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                                               OpStore %33 %46 
                   read_only Texture2D %49 = OpLoad %36 
                               sampler %50 = OpLoad %40 
            read_only Texture2DSampled %51 = OpSampledImage %49 %50 
                                 f32_2 %52 = OpLoad %9 
                                 f32_4 %56 = OpImageSampleExplicitLod %51 %52 Lod %20ConstOffset %56 
                                   f32 %59 = OpCompositeExtract %56 1 
                                               OpStore %48 %59 
                   read_only Texture2D %61 = OpLoad %36 
                               sampler %62 = OpLoad %40 
            read_only Texture2DSampled %63 = OpSampledImage %61 %62 
                                 f32_2 %64 = OpLoad %9 
                                 f32_4 %66 = OpImageSampleExplicitLod %63 %64 Lod %20ConstOffset %66 
                                   f32 %67 = OpCompositeExtract %66 1 
                                               OpStore %60 %67 
                   read_only Texture2D %69 = OpLoad %36 
                               sampler %70 = OpLoad %40 
            read_only Texture2DSampled %71 = OpSampledImage %69 %70 
                                 f32_2 %72 = OpLoad %9 
                                 f32_4 %75 = OpImageSampleExplicitLod %71 %72 Lod %20ConstOffset %75 
                                   f32 %76 = OpCompositeExtract %75 1 
                                               OpStore %68 %76 
                   read_only Texture2D %78 = OpLoad %36 
                               sampler %79 = OpLoad %40 
            read_only Texture2DSampled %80 = OpSampledImage %78 %79 
                                 f32_2 %81 = OpLoad %9 
                                 f32_4 %83 = OpImageSampleExplicitLod %80 %81 Lod %20ConstOffset %83 
                                   f32 %84 = OpCompositeExtract %83 1 
                          Private f32* %86 = OpAccessChain %77 %85 
                                               OpStore %86 %84 
                          Private f32* %88 = OpAccessChain %33 %58 
                                   f32 %89 = OpLoad %88 
                                   f32 %90 = OpLoad %48 
                                   f32 %91 = OpExtInst %1 40 %89 %90 
                          Private f32* %92 = OpAccessChain %87 %85 
                                               OpStore %92 %91 
                          Private f32* %94 = OpAccessChain %33 %58 
                                   f32 %95 = OpLoad %94 
                                   f32 %96 = OpLoad %48 
                                   f32 %97 = OpExtInst %1 37 %95 %96 
                                               OpStore %93 %97 
                                   f32 %98 = OpLoad %60 
                          Private f32* %99 = OpAccessChain %87 %85 
                                  f32 %100 = OpLoad %99 
                                  f32 %101 = OpExtInst %1 40 %98 %100 
                         Private f32* %102 = OpAccessChain %87 %85 
                                               OpStore %102 %101 
                                  f32 %103 = OpLoad %60 
                                  f32 %104 = OpLoad %93 
                                  f32 %105 = OpExtInst %1 37 %103 %104 
                                               OpStore %93 %105 
                                  f32 %107 = OpLoad %68 
                         Private f32* %108 = OpAccessChain %77 %85 
                                  f32 %109 = OpLoad %108 
                                  f32 %110 = OpExtInst %1 40 %107 %109 
                                               OpStore %106 %110 
                                  f32 %112 = OpLoad %68 
                         Private f32* %113 = OpAccessChain %77 %85 
                                  f32 %114 = OpLoad %113 
                                  f32 %115 = OpExtInst %1 37 %112 %114 
                         Private f32* %116 = OpAccessChain %111 %85 
                                               OpStore %116 %115 
                         Private f32* %117 = OpAccessChain %87 %85 
                                  f32 %118 = OpLoad %117 
                                  f32 %119 = OpLoad %106 
                                  f32 %120 = OpExtInst %1 40 %118 %119 
                         Private f32* %121 = OpAccessChain %87 %85 
                                               OpStore %121 %120 
                                  f32 %122 = OpLoad %93 
                         Private f32* %123 = OpAccessChain %111 %85 
                                  f32 %124 = OpLoad %123 
                                  f32 %125 = OpExtInst %1 37 %122 %124 
                                               OpStore %93 %125 
                         Private f32* %126 = OpAccessChain %87 %85 
                                  f32 %127 = OpLoad %126 
                                  f32 %129 = OpFMul %127 %128 
                                               OpStore %106 %129 
                                  f32 %130 = OpLoad %93 
                                  f32 %131 = OpFNegate %130 
                         Private f32* %132 = OpAccessChain %87 %85 
                                  f32 %133 = OpLoad %132 
                                  f32 %134 = OpFAdd %131 %133 
                         Private f32* %135 = OpAccessChain %87 %85 
                                               OpStore %135 %134 
                                  f32 %136 = OpLoad %106 
                                  f32 %138 = OpExtInst %1 40 %136 %137 
                                               OpStore %93 %138 
                         Private f32* %142 = OpAccessChain %87 %85 
                                  f32 %143 = OpLoad %142 
                                  f32 %144 = OpLoad %93 
                                 bool %145 = OpFOrdGreaterThanEqual %143 %144 
                                               OpStore %141 %145 
                                 bool %146 = OpLoad %141 
                                               OpSelectionMerge %148 None 
                                               OpBranchConditional %146 %147 %148 
                                      %147 = OpLabel 
                  read_only Texture2D %149 = OpLoad %36 
                              sampler %150 = OpLoad %40 
           read_only Texture2DSampled %151 = OpSampledImage %149 %150 
                                f32_2 %152 = OpLoad %9 
                                f32_4 %154 = OpImageSampleExplicitLod %151 %152 Lod %20ConstOffset %154 
                                  f32 %155 = OpCompositeExtract %154 1 
                                               OpStore %93 %155 
                  read_only Texture2D %156 = OpLoad %36 
                              sampler %157 = OpLoad %40 
           read_only Texture2DSampled %158 = OpSampledImage %156 %157 
                                f32_2 %159 = OpLoad %9 
                                f32_4 %161 = OpImageSampleExplicitLod %158 %159 Lod %20ConstOffset %161 
                                  f32 %162 = OpCompositeExtract %161 1 
                                               OpStore %106 %162 
                  read_only Texture2D %163 = OpLoad %36 
                              sampler %164 = OpLoad %40 
           read_only Texture2DSampled %165 = OpSampledImage %163 %164 
                                f32_2 %166 = OpLoad %9 
                                f32_4 %168 = OpImageSampleExplicitLod %165 %166 Lod %20ConstOffset %168 
                                  f32 %169 = OpCompositeExtract %168 1 
                         Private f32* %170 = OpAccessChain %111 %85 
                                               OpStore %170 %169 
                  read_only Texture2D %171 = OpLoad %36 
                              sampler %172 = OpLoad %40 
           read_only Texture2DSampled %173 = OpSampledImage %171 %172 
                                f32_2 %174 = OpLoad %9 
                                f32_4 %176 = OpImageSampleExplicitLod %173 %174 Lod %20ConstOffset %176 
                                  f32 %177 = OpCompositeExtract %176 1 
                         Private f32* %178 = OpAccessChain %9 %85 
                                               OpStore %178 %177 
                                  f32 %180 = OpLoad %48 
                                  f32 %181 = OpLoad %68 
                                  f32 %182 = OpFAdd %180 %181 
                         Private f32* %183 = OpAccessChain %179 %85 
                                               OpStore %183 %182 
                                  f32 %185 = OpLoad %60 
                         Private f32* %186 = OpAccessChain %77 %85 
                                  f32 %187 = OpLoad %186 
                                  f32 %188 = OpFAdd %185 %187 
                         Private f32* %189 = OpAccessChain %184 %85 
                                               OpStore %189 %188 
                         Private f32* %190 = OpAccessChain %87 %85 
                                  f32 %191 = OpLoad %190 
                                  f32 %192 = OpFDiv %15 %191 
                         Private f32* %193 = OpAccessChain %87 %85 
                                               OpStore %193 %192 
                         Private f32* %195 = OpAccessChain %179 %85 
                                  f32 %196 = OpLoad %195 
                         Private f32* %197 = OpAccessChain %184 %85 
                                  f32 %198 = OpLoad %197 
                                  f32 %199 = OpFAdd %196 %198 
                         Private f32* %200 = OpAccessChain %194 %85 
                                               OpStore %200 %199 
                         Private f32* %201 = OpAccessChain %33 %58 
                                  f32 %202 = OpLoad %201 
                                  f32 %204 = OpFMul %202 %203 
                         Private f32* %205 = OpAccessChain %179 %85 
                                  f32 %206 = OpLoad %205 
                                  f32 %207 = OpFAdd %204 %206 
                         Private f32* %208 = OpAccessChain %179 %85 
                                               OpStore %208 %207 
                         Private f32* %209 = OpAccessChain %33 %58 
                                  f32 %210 = OpLoad %209 
                                  f32 %211 = OpFMul %210 %203 
                         Private f32* %212 = OpAccessChain %184 %85 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFAdd %211 %213 
                         Private f32* %215 = OpAccessChain %184 %85 
                                               OpStore %215 %214 
                                  f32 %217 = OpLoad %106 
                         Private f32* %218 = OpAccessChain %111 %85 
                                  f32 %219 = OpLoad %218 
                                  f32 %220 = OpFAdd %217 %219 
                                               OpStore %216 %220 
                                  f32 %221 = OpLoad %93 
                         Private f32* %222 = OpAccessChain %111 %85 
                                  f32 %223 = OpLoad %222 
                                  f32 %224 = OpFAdd %221 %223 
                         Private f32* %225 = OpAccessChain %111 %85 
                                               OpStore %225 %224 
                                  f32 %227 = OpLoad %60 
                                  f32 %228 = OpFMul %227 %203 
                                  f32 %229 = OpLoad %216 
                                  f32 %230 = OpFAdd %228 %229 
                         Private f32* %231 = OpAccessChain %226 %85 
                                               OpStore %231 %230 
                                  f32 %232 = OpLoad %68 
                                  f32 %233 = OpFMul %232 %203 
                         Private f32* %234 = OpAccessChain %111 %85 
                                  f32 %235 = OpLoad %234 
                                  f32 %236 = OpFAdd %233 %235 
                         Private f32* %237 = OpAccessChain %111 %85 
                                               OpStore %237 %236 
                         Private f32* %238 = OpAccessChain %9 %85 
                                  f32 %239 = OpLoad %238 
                                  f32 %240 = OpLoad %93 
                                  f32 %241 = OpFAdd %239 %240 
                                               OpStore %93 %241 
                                  f32 %242 = OpLoad %106 
                         Private f32* %243 = OpAccessChain %9 %85 
                                  f32 %244 = OpLoad %243 
                                  f32 %245 = OpFAdd %242 %244 
                         Private f32* %246 = OpAccessChain %9 %85 
                                               OpStore %246 %245 
                         Private f32* %247 = OpAccessChain %179 %85 
                                  f32 %248 = OpLoad %247 
                                  f32 %249 = OpExtInst %1 4 %248 
                                  f32 %251 = OpFMul %249 %250 
                         Private f32* %252 = OpAccessChain %226 %85 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpExtInst %1 4 %253 
                                  f32 %255 = OpFAdd %251 %254 
                         Private f32* %256 = OpAccessChain %179 %85 
                                               OpStore %256 %255 
                         Private f32* %257 = OpAccessChain %184 %85 
                                  f32 %258 = OpLoad %257 
                                  f32 %259 = OpExtInst %1 4 %258 
                                  f32 %260 = OpFMul %259 %250 
                         Private f32* %261 = OpAccessChain %111 %85 
                                  f32 %262 = OpLoad %261 
                                  f32 %263 = OpExtInst %1 4 %262 
                                  f32 %264 = OpFAdd %260 %263 
                                               OpStore %106 %264 
                         Private f32* %265 = OpAccessChain %77 %85 
                                  f32 %266 = OpLoad %265 
                                  f32 %267 = OpFMul %266 %203 
                                  f32 %268 = OpLoad %93 
                                  f32 %269 = OpFAdd %267 %268 
                         Private f32* %270 = OpAccessChain %111 %85 
                                               OpStore %270 %269 
                                  f32 %271 = OpLoad %48 
                                  f32 %272 = OpFMul %271 %203 
                         Private f32* %273 = OpAccessChain %9 %85 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpFAdd %272 %274 
                         Private f32* %276 = OpAccessChain %9 %85 
                                               OpStore %276 %275 
                         Private f32* %277 = OpAccessChain %179 %85 
                                  f32 %278 = OpLoad %277 
                         Private f32* %279 = OpAccessChain %111 %85 
                                  f32 %280 = OpLoad %279 
                                  f32 %281 = OpExtInst %1 4 %280 
                                  f32 %282 = OpFAdd %278 %281 
                         Private f32* %283 = OpAccessChain %179 %85 
                                               OpStore %283 %282 
                                  f32 %284 = OpLoad %106 
                         Private f32* %285 = OpAccessChain %9 %85 
                                  f32 %286 = OpLoad %285 
                                  f32 %287 = OpExtInst %1 4 %286 
                                  f32 %288 = OpFAdd %284 %287 
                         Private f32* %289 = OpAccessChain %9 %85 
                                               OpStore %289 %288 
                                  f32 %290 = OpLoad %216 
                                  f32 %291 = OpLoad %93 
                                  f32 %292 = OpFAdd %290 %291 
                                               OpStore %93 %292 
                         Private f32* %294 = OpAccessChain %179 %85 
                                  f32 %295 = OpLoad %294 
                         Private f32* %296 = OpAccessChain %9 %85 
                                  f32 %297 = OpLoad %296 
                                 bool %298 = OpFOrdGreaterThanEqual %295 %297 
                                               OpStore %293 %298 
                         Private f32* %299 = OpAccessChain %194 %85 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFMul %300 %250 
                                  f32 %302 = OpLoad %93 
                                  f32 %303 = OpFAdd %301 %302 
                         Private f32* %304 = OpAccessChain %179 %85 
                                               OpStore %304 %303 
                                 bool %305 = OpLoad %293 
                                               OpSelectionMerge %309 None 
                                               OpBranchConditional %305 %308 %311 
                                      %308 = OpLabel 
                                  f32 %310 = OpLoad %68 
                                               OpStore %307 %310 
                                               OpBranch %309 
                                      %311 = OpLabel 
                         Private f32* %312 = OpAccessChain %77 %85 
                                  f32 %313 = OpLoad %312 
                                               OpStore %307 %313 
                                               OpBranch %309 
                                      %309 = OpLabel 
                                  f32 %314 = OpLoad %307 
                                               OpStore %68 %314 
                                 bool %315 = OpLoad %293 
                                  f32 %316 = OpLoad %48 
                                  f32 %317 = OpLoad %60 
                                  f32 %318 = OpSelect %315 %316 %317 
                                               OpStore %48 %318 
                                 bool %319 = OpLoad %293 
                                               OpSelectionMerge %322 None 
                                               OpBranchConditional %319 %321 %326 
                                      %321 = OpLabel 
                         Uniform f32* %324 = OpAccessChain %23 %323 %58 
                                  f32 %325 = OpLoad %324 
                                               OpStore %320 %325 
                                               OpBranch %322 
                                      %326 = OpLabel 
                         Uniform f32* %327 = OpAccessChain %23 %323 %85 
                                  f32 %328 = OpLoad %327 
                                               OpStore %320 %328 
                                               OpBranch %322 
                                      %322 = OpLabel 
                                  f32 %329 = OpLoad %320 
                                               OpStore %60 %329 
                         Private f32* %330 = OpAccessChain %179 %85 
                                  f32 %331 = OpLoad %330 
                                  f32 %333 = OpFMul %331 %332 
                         Private f32* %334 = OpAccessChain %33 %58 
                                  f32 %335 = OpLoad %334 
                                  f32 %336 = OpFNegate %335 
                                  f32 %337 = OpFAdd %333 %336 
                         Private f32* %338 = OpAccessChain %179 %85 
                                               OpStore %338 %337 
                         Private f32* %339 = OpAccessChain %33 %58 
                                  f32 %340 = OpLoad %339 
                                  f32 %341 = OpFNegate %340 
                                  f32 %342 = OpLoad %68 
                                  f32 %343 = OpFAdd %341 %342 
                         Private f32* %344 = OpAccessChain %77 %85 
                                               OpStore %344 %343 
                         Private f32* %345 = OpAccessChain %33 %58 
                                  f32 %346 = OpLoad %345 
                                  f32 %347 = OpFNegate %346 
                                  f32 %348 = OpLoad %48 
                                  f32 %349 = OpFAdd %347 %348 
                                               OpStore %93 %349 
                         Private f32* %350 = OpAccessChain %33 %58 
                                  f32 %351 = OpLoad %350 
                                  f32 %352 = OpLoad %68 
                                  f32 %353 = OpFAdd %351 %352 
                                               OpStore %68 %353 
                         Private f32* %354 = OpAccessChain %33 %58 
                                  f32 %355 = OpLoad %354 
                                  f32 %356 = OpLoad %48 
                                  f32 %357 = OpFAdd %355 %356 
                                               OpStore %48 %357 
                         Private f32* %359 = OpAccessChain %77 %85 
                                  f32 %360 = OpLoad %359 
                                  f32 %361 = OpExtInst %1 4 %360 
                                  f32 %362 = OpLoad %93 
                                  f32 %363 = OpExtInst %1 4 %362 
                                 bool %364 = OpFOrdGreaterThanEqual %361 %363 
                                               OpStore %358 %364 
                                  f32 %365 = OpLoad %93 
                                  f32 %366 = OpExtInst %1 4 %365 
                         Private f32* %367 = OpAccessChain %77 %85 
                                  f32 %368 = OpLoad %367 
                                  f32 %369 = OpExtInst %1 4 %368 
                                  f32 %370 = OpExtInst %1 40 %366 %369 
                         Private f32* %371 = OpAccessChain %77 %85 
                                               OpStore %371 %370 
                                 bool %372 = OpLoad %358 
                                               OpSelectionMerge %375 None 
                                               OpBranchConditional %372 %374 %378 
                                      %374 = OpLabel 
                                  f32 %376 = OpLoad %60 
                                  f32 %377 = OpFNegate %376 
                                               OpStore %373 %377 
                                               OpBranch %375 
                                      %378 = OpLabel 
                                  f32 %379 = OpLoad %60 
                                               OpStore %373 %379 
                                               OpBranch %375 
                                      %375 = OpLabel 
                                  f32 %380 = OpLoad %373 
                                               OpStore %60 %380 
                         Private f32* %381 = OpAccessChain %87 %85 
                                  f32 %382 = OpLoad %381 
                         Private f32* %383 = OpAccessChain %179 %85 
                                  f32 %384 = OpLoad %383 
                                  f32 %385 = OpExtInst %1 4 %384 
                                  f32 %386 = OpFMul %382 %385 
                         Private f32* %387 = OpAccessChain %179 %85 
                                               OpStore %387 %386 
                         Private f32* %388 = OpAccessChain %179 %85 
                                  f32 %389 = OpLoad %388 
                                  f32 %390 = OpExtInst %1 43 %389 %14 %15 
                         Private f32* %391 = OpAccessChain %179 %85 
                                               OpStore %391 %390 
                                 bool %392 = OpLoad %293 
                                               OpSelectionMerge %395 None 
                                               OpBranchConditional %392 %394 %398 
                                      %394 = OpLabel 
                         Uniform f32* %396 = OpAccessChain %23 %323 %85 
                                  f32 %397 = OpLoad %396 
                                               OpStore %393 %397 
                                               OpBranch %395 
                                      %398 = OpLabel 
                                               OpStore %393 %14 
                                               OpBranch %395 
                                      %395 = OpLabel 
                                  f32 %399 = OpLoad %393 
                         Private f32* %400 = OpAccessChain %87 %85 
                                               OpStore %400 %399 
                                 bool %401 = OpLoad %293 
                                               OpSelectionMerge %404 None 
                                               OpBranchConditional %401 %403 %405 
                                      %403 = OpLabel 
                                               OpStore %402 %14 
                                               OpBranch %404 
                                      %405 = OpLabel 
                         Uniform f32* %406 = OpAccessChain %23 %323 %58 
                                  f32 %407 = OpLoad %406 
                                               OpStore %402 %407 
                                               OpBranch %404 
                                      %404 = OpLabel 
                                  f32 %408 = OpLoad %402 
                         Private f32* %409 = OpAccessChain %87 %58 
                                               OpStore %409 %408 
                                  f32 %410 = OpLoad %60 
                                f32_2 %411 = OpCompositeConstruct %410 %410 
                                f32_2 %414 = OpFMul %411 %413 
                                f32_2 %415 = OpLoad vs_TEXCOORD0 
                                f32_2 %416 = OpFAdd %414 %415 
                                f32_3 %417 = OpLoad %111 
                                f32_3 %418 = OpVectorShuffle %417 %416 3 4 2 
                                               OpStore %111 %418 
                                 bool %419 = OpLoad %293 
                                               OpSelectionMerge %422 None 
                                               OpBranchConditional %419 %421 %426 
                                      %421 = OpLabel 
                           Input f32* %424 = OpAccessChain vs_TEXCOORD0 %85 
                                  f32 %425 = OpLoad %424 
                                               OpStore %420 %425 
                                               OpBranch %422 
                                      %426 = OpLabel 
                         Private f32* %427 = OpAccessChain %111 %85 
                                  f32 %428 = OpLoad %427 
                                               OpStore %420 %428 
                                               OpBranch %422 
                                      %422 = OpLabel 
                                  f32 %429 = OpLoad %420 
                         Private f32* %430 = OpAccessChain %111 %85 
                                               OpStore %430 %429 
                                 bool %431 = OpLoad %293 
                                               OpSelectionMerge %434 None 
                                               OpBranchConditional %431 %433 %437 
                                      %433 = OpLabel 
                         Private f32* %435 = OpAccessChain %111 %58 
                                  f32 %436 = OpLoad %435 
                                               OpStore %432 %436 
                                               OpBranch %434 
                                      %437 = OpLabel 
                           Input f32* %438 = OpAccessChain vs_TEXCOORD0 %58 
                                  f32 %439 = OpLoad %438 
                                               OpStore %432 %439 
                                               OpBranch %434 
                                      %434 = OpLabel 
                                  f32 %440 = OpLoad %432 
                         Private f32* %441 = OpAccessChain %111 %58 
                                               OpStore %441 %440 
                                f32_2 %442 = OpLoad %87 
                                f32_2 %443 = OpFNegate %442 
                                f32_3 %444 = OpLoad %111 
                                f32_2 %445 = OpVectorShuffle %444 %444 0 1 
                                f32_2 %446 = OpFAdd %443 %445 
                                f32_3 %447 = OpLoad %226 
                                f32_3 %448 = OpVectorShuffle %447 %446 3 4 2 
                                               OpStore %226 %448 
                                f32_2 %450 = OpLoad %87 
                                f32_3 %451 = OpLoad %111 
                                f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                f32_2 %453 = OpFAdd %450 %452 
                                               OpStore %449 %453 
                         Private f32* %454 = OpAccessChain %179 %85 
                                  f32 %455 = OpLoad %454 
                                  f32 %456 = OpFMul %455 %203 
                                  f32 %458 = OpFAdd %456 %457 
                         Private f32* %459 = OpAccessChain %111 %85 
                                               OpStore %459 %458 
                                f32_3 %460 = OpLoad %226 
                                f32_2 %461 = OpVectorShuffle %460 %460 0 1 
                                               OpStore %184 %461 
                                f32_2 %462 = OpLoad %184 
                                f32_2 %463 = OpCompositeConstruct %14 %14 
                                f32_2 %464 = OpCompositeConstruct %15 %15 
                                f32_2 %465 = OpExtInst %1 43 %462 %463 %464 
                                               OpStore %184 %465 
                                f32_2 %466 = OpLoad %184 
                         Uniform f32* %467 = OpAccessChain %23 %25 
                                  f32 %468 = OpLoad %467 
                                f32_2 %469 = OpCompositeConstruct %468 %468 
                                f32_2 %470 = OpFMul %466 %469 
                                               OpStore %184 %470 
                  read_only Texture2D %471 = OpLoad %36 
                              sampler %472 = OpLoad %40 
           read_only Texture2DSampled %473 = OpSampledImage %471 %472 
                                f32_2 %474 = OpLoad %184 
                                f32_4 %475 = OpImageSampleExplicitLod %473 %474 Lod %20 
                                  f32 %476 = OpCompositeExtract %475 1 
                         Private f32* %477 = OpAccessChain %184 %85 
                                               OpStore %477 %476 
                         Private f32* %478 = OpAccessChain %179 %85 
                                  f32 %479 = OpLoad %478 
                         Private f32* %480 = OpAccessChain %179 %85 
                                  f32 %481 = OpLoad %480 
                                  f32 %482 = OpFMul %479 %481 
                         Private f32* %483 = OpAccessChain %179 %85 
                                               OpStore %483 %482 
                                f32_2 %484 = OpLoad %449 
                                               OpStore %194 %484 
                                f32_2 %485 = OpLoad %194 
                                f32_2 %486 = OpCompositeConstruct %14 %14 
                                f32_2 %487 = OpCompositeConstruct %15 %15 
                                f32_2 %488 = OpExtInst %1 43 %485 %486 %487 
                                               OpStore %194 %488 
                                f32_2 %489 = OpLoad %194 
                         Uniform f32* %490 = OpAccessChain %23 %25 
                                  f32 %491 = OpLoad %490 
                                f32_2 %492 = OpCompositeConstruct %491 %491 
                                f32_2 %493 = OpFMul %489 %492 
                                               OpStore %194 %493 
                  read_only Texture2D %494 = OpLoad %36 
                              sampler %495 = OpLoad %40 
           read_only Texture2DSampled %496 = OpSampledImage %494 %495 
                                f32_2 %497 = OpLoad %194 
                                f32_4 %498 = OpImageSampleExplicitLod %496 %497 Lod %20 
                                  f32 %499 = OpCompositeExtract %498 1 
                         Private f32* %500 = OpAccessChain %194 %85 
                                               OpStore %500 %499 
                                 bool %501 = OpLoad %358 
                                  f32 %502 = OpLoad %68 
                                  f32 %503 = OpLoad %48 
                                  f32 %504 = OpSelect %501 %502 %503 
                                               OpStore %48 %504 
                         Private f32* %505 = OpAccessChain %77 %85 
                                  f32 %506 = OpLoad %505 
                                  f32 %508 = OpFMul %506 %507 
                                               OpStore %68 %508 
                                  f32 %509 = OpLoad %48 
                                  f32 %510 = OpFNegate %509 
                                  f32 %511 = OpFMul %510 %412 
                         Private f32* %512 = OpAccessChain %33 %58 
                                  f32 %513 = OpLoad %512 
                                  f32 %514 = OpFAdd %511 %513 
                         Private f32* %515 = OpAccessChain %77 %85 
                                               OpStore %515 %514 
                         Private f32* %516 = OpAccessChain %179 %85 
                                  f32 %517 = OpLoad %516 
                         Private f32* %518 = OpAccessChain %111 %85 
                                  f32 %519 = OpLoad %518 
                                  f32 %520 = OpFMul %517 %519 
                         Private f32* %521 = OpAccessChain %179 %85 
                                               OpStore %521 %520 
                         Private f32* %524 = OpAccessChain %77 %85 
                                  f32 %525 = OpLoad %524 
                                 bool %526 = OpFOrdLessThan %525 %14 
                                  u32 %528 = OpSelect %526 %527 %85 
                                  i32 %529 = OpBitcast %528 
                                               OpStore %523 %529 
                                  f32 %530 = OpLoad %48 
                                  f32 %531 = OpFNegate %530 
                                  f32 %532 = OpFMul %531 %412 
                         Private f32* %533 = OpAccessChain %184 %85 
                                  f32 %534 = OpLoad %533 
                                  f32 %535 = OpFAdd %532 %534 
                         Private f32* %536 = OpAccessChain %111 %85 
                                               OpStore %536 %535 
                                  f32 %537 = OpLoad %48 
                                  f32 %538 = OpFNegate %537 
                                  f32 %539 = OpFMul %538 %412 
                         Private f32* %540 = OpAccessChain %194 %85 
                                  f32 %541 = OpLoad %540 
                                  f32 %542 = OpFAdd %539 %541 
                         Private f32* %543 = OpAccessChain %111 %58 
                                               OpStore %543 %542 
                                f32_3 %546 = OpLoad %111 
                                f32_4 %547 = OpVectorShuffle %546 %546 0 1 0 1 
                                f32_4 %548 = OpExtInst %1 4 %547 
                                  f32 %549 = OpLoad %68 
                                f32_4 %550 = OpCompositeConstruct %549 %549 %549 %549 
                               bool_4 %552 = OpFOrdGreaterThanEqual %548 %550 
                               bool_2 %554 = OpVectorShuffle %552 %552 0 1 
                                u32_2 %558 = OpSelect %554 %557 %556 
                                u32_2 %559 = OpCompositeConstruct %527 %527 
                                u32_2 %560 = OpIMul %558 %559 
                                i32_2 %561 = OpBitcast %560 
                                               OpStore %545 %561 
                         Private f32* %562 = OpAccessChain %87 %85 
                                  f32 %563 = OpLoad %562 
                                  f32 %564 = OpFNegate %563 
                                  f32 %566 = OpFMul %564 %565 
                         Private f32* %567 = OpAccessChain %226 %85 
                                  f32 %568 = OpLoad %567 
                                  f32 %569 = OpFAdd %566 %568 
                                               OpStore %106 %569 
                         Private i32* %570 = OpAccessChain %545 %85 
                                  i32 %571 = OpLoad %570 
                                 bool %572 = OpINotEqual %571 %25 
                                               OpSelectionMerge %575 None 
                                               OpBranchConditional %572 %574 %578 
                                      %574 = OpLabel 
                         Private f32* %576 = OpAccessChain %226 %85 
                                  f32 %577 = OpLoad %576 
                                               OpStore %573 %577 
                                               OpBranch %575 
                                      %578 = OpLabel 
                                  f32 %579 = OpLoad %106 
                                               OpStore %573 %579 
                                               OpBranch %575 
                                      %575 = OpLabel 
                                  f32 %580 = OpLoad %573 
                         Private f32* %581 = OpAccessChain %226 %85 
                                               OpStore %581 %580 
                         Private f32* %582 = OpAccessChain %87 %58 
                                  f32 %583 = OpLoad %582 
                                  f32 %584 = OpFNegate %583 
                                  f32 %585 = OpFMul %584 %565 
                         Private f32* %586 = OpAccessChain %226 %58 
                                  f32 %587 = OpLoad %586 
                                  f32 %588 = OpFAdd %585 %587 
                                               OpStore %106 %588 
                         Private i32* %589 = OpAccessChain %545 %85 
                                  i32 %590 = OpLoad %589 
                                 bool %591 = OpINotEqual %590 %25 
                                               OpSelectionMerge %594 None 
                                               OpBranchConditional %591 %593 %597 
                                      %593 = OpLabel 
                         Private f32* %595 = OpAccessChain %226 %58 
                                  f32 %596 = OpLoad %595 
                                               OpStore %592 %596 
                                               OpBranch %594 
                                      %597 = OpLabel 
                                  f32 %598 = OpLoad %106 
                                               OpStore %592 %598 
                                               OpBranch %594 
                                      %594 = OpLabel 
                                  f32 %599 = OpLoad %592 
                         Private f32* %601 = OpAccessChain %226 %600 
                                               OpStore %601 %599 
                                i32_2 %605 = OpLoad %545 
                                i32_2 %606 = OpNot %605 
                                i32_3 %607 = OpLoad %604 
                                i32_3 %608 = OpVectorShuffle %607 %606 3 1 4 
                                               OpStore %604 %608 
                         Private i32* %610 = OpAccessChain %604 %600 
                                  i32 %611 = OpLoad %610 
                                  u32 %612 = OpBitcast %611 
                         Private i32* %613 = OpAccessChain %604 %85 
                                  i32 %614 = OpLoad %613 
                                  u32 %615 = OpBitcast %614 
                                  u32 %616 = OpBitwiseOr %612 %615 
                                  i32 %617 = OpBitcast %616 
                                               OpStore %609 %617 
                         Private f32* %619 = OpAccessChain %87 %85 
                                  f32 %620 = OpLoad %619 
                                  f32 %621 = OpFMul %620 %565 
                         Private f32* %622 = OpAccessChain %449 %85 
                                  f32 %623 = OpLoad %622 
                                  f32 %624 = OpFAdd %621 %623 
                         Private f32* %625 = OpAccessChain %618 %85 
                                               OpStore %625 %624 
                         Private i32* %626 = OpAccessChain %545 %58 
                                  i32 %627 = OpLoad %626 
                                 bool %628 = OpINotEqual %627 %25 
                                               OpSelectionMerge %631 None 
                                               OpBranchConditional %628 %630 %634 
                                      %630 = OpLabel 
                         Private f32* %632 = OpAccessChain %449 %85 
                                  f32 %633 = OpLoad %632 
                                               OpStore %629 %633 
                                               OpBranch %631 
                                      %634 = OpLabel 
                         Private f32* %635 = OpAccessChain %618 %85 
                                  f32 %636 = OpLoad %635 
                                               OpStore %629 %636 
                                               OpBranch %631 
                                      %631 = OpLabel 
                                  f32 %637 = OpLoad %629 
                         Private f32* %638 = OpAccessChain %618 %85 
                                               OpStore %638 %637 
                         Private f32* %639 = OpAccessChain %87 %58 
                                  f32 %640 = OpLoad %639 
                                  f32 %641 = OpFMul %640 %565 
                         Private f32* %642 = OpAccessChain %449 %58 
                                  f32 %643 = OpLoad %642 
                                  f32 %644 = OpFAdd %641 %643 
                         Private f32* %645 = OpAccessChain %449 %85 
                                               OpStore %645 %644 
                         Private i32* %646 = OpAccessChain %545 %58 
                                  i32 %647 = OpLoad %646 
                                 bool %648 = OpINotEqual %647 %25 
                                               OpSelectionMerge %651 None 
                                               OpBranchConditional %648 %650 %654 
                                      %650 = OpLabel 
                         Private f32* %652 = OpAccessChain %449 %58 
                                  f32 %653 = OpLoad %652 
                                               OpStore %649 %653 
                                               OpBranch %651 
                                      %654 = OpLabel 
                         Private f32* %655 = OpAccessChain %449 %85 
                                  f32 %656 = OpLoad %655 
                                               OpStore %649 %656 
                                               OpBranch %651 
                                      %651 = OpLabel 
                                  f32 %657 = OpLoad %649 
                         Private f32* %658 = OpAccessChain %618 %600 
                                               OpStore %658 %657 
                                  i32 %659 = OpLoad %609 
                                 bool %660 = OpINotEqual %659 %25 
                                               OpSelectionMerge %662 None 
                                               OpBranchConditional %660 %661 %662 
                                      %661 = OpLabel 
                         Private i32* %663 = OpAccessChain %545 %85 
                                  i32 %664 = OpLoad %663 
                                 bool %665 = OpIEqual %664 %25 
                                               OpSelectionMerge %667 None 
                                               OpBranchConditional %665 %666 %667 
                                      %666 = OpLabel 
                                f32_3 %668 = OpLoad %226 
                                f32_2 %669 = OpVectorShuffle %668 %668 0 2 
                                               OpStore %449 %669 
                                f32_2 %670 = OpLoad %449 
                                f32_2 %671 = OpCompositeConstruct %14 %14 
                                f32_2 %672 = OpCompositeConstruct %15 %15 
                                f32_2 %673 = OpExtInst %1 43 %670 %671 %672 
                                               OpStore %449 %673 
                                f32_2 %674 = OpLoad %449 
                         Uniform f32* %675 = OpAccessChain %23 %25 
                                  f32 %676 = OpLoad %675 
                                f32_2 %677 = OpCompositeConstruct %676 %676 
                                f32_2 %678 = OpFMul %674 %677 
                                               OpStore %449 %678 
                  read_only Texture2D %679 = OpLoad %36 
                              sampler %680 = OpLoad %40 
           read_only Texture2DSampled %681 = OpSampledImage %679 %680 
                                f32_2 %682 = OpLoad %449 
                                f32_4 %683 = OpImageSampleExplicitLod %681 %682 Lod %20 
                                  f32 %684 = OpCompositeExtract %683 1 
                         Private f32* %685 = OpAccessChain %111 %85 
                                               OpStore %685 %684 
                                               OpBranch %667 
                                      %667 = OpLabel 
                         Private i32* %686 = OpAccessChain %545 %58 
                                  i32 %687 = OpLoad %686 
                                 bool %688 = OpIEqual %687 %25 
                                               OpSelectionMerge %690 None 
                                               OpBranchConditional %688 %689 %690 
                                      %689 = OpLabel 
                                f32_3 %691 = OpLoad %618 
                                f32_2 %692 = OpVectorShuffle %691 %691 0 2 
                                               OpStore %449 %692 
                                f32_2 %693 = OpLoad %449 
                                f32_2 %694 = OpCompositeConstruct %14 %14 
                                f32_2 %695 = OpCompositeConstruct %15 %15 
                                f32_2 %696 = OpExtInst %1 43 %693 %694 %695 
                                               OpStore %449 %696 
                                f32_2 %697 = OpLoad %449 
                         Uniform f32* %698 = OpAccessChain %23 %25 
                                  f32 %699 = OpLoad %698 
                                f32_2 %700 = OpCompositeConstruct %699 %699 
                                f32_2 %701 = OpFMul %697 %700 
                                               OpStore %449 %701 
                  read_only Texture2D %702 = OpLoad %36 
                              sampler %703 = OpLoad %40 
           read_only Texture2DSampled %704 = OpSampledImage %702 %703 
                                f32_2 %705 = OpLoad %449 
                                f32_4 %706 = OpImageSampleExplicitLod %704 %705 Lod %20 
                                  f32 %707 = OpCompositeExtract %706 1 
                         Private f32* %708 = OpAccessChain %111 %58 
                                               OpStore %708 %707 
                                               OpBranch %690 
                                      %690 = OpLabel 
                                  f32 %709 = OpLoad %48 
                                  f32 %710 = OpFNegate %709 
                                  f32 %711 = OpFMul %710 %412 
                         Private f32* %712 = OpAccessChain %111 %85 
                                  f32 %713 = OpLoad %712 
                                  f32 %714 = OpFAdd %711 %713 
                                               OpStore %106 %714 
                         Private i32* %715 = OpAccessChain %545 %85 
                                  i32 %716 = OpLoad %715 
                                 bool %717 = OpINotEqual %716 %25 
                                               OpSelectionMerge %720 None 
                                               OpBranchConditional %717 %719 %723 
                                      %719 = OpLabel 
                         Private f32* %721 = OpAccessChain %111 %85 
                                  f32 %722 = OpLoad %721 
                                               OpStore %718 %722 
                                               OpBranch %720 
                                      %723 = OpLabel 
                                  f32 %724 = OpLoad %106 
                                               OpStore %718 %724 
                                               OpBranch %720 
                                      %720 = OpLabel 
                                  f32 %725 = OpLoad %718 
                         Private f32* %726 = OpAccessChain %111 %85 
                                               OpStore %726 %725 
                                  f32 %727 = OpLoad %48 
                                  f32 %728 = OpFNegate %727 
                                  f32 %729 = OpFMul %728 %412 
                         Private f32* %730 = OpAccessChain %111 %58 
                                  f32 %731 = OpLoad %730 
                                  f32 %732 = OpFAdd %729 %731 
                                               OpStore %106 %732 
                         Private i32* %733 = OpAccessChain %545 %58 
                                  i32 %734 = OpLoad %733 
                                 bool %735 = OpINotEqual %734 %25 
                                               OpSelectionMerge %738 None 
                                               OpBranchConditional %735 %737 %741 
                                      %737 = OpLabel 
                         Private f32* %739 = OpAccessChain %111 %58 
                                  f32 %740 = OpLoad %739 
                                               OpStore %736 %740 
                                               OpBranch %738 
                                      %741 = OpLabel 
                                  f32 %742 = OpLoad %106 
                                               OpStore %736 %742 
                                               OpBranch %738 
                                      %738 = OpLabel 
                                  f32 %743 = OpLoad %736 
                         Private f32* %744 = OpAccessChain %111 %58 
                                               OpStore %744 %743 
                                f32_3 %745 = OpLoad %111 
                                f32_4 %746 = OpVectorShuffle %745 %745 0 1 0 1 
                                f32_4 %747 = OpExtInst %1 4 %746 
                                  f32 %748 = OpLoad %68 
                                f32_4 %749 = OpCompositeConstruct %748 %748 %748 %748 
                               bool_4 %750 = OpFOrdGreaterThanEqual %747 %749 
                               bool_2 %751 = OpVectorShuffle %750 %750 0 1 
                                u32_2 %752 = OpSelect %751 %557 %556 
                                u32_2 %753 = OpCompositeConstruct %527 %527 
                                u32_2 %754 = OpIMul %752 %753 
                                i32_2 %755 = OpBitcast %754 
                                               OpStore %545 %755 
                         Private f32* %756 = OpAccessChain %87 %85 
                                  f32 %757 = OpLoad %756 
                                  f32 %758 = OpFNegate %757 
                                  f32 %759 = OpFMul %758 %250 
                         Private f32* %760 = OpAccessChain %226 %85 
                                  f32 %761 = OpLoad %760 
                                  f32 %762 = OpFAdd %759 %761 
                                               OpStore %106 %762 
                         Private i32* %763 = OpAccessChain %545 %85 
                                  i32 %764 = OpLoad %763 
                                 bool %765 = OpINotEqual %764 %25 
                                               OpSelectionMerge %768 None 
                                               OpBranchConditional %765 %767 %771 
                                      %767 = OpLabel 
                         Private f32* %769 = OpAccessChain %226 %85 
                                  f32 %770 = OpLoad %769 
                                               OpStore %766 %770 
                                               OpBranch %768 
                                      %771 = OpLabel 
                                  f32 %772 = OpLoad %106 
                                               OpStore %766 %772 
                                               OpBranch %768 
                                      %768 = OpLabel 
                                  f32 %773 = OpLoad %766 
                         Private f32* %774 = OpAccessChain %226 %85 
                                               OpStore %774 %773 
                         Private f32* %775 = OpAccessChain %87 %58 
                                  f32 %776 = OpLoad %775 
                                  f32 %777 = OpFNegate %776 
                                  f32 %778 = OpFMul %777 %250 
                         Private f32* %779 = OpAccessChain %226 %600 
                                  f32 %780 = OpLoad %779 
                                  f32 %781 = OpFAdd %778 %780 
                                               OpStore %106 %781 
                         Private i32* %782 = OpAccessChain %545 %85 
                                  i32 %783 = OpLoad %782 
                                 bool %784 = OpINotEqual %783 %25 
                                               OpSelectionMerge %787 None 
                                               OpBranchConditional %784 %786 %790 
                                      %786 = OpLabel 
                         Private f32* %788 = OpAccessChain %226 %600 
                                  f32 %789 = OpLoad %788 
                                               OpStore %785 %789 
                                               OpBranch %787 
                                      %790 = OpLabel 
                                  f32 %791 = OpLoad %106 
                                               OpStore %785 %791 
                                               OpBranch %787 
                                      %787 = OpLabel 
                                  f32 %792 = OpLoad %785 
                         Private f32* %793 = OpAccessChain %226 %600 
                                               OpStore %793 %792 
                                i32_2 %795 = OpLoad %545 
                                i32_2 %796 = OpNot %795 
                                               OpStore %794 %796 
                         Private i32* %797 = OpAccessChain %794 %58 
                                  i32 %798 = OpLoad %797 
                                  u32 %799 = OpBitcast %798 
                         Private i32* %800 = OpAccessChain %794 %85 
                                  i32 %801 = OpLoad %800 
                                  u32 %802 = OpBitcast %801 
                                  u32 %803 = OpBitwiseOr %799 %802 
                                  i32 %804 = OpBitcast %803 
                                               OpStore %609 %804 
                         Private f32* %805 = OpAccessChain %87 %85 
                                  f32 %806 = OpLoad %805 
                                  f32 %807 = OpFMul %806 %250 
                         Private f32* %808 = OpAccessChain %618 %85 
                                  f32 %809 = OpLoad %808 
                                  f32 %810 = OpFAdd %807 %809 
                         Private f32* %811 = OpAccessChain %449 %85 
                                               OpStore %811 %810 
                         Private i32* %812 = OpAccessChain %545 %58 
                                  i32 %813 = OpLoad %812 
                                 bool %814 = OpINotEqual %813 %25 
                                               OpSelectionMerge %817 None 
                                               OpBranchConditional %814 %816 %820 
                                      %816 = OpLabel 
                         Private f32* %818 = OpAccessChain %618 %85 
                                  f32 %819 = OpLoad %818 
                                               OpStore %815 %819 
                                               OpBranch %817 
                                      %820 = OpLabel 
                         Private f32* %821 = OpAccessChain %449 %85 
                                  f32 %822 = OpLoad %821 
                                               OpStore %815 %822 
                                               OpBranch %817 
                                      %817 = OpLabel 
                                  f32 %823 = OpLoad %815 
                         Private f32* %824 = OpAccessChain %618 %85 
                                               OpStore %824 %823 
                         Private f32* %825 = OpAccessChain %87 %58 
                                  f32 %826 = OpLoad %825 
                                  f32 %827 = OpFMul %826 %250 
                         Private f32* %828 = OpAccessChain %618 %600 
                                  f32 %829 = OpLoad %828 
                                  f32 %830 = OpFAdd %827 %829 
                         Private f32* %831 = OpAccessChain %449 %85 
                                               OpStore %831 %830 
                         Private i32* %832 = OpAccessChain %545 %58 
                                  i32 %833 = OpLoad %832 
                                 bool %834 = OpINotEqual %833 %25 
                                               OpSelectionMerge %837 None 
                                               OpBranchConditional %834 %836 %840 
                                      %836 = OpLabel 
                         Private f32* %838 = OpAccessChain %618 %600 
                                  f32 %839 = OpLoad %838 
                                               OpStore %835 %839 
                                               OpBranch %837 
                                      %840 = OpLabel 
                         Private f32* %841 = OpAccessChain %449 %85 
                                  f32 %842 = OpLoad %841 
                                               OpStore %835 %842 
                                               OpBranch %837 
                                      %837 = OpLabel 
                                  f32 %843 = OpLoad %835 
                         Private f32* %844 = OpAccessChain %618 %600 
                                               OpStore %844 %843 
                                  i32 %845 = OpLoad %609 
                                 bool %846 = OpINotEqual %845 %25 
                                               OpSelectionMerge %848 None 
                                               OpBranchConditional %846 %847 %848 
                                      %847 = OpLabel 
                         Private i32* %849 = OpAccessChain %545 %85 
                                  i32 %850 = OpLoad %849 
                                 bool %851 = OpIEqual %850 %25 
                                               OpSelectionMerge %853 None 
                                               OpBranchConditional %851 %852 %853 
                                      %852 = OpLabel 
                                f32_3 %854 = OpLoad %226 
                                f32_2 %855 = OpVectorShuffle %854 %854 0 2 
                                               OpStore %449 %855 
                                f32_2 %856 = OpLoad %449 
                                f32_2 %857 = OpCompositeConstruct %14 %14 
                                f32_2 %858 = OpCompositeConstruct %15 %15 
                                f32_2 %859 = OpExtInst %1 43 %856 %857 %858 
                                               OpStore %449 %859 
                                f32_2 %860 = OpLoad %449 
                         Uniform f32* %861 = OpAccessChain %23 %25 
                                  f32 %862 = OpLoad %861 
                                f32_2 %863 = OpCompositeConstruct %862 %862 
                                f32_2 %864 = OpFMul %860 %863 
                                               OpStore %449 %864 
                  read_only Texture2D %865 = OpLoad %36 
                              sampler %866 = OpLoad %40 
           read_only Texture2DSampled %867 = OpSampledImage %865 %866 
                                f32_2 %868 = OpLoad %449 
                                f32_4 %869 = OpImageSampleExplicitLod %867 %868 Lod %20 
                                  f32 %870 = OpCompositeExtract %869 1 
                         Private f32* %871 = OpAccessChain %111 %85 
                                               OpStore %871 %870 
                                               OpBranch %853 
                                      %853 = OpLabel 
                         Private i32* %872 = OpAccessChain %545 %58 
                                  i32 %873 = OpLoad %872 
                                 bool %874 = OpIEqual %873 %25 
                                               OpSelectionMerge %876 None 
                                               OpBranchConditional %874 %875 %876 
                                      %875 = OpLabel 
                                f32_3 %877 = OpLoad %618 
                                f32_2 %878 = OpVectorShuffle %877 %877 0 2 
                                               OpStore %449 %878 
                                f32_2 %879 = OpLoad %449 
                                f32_2 %880 = OpCompositeConstruct %14 %14 
                                f32_2 %881 = OpCompositeConstruct %15 %15 
                                f32_2 %882 = OpExtInst %1 43 %879 %880 %881 
                                               OpStore %449 %882 
                                f32_2 %883 = OpLoad %449 
                         Uniform f32* %884 = OpAccessChain %23 %25 
                                  f32 %885 = OpLoad %884 
                                f32_2 %886 = OpCompositeConstruct %885 %885 
                                f32_2 %887 = OpFMul %883 %886 
                                               OpStore %449 %887 
                  read_only Texture2D %888 = OpLoad %36 
                              sampler %889 = OpLoad %40 
           read_only Texture2DSampled %890 = OpSampledImage %888 %889 
                                f32_2 %891 = OpLoad %449 
                                f32_4 %892 = OpImageSampleExplicitLod %890 %891 Lod %20 
                                  f32 %893 = OpCompositeExtract %892 1 
                         Private f32* %894 = OpAccessChain %111 %58 
                                               OpStore %894 %893 
                                               OpBranch %876 
                                      %876 = OpLabel 
                                  f32 %895 = OpLoad %48 
                                  f32 %896 = OpFNegate %895 
                                  f32 %897 = OpFMul %896 %412 
                         Private f32* %898 = OpAccessChain %111 %85 
                                  f32 %899 = OpLoad %898 
                                  f32 %900 = OpFAdd %897 %899 
                                               OpStore %106 %900 
                         Private i32* %901 = OpAccessChain %545 %85 
                                  i32 %902 = OpLoad %901 
                                 bool %903 = OpINotEqual %902 %25 
                                               OpSelectionMerge %906 None 
                                               OpBranchConditional %903 %905 %909 
                                      %905 = OpLabel 
                         Private f32* %907 = OpAccessChain %111 %85 
                                  f32 %908 = OpLoad %907 
                                               OpStore %904 %908 
                                               OpBranch %906 
                                      %909 = OpLabel 
                                  f32 %910 = OpLoad %106 
                                               OpStore %904 %910 
                                               OpBranch %906 
                                      %906 = OpLabel 
                                  f32 %911 = OpLoad %904 
                         Private f32* %912 = OpAccessChain %111 %85 
                                               OpStore %912 %911 
                                  f32 %913 = OpLoad %48 
                                  f32 %914 = OpFNegate %913 
                                  f32 %915 = OpFMul %914 %412 
                         Private f32* %916 = OpAccessChain %111 %58 
                                  f32 %917 = OpLoad %916 
                                  f32 %918 = OpFAdd %915 %917 
                                               OpStore %106 %918 
                         Private i32* %919 = OpAccessChain %545 %58 
                                  i32 %920 = OpLoad %919 
                                 bool %921 = OpINotEqual %920 %25 
                                               OpSelectionMerge %924 None 
                                               OpBranchConditional %921 %923 %927 
                                      %923 = OpLabel 
                         Private f32* %925 = OpAccessChain %111 %58 
                                  f32 %926 = OpLoad %925 
                                               OpStore %922 %926 
                                               OpBranch %924 
                                      %927 = OpLabel 
                                  f32 %928 = OpLoad %106 
                                               OpStore %922 %928 
                                               OpBranch %924 
                                      %924 = OpLabel 
                                  f32 %929 = OpLoad %922 
                         Private f32* %930 = OpAccessChain %111 %58 
                                               OpStore %930 %929 
                                f32_3 %931 = OpLoad %111 
                                f32_4 %932 = OpVectorShuffle %931 %931 0 1 0 1 
                                f32_4 %933 = OpExtInst %1 4 %932 
                                  f32 %934 = OpLoad %68 
                                f32_4 %935 = OpCompositeConstruct %934 %934 %934 %934 
                               bool_4 %936 = OpFOrdGreaterThanEqual %933 %935 
                               bool_2 %937 = OpVectorShuffle %936 %936 0 1 
                                u32_2 %938 = OpSelect %937 %557 %556 
                                u32_2 %939 = OpCompositeConstruct %527 %527 
                                u32_2 %940 = OpIMul %938 %939 
                                i32_2 %941 = OpBitcast %940 
                                               OpStore %545 %941 
                         Private f32* %942 = OpAccessChain %87 %85 
                                  f32 %943 = OpLoad %942 
                                  f32 %944 = OpFNegate %943 
                                  f32 %946 = OpFMul %944 %945 
                         Private f32* %947 = OpAccessChain %226 %85 
                                  f32 %948 = OpLoad %947 
                                  f32 %949 = OpFAdd %946 %948 
                                               OpStore %106 %949 
                         Private i32* %950 = OpAccessChain %545 %85 
                                  i32 %951 = OpLoad %950 
                                 bool %952 = OpINotEqual %951 %25 
                                               OpSelectionMerge %955 None 
                                               OpBranchConditional %952 %954 %958 
                                      %954 = OpLabel 
                         Private f32* %956 = OpAccessChain %226 %85 
                                  f32 %957 = OpLoad %956 
                                               OpStore %953 %957 
                                               OpBranch %955 
                                      %958 = OpLabel 
                                  f32 %959 = OpLoad %106 
                                               OpStore %953 %959 
                                               OpBranch %955 
                                      %955 = OpLabel 
                                  f32 %960 = OpLoad %953 
                         Private f32* %961 = OpAccessChain %226 %85 
                                               OpStore %961 %960 
                         Private f32* %962 = OpAccessChain %87 %58 
                                  f32 %963 = OpLoad %962 
                                  f32 %964 = OpFNegate %963 
                                  f32 %965 = OpFMul %964 %945 
                         Private f32* %966 = OpAccessChain %226 %600 
                                  f32 %967 = OpLoad %966 
                                  f32 %968 = OpFAdd %965 %967 
                                               OpStore %106 %968 
                         Private i32* %969 = OpAccessChain %545 %85 
                                  i32 %970 = OpLoad %969 
                                 bool %971 = OpINotEqual %970 %25 
                                               OpSelectionMerge %974 None 
                                               OpBranchConditional %971 %973 %977 
                                      %973 = OpLabel 
                         Private f32* %975 = OpAccessChain %226 %600 
                                  f32 %976 = OpLoad %975 
                                               OpStore %972 %976 
                                               OpBranch %974 
                                      %977 = OpLabel 
                                  f32 %978 = OpLoad %106 
                                               OpStore %972 %978 
                                               OpBranch %974 
                                      %974 = OpLabel 
                                  f32 %979 = OpLoad %972 
                         Private f32* %980 = OpAccessChain %226 %600 
                                               OpStore %980 %979 
                                i32_2 %981 = OpLoad %545 
                                i32_2 %982 = OpNot %981 
                                               OpStore %794 %982 
                         Private i32* %983 = OpAccessChain %794 %58 
                                  i32 %984 = OpLoad %983 
                                  u32 %985 = OpBitcast %984 
                         Private i32* %986 = OpAccessChain %794 %85 
                                  i32 %987 = OpLoad %986 
                                  u32 %988 = OpBitcast %987 
                                  u32 %989 = OpBitwiseOr %985 %988 
                                  i32 %990 = OpBitcast %989 
                                               OpStore %609 %990 
                         Private f32* %991 = OpAccessChain %87 %85 
                                  f32 %992 = OpLoad %991 
                                  f32 %993 = OpFMul %992 %945 
                         Private f32* %994 = OpAccessChain %618 %85 
                                  f32 %995 = OpLoad %994 
                                  f32 %996 = OpFAdd %993 %995 
                         Private f32* %997 = OpAccessChain %449 %85 
                                               OpStore %997 %996 
                         Private i32* %998 = OpAccessChain %545 %58 
                                  i32 %999 = OpLoad %998 
                                bool %1000 = OpINotEqual %999 %25 
                                               OpSelectionMerge %1003 None 
                                               OpBranchConditional %1000 %1002 %1006 
                                     %1002 = OpLabel 
                        Private f32* %1004 = OpAccessChain %618 %85 
                                 f32 %1005 = OpLoad %1004 
                                               OpStore %1001 %1005 
                                               OpBranch %1003 
                                     %1006 = OpLabel 
                        Private f32* %1007 = OpAccessChain %449 %85 
                                 f32 %1008 = OpLoad %1007 
                                               OpStore %1001 %1008 
                                               OpBranch %1003 
                                     %1003 = OpLabel 
                                 f32 %1009 = OpLoad %1001 
                        Private f32* %1010 = OpAccessChain %618 %85 
                                               OpStore %1010 %1009 
                        Private f32* %1011 = OpAccessChain %87 %58 
                                 f32 %1012 = OpLoad %1011 
                                 f32 %1013 = OpFMul %1012 %945 
                        Private f32* %1014 = OpAccessChain %618 %600 
                                 f32 %1015 = OpLoad %1014 
                                 f32 %1016 = OpFAdd %1013 %1015 
                        Private f32* %1017 = OpAccessChain %449 %85 
                                               OpStore %1017 %1016 
                        Private i32* %1018 = OpAccessChain %545 %58 
                                 i32 %1019 = OpLoad %1018 
                                bool %1020 = OpINotEqual %1019 %25 
                                               OpSelectionMerge %1023 None 
                                               OpBranchConditional %1020 %1022 %1026 
                                     %1022 = OpLabel 
                        Private f32* %1024 = OpAccessChain %618 %600 
                                 f32 %1025 = OpLoad %1024 
                                               OpStore %1021 %1025 
                                               OpBranch %1023 
                                     %1026 = OpLabel 
                        Private f32* %1027 = OpAccessChain %449 %85 
                                 f32 %1028 = OpLoad %1027 
                                               OpStore %1021 %1028 
                                               OpBranch %1023 
                                     %1023 = OpLabel 
                                 f32 %1029 = OpLoad %1021 
                        Private f32* %1030 = OpAccessChain %618 %600 
                                               OpStore %1030 %1029 
                                 i32 %1031 = OpLoad %609 
                                bool %1032 = OpINotEqual %1031 %25 
                                               OpSelectionMerge %1034 None 
                                               OpBranchConditional %1032 %1033 %1034 
                                     %1033 = OpLabel 
                        Private i32* %1035 = OpAccessChain %545 %85 
                                 i32 %1036 = OpLoad %1035 
                                bool %1037 = OpIEqual %1036 %25 
                                               OpSelectionMerge %1039 None 
                                               OpBranchConditional %1037 %1038 %1039 
                                     %1038 = OpLabel 
                               f32_3 %1040 = OpLoad %226 
                               f32_2 %1041 = OpVectorShuffle %1040 %1040 0 2 
                                               OpStore %449 %1041 
                               f32_2 %1042 = OpLoad %449 
                               f32_2 %1043 = OpCompositeConstruct %14 %14 
                               f32_2 %1044 = OpCompositeConstruct %15 %15 
                               f32_2 %1045 = OpExtInst %1 43 %1042 %1043 %1044 
                                               OpStore %449 %1045 
                               f32_2 %1046 = OpLoad %449 
                        Uniform f32* %1047 = OpAccessChain %23 %25 
                                 f32 %1048 = OpLoad %1047 
                               f32_2 %1049 = OpCompositeConstruct %1048 %1048 
                               f32_2 %1050 = OpFMul %1046 %1049 
                                               OpStore %449 %1050 
                 read_only Texture2D %1051 = OpLoad %36 
                             sampler %1052 = OpLoad %40 
          read_only Texture2DSampled %1053 = OpSampledImage %1051 %1052 
                               f32_2 %1054 = OpLoad %449 
                               f32_4 %1055 = OpImageSampleExplicitLod %1053 %1054 Lod %20 
                                 f32 %1056 = OpCompositeExtract %1055 1 
                        Private f32* %1057 = OpAccessChain %111 %85 
                                               OpStore %1057 %1056 
                                               OpBranch %1039 
                                     %1039 = OpLabel 
                        Private i32* %1058 = OpAccessChain %545 %58 
                                 i32 %1059 = OpLoad %1058 
                                bool %1060 = OpIEqual %1059 %25 
                                               OpSelectionMerge %1062 None 
                                               OpBranchConditional %1060 %1061 %1062 
                                     %1061 = OpLabel 
                               f32_3 %1063 = OpLoad %618 
                               f32_2 %1064 = OpVectorShuffle %1063 %1063 0 2 
                                               OpStore %449 %1064 
                               f32_2 %1065 = OpLoad %449 
                               f32_2 %1066 = OpCompositeConstruct %14 %14 
                               f32_2 %1067 = OpCompositeConstruct %15 %15 
                               f32_2 %1068 = OpExtInst %1 43 %1065 %1066 %1067 
                                               OpStore %449 %1068 
                               f32_2 %1069 = OpLoad %449 
                        Uniform f32* %1070 = OpAccessChain %23 %25 
                                 f32 %1071 = OpLoad %1070 
                               f32_2 %1072 = OpCompositeConstruct %1071 %1071 
                               f32_2 %1073 = OpFMul %1069 %1072 
                                               OpStore %449 %1073 
                 read_only Texture2D %1074 = OpLoad %36 
                             sampler %1075 = OpLoad %40 
          read_only Texture2DSampled %1076 = OpSampledImage %1074 %1075 
                               f32_2 %1077 = OpLoad %449 
                               f32_4 %1078 = OpImageSampleExplicitLod %1076 %1077 Lod %20 
                                 f32 %1079 = OpCompositeExtract %1078 1 
                        Private f32* %1080 = OpAccessChain %111 %58 
                                               OpStore %1080 %1079 
                                               OpBranch %1062 
                                     %1062 = OpLabel 
                                 f32 %1081 = OpLoad %48 
                                 f32 %1082 = OpFNegate %1081 
                                 f32 %1083 = OpFMul %1082 %412 
                        Private f32* %1084 = OpAccessChain %111 %85 
                                 f32 %1085 = OpLoad %1084 
                                 f32 %1086 = OpFAdd %1083 %1085 
                                               OpStore %106 %1086 
                        Private i32* %1087 = OpAccessChain %545 %85 
                                 i32 %1088 = OpLoad %1087 
                                bool %1089 = OpINotEqual %1088 %25 
                                               OpSelectionMerge %1092 None 
                                               OpBranchConditional %1089 %1091 %1095 
                                     %1091 = OpLabel 
                        Private f32* %1093 = OpAccessChain %111 %85 
                                 f32 %1094 = OpLoad %1093 
                                               OpStore %1090 %1094 
                                               OpBranch %1092 
                                     %1095 = OpLabel 
                                 f32 %1096 = OpLoad %106 
                                               OpStore %1090 %1096 
                                               OpBranch %1092 
                                     %1092 = OpLabel 
                                 f32 %1097 = OpLoad %1090 
                        Private f32* %1098 = OpAccessChain %111 %85 
                                               OpStore %1098 %1097 
                                 f32 %1099 = OpLoad %48 
                                 f32 %1100 = OpFNegate %1099 
                                 f32 %1101 = OpFMul %1100 %412 
                        Private f32* %1102 = OpAccessChain %111 %58 
                                 f32 %1103 = OpLoad %1102 
                                 f32 %1104 = OpFAdd %1101 %1103 
                                               OpStore %48 %1104 
                        Private i32* %1105 = OpAccessChain %545 %58 
                                 i32 %1106 = OpLoad %1105 
                                bool %1107 = OpINotEqual %1106 %25 
                                               OpSelectionMerge %1110 None 
                                               OpBranchConditional %1107 %1109 %1113 
                                     %1109 = OpLabel 
                        Private f32* %1111 = OpAccessChain %111 %58 
                                 f32 %1112 = OpLoad %1111 
                                               OpStore %1108 %1112 
                                               OpBranch %1110 
                                     %1113 = OpLabel 
                                 f32 %1114 = OpLoad %48 
                                               OpStore %1108 %1114 
                                               OpBranch %1110 
                                     %1110 = OpLabel 
                                 f32 %1115 = OpLoad %1108 
                        Private f32* %1116 = OpAccessChain %111 %58 
                                               OpStore %1116 %1115 
                               f32_3 %1119 = OpLoad %111 
                               f32_4 %1120 = OpVectorShuffle %1119 %1119 0 1 0 1 
                               f32_4 %1121 = OpExtInst %1 4 %1120 
                                 f32 %1122 = OpLoad %68 
                               f32_4 %1123 = OpCompositeConstruct %1122 %1122 %1122 %1122 
                              bool_4 %1124 = OpFOrdGreaterThanEqual %1121 %1123 
                              bool_2 %1125 = OpVectorShuffle %1124 %1124 0 1 
                                               OpStore %1118 %1125 
                        Private f32* %1126 = OpAccessChain %87 %85 
                                 f32 %1127 = OpLoad %1126 
                                 f32 %1128 = OpFNegate %1127 
                                 f32 %1130 = OpFMul %1128 %1129 
                        Private f32* %1131 = OpAccessChain %226 %85 
                                 f32 %1132 = OpLoad %1131 
                                 f32 %1133 = OpFAdd %1130 %1132 
                                               OpStore %48 %1133 
                       Private bool* %1134 = OpAccessChain %1118 %85 
                                bool %1135 = OpLoad %1134 
                                               OpSelectionMerge %1138 None 
                                               OpBranchConditional %1135 %1137 %1141 
                                     %1137 = OpLabel 
                        Private f32* %1139 = OpAccessChain %226 %85 
                                 f32 %1140 = OpLoad %1139 
                                               OpStore %1136 %1140 
                                               OpBranch %1138 
                                     %1141 = OpLabel 
                                 f32 %1142 = OpLoad %48 
                                               OpStore %1136 %1142 
                                               OpBranch %1138 
                                     %1138 = OpLabel 
                                 f32 %1143 = OpLoad %1136 
                        Private f32* %1144 = OpAccessChain %226 %85 
                                               OpStore %1144 %1143 
                        Private f32* %1145 = OpAccessChain %87 %58 
                                 f32 %1146 = OpLoad %1145 
                                 f32 %1147 = OpFNegate %1146 
                                 f32 %1148 = OpFMul %1147 %1129 
                        Private f32* %1149 = OpAccessChain %226 %600 
                                 f32 %1150 = OpLoad %1149 
                                 f32 %1151 = OpFAdd %1148 %1150 
                                               OpStore %48 %1151 
                       Private bool* %1152 = OpAccessChain %1118 %85 
                                bool %1153 = OpLoad %1152 
                                               OpSelectionMerge %1156 None 
                                               OpBranchConditional %1153 %1155 %1159 
                                     %1155 = OpLabel 
                        Private f32* %1157 = OpAccessChain %226 %600 
                                 f32 %1158 = OpLoad %1157 
                                               OpStore %1154 %1158 
                                               OpBranch %1156 
                                     %1159 = OpLabel 
                                 f32 %1160 = OpLoad %48 
                                               OpStore %1154 %1160 
                                               OpBranch %1156 
                                     %1156 = OpLabel 
                                 f32 %1161 = OpLoad %1154 
                        Private f32* %1162 = OpAccessChain %226 %600 
                                               OpStore %1162 %1161 
                        Private f32* %1163 = OpAccessChain %87 %85 
                                 f32 %1164 = OpLoad %1163 
                                 f32 %1165 = OpFMul %1164 %1129 
                        Private f32* %1166 = OpAccessChain %618 %85 
                                 f32 %1167 = OpLoad %1166 
                                 f32 %1168 = OpFAdd %1165 %1167 
                                               OpStore %48 %1168 
                       Private bool* %1169 = OpAccessChain %1118 %58 
                                bool %1170 = OpLoad %1169 
                                               OpSelectionMerge %1173 None 
                                               OpBranchConditional %1170 %1172 %1176 
                                     %1172 = OpLabel 
                        Private f32* %1174 = OpAccessChain %618 %85 
                                 f32 %1175 = OpLoad %1174 
                                               OpStore %1171 %1175 
                                               OpBranch %1173 
                                     %1176 = OpLabel 
                                 f32 %1177 = OpLoad %48 
                                               OpStore %1171 %1177 
                                               OpBranch %1173 
                                     %1173 = OpLabel 
                                 f32 %1178 = OpLoad %1171 
                        Private f32* %1179 = OpAccessChain %618 %85 
                                               OpStore %1179 %1178 
                        Private f32* %1180 = OpAccessChain %87 %58 
                                 f32 %1181 = OpLoad %1180 
                                 f32 %1182 = OpFMul %1181 %1129 
                        Private f32* %1183 = OpAccessChain %618 %600 
                                 f32 %1184 = OpLoad %1183 
                                 f32 %1185 = OpFAdd %1182 %1184 
                                               OpStore %48 %1185 
                       Private bool* %1186 = OpAccessChain %1118 %58 
                                bool %1187 = OpLoad %1186 
                                               OpSelectionMerge %1190 None 
                                               OpBranchConditional %1187 %1189 %1193 
                                     %1189 = OpLabel 
                        Private f32* %1191 = OpAccessChain %618 %600 
                                 f32 %1192 = OpLoad %1191 
                                               OpStore %1188 %1192 
                                               OpBranch %1190 
                                     %1193 = OpLabel 
                                 f32 %1194 = OpLoad %48 
                                               OpStore %1188 %1194 
                                               OpBranch %1190 
                                     %1190 = OpLabel 
                                 f32 %1195 = OpLoad %1188 
                        Private f32* %1196 = OpAccessChain %618 %600 
                                               OpStore %1196 %1195 
                                               OpBranch %1034 
                                     %1034 = OpLabel 
                                               OpBranch %848 
                                      %848 = OpLabel 
                                               OpBranch %662 
                                      %662 = OpLabel 
                        Private f32* %1197 = OpAccessChain %226 %85 
                                 f32 %1198 = OpLoad %1197 
                                 f32 %1199 = OpFNegate %1198 
                          Input f32* %1200 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %1201 = OpLoad %1200 
                                 f32 %1202 = OpFAdd %1199 %1201 
                                               OpStore %48 %1202 
                        Private f32* %1203 = OpAccessChain %618 %85 
                                 f32 %1204 = OpLoad %1203 
                          Input f32* %1205 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %1206 = OpLoad %1205 
                                 f32 %1207 = OpFNegate %1206 
                                 f32 %1208 = OpFAdd %1204 %1207 
                                               OpStore %68 %1208 
                        Private f32* %1209 = OpAccessChain %226 %600 
                                 f32 %1210 = OpLoad %1209 
                                 f32 %1211 = OpFNegate %1210 
                          Input f32* %1212 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %1213 = OpLoad %1212 
                                 f32 %1214 = OpFAdd %1211 %1213 
                        Private f32* %1215 = OpAccessChain %87 %85 
                                               OpStore %1215 %1214 
                                bool %1216 = OpLoad %293 
                                               OpSelectionMerge %1219 None 
                                               OpBranchConditional %1216 %1218 %1221 
                                     %1218 = OpLabel 
                                 f32 %1220 = OpLoad %48 
                                               OpStore %1217 %1220 
                                               OpBranch %1219 
                                     %1221 = OpLabel 
                        Private f32* %1222 = OpAccessChain %87 %85 
                                 f32 %1223 = OpLoad %1222 
                                               OpStore %1217 %1223 
                                               OpBranch %1219 
                                     %1219 = OpLabel 
                                 f32 %1224 = OpLoad %1217 
                                               OpStore %48 %1224 
                        Private f32* %1225 = OpAccessChain %618 %600 
                                 f32 %1226 = OpLoad %1225 
                          Input f32* %1227 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %1228 = OpLoad %1227 
                                 f32 %1229 = OpFNegate %1228 
                                 f32 %1230 = OpFAdd %1226 %1229 
                        Private f32* %1231 = OpAccessChain %87 %85 
                                               OpStore %1231 %1230 
                                bool %1232 = OpLoad %293 
                                               OpSelectionMerge %1235 None 
                                               OpBranchConditional %1232 %1234 %1237 
                                     %1234 = OpLabel 
                                 f32 %1236 = OpLoad %68 
                                               OpStore %1233 %1236 
                                               OpBranch %1235 
                                     %1237 = OpLabel 
                        Private f32* %1238 = OpAccessChain %87 %85 
                                 f32 %1239 = OpLoad %1238 
                                               OpStore %1233 %1239 
                                               OpBranch %1235 
                                     %1235 = OpLabel 
                                 f32 %1240 = OpLoad %1233 
                                               OpStore %68 %1240 
                               f32_3 %1242 = OpLoad %111 
                               f32_4 %1243 = OpVectorShuffle %1242 %1242 0 1 0 0 
                              bool_4 %1245 = OpFOrdLessThan %1243 %1244 
                              bool_2 %1246 = OpVectorShuffle %1245 %1245 0 1 
                               u32_2 %1247 = OpSelect %1246 %557 %556 
                               u32_2 %1248 = OpCompositeConstruct %527 %527 
                               u32_2 %1249 = OpIMul %1247 %1248 
                               i32_2 %1250 = OpBitcast %1249 
                                               OpStore %1241 %1250 
                                 f32 %1251 = OpLoad %48 
                                 f32 %1252 = OpLoad %68 
                                 f32 %1253 = OpFAdd %1251 %1252 
                                               OpStore %106 %1253 
                                 i32 %1255 = OpLoad %523 
                               i32_4 %1257 = OpCompositeConstruct %1255 %1255 %1255 %1255 
                               i32_2 %1258 = OpLoad %1241 
                               i32_4 %1259 = OpVectorShuffle %1258 %1258 0 1 0 0 
                              bool_4 %1260 = OpINotEqual %1257 %1259 
                              bool_2 %1261 = OpVectorShuffle %1260 %1260 0 1 
                                               OpStore %1254 %1261 
                                 f32 %1262 = OpLoad %106 
                                 f32 %1263 = OpFDiv %15 %1262 
                                               OpStore %93 %1263 
                                 f32 %1264 = OpLoad %48 
                                 f32 %1265 = OpLoad %68 
                                bool %1266 = OpFOrdLessThan %1264 %1265 
                                               OpStore %358 %1266 
                                 f32 %1267 = OpLoad %48 
                                 f32 %1268 = OpLoad %68 
                                 f32 %1269 = OpExtInst %1 37 %1267 %1268 
                                               OpStore %48 %1269 
                                bool %1271 = OpLoad %358 
                                               OpSelectionMerge %1275 None 
                                               OpBranchConditional %1271 %1274 %1278 
                                     %1274 = OpLabel 
                       Private bool* %1276 = OpAccessChain %1254 %85 
                                bool %1277 = OpLoad %1276 
                                               OpStore %1273 %1277 
                                               OpBranch %1275 
                                     %1278 = OpLabel 
                       Private bool* %1279 = OpAccessChain %1254 %58 
                                bool %1280 = OpLoad %1279 
                                               OpStore %1273 %1280 
                                               OpBranch %1275 
                                     %1275 = OpLabel 
                                bool %1281 = OpLoad %1273 
                                               OpStore %1270 %1281 
                        Private f32* %1282 = OpAccessChain %179 %85 
                                 f32 %1283 = OpLoad %1282 
                        Private f32* %1284 = OpAccessChain %179 %85 
                                 f32 %1285 = OpLoad %1284 
                                 f32 %1286 = OpFMul %1283 %1285 
                        Private f32* %1287 = OpAccessChain %179 %85 
                                               OpStore %1287 %1286 
                                 f32 %1288 = OpLoad %48 
                                 f32 %1289 = OpLoad %93 
                                 f32 %1290 = OpFNegate %1289 
                                 f32 %1291 = OpFMul %1288 %1290 
                                 f32 %1292 = OpFAdd %1291 %412 
                                               OpStore %48 %1292 
                                bool %1293 = OpLoad %1270 
                                 f32 %1294 = OpLoad %48 
                                 f32 %1295 = OpSelect %1293 %1294 %14 
                                               OpStore %48 %1295 
                        Private f32* %1296 = OpAccessChain %179 %85 
                                 f32 %1297 = OpLoad %1296 
                                 f32 %1298 = OpLoad %48 
                                 f32 %1299 = OpExtInst %1 40 %1297 %1298 
                        Private f32* %1300 = OpAccessChain %179 %85 
                                               OpStore %1300 %1299 
                               f32_3 %1301 = OpLoad %179 
                               f32_2 %1302 = OpVectorShuffle %1301 %1301 0 0 
                                 f32 %1303 = OpLoad %60 
                               f32_2 %1304 = OpCompositeConstruct %1303 %1303 
                               f32_2 %1305 = OpFMul %1302 %1304 
                               f32_2 %1306 = OpLoad vs_TEXCOORD0 
                               f32_2 %1307 = OpFAdd %1305 %1306 
                               f32_3 %1308 = OpLoad %179 
                               f32_3 %1309 = OpVectorShuffle %1308 %1307 3 4 2 
                                               OpStore %179 %1309 
                                bool %1310 = OpLoad %293 
                                               OpSelectionMerge %1313 None 
                                               OpBranchConditional %1310 %1312 %1316 
                                     %1312 = OpLabel 
                          Input f32* %1314 = OpAccessChain vs_TEXCOORD0 %85 
                                 f32 %1315 = OpLoad %1314 
                                               OpStore %1311 %1315 
                                               OpBranch %1313 
                                     %1316 = OpLabel 
                        Private f32* %1317 = OpAccessChain %179 %85 
                                 f32 %1318 = OpLoad %1317 
                                               OpStore %1311 %1318 
                                               OpBranch %1313 
                                     %1313 = OpLabel 
                                 f32 %1319 = OpLoad %1311 
                        Private f32* %1320 = OpAccessChain %77 %85 
                                               OpStore %1320 %1319 
                        Private f32* %1321 = OpAccessChain %77 %85 
                                 f32 %1322 = OpLoad %1321 
                                 f32 %1323 = OpExtInst %1 43 %1322 %14 %15 
                        Private f32* %1324 = OpAccessChain %77 %85 
                                               OpStore %1324 %1323 
                                bool %1325 = OpLoad %293 
                                               OpSelectionMerge %1328 None 
                                               OpBranchConditional %1325 %1327 %1331 
                                     %1327 = OpLabel 
                        Private f32* %1329 = OpAccessChain %179 %58 
                                 f32 %1330 = OpLoad %1329 
                                               OpStore %1326 %1330 
                                               OpBranch %1328 
                                     %1331 = OpLabel 
                          Input f32* %1332 = OpAccessChain vs_TEXCOORD0 %58 
                                 f32 %1333 = OpLoad %1332 
                                               OpStore %1326 %1333 
                                               OpBranch %1328 
                                     %1328 = OpLabel 
                                 f32 %1334 = OpLoad %1326 
                        Private f32* %1335 = OpAccessChain %77 %58 
                                               OpStore %1335 %1334 
                        Private f32* %1336 = OpAccessChain %77 %58 
                                 f32 %1337 = OpLoad %1336 
                                 f32 %1338 = OpExtInst %1 43 %1337 %14 %15 
                        Private f32* %1339 = OpAccessChain %77 %58 
                                               OpStore %1339 %1338 
                               f32_3 %1340 = OpLoad %77 
                               f32_2 %1341 = OpVectorShuffle %1340 %1340 0 1 
                        Uniform f32* %1342 = OpAccessChain %23 %25 
                                 f32 %1343 = OpLoad %1342 
                               f32_2 %1344 = OpCompositeConstruct %1343 %1343 
                               f32_2 %1345 = OpFMul %1341 %1344 
                                               OpStore %9 %1345 
                 read_only Texture2D %1346 = OpLoad %36 
                             sampler %1347 = OpLoad %40 
          read_only Texture2DSampled %1348 = OpSampledImage %1346 %1347 
                               f32_2 %1349 = OpLoad %9 
                               f32_4 %1350 = OpImageSampleExplicitLod %1348 %1349 Lod %20 
                               f32_3 %1351 = OpVectorShuffle %1350 %1350 0 1 2 
                                               OpStore %33 %1351 
                                               OpBranch %148 
                                      %148 = OpLabel 
                 read_only Texture2D %1352 = OpLoad %36 
                             sampler %1353 = OpLoad %40 
          read_only Texture2DSampled %1354 = OpSampledImage %1352 %1353 
                               f32_2 %1356 = OpLoad vs_TEXCOORD1 
                               f32_4 %1357 = OpImageSampleImplicitLod %1354 %1356 
                                 f32 %1359 = OpCompositeExtract %1357 3 
                        Private f32* %1360 = OpAccessChain %9 %85 
                                               OpStore %1360 %1359 
                               f32_2 %1361 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %1363 = OpAccessChain %23 %54 
                               f32_4 %1364 = OpLoad %1363 
                               f32_2 %1365 = OpVectorShuffle %1364 %1364 0 1 
                               f32_2 %1366 = OpFMul %1361 %1365 
                      Uniform f32_4* %1367 = OpAccessChain %23 %54 
                               f32_4 %1368 = OpLoad %1367 
                               f32_2 %1369 = OpVectorShuffle %1368 %1368 2 3 
                               f32_2 %1370 = OpFAdd %1366 %1369 
                               f32_3 %1371 = OpLoad %179 
                               f32_3 %1372 = OpVectorShuffle %1371 %1370 3 4 2 
                                               OpStore %179 %1372 
                 read_only Texture2D %1374 = OpLoad %1373 
                             sampler %1376 = OpLoad %1375 
          read_only Texture2DSampled %1377 = OpSampledImage %1374 %1376 
                               f32_3 %1378 = OpLoad %179 
                               f32_2 %1379 = OpVectorShuffle %1378 %1378 0 1 
                               f32_4 %1380 = OpImageSampleImplicitLod %1377 %1379 
                                 f32 %1381 = OpCompositeExtract %1380 3 
                        Private f32* %1382 = OpAccessChain %179 %85 
                                               OpStore %1382 %1381 
                        Private f32* %1383 = OpAccessChain %179 %85 
                                 f32 %1384 = OpLoad %1383 
                                 f32 %1385 = OpFMul %1384 %250 
                                 f32 %1387 = OpFAdd %1385 %1386 
                        Private f32* %1388 = OpAccessChain %179 %85 
                                               OpStore %1388 %1387 
                        Private f32* %1389 = OpAccessChain %179 %85 
                                 f32 %1390 = OpLoad %1389 
                                 f32 %1392 = OpFMul %1390 %1391 
                                 f32 %1393 = OpFAdd %1392 %412 
                                               OpStore %48 %1393 
                                 f32 %1394 = OpLoad %48 
                                 f32 %1395 = OpExtInst %1 43 %1394 %14 %15 
                                               OpStore %48 %1395 
                                 f32 %1396 = OpLoad %48 
                                 f32 %1397 = OpFMul %1396 %250 
                                 f32 %1398 = OpFAdd %1397 %1386 
                                               OpStore %48 %1398 
                        Private f32* %1399 = OpAccessChain %179 %85 
                                 f32 %1400 = OpLoad %1399 
                                 f32 %1401 = OpExtInst %1 4 %1400 
                                 f32 %1402 = OpFNegate %1401 
                                 f32 %1403 = OpFAdd %1402 %15 
                        Private f32* %1404 = OpAccessChain %179 %85 
                                               OpStore %1404 %1403 
                        Private f32* %1405 = OpAccessChain %179 %85 
                                 f32 %1406 = OpLoad %1405 
                                 f32 %1407 = OpExtInst %1 31 %1406 
                        Private f32* %1408 = OpAccessChain %179 %85 
                                               OpStore %1408 %1407 
                        Private f32* %1409 = OpAccessChain %179 %85 
                                 f32 %1410 = OpLoad %1409 
                                 f32 %1411 = OpFNegate %1410 
                                 f32 %1412 = OpFAdd %1411 %15 
                        Private f32* %1413 = OpAccessChain %179 %85 
                                               OpStore %1413 %1412 
                        Private f32* %1414 = OpAccessChain %179 %85 
                                 f32 %1415 = OpLoad %1414 
                                 f32 %1416 = OpLoad %48 
                                 f32 %1417 = OpFMul %1415 %1416 
                        Private f32* %1418 = OpAccessChain %179 %85 
                                               OpStore %1418 %1417 
                               f32_3 %1419 = OpLoad %33 
                               f32_3 %1422 = OpFMul %1419 %1421 
                                               OpStore %77 %1422 
                               f32_3 %1423 = OpLoad %33 
                               f32_3 %1424 = OpExtInst %1 4 %1423 
                               f32_3 %1427 = OpExtInst %1 40 %1424 %1426 
                                               OpStore %111 %1427 
                               f32_3 %1428 = OpLoad %111 
                               f32_3 %1429 = OpExtInst %1 30 %1428 
                                               OpStore %111 %1429 
                               f32_3 %1430 = OpLoad %111 
                               f32_3 %1433 = OpFMul %1430 %1432 
                                               OpStore %111 %1433 
                               f32_3 %1434 = OpLoad %111 
                               f32_3 %1435 = OpExtInst %1 29 %1434 
                                               OpStore %111 %1435 
                               f32_3 %1436 = OpLoad %111 
                               f32_3 %1439 = OpFMul %1436 %1438 
                               f32_3 %1442 = OpFAdd %1439 %1441 
                                               OpStore %111 %1442 
                               f32_3 %1448 = OpLoad %33 
                               f32_4 %1449 = OpVectorShuffle %1448 %1448 0 1 2 0 
                              bool_4 %1450 = OpFOrdGreaterThanEqual %1447 %1449 
                              bool_3 %1451 = OpVectorShuffle %1450 %1450 0 1 2 
                                               OpStore %1445 %1451 
                       Private bool* %1452 = OpAccessChain %1445 %85 
                                bool %1453 = OpLoad %1452 
                                               OpSelectionMerge %1456 None 
                                               OpBranchConditional %1453 %1455 %1459 
                                     %1455 = OpLabel 
                        Private f32* %1457 = OpAccessChain %77 %85 
                                 f32 %1458 = OpLoad %1457 
                                               OpStore %1454 %1458 
                                               OpBranch %1456 
                                     %1459 = OpLabel 
                        Private f32* %1460 = OpAccessChain %111 %85 
                                 f32 %1461 = OpLoad %1460 
                                               OpStore %1454 %1461 
                                               OpBranch %1456 
                                     %1456 = OpLabel 
                                 f32 %1462 = OpLoad %1454 
                        Private f32* %1463 = OpAccessChain %33 %85 
                                               OpStore %1463 %1462 
                       Private bool* %1464 = OpAccessChain %1445 %58 
                                bool %1465 = OpLoad %1464 
                                               OpSelectionMerge %1468 None 
                                               OpBranchConditional %1465 %1467 %1471 
                                     %1467 = OpLabel 
                        Private f32* %1469 = OpAccessChain %77 %58 
                                 f32 %1470 = OpLoad %1469 
                                               OpStore %1466 %1470 
                                               OpBranch %1468 
                                     %1471 = OpLabel 
                        Private f32* %1472 = OpAccessChain %111 %58 
                                 f32 %1473 = OpLoad %1472 
                                               OpStore %1466 %1473 
                                               OpBranch %1468 
                                     %1468 = OpLabel 
                                 f32 %1474 = OpLoad %1466 
                        Private f32* %1475 = OpAccessChain %33 %58 
                                               OpStore %1475 %1474 
                       Private bool* %1476 = OpAccessChain %1445 %600 
                                bool %1477 = OpLoad %1476 
                                               OpSelectionMerge %1480 None 
                                               OpBranchConditional %1477 %1479 %1483 
                                     %1479 = OpLabel 
                        Private f32* %1481 = OpAccessChain %77 %600 
                                 f32 %1482 = OpLoad %1481 
                                               OpStore %1478 %1482 
                                               OpBranch %1480 
                                     %1483 = OpLabel 
                        Private f32* %1484 = OpAccessChain %111 %600 
                                 f32 %1485 = OpLoad %1484 
                                               OpStore %1478 %1485 
                                               OpBranch %1480 
                                     %1480 = OpLabel 
                                 f32 %1486 = OpLoad %1478 
                        Private f32* %1487 = OpAccessChain %33 %600 
                                               OpStore %1487 %1486 
                               f32_3 %1488 = OpLoad %179 
                               f32_3 %1489 = OpVectorShuffle %1488 %1488 0 0 0 
                               f32_3 %1492 = OpFMul %1489 %1491 
                               f32_3 %1493 = OpLoad %33 
                               f32_3 %1494 = OpFAdd %1492 %1493 
                                               OpStore %179 %1494 
                               f32_3 %1495 = OpLoad %179 
                               f32_3 %1498 = OpFMul %1495 %1497 
                                               OpStore %33 %1498 
                               f32_3 %1499 = OpLoad %179 
                               f32_3 %1502 = OpFAdd %1499 %1501 
                                               OpStore %77 %1502 
                               f32_3 %1503 = OpLoad %77 
                               f32_3 %1506 = OpFMul %1503 %1505 
                                               OpStore %77 %1506 
                               f32_3 %1507 = OpLoad %77 
                               f32_3 %1508 = OpExtInst %1 4 %1507 
                               f32_3 %1509 = OpExtInst %1 40 %1508 %1426 
                                               OpStore %77 %1509 
                               f32_3 %1510 = OpLoad %77 
                               f32_3 %1511 = OpExtInst %1 30 %1510 
                                               OpStore %77 %1511 
                               f32_3 %1512 = OpLoad %77 
                               f32_3 %1515 = OpFMul %1512 %1514 
                                               OpStore %77 %1515 
                               f32_3 %1516 = OpLoad %77 
                               f32_3 %1517 = OpExtInst %1 29 %1516 
                                               OpStore %77 %1517 
                               f32_3 %1521 = OpLoad %179 
                               f32_4 %1522 = OpVectorShuffle %1521 %1521 0 1 2 2 
                              bool_4 %1523 = OpFOrdGreaterThanEqual %1520 %1522 
                              bool_3 %1524 = OpVectorShuffle %1523 %1523 0 1 2 
                                               OpStore %1518 %1524 
                       Private bool* %1527 = OpAccessChain %1518 %85 
                                bool %1528 = OpLoad %1527 
                                               OpSelectionMerge %1531 None 
                                               OpBranchConditional %1528 %1530 %1534 
                                     %1530 = OpLabel 
                        Private f32* %1532 = OpAccessChain %33 %85 
                                 f32 %1533 = OpLoad %1532 
                                               OpStore %1529 %1533 
                                               OpBranch %1531 
                                     %1534 = OpLabel 
                        Private f32* %1535 = OpAccessChain %77 %85 
                                 f32 %1536 = OpLoad %1535 
                                               OpStore %1529 %1536 
                                               OpBranch %1531 
                                     %1531 = OpLabel 
                                 f32 %1537 = OpLoad %1529 
                         Output f32* %1539 = OpAccessChain %1526 %85 
                                               OpStore %1539 %1537 
                       Private bool* %1540 = OpAccessChain %1518 %58 
                                bool %1541 = OpLoad %1540 
                                               OpSelectionMerge %1544 None 
                                               OpBranchConditional %1541 %1543 %1547 
                                     %1543 = OpLabel 
                        Private f32* %1545 = OpAccessChain %33 %58 
                                 f32 %1546 = OpLoad %1545 
                                               OpStore %1542 %1546 
                                               OpBranch %1544 
                                     %1547 = OpLabel 
                        Private f32* %1548 = OpAccessChain %77 %58 
                                 f32 %1549 = OpLoad %1548 
                                               OpStore %1542 %1549 
                                               OpBranch %1544 
                                     %1544 = OpLabel 
                                 f32 %1550 = OpLoad %1542 
                         Output f32* %1551 = OpAccessChain %1526 %58 
                                               OpStore %1551 %1550 
                       Private bool* %1552 = OpAccessChain %1518 %600 
                                bool %1553 = OpLoad %1552 
                                               OpSelectionMerge %1556 None 
                                               OpBranchConditional %1553 %1555 %1559 
                                     %1555 = OpLabel 
                        Private f32* %1557 = OpAccessChain %33 %600 
                                 f32 %1558 = OpLoad %1557 
                                               OpStore %1554 %1558 
                                               OpBranch %1556 
                                     %1559 = OpLabel 
                        Private f32* %1560 = OpAccessChain %77 %600 
                                 f32 %1561 = OpLoad %1560 
                                               OpStore %1554 %1561 
                                               OpBranch %1556 
                                     %1556 = OpLabel 
                                 f32 %1562 = OpLoad %1554 
                         Output f32* %1563 = OpAccessChain %1526 %600 
                                               OpStore %1563 %1562 
                        Private f32* %1564 = OpAccessChain %9 %85 
                                 f32 %1565 = OpLoad %1564 
                         Output f32* %1566 = OpAccessChain %1526 %1358 
                                               OpStore %1566 %1565 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %57 %64 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %39 0 Offset 39 
                                             OpMemberDecorate %39 1 Offset 39 
                                             OpDecorate %39 Block 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate vs_TEXCOORD1 Location 57 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypePointer Output %7 
                                 f32 %26 = OpConstant 3.674022E-40 
                                 f32 %27 = OpConstant 3.674022E-40 
                               f32_2 %28 = OpConstantComposite %26 %27 
                                     %32 = OpTypePointer Private %19 
                      Private f32_2* %33 = OpVariable Private 
                               f32_2 %36 = OpConstantComposite %27 %27 
                                     %39 = OpTypeStruct %6 %7 
                                     %40 = OpTypePointer Uniform %39 
       Uniform struct {f32; f32_4;}* %41 = OpVariable Uniform 
                                 i32 %42 = OpConstant 1 
                                     %43 = OpTypePointer Uniform %7 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_2 %50 = OpConstantComposite %49 %49 
                                     %56 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %59 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                       Output f32_4* %23 = OpAccessChain %13 %15 
                               f32_4 %24 = OpLoad %23 
                               f32_4 %25 = OpVectorShuffle %24 %21 4 5 2 3 
                                             OpStore %23 %25 
                       Output f32_4* %29 = OpAccessChain %13 %15 
                               f32_4 %30 = OpLoad %29 
                               f32_4 %31 = OpVectorShuffle %30 %28 0 1 4 5 
                                             OpStore %29 %31 
                               f32_3 %34 = OpLoad %18 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %37 = OpFAdd %35 %36 
                                             OpStore %33 %37 
                               f32_2 %38 = OpLoad %33 
                      Uniform f32_4* %44 = OpAccessChain %41 %42 
                               f32_4 %45 = OpLoad %44 
                               f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                               f32_2 %47 = OpFMul %38 %46 
                                             OpStore %33 %47 
                               f32_2 %48 = OpLoad %33 
                               f32_2 %51 = OpFMul %48 %50 
                      Uniform f32_4* %52 = OpAccessChain %41 %42 
                               f32_4 %53 = OpLoad %52 
                               f32_2 %54 = OpVectorShuffle %53 %53 2 3 
                               f32_2 %55 = OpFAdd %51 %54 
                                             OpStore %33 %55 
                               f32_2 %58 = OpLoad %33 
                        Uniform f32* %60 = OpAccessChain %41 %15 
                                 f32 %61 = OpLoad %60 
                               f32_2 %62 = OpCompositeConstruct %61 %61 
                               f32_2 %63 = OpFMul %58 %62 
                                             OpStore vs_TEXCOORD1 %63 
                               f32_2 %65 = OpLoad %33 
                                             OpStore vs_TEXCOORD0 %65 
                         Output f32* %67 = OpAccessChain %13 %15 %9 
                                 f32 %68 = OpLoad %67 
                                 f32 %69 = OpFNegate %68 
                         Output f32* %70 = OpAccessChain %13 %15 %9 
                                             OpStore %70 %69 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1667
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %1664 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %1485 DescriptorSet 1485 
                                               OpDecorate %1485 Binding 1485 
                                               OpDecorate %1487 DescriptorSet 1487 
                                               OpDecorate %1487 Binding 1487 
                                               OpDecorate %1664 Location 1664 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %18 = OpConstant 3.674022E-40 
                                   f32 %19 = OpConstant 3.674022E-40 
                                       %27 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %6 %27 %27 
                                       %29 = OpTypePointer Uniform %28 
  Uniform struct {f32; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 0 
                                       %33 = OpTypePointer Uniform %6 
                                       %40 = OpTypePointer Private %27 
                        Private f32_4* %41 = OpVariable Private 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypePointer Private %6 
                          Private f32* %56 = OpVariable Private 
                                       %62 = OpTypeVector %31 2 
                                   i32 %63 = OpConstant 1 
                                 i32_2 %64 = OpConstantComposite %32 %63 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 1 
                          Private f32* %69 = OpVariable Private 
                                 i32_2 %75 = OpConstantComposite %63 %32 
                        Private f32_3* %78 = OpVariable Private 
                                   i32 %84 = OpConstant -1 
                                 i32_2 %85 = OpConstantComposite %32 %84 
                                   u32 %88 = OpConstant 0 
                          Private f32* %90 = OpVariable Private 
                                 i32_2 %96 = OpConstantComposite %84 %32 
                                       %99 = OpTypePointer Private %10 
                       Private f32_2* %100 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_3* %119 = OpVariable Private 
                       Private f32_2* %125 = OpVariable Private 
                                  f32 %143 = OpConstant 3.674022E-40 
                                  f32 %154 = OpConstant 3.674022E-40 
                                      %156 = OpTypeBool 
                                      %157 = OpTypePointer Private %156 
                        Private bool* %158 = OpVariable Private 
                                i32_2 %171 = OpConstantComposite %84 %84 
                                i32_2 %179 = OpConstantComposite %63 %63 
                                i32_2 %188 = OpConstantComposite %63 %84 
                                i32_2 %197 = OpConstantComposite %84 %63 
                       Private f32_2* %201 = OpVariable Private 
                       Private f32_2* %207 = OpVariable Private 
                         Private f32* %216 = OpVariable Private 
                                  f32 %224 = OpConstant 3.674022E-40 
                       Private f32_3* %237 = OpVariable Private 
                       Private f32_3* %249 = OpVariable Private 
                                  f32 %276 = OpConstant 3.674022E-40 
                                      %321 = OpTypeVector %156 3 
                                      %322 = OpTypePointer Private %321 
                      Private bool_3* %323 = OpVariable Private 
                                      %337 = OpTypePointer Function %6 
                                  i32 %357 = OpConstant 2 
                                  f32 %366 = OpConstant 3.674022E-40 
                        Private bool* %394 = OpVariable Private 
                                  f32 %447 = OpConstant 3.674022E-40 
                                f32_2 %448 = OpConstantComposite %447 %447 
                                      %457 = OpTypePointer Input %6 
                       Private f32_3* %483 = OpVariable Private 
                                  f32 %492 = OpConstant 3.674022E-40 
                       Private f32_2* %519 = OpVariable Private 
                                  f32 %547 = OpConstant 3.674022E-40 
                                      %562 = OpTypePointer Private %31 
                         Private i32* %563 = OpVariable Private 
                                  u32 %566 = OpConstant 4294967295 
                                      %582 = OpTypePointer Private %62 
                       Private i32_2* %583 = OpVariable Private 
                                      %589 = OpTypeVector %156 4 
                                      %591 = OpTypeVector %156 2 
                                      %593 = OpTypeVector %66 2 
                                u32_2 %594 = OpConstantComposite %88 %88 
                                u32_2 %595 = OpConstantComposite %67 %67 
                                  f32 %603 = OpConstant 3.674022E-40 
                         Private f32* %622 = OpVariable Private 
                                  u32 %641 = OpConstant 2 
                                      %643 = OpTypeVector %31 3 
                                      %644 = OpTypePointer Private %643 
                       Private i32_3* %645 = OpVariable Private 
                                 f32 %1029 = OpConstant 3.674022E-40 
                                     %1225 = OpTypePointer Private %591 
                     Private bool_2* %1226 = OpVariable Private 
                                 f32 %1237 = OpConstant 3.674022E-40 
                      Private i32_2* %1347 = OpVariable Private 
                               f32_4 %1350 = OpConstantComposite %18 %18 %18 %18 
                     Private bool_2* %1362 = OpVariable Private 
                                     %1364 = OpTypeVector %31 4 
                       Private bool* %1381 = OpVariable Private 
                                     %1383 = OpTypePointer Function %156 
                                 u32 %1468 = OpConstant 3 
                                     %1474 = OpTypePointer Uniform %27 
UniformConstant read_only Texture2D* %1485 = OpVariable UniformConstant 
            UniformConstant sampler* %1487 = OpVariable UniformConstant 
                                 f32 %1496 = OpConstant 3.674022E-40 
                                 f32 %1499 = OpConstant 3.674022E-40 
                                 f32 %1526 = OpConstant 3.674022E-40 
                               f32_3 %1527 = OpConstantComposite %1526 %1526 %1526 
                                 f32 %1531 = OpConstant 3.674022E-40 
                               f32_3 %1532 = OpConstantComposite %1531 %1531 %1531 
                                 f32 %1537 = OpConstant 3.674022E-40 
                               f32_3 %1538 = OpConstantComposite %1537 %1537 %1537 
                                 f32 %1543 = OpConstant 3.674022E-40 
                               f32_3 %1544 = OpConstantComposite %1543 %1543 %1543 
                                 f32 %1546 = OpConstant 3.674022E-40 
                               f32_3 %1547 = OpConstantComposite %1546 %1546 %1546 
                                 f32 %1549 = OpConstant 3.674022E-40 
                               f32_4 %1550 = OpConstantComposite %1549 %1549 %1549 %18 
                                 f32 %1593 = OpConstant 3.674022E-40 
                               f32_3 %1594 = OpConstantComposite %1593 %1593 %1593 
                                 f32 %1599 = OpConstant 3.674022E-40 
                               f32_3 %1600 = OpConstantComposite %1599 %1599 %1599 
                                 f32 %1603 = OpConstant 3.674022E-40 
                               f32_3 %1604 = OpConstantComposite %1603 %1603 %1603 
                                 f32 %1607 = OpConstant 3.674022E-40 
                               f32_3 %1608 = OpConstantComposite %1607 %1607 %1607 
                                 f32 %1616 = OpConstant 3.674022E-40 
                               f32_3 %1617 = OpConstantComposite %1616 %1616 %1616 
                                 f32 %1621 = OpConstant 3.674022E-40 
                               f32_4 %1622 = OpConstantComposite %1621 %1621 %1621 %18 
                                     %1663 = OpTypePointer Output %27 
                       Output f32_4* %1664 = OpVariable Output 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %338 = OpVariable Function 
                        Function f32* %354 = OpVariable Function 
                        Function f32* %406 = OpVariable Function 
                        Function f32* %427 = OpVariable Function 
                        Function f32* %437 = OpVariable Function 
                        Function f32* %454 = OpVariable Function 
                        Function f32* %467 = OpVariable Function 
                        Function f32* %538 = OpVariable Function 
                        Function f32* %612 = OpVariable Function 
                        Function f32* %633 = OpVariable Function 
                        Function f32* %668 = OpVariable Function 
                        Function f32* %686 = OpVariable Function 
                        Function f32* %774 = OpVariable Function 
                        Function f32* %794 = OpVariable Function 
                        Function f32* %826 = OpVariable Function 
                        Function f32* %847 = OpVariable Function 
                        Function f32* %879 = OpVariable Function 
                        Function f32* %897 = OpVariable Function 
                        Function f32* %985 = OpVariable Function 
                       Function f32* %1005 = OpVariable Function 
                       Function f32* %1038 = OpVariable Function 
                       Function f32* %1059 = OpVariable Function 
                       Function f32* %1091 = OpVariable Function 
                       Function f32* %1109 = OpVariable Function 
                       Function f32* %1197 = OpVariable Function 
                       Function f32* %1216 = OpVariable Function 
                       Function f32* %1244 = OpVariable Function 
                       Function f32* %1262 = OpVariable Function 
                       Function f32* %1279 = OpVariable Function 
                       Function f32* %1296 = OpVariable Function 
                       Function f32* %1320 = OpVariable Function 
                       Function f32* %1337 = OpVariable Function 
                      Function bool* %1384 = OpVariable Function 
                       Function f32* %1421 = OpVariable Function 
                       Function f32* %1437 = OpVariable Function 
                       Function f32* %1557 = OpVariable Function 
                       Function f32* %1569 = OpVariable Function 
                       Function f32* %1581 = OpVariable Function 
                       Function f32* %1629 = OpVariable Function 
                       Function f32* %1641 = OpVariable Function 
                       Function f32* %1653 = OpVariable Function 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                                 f32_3 %14 = OpLoad %9 
                                 f32_3 %15 = OpVectorShuffle %14 %13 3 4 2 
                                               OpStore %9 %15 
                                 f32_3 %16 = OpLoad %9 
                                 f32_2 %17 = OpVectorShuffle %16 %16 0 1 
                                 f32_2 %20 = OpCompositeConstruct %18 %18 
                                 f32_2 %21 = OpCompositeConstruct %19 %19 
                                 f32_2 %22 = OpExtInst %1 43 %17 %20 %21 
                                 f32_3 %23 = OpLoad %9 
                                 f32_3 %24 = OpVectorShuffle %23 %22 3 4 2 
                                               OpStore %9 %24 
                                 f32_3 %25 = OpLoad %9 
                                 f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                          Uniform f32* %34 = OpAccessChain %30 %32 
                                   f32 %35 = OpLoad %34 
                                 f32_2 %36 = OpCompositeConstruct %35 %35 
                                 f32_2 %37 = OpFMul %26 %36 
                                 f32_3 %38 = OpLoad %9 
                                 f32_3 %39 = OpVectorShuffle %38 %37 3 4 2 
                                               OpStore %9 %39 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_3 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleExplicitLod %51 %53 Lod %27 
                                               OpStore %41 %54 
                   read_only Texture2D %57 = OpLoad %44 
                               sampler %58 = OpLoad %48 
            read_only Texture2DSampled %59 = OpSampledImage %57 %58 
                                 f32_3 %60 = OpLoad %9 
                                 f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                 f32_4 %65 = OpImageSampleExplicitLod %59 %61 Lod %27ConstOffset %65 
                                   f32 %68 = OpCompositeExtract %65 1 
                                               OpStore %56 %68 
                   read_only Texture2D %70 = OpLoad %44 
                               sampler %71 = OpLoad %48 
            read_only Texture2DSampled %72 = OpSampledImage %70 %71 
                                 f32_3 %73 = OpLoad %9 
                                 f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                 f32_4 %76 = OpImageSampleExplicitLod %72 %74 Lod %27ConstOffset %76 
                                   f32 %77 = OpCompositeExtract %76 1 
                                               OpStore %69 %77 
                   read_only Texture2D %79 = OpLoad %44 
                               sampler %80 = OpLoad %48 
            read_only Texture2DSampled %81 = OpSampledImage %79 %80 
                                 f32_3 %82 = OpLoad %9 
                                 f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                                 f32_4 %86 = OpImageSampleExplicitLod %81 %83 Lod %27ConstOffset %86 
                                   f32 %87 = OpCompositeExtract %86 1 
                          Private f32* %89 = OpAccessChain %78 %88 
                                               OpStore %89 %87 
                   read_only Texture2D %91 = OpLoad %44 
                               sampler %92 = OpLoad %48 
            read_only Texture2DSampled %93 = OpSampledImage %91 %92 
                                 f32_3 %94 = OpLoad %9 
                                 f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                 f32_4 %97 = OpImageSampleExplicitLod %93 %95 Lod %27ConstOffset %97 
                                   f32 %98 = OpCompositeExtract %97 1 
                                               OpStore %90 %98 
                         Private f32* %101 = OpAccessChain %41 %67 
                                  f32 %102 = OpLoad %101 
                                  f32 %103 = OpLoad %56 
                                  f32 %104 = OpExtInst %1 40 %102 %103 
                         Private f32* %105 = OpAccessChain %100 %88 
                                               OpStore %105 %104 
                         Private f32* %107 = OpAccessChain %41 %67 
                                  f32 %108 = OpLoad %107 
                                  f32 %109 = OpLoad %56 
                                  f32 %110 = OpExtInst %1 37 %108 %109 
                                               OpStore %106 %110 
                                  f32 %111 = OpLoad %69 
                         Private f32* %112 = OpAccessChain %100 %88 
                                  f32 %113 = OpLoad %112 
                                  f32 %114 = OpExtInst %1 40 %111 %113 
                         Private f32* %115 = OpAccessChain %100 %88 
                                               OpStore %115 %114 
                                  f32 %116 = OpLoad %69 
                                  f32 %117 = OpLoad %106 
                                  f32 %118 = OpExtInst %1 37 %116 %117 
                                               OpStore %106 %118 
                                  f32 %120 = OpLoad %90 
                         Private f32* %121 = OpAccessChain %78 %88 
                                  f32 %122 = OpLoad %121 
                                  f32 %123 = OpExtInst %1 40 %120 %122 
                         Private f32* %124 = OpAccessChain %119 %88 
                                               OpStore %124 %123 
                                  f32 %126 = OpLoad %90 
                         Private f32* %127 = OpAccessChain %78 %88 
                                  f32 %128 = OpLoad %127 
                                  f32 %129 = OpExtInst %1 37 %126 %128 
                         Private f32* %130 = OpAccessChain %125 %88 
                                               OpStore %130 %129 
                         Private f32* %131 = OpAccessChain %100 %88 
                                  f32 %132 = OpLoad %131 
                         Private f32* %133 = OpAccessChain %119 %88 
                                  f32 %134 = OpLoad %133 
                                  f32 %135 = OpExtInst %1 40 %132 %134 
                         Private f32* %136 = OpAccessChain %100 %88 
                                               OpStore %136 %135 
                                  f32 %137 = OpLoad %106 
                         Private f32* %138 = OpAccessChain %125 %88 
                                  f32 %139 = OpLoad %138 
                                  f32 %140 = OpExtInst %1 37 %137 %139 
                                               OpStore %106 %140 
                         Private f32* %141 = OpAccessChain %100 %88 
                                  f32 %142 = OpLoad %141 
                                  f32 %144 = OpFMul %142 %143 
                         Private f32* %145 = OpAccessChain %119 %88 
                                               OpStore %145 %144 
                                  f32 %146 = OpLoad %106 
                                  f32 %147 = OpFNegate %146 
                         Private f32* %148 = OpAccessChain %100 %88 
                                  f32 %149 = OpLoad %148 
                                  f32 %150 = OpFAdd %147 %149 
                         Private f32* %151 = OpAccessChain %100 %88 
                                               OpStore %151 %150 
                         Private f32* %152 = OpAccessChain %119 %88 
                                  f32 %153 = OpLoad %152 
                                  f32 %155 = OpExtInst %1 40 %153 %154 
                                               OpStore %106 %155 
                         Private f32* %159 = OpAccessChain %100 %88 
                                  f32 %160 = OpLoad %159 
                                  f32 %161 = OpLoad %106 
                                 bool %162 = OpFOrdGreaterThanEqual %160 %161 
                                               OpStore %158 %162 
                                 bool %163 = OpLoad %158 
                                               OpSelectionMerge %165 None 
                                               OpBranchConditional %163 %164 %1470 
                                      %164 = OpLabel 
                  read_only Texture2D %166 = OpLoad %44 
                              sampler %167 = OpLoad %48 
           read_only Texture2DSampled %168 = OpSampledImage %166 %167 
                                f32_3 %169 = OpLoad %9 
                                f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                f32_4 %172 = OpImageSampleExplicitLod %168 %170 Lod %27ConstOffset %172 
                                  f32 %173 = OpCompositeExtract %172 1 
                                               OpStore %106 %173 
                  read_only Texture2D %174 = OpLoad %44 
                              sampler %175 = OpLoad %48 
           read_only Texture2DSampled %176 = OpSampledImage %174 %175 
                                f32_3 %177 = OpLoad %9 
                                f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                f32_4 %180 = OpImageSampleExplicitLod %176 %178 Lod %27ConstOffset %180 
                                  f32 %181 = OpCompositeExtract %180 1 
                         Private f32* %182 = OpAccessChain %119 %88 
                                               OpStore %182 %181 
                  read_only Texture2D %183 = OpLoad %44 
                              sampler %184 = OpLoad %48 
           read_only Texture2DSampled %185 = OpSampledImage %183 %184 
                                f32_3 %186 = OpLoad %9 
                                f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                f32_4 %189 = OpImageSampleExplicitLod %185 %187 Lod %27ConstOffset %189 
                                  f32 %190 = OpCompositeExtract %189 1 
                         Private f32* %191 = OpAccessChain %125 %88 
                                               OpStore %191 %190 
                  read_only Texture2D %192 = OpLoad %44 
                              sampler %193 = OpLoad %48 
           read_only Texture2DSampled %194 = OpSampledImage %192 %193 
                                f32_3 %195 = OpLoad %9 
                                f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                f32_4 %198 = OpImageSampleExplicitLod %194 %196 Lod %27ConstOffset %198 
                                  f32 %199 = OpCompositeExtract %198 1 
                         Private f32* %200 = OpAccessChain %9 %88 
                                               OpStore %200 %199 
                                  f32 %202 = OpLoad %56 
                         Private f32* %203 = OpAccessChain %78 %88 
                                  f32 %204 = OpLoad %203 
                                  f32 %205 = OpFAdd %202 %204 
                         Private f32* %206 = OpAccessChain %201 %88 
                                               OpStore %206 %205 
                                  f32 %208 = OpLoad %69 
                                  f32 %209 = OpLoad %90 
                                  f32 %210 = OpFAdd %208 %209 
                         Private f32* %211 = OpAccessChain %207 %88 
                                               OpStore %211 %210 
                         Private f32* %212 = OpAccessChain %100 %88 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFDiv %19 %213 
                         Private f32* %215 = OpAccessChain %100 %88 
                                               OpStore %215 %214 
                         Private f32* %217 = OpAccessChain %201 %88 
                                  f32 %218 = OpLoad %217 
                         Private f32* %219 = OpAccessChain %207 %88 
                                  f32 %220 = OpLoad %219 
                                  f32 %221 = OpFAdd %218 %220 
                                               OpStore %216 %221 
                         Private f32* %222 = OpAccessChain %41 %67 
                                  f32 %223 = OpLoad %222 
                                  f32 %225 = OpFMul %223 %224 
                         Private f32* %226 = OpAccessChain %201 %88 
                                  f32 %227 = OpLoad %226 
                                  f32 %228 = OpFAdd %225 %227 
                         Private f32* %229 = OpAccessChain %201 %88 
                                               OpStore %229 %228 
                         Private f32* %230 = OpAccessChain %41 %67 
                                  f32 %231 = OpLoad %230 
                                  f32 %232 = OpFMul %231 %224 
                         Private f32* %233 = OpAccessChain %207 %88 
                                  f32 %234 = OpLoad %233 
                                  f32 %235 = OpFAdd %232 %234 
                         Private f32* %236 = OpAccessChain %207 %88 
                                               OpStore %236 %235 
                         Private f32* %238 = OpAccessChain %119 %88 
                                  f32 %239 = OpLoad %238 
                         Private f32* %240 = OpAccessChain %125 %88 
                                  f32 %241 = OpLoad %240 
                                  f32 %242 = OpFAdd %239 %241 
                         Private f32* %243 = OpAccessChain %237 %88 
                                               OpStore %243 %242 
                                  f32 %244 = OpLoad %106 
                         Private f32* %245 = OpAccessChain %125 %88 
                                  f32 %246 = OpLoad %245 
                                  f32 %247 = OpFAdd %244 %246 
                         Private f32* %248 = OpAccessChain %125 %88 
                                               OpStore %248 %247 
                                  f32 %250 = OpLoad %69 
                                  f32 %251 = OpFMul %250 %224 
                         Private f32* %252 = OpAccessChain %237 %88 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpFAdd %251 %253 
                         Private f32* %255 = OpAccessChain %249 %88 
                                               OpStore %255 %254 
                         Private f32* %256 = OpAccessChain %78 %88 
                                  f32 %257 = OpLoad %256 
                                  f32 %258 = OpFMul %257 %224 
                         Private f32* %259 = OpAccessChain %125 %88 
                                  f32 %260 = OpLoad %259 
                                  f32 %261 = OpFAdd %258 %260 
                         Private f32* %262 = OpAccessChain %125 %88 
                                               OpStore %262 %261 
                         Private f32* %263 = OpAccessChain %9 %88 
                                  f32 %264 = OpLoad %263 
                                  f32 %265 = OpLoad %106 
                                  f32 %266 = OpFAdd %264 %265 
                                               OpStore %106 %266 
                         Private f32* %267 = OpAccessChain %119 %88 
                                  f32 %268 = OpLoad %267 
                         Private f32* %269 = OpAccessChain %9 %88 
                                  f32 %270 = OpLoad %269 
                                  f32 %271 = OpFAdd %268 %270 
                         Private f32* %272 = OpAccessChain %9 %88 
                                               OpStore %272 %271 
                         Private f32* %273 = OpAccessChain %201 %88 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpExtInst %1 4 %274 
                                  f32 %277 = OpFMul %275 %276 
                         Private f32* %278 = OpAccessChain %249 %88 
                                  f32 %279 = OpLoad %278 
                                  f32 %280 = OpExtInst %1 4 %279 
                                  f32 %281 = OpFAdd %277 %280 
                         Private f32* %282 = OpAccessChain %201 %88 
                                               OpStore %282 %281 
                         Private f32* %283 = OpAccessChain %207 %88 
                                  f32 %284 = OpLoad %283 
                                  f32 %285 = OpExtInst %1 4 %284 
                                  f32 %286 = OpFMul %285 %276 
                         Private f32* %287 = OpAccessChain %125 %88 
                                  f32 %288 = OpLoad %287 
                                  f32 %289 = OpExtInst %1 4 %288 
                                  f32 %290 = OpFAdd %286 %289 
                         Private f32* %291 = OpAccessChain %119 %88 
                                               OpStore %291 %290 
                                  f32 %292 = OpLoad %90 
                                  f32 %293 = OpFMul %292 %224 
                                  f32 %294 = OpLoad %106 
                                  f32 %295 = OpFAdd %293 %294 
                         Private f32* %296 = OpAccessChain %125 %88 
                                               OpStore %296 %295 
                                  f32 %297 = OpLoad %56 
                                  f32 %298 = OpFMul %297 %224 
                         Private f32* %299 = OpAccessChain %9 %88 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFAdd %298 %300 
                         Private f32* %302 = OpAccessChain %9 %88 
                                               OpStore %302 %301 
                         Private f32* %303 = OpAccessChain %201 %88 
                                  f32 %304 = OpLoad %303 
                         Private f32* %305 = OpAccessChain %125 %88 
                                  f32 %306 = OpLoad %305 
                                  f32 %307 = OpExtInst %1 4 %306 
                                  f32 %308 = OpFAdd %304 %307 
                         Private f32* %309 = OpAccessChain %201 %88 
                                               OpStore %309 %308 
                         Private f32* %310 = OpAccessChain %119 %88 
                                  f32 %311 = OpLoad %310 
                         Private f32* %312 = OpAccessChain %9 %88 
                                  f32 %313 = OpLoad %312 
                                  f32 %314 = OpExtInst %1 4 %313 
                                  f32 %315 = OpFAdd %311 %314 
                         Private f32* %316 = OpAccessChain %9 %88 
                                               OpStore %316 %315 
                         Private f32* %317 = OpAccessChain %237 %88 
                                  f32 %318 = OpLoad %317 
                                  f32 %319 = OpLoad %106 
                                  f32 %320 = OpFAdd %318 %319 
                                               OpStore %106 %320 
                         Private f32* %324 = OpAccessChain %201 %88 
                                  f32 %325 = OpLoad %324 
                         Private f32* %326 = OpAccessChain %9 %88 
                                  f32 %327 = OpLoad %326 
                                 bool %328 = OpFOrdGreaterThanEqual %325 %327 
                        Private bool* %329 = OpAccessChain %323 %88 
                                               OpStore %329 %328 
                                  f32 %330 = OpLoad %216 
                                  f32 %331 = OpFMul %330 %276 
                                  f32 %332 = OpLoad %106 
                                  f32 %333 = OpFAdd %331 %332 
                         Private f32* %334 = OpAccessChain %201 %88 
                                               OpStore %334 %333 
                        Private bool* %335 = OpAccessChain %323 %88 
                                 bool %336 = OpLoad %335 
                                               OpSelectionMerge %340 None 
                                               OpBranchConditional %336 %339 %343 
                                      %339 = OpLabel 
                         Private f32* %341 = OpAccessChain %78 %88 
                                  f32 %342 = OpLoad %341 
                                               OpStore %338 %342 
                                               OpBranch %340 
                                      %343 = OpLabel 
                                  f32 %344 = OpLoad %90 
                                               OpStore %338 %344 
                                               OpBranch %340 
                                      %340 = OpLabel 
                                  f32 %345 = OpLoad %338 
                         Private f32* %346 = OpAccessChain %78 %88 
                                               OpStore %346 %345 
                        Private bool* %347 = OpAccessChain %323 %88 
                                 bool %348 = OpLoad %347 
                                  f32 %349 = OpLoad %56 
                                  f32 %350 = OpLoad %69 
                                  f32 %351 = OpSelect %348 %349 %350 
                                               OpStore %56 %351 
                        Private bool* %352 = OpAccessChain %323 %88 
                                 bool %353 = OpLoad %352 
                                               OpSelectionMerge %356 None 
                                               OpBranchConditional %353 %355 %360 
                                      %355 = OpLabel 
                         Uniform f32* %358 = OpAccessChain %30 %357 %67 
                                  f32 %359 = OpLoad %358 
                                               OpStore %354 %359 
                                               OpBranch %356 
                                      %360 = OpLabel 
                         Uniform f32* %361 = OpAccessChain %30 %357 %88 
                                  f32 %362 = OpLoad %361 
                                               OpStore %354 %362 
                                               OpBranch %356 
                                      %356 = OpLabel 
                                  f32 %363 = OpLoad %354 
                                               OpStore %69 %363 
                         Private f32* %364 = OpAccessChain %201 %88 
                                  f32 %365 = OpLoad %364 
                                  f32 %367 = OpFMul %365 %366 
                         Private f32* %368 = OpAccessChain %41 %67 
                                  f32 %369 = OpLoad %368 
                                  f32 %370 = OpFNegate %369 
                                  f32 %371 = OpFAdd %367 %370 
                         Private f32* %372 = OpAccessChain %201 %88 
                                               OpStore %372 %371 
                         Private f32* %373 = OpAccessChain %41 %67 
                                  f32 %374 = OpLoad %373 
                                  f32 %375 = OpFNegate %374 
                         Private f32* %376 = OpAccessChain %78 %88 
                                  f32 %377 = OpLoad %376 
                                  f32 %378 = OpFAdd %375 %377 
                                               OpStore %90 %378 
                         Private f32* %379 = OpAccessChain %41 %67 
                                  f32 %380 = OpLoad %379 
                                  f32 %381 = OpFNegate %380 
                                  f32 %382 = OpLoad %56 
                                  f32 %383 = OpFAdd %381 %382 
                                               OpStore %106 %383 
                         Private f32* %384 = OpAccessChain %41 %67 
                                  f32 %385 = OpLoad %384 
                         Private f32* %386 = OpAccessChain %78 %88 
                                  f32 %387 = OpLoad %386 
                                  f32 %388 = OpFAdd %385 %387 
                         Private f32* %389 = OpAccessChain %78 %88 
                                               OpStore %389 %388 
                         Private f32* %390 = OpAccessChain %41 %67 
                                  f32 %391 = OpLoad %390 
                                  f32 %392 = OpLoad %56 
                                  f32 %393 = OpFAdd %391 %392 
                                               OpStore %56 %393 
                                  f32 %395 = OpLoad %90 
                                  f32 %396 = OpExtInst %1 4 %395 
                                  f32 %397 = OpLoad %106 
                                  f32 %398 = OpExtInst %1 4 %397 
                                 bool %399 = OpFOrdGreaterThanEqual %396 %398 
                                               OpStore %394 %399 
                                  f32 %400 = OpLoad %106 
                                  f32 %401 = OpExtInst %1 4 %400 
                                  f32 %402 = OpLoad %90 
                                  f32 %403 = OpExtInst %1 4 %402 
                                  f32 %404 = OpExtInst %1 40 %401 %403 
                                               OpStore %90 %404 
                                 bool %405 = OpLoad %394 
                                               OpSelectionMerge %408 None 
                                               OpBranchConditional %405 %407 %411 
                                      %407 = OpLabel 
                                  f32 %409 = OpLoad %69 
                                  f32 %410 = OpFNegate %409 
                                               OpStore %406 %410 
                                               OpBranch %408 
                                      %411 = OpLabel 
                                  f32 %412 = OpLoad %69 
                                               OpStore %406 %412 
                                               OpBranch %408 
                                      %408 = OpLabel 
                                  f32 %413 = OpLoad %406 
                                               OpStore %69 %413 
                         Private f32* %414 = OpAccessChain %100 %88 
                                  f32 %415 = OpLoad %414 
                         Private f32* %416 = OpAccessChain %201 %88 
                                  f32 %417 = OpLoad %416 
                                  f32 %418 = OpExtInst %1 4 %417 
                                  f32 %419 = OpFMul %415 %418 
                         Private f32* %420 = OpAccessChain %201 %88 
                                               OpStore %420 %419 
                         Private f32* %421 = OpAccessChain %201 %88 
                                  f32 %422 = OpLoad %421 
                                  f32 %423 = OpExtInst %1 43 %422 %18 %19 
                         Private f32* %424 = OpAccessChain %201 %88 
                                               OpStore %424 %423 
                        Private bool* %425 = OpAccessChain %323 %88 
                                 bool %426 = OpLoad %425 
                                               OpSelectionMerge %429 None 
                                               OpBranchConditional %426 %428 %432 
                                      %428 = OpLabel 
                         Uniform f32* %430 = OpAccessChain %30 %357 %88 
                                  f32 %431 = OpLoad %430 
                                               OpStore %427 %431 
                                               OpBranch %429 
                                      %432 = OpLabel 
                                               OpStore %427 %18 
                                               OpBranch %429 
                                      %429 = OpLabel 
                                  f32 %433 = OpLoad %427 
                         Private f32* %434 = OpAccessChain %100 %88 
                                               OpStore %434 %433 
                        Private bool* %435 = OpAccessChain %323 %88 
                                 bool %436 = OpLoad %435 
                                               OpSelectionMerge %439 None 
                                               OpBranchConditional %436 %438 %440 
                                      %438 = OpLabel 
                                               OpStore %437 %18 
                                               OpBranch %439 
                                      %440 = OpLabel 
                         Uniform f32* %441 = OpAccessChain %30 %357 %67 
                                  f32 %442 = OpLoad %441 
                                               OpStore %437 %442 
                                               OpBranch %439 
                                      %439 = OpLabel 
                                  f32 %443 = OpLoad %437 
                         Private f32* %444 = OpAccessChain %100 %67 
                                               OpStore %444 %443 
                                  f32 %445 = OpLoad %69 
                                f32_2 %446 = OpCompositeConstruct %445 %445 
                                f32_2 %449 = OpFMul %446 %448 
                                f32_2 %450 = OpLoad vs_TEXCOORD0 
                                f32_2 %451 = OpFAdd %449 %450 
                                               OpStore %125 %451 
                        Private bool* %452 = OpAccessChain %323 %88 
                                 bool %453 = OpLoad %452 
                                               OpSelectionMerge %456 None 
                                               OpBranchConditional %453 %455 %460 
                                      %455 = OpLabel 
                           Input f32* %458 = OpAccessChain vs_TEXCOORD0 %88 
                                  f32 %459 = OpLoad %458 
                                               OpStore %454 %459 
                                               OpBranch %456 
                                      %460 = OpLabel 
                         Private f32* %461 = OpAccessChain %125 %88 
                                  f32 %462 = OpLoad %461 
                                               OpStore %454 %462 
                                               OpBranch %456 
                                      %456 = OpLabel 
                                  f32 %463 = OpLoad %454 
                         Private f32* %464 = OpAccessChain %125 %88 
                                               OpStore %464 %463 
                        Private bool* %465 = OpAccessChain %323 %88 
                                 bool %466 = OpLoad %465 
                                               OpSelectionMerge %469 None 
                                               OpBranchConditional %466 %468 %472 
                                      %468 = OpLabel 
                         Private f32* %470 = OpAccessChain %125 %67 
                                  f32 %471 = OpLoad %470 
                                               OpStore %467 %471 
                                               OpBranch %469 
                                      %472 = OpLabel 
                           Input f32* %473 = OpAccessChain vs_TEXCOORD0 %67 
                                  f32 %474 = OpLoad %473 
                                               OpStore %467 %474 
                                               OpBranch %469 
                                      %469 = OpLabel 
                                  f32 %475 = OpLoad %467 
                         Private f32* %476 = OpAccessChain %125 %67 
                                               OpStore %476 %475 
                                f32_2 %477 = OpLoad %100 
                                f32_2 %478 = OpFNegate %477 
                                f32_2 %479 = OpLoad %125 
                                f32_2 %480 = OpFAdd %478 %479 
                                f32_3 %481 = OpLoad %237 
                                f32_3 %482 = OpVectorShuffle %481 %480 3 4 2 
                                               OpStore %237 %482 
                                f32_2 %484 = OpLoad %100 
                                f32_2 %485 = OpLoad %125 
                                f32_2 %486 = OpFAdd %484 %485 
                                f32_3 %487 = OpLoad %483 
                                f32_3 %488 = OpVectorShuffle %487 %486 3 4 2 
                                               OpStore %483 %488 
                         Private f32* %489 = OpAccessChain %201 %88 
                                  f32 %490 = OpLoad %489 
                                  f32 %491 = OpFMul %490 %224 
                                  f32 %493 = OpFAdd %491 %492 
                         Private f32* %494 = OpAccessChain %125 %88 
                                               OpStore %494 %493 
                                f32_3 %495 = OpLoad %237 
                                f32_2 %496 = OpVectorShuffle %495 %495 0 1 
                                               OpStore %207 %496 
                                f32_2 %497 = OpLoad %207 
                                f32_2 %498 = OpCompositeConstruct %18 %18 
                                f32_2 %499 = OpCompositeConstruct %19 %19 
                                f32_2 %500 = OpExtInst %1 43 %497 %498 %499 
                                               OpStore %207 %500 
                                f32_2 %501 = OpLoad %207 
                         Uniform f32* %502 = OpAccessChain %30 %32 
                                  f32 %503 = OpLoad %502 
                                f32_2 %504 = OpCompositeConstruct %503 %503 
                                f32_2 %505 = OpFMul %501 %504 
                                               OpStore %207 %505 
                  read_only Texture2D %506 = OpLoad %44 
                              sampler %507 = OpLoad %48 
           read_only Texture2DSampled %508 = OpSampledImage %506 %507 
                                f32_2 %509 = OpLoad %207 
                                f32_4 %510 = OpImageSampleExplicitLod %508 %509 Lod %27 
                                  f32 %511 = OpCompositeExtract %510 1 
                         Private f32* %512 = OpAccessChain %207 %88 
                                               OpStore %512 %511 
                         Private f32* %513 = OpAccessChain %201 %88 
                                  f32 %514 = OpLoad %513 
                         Private f32* %515 = OpAccessChain %201 %88 
                                  f32 %516 = OpLoad %515 
                                  f32 %517 = OpFMul %514 %516 
                         Private f32* %518 = OpAccessChain %201 %88 
                                               OpStore %518 %517 
                                f32_3 %520 = OpLoad %483 
                                f32_2 %521 = OpVectorShuffle %520 %520 0 1 
                                               OpStore %519 %521 
                                f32_2 %522 = OpLoad %519 
                                f32_2 %523 = OpCompositeConstruct %18 %18 
                                f32_2 %524 = OpCompositeConstruct %19 %19 
                                f32_2 %525 = OpExtInst %1 43 %522 %523 %524 
                                               OpStore %519 %525 
                                f32_2 %526 = OpLoad %519 
                         Uniform f32* %527 = OpAccessChain %30 %32 
                                  f32 %528 = OpLoad %527 
                                f32_2 %529 = OpCompositeConstruct %528 %528 
                                f32_2 %530 = OpFMul %526 %529 
                                               OpStore %519 %530 
                  read_only Texture2D %531 = OpLoad %44 
                              sampler %532 = OpLoad %48 
           read_only Texture2DSampled %533 = OpSampledImage %531 %532 
                                f32_2 %534 = OpLoad %519 
                                f32_4 %535 = OpImageSampleExplicitLod %533 %534 Lod %27 
                                  f32 %536 = OpCompositeExtract %535 1 
                                               OpStore %216 %536 
                                 bool %537 = OpLoad %394 
                                               OpSelectionMerge %540 None 
                                               OpBranchConditional %537 %539 %543 
                                      %539 = OpLabel 
                         Private f32* %541 = OpAccessChain %78 %88 
                                  f32 %542 = OpLoad %541 
                                               OpStore %538 %542 
                                               OpBranch %540 
                                      %543 = OpLabel 
                                  f32 %544 = OpLoad %56 
                                               OpStore %538 %544 
                                               OpBranch %540 
                                      %540 = OpLabel 
                                  f32 %545 = OpLoad %538 
                                               OpStore %56 %545 
                                  f32 %546 = OpLoad %90 
                                  f32 %548 = OpFMul %546 %547 
                         Private f32* %549 = OpAccessChain %78 %88 
                                               OpStore %549 %548 
                                  f32 %550 = OpLoad %56 
                                  f32 %551 = OpFNegate %550 
                                  f32 %552 = OpFMul %551 %447 
                         Private f32* %553 = OpAccessChain %41 %67 
                                  f32 %554 = OpLoad %553 
                                  f32 %555 = OpFAdd %552 %554 
                                               OpStore %90 %555 
                         Private f32* %556 = OpAccessChain %201 %88 
                                  f32 %557 = OpLoad %556 
                         Private f32* %558 = OpAccessChain %125 %88 
                                  f32 %559 = OpLoad %558 
                                  f32 %560 = OpFMul %557 %559 
                         Private f32* %561 = OpAccessChain %201 %88 
                                               OpStore %561 %560 
                                  f32 %564 = OpLoad %90 
                                 bool %565 = OpFOrdLessThan %564 %18 
                                  u32 %567 = OpSelect %565 %566 %88 
                                  i32 %568 = OpBitcast %567 
                                               OpStore %563 %568 
                                  f32 %569 = OpLoad %56 
                                  f32 %570 = OpFNegate %569 
                                  f32 %571 = OpFMul %570 %447 
                         Private f32* %572 = OpAccessChain %207 %88 
                                  f32 %573 = OpLoad %572 
                                  f32 %574 = OpFAdd %571 %573 
                         Private f32* %575 = OpAccessChain %119 %88 
                                               OpStore %575 %574 
                                  f32 %576 = OpLoad %56 
                                  f32 %577 = OpFNegate %576 
                                  f32 %578 = OpFMul %577 %447 
                                  f32 %579 = OpLoad %216 
                                  f32 %580 = OpFAdd %578 %579 
                         Private f32* %581 = OpAccessChain %119 %67 
                                               OpStore %581 %580 
                                f32_3 %584 = OpLoad %119 
                                f32_4 %585 = OpVectorShuffle %584 %584 0 1 0 1 
                                f32_4 %586 = OpExtInst %1 4 %585 
                                f32_3 %587 = OpLoad %78 
                                f32_4 %588 = OpVectorShuffle %587 %587 0 0 0 0 
                               bool_4 %590 = OpFOrdGreaterThanEqual %586 %588 
                               bool_2 %592 = OpVectorShuffle %590 %590 0 1 
                                u32_2 %596 = OpSelect %592 %595 %594 
                                u32_2 %597 = OpCompositeConstruct %566 %566 
                                u32_2 %598 = OpIMul %596 %597 
                                i32_2 %599 = OpBitcast %598 
                                               OpStore %583 %599 
                         Private f32* %600 = OpAccessChain %100 %88 
                                  f32 %601 = OpLoad %600 
                                  f32 %602 = OpFNegate %601 
                                  f32 %604 = OpFMul %602 %603 
                         Private f32* %605 = OpAccessChain %237 %88 
                                  f32 %606 = OpLoad %605 
                                  f32 %607 = OpFAdd %604 %606 
                         Private f32* %608 = OpAccessChain %519 %88 
                                               OpStore %608 %607 
                         Private i32* %609 = OpAccessChain %583 %88 
                                  i32 %610 = OpLoad %609 
                                 bool %611 = OpINotEqual %610 %32 
                                               OpSelectionMerge %614 None 
                                               OpBranchConditional %611 %613 %617 
                                      %613 = OpLabel 
                         Private f32* %615 = OpAccessChain %237 %88 
                                  f32 %616 = OpLoad %615 
                                               OpStore %612 %616 
                                               OpBranch %614 
                                      %617 = OpLabel 
                         Private f32* %618 = OpAccessChain %519 %88 
                                  f32 %619 = OpLoad %618 
                                               OpStore %612 %619 
                                               OpBranch %614 
                                      %614 = OpLabel 
                                  f32 %620 = OpLoad %612 
                         Private f32* %621 = OpAccessChain %237 %88 
                                               OpStore %621 %620 
                         Private f32* %623 = OpAccessChain %100 %67 
                                  f32 %624 = OpLoad %623 
                                  f32 %625 = OpFNegate %624 
                                  f32 %626 = OpFMul %625 %603 
                         Private f32* %627 = OpAccessChain %237 %67 
                                  f32 %628 = OpLoad %627 
                                  f32 %629 = OpFAdd %626 %628 
                                               OpStore %622 %629 
                         Private i32* %630 = OpAccessChain %583 %88 
                                  i32 %631 = OpLoad %630 
                                 bool %632 = OpINotEqual %631 %32 
                                               OpSelectionMerge %635 None 
                                               OpBranchConditional %632 %634 %638 
                                      %634 = OpLabel 
                         Private f32* %636 = OpAccessChain %237 %67 
                                  f32 %637 = OpLoad %636 
                                               OpStore %633 %637 
                                               OpBranch %635 
                                      %638 = OpLabel 
                                  f32 %639 = OpLoad %622 
                                               OpStore %633 %639 
                                               OpBranch %635 
                                      %635 = OpLabel 
                                  f32 %640 = OpLoad %633 
                         Private f32* %642 = OpAccessChain %237 %641 
                                               OpStore %642 %640 
                                i32_2 %646 = OpLoad %583 
                                i32_2 %647 = OpNot %646 
                                i32_3 %648 = OpLoad %645 
                                i32_3 %649 = OpVectorShuffle %648 %647 3 1 4 
                                               OpStore %645 %649 
                         Private i32* %650 = OpAccessChain %645 %641 
                                  i32 %651 = OpLoad %650 
                                  u32 %652 = OpBitcast %651 
                         Private i32* %653 = OpAccessChain %645 %88 
                                  i32 %654 = OpLoad %653 
                                  u32 %655 = OpBitcast %654 
                                  u32 %656 = OpBitwiseOr %652 %655 
                                  i32 %657 = OpBitcast %656 
                         Private i32* %658 = OpAccessChain %645 %88 
                                               OpStore %658 %657 
                         Private f32* %659 = OpAccessChain %100 %88 
                                  f32 %660 = OpLoad %659 
                                  f32 %661 = OpFMul %660 %603 
                         Private f32* %662 = OpAccessChain %483 %88 
                                  f32 %663 = OpLoad %662 
                                  f32 %664 = OpFAdd %661 %663 
                                               OpStore %622 %664 
                         Private i32* %665 = OpAccessChain %583 %67 
                                  i32 %666 = OpLoad %665 
                                 bool %667 = OpINotEqual %666 %32 
                                               OpSelectionMerge %670 None 
                                               OpBranchConditional %667 %669 %673 
                                      %669 = OpLabel 
                         Private f32* %671 = OpAccessChain %483 %88 
                                  f32 %672 = OpLoad %671 
                                               OpStore %668 %672 
                                               OpBranch %670 
                                      %673 = OpLabel 
                                  f32 %674 = OpLoad %622 
                                               OpStore %668 %674 
                                               OpBranch %670 
                                      %670 = OpLabel 
                                  f32 %675 = OpLoad %668 
                         Private f32* %676 = OpAccessChain %483 %88 
                                               OpStore %676 %675 
                         Private f32* %677 = OpAccessChain %100 %67 
                                  f32 %678 = OpLoad %677 
                                  f32 %679 = OpFMul %678 %603 
                         Private f32* %680 = OpAccessChain %483 %67 
                                  f32 %681 = OpLoad %680 
                                  f32 %682 = OpFAdd %679 %681 
                                               OpStore %622 %682 
                         Private i32* %683 = OpAccessChain %583 %67 
                                  i32 %684 = OpLoad %683 
                                 bool %685 = OpINotEqual %684 %32 
                                               OpSelectionMerge %688 None 
                                               OpBranchConditional %685 %687 %691 
                                      %687 = OpLabel 
                         Private f32* %689 = OpAccessChain %483 %67 
                                  f32 %690 = OpLoad %689 
                                               OpStore %686 %690 
                                               OpBranch %688 
                                      %691 = OpLabel 
                                  f32 %692 = OpLoad %622 
                                               OpStore %686 %692 
                                               OpBranch %688 
                                      %688 = OpLabel 
                                  f32 %693 = OpLoad %686 
                         Private f32* %694 = OpAccessChain %483 %641 
                                               OpStore %694 %693 
                         Private i32* %695 = OpAccessChain %645 %88 
                                  i32 %696 = OpLoad %695 
                                 bool %697 = OpINotEqual %696 %32 
                                               OpSelectionMerge %699 None 
                                               OpBranchConditional %697 %698 %699 
                                      %698 = OpLabel 
                         Private i32* %700 = OpAccessChain %583 %88 
                                  i32 %701 = OpLoad %700 
                                 bool %702 = OpIEqual %701 %32 
                                               OpSelectionMerge %704 None 
                                               OpBranchConditional %702 %703 %704 
                                      %703 = OpLabel 
                                f32_3 %705 = OpLoad %237 
                                f32_2 %706 = OpVectorShuffle %705 %705 0 2 
                                f32_3 %707 = OpLoad %249 
                                f32_3 %708 = OpVectorShuffle %707 %706 3 1 4 
                                               OpStore %249 %708 
                                f32_3 %709 = OpLoad %249 
                                f32_2 %710 = OpVectorShuffle %709 %709 0 2 
                                f32_2 %711 = OpCompositeConstruct %18 %18 
                                f32_2 %712 = OpCompositeConstruct %19 %19 
                                f32_2 %713 = OpExtInst %1 43 %710 %711 %712 
                                f32_3 %714 = OpLoad %249 
                                f32_3 %715 = OpVectorShuffle %714 %713 3 1 4 
                                               OpStore %249 %715 
                                f32_3 %716 = OpLoad %249 
                                f32_2 %717 = OpVectorShuffle %716 %716 0 2 
                         Uniform f32* %718 = OpAccessChain %30 %32 
                                  f32 %719 = OpLoad %718 
                                f32_2 %720 = OpCompositeConstruct %719 %719 
                                f32_2 %721 = OpFMul %717 %720 
                                f32_3 %722 = OpLoad %249 
                                f32_3 %723 = OpVectorShuffle %722 %721 3 1 4 
                                               OpStore %249 %723 
                  read_only Texture2D %724 = OpLoad %44 
                              sampler %725 = OpLoad %48 
           read_only Texture2DSampled %726 = OpSampledImage %724 %725 
                                f32_3 %727 = OpLoad %249 
                                f32_2 %728 = OpVectorShuffle %727 %727 0 2 
                                f32_4 %729 = OpImageSampleExplicitLod %726 %728 Lod %27 
                                  f32 %730 = OpCompositeExtract %729 1 
                         Private f32* %731 = OpAccessChain %119 %88 
                                               OpStore %731 %730 
                                               OpBranch %704 
                                      %704 = OpLabel 
                         Private i32* %732 = OpAccessChain %583 %67 
                                  i32 %733 = OpLoad %732 
                                 bool %734 = OpIEqual %733 %32 
                                               OpSelectionMerge %736 None 
                                               OpBranchConditional %734 %735 %736 
                                      %735 = OpLabel 
                                f32_3 %737 = OpLoad %483 
                                f32_2 %738 = OpVectorShuffle %737 %737 0 2 
                                f32_3 %739 = OpLoad %249 
                                f32_3 %740 = OpVectorShuffle %739 %738 3 1 4 
                                               OpStore %249 %740 
                                f32_3 %741 = OpLoad %249 
                                f32_2 %742 = OpVectorShuffle %741 %741 0 2 
                                f32_2 %743 = OpCompositeConstruct %18 %18 
                                f32_2 %744 = OpCompositeConstruct %19 %19 
                                f32_2 %745 = OpExtInst %1 43 %742 %743 %744 
                                f32_3 %746 = OpLoad %249 
                                f32_3 %747 = OpVectorShuffle %746 %745 3 1 4 
                                               OpStore %249 %747 
                                f32_3 %748 = OpLoad %249 
                                f32_2 %749 = OpVectorShuffle %748 %748 0 2 
                         Uniform f32* %750 = OpAccessChain %30 %32 
                                  f32 %751 = OpLoad %750 
                                f32_2 %752 = OpCompositeConstruct %751 %751 
                                f32_2 %753 = OpFMul %749 %752 
                                f32_3 %754 = OpLoad %249 
                                f32_3 %755 = OpVectorShuffle %754 %753 3 1 4 
                                               OpStore %249 %755 
                  read_only Texture2D %756 = OpLoad %44 
                              sampler %757 = OpLoad %48 
           read_only Texture2DSampled %758 = OpSampledImage %756 %757 
                                f32_3 %759 = OpLoad %249 
                                f32_2 %760 = OpVectorShuffle %759 %759 0 2 
                                f32_4 %761 = OpImageSampleExplicitLod %758 %760 Lod %27 
                                  f32 %762 = OpCompositeExtract %761 1 
                         Private f32* %763 = OpAccessChain %119 %67 
                                               OpStore %763 %762 
                                               OpBranch %736 
                                      %736 = OpLabel 
                                  f32 %764 = OpLoad %56 
                                  f32 %765 = OpFNegate %764 
                                  f32 %766 = OpFMul %765 %447 
                         Private f32* %767 = OpAccessChain %119 %88 
                                  f32 %768 = OpLoad %767 
                                  f32 %769 = OpFAdd %766 %768 
                         Private f32* %770 = OpAccessChain %249 %88 
                                               OpStore %770 %769 
                         Private i32* %771 = OpAccessChain %583 %88 
                                  i32 %772 = OpLoad %771 
                                 bool %773 = OpINotEqual %772 %32 
                                               OpSelectionMerge %776 None 
                                               OpBranchConditional %773 %775 %779 
                                      %775 = OpLabel 
                         Private f32* %777 = OpAccessChain %119 %88 
                                  f32 %778 = OpLoad %777 
                                               OpStore %774 %778 
                                               OpBranch %776 
                                      %779 = OpLabel 
                         Private f32* %780 = OpAccessChain %249 %88 
                                  f32 %781 = OpLoad %780 
                                               OpStore %774 %781 
                                               OpBranch %776 
                                      %776 = OpLabel 
                                  f32 %782 = OpLoad %774 
                         Private f32* %783 = OpAccessChain %119 %88 
                                               OpStore %783 %782 
                                  f32 %784 = OpLoad %56 
                                  f32 %785 = OpFNegate %784 
                                  f32 %786 = OpFMul %785 %447 
                         Private f32* %787 = OpAccessChain %119 %67 
                                  f32 %788 = OpLoad %787 
                                  f32 %789 = OpFAdd %786 %788 
                         Private f32* %790 = OpAccessChain %207 %88 
                                               OpStore %790 %789 
                         Private i32* %791 = OpAccessChain %583 %67 
                                  i32 %792 = OpLoad %791 
                                 bool %793 = OpINotEqual %792 %32 
                                               OpSelectionMerge %796 None 
                                               OpBranchConditional %793 %795 %799 
                                      %795 = OpLabel 
                         Private f32* %797 = OpAccessChain %119 %67 
                                  f32 %798 = OpLoad %797 
                                               OpStore %794 %798 
                                               OpBranch %796 
                                      %799 = OpLabel 
                         Private f32* %800 = OpAccessChain %207 %88 
                                  f32 %801 = OpLoad %800 
                                               OpStore %794 %801 
                                               OpBranch %796 
                                      %796 = OpLabel 
                                  f32 %802 = OpLoad %794 
                         Private f32* %803 = OpAccessChain %119 %67 
                                               OpStore %803 %802 
                                f32_3 %804 = OpLoad %119 
                                f32_4 %805 = OpVectorShuffle %804 %804 0 1 0 1 
                                f32_4 %806 = OpExtInst %1 4 %805 
                                f32_3 %807 = OpLoad %78 
                                f32_4 %808 = OpVectorShuffle %807 %807 0 0 0 0 
                               bool_4 %809 = OpFOrdGreaterThanEqual %806 %808 
                               bool_2 %810 = OpVectorShuffle %809 %809 0 1 
                                u32_2 %811 = OpSelect %810 %595 %594 
                                u32_2 %812 = OpCompositeConstruct %566 %566 
                                u32_2 %813 = OpIMul %811 %812 
                                i32_2 %814 = OpBitcast %813 
                                               OpStore %583 %814 
                         Private f32* %815 = OpAccessChain %100 %88 
                                  f32 %816 = OpLoad %815 
                                  f32 %817 = OpFNegate %816 
                                  f32 %818 = OpFMul %817 %276 
                         Private f32* %819 = OpAccessChain %237 %88 
                                  f32 %820 = OpLoad %819 
                                  f32 %821 = OpFAdd %818 %820 
                         Private f32* %822 = OpAccessChain %249 %88 
                                               OpStore %822 %821 
                         Private i32* %823 = OpAccessChain %583 %88 
                                  i32 %824 = OpLoad %823 
                                 bool %825 = OpINotEqual %824 %32 
                                               OpSelectionMerge %828 None 
                                               OpBranchConditional %825 %827 %831 
                                      %827 = OpLabel 
                         Private f32* %829 = OpAccessChain %237 %88 
                                  f32 %830 = OpLoad %829 
                                               OpStore %826 %830 
                                               OpBranch %828 
                                      %831 = OpLabel 
                         Private f32* %832 = OpAccessChain %249 %88 
                                  f32 %833 = OpLoad %832 
                                               OpStore %826 %833 
                                               OpBranch %828 
                                      %828 = OpLabel 
                                  f32 %834 = OpLoad %826 
                         Private f32* %835 = OpAccessChain %237 %88 
                                               OpStore %835 %834 
                         Private f32* %836 = OpAccessChain %100 %67 
                                  f32 %837 = OpLoad %836 
                                  f32 %838 = OpFNegate %837 
                                  f32 %839 = OpFMul %838 %276 
                         Private f32* %840 = OpAccessChain %237 %641 
                                  f32 %841 = OpLoad %840 
                                  f32 %842 = OpFAdd %839 %841 
                         Private f32* %843 = OpAccessChain %249 %88 
                                               OpStore %843 %842 
                         Private i32* %844 = OpAccessChain %583 %88 
                                  i32 %845 = OpLoad %844 
                                 bool %846 = OpINotEqual %845 %32 
                                               OpSelectionMerge %849 None 
                                               OpBranchConditional %846 %848 %852 
                                      %848 = OpLabel 
                         Private f32* %850 = OpAccessChain %237 %641 
                                  f32 %851 = OpLoad %850 
                                               OpStore %847 %851 
                                               OpBranch %849 
                                      %852 = OpLabel 
                         Private f32* %853 = OpAccessChain %249 %88 
                                  f32 %854 = OpLoad %853 
                                               OpStore %847 %854 
                                               OpBranch %849 
                                      %849 = OpLabel 
                                  f32 %855 = OpLoad %847 
                         Private f32* %856 = OpAccessChain %237 %641 
                                               OpStore %856 %855 
                                i32_2 %857 = OpLoad %583 
                                i32_2 %858 = OpNot %857 
                                i32_3 %859 = OpLoad %645 
                                i32_3 %860 = OpVectorShuffle %859 %858 3 1 4 
                                               OpStore %645 %860 
                         Private i32* %861 = OpAccessChain %645 %641 
                                  i32 %862 = OpLoad %861 
                                  u32 %863 = OpBitcast %862 
                         Private i32* %864 = OpAccessChain %645 %88 
                                  i32 %865 = OpLoad %864 
                                  u32 %866 = OpBitcast %865 
                                  u32 %867 = OpBitwiseOr %863 %866 
                                  i32 %868 = OpBitcast %867 
                         Private i32* %869 = OpAccessChain %645 %88 
                                               OpStore %869 %868 
                         Private f32* %870 = OpAccessChain %100 %88 
                                  f32 %871 = OpLoad %870 
                                  f32 %872 = OpFMul %871 %276 
                         Private f32* %873 = OpAccessChain %483 %88 
                                  f32 %874 = OpLoad %873 
                                  f32 %875 = OpFAdd %872 %874 
                                               OpStore %622 %875 
                         Private i32* %876 = OpAccessChain %583 %67 
                                  i32 %877 = OpLoad %876 
                                 bool %878 = OpINotEqual %877 %32 
                                               OpSelectionMerge %881 None 
                                               OpBranchConditional %878 %880 %884 
                                      %880 = OpLabel 
                         Private f32* %882 = OpAccessChain %483 %88 
                                  f32 %883 = OpLoad %882 
                                               OpStore %879 %883 
                                               OpBranch %881 
                                      %884 = OpLabel 
                                  f32 %885 = OpLoad %622 
                                               OpStore %879 %885 
                                               OpBranch %881 
                                      %881 = OpLabel 
                                  f32 %886 = OpLoad %879 
                         Private f32* %887 = OpAccessChain %483 %88 
                                               OpStore %887 %886 
                         Private f32* %888 = OpAccessChain %100 %67 
                                  f32 %889 = OpLoad %888 
                                  f32 %890 = OpFMul %889 %276 
                         Private f32* %891 = OpAccessChain %483 %641 
                                  f32 %892 = OpLoad %891 
                                  f32 %893 = OpFAdd %890 %892 
                                               OpStore %622 %893 
                         Private i32* %894 = OpAccessChain %583 %67 
                                  i32 %895 = OpLoad %894 
                                 bool %896 = OpINotEqual %895 %32 
                                               OpSelectionMerge %899 None 
                                               OpBranchConditional %896 %898 %902 
                                      %898 = OpLabel 
                         Private f32* %900 = OpAccessChain %483 %641 
                                  f32 %901 = OpLoad %900 
                                               OpStore %897 %901 
                                               OpBranch %899 
                                      %902 = OpLabel 
                                  f32 %903 = OpLoad %622 
                                               OpStore %897 %903 
                                               OpBranch %899 
                                      %899 = OpLabel 
                                  f32 %904 = OpLoad %897 
                         Private f32* %905 = OpAccessChain %483 %641 
                                               OpStore %905 %904 
                         Private i32* %906 = OpAccessChain %645 %88 
                                  i32 %907 = OpLoad %906 
                                 bool %908 = OpINotEqual %907 %32 
                                               OpSelectionMerge %910 None 
                                               OpBranchConditional %908 %909 %910 
                                      %909 = OpLabel 
                         Private i32* %911 = OpAccessChain %583 %88 
                                  i32 %912 = OpLoad %911 
                                 bool %913 = OpIEqual %912 %32 
                                               OpSelectionMerge %915 None 
                                               OpBranchConditional %913 %914 %915 
                                      %914 = OpLabel 
                                f32_3 %916 = OpLoad %237 
                                f32_2 %917 = OpVectorShuffle %916 %916 0 2 
                                f32_3 %918 = OpLoad %249 
                                f32_3 %919 = OpVectorShuffle %918 %917 3 1 4 
                                               OpStore %249 %919 
                                f32_3 %920 = OpLoad %249 
                                f32_2 %921 = OpVectorShuffle %920 %920 0 2 
                                f32_2 %922 = OpCompositeConstruct %18 %18 
                                f32_2 %923 = OpCompositeConstruct %19 %19 
                                f32_2 %924 = OpExtInst %1 43 %921 %922 %923 
                                f32_3 %925 = OpLoad %249 
                                f32_3 %926 = OpVectorShuffle %925 %924 3 1 4 
                                               OpStore %249 %926 
                                f32_3 %927 = OpLoad %249 
                                f32_2 %928 = OpVectorShuffle %927 %927 0 2 
                         Uniform f32* %929 = OpAccessChain %30 %32 
                                  f32 %930 = OpLoad %929 
                                f32_2 %931 = OpCompositeConstruct %930 %930 
                                f32_2 %932 = OpFMul %928 %931 
                                f32_3 %933 = OpLoad %249 
                                f32_3 %934 = OpVectorShuffle %933 %932 3 1 4 
                                               OpStore %249 %934 
                  read_only Texture2D %935 = OpLoad %44 
                              sampler %936 = OpLoad %48 
           read_only Texture2DSampled %937 = OpSampledImage %935 %936 
                                f32_3 %938 = OpLoad %249 
                                f32_2 %939 = OpVectorShuffle %938 %938 0 2 
                                f32_4 %940 = OpImageSampleExplicitLod %937 %939 Lod %27 
                                  f32 %941 = OpCompositeExtract %940 1 
                         Private f32* %942 = OpAccessChain %119 %88 
                                               OpStore %942 %941 
                                               OpBranch %915 
                                      %915 = OpLabel 
                         Private i32* %943 = OpAccessChain %583 %67 
                                  i32 %944 = OpLoad %943 
                                 bool %945 = OpIEqual %944 %32 
                                               OpSelectionMerge %947 None 
                                               OpBranchConditional %945 %946 %947 
                                      %946 = OpLabel 
                                f32_3 %948 = OpLoad %483 
                                f32_2 %949 = OpVectorShuffle %948 %948 0 2 
                                f32_3 %950 = OpLoad %249 
                                f32_3 %951 = OpVectorShuffle %950 %949 3 1 4 
                                               OpStore %249 %951 
                                f32_3 %952 = OpLoad %249 
                                f32_2 %953 = OpVectorShuffle %952 %952 0 2 
                                f32_2 %954 = OpCompositeConstruct %18 %18 
                                f32_2 %955 = OpCompositeConstruct %19 %19 
                                f32_2 %956 = OpExtInst %1 43 %953 %954 %955 
                                f32_3 %957 = OpLoad %249 
                                f32_3 %958 = OpVectorShuffle %957 %956 3 1 4 
                                               OpStore %249 %958 
                                f32_3 %959 = OpLoad %249 
                                f32_2 %960 = OpVectorShuffle %959 %959 0 2 
                         Uniform f32* %961 = OpAccessChain %30 %32 
                                  f32 %962 = OpLoad %961 
                                f32_2 %963 = OpCompositeConstruct %962 %962 
                                f32_2 %964 = OpFMul %960 %963 
                                f32_3 %965 = OpLoad %249 
                                f32_3 %966 = OpVectorShuffle %965 %964 3 1 4 
                                               OpStore %249 %966 
                  read_only Texture2D %967 = OpLoad %44 
                              sampler %968 = OpLoad %48 
           read_only Texture2DSampled %969 = OpSampledImage %967 %968 
                                f32_3 %970 = OpLoad %249 
                                f32_2 %971 = OpVectorShuffle %970 %970 0 2 
                                f32_4 %972 = OpImageSampleExplicitLod %969 %971 Lod %27 
                                  f32 %973 = OpCompositeExtract %972 1 
                         Private f32* %974 = OpAccessChain %119 %67 
                                               OpStore %974 %973 
                                               OpBranch %947 
                                      %947 = OpLabel 
                                  f32 %975 = OpLoad %56 
                                  f32 %976 = OpFNegate %975 
                                  f32 %977 = OpFMul %976 %447 
                         Private f32* %978 = OpAccessChain %119 %88 
                                  f32 %979 = OpLoad %978 
                                  f32 %980 = OpFAdd %977 %979 
                         Private f32* %981 = OpAccessChain %249 %88 
                                               OpStore %981 %980 
                         Private i32* %982 = OpAccessChain %583 %88 
                                  i32 %983 = OpLoad %982 
                                 bool %984 = OpINotEqual %983 %32 
                                               OpSelectionMerge %987 None 
                                               OpBranchConditional %984 %986 %990 
                                      %986 = OpLabel 
                         Private f32* %988 = OpAccessChain %119 %88 
                                  f32 %989 = OpLoad %988 
                                               OpStore %985 %989 
                                               OpBranch %987 
                                      %990 = OpLabel 
                         Private f32* %991 = OpAccessChain %249 %88 
                                  f32 %992 = OpLoad %991 
                                               OpStore %985 %992 
                                               OpBranch %987 
                                      %987 = OpLabel 
                                  f32 %993 = OpLoad %985 
                         Private f32* %994 = OpAccessChain %119 %88 
                                               OpStore %994 %993 
                                  f32 %995 = OpLoad %56 
                                  f32 %996 = OpFNegate %995 
                                  f32 %997 = OpFMul %996 %447 
                         Private f32* %998 = OpAccessChain %119 %67 
                                  f32 %999 = OpLoad %998 
                                 f32 %1000 = OpFAdd %997 %999 
                        Private f32* %1001 = OpAccessChain %207 %88 
                                               OpStore %1001 %1000 
                        Private i32* %1002 = OpAccessChain %583 %67 
                                 i32 %1003 = OpLoad %1002 
                                bool %1004 = OpINotEqual %1003 %32 
                                               OpSelectionMerge %1007 None 
                                               OpBranchConditional %1004 %1006 %1010 
                                     %1006 = OpLabel 
                        Private f32* %1008 = OpAccessChain %119 %67 
                                 f32 %1009 = OpLoad %1008 
                                               OpStore %1005 %1009 
                                               OpBranch %1007 
                                     %1010 = OpLabel 
                        Private f32* %1011 = OpAccessChain %207 %88 
                                 f32 %1012 = OpLoad %1011 
                                               OpStore %1005 %1012 
                                               OpBranch %1007 
                                     %1007 = OpLabel 
                                 f32 %1013 = OpLoad %1005 
                        Private f32* %1014 = OpAccessChain %119 %67 
                                               OpStore %1014 %1013 
                               f32_3 %1015 = OpLoad %119 
                               f32_4 %1016 = OpVectorShuffle %1015 %1015 0 1 0 1 
                               f32_4 %1017 = OpExtInst %1 4 %1016 
                               f32_3 %1018 = OpLoad %78 
                               f32_4 %1019 = OpVectorShuffle %1018 %1018 0 0 0 0 
                              bool_4 %1020 = OpFOrdGreaterThanEqual %1017 %1019 
                              bool_2 %1021 = OpVectorShuffle %1020 %1020 0 1 
                               u32_2 %1022 = OpSelect %1021 %595 %594 
                               u32_2 %1023 = OpCompositeConstruct %566 %566 
                               u32_2 %1024 = OpIMul %1022 %1023 
                               i32_2 %1025 = OpBitcast %1024 
                                               OpStore %583 %1025 
                        Private f32* %1026 = OpAccessChain %100 %88 
                                 f32 %1027 = OpLoad %1026 
                                 f32 %1028 = OpFNegate %1027 
                                 f32 %1030 = OpFMul %1028 %1029 
                        Private f32* %1031 = OpAccessChain %237 %88 
                                 f32 %1032 = OpLoad %1031 
                                 f32 %1033 = OpFAdd %1030 %1032 
                        Private f32* %1034 = OpAccessChain %249 %88 
                                               OpStore %1034 %1033 
                        Private i32* %1035 = OpAccessChain %583 %88 
                                 i32 %1036 = OpLoad %1035 
                                bool %1037 = OpINotEqual %1036 %32 
                                               OpSelectionMerge %1040 None 
                                               OpBranchConditional %1037 %1039 %1043 
                                     %1039 = OpLabel 
                        Private f32* %1041 = OpAccessChain %237 %88 
                                 f32 %1042 = OpLoad %1041 
                                               OpStore %1038 %1042 
                                               OpBranch %1040 
                                     %1043 = OpLabel 
                        Private f32* %1044 = OpAccessChain %249 %88 
                                 f32 %1045 = OpLoad %1044 
                                               OpStore %1038 %1045 
                                               OpBranch %1040 
                                     %1040 = OpLabel 
                                 f32 %1046 = OpLoad %1038 
                        Private f32* %1047 = OpAccessChain %237 %88 
                                               OpStore %1047 %1046 
                        Private f32* %1048 = OpAccessChain %100 %67 
                                 f32 %1049 = OpLoad %1048 
                                 f32 %1050 = OpFNegate %1049 
                                 f32 %1051 = OpFMul %1050 %1029 
                        Private f32* %1052 = OpAccessChain %237 %641 
                                 f32 %1053 = OpLoad %1052 
                                 f32 %1054 = OpFAdd %1051 %1053 
                        Private f32* %1055 = OpAccessChain %249 %88 
                                               OpStore %1055 %1054 
                        Private i32* %1056 = OpAccessChain %583 %88 
                                 i32 %1057 = OpLoad %1056 
                                bool %1058 = OpINotEqual %1057 %32 
                                               OpSelectionMerge %1061 None 
                                               OpBranchConditional %1058 %1060 %1064 
                                     %1060 = OpLabel 
                        Private f32* %1062 = OpAccessChain %237 %641 
                                 f32 %1063 = OpLoad %1062 
                                               OpStore %1059 %1063 
                                               OpBranch %1061 
                                     %1064 = OpLabel 
                        Private f32* %1065 = OpAccessChain %249 %88 
                                 f32 %1066 = OpLoad %1065 
                                               OpStore %1059 %1066 
                                               OpBranch %1061 
                                     %1061 = OpLabel 
                                 f32 %1067 = OpLoad %1059 
                        Private f32* %1068 = OpAccessChain %237 %641 
                                               OpStore %1068 %1067 
                               i32_2 %1069 = OpLoad %583 
                               i32_2 %1070 = OpNot %1069 
                               i32_3 %1071 = OpLoad %645 
                               i32_3 %1072 = OpVectorShuffle %1071 %1070 3 1 4 
                                               OpStore %645 %1072 
                        Private i32* %1073 = OpAccessChain %645 %641 
                                 i32 %1074 = OpLoad %1073 
                                 u32 %1075 = OpBitcast %1074 
                        Private i32* %1076 = OpAccessChain %645 %88 
                                 i32 %1077 = OpLoad %1076 
                                 u32 %1078 = OpBitcast %1077 
                                 u32 %1079 = OpBitwiseOr %1075 %1078 
                                 i32 %1080 = OpBitcast %1079 
                        Private i32* %1081 = OpAccessChain %645 %88 
                                               OpStore %1081 %1080 
                        Private f32* %1082 = OpAccessChain %100 %88 
                                 f32 %1083 = OpLoad %1082 
                                 f32 %1084 = OpFMul %1083 %1029 
                        Private f32* %1085 = OpAccessChain %483 %88 
                                 f32 %1086 = OpLoad %1085 
                                 f32 %1087 = OpFAdd %1084 %1086 
                                               OpStore %622 %1087 
                        Private i32* %1088 = OpAccessChain %583 %67 
                                 i32 %1089 = OpLoad %1088 
                                bool %1090 = OpINotEqual %1089 %32 
                                               OpSelectionMerge %1093 None 
                                               OpBranchConditional %1090 %1092 %1096 
                                     %1092 = OpLabel 
                        Private f32* %1094 = OpAccessChain %483 %88 
                                 f32 %1095 = OpLoad %1094 
                                               OpStore %1091 %1095 
                                               OpBranch %1093 
                                     %1096 = OpLabel 
                                 f32 %1097 = OpLoad %622 
                                               OpStore %1091 %1097 
                                               OpBranch %1093 
                                     %1093 = OpLabel 
                                 f32 %1098 = OpLoad %1091 
                        Private f32* %1099 = OpAccessChain %483 %88 
                                               OpStore %1099 %1098 
                        Private f32* %1100 = OpAccessChain %100 %67 
                                 f32 %1101 = OpLoad %1100 
                                 f32 %1102 = OpFMul %1101 %1029 
                        Private f32* %1103 = OpAccessChain %483 %641 
                                 f32 %1104 = OpLoad %1103 
                                 f32 %1105 = OpFAdd %1102 %1104 
                                               OpStore %622 %1105 
                        Private i32* %1106 = OpAccessChain %583 %67 
                                 i32 %1107 = OpLoad %1106 
                                bool %1108 = OpINotEqual %1107 %32 
                                               OpSelectionMerge %1111 None 
                                               OpBranchConditional %1108 %1110 %1114 
                                     %1110 = OpLabel 
                        Private f32* %1112 = OpAccessChain %483 %641 
                                 f32 %1113 = OpLoad %1112 
                                               OpStore %1109 %1113 
                                               OpBranch %1111 
                                     %1114 = OpLabel 
                                 f32 %1115 = OpLoad %622 
                                               OpStore %1109 %1115 
                                               OpBranch %1111 
                                     %1111 = OpLabel 
                                 f32 %1116 = OpLoad %1109 
                        Private f32* %1117 = OpAccessChain %483 %641 
                                               OpStore %1117 %1116 
                        Private i32* %1118 = OpAccessChain %645 %88 
                                 i32 %1119 = OpLoad %1118 
                                bool %1120 = OpINotEqual %1119 %32 
                                               OpSelectionMerge %1122 None 
                                               OpBranchConditional %1120 %1121 %1122 
                                     %1121 = OpLabel 
                        Private i32* %1123 = OpAccessChain %583 %88 
                                 i32 %1124 = OpLoad %1123 
                                bool %1125 = OpIEqual %1124 %32 
                                               OpSelectionMerge %1127 None 
                                               OpBranchConditional %1125 %1126 %1127 
                                     %1126 = OpLabel 
                               f32_3 %1128 = OpLoad %237 
                               f32_2 %1129 = OpVectorShuffle %1128 %1128 0 2 
                               f32_3 %1130 = OpLoad %249 
                               f32_3 %1131 = OpVectorShuffle %1130 %1129 3 1 4 
                                               OpStore %249 %1131 
                               f32_3 %1132 = OpLoad %249 
                               f32_2 %1133 = OpVectorShuffle %1132 %1132 0 2 
                               f32_2 %1134 = OpCompositeConstruct %18 %18 
                               f32_2 %1135 = OpCompositeConstruct %19 %19 
                               f32_2 %1136 = OpExtInst %1 43 %1133 %1134 %1135 
                               f32_3 %1137 = OpLoad %249 
                               f32_3 %1138 = OpVectorShuffle %1137 %1136 3 1 4 
                                               OpStore %249 %1138 
                               f32_3 %1139 = OpLoad %249 
                               f32_2 %1140 = OpVectorShuffle %1139 %1139 0 2 
                        Uniform f32* %1141 = OpAccessChain %30 %32 
                                 f32 %1142 = OpLoad %1141 
                               f32_2 %1143 = OpCompositeConstruct %1142 %1142 
                               f32_2 %1144 = OpFMul %1140 %1143 
                               f32_3 %1145 = OpLoad %249 
                               f32_3 %1146 = OpVectorShuffle %1145 %1144 3 1 4 
                                               OpStore %249 %1146 
                 read_only Texture2D %1147 = OpLoad %44 
                             sampler %1148 = OpLoad %48 
          read_only Texture2DSampled %1149 = OpSampledImage %1147 %1148 
                               f32_3 %1150 = OpLoad %249 
                               f32_2 %1151 = OpVectorShuffle %1150 %1150 0 2 
                               f32_4 %1152 = OpImageSampleExplicitLod %1149 %1151 Lod %27 
                                 f32 %1153 = OpCompositeExtract %1152 1 
                        Private f32* %1154 = OpAccessChain %119 %88 
                                               OpStore %1154 %1153 
                                               OpBranch %1127 
                                     %1127 = OpLabel 
                        Private i32* %1155 = OpAccessChain %583 %67 
                                 i32 %1156 = OpLoad %1155 
                                bool %1157 = OpIEqual %1156 %32 
                                               OpSelectionMerge %1159 None 
                                               OpBranchConditional %1157 %1158 %1159 
                                     %1158 = OpLabel 
                               f32_3 %1160 = OpLoad %483 
                               f32_2 %1161 = OpVectorShuffle %1160 %1160 0 2 
                               f32_3 %1162 = OpLoad %249 
                               f32_3 %1163 = OpVectorShuffle %1162 %1161 3 1 4 
                                               OpStore %249 %1163 
                               f32_3 %1164 = OpLoad %249 
                               f32_2 %1165 = OpVectorShuffle %1164 %1164 0 2 
                               f32_2 %1166 = OpCompositeConstruct %18 %18 
                               f32_2 %1167 = OpCompositeConstruct %19 %19 
                               f32_2 %1168 = OpExtInst %1 43 %1165 %1166 %1167 
                               f32_3 %1169 = OpLoad %249 
                               f32_3 %1170 = OpVectorShuffle %1169 %1168 3 1 4 
                                               OpStore %249 %1170 
                               f32_3 %1171 = OpLoad %249 
                               f32_2 %1172 = OpVectorShuffle %1171 %1171 0 2 
                        Uniform f32* %1173 = OpAccessChain %30 %32 
                                 f32 %1174 = OpLoad %1173 
                               f32_2 %1175 = OpCompositeConstruct %1174 %1174 
                               f32_2 %1176 = OpFMul %1172 %1175 
                               f32_3 %1177 = OpLoad %249 
                               f32_3 %1178 = OpVectorShuffle %1177 %1176 3 1 4 
                                               OpStore %249 %1178 
                 read_only Texture2D %1179 = OpLoad %44 
                             sampler %1180 = OpLoad %48 
          read_only Texture2DSampled %1181 = OpSampledImage %1179 %1180 
                               f32_3 %1182 = OpLoad %249 
                               f32_2 %1183 = OpVectorShuffle %1182 %1182 0 2 
                               f32_4 %1184 = OpImageSampleExplicitLod %1181 %1183 Lod %27 
                                 f32 %1185 = OpCompositeExtract %1184 1 
                        Private f32* %1186 = OpAccessChain %119 %67 
                                               OpStore %1186 %1185 
                                               OpBranch %1159 
                                     %1159 = OpLabel 
                                 f32 %1187 = OpLoad %56 
                                 f32 %1188 = OpFNegate %1187 
                                 f32 %1189 = OpFMul %1188 %447 
                        Private f32* %1190 = OpAccessChain %119 %88 
                                 f32 %1191 = OpLoad %1190 
                                 f32 %1192 = OpFAdd %1189 %1191 
                        Private f32* %1193 = OpAccessChain %249 %88 
                                               OpStore %1193 %1192 
                        Private i32* %1194 = OpAccessChain %583 %88 
                                 i32 %1195 = OpLoad %1194 
                                bool %1196 = OpINotEqual %1195 %32 
                                               OpSelectionMerge %1199 None 
                                               OpBranchConditional %1196 %1198 %1202 
                                     %1198 = OpLabel 
                        Private f32* %1200 = OpAccessChain %119 %88 
                                 f32 %1201 = OpLoad %1200 
                                               OpStore %1197 %1201 
                                               OpBranch %1199 
                                     %1202 = OpLabel 
                        Private f32* %1203 = OpAccessChain %249 %88 
                                 f32 %1204 = OpLoad %1203 
                                               OpStore %1197 %1204 
                                               OpBranch %1199 
                                     %1199 = OpLabel 
                                 f32 %1205 = OpLoad %1197 
                        Private f32* %1206 = OpAccessChain %119 %88 
                                               OpStore %1206 %1205 
                                 f32 %1207 = OpLoad %56 
                                 f32 %1208 = OpFNegate %1207 
                                 f32 %1209 = OpFMul %1208 %447 
                        Private f32* %1210 = OpAccessChain %119 %67 
                                 f32 %1211 = OpLoad %1210 
                                 f32 %1212 = OpFAdd %1209 %1211 
                                               OpStore %56 %1212 
                        Private i32* %1213 = OpAccessChain %583 %67 
                                 i32 %1214 = OpLoad %1213 
                                bool %1215 = OpINotEqual %1214 %32 
                                               OpSelectionMerge %1218 None 
                                               OpBranchConditional %1215 %1217 %1221 
                                     %1217 = OpLabel 
                        Private f32* %1219 = OpAccessChain %119 %67 
                                 f32 %1220 = OpLoad %1219 
                                               OpStore %1216 %1220 
                                               OpBranch %1218 
                                     %1221 = OpLabel 
                                 f32 %1222 = OpLoad %56 
                                               OpStore %1216 %1222 
                                               OpBranch %1218 
                                     %1218 = OpLabel 
                                 f32 %1223 = OpLoad %1216 
                        Private f32* %1224 = OpAccessChain %119 %67 
                                               OpStore %1224 %1223 
                               f32_3 %1227 = OpLoad %119 
                               f32_4 %1228 = OpVectorShuffle %1227 %1227 0 1 0 1 
                               f32_4 %1229 = OpExtInst %1 4 %1228 
                               f32_3 %1230 = OpLoad %78 
                               f32_4 %1231 = OpVectorShuffle %1230 %1230 0 0 0 0 
                              bool_4 %1232 = OpFOrdGreaterThanEqual %1229 %1231 
                              bool_2 %1233 = OpVectorShuffle %1232 %1232 0 1 
                                               OpStore %1226 %1233 
                        Private f32* %1234 = OpAccessChain %100 %88 
                                 f32 %1235 = OpLoad %1234 
                                 f32 %1236 = OpFNegate %1235 
                                 f32 %1238 = OpFMul %1236 %1237 
                        Private f32* %1239 = OpAccessChain %237 %88 
                                 f32 %1240 = OpLoad %1239 
                                 f32 %1241 = OpFAdd %1238 %1240 
                                               OpStore %56 %1241 
                       Private bool* %1242 = OpAccessChain %1226 %88 
                                bool %1243 = OpLoad %1242 
                                               OpSelectionMerge %1246 None 
                                               OpBranchConditional %1243 %1245 %1249 
                                     %1245 = OpLabel 
                        Private f32* %1247 = OpAccessChain %237 %88 
                                 f32 %1248 = OpLoad %1247 
                                               OpStore %1244 %1248 
                                               OpBranch %1246 
                                     %1249 = OpLabel 
                                 f32 %1250 = OpLoad %56 
                                               OpStore %1244 %1250 
                                               OpBranch %1246 
                                     %1246 = OpLabel 
                                 f32 %1251 = OpLoad %1244 
                        Private f32* %1252 = OpAccessChain %237 %88 
                                               OpStore %1252 %1251 
                        Private f32* %1253 = OpAccessChain %100 %67 
                                 f32 %1254 = OpLoad %1253 
                                 f32 %1255 = OpFNegate %1254 
                                 f32 %1256 = OpFMul %1255 %1237 
                        Private f32* %1257 = OpAccessChain %237 %641 
                                 f32 %1258 = OpLoad %1257 
                                 f32 %1259 = OpFAdd %1256 %1258 
                                               OpStore %56 %1259 
                       Private bool* %1260 = OpAccessChain %1226 %88 
                                bool %1261 = OpLoad %1260 
                                               OpSelectionMerge %1264 None 
                                               OpBranchConditional %1261 %1263 %1267 
                                     %1263 = OpLabel 
                        Private f32* %1265 = OpAccessChain %237 %641 
                                 f32 %1266 = OpLoad %1265 
                                               OpStore %1262 %1266 
                                               OpBranch %1264 
                                     %1267 = OpLabel 
                                 f32 %1268 = OpLoad %56 
                                               OpStore %1262 %1268 
                                               OpBranch %1264 
                                     %1264 = OpLabel 
                                 f32 %1269 = OpLoad %1262 
                        Private f32* %1270 = OpAccessChain %237 %641 
                                               OpStore %1270 %1269 
                        Private f32* %1271 = OpAccessChain %100 %88 
                                 f32 %1272 = OpLoad %1271 
                                 f32 %1273 = OpFMul %1272 %1237 
                        Private f32* %1274 = OpAccessChain %483 %88 
                                 f32 %1275 = OpLoad %1274 
                                 f32 %1276 = OpFAdd %1273 %1275 
                                               OpStore %56 %1276 
                       Private bool* %1277 = OpAccessChain %1226 %67 
                                bool %1278 = OpLoad %1277 
                                               OpSelectionMerge %1281 None 
                                               OpBranchConditional %1278 %1280 %1284 
                                     %1280 = OpLabel 
                        Private f32* %1282 = OpAccessChain %483 %88 
                                 f32 %1283 = OpLoad %1282 
                                               OpStore %1279 %1283 
                                               OpBranch %1281 
                                     %1284 = OpLabel 
                                 f32 %1285 = OpLoad %56 
                                               OpStore %1279 %1285 
                                               OpBranch %1281 
                                     %1281 = OpLabel 
                                 f32 %1286 = OpLoad %1279 
                        Private f32* %1287 = OpAccessChain %483 %88 
                                               OpStore %1287 %1286 
                        Private f32* %1288 = OpAccessChain %100 %67 
                                 f32 %1289 = OpLoad %1288 
                                 f32 %1290 = OpFMul %1289 %1237 
                        Private f32* %1291 = OpAccessChain %483 %641 
                                 f32 %1292 = OpLoad %1291 
                                 f32 %1293 = OpFAdd %1290 %1292 
                                               OpStore %56 %1293 
                       Private bool* %1294 = OpAccessChain %1226 %67 
                                bool %1295 = OpLoad %1294 
                                               OpSelectionMerge %1298 None 
                                               OpBranchConditional %1295 %1297 %1301 
                                     %1297 = OpLabel 
                        Private f32* %1299 = OpAccessChain %483 %641 
                                 f32 %1300 = OpLoad %1299 
                                               OpStore %1296 %1300 
                                               OpBranch %1298 
                                     %1301 = OpLabel 
                                 f32 %1302 = OpLoad %56 
                                               OpStore %1296 %1302 
                                               OpBranch %1298 
                                     %1298 = OpLabel 
                                 f32 %1303 = OpLoad %1296 
                        Private f32* %1304 = OpAccessChain %483 %641 
                                               OpStore %1304 %1303 
                                               OpBranch %1122 
                                     %1122 = OpLabel 
                                               OpBranch %910 
                                      %910 = OpLabel 
                                               OpBranch %699 
                                      %699 = OpLabel 
                        Private f32* %1305 = OpAccessChain %237 %88 
                                 f32 %1306 = OpLoad %1305 
                                 f32 %1307 = OpFNegate %1306 
                          Input f32* %1308 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %1309 = OpLoad %1308 
                                 f32 %1310 = OpFAdd %1307 %1309 
                                               OpStore %56 %1310 
                        Private f32* %1311 = OpAccessChain %237 %641 
                                 f32 %1312 = OpLoad %1311 
                                 f32 %1313 = OpFNegate %1312 
                          Input f32* %1314 = OpAccessChain vs_TEXCOORD0 %67 
                                 f32 %1315 = OpLoad %1314 
                                 f32 %1316 = OpFAdd %1313 %1315 
                        Private f32* %1317 = OpAccessChain %100 %88 
                                               OpStore %1317 %1316 
                       Private bool* %1318 = OpAccessChain %323 %88 
                                bool %1319 = OpLoad %1318 
                                               OpSelectionMerge %1322 None 
                                               OpBranchConditional %1319 %1321 %1324 
                                     %1321 = OpLabel 
                                 f32 %1323 = OpLoad %56 
                                               OpStore %1320 %1323 
                                               OpBranch %1322 
                                     %1324 = OpLabel 
                        Private f32* %1325 = OpAccessChain %100 %88 
                                 f32 %1326 = OpLoad %1325 
                                               OpStore %1320 %1326 
                                               OpBranch %1322 
                                     %1322 = OpLabel 
                                 f32 %1327 = OpLoad %1320 
                                               OpStore %56 %1327 
                               f32_3 %1328 = OpLoad %483 
                               f32_2 %1329 = OpVectorShuffle %1328 %1328 0 2 
                               f32_2 %1330 = OpLoad vs_TEXCOORD0 
                               f32_2 %1331 = OpFNegate %1330 
                               f32_2 %1332 = OpFAdd %1329 %1331 
                               f32_3 %1333 = OpLoad %78 
                               f32_3 %1334 = OpVectorShuffle %1333 %1332 3 1 4 
                                               OpStore %78 %1334 
                       Private bool* %1335 = OpAccessChain %323 %88 
                                bool %1336 = OpLoad %1335 
                                               OpSelectionMerge %1339 None 
                                               OpBranchConditional %1336 %1338 %1342 
                                     %1338 = OpLabel 
                        Private f32* %1340 = OpAccessChain %78 %88 
                                 f32 %1341 = OpLoad %1340 
                                               OpStore %1337 %1341 
                                               OpBranch %1339 
                                     %1342 = OpLabel 
                        Private f32* %1343 = OpAccessChain %78 %641 
                                 f32 %1344 = OpLoad %1343 
                                               OpStore %1337 %1344 
                                               OpBranch %1339 
                                     %1339 = OpLabel 
                                 f32 %1345 = OpLoad %1337 
                        Private f32* %1346 = OpAccessChain %78 %88 
                                               OpStore %1346 %1345 
                               f32_3 %1348 = OpLoad %119 
                               f32_4 %1349 = OpVectorShuffle %1348 %1348 0 1 0 1 
                              bool_4 %1351 = OpFOrdLessThan %1349 %1350 
                              bool_2 %1352 = OpVectorShuffle %1351 %1351 0 1 
                               u32_2 %1353 = OpSelect %1352 %595 %594 
                               u32_2 %1354 = OpCompositeConstruct %566 %566 
                               u32_2 %1355 = OpIMul %1353 %1354 
                               i32_2 %1356 = OpBitcast %1355 
                                               OpStore %1347 %1356 
                                 f32 %1357 = OpLoad %56 
                        Private f32* %1358 = OpAccessChain %78 %88 
                                 f32 %1359 = OpLoad %1358 
                                 f32 %1360 = OpFAdd %1357 %1359 
                        Private f32* %1361 = OpAccessChain %119 %88 
                                               OpStore %1361 %1360 
                                 i32 %1363 = OpLoad %563 
                               i32_4 %1365 = OpCompositeConstruct %1363 %1363 %1363 %1363 
                               i32_2 %1366 = OpLoad %1347 
                               i32_4 %1367 = OpVectorShuffle %1366 %1366 0 1 0 0 
                              bool_4 %1368 = OpINotEqual %1365 %1367 
                              bool_2 %1369 = OpVectorShuffle %1368 %1368 0 1 
                                               OpStore %1362 %1369 
                        Private f32* %1370 = OpAccessChain %119 %88 
                                 f32 %1371 = OpLoad %1370 
                                 f32 %1372 = OpFDiv %19 %1371 
                                               OpStore %106 %1372 
                                 f32 %1373 = OpLoad %56 
                        Private f32* %1374 = OpAccessChain %78 %88 
                                 f32 %1375 = OpLoad %1374 
                                bool %1376 = OpFOrdLessThan %1373 %1375 
                                               OpStore %394 %1376 
                                 f32 %1377 = OpLoad %56 
                        Private f32* %1378 = OpAccessChain %78 %88 
                                 f32 %1379 = OpLoad %1378 
                                 f32 %1380 = OpExtInst %1 37 %1377 %1379 
                                               OpStore %56 %1380 
                                bool %1382 = OpLoad %394 
                                               OpSelectionMerge %1386 None 
                                               OpBranchConditional %1382 %1385 %1389 
                                     %1385 = OpLabel 
                       Private bool* %1387 = OpAccessChain %1362 %88 
                                bool %1388 = OpLoad %1387 
                                               OpStore %1384 %1388 
                                               OpBranch %1386 
                                     %1389 = OpLabel 
                       Private bool* %1390 = OpAccessChain %1362 %67 
                                bool %1391 = OpLoad %1390 
                                               OpStore %1384 %1391 
                                               OpBranch %1386 
                                     %1386 = OpLabel 
                                bool %1392 = OpLoad %1384 
                                               OpStore %1381 %1392 
                        Private f32* %1393 = OpAccessChain %201 %88 
                                 f32 %1394 = OpLoad %1393 
                        Private f32* %1395 = OpAccessChain %201 %88 
                                 f32 %1396 = OpLoad %1395 
                                 f32 %1397 = OpFMul %1394 %1396 
                        Private f32* %1398 = OpAccessChain %201 %88 
                                               OpStore %1398 %1397 
                                 f32 %1399 = OpLoad %56 
                                 f32 %1400 = OpLoad %106 
                                 f32 %1401 = OpFNegate %1400 
                                 f32 %1402 = OpFMul %1399 %1401 
                                 f32 %1403 = OpFAdd %1402 %447 
                                               OpStore %56 %1403 
                                bool %1404 = OpLoad %1381 
                                 f32 %1405 = OpLoad %56 
                                 f32 %1406 = OpSelect %1404 %1405 %18 
                                               OpStore %56 %1406 
                        Private f32* %1407 = OpAccessChain %201 %88 
                                 f32 %1408 = OpLoad %1407 
                                 f32 %1409 = OpLoad %56 
                                 f32 %1410 = OpExtInst %1 40 %1408 %1409 
                        Private f32* %1411 = OpAccessChain %201 %88 
                                               OpStore %1411 %1410 
                               f32_2 %1412 = OpLoad %201 
                               f32_2 %1413 = OpVectorShuffle %1412 %1412 0 0 
                                 f32 %1414 = OpLoad %69 
                               f32_2 %1415 = OpCompositeConstruct %1414 %1414 
                               f32_2 %1416 = OpFMul %1413 %1415 
                               f32_2 %1417 = OpLoad vs_TEXCOORD0 
                               f32_2 %1418 = OpFAdd %1416 %1417 
                                               OpStore %201 %1418 
                       Private bool* %1419 = OpAccessChain %323 %88 
                                bool %1420 = OpLoad %1419 
                                               OpSelectionMerge %1423 None 
                                               OpBranchConditional %1420 %1422 %1426 
                                     %1422 = OpLabel 
                          Input f32* %1424 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %1425 = OpLoad %1424 
                                               OpStore %1421 %1425 
                                               OpBranch %1423 
                                     %1426 = OpLabel 
                        Private f32* %1427 = OpAccessChain %201 %88 
                                 f32 %1428 = OpLoad %1427 
                                               OpStore %1421 %1428 
                                               OpBranch %1423 
                                     %1423 = OpLabel 
                                 f32 %1429 = OpLoad %1421 
                        Private f32* %1430 = OpAccessChain %78 %88 
                                               OpStore %1430 %1429 
                        Private f32* %1431 = OpAccessChain %78 %88 
                                 f32 %1432 = OpLoad %1431 
                                 f32 %1433 = OpExtInst %1 43 %1432 %18 %19 
                        Private f32* %1434 = OpAccessChain %78 %88 
                                               OpStore %1434 %1433 
                       Private bool* %1435 = OpAccessChain %323 %88 
                                bool %1436 = OpLoad %1435 
                                               OpSelectionMerge %1439 None 
                                               OpBranchConditional %1436 %1438 %1442 
                                     %1438 = OpLabel 
                        Private f32* %1440 = OpAccessChain %201 %67 
                                 f32 %1441 = OpLoad %1440 
                                               OpStore %1437 %1441 
                                               OpBranch %1439 
                                     %1442 = OpLabel 
                          Input f32* %1443 = OpAccessChain vs_TEXCOORD0 %67 
                                 f32 %1444 = OpLoad %1443 
                                               OpStore %1437 %1444 
                                               OpBranch %1439 
                                     %1439 = OpLabel 
                                 f32 %1445 = OpLoad %1437 
                        Private f32* %1446 = OpAccessChain %78 %67 
                                               OpStore %1446 %1445 
                        Private f32* %1447 = OpAccessChain %78 %67 
                                 f32 %1448 = OpLoad %1447 
                                 f32 %1449 = OpExtInst %1 43 %1448 %18 %19 
                        Private f32* %1450 = OpAccessChain %78 %67 
                                               OpStore %1450 %1449 
                               f32_3 %1451 = OpLoad %78 
                               f32_2 %1452 = OpVectorShuffle %1451 %1451 0 1 
                        Uniform f32* %1453 = OpAccessChain %30 %32 
                                 f32 %1454 = OpLoad %1453 
                               f32_2 %1455 = OpCompositeConstruct %1454 %1454 
                               f32_2 %1456 = OpFMul %1452 %1455 
                               f32_3 %1457 = OpLoad %9 
                               f32_3 %1458 = OpVectorShuffle %1457 %1456 3 4 2 
                                               OpStore %9 %1458 
                 read_only Texture2D %1459 = OpLoad %44 
                             sampler %1460 = OpLoad %48 
          read_only Texture2DSampled %1461 = OpSampledImage %1459 %1460 
                               f32_3 %1462 = OpLoad %9 
                               f32_2 %1463 = OpVectorShuffle %1462 %1462 0 1 
                               f32_4 %1464 = OpImageSampleExplicitLod %1461 %1463 Lod %27 
                               f32_3 %1465 = OpVectorShuffle %1464 %1464 0 1 2 
                                               OpStore %9 %1465 
                        Private f32* %1466 = OpAccessChain %41 %67 
                                 f32 %1467 = OpLoad %1466 
                        Private f32* %1469 = OpAccessChain %41 %1468 
                                               OpStore %1469 %1467 
                                               OpBranch %165 
                                     %1470 = OpLabel 
                               f32_4 %1471 = OpLoad %41 
                               f32_3 %1472 = OpVectorShuffle %1471 %1471 0 1 2 
                                               OpStore %9 %1472 
                                               OpBranch %165 
                                      %165 = OpLabel 
                               f32_2 %1473 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %1475 = OpAccessChain %30 %63 
                               f32_4 %1476 = OpLoad %1475 
                               f32_2 %1477 = OpVectorShuffle %1476 %1476 0 1 
                               f32_2 %1478 = OpFMul %1473 %1477 
                      Uniform f32_4* %1479 = OpAccessChain %30 %63 
                               f32_4 %1480 = OpLoad %1479 
                               f32_2 %1481 = OpVectorShuffle %1480 %1480 2 3 
                               f32_2 %1482 = OpFAdd %1478 %1481 
                               f32_3 %1483 = OpLoad %78 
                               f32_3 %1484 = OpVectorShuffle %1483 %1482 3 4 2 
                                               OpStore %78 %1484 
                 read_only Texture2D %1486 = OpLoad %1485 
                             sampler %1488 = OpLoad %1487 
          read_only Texture2DSampled %1489 = OpSampledImage %1486 %1488 
                               f32_3 %1490 = OpLoad %78 
                               f32_2 %1491 = OpVectorShuffle %1490 %1490 0 1 
                               f32_4 %1492 = OpImageSampleImplicitLod %1489 %1491 
                                 f32 %1493 = OpCompositeExtract %1492 3 
                                               OpStore %69 %1493 
                                 f32 %1494 = OpLoad %69 
                                 f32 %1495 = OpFMul %1494 %276 
                                 f32 %1497 = OpFAdd %1495 %1496 
                                               OpStore %69 %1497 
                                 f32 %1498 = OpLoad %69 
                                 f32 %1500 = OpFMul %1498 %1499 
                                 f32 %1501 = OpFAdd %1500 %447 
                        Private f32* %1502 = OpAccessChain %78 %88 
                                               OpStore %1502 %1501 
                        Private f32* %1503 = OpAccessChain %78 %88 
                                 f32 %1504 = OpLoad %1503 
                                 f32 %1505 = OpExtInst %1 43 %1504 %18 %19 
                        Private f32* %1506 = OpAccessChain %78 %88 
                                               OpStore %1506 %1505 
                        Private f32* %1507 = OpAccessChain %78 %88 
                                 f32 %1508 = OpLoad %1507 
                                 f32 %1509 = OpFMul %1508 %276 
                                 f32 %1510 = OpFAdd %1509 %1496 
                        Private f32* %1511 = OpAccessChain %78 %88 
                                               OpStore %1511 %1510 
                                 f32 %1512 = OpLoad %69 
                                 f32 %1513 = OpExtInst %1 4 %1512 
                                 f32 %1514 = OpFNegate %1513 
                                 f32 %1515 = OpFAdd %1514 %19 
                                               OpStore %69 %1515 
                                 f32 %1516 = OpLoad %69 
                                 f32 %1517 = OpExtInst %1 31 %1516 
                                               OpStore %69 %1517 
                                 f32 %1518 = OpLoad %69 
                                 f32 %1519 = OpFNegate %1518 
                                 f32 %1520 = OpFAdd %1519 %19 
                                               OpStore %69 %1520 
                                 f32 %1521 = OpLoad %69 
                        Private f32* %1522 = OpAccessChain %78 %88 
                                 f32 %1523 = OpLoad %1522 
                                 f32 %1524 = OpFMul %1521 %1523 
                                               OpStore %69 %1524 
                               f32_3 %1525 = OpLoad %9 
                               f32_3 %1528 = OpFMul %1525 %1527 
                                               OpStore %78 %1528 
                               f32_3 %1529 = OpLoad %9 
                               f32_3 %1530 = OpExtInst %1 4 %1529 
                               f32_3 %1533 = OpExtInst %1 40 %1530 %1532 
                                               OpStore %119 %1533 
                               f32_3 %1534 = OpLoad %119 
                               f32_3 %1535 = OpExtInst %1 30 %1534 
                                               OpStore %119 %1535 
                               f32_3 %1536 = OpLoad %119 
                               f32_3 %1539 = OpFMul %1536 %1538 
                                               OpStore %119 %1539 
                               f32_3 %1540 = OpLoad %119 
                               f32_3 %1541 = OpExtInst %1 29 %1540 
                                               OpStore %119 %1541 
                               f32_3 %1542 = OpLoad %119 
                               f32_3 %1545 = OpFMul %1542 %1544 
                               f32_3 %1548 = OpFAdd %1545 %1547 
                                               OpStore %119 %1548 
                               f32_3 %1551 = OpLoad %9 
                               f32_4 %1552 = OpVectorShuffle %1551 %1551 0 1 2 0 
                              bool_4 %1553 = OpFOrdGreaterThanEqual %1550 %1552 
                              bool_3 %1554 = OpVectorShuffle %1553 %1553 0 1 2 
                                               OpStore %323 %1554 
                       Private bool* %1555 = OpAccessChain %323 %88 
                                bool %1556 = OpLoad %1555 
                                               OpSelectionMerge %1559 None 
                                               OpBranchConditional %1556 %1558 %1562 
                                     %1558 = OpLabel 
                        Private f32* %1560 = OpAccessChain %78 %88 
                                 f32 %1561 = OpLoad %1560 
                                               OpStore %1557 %1561 
                                               OpBranch %1559 
                                     %1562 = OpLabel 
                        Private f32* %1563 = OpAccessChain %119 %88 
                                 f32 %1564 = OpLoad %1563 
                                               OpStore %1557 %1564 
                                               OpBranch %1559 
                                     %1559 = OpLabel 
                                 f32 %1565 = OpLoad %1557 
                        Private f32* %1566 = OpAccessChain %9 %88 
                                               OpStore %1566 %1565 
                       Private bool* %1567 = OpAccessChain %323 %67 
                                bool %1568 = OpLoad %1567 
                                               OpSelectionMerge %1571 None 
                                               OpBranchConditional %1568 %1570 %1574 
                                     %1570 = OpLabel 
                        Private f32* %1572 = OpAccessChain %78 %67 
                                 f32 %1573 = OpLoad %1572 
                                               OpStore %1569 %1573 
                                               OpBranch %1571 
                                     %1574 = OpLabel 
                        Private f32* %1575 = OpAccessChain %119 %67 
                                 f32 %1576 = OpLoad %1575 
                                               OpStore %1569 %1576 
                                               OpBranch %1571 
                                     %1571 = OpLabel 
                                 f32 %1577 = OpLoad %1569 
                        Private f32* %1578 = OpAccessChain %9 %67 
                                               OpStore %1578 %1577 
                       Private bool* %1579 = OpAccessChain %323 %641 
                                bool %1580 = OpLoad %1579 
                                               OpSelectionMerge %1583 None 
                                               OpBranchConditional %1580 %1582 %1586 
                                     %1582 = OpLabel 
                        Private f32* %1584 = OpAccessChain %78 %641 
                                 f32 %1585 = OpLoad %1584 
                                               OpStore %1581 %1585 
                                               OpBranch %1583 
                                     %1586 = OpLabel 
                        Private f32* %1587 = OpAccessChain %119 %641 
                                 f32 %1588 = OpLoad %1587 
                                               OpStore %1581 %1588 
                                               OpBranch %1583 
                                     %1583 = OpLabel 
                                 f32 %1589 = OpLoad %1581 
                        Private f32* %1590 = OpAccessChain %9 %641 
                                               OpStore %1590 %1589 
                                 f32 %1591 = OpLoad %69 
                               f32_3 %1592 = OpCompositeConstruct %1591 %1591 %1591 
                               f32_3 %1595 = OpFMul %1592 %1594 
                               f32_3 %1596 = OpLoad %9 
                               f32_3 %1597 = OpFAdd %1595 %1596 
                                               OpStore %9 %1597 
                               f32_3 %1598 = OpLoad %9 
                               f32_3 %1601 = OpFMul %1598 %1600 
                                               OpStore %78 %1601 
                               f32_3 %1602 = OpLoad %9 
                               f32_3 %1605 = OpFAdd %1602 %1604 
                                               OpStore %119 %1605 
                               f32_3 %1606 = OpLoad %119 
                               f32_3 %1609 = OpFMul %1606 %1608 
                                               OpStore %119 %1609 
                               f32_3 %1610 = OpLoad %119 
                               f32_3 %1611 = OpExtInst %1 4 %1610 
                               f32_3 %1612 = OpExtInst %1 40 %1611 %1532 
                                               OpStore %119 %1612 
                               f32_3 %1613 = OpLoad %119 
                               f32_3 %1614 = OpExtInst %1 30 %1613 
                                               OpStore %119 %1614 
                               f32_3 %1615 = OpLoad %119 
                               f32_3 %1618 = OpFMul %1615 %1617 
                                               OpStore %119 %1618 
                               f32_3 %1619 = OpLoad %119 
                               f32_3 %1620 = OpExtInst %1 29 %1619 
                                               OpStore %119 %1620 
                               f32_3 %1623 = OpLoad %9 
                               f32_4 %1624 = OpVectorShuffle %1623 %1623 0 1 2 0 
                              bool_4 %1625 = OpFOrdGreaterThanEqual %1622 %1624 
                              bool_3 %1626 = OpVectorShuffle %1625 %1625 0 1 2 
                                               OpStore %323 %1626 
                       Private bool* %1627 = OpAccessChain %323 %88 
                                bool %1628 = OpLoad %1627 
                                               OpSelectionMerge %1631 None 
                                               OpBranchConditional %1628 %1630 %1634 
                                     %1630 = OpLabel 
                        Private f32* %1632 = OpAccessChain %78 %88 
                                 f32 %1633 = OpLoad %1632 
                                               OpStore %1629 %1633 
                                               OpBranch %1631 
                                     %1634 = OpLabel 
                        Private f32* %1635 = OpAccessChain %119 %88 
                                 f32 %1636 = OpLoad %1635 
                                               OpStore %1629 %1636 
                                               OpBranch %1631 
                                     %1631 = OpLabel 
                                 f32 %1637 = OpLoad %1629 
                        Private f32* %1638 = OpAccessChain %41 %88 
                                               OpStore %1638 %1637 
                       Private bool* %1639 = OpAccessChain %323 %67 
                                bool %1640 = OpLoad %1639 
                                               OpSelectionMerge %1643 None 
                                               OpBranchConditional %1640 %1642 %1646 
                                     %1642 = OpLabel 
                        Private f32* %1644 = OpAccessChain %78 %67 
                                 f32 %1645 = OpLoad %1644 
                                               OpStore %1641 %1645 
                                               OpBranch %1643 
                                     %1646 = OpLabel 
                        Private f32* %1647 = OpAccessChain %119 %67 
                                 f32 %1648 = OpLoad %1647 
                                               OpStore %1641 %1648 
                                               OpBranch %1643 
                                     %1643 = OpLabel 
                                 f32 %1649 = OpLoad %1641 
                        Private f32* %1650 = OpAccessChain %41 %67 
                                               OpStore %1650 %1649 
                       Private bool* %1651 = OpAccessChain %323 %641 
                                bool %1652 = OpLoad %1651 
                                               OpSelectionMerge %1655 None 
                                               OpBranchConditional %1652 %1654 %1658 
                                     %1654 = OpLabel 
                        Private f32* %1656 = OpAccessChain %78 %641 
                                 f32 %1657 = OpLoad %1656 
                                               OpStore %1653 %1657 
                                               OpBranch %1655 
                                     %1658 = OpLabel 
                        Private f32* %1659 = OpAccessChain %119 %641 
                                 f32 %1660 = OpLoad %1659 
                                               OpStore %1653 %1660 
                                               OpBranch %1655 
                                     %1655 = OpLabel 
                                 f32 %1661 = OpLoad %1653 
                        Private f32* %1662 = OpAccessChain %41 %641 
                                               OpStore %1662 %1661 
                               f32_4 %1665 = OpLoad %41 
                                               OpStore %1664 %1665 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Vertex %4 "main" %13 %18 %66 %73 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 1 BuiltIn TessLevelOuter 
                                             OpMemberDecorate %11 2 BuiltIn TessLevelOuter 
                                             OpDecorate %11 Block 
                                             OpDecorate %18 Location 18 
                                             OpMemberDecorate %22 0 Offset 22 
                                             OpMemberDecorate %22 1 Offset 22 
                                             OpMemberDecorate %22 2 Offset 22 
                                             OpDecorate %22 Block 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate vs_TEXCOORD1 Location 66 
                                             OpDecorate vs_TEXCOORD0 Location 73 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypeInt 32 0 
                                  u32 %9 = OpConstant 1 
                                     %10 = OpTypeArray %6 %9 
                                     %11 = OpTypeStruct %7 %6 %10 
                                     %12 = OpTypePointer Output %11 
Output struct {f32_4; f32; f32[1];}* %13 = OpVariable Output 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypeVector %6 3 
                                     %17 = OpTypePointer Input %16 
                        Input f32_3* %18 = OpVariable Input 
                                     %19 = OpTypeVector %6 2 
                                     %22 = OpTypeStruct %6 %7 %7 
                                     %23 = OpTypePointer Uniform %22 
Uniform struct {f32; f32_4; f32_4;}* %24 = OpVariable Uniform 
                                 i32 %25 = OpConstant 2 
                                     %26 = OpTypePointer Uniform %7 
                                     %35 = OpTypePointer Output %7 
                                 f32 %39 = OpConstant 3.674022E-40 
                                 f32 %40 = OpConstant 3.674022E-40 
                               f32_2 %41 = OpConstantComposite %39 %40 
                                     %45 = OpTypePointer Private %19 
                      Private f32_2* %46 = OpVariable Private 
                               f32_2 %49 = OpConstantComposite %40 %40 
                                 i32 %52 = OpConstant 1 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %58 %58 
                                     %65 = OpTypePointer Output %19 
              Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                     %68 = OpTypePointer Uniform %6 
              Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %20 = OpLoad %18 
                               f32_2 %21 = OpVectorShuffle %20 %20 0 1 
                      Uniform f32_4* %27 = OpAccessChain %24 %25 
                               f32_4 %28 = OpLoad %27 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpFMul %21 %29 
                      Uniform f32_4* %31 = OpAccessChain %24 %25 
                               f32_4 %32 = OpLoad %31 
                               f32_2 %33 = OpVectorShuffle %32 %32 2 3 
                               f32_2 %34 = OpFAdd %30 %33 
                       Output f32_4* %36 = OpAccessChain %13 %15 
                               f32_4 %37 = OpLoad %36 
                               f32_4 %38 = OpVectorShuffle %37 %34 4 5 2 3 
                                             OpStore %36 %38 
                       Output f32_4* %42 = OpAccessChain %13 %15 
                               f32_4 %43 = OpLoad %42 
                               f32_4 %44 = OpVectorShuffle %43 %41 0 1 4 5 
                                             OpStore %42 %44 
                               f32_3 %47 = OpLoad %18 
                               f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                               f32_2 %50 = OpFAdd %48 %49 
                                             OpStore %46 %50 
                               f32_2 %51 = OpLoad %46 
                      Uniform f32_4* %53 = OpAccessChain %24 %52 
                               f32_4 %54 = OpLoad %53 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               f32_2 %56 = OpFMul %51 %55 
                                             OpStore %46 %56 
                               f32_2 %57 = OpLoad %46 
                               f32_2 %60 = OpFMul %57 %59 
                      Uniform f32_4* %61 = OpAccessChain %24 %52 
                               f32_4 %62 = OpLoad %61 
                               f32_2 %63 = OpVectorShuffle %62 %62 2 3 
                               f32_2 %64 = OpFAdd %60 %63 
                                             OpStore %46 %64 
                               f32_2 %67 = OpLoad %46 
                        Uniform f32* %69 = OpAccessChain %24 %15 
                                 f32 %70 = OpLoad %69 
                               f32_2 %71 = OpCompositeConstruct %70 %70 
                               f32_2 %72 = OpFMul %67 %71 
                                             OpStore vs_TEXCOORD1 %72 
                               f32_2 %74 = OpLoad %46 
                                             OpStore vs_TEXCOORD0 %74 
                         Output f32* %76 = OpAccessChain %13 %15 %9 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                         Output f32* %79 = OpAccessChain %13 %15 %9 
                                             OpStore %79 %78 
                                             OpReturn
                                             OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1667
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %1664 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %1485 DescriptorSet 1485 
                                               OpDecorate %1485 Binding 1485 
                                               OpDecorate %1487 DescriptorSet 1487 
                                               OpDecorate %1487 Binding 1487 
                                               OpDecorate %1664 Location 1664 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   f32 %18 = OpConstant 3.674022E-40 
                                   f32 %19 = OpConstant 3.674022E-40 
                                       %27 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %6 %27 %27 
                                       %29 = OpTypePointer Uniform %28 
  Uniform struct {f32; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 0 
                                       %33 = OpTypePointer Uniform %6 
                                       %40 = OpTypePointer Private %27 
                        Private f32_4* %41 = OpVariable Private 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypePointer Private %6 
                          Private f32* %56 = OpVariable Private 
                                       %62 = OpTypeVector %31 2 
                                   i32 %63 = OpConstant 1 
                                 i32_2 %64 = OpConstantComposite %32 %63 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 1 
                          Private f32* %69 = OpVariable Private 
                                 i32_2 %75 = OpConstantComposite %63 %32 
                        Private f32_3* %78 = OpVariable Private 
                                   i32 %84 = OpConstant -1 
                                 i32_2 %85 = OpConstantComposite %32 %84 
                                   u32 %88 = OpConstant 0 
                          Private f32* %90 = OpVariable Private 
                                 i32_2 %96 = OpConstantComposite %84 %32 
                                       %99 = OpTypePointer Private %10 
                       Private f32_2* %100 = OpVariable Private 
                         Private f32* %106 = OpVariable Private 
                       Private f32_3* %119 = OpVariable Private 
                       Private f32_2* %125 = OpVariable Private 
                                  f32 %143 = OpConstant 3.674022E-40 
                                  f32 %154 = OpConstant 3.674022E-40 
                                      %156 = OpTypeBool 
                                      %157 = OpTypePointer Private %156 
                        Private bool* %158 = OpVariable Private 
                                i32_2 %171 = OpConstantComposite %84 %84 
                                i32_2 %179 = OpConstantComposite %63 %63 
                                i32_2 %188 = OpConstantComposite %63 %84 
                                i32_2 %197 = OpConstantComposite %84 %63 
                       Private f32_2* %201 = OpVariable Private 
                       Private f32_2* %207 = OpVariable Private 
                         Private f32* %216 = OpVariable Private 
                                  f32 %224 = OpConstant 3.674022E-40 
                       Private f32_3* %237 = OpVariable Private 
                       Private f32_3* %249 = OpVariable Private 
                                  f32 %276 = OpConstant 3.674022E-40 
                                      %321 = OpTypeVector %156 3 
                                      %322 = OpTypePointer Private %321 
                      Private bool_3* %323 = OpVariable Private 
                                      %337 = OpTypePointer Function %6 
                                  i32 %357 = OpConstant 2 
                                  f32 %366 = OpConstant 3.674022E-40 
                        Private bool* %394 = OpVariable Private 
                                  f32 %447 = OpConstant 3.674022E-40 
                                f32_2 %448 = OpConstantComposite %447 %447 
                                      %457 = OpTypePointer Input %6 
                       Private f32_3* %483 = OpVariable Private 
                                  f32 %492 = OpConstant 3.674022E-40 
                       Private f32_2* %519 = OpVariable Private 
                                  f32 %547 = OpConstant 3.674022E-40 
                                      %562 = OpTypePointer Private %31 
                         Private i32* %563 = OpVariable Private 
                                  u32 %566 = OpConstant 4294967295 
                                      %582 = OpTypePointer Private %62 
                       Private i32_2* %583 = OpVariable Private 
                                      %589 = OpTypeVector %156 4 
                                      %591 = OpTypeVector %156 2 
                                      %593 = OpTypeVector %66 2 
                                u32_2 %594 = OpConstantComposite %88 %88 
                                u32_2 %595 = OpConstantComposite %67 %67 
                                  f32 %603 = OpConstant 3.674022E-40 
                         Private f32* %622 = OpVariable Private 
                                  u32 %641 = OpConstant 2 
                                      %643 = OpTypeVector %31 3 
                                      %644 = OpTypePointer Private %643 
                       Private i32_3* %645 = OpVariable Private 
                                 f32 %1029 = OpConstant 3.674022E-40 
                                     %1225 = OpTypePointer Private %591 
                     Private bool_2* %1226 = OpVariable Private 
                                 f32 %1237 = OpConstant 3.674022E-40 
                      Private i32_2* %1347 = OpVariable Private 
                               f32_4 %1350 = OpConstantComposite %18 %18 %18 %18 
                     Private bool_2* %1362 = OpVariable Private 
                                     %1364 = OpTypeVector %31 4 
                       Private bool* %1381 = OpVariable Private 
                                     %1383 = OpTypePointer Function %156 
                                 u32 %1468 = OpConstant 3 
                                     %1474 = OpTypePointer Uniform %27 
UniformConstant read_only Texture2D* %1485 = OpVariable UniformConstant 
            UniformConstant sampler* %1487 = OpVariable UniformConstant 
                                 f32 %1496 = OpConstant 3.674022E-40 
                                 f32 %1499 = OpConstant 3.674022E-40 
                                 f32 %1526 = OpConstant 3.674022E-40 
                               f32_3 %1527 = OpConstantComposite %1526 %1526 %1526 
                                 f32 %1531 = OpConstant 3.674022E-40 
                               f32_3 %1532 = OpConstantComposite %1531 %1531 %1531 
                                 f32 %1537 = OpConstant 3.674022E-40 
                               f32_3 %1538 = OpConstantComposite %1537 %1537 %1537 
                                 f32 %1543 = OpConstant 3.674022E-40 
                               f32_3 %1544 = OpConstantComposite %1543 %1543 %1543 
                                 f32 %1546 = OpConstant 3.674022E-40 
                               f32_3 %1547 = OpConstantComposite %1546 %1546 %1546 
                                 f32 %1549 = OpConstant 3.674022E-40 
                               f32_4 %1550 = OpConstantComposite %1549 %1549 %1549 %18 
                                 f32 %1593 = OpConstant 3.674022E-40 
                               f32_3 %1594 = OpConstantComposite %1593 %1593 %1593 
                                 f32 %1599 = OpConstant 3.674022E-40 
                               f32_3 %1600 = OpConstantComposite %1599 %1599 %1599 
                                 f32 %1603 = OpConstant 3.674022E-40 
                               f32_3 %1604 = OpConstantComposite %1603 %1603 %1603 
                                 f32 %1607 = OpConstant 3.674022E-40 
                               f32_3 %1608 = OpConstantComposite %1607 %1607 %1607 
                                 f32 %1616 = OpConstant 3.674022E-40 
                               f32_3 %1617 = OpConstantComposite %1616 %1616 %1616 
                                 f32 %1621 = OpConstant 3.674022E-40 
                               f32_4 %1622 = OpConstantComposite %1621 %1621 %1621 %18 
                                     %1663 = OpTypePointer Output %27 
                       Output f32_4* %1664 = OpVariable Output 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Function f32* %338 = OpVariable Function 
                        Function f32* %354 = OpVariable Function 
                        Function f32* %406 = OpVariable Function 
                        Function f32* %427 = OpVariable Function 
                        Function f32* %437 = OpVariable Function 
                        Function f32* %454 = OpVariable Function 
                        Function f32* %467 = OpVariable Function 
                        Function f32* %538 = OpVariable Function 
                        Function f32* %612 = OpVariable Function 
                        Function f32* %633 = OpVariable Function 
                        Function f32* %668 = OpVariable Function 
                        Function f32* %686 = OpVariable Function 
                        Function f32* %774 = OpVariable Function 
                        Function f32* %794 = OpVariable Function 
                        Function f32* %826 = OpVariable Function 
                        Function f32* %847 = OpVariable Function 
                        Function f32* %879 = OpVariable Function 
                        Function f32* %897 = OpVariable Function 
                        Function f32* %985 = OpVariable Function 
                       Function f32* %1005 = OpVariable Function 
                       Function f32* %1038 = OpVariable Function 
                       Function f32* %1059 = OpVariable Function 
                       Function f32* %1091 = OpVariable Function 
                       Function f32* %1109 = OpVariable Function 
                       Function f32* %1197 = OpVariable Function 
                       Function f32* %1216 = OpVariable Function 
                       Function f32* %1244 = OpVariable Function 
                       Function f32* %1262 = OpVariable Function 
                       Function f32* %1279 = OpVariable Function 
                       Function f32* %1296 = OpVariable Function 
                       Function f32* %1320 = OpVariable Function 
                       Function f32* %1337 = OpVariable Function 
                      Function bool* %1384 = OpVariable Function 
                       Function f32* %1421 = OpVariable Function 
                       Function f32* %1437 = OpVariable Function 
                       Function f32* %1557 = OpVariable Function 
                       Function f32* %1569 = OpVariable Function 
                       Function f32* %1581 = OpVariable Function 
                       Function f32* %1629 = OpVariable Function 
                       Function f32* %1641 = OpVariable Function 
                       Function f32* %1653 = OpVariable Function 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                                 f32_3 %14 = OpLoad %9 
                                 f32_3 %15 = OpVectorShuffle %14 %13 3 4 2 
                                               OpStore %9 %15 
                                 f32_3 %16 = OpLoad %9 
                                 f32_2 %17 = OpVectorShuffle %16 %16 0 1 
                                 f32_2 %20 = OpCompositeConstruct %18 %18 
                                 f32_2 %21 = OpCompositeConstruct %19 %19 
                                 f32_2 %22 = OpExtInst %1 43 %17 %20 %21 
                                 f32_3 %23 = OpLoad %9 
                                 f32_3 %24 = OpVectorShuffle %23 %22 3 4 2 
                                               OpStore %9 %24 
                                 f32_3 %25 = OpLoad %9 
                                 f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                          Uniform f32* %34 = OpAccessChain %30 %32 
                                   f32 %35 = OpLoad %34 
                                 f32_2 %36 = OpCompositeConstruct %35 %35 
                                 f32_2 %37 = OpFMul %26 %36 
                                 f32_3 %38 = OpLoad %9 
                                 f32_3 %39 = OpVectorShuffle %38 %37 3 4 2 
                                               OpStore %9 %39 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_3 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleExplicitLod %51 %53 Lod %27 
                                               OpStore %41 %54 
                   read_only Texture2D %57 = OpLoad %44 
                               sampler %58 = OpLoad %48 
            read_only Texture2DSampled %59 = OpSampledImage %57 %58 
                                 f32_3 %60 = OpLoad %9 
                                 f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                 f32_4 %65 = OpImageSampleExplicitLod %59 %61 Lod %27ConstOffset %65 
                                   f32 %68 = OpCompositeExtract %65 1 
                                               OpStore %56 %68 
                   read_only Texture2D %70 = OpLoad %44 
                               sampler %71 = OpLoad %48 
            read_only Texture2DSampled %72 = OpSampledImage %70 %71 
                                 f32_3 %73 = OpLoad %9 
                                 f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                 f32_4 %76 = OpImageSampleExplicitLod %72 %74 Lod %27ConstOffset %76 
                                   f32 %77 = OpCompositeExtract %76 1 
                                               OpStore %69 %77 
                   read_only Texture2D %79 = OpLoad %44 
                               sampler %80 = OpLoad %48 
            read_only Texture2DSampled %81 = OpSampledImage %79 %80 
                                 f32_3 %82 = OpLoad %9 
                                 f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                                 f32_4 %86 = OpImageSampleExplicitLod %81 %83 Lod %27ConstOffset %86 
                                   f32 %87 = OpCompositeExtract %86 1 
                          Private f32* %89 = OpAccessChain %78 %88 
                                               OpStore %89 %87 
                   read_only Texture2D %91 = OpLoad %44 
                               sampler %92 = OpLoad %48 
            read_only Texture2DSampled %93 = OpSampledImage %91 %92 
                                 f32_3 %94 = OpLoad %9 
                                 f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                 f32_4 %97 = OpImageSampleExplicitLod %93 %95 Lod %27ConstOffset %97 
                                   f32 %98 = OpCompositeExtract %97 1 
                                               OpStore %90 %98 
                         Private f32* %101 = OpAccessChain %41 %67 
                                  f32 %102 = OpLoad %101 
                                  f32 %103 = OpLoad %56 
                                  f32 %104 = OpExtInst %1 40 %102 %103 
                         Private f32* %105 = OpAccessChain %100 %88 
                                               OpStore %105 %104 
                         Private f32* %107 = OpAccessChain %41 %67 
                                  f32 %108 = OpLoad %107 
                                  f32 %109 = OpLoad %56 
                                  f32 %110 = OpExtInst %1 37 %108 %109 
                                               OpStore %106 %110 
                                  f32 %111 = OpLoad %69 
                         Private f32* %112 = OpAccessChain %100 %88 
                                  f32 %113 = OpLoad %112 
                                  f32 %114 = OpExtInst %1 40 %111 %113 
                         Private f32* %115 = OpAccessChain %100 %88 
                                               OpStore %115 %114 
                                  f32 %116 = OpLoad %69 
                                  f32 %117 = OpLoad %106 
                                  f32 %118 = OpExtInst %1 37 %116 %117 
                                               OpStore %106 %118 
                                  f32 %120 = OpLoad %90 
                         Private f32* %121 = OpAccessChain %78 %88 
                                  f32 %122 = OpLoad %121 
                                  f32 %123 = OpExtInst %1 40 %120 %122 
                         Private f32* %124 = OpAccessChain %119 %88 
                                               OpStore %124 %123 
                                  f32 %126 = OpLoad %90 
                         Private f32* %127 = OpAccessChain %78 %88 
                                  f32 %128 = OpLoad %127 
                                  f32 %129 = OpExtInst %1 37 %126 %128 
                         Private f32* %130 = OpAccessChain %125 %88 
                                               OpStore %130 %129 
                         Private f32* %131 = OpAccessChain %100 %88 
                                  f32 %132 = OpLoad %131 
                         Private f32* %133 = OpAccessChain %119 %88 
                                  f32 %134 = OpLoad %133 
                                  f32 %135 = OpExtInst %1 40 %132 %134 
                         Private f32* %136 = OpAccessChain %100 %88 
                                               OpStore %136 %135 
                                  f32 %137 = OpLoad %106 
                         Private f32* %138 = OpAccessChain %125 %88 
                                  f32 %139 = OpLoad %138 
                                  f32 %140 = OpExtInst %1 37 %137 %139 
                                               OpStore %106 %140 
                         Private f32* %141 = OpAccessChain %100 %88 
                                  f32 %142 = OpLoad %141 
                                  f32 %144 = OpFMul %142 %143 
                         Private f32* %145 = OpAccessChain %119 %88 
                                               OpStore %145 %144 
                                  f32 %146 = OpLoad %106 
                                  f32 %147 = OpFNegate %146 
                         Private f32* %148 = OpAccessChain %100 %88 
                                  f32 %149 = OpLoad %148 
                                  f32 %150 = OpFAdd %147 %149 
                         Private f32* %151 = OpAccessChain %100 %88 
                                               OpStore %151 %150 
                         Private f32* %152 = OpAccessChain %119 %88 
                                  f32 %153 = OpLoad %152 
                                  f32 %155 = OpExtInst %1 40 %153 %154 
                                               OpStore %106 %155 
                         Private f32* %159 = OpAccessChain %100 %88 
                                  f32 %160 = OpLoad %159 
                                  f32 %161 = OpLoad %106 
                                 bool %162 = OpFOrdGreaterThanEqual %160 %161 
                                               OpStore %158 %162 
                                 bool %163 = OpLoad %158 
                                               OpSelectionMerge %165 None 
                                               OpBranchConditional %163 %164 %1470 
                                      %164 = OpLabel 
                  read_only Texture2D %166 = OpLoad %44 
                              sampler %167 = OpLoad %48 
           read_only Texture2DSampled %168 = OpSampledImage %166 %167 
                                f32_3 %169 = OpLoad %9 
                                f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                f32_4 %172 = OpImageSampleExplicitLod %168 %170 Lod %27ConstOffset %172 
                                  f32 %173 = OpCompositeExtract %172 1 
                                               OpStore %106 %173 
                  read_only Texture2D %174 = OpLoad %44 
                              sampler %175 = OpLoad %48 
           read_only Texture2DSampled %176 = OpSampledImage %174 %175 
                                f32_3 %177 = OpLoad %9 
                                f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                f32_4 %180 = OpImageSampleExplicitLod %176 %178 Lod %27ConstOffset %180 
                                  f32 %181 = OpCompositeExtract %180 1 
                         Private f32* %182 = OpAccessChain %119 %88 
                                               OpStore %182 %181 
                  read_only Texture2D %183 = OpLoad %44 
                              sampler %184 = OpLoad %48 
           read_only Texture2DSampled %185 = OpSampledImage %183 %184 
                                f32_3 %186 = OpLoad %9 
                                f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                f32_4 %189 = OpImageSampleExplicitLod %185 %187 Lod %27ConstOffset %189 
                                  f32 %190 = OpCompositeExtract %189 1 
                         Private f32* %191 = OpAccessChain %125 %88 
                                               OpStore %191 %190 
                  read_only Texture2D %192 = OpLoad %44 
                              sampler %193 = OpLoad %48 
           read_only Texture2DSampled %194 = OpSampledImage %192 %193 
                                f32_3 %195 = OpLoad %9 
                                f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                f32_4 %198 = OpImageSampleExplicitLod %194 %196 Lod %27ConstOffset %198 
                                  f32 %199 = OpCompositeExtract %198 1 
                         Private f32* %200 = OpAccessChain %9 %88 
                                               OpStore %200 %199 
                                  f32 %202 = OpLoad %56 
                         Private f32* %203 = OpAccessChain %78 %88 
                                  f32 %204 = OpLoad %203 
                                  f32 %205 = OpFAdd %202 %204 
                         Private f32* %206 = OpAccessChain %201 %88 
                                               OpStore %206 %205 
                                  f32 %208 = OpLoad %69 
                                  f32 %209 = OpLoad %90 
                                  f32 %210 = OpFAdd %208 %209 
                         Private f32* %211 = OpAccessChain %207 %88 
                                               OpStore %211 %210 
                         Private f32* %212 = OpAccessChain %100 %88 
                                  f32 %213 = OpLoad %212 
                                  f32 %214 = OpFDiv %19 %213 
                         Private f32* %215 = OpAccessChain %100 %88 
                                               OpStore %215 %214 
                         Private f32* %217 = OpAccessChain %201 %88 
                                  f32 %218 = OpLoad %217 
                         Private f32* %219 = OpAccessChain %207 %88 
                                  f32 %220 = OpLoad %219 
                                  f32 %221 = OpFAdd %218 %220 
                                               OpStore %216 %221 
                         Private f32* %222 = OpAccessChain %41 %67 
                                  f32 %223 = OpLoad %222 
                                  f32 %225 = OpFMul %223 %224 
                         Private f32* %226 = OpAccessChain %201 %88 
                                  f32 %227 = OpLoad %226 
                                  f32 %228 = OpFAdd %225 %227 
                         Private f32* %229 = OpAccessChain %201 %88 
                                               OpStore %229 %228 
                         Private f32* %230 = OpAccessChain %41 %67 
                                  f32 %231 = OpLoad %230 
                                  f32 %232 = OpFMul %231 %224 
                         Private f32* %233 = OpAccessChain %207 %88 
                                  f32 %234 = OpLoad %233 
                                  f32 %235 = OpFAdd %232 %234 
                         Private f32* %236 = OpAccessChain %207 %88 
                                               OpStore %236 %235 
                         Private f32* %238 = OpAccessChain %119 %88 
                                  f32 %239 = OpLoad %238 
                         Private f32* %240 = OpAccessChain %125 %88 
                                  f32 %241 = OpLoad %240 
                                  f32 %242 = OpFAdd %239 %241 
                         Private f32* %243 = OpAccessChain %237 %88 
                                               OpStore %243 %242 
                                  f32 %244 = OpLoad %106 
                         Private f32* %245 = OpAccessChain %125 %88 
                                  f32 %246 = OpLoad %245 
                                  f32 %247 = OpFAdd %244 %246 
                         Private f32* %248 = OpAccessChain %125 %88 
                                               OpStore %248 %247 
                                  f32 %250 = OpLoad %69 
                                  f32 %251 = OpFMul %250 %224 
                         Private f32* %252 = OpAccessChain %237 %88 
                                  f32 %253 = OpLoad %252 
                                  f32 %254 = OpFAdd %251 %253 
                         Private f32* %255 = OpAccessChain %249 %88 
                                               OpStore %255 %254 
                         Private f32* %256 = OpAccessChain %78 %88 
                                  f32 %257 = OpLoad %256 
                                  f32 %258 = OpFMul %257 %224 
                         Private f32* %259 = OpAccessChain %125 %88 
                                  f32 %260 = OpLoad %259 
                                  f32 %261 = OpFAdd %258 %260 
                         Private f32* %262 = OpAccessChain %125 %88 
                                               OpStore %262 %261 
                         Private f32* %263 = OpAccessChain %9 %88 
                                  f32 %264 = OpLoad %263 
                                  f32 %265 = OpLoad %106 
                                  f32 %266 = OpFAdd %264 %265 
                                               OpStore %106 %266 
                         Private f32* %267 = OpAccessChain %119 %88 
                                  f32 %268 = OpLoad %267 
                         Private f32* %269 = OpAccessChain %9 %88 
                                  f32 %270 = OpLoad %269 
                                  f32 %271 = OpFAdd %268 %270 
                         Private f32* %272 = OpAccessChain %9 %88 
                                               OpStore %272 %271 
                         Private f32* %273 = OpAccessChain %201 %88 
                                  f32 %274 = OpLoad %273 
                                  f32 %275 = OpExtInst %1 4 %274 
                                  f32 %277 = OpFMul %275 %276 
                         Private f32* %278 = OpAccessChain %249 %88 
                                  f32 %279 = OpLoad %278 
                                  f32 %280 = OpExtInst %1 4 %279 
                                  f32 %281 = OpFAdd %277 %280 
                         Private f32* %282 = OpAccessChain %201 %88 
                                               OpStore %282 %281 
                         Private f32* %283 = OpAccessChain %207 %88 
                                  f32 %284 = OpLoad %283 
                                  f32 %285 = OpExtInst %1 4 %284 
                                  f32 %286 = OpFMul %285 %276 
                         Private f32* %287 = OpAccessChain %125 %88 
                                  f32 %288 = OpLoad %287 
                                  f32 %289 = OpExtInst %1 4 %288 
                                  f32 %290 = OpFAdd %286 %289 
                         Private f32* %291 = OpAccessChain %119 %88 
                                               OpStore %291 %290 
                                  f32 %292 = OpLoad %90 
                                  f32 %293 = OpFMul %292 %224 
                                  f32 %294 = OpLoad %106 
                                  f32 %295 = OpFAdd %293 %294 
                         Private f32* %296 = OpAccessChain %125 %88 
                                               OpStore %296 %295 
                                  f32 %297 = OpLoad %56 
                                  f32 %298 = OpFMul %297 %224 
                         Private f32* %299 = OpAccessChain %9 %88 
                                  f32 %300 = OpLoad %299 
                                  f32 %301 = OpFAdd %298 %300 
                         Private f32* %302 = OpAccessChain %9 %88 
                                               OpStore %302 %301 
                         Private f32* %303 = OpAccessChain %201 %88 
                                  f32 %304 = OpLoad %303 
                         Private f32* %305 = OpAccessChain %125 %88 
                                  f32 %306 = OpLoad %305 
                                  f32 %307 = OpExtInst %1 4 %306 
                                  f32 %308 = OpFAdd %304 %307 
                         Private f32* %309 = OpAccessChain %201 %88 
                                               OpStore %309 %308 
                         Private f32* %310 = OpAccessChain %119 %88 
                                  f32 %311 = OpLoad %310 
                         Private f32* %312 = OpAccessChain %9 %88 
                                  f32 %313 = OpLoad %312 
                                  f32 %314 = OpExtInst %1 4 %313 
                                  f32 %315 = OpFAdd %311 %314 
                         Private f32* %316 = OpAccessChain %9 %88 
                                               OpStore %316 %315 
                         Private f32* %317 = OpAccessChain %237 %88 
                                  f32 %318 = OpLoad %317 
                                  f32 %319 = OpLoad %106 
                                  f32 %320 = OpFAdd %318 %319 
                                               OpStore %106 %320 
                         Private f32* %324 = OpAccessChain %201 %88 
                                  f32 %325 = OpLoad %324 
                         Private f32* %326 = OpAccessChain %9 %88 
                                  f32 %327 = OpLoad %326 
                                 bool %328 = OpFOrdGreaterThanEqual %325 %327 
                        Private bool* %329 = OpAccessChain %323 %88 
                                               OpStore %329 %328 
                                  f32 %330 = OpLoad %216 
                                  f32 %331 = OpFMul %330 %276 
                                  f32 %332 = OpLoad %106 
                                  f32 %333 = OpFAdd %331 %332 
                         Private f32* %334 = OpAccessChain %201 %88 
                                               OpStore %334 %333 
                        Private bool* %335 = OpAccessChain %323 %88 
                                 bool %336 = OpLoad %335 
                                               OpSelectionMerge %340 None 
                                               OpBranchConditional %336 %339 %343 
                                      %339 = OpLabel 
                         Private f32* %341 = OpAccessChain %78 %88 
                                  f32 %342 = OpLoad %341 
                                               OpStore %338 %342 
                                               OpBranch %340 
                                      %343 = OpLabel 
                                  f32 %344 = OpLoad %90 
                                               OpStore %338 %344 
                                               OpBranch %340 
                                      %340 = OpLabel 
                                  f32 %345 = OpLoad %338 
                         Private f32* %346 = OpAccessChain %78 %88 
                                               OpStore %346 %345 
                        Private bool* %347 = OpAccessChain %323 %88 
                                 bool %348 = OpLoad %347 
                                  f32 %349 = OpLoad %56 
                                  f32 %350 = OpLoad %69 
                                  f32 %351 = OpSelect %348 %349 %350 
                                               OpStore %56 %351 
                        Private bool* %352 = OpAccessChain %323 %88 
                                 bool %353 = OpLoad %352 
                                               OpSelectionMerge %356 None 
                                               OpBranchConditional %353 %355 %360 
                                      %355 = OpLabel 
                         Uniform f32* %358 = OpAccessChain %30 %357 %67 
                                  f32 %359 = OpLoad %358 
                                               OpStore %354 %359 
                                               OpBranch %356 
                                      %360 = OpLabel 
                         Uniform f32* %361 = OpAccessChain %30 %357 %88 
                                  f32 %362 = OpLoad %361 
                                               OpStore %354 %362 
                                               OpBranch %356 
                                      %356 = OpLabel 
                                  f32 %363 = OpLoad %354 
                                               OpStore %69 %363 
                         Private f32* %364 = OpAccessChain %201 %88 
                                  f32 %365 = OpLoad %364 
                                  f32 %367 = OpFMul %365 %366 
                         Private f32* %368 = OpAccessChain %41 %67 
                                  f32 %369 = OpLoad %368 
                                  f32 %370 = OpFNegate %369 
                                  f32 %371 = OpFAdd %367 %370 
                         Private f32* %372 = OpAccessChain %201 %88 
                                               OpStore %372 %371 
                         Private f32* %373 = OpAccessChain %41 %67 
                                  f32 %374 = OpLoad %373 
                                  f32 %375 = OpFNegate %374 
                         Private f32* %376 = OpAccessChain %78 %88 
                                  f32 %377 = OpLoad %376 
                                  f32 %378 = OpFAdd %375 %377 
                                               OpStore %90 %378 
                         Private f32* %379 = OpAccessChain %41 %67 
                                  f32 %380 = OpLoad %379 
                                  f32 %381 = OpFNegate %380 
                                  f32 %382 = OpLoad %56 
                                  f32 %383 = OpFAdd %381 %382 
                                               OpStore %106 %383 
                         Private f32* %384 = OpAccessChain %41 %67 
                                  f32 %385 = OpLoad %384 
                         Private f32* %386 = OpAccessChain %78 %88 
                                  f32 %387 = OpLoad %386 
                                  f32 %388 = OpFAdd %385 %387 
                         Private f32* %389 = OpAccessChain %78 %88 
                                               OpStore %389 %388 
                         Private f32* %390 = OpAccessChain %41 %67 
                                  f32 %391 = OpLoad %390 
                                  f32 %392 = OpLoad %56 
                                  f32 %393 = OpFAdd %391 %392 
                                               OpStore %56 %393 
                                  f32 %395 = OpLoad %90 
                                  f32 %396 = OpExtInst %1 4 %395 
                                  f32 %397 = OpLoad %106 
                                  f32 %398 = OpExtInst %1 4 %397 
                                 bool %399 = OpFOrdGreaterThanEqual %396 %398 
                                               OpStore %394 %399 
                                  f32 %400 = OpLoad %106 
                                  f32 %401 = OpExtInst %1 4 %400 
                                  f32 %402 = OpLoad %90 
                                  f32 %403 = OpExtInst %1 4 %402 
                                  f32 %404 = OpExtInst %1 40 %401 %403 
                                               OpStore %90 %404 
                                 bool %405 = OpLoad %394 
                                               OpSelectionMerge %408 None 
                                               OpBranchConditional %405 %407 %411 
                                      %407 = OpLabel 
                                  f32 %409 = OpLoad %69 
                                  f32 %410 = OpFNegate %409 
                                               OpStore %406 %410 
                                               OpBranch %408 
                                      %411 = OpLabel 
                                  f32 %412 = OpLoad %69 
                                               OpStore %406 %412 
                                               OpBranch %408 
                                      %408 = OpLabel 
                                  f32 %413 = OpLoad %406 
                                               OpStore %69 %413 
                         Private f32* %414 = OpAccessChain %100 %88 
                                  f32 %415 = OpLoad %414 
                         Private f32* %416 = OpAccessChain %201 %88 
                                  f32 %417 = OpLoad %416 
                                  f32 %418 = OpExtInst %1 4 %417 
                                  f32 %419 = OpFMul %415 %418 
                         Private f32* %420 = OpAccessChain %201 %88 
                                               OpStore %420 %419 
                         Private f32* %421 = OpAccessChain %201 %88 
                                  f32 %422 = OpLoad %421 
                                  f32 %423 = OpExtInst %1 43 %422 %18 %19 
                         Private f32* %424 = OpAccessChain %201 %88 
                                               OpStore %424 %423 
                        Private bool* %425 = OpAccessChain %323 %88 
                                 bool %426 = OpLoad %425 
                                               OpSelectionMerge %429 None 
                                               OpBranchConditional %426 %428 %432 
                                      %428 = OpLabel 
                         Uniform f32* %430 = OpAccessChain %30 %357 %88 
                                  f32 %431 = OpLoad %430 
                                               OpStore %427 %431 
                                               OpBranch %429 
                                      %432 = OpLabel 
                                               OpStore %427 %18 
                                               OpBranch %429 
                                      %429 = OpLabel 
                                  f32 %433 = OpLoad %427 
                         Private f32* %434 = OpAccessChain %100 %88 
                                               OpStore %434 %433 
                        Private bool* %435 = OpAccessChain %323 %88 
                                 bool %436 = OpLoad %435 
                                               OpSelectionMerge %439 None 
                                               OpBranchConditional %436 %438 %440 
                                      %438 = OpLabel 
                                               OpStore %437 %18 
                                               OpBranch %439 
                                      %440 = OpLabel 
                         Uniform f32* %441 = OpAccessChain %30 %357 %67 
                                  f32 %442 = OpLoad %441 
                                               OpStore %437 %442 
                                               OpBranch %439 
                                      %439 = OpLabel 
                                  f32 %443 = OpLoad %437 
                         Private f32* %444 = OpAccessChain %100 %67 
                                               OpStore %444 %443 
                                  f32 %445 = OpLoad %69 
                                f32_2 %446 = OpCompositeConstruct %445 %445 
                                f32_2 %449 = OpFMul %446 %448 
                                f32_2 %450 = OpLoad vs_TEXCOORD0 
                                f32_2 %451 = OpFAdd %449 %450 
                                               OpStore %125 %451 
                        Private bool* %452 = OpAccessChain %323 %88 
                                 bool %453 = OpLoad %452 
                                               OpSelectionMerge %456 None 
                                               OpBranchConditional %453 %455 %460 
                                      %455 = OpLabel 
                           Input f32* %458 = OpAccessChain vs_TEXCOORD0 %88 
                                  f32 %459 = OpLoad %458 
                                               OpStore %454 %459 
                                               OpBranch %456 
                                      %460 = OpLabel 
                         Private f32* %461 = OpAccessChain %125 %88 
                                  f32 %462 = OpLoad %461 
                                               OpStore %454 %462 
                                               OpBranch %456 
                                      %456 = OpLabel 
                                  f32 %463 = OpLoad %454 
                         Private f32* %464 = OpAccessChain %125 %88 
                                               OpStore %464 %463 
                        Private bool* %465 = OpAccessChain %323 %88 
                                 bool %466 = OpLoad %465 
                                               OpSelectionMerge %469 None 
                                               OpBranchConditional %466 %468 %472 
                                      %468 = OpLabel 
                         Private f32* %470 = OpAccessChain %125 %67 
                                  f32 %471 = OpLoad %470 
                                               OpStore %467 %471 
                                               OpBranch %469 
                                      %472 = OpLabel 
                           Input f32* %473 = OpAccessChain vs_TEXCOORD0 %67 
                                  f32 %474 = OpLoad %473 
                                               OpStore %467 %474 
                                               OpBranch %469 
                                      %469 = OpLabel 
                                  f32 %475 = OpLoad %467 
                         Private f32* %476 = OpAccessChain %125 %67 
                                               OpStore %476 %475 
                                f32_2 %477 = OpLoad %100 
                                f32_2 %478 = OpFNegate %477 
                                f32_2 %479 = OpLoad %125 
                                f32_2 %480 = OpFAdd %478 %479 
                                f32_3 %481 = OpLoad %237 
                                f32_3 %482 = OpVectorShuffle %481 %480 3 4 2 
                                               OpStore %237 %482 
                                f32_2 %484 = OpLoad %100 
                                f32_2 %485 = OpLoad %125 
                                f32_2 %486 = OpFAdd %484 %485 
                                f32_3 %487 = OpLoad %483 
                                f32_3 %488 = OpVectorShuffle %487 %486 3 4 2 
                                               OpStore %483 %488 
                         Private f32* %489 = OpAccessChain %201 %88 
                                  f32 %490 = OpLoad %489 
                                  f32 %491 = OpFMul %490 %224 
                                  f32 %493 = OpFAdd %491 %492 
                         Private f32* %494 = OpAccessChain %125 %88 
                                               OpStore %494 %493 
                                f32_3 %495 = OpLoad %237 
                                f32_2 %496 = OpVectorShuffle %495 %495 0 1 
                                               OpStore %207 %496 
                                f32_2 %497 = OpLoad %207 
                                f32_2 %498 = OpCompositeConstruct %18 %18 
                                f32_2 %499 = OpCompositeConstruct %19 %19 
                                f32_2 %500 = OpExtInst %1 43 %497 %498 %499 
                                               OpStore %207 %500 
                                f32_2 %501 = OpLoad %207 
                         Uniform f32* %502 = OpAccessChain %30 %32 
                                  f32 %503 = OpLoad %502 
                                f32_2 %504 = OpCompositeConstruct %503 %503 
                                f32_2 %505 = OpFMul %501 %504 
                                               OpStore %207 %505 
                  read_only Texture2D %506 = OpLoad %44 
                              sampler %507 = OpLoad %48 
           read_only Texture2DSampled %508 = OpSampledImage %506 %507 
                                f32_2 %509 = OpLoad %207 
                                f32_4 %510 = OpImageSampleExplicitLod %508 %509 Lod %27 
                                  f32 %511 = OpCompositeExtract %510 1 
                         Private f32* %512 = OpAccessChain %207 %88 
                                               OpStore %512 %511 
                         Private f32* %513 = OpAccessChain %201 %88 
                                  f32 %514 = OpLoad %513 
                         Private f32* %515 = OpAccessChain %201 %88 
                                  f32 %516 = OpLoad %515 
                                  f32 %517 = OpFMul %514 %516 
                         Private f32* %518 = OpAccessChain %201 %88 
                                               OpStore %518 %517 
                                f32_3 %520 = OpLoad %483 
                                f32_2 %521 = OpVectorShuffle %520 %520 0 1 
                                               OpStore %519 %521 
                                f32_2 %522 = OpLoad %519 
                                f32_2 %523 = OpCompositeConstruct %18 %18 
                                f32_2 %524 = OpCompositeConstruct %19 %19 
                                f32_2 %525 = OpExtInst %1 43 %522 %523 %524 
                                               OpStore %519 %525 
                                f32_2 %526 = OpLoad %519 
                         Uniform f32* %527 = OpAccessChain %30 %32 
                                  f32 %528 = OpLoad %527 
                                f32_2 %529 = OpCompositeConstruct %528 %528 
                                f32_2 %530 = OpFMul %526 %529 
                                               OpStore %519 %530 
                  read_only Texture2D %531 = OpLoad %44 
                              sampler %532 = OpLoad %48 
           read_only Texture2DSampled %533 = OpSampledImage %531 %532 
                                f32_2 %534 = OpLoad %519 
                                f32_4 %535 = OpImageSampleExplicitLod %533 %534 Lod %27 
                                  f32 %536 = OpCompositeExtract %535 1 
                                               OpStore %216 %536 
                                 bool %537 = OpLoad %394 
                                               OpSelectionMerge %540 None 
                                               OpBranchConditional %537 %539 %543 
                                      %539 = OpLabel 
                         Private f32* %541 = OpAccessChain %78 %88 
                                  f32 %542 = OpLoad %541 
                                               OpStore %538 %542 
                                               OpBranch %540 
                                      %543 = OpLabel 
                                  f32 %544 = OpLoad %56 
                                               OpStore %538 %544 
                                               OpBranch %540 
                                      %540 = OpLabel 
                                  f32 %545 = OpLoad %538 
                                               OpStore %56 %545 
                                  f32 %546 = OpLoad %90 
                                  f32 %548 = OpFMul %546 %547 
                         Private f32* %549 = OpAccessChain %78 %88 
                                               OpStore %549 %548 
                                  f32 %550 = OpLoad %56 
                                  f32 %551 = OpFNegate %550 
                                  f32 %552 = OpFMul %551 %447 
                         Private f32* %553 = OpAccessChain %41 %67 
                                  f32 %554 = OpLoad %553 
                                  f32 %555 = OpFAdd %552 %554 
                                               OpStore %90 %555 
                         Private f32* %556 = OpAccessChain %201 %88 
                                  f32 %557 = OpLoad %556 
                         Private f32* %558 = OpAccessChain %125 %88 
                                  f32 %559 = OpLoad %558 
                                  f32 %560 = OpFMul %557 %559 
                         Private f32* %561 = OpAccessChain %201 %88 
                                               OpStore %561 %560 
                                  f32 %564 = OpLoad %90 
                                 bool %565 = OpFOrdLessThan %564 %18 
                                  u32 %567 = OpSelect %565 %566 %88 
                                  i32 %568 = OpBitcast %567 
                                               OpStore %563 %568 
                                  f32 %569 = OpLoad %56 
                                  f32 %570 = OpFNegate %569 
                                  f32 %571 = OpFMul %570 %447 
                         Private f32* %572 = OpAccessChain %207 %88 
                                  f32 %573 = OpLoad %572 
                                  f32 %574 = OpFAdd %571 %573 
                         Private f32* %575 = OpAccessChain %119 %88 
                                               OpStore %575 %574 
                                  f32 %576 = OpLoad %56 
                                  f32 %577 = OpFNegate %576 
                                  f32 %578 = OpFMul %577 %447 
                                  f32 %579 = OpLoad %216 
                                  f32 %580 = OpFAdd %578 %579 
                         Private f32* %581 = OpAccessChain %119 %67 
                                               OpStore %581 %580 
                                f32_3 %584 = OpLoad %119 
                                f32_4 %585 = OpVectorShuffle %584 %584 0 1 0 1 
                                f32_4 %586 = OpExtInst %1 4 %585 
                                f32_3 %587 = OpLoad %78 
                                f32_4 %588 = OpVectorShuffle %587 %587 0 0 0 0 
                               bool_4 %590 = OpFOrdGreaterThanEqual %586 %588 
                               bool_2 %592 = OpVectorShuffle %590 %590 0 1 
                                u32_2 %596 = OpSelect %592 %595 %594 
                                u32_2 %597 = OpCompositeConstruct %566 %566 
                                u32_2 %598 = OpIMul %596 %597 
                                i32_2 %599 = OpBitcast %598 
                                               OpStore %583 %599 
                         Private f32* %600 = OpAccessChain %100 %88 
                                  f32 %601 = OpLoad %600 
                                  f32 %602 = OpFNegate %601 
                                  f32 %604 = OpFMul %602 %603 
                         Private f32* %605 = OpAccessChain %237 %88 
                                  f32 %606 = OpLoad %605 
                                  f32 %607 = OpFAdd %604 %606 
                         Private f32* %608 = OpAccessChain %519 %88 
                                               OpStore %608 %607 
                         Private i32* %609 = OpAccessChain %583 %88 
                                  i32 %610 = OpLoad %609 
                                 bool %611 = OpINotEqual %610 %32 
                                               OpSelectionMerge %614 None 
                                               OpBranchConditional %611 %613 %617 
                                      %613 = OpLabel 
                         Private f32* %615 = OpAccessChain %237 %88 
                                  f32 %616 = OpLoad %615 
                                               OpStore %612 %616 
                                               OpBranch %614 
                                      %617 = OpLabel 
                         Private f32* %618 = OpAccessChain %519 %88 
                                  f32 %619 = OpLoad %618 
                                               OpStore %612 %619 
                                               OpBranch %614 
                                      %614 = OpLabel 
                                  f32 %620 = OpLoad %612 
                         Private f32* %621 = OpAccessChain %237 %88 
                                               OpStore %621 %620 
                         Private f32* %623 = OpAccessChain %100 %67 
                                  f32 %624 = OpLoad %623 
                                  f32 %625 = OpFNegate %624 
                                  f32 %626 = OpFMul %625 %603 
                         Private f32* %627 = OpAccessChain %237 %67 
                                  f32 %628 = OpLoad %627 
                                  f32 %629 = OpFAdd %626 %628 
                                               OpStore %622 %629 
                         Private i32* %630 = OpAccessChain %583 %88 
                                  i32 %631 = OpLoad %630 
                                 bool %632 = OpINotEqual %631 %32 
                                               OpSelectionMerge %635 None 
                                               OpBranchConditional %632 %634 %638 
                                      %634 = OpLabel 
                         Private f32* %636 = OpAccessChain %237 %67 
                                  f32 %637 = OpLoad %636 
                                               OpStore %633 %637 
                                               OpBranch %635 
                                      %638 = OpLabel 
                                  f32 %639 = OpLoad %622 
                                               OpStore %633 %639 
                                               OpBranch %635 
                                      %635 = OpLabel 
                                  f32 %640 = OpLoad %633 
                         Private f32* %642 = OpAccessChain %237 %641 
                                               OpStore %642 %640 
                                i32_2 %646 = OpLoad %583 
                                i32_2 %647 = OpNot %646 
                                i32_3 %648 = OpLoad %645 
                                i32_3 %649 = OpVectorShuffle %648 %647 3 1 4 
                                               OpStore %645 %649 
                         Private i32* %650 = OpAccessChain %645 %641 
                                  i32 %651 = OpLoad %650 
                                  u32 %652 = OpBitcast %651 
                         Private i32* %653 = OpAccessChain %645 %88 
                                  i32 %654 = OpLoad %653 
                                  u32 %655 = OpBitcast %654 
                                  u32 %656 = OpBitwiseOr %652 %655 
                                  i32 %657 = OpBitcast %656 
                         Private i32* %658 = OpAccessChain %645 %88 
                                               OpStore %658 %657 
                         Private f32* %659 = OpAccessChain %100 %88 
                                  f32 %660 = OpLoad %659 
                                  f32 %661 = OpFMul %660 %603 
                         Private f32* %662 = OpAccessChain %483 %88 
                                  f32 %663 = OpLoad %662 
                                  f32 %664 = OpFAdd %661 %663 
                                               OpStore %622 %664 
                         Private i32* %665 = OpAccessChain %583 %67 
                                  i32 %666 = OpLoad %665 
                                 bool %667 = OpINotEqual %666 %32 
                                               OpSelectionMerge %670 None 
                                               OpBranchConditional %667 %669 %673 
                                      %669 = OpLabel 
                         Private f32* %671 = OpAccessChain %483 %88 
                                  f32 %672 = OpLoad %671 
                                               OpStore %668 %672 
                                               OpBranch %670 
                                      %673 = OpLabel 
                                  f32 %674 = OpLoad %622 
                                               OpStore %668 %674 
                                               OpBranch %670 
                                      %670 = OpLabel 
                                  f32 %675 = OpLoad %668 
                         Private f32* %676 = OpAccessChain %483 %88 
                                               OpStore %676 %675 
                         Private f32* %677 = OpAccessChain %100 %67 
                                  f32 %678 = OpLoad %677 
                                  f32 %679 = OpFMul %678 %603 
                         Private f32* %680 = OpAccessChain %483 %67 
                                  f32 %681 = OpLoad %680 
                                  f32 %682 = OpFAdd %679 %681 
                                               OpStore %622 %682 
                         Private i32* %683 = OpAccessChain %583 %67 
                                  i32 %684 = OpLoad %683 
                                 bool %685 = OpINotEqual %684 %32 
                                               OpSelectionMerge %688 None 
                                               OpBranchConditional %685 %687 %691 
                                      %687 = OpLabel 
                         Private f32* %689 = OpAccessChain %483 %67 
                                  f32 %690 = OpLoad %689 
                                               OpStore %686 %690 
                                               OpBranch %688 
                                      %691 = OpLabel 
                                  f32 %692 = OpLoad %622 
                                               OpStore %686 %692 
                                               OpBranch %688 
                                      %688 = OpLabel 
                                  f32 %693 = OpLoad %686 
                         Private f32* %694 = OpAccessChain %483 %641 
                                               OpStore %694 %693 
                         Private i32* %695 = OpAccessChain %645 %88 
                                  i32 %696 = OpLoad %695 
                                 bool %697 = OpINotEqual %696 %32 
                                               OpSelectionMerge %699 None 
                                               OpBranchConditional %697 %698 %699 
                                      %698 = OpLabel 
                         Private i32* %700 = OpAccessChain %583 %88 
                                  i32 %701 = OpLoad %700 
                                 bool %702 = OpIEqual %701 %32 
                                               OpSelectionMerge %704 None 
                                               OpBranchConditional %702 %703 %704 
                                      %703 = OpLabel 
                                f32_3 %705 = OpLoad %237 
                                f32_2 %706 = OpVectorShuffle %705 %705 0 2 
                                f32_3 %707 = OpLoad %249 
                                f32_3 %708 = OpVectorShuffle %707 %706 3 1 4 
                                               OpStore %249 %708 
                                f32_3 %709 = OpLoad %249 
                                f32_2 %710 = OpVectorShuffle %709 %709 0 2 
                                f32_2 %711 = OpCompositeConstruct %18 %18 
                                f32_2 %712 = OpCompositeConstruct %19 %19 
                                f32_2 %713 = OpExtInst %1 43 %710 %711 %712 
                                f32_3 %714 = OpLoad %249 
                                f32_3 %715 = OpVectorShuffle %714 %713 3 1 4 
                                               OpStore %249 %715 
                                f32_3 %716 = OpLoad %249 
                                f32_2 %717 = OpVectorShuffle %716 %716 0 2 
                         Uniform f32* %718 = OpAccessChain %30 %32 
                                  f32 %719 = OpLoad %718 
                                f32_2 %720 = OpCompositeConstruct %719 %719 
                                f32_2 %721 = OpFMul %717 %720 
                                f32_3 %722 = OpLoad %249 
                                f32_3 %723 = OpVectorShuffle %722 %721 3 1 4 
                                               OpStore %249 %723 
                  read_only Texture2D %724 = OpLoad %44 
                              sampler %725 = OpLoad %48 
           read_only Texture2DSampled %726 = OpSampledImage %724 %725 
                                f32_3 %727 = OpLoad %249 
                                f32_2 %728 = OpVectorShuffle %727 %727 0 2 
                                f32_4 %729 = OpImageSampleExplicitLod %726 %728 Lod %27 
                                  f32 %730 = OpCompositeExtract %729 1 
                         Private f32* %731 = OpAccessChain %119 %88 
                                               OpStore %731 %730 
                                               OpBranch %704 
                                      %704 = OpLabel 
                         Private i32* %732 = OpAccessChain %583 %67 
                                  i32 %733 = OpLoad %732 
                                 bool %734 = OpIEqual %733 %32 
                                               OpSelectionMerge %736 None 
                                               OpBranchConditional %734 %735 %736 
                                      %735 = OpLabel 
                                f32_3 %737 = OpLoad %483 
                                f32_2 %738 = OpVectorShuffle %737 %737 0 2 
                                f32_3 %739 = OpLoad %249 
                                f32_3 %740 = OpVectorShuffle %739 %738 3 1 4 
                                               OpStore %249 %740 
                                f32_3 %741 = OpLoad %249 
                                f32_2 %742 = OpVectorShuffle %741 %741 0 2 
                                f32_2 %743 = OpCompositeConstruct %18 %18 
                                f32_2 %744 = OpCompositeConstruct %19 %19 
                                f32_2 %745 = OpExtInst %1 43 %742 %743 %744 
                                f32_3 %746 = OpLoad %249 
                                f32_3 %747 = OpVectorShuffle %746 %745 3 1 4 
                                               OpStore %249 %747 
                                f32_3 %748 = OpLoad %249 
                                f32_2 %749 = OpVectorShuffle %748 %748 0 2 
                         Uniform f32* %750 = OpAccessChain %30 %32 
                                  f32 %751 = OpLoad %750 
                                f32_2 %752 = OpCompositeConstruct %751 %751 
                                f32_2 %753 = OpFMul %749 %752 
                                f32_3 %754 = OpLoad %249 
                                f32_3 %755 = OpVectorShuffle %754 %753 3 1 4 
                                               OpStore %249 %755 
                  read_only Texture2D %756 = OpLoad %44 
                              sampler %757 = OpLoad %48 
           read_only Texture2DSampled %758 = OpSampledImage %756 %757 
                                f32_3 %759 = OpLoad %249 
                                f32_2 %760 = OpVectorShuffle %759 %759 0 2 
                                f32_4 %761 = OpImageSampleExplicitLod %758 %760 Lod %27 
                                  f32 %762 = OpCompositeExtract %761 1 
                         Private f32* %763 = OpAccessChain %119 %67 
                                               OpStore %763 %762 
                                               OpBranch %736 
                                      %736 = OpLabel 
                                  f32 %764 = OpLoad %56 
                                  f32 %765 = OpFNegate %764 
                                  f32 %766 = OpFMul %765 %447 
                         Private f32* %767 = OpAccessChain %119 %88 
                                  f32 %768 = OpLoad %767 
                                  f32 %769 = OpFAdd %766 %768 
                         Private f32* %770 = OpAccessChain %249 %88 
                                               OpStore %770 %769 
                         Private i32* %771 = OpAccessChain %583 %88 
                                  i32 %772 = OpLoad %771 
                                 bool %773 = OpINotEqual %772 %32 
                                               OpSelectionMerge %776 None 
                                               OpBranchConditional %773 %775 %779 
                                      %775 = OpLabel 
                         Private f32* %777 = OpAccessChain %119 %88 
                                  f32 %778 = OpLoad %777 
                                               OpStore %774 %778 
                                               OpBranch %776 
                                      %779 = OpLabel 
                         Private f32* %780 = OpAccessChain %249 %88 
                                  f32 %781 = OpLoad %780 
                                               OpStore %774 %781 
                                               OpBranch %776 
                                      %776 = OpLabel 
                                  f32 %782 = OpLoad %774 
                         Private f32* %783 = OpAccessChain %119 %88 
                                               OpStore %783 %782 
                                  f32 %784 = OpLoad %56 
                                  f32 %785 = OpFNegate %784 
                                  f32 %786 = OpFMul %785 %447 
                         Private f32* %787 = OpAccessChain %119 %67 
                                  f32 %788 = OpLoad %787 
                                  f32 %789 = OpFAdd %786 %788 
                         Private f32* %790 = OpAccessChain %207 %88 
                                               OpStore %790 %789 
                         Private i32* %791 = OpAccessChain %583 %67 
                                  i32 %792 = OpLoad %791 
                                 bool %793 = OpINotEqual %792 %32 
                                               OpSelectionMerge %796 None 
                                               OpBranchConditional %793 %795 %799 
                                      %795 = OpLabel 
                         Private f32* %797 = OpAccessChain %119 %67 
                                  f32 %798 = OpLoad %797 
                                               OpStore %794 %798 
                                               OpBranch %796 
                                      %799 = OpLabel 
                         Private f32* %800 = OpAccessChain %207 %88 
                                  f32 %801 = OpLoad %800 
                                               OpStore %794 %801 
                                               OpBranch %796 
                                      %796 = OpLabel 
                                  f32 %802 = OpLoad %794 
                         Private f32* %803 = OpAccessChain %119 %67 
                                               OpStore %803 %802 
                                f32_3 %804 = OpLoad %119 
                                f32_4 %805 = OpVectorShuffle %804 %804 0 1 0 1 
                                f32_4 %806 = OpExtInst %1 4 %805 
                                f32_3 %807 = OpLoad %78 
                                f32_4 %808 = OpVectorShuffle %807 %807 0 0 0 0 
                               bool_4 %809 = OpFOrdGreaterThanEqual %806 %808 
                               bool_2 %810 = OpVectorShuffle %809 %809 0 1 
                                u32_2 %811 = OpSelect %810 %595 %594 
                                u32_2 %812 = OpCompositeConstruct %566 %566 
                                u32_2 %813 = OpIMul %811 %812 
                                i32_2 %814 = OpBitcast %813 
                                               OpStore %583 %814 
                         Private f32* %815 = OpAccessChain %100 %88 
                                  f32 %816 = OpLoad %815 
                                  f32 %817 = OpFNegate %816 
                                  f32 %818 = OpFMul %817 %276 
                         Private f32* %819 = OpAccessChain %237 %88 
                                  f32 %820 = OpLoad %819 
                                  f32 %821 = OpFAdd %818 %820 
                         Private f32* %822 = OpAccessChain %249 %88 
                                               OpStore %822 %821 
                         Private i32* %823 = OpAccessChain %583 %88 
                                  i32 %824 = OpLoad %823 
                                 bool %825 = OpINotEqual %824 %32 
                                               OpSelectionMerge %828 None 
                                               OpBranchConditional %825 %827 %831 
                                      %827 = OpLabel 
                         Private f32* %829 = OpAccessChain %237 %88 
                                  f32 %830 = OpLoad %829 
                                               OpStore %826 %830 
                                               OpBranch %828 
                                      %831 = OpLabel 
                         Private f32* %832 = OpAccessChain %249 %88 
                                  f32 %833 = OpLoad %832 
                                               OpStore %826 %833 
                                               OpBranch %828 
                                      %828 = OpLabel 
                                  f32 %834 = OpLoad %826 
                         Private f32* %835 = OpAccessChain %237 %88 
                                               OpStore %835 %834 
                         Private f32* %836 = OpAccessChain %100 %67 
                                  f32 %837 = OpLoad %836 
                                  f32 %838 = OpFNegate %837 
                                  f32 %839 = OpFMul %838 %276 
                         Private f32* %840 = OpAccessChain %237 %641 
                                  f32 %841 = OpLoad %840 
                                  f32 %842 = OpFAdd %839 %841 
                         Private f32* %843 = OpAccessChain %249 %88 
                                               OpStore %843 %842 
                         Private i32* %844 = OpAccessChain %583 %88 
                                  i32 %845 = OpLoad %844 
                                 bool %846 = OpINotEqual %845 %32 
                                               OpSelectionMerge %849 None 
                                               OpBranchConditional %846 %848 %852 
                                      %848 = OpLabel 
                         Private f32* %850 = OpAccessChain %237 %641 
                                  f32 %851 = OpLoad %850 
                                               OpStore %847 %851 
                                               OpBranch %849 
                                      %852 = OpLabel 
                         Private f32* %853 = OpAccessChain %249 %88 
                                  f32 %854 = OpLoad %853 
                                               OpStore %847 %854 
                                               OpBranch %849 
                                      %849 = OpLabel 
                                  f32 %855 = OpLoad %847 
                         Private f32* %856 = OpAccessChain %237 %641 
                                               OpStore %856 %855 
                                i32_2 %857 = OpLoad %583 
                                i32_2 %858 = OpNot %857 
                                i32_3 %859 = OpLoad %645 
                                i32_3 %860 = OpVectorShuffle %859 %858 3 1 4 
                                               OpStore %645 %860 
                         Private i32* %861 = OpAccessChain %645 %641 
                                  i32 %862 = OpLoad %861 
                                  u32 %863 = OpBitcast %862 
                         Private i32* %864 = OpAccessChain %645 %88 
                                  i32 %865 = OpLoad %864 
                                  u32 %866 = OpBitcast %865 
                                  u32 %867 = OpBitwiseOr %863 %866 
                                  i32 %868 = OpBitcast %867 
                         Private i32* %869 = OpAccessChain %645 %88 
                                               OpStore %869 %868 
                         Private f32* %870 = OpAccessChain %100 %88 
                                  f32 %871 = OpLoad %870 
                                  f32 %872 = OpFMul %871 %276 
                         Private f32* %873 = OpAccessChain %483 %88 
                                  f32 %874 = OpLoad %873 
                                  f32 %875 = OpFAdd %872 %874 
                                               OpStore %622 %875 
                         Private i32* %876 = OpAccessChain %583 %67 
                                  i32 %877 = OpLoad %876 
                                 bool %878 = OpINotEqual %877 %32 
                                               OpSelectionMerge %881 None 
                                               OpBranchConditional %878 %880 %884 
                                      %880 = OpLabel 
                         Private f32* %882 = OpAccessChain %483 %88 
                                  f32 %883 = OpLoad %882 
                                               OpStore %879 %883 
                                               OpBranch %881 
                                      %884 = OpLabel 
                                  f32 %885 = OpLoad %622 
                                               OpStore %879 %885 
                                               OpBranch %881 
                                      %881 = OpLabel 
                                  f32 %886 = OpLoad %879 
                         Private f32* %887 = OpAccessChain %483 %88 
                                               OpStore %887 %886 
                         Private f32* %888 = OpAccessChain %100 %67 
                                  f32 %889 = OpLoad %888 
                                  f32 %890 = OpFMul %889 %276 
                         Private f32* %891 = OpAccessChain %483 %641 
                                  f32 %892 = OpLoad %891 
                                  f32 %893 = OpFAdd %890 %892 
                                               OpStore %622 %893 
                         Private i32* %894 = OpAccessChain %583 %67 
                                  i32 %895 = OpLoad %894 
                                 bool %896 = OpINotEqual %895 %32 
                                               OpSelectionMerge %899 None 
                                               OpBranchConditional %896 %898 %902 
                                      %898 = OpLabel 
                         Private f32* %900 = OpAccessChain %483 %641 
                                  f32 %901 = OpLoad %900 
                                               OpStore %897 %901 
                                               OpBranch %899 
                                      %902 = OpLabel 
                                  f32 %903 = OpLoad %622 
                                               OpStore %897 %903 
                                               OpBranch %899 
                                      %899 = OpLabel 
                                  f32 %904 = OpLoad %897 
                         Private f32* %905 = OpAccessChain %483 %641 
                                               OpStore %905 %904 
                         Private i32* %906 = OpAccessChain %645 %88 
                                  i32 %907 = OpLoad %906 
                                 bool %908 = OpINotEqual %907 %32 
                                               OpSelectionMerge %910 None 
                                               OpBranchConditional %908 %909 %910 
                                      %909 = OpLabel 
                         Private i32* %911 = OpAccessChain %583 %88 
                                  i32 %912 = OpLoad %911 
                                 bool %913 = OpIEqual %912 %32 
                                               OpSelectionMerge %915 None 
                                               OpBranchConditional %913 %914 %915 
                                      %914 = OpLabel 
                                f32_3 %916 = OpLoad %237 
                                f32_2 %917 = OpVectorShuffle %916 %916 0 2 
                                f32_3 %918 = OpLoad %249 
                                f32_3 %919 = OpVectorShuffle %918 %917 3 1 4 
                                               OpStore %249 %919 
                                f32_3 %920 = OpLoad %249 
                                f32_2 %921 = OpVectorShuffle %920 %920 0 2 
                                f32_2 %922 = OpCompositeConstruct %18 %18 
                                f32_2 %923 = OpCompositeConstruct %19 %19 
                                f32_2 %924 = OpExtInst %1 43 %921 %922 %923 
                                f32_3 %925 = OpLoad %249 
                                f32_3 %926 = OpVectorShuffle %925 %924 3 1 4 
                                               OpStore %249 %926 
                                f32_3 %927 = OpLoad %249 
                                f32_2 %928 = OpVectorShuffle %927 %927 0 2 
                         Uniform f32* %929 = OpAccessChain %30 %32 
                                  f32 %930 = OpLoad %929 
                                f32_2 %931 = OpCompositeConstruct %930 %930 
                                f32_2 %932 = OpFMul %928 %931 
                                f32_3 %933 = OpLoad %249 
                                f32_3 %934 = OpVectorShuffle %933 %932 3 1 4 
                                               OpStore %249 %934 
                  read_only Texture2D %935 = OpLoad %44 
                              sampler %936 = OpLoad %48 
           read_only Texture2DSampled %937 = OpSampledImage %935 %936 
                                f32_3 %938 = OpLoad %249 
                                f32_2 %939 = OpVectorShuffle %938 %938 0 2 
                                f32_4 %940 = OpImageSampleExplicitLod %937 %939 Lod %27 
                                  f32 %941 = OpCompositeExtract %940 1 
                         Private f32* %942 = OpAccessChain %119 %88 
                                               OpStore %942 %941 
                                               OpBranch %915 
                                      %915 = OpLabel 
                         Private i32* %943 = OpAccessChain %583 %67 
                                  i32 %944 = OpLoad %943 
                                 bool %945 = OpIEqual %944 %32 
                                               OpSelectionMerge %947 None 
                                               OpBranchConditional %945 %946 %947 
                                      %946 = OpLabel 
                                f32_3 %948 = OpLoad %483 
                                f32_2 %949 = OpVectorShuffle %948 %948 0 2 
                                f32_3 %950 = OpLoad %249 
                                f32_3 %951 = OpVectorShuffle %950 %949 3 1 4 
                                               OpStore %249 %951 
                                f32_3 %952 = OpLoad %249 
                                f32_2 %953 = OpVectorShuffle %952 %952 0 2 
                                f32_2 %954 = OpCompositeConstruct %18 %18 
                                f32_2 %955 = OpCompositeConstruct %19 %19 
                                f32_2 %956 = OpExtInst %1 43 %953 %954 %955 
                                f32_3 %957 = OpLoad %249 
                                f32_3 %958 = OpVectorShuffle %957 %956 3 1 4 
                                               OpStore %249 %958 
                                f32_3 %959 = OpLoad %249 
                                f32_2 %960 = OpVectorShuffle %959 %959 0 2 
                         Uniform f32* %961 = OpAccessChain %30 %32 
                                  f32 %962 = OpLoad %961 
                                f32_2 %963 = OpCompositeConstruct %962 %962 
                                f32_2 %964 = OpFMul %960 %963 
                                f32_3 %965 = OpLoad %249 
                                f32_3 %966 = OpVectorShuffle %965 %964 3 1 4 
                                               OpStore %249 %966 
                  read_only Texture2D %967 = OpLoad %44 
                              sampler %968 = OpLoad %48 
           read_only Texture2DSampled %969 = OpSampledImage %967 %968 
                                f32_3 %970 = OpLoad %249 
                                f32_2 %971 = OpVectorShuffle %970 %970 0 2 
                                f32_4 %972 = OpImageSampleExplicitLod %969 %971 Lod %27 
                                  f32 %973 = OpCompositeExtract %972 1 
                         Private f32* %974 = OpAccessChain %119 %67 
                                               OpStore %974 %973 
                                               OpBranch %947 
                                      %947 = OpLabel 
                                  f32 %975 = OpLoad %56 
                                  f32 %976 = OpFNegate %975 
                                  f32 %977 = OpFMul %976 %447 
                         Private f32* %978 = OpAccessChain %119 %88 
                                  f32 %979 = OpLoad %978 
                                  f32 %980 = OpFAdd %977 %979 
                         Private f32* %981 = OpAccessChain %249 %88 
                                               OpStore %981 %980 
                         Private i32* %982 = OpAccessChain %583 %88 
                                  i32 %983 = OpLoad %982 
                                 bool %984 = OpINotEqual %983 %32 
                                               OpSelectionMerge %987 None 
                                               OpBranchConditional %984 %986 %990 
                                      %986 = OpLabel 
                         Private f32* %988 = OpAccessChain %119 %88 
                                  f32 %989 = OpLoad %988 
                                               OpStore %985 %989 
                                               OpBranch %987 
                                      %990 = OpLabel 
                         Private f32* %991 = OpAccessChain %249 %88 
                                  f32 %992 = OpLoad %991 
                                               OpStore %985 %992 
                                               OpBranch %987 
                                      %987 = OpLabel 
                                  f32 %993 = OpLoad %985 
                         Private f32* %994 = OpAccessChain %119 %88 
                                               OpStore %994 %993 
                                  f32 %995 = OpLoad %56 
                                  f32 %996 = OpFNegate %995 
                                  f32 %997 = OpFMul %996 %447 
                         Private f32* %998 = OpAccessChain %119 %67 
                                  f32 %999 = OpLoad %998 
                                 f32 %1000 = OpFAdd %997 %999 
                        Private f32* %1001 = OpAccessChain %207 %88 
                                               OpStore %1001 %1000 
                        Private i32* %1002 = OpAccessChain %583 %67 
                                 i32 %1003 = OpLoad %1002 
                                bool %1004 = OpINotEqual %1003 %32 
                                               OpSelectionMerge %1007 None 
                                               OpBranchConditional %1004 %1006 %1010 
                                     %1006 = OpLabel 
                        Private f32* %1008 = OpAccessChain %119 %67 
                                 f32 %1009 = OpLoad %1008 
                                               OpStore %1005 %1009 
                                               OpBranch %1007 
                                     %1010 = OpLabel 
                        Private f32* %1011 = OpAccessChain %207 %88 
                                 f32 %1012 = OpLoad %1011 
                                               OpStore %1005 %1012 
                                               OpBranch %1007 
                                     %1007 = OpLabel 
                                 f32 %1013 = OpLoad %1005 
                        Private f32* %1014 = OpAccessChain %119 %67 
                                               OpStore %1014 %1013 
                               f32_3 %1015 = OpLoad %119 
                               f32_4 %1016 = OpVectorShuffle %1015 %1015 0 1 0 1 
                               f32_4 %1017 = OpExtInst %1 4 %1016 
                               f32_3 %1018 = OpLoad %78 
                               f32_4 %1019 = OpVectorShuffle %1018 %1018 0 0 0 0 
                              bool_4 %1020 = OpFOrdGreaterThanEqual %1017 %1019 
                              bool_2 %1021 = OpVectorShuffle %1020 %1020 0 1 
                               u32_2 %1022 = OpSelect %1021 %595 %594 
                               u32_2 %1023 = OpCompositeConstruct %566 %566 
                               u32_2 %1024 = OpIMul %1022 %1023 
                               i32_2 %1025 = OpBitcast %1024 
                                               OpStore %583 %1025 
                        Private f32* %1026 = OpAccessChain %100 %88 
                                 f32 %1027 = OpLoad %1026 
                                 f32 %1028 = OpFNegate %1027 
                                 f32 %1030 = OpFMul %1028 %1029 
                        Private f32* %1031 = OpAccessChain %237 %88 
                                 f32 %1032 = OpLoad %1031 
                                 f32 %1033 = OpFAdd %1030 %1032 
                        Private f32* %1034 = OpAccessChain %249 %88 
                                               OpStore %1034 %1033 
                        Private i32* %1035 = OpAccessChain %583 %88 
                                 i32 %1036 = OpLoad %1035 
                                bool %1037 = OpINotEqual %1036 %32 
                                               OpSelectionMerge %1040 None 
                                               OpBranchConditional %1037 %1039 %1043 
                                     %1039 = OpLabel 
                        Private f32* %1041 = OpAccessChain %237 %88 
                                 f32 %1042 = OpLoad %1041 
                                               OpStore %1038 %1042 
                                               OpBranch %1040 
                                     %1043 = OpLabel 
                        Private f32* %1044 = OpAccessChain %249 %88 
                                 f32 %1045 = OpLoad %1044 
                                               OpStore %1038 %1045 
                                               OpBranch %1040 
                                     %1040 = OpLabel 
                                 f32 %1046 = OpLoad %1038 
                        Private f32* %1047 = OpAccessChain %237 %88 
                                               OpStore %1047 %1046 
                        Private f32* %1048 = OpAccessChain %100 %67 
                                 f32 %1049 = OpLoad %1048 
                                 f32 %1050 = OpFNegate %1049 
                                 f32 %1051 = OpFMul %1050 %1029 
                        Private f32* %1052 = OpAccessChain %237 %641 
                                 f32 %1053 = OpLoad %1052 
                                 f32 %1054 = OpFAdd %1051 %1053 
                        Private f32* %1055 = OpAccessChain %249 %88 
                                               OpStore %1055 %1054 
                        Private i32* %1056 = OpAccessChain %583 %88 
                                 i32 %1057 = OpLoad %1056 
                                bool %1058 = OpINotEqual %1057 %32 
                                               OpSelectionMerge %1061 None 
                                               OpBranchConditional %1058 %1060 %1064 
                                     %1060 = OpLabel 
                        Private f32* %1062 = OpAccessChain %237 %641 
                                 f32 %1063 = OpLoad %1062 
                                               OpStore %1059 %1063 
                                               OpBranch %1061 
                                     %1064 = OpLabel 
                        Private f32* %1065 = OpAccessChain %249 %88 
                                 f32 %1066 = OpLoad %1065 
                                               OpStore %1059 %1066 
                                               OpBranch %1061 
                                     %1061 = OpLabel 
                                 f32 %1067 = OpLoad %1059 
                        Private f32* %1068 = OpAccessChain %237 %641 
                                               OpStore %1068 %1067 
                               i32_2 %1069 = OpLoad %583 
                               i32_2 %1070 = OpNot %1069 
                               i32_3 %1071 = OpLoad %645 
                               i32_3 %1072 = OpVectorShuffle %1071 %1070 3 1 4 
                                               OpStore %645 %1072 
                        Private i32* %1073 = OpAccessChain %645 %641 
                                 i32 %1074 = OpLoad %1073 
                                 u32 %1075 = OpBitcast %1074 
                        Private i32* %1076 = OpAccessChain %645 %88 
                                 i32 %1077 = OpLoad %1076 
                                 u32 %1078 = OpBitcast %1077 
                                 u32 %1079 = OpBitwiseOr %1075 %1078 
                                 i32 %1080 = OpBitcast %1079 
                        Private i32* %1081 = OpAccessChain %645 %88 
                                               OpStore %1081 %1080 
                        Private f32* %1082 = OpAccessChain %100 %88 
                                 f32 %1083 = OpLoad %1082 
                                 f32 %1084 = OpFMul %1083 %1029 
                        Private f32* %1085 = OpAccessChain %483 %88 
                                 f32 %1086 = OpLoad %1085 
                                 f32 %1087 = OpFAdd %1084 %1086 
                                               OpStore %622 %1087 
                        Private i32* %1088 = OpAccessChain %583 %67 
                                 i32 %1089 = OpLoad %1088 
                                bool %1090 = OpINotEqual %1089 %32 
                                               OpSelectionMerge %1093 None 
                                               OpBranchConditional %1090 %1092 %1096 
                                     %1092 = OpLabel 
                        Private f32* %1094 = OpAccessChain %483 %88 
                                 f32 %1095 = OpLoad %1094 
                                               OpStore %1091 %1095 
                                               OpBranch %1093 
                                     %1096 = OpLabel 
                                 f32 %1097 = OpLoad %622 
                                               OpStore %1091 %1097 
                                               OpBranch %1093 
                                     %1093 = OpLabel 
                                 f32 %1098 = OpLoad %1091 
                        Private f32* %1099 = OpAccessChain %483 %88 
                                               OpStore %1099 %1098 
                        Private f32* %1100 = OpAccessChain %100 %67 
                                 f32 %1101 = OpLoad %1100 
                                 f32 %1102 = OpFMul %1101 %1029 
                        Private f32* %1103 = OpAccessChain %483 %641 
                                 f32 %1104 = OpLoad %1103 
                                 f32 %1105 = OpFAdd %1102 %1104 
                                               OpStore %622 %1105 
                        Private i32* %1106 = OpAccessChain %583 %67 
                                 i32 %1107 = OpLoad %1106 
                                bool %1108 = OpINotEqual %1107 %32 
                                               OpSelectionMerge %1111 None 
                                               OpBranchConditional %1108 %1110 %1114 
                                     %1110 = OpLabel 
                        Private f32* %1112 = OpAccessChain %483 %641 
                                 f32 %1113 = OpLoad %1112 
                                               OpStore %1109 %1113 
                                               OpBranch %1111 
                                     %1114 = OpLabel 
                                 f32 %1115 = OpLoad %622 
                                               OpStore %1109 %1115 
                                               OpBranch %1111 
                                     %1111 = OpLabel 
                                 f32 %1116 = OpLoad %1109 
                        Private f32* %1117 = OpAccessChain %483 %641 
                                               OpStore %1117 %1116 
                        Private i32* %1118 = OpAccessChain %645 %88 
                                 i32 %1119 = OpLoad %1118 
                                bool %1120 = OpINotEqual %1119 %32 
                                               OpSelectionMerge %1122 None 
                                               OpBranchConditional %1120 %1121 %1122 
                                     %1121 = OpLabel 
                        Private i32* %1123 = OpAccessChain %583 %88 
                                 i32 %1124 = OpLoad %1123 
                                bool %1125 = OpIEqual %1124 %32 
                                               OpSelectionMerge %1127 None 
                                               OpBranchConditional %1125 %1126 %1127 
                                     %1126 = OpLabel 
                               f32_3 %1128 = OpLoad %237 
                               f32_2 %1129 = OpVectorShuffle %1128 %1128 0 2 
                               f32_3 %1130 = OpLoad %249 
                               f32_3 %1131 = OpVectorShuffle %1130 %1129 3 1 4 
                                               OpStore %249 %1131 
                               f32_3 %1132 = OpLoad %249 
                               f32_2 %1133 = OpVectorShuffle %1132 %1132 0 2 
                               f32_2 %1134 = OpCompositeConstruct %18 %18 
                               f32_2 %1135 = OpCompositeConstruct %19 %19 
                               f32_2 %1136 = OpExtInst %1 43 %1133 %1134 %1135 
                               f32_3 %1137 = OpLoad %249 
                               f32_3 %1138 = OpVectorShuffle %1137 %1136 3 1 4 
                                               OpStore %249 %1138 
                               f32_3 %1139 = OpLoad %249 
                               f32_2 %1140 = OpVectorShuffle %1139 %1139 0 2 
                        Uniform f32* %1141 = OpAccessChain %30 %32 
                                 f32 %1142 = OpLoad %1141 
                               f32_2 %1143 = OpCompositeConstruct %1142 %1142 
                               f32_2 %1144 = OpFMul %1140 %1143 
                               f32_3 %1145 = OpLoad %249 
                               f32_3 %1146 = OpVectorShuffle %1145 %1144 3 1 4 
                                               OpStore %249 %1146 
                 read_only Texture2D %1147 = OpLoad %44 
                             sampler %1148 = OpLoad %48 
          read_only Texture2DSampled %1149 = OpSampledImage %1147 %1148 
                               f32_3 %1150 = OpLoad %249 
                               f32_2 %1151 = OpVectorShuffle %1150 %1150 0 2 
                               f32_4 %1152 = OpImageSampleExplicitLod %1149 %1151 Lod %27 
                                 f32 %1153 = OpCompositeExtract %1152 1 
                        Private f32* %1154 = OpAccessChain %119 %88 
                                               OpStore %1154 %1153 
                                               OpBranch %1127 
                                     %1127 = OpLabel 
                        Private i32* %1155 = OpAccessChain %583 %67 
                                 i32 %1156 = OpLoad %1155 
                                bool %1157 = OpIEqual %1156 %32 
                                               OpSelectionMerge %1159 None 
                                               OpBranchConditional %1157 %1158 %1159 
                                     %1158 = OpLabel 
                               f32_3 %1160 = OpLoad %483 
                               f32_2 %1161 = OpVectorShuffle %1160 %1160 0 2 
                               f32_3 %1162 = OpLoad %249 
                               f32_3 %1163 = OpVectorShuffle %1162 %1161 3 1 4 
                                               OpStore %249 %1163 
                               f32_3 %1164 = OpLoad %249 
                               f32_2 %1165 = OpVectorShuffle %1164 %1164 0 2 
                               f32_2 %1166 = OpCompositeConstruct %18 %18 
                               f32_2 %1167 = OpCompositeConstruct %19 %19 
                               f32_2 %1168 = OpExtInst %1 43 %1165 %1166 %1167 
                               f32_3 %1169 = OpLoad %249 
                               f32_3 %1170 = OpVectorShuffle %1169 %1168 3 1 4 
                                               OpStore %249 %1170 
                               f32_3 %1171 = OpLoad %249 
                               f32_2 %1172 = OpVectorShuffle %1171 %1171 0 2 
                        Uniform f32* %1173 = OpAccessChain %30 %32 
                                 f32 %1174 = OpLoad %1173 
                               f32_2 %1175 = OpCompositeConstruct %1174 %1174 
                               f32_2 %1176 = OpFMul %1172 %1175 
                               f32_3 %1177 = OpLoad %249 
                               f32_3 %1178 = OpVectorShuffle %1177 %1176 3 1 4 
                                               OpStore %249 %1178 
                 read_only Texture2D %1179 = OpLoad %44 
                             sampler %1180 = OpLoad %48 
          read_only Texture2DSampled %1181 = OpSampledImage %1179 %1180 
                               f32_3 %1182 = OpLoad %249 
                               f32_2 %1183 = OpVectorShuffle %1182 %1182 0 2 
                               f32_4 %1184 = OpImageSampleExplicitLod %1181 %1183 Lod %27 
                                 f32 %1185 = OpCompositeExtract %1184 1 
                        Private f32* %1186 = OpAccessChain %119 %67 
                                               OpStore %1186 %1185 
                                               OpBranch %1159 
                                     %1159 = OpLabel 
                                 f32 %1187 = OpLoad %56 
                                 f32 %1188 = OpFNegate %1187 
                                 f32 %1189 = OpFMul %1188 %447 
                        Private f32* %1190 = OpAccessChain %119 %88 
                                 f32 %1191 = OpLoad %1190 
                                 f32 %1192 = OpFAdd %1189 %1191 
                        Private f32* %1193 = OpAccessChain %249 %88 
                                               OpStore %1193 %1192 
                        Private i32* %1194 = OpAccessChain %583 %88 
                                 i32 %1195 = OpLoad %1194 
                                bool %1196 = OpINotEqual %1195 %32 
                                               OpSelectionMerge %1199 None 
                                               OpBranchConditional %1196 %1198 %1202 
                                     %1198 = OpLabel 
                        Private f32* %1200 = OpAccessChain %119 %88 
                                 f32 %1201 = OpLoad %1200 
                                               OpStore %1197 %1201 
                                               OpBranch %1199 
                                     %1202 = OpLabel 
                        Private f32* %1203 = OpAccessChain %249 %88 
                                 f32 %1204 = OpLoad %1203 
                                               OpStore %1197 %1204 
                                               OpBranch %1199 
                                     %1199 = OpLabel 
                                 f32 %1205 = OpLoad %1197 
                        Private f32* %1206 = OpAccessChain %119 %88 
                                               OpStore %1206 %1205 
                                 f32 %1207 = OpLoad %56 
                                 f32 %1208 = OpFNegate %1207 
                                 f32 %1209 = OpFMul %1208 %447 
                        Private f32* %1210 = OpAccessChain %119 %67 
                                 f32 %1211 = OpLoad %1210 
                                 f32 %1212 = OpFAdd %1209 %1211 
                                               OpStore %56 %1212 
                        Private i32* %1213 = OpAccessChain %583 %67 
                                 i32 %1214 = OpLoad %1213 
                                bool %1215 = OpINotEqual %1214 %32 
                                               OpSelectionMerge %1218 None 
                                               OpBranchConditional %1215 %1217 %1221 
                                     %1217 = OpLabel 
                        Private f32* %1219 = OpAccessChain %119 %67 
                                 f32 %1220 = OpLoad %1219 
                                               OpStore %1216 %1220 
                                               OpBranch %1218 
                                     %1221 = OpLabel 
                                 f32 %1222 = OpLoad %56 
                                               OpStore %1216 %1222 
                                               OpBranch %1218 
                                     %1218 = OpLabel 
                                 f32 %1223 = OpLoad %1216 
                        Private f32* %1224 = OpAccessChain %119 %67 
                                               OpStore %1224 %1223 
                               f32_3 %1227 = OpLoad %119 
                               f32_4 %1228 = OpVectorShuffle %1227 %1227 0 1 0 1 
                               f32_4 %1229 = OpExtInst %1 4 %1228 
                               f32_3 %1230 = OpLoad %78 
                               f32_4 %1231 = OpVectorShuffle %1230 %1230 0 0 0 0 
                              bool_4 %1232 = OpFOrdGreaterThanEqual %1229 %1231 
                              bool_2 %1233 = OpVectorShuffle %1232 %1232 0 1 
                                               OpStore %1226 %1233 
                        Private f32* %1234 = OpAccessChain %100 %88 
                                 f32 %1235 = OpLoad %1234 
                                 f32 %1236 = OpFNegate %1235 
                                 f32 %1238 = OpFMul %1236 %1237 
                        Private f32* %1239 = OpAccessChain %237 %88 
                                 f32 %1240 = OpLoad %1239 
                                 f32 %1241 = OpFAdd %1238 %1240 
                                               OpStore %56 %1241 
                       Private bool* %1242 = OpAccessChain %1226 %88 
                                bool %1243 = OpLoad %1242 
                                               OpSelectionMerge %1246 None 
                                               OpBranchConditional %1243 %1245 %1249 
                                     %1245 = OpLabel 
                        Private f32* %1247 = OpAccessChain %237 %88 
                                 f32 %1248 = OpLoad %1247 
                                               OpStore %1244 %1248 
                                               OpBranch %1246 
                                     %1249 = OpLabel 
                                 f32 %1250 = OpLoad %56 
                                               OpStore %1244 %1250 
                                               OpBranch %1246 
                                     %1246 = OpLabel 
                                 f32 %1251 = OpLoad %1244 
                        Private f32* %1252 = OpAccessChain %237 %88 
                                               OpStore %1252 %1251 
                        Private f32* %1253 = OpAccessChain %100 %67 
                                 f32 %1254 = OpLoad %1253 
                                 f32 %1255 = OpFNegate %1254 
                                 f32 %1256 = OpFMul %1255 %1237 
                        Private f32* %1257 = OpAccessChain %237 %641 
                                 f32 %1258 = OpLoad %1257 
                                 f32 %1259 = OpFAdd %1256 %1258 
                                               OpStore %56 %1259 
                       Private bool* %1260 = OpAccessChain %1226 %88 
                                bool %1261 = OpLoad %1260 
                                               OpSelectionMerge %1264 None 
                                               OpBranchConditional %1261 %1263 %1267 
                                     %1263 = OpLabel 
                        Private f32* %1265 = OpAccessChain %237 %641 
                                 f32 %1266 = OpLoad %1265 
                                               OpStore %1262 %1266 
                                               OpBranch %1264 
                                     %1267 = OpLabel 
                                 f32 %1268 = OpLoad %56 
                                               OpStore %1262 %1268 
                                               OpBranch %1264 
                                     %1264 = OpLabel 
                                 f32 %1269 = OpLoad %1262 
                        Private f32* %1270 = OpAccessChain %237 %641 
                                               OpStore %1270 %1269 
                        Private f32* %1271 = OpAccessChain %100 %88 
                                 f32 %1272 = OpLoad %1271 
                                 f32 %1273 = OpFMul %1272 %1237 
                        Private f32* %1274 = OpAccessChain %483 %88 
                                 f32 %1275 = OpLoad %1274 
                                 f32 %1276 = OpFAdd %1273 %1275 
                                               OpStore %56 %1276 
                       Private bool* %1277 = OpAccessChain %1226 %67 
                                bool %1278 = OpLoad %1277 
                                               OpSelectionMerge %1281 None 
                                               OpBranchConditional %1278 %1280 %1284 
                                     %1280 = OpLabel 
                        Private f32* %1282 = OpAccessChain %483 %88 
                                 f32 %1283 = OpLoad %1282 
                                               OpStore %1279 %1283 
                                               OpBranch %1281 
                                     %1284 = OpLabel 
                                 f32 %1285 = OpLoad %56 
                                               OpStore %1279 %1285 
                                               OpBranch %1281 
                                     %1281 = OpLabel 
                                 f32 %1286 = OpLoad %1279 
                        Private f32* %1287 = OpAccessChain %483 %88 
                                               OpStore %1287 %1286 
                        Private f32* %1288 = OpAccessChain %100 %67 
                                 f32 %1289 = OpLoad %1288 
                                 f32 %1290 = OpFMul %1289 %1237 
                        Private f32* %1291 = OpAccessChain %483 %641 
                                 f32 %1292 = OpLoad %1291 
                                 f32 %1293 = OpFAdd %1290 %1292 
                                               OpStore %56 %1293 
                       Private bool* %1294 = OpAccessChain %1226 %67 
                                bool %1295 = OpLoad %1294 
                                               OpSelectionMerge %1298 None 
                                               OpBranchConditional %1295 %1297 %1301 
                                     %1297 = OpLabel 
                        Private f32* %1299 = OpAccessChain %483 %641 
                                 f32 %1300 = OpLoad %1299 
                                               OpStore %1296 %1300 
                                               OpBranch %1298 
                                     %1301 = OpLabel 
                                 f32 %1302 = OpLoad %56 
                                               OpStore %1296 %1302 
                                               OpBranch %1298 
                                     %1298 = OpLabel 
                                 f32 %1303 = OpLoad %1296 
                        Private f32* %1304 = OpAccessChain %483 %641 
                                               OpStore %1304 %1303 
                                               OpBranch %1122 
                                     %1122 = OpLabel 
                                               OpBranch %910 
                                      %910 = OpLabel 
                                               OpBranch %699 
                                      %699 = OpLabel 
                        Private f32* %1305 = OpAccessChain %237 %88 
                                 f32 %1306 = OpLoad %1305 
                                 f32 %1307 = OpFNegate %1306 
                          Input f32* %1308 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %1309 = OpLoad %1308 
                                 f32 %1310 = OpFAdd %1307 %1309 
                                               OpStore %56 %1310 
                        Private f32* %1311 = OpAccessChain %237 %641 
                                 f32 %1312 = OpLoad %1311 
                                 f32 %1313 = OpFNegate %1312 
                          Input f32* %1314 = OpAccessChain vs_TEXCOORD0 %67 
                                 f32 %1315 = OpLoad %1314 
                                 f32 %1316 = OpFAdd %1313 %1315 
                        Private f32* %1317 = OpAccessChain %100 %88 
                                               OpStore %1317 %1316 
                       Private bool* %1318 = OpAccessChain %323 %88 
                                bool %1319 = OpLoad %1318 
                                               OpSelectionMerge %1322 None 
                                               OpBranchConditional %1319 %1321 %1324 
                                     %1321 = OpLabel 
                                 f32 %1323 = OpLoad %56 
                                               OpStore %1320 %1323 
                                               OpBranch %1322 
                                     %1324 = OpLabel 
                        Private f32* %1325 = OpAccessChain %100 %88 
                                 f32 %1326 = OpLoad %1325 
                                               OpStore %1320 %1326 
                                               OpBranch %1322 
                                     %1322 = OpLabel 
                                 f32 %1327 = OpLoad %1320 
                                               OpStore %56 %1327 
                               f32_3 %1328 = OpLoad %483 
                               f32_2 %1329 = OpVectorShuffle %1328 %1328 0 2 
                               f32_2 %1330 = OpLoad vs_TEXCOORD0 
                               f32_2 %1331 = OpFNegate %1330 
                               f32_2 %1332 = OpFAdd %1329 %1331 
                               f32_3 %1333 = OpLoad %78 
                               f32_3 %1334 = OpVectorShuffle %1333 %1332 3 1 4 
                                               OpStore %78 %1334 
                       Private bool* %1335 = OpAccessChain %323 %88 
                                bool %1336 = OpLoad %1335 
                                               OpSelectionMerge %1339 None 
                                               OpBranchConditional %1336 %1338 %1342 
                                     %1338 = OpLabel 
                        Private f32* %1340 = OpAccessChain %78 %88 
                                 f32 %1341 = OpLoad %1340 
                                               OpStore %1337 %1341 
                                               OpBranch %1339 
                                     %1342 = OpLabel 
                        Private f32* %1343 = OpAccessChain %78 %641 
                                 f32 %1344 = OpLoad %1343 
                                               OpStore %1337 %1344 
                                               OpBranch %1339 
                                     %1339 = OpLabel 
                                 f32 %1345 = OpLoad %1337 
                        Private f32* %1346 = OpAccessChain %78 %88 
                                               OpStore %1346 %1345 
                               f32_3 %1348 = OpLoad %119 
                               f32_4 %1349 = OpVectorShuffle %1348 %1348 0 1 0 1 
                              bool_4 %1351 = OpFOrdLessThan %1349 %1350 
                              bool_2 %1352 = OpVectorShuffle %1351 %1351 0 1 
                               u32_2 %1353 = OpSelect %1352 %595 %594 
                               u32_2 %1354 = OpCompositeConstruct %566 %566 
                               u32_2 %1355 = OpIMul %1353 %1354 
                               i32_2 %1356 = OpBitcast %1355 
                                               OpStore %1347 %1356 
                                 f32 %1357 = OpLoad %56 
                        Private f32* %1358 = OpAccessChain %78 %88 
                                 f32 %1359 = OpLoad %1358 
                                 f32 %1360 = OpFAdd %1357 %1359 
                        Private f32* %1361 = OpAccessChain %119 %88 
                                               OpStore %1361 %1360 
                                 i32 %1363 = OpLoad %563 
                               i32_4 %1365 = OpCompositeConstruct %1363 %1363 %1363 %1363 
                               i32_2 %1366 = OpLoad %1347 
                               i32_4 %1367 = OpVectorShuffle %1366 %1366 0 1 0 0 
                              bool_4 %1368 = OpINotEqual %1365 %1367 
                              bool_2 %1369 = OpVectorShuffle %1368 %1368 0 1 
                                               OpStore %1362 %1369 
                        Private f32* %1370 = OpAccessChain %119 %88 
                                 f32 %1371 = OpLoad %1370 
                                 f32 %1372 = OpFDiv %19 %1371 
                                               OpStore %106 %1372 
                                 f32 %1373 = OpLoad %56 
                        Private f32* %1374 = OpAccessChain %78 %88 
                                 f32 %1375 = OpLoad %1374 
                                bool %1376 = OpFOrdLessThan %1373 %1375 
                                               OpStore %394 %1376 
                                 f32 %1377 = OpLoad %56 
                        Private f32* %1378 = OpAccessChain %78 %88 
                                 f32 %1379 = OpLoad %1378 
                                 f32 %1380 = OpExtInst %1 37 %1377 %1379 
                                               OpStore %56 %1380 
                                bool %1382 = OpLoad %394 
                                               OpSelectionMerge %1386 None 
                                               OpBranchConditional %1382 %1385 %1389 
                                     %1385 = OpLabel 
                       Private bool* %1387 = OpAccessChain %1362 %88 
                                bool %1388 = OpLoad %1387 
                                               OpStore %1384 %1388 
                                               OpBranch %1386 
                                     %1389 = OpLabel 
                       Private bool* %1390 = OpAccessChain %1362 %67 
                                bool %1391 = OpLoad %1390 
                                               OpStore %1384 %1391 
                                               OpBranch %1386 
                                     %1386 = OpLabel 
                                bool %1392 = OpLoad %1384 
                                               OpStore %1381 %1392 
                        Private f32* %1393 = OpAccessChain %201 %88 
                                 f32 %1394 = OpLoad %1393 
                        Private f32* %1395 = OpAccessChain %201 %88 
                                 f32 %1396 = OpLoad %1395 
                                 f32 %1397 = OpFMul %1394 %1396 
                        Private f32* %1398 = OpAccessChain %201 %88 
                                               OpStore %1398 %1397 
                                 f32 %1399 = OpLoad %56 
                                 f32 %1400 = OpLoad %106 
                                 f32 %1401 = OpFNegate %1400 
                                 f32 %1402 = OpFMul %1399 %1401 
                                 f32 %1403 = OpFAdd %1402 %447 
                                               OpStore %56 %1403 
                                bool %1404 = OpLoad %1381 
                                 f32 %1405 = OpLoad %56 
                                 f32 %1406 = OpSelect %1404 %1405 %18 
                                               OpStore %56 %1406 
                        Private f32* %1407 = OpAccessChain %201 %88 
                                 f32 %1408 = OpLoad %1407 
                                 f32 %1409 = OpLoad %56 
                                 f32 %1410 = OpExtInst %1 40 %1408 %1409 
                        Private f32* %1411 = OpAccessChain %201 %88 
                                               OpStore %1411 %1410 
                               f32_2 %1412 = OpLoad %201 
                               f32_2 %1413 = OpVectorShuffle %1412 %1412 0 0 
                                 f32 %1414 = OpLoad %69 
                               f32_2 %1415 = OpCompositeConstruct %1414 %1414 
                               f32_2 %1416 = OpFMul %1413 %1415 
                               f32_2 %1417 = OpLoad vs_TEXCOORD0 
                               f32_2 %1418 = OpFAdd %1416 %1417 
                                               OpStore %201 %1418 
                       Private bool* %1419 = OpAccessChain %323 %88 
                                bool %1420 = OpLoad %1419 
                                               OpSelectionMerge %1423 None 
                                               OpBranchConditional %1420 %1422 %1426 
                                     %1422 = OpLabel 
                          Input f32* %1424 = OpAccessChain vs_TEXCOORD0 %88 
                                 f32 %1425 = OpLoad %1424 
                                               OpStore %1421 %1425 
                                               OpBranch %1423 
                                     %1426 = OpLabel 
                        Private f32* %1427 = OpAccessChain %201 %88 
                                 f32 %1428 = OpLoad %1427 
                                               OpStore %1421 %1428 
                                               OpBranch %1423 
                                     %1423 = OpLabel 
                                 f32 %1429 = OpLoad %1421 
                        Private f32* %1430 = OpAccessChain %78 %88 
                                               OpStore %1430 %1429 
                        Private f32* %1431 = OpAccessChain %78 %88 
                                 f32 %1432 = OpLoad %1431 
                                 f32 %1433 = OpExtInst %1 43 %1432 %18 %19 
                        Private f32* %1434 = OpAccessChain %78 %88 
                                               OpStore %1434 %1433 
                       Private bool* %1435 = OpAccessChain %323 %88 
                                bool %1436 = OpLoad %1435 
                                               OpSelectionMerge %1439 None 
                                               OpBranchConditional %1436 %1438 %1442 
                                     %1438 = OpLabel 
                        Private f32* %1440 = OpAccessChain %201 %67 
                                 f32 %1441 = OpLoad %1440 
                                               OpStore %1437 %1441 
                                               OpBranch %1439 
                                     %1442 = OpLabel 
                          Input f32* %1443 = OpAccessChain vs_TEXCOORD0 %67 
                                 f32 %1444 = OpLoad %1443 
                                               OpStore %1437 %1444 
                                               OpBranch %1439 
                                     %1439 = OpLabel 
                                 f32 %1445 = OpLoad %1437 
                        Private f32* %1446 = OpAccessChain %78 %67 
                                               OpStore %1446 %1445 
                        Private f32* %1447 = OpAccessChain %78 %67 
                                 f32 %1448 = OpLoad %1447 
                                 f32 %1449 = OpExtInst %1 43 %1448 %18 %19 
                        Private f32* %1450 = OpAccessChain %78 %67 
                                               OpStore %1450 %1449 
                               f32_3 %1451 = OpLoad %78 
                               f32_2 %1452 = OpVectorShuffle %1451 %1451 0 1 
                        Uniform f32* %1453 = OpAccessChain %30 %32 
                                 f32 %1454 = OpLoad %1453 
                               f32_2 %1455 = OpCompositeConstruct %1454 %1454 
                               f32_2 %1456 = OpFMul %1452 %1455 
                               f32_3 %1457 = OpLoad %9 
                               f32_3 %1458 = OpVectorShuffle %1457 %1456 3 4 2 
                                               OpStore %9 %1458 
                 read_only Texture2D %1459 = OpLoad %44 
                             sampler %1460 = OpLoad %48 
          read_only Texture2DSampled %1461 = OpSampledImage %1459 %1460 
                               f32_3 %1462 = OpLoad %9 
                               f32_2 %1463 = OpVectorShuffle %1462 %1462 0 1 
                               f32_4 %1464 = OpImageSampleExplicitLod %1461 %1463 Lod %27 
                               f32_3 %1465 = OpVectorShuffle %1464 %1464 0 1 2 
                                               OpStore %9 %1465 
                        Private f32* %1466 = OpAccessChain %41 %67 
                                 f32 %1467 = OpLoad %1466 
                        Private f32* %1469 = OpAccessChain %41 %1468 
                                               OpStore %1469 %1467 
                                               OpBranch %165 
                                     %1470 = OpLabel 
                               f32_4 %1471 = OpLoad %41 
                               f32_3 %1472 = OpVectorShuffle %1471 %1471 0 1 2 
                                               OpStore %9 %1472 
                                               OpBranch %165 
                                      %165 = OpLabel 
                               f32_2 %1473 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %1475 = OpAccessChain %30 %63 
                               f32_4 %1476 = OpLoad %1475 
                               f32_2 %1477 = OpVectorShuffle %1476 %1476 0 1 
                               f32_2 %1478 = OpFMul %1473 %1477 
                      Uniform f32_4* %1479 = OpAccessChain %30 %63 
                               f32_4 %1480 = OpLoad %1479 
                               f32_2 %1481 = OpVectorShuffle %1480 %1480 2 3 
                               f32_2 %1482 = OpFAdd %1478 %1481 
                               f32_3 %1483 = OpLoad %78 
                               f32_3 %1484 = OpVectorShuffle %1483 %1482 3 4 2 
                                               OpStore %78 %1484 
                 read_only Texture2D %1486 = OpLoad %1485 
                             sampler %1488 = OpLoad %1487 
          read_only Texture2DSampled %1489 = OpSampledImage %1486 %1488 
                               f32_3 %1490 = OpLoad %78 
                               f32_2 %1491 = OpVectorShuffle %1490 %1490 0 1 
                               f32_4 %1492 = OpImageSampleImplicitLod %1489 %1491 
                                 f32 %1493 = OpCompositeExtract %1492 3 
                                               OpStore %69 %1493 
                                 f32 %1494 = OpLoad %69 
                                 f32 %1495 = OpFMul %1494 %276 
                                 f32 %1497 = OpFAdd %1495 %1496 
                                               OpStore %69 %1497 
                                 f32 %1498 = OpLoad %69 
                                 f32 %1500 = OpFMul %1498 %1499 
                                 f32 %1501 = OpFAdd %1500 %447 
                        Private f32* %1502 = OpAccessChain %78 %88 
                                               OpStore %1502 %1501 
                        Private f32* %1503 = OpAccessChain %78 %88 
                                 f32 %1504 = OpLoad %1503 
                                 f32 %1505 = OpExtInst %1 43 %1504 %18 %19 
                        Private f32* %1506 = OpAccessChain %78 %88 
                                               OpStore %1506 %1505 
                        Private f32* %1507 = OpAccessChain %78 %88 
                                 f32 %1508 = OpLoad %1507 
                                 f32 %1509 = OpFMul %1508 %276 
                                 f32 %1510 = OpFAdd %1509 %1496 
                        Private f32* %1511 = OpAccessChain %78 %88 
                                               OpStore %1511 %1510 
                                 f32 %1512 = OpLoad %69 
                                 f32 %1513 = OpExtInst %1 4 %1512 
                                 f32 %1514 = OpFNegate %1513 
                                 f32 %1515 = OpFAdd %1514 %19 
                                               OpStore %69 %1515 
                                 f32 %1516 = OpLoad %69 
                                 f32 %1517 = OpExtInst %1 31 %1516 
                                               OpStore %69 %1517 
                                 f32 %1518 = OpLoad %69 
                                 f32 %1519 = OpFNegate %1518 
                                 f32 %1520 = OpFAdd %1519 %19 
                                               OpStore %69 %1520 
                                 f32 %1521 = OpLoad %69 
                        Private f32* %1522 = OpAccessChain %78 %88 
                                 f32 %1523 = OpLoad %1522 
                                 f32 %1524 = OpFMul %1521 %1523 
                                               OpStore %69 %1524 
                               f32_3 %1525 = OpLoad %9 
                               f32_3 %1528 = OpFMul %1525 %1527 
                                               OpStore %78 %1528 
                               f32_3 %1529 = OpLoad %9 
                               f32_3 %1530 = OpExtInst %1 4 %1529 
                               f32_3 %1533 = OpExtInst %1 40 %1530 %1532 
                                               OpStore %119 %1533 
                               f32_3 %1534 = OpLoad %119 
                               f32_3 %1535 = OpExtInst %1 30 %1534 
                                               OpStore %119 %1535 
                               f32_3 %1536 = OpLoad %119 
                               f32_3 %1539 = OpFMul %1536 %1538 
                                               OpStore %119 %1539 
                               f32_3 %1540 = OpLoad %119 
                               f32_3 %1541 = OpExtInst %1 29 %1540 
                                               OpStore %119 %1541 
                               f32_3 %1542 = OpLoad %119 
                               f32_3 %1545 = OpFMul %1542 %1544 
                               f32_3 %1548 = OpFAdd %1545 %1547 
                                               OpStore %119 %1548 
                               f32_3 %1551 = OpLoad %9 
                               f32_4 %1552 = OpVectorShuffle %1551 %1551 0 1 2 0 
                              bool_4 %1553 = OpFOrdGreaterThanEqual %1550 %1552 
                              bool_3 %1554 = OpVectorShuffle %1553 %1553 0 1 2 
                                               OpStore %323 %1554 
                       Private bool* %1555 = OpAccessChain %323 %88 
                                bool %1556 = OpLoad %1555 
                                               OpSelectionMerge %1559 None 
                                               OpBranchConditional %1556 %1558 %1562 
                                     %1558 = OpLabel 
                        Private f32* %1560 = OpAccessChain %78 %88 
                                 f32 %1561 = OpLoad %1560 
                                               OpStore %1557 %1561 
                                               OpBranch %1559 
                                     %1562 = OpLabel 
                        Private f32* %1563 = OpAccessChain %119 %88 
                                 f32 %1564 = OpLoad %1563 
                                               OpStore %1557 %1564 
                                               OpBranch %1559 
                                     %1559 = OpLabel 
                                 f32 %1565 = OpLoad %1557 
                        Private f32* %1566 = OpAccessChain %9 %88 
                                               OpStore %1566 %1565 
                       Private bool* %1567 = OpAccessChain %323 %67 
                                bool %1568 = OpLoad %1567 
                                               OpSelectionMerge %1571 None 
                                               OpBranchConditional %1568 %1570 %1574 
                                     %1570 = OpLabel 
                        Private f32* %1572 = OpAccessChain %78 %67 
                                 f32 %1573 = OpLoad %1572 
                                               OpStore %1569 %1573 
                                               OpBranch %1571 
                                     %1574 = OpLabel 
                        Private f32* %1575 = OpAccessChain %119 %67 
                                 f32 %1576 = OpLoad %1575 
                                               OpStore %1569 %1576 
                                               OpBranch %1571 
                                     %1571 = OpLabel 
                                 f32 %1577 = OpLoad %1569 
                        Private f32* %1578 = OpAccessChain %9 %67 
                                               OpStore %1578 %1577 
                       Private bool* %1579 = OpAccessChain %323 %641 
                                bool %1580 = OpLoad %1579 
                                               OpSelectionMerge %1583 None 
                                               OpBranchConditional %1580 %1582 %1586 
                                     %1582 = OpLabel 
                        Private f32* %1584 = OpAccessChain %78 %641 
                                 f32 %1585 = OpLoad %1584 
                                               OpStore %1581 %1585 
                                               OpBranch %1583 
                                     %1586 = OpLabel 
                        Private f32* %1587 = OpAccessChain %119 %641 
                                 f32 %1588 = OpLoad %1587 
                                               OpStore %1581 %1588 
                                               OpBranch %1583 
                                     %1583 = OpLabel 
                                 f32 %1589 = OpLoad %1581 
                        Private f32* %1590 = OpAccessChain %9 %641 
                                               OpStore %1590 %1589 
                                 f32 %1591 = OpLoad %69 
                               f32_3 %1592 = OpCompositeConstruct %1591 %1591 %1591 
                               f32_3 %1595 = OpFMul %1592 %1594 
                               f32_3 %1596 = OpLoad %9 
                               f32_3 %1597 = OpFAdd %1595 %1596 
                                               OpStore %9 %1597 
                               f32_3 %1598 = OpLoad %9 
                               f32_3 %1601 = OpFMul %1598 %1600 
                                               OpStore %78 %1601 
                               f32_3 %1602 = OpLoad %9 
                               f32_3 %1605 = OpFAdd %1602 %1604 
                                               OpStore %119 %1605 
                               f32_3 %1606 = OpLoad %119 
                               f32_3 %1609 = OpFMul %1606 %1608 
                                               OpStore %119 %1609 
                               f32_3 %1610 = OpLoad %119 
                               f32_3 %1611 = OpExtInst %1 4 %1610 
                               f32_3 %1612 = OpExtInst %1 40 %1611 %1532 
                                               OpStore %119 %1612 
                               f32_3 %1613 = OpLoad %119 
                               f32_3 %1614 = OpExtInst %1 30 %1613 
                                               OpStore %119 %1614 
                               f32_3 %1615 = OpLoad %119 
                               f32_3 %1618 = OpFMul %1615 %1617 
                                               OpStore %119 %1618 
                               f32_3 %1619 = OpLoad %119 
                               f32_3 %1620 = OpExtInst %1 29 %1619 
                                               OpStore %119 %1620 
                               f32_3 %1623 = OpLoad %9 
                               f32_4 %1624 = OpVectorShuffle %1623 %1623 0 1 2 0 
                              bool_4 %1625 = OpFOrdGreaterThanEqual %1622 %1624 
                              bool_3 %1626 = OpVectorShuffle %1625 %1625 0 1 2 
                                               OpStore %323 %1626 
                       Private bool* %1627 = OpAccessChain %323 %88 
                                bool %1628 = OpLoad %1627 
                                               OpSelectionMerge %1631 None 
                                               OpBranchConditional %1628 %1630 %1634 
                                     %1630 = OpLabel 
                        Private f32* %1632 = OpAccessChain %78 %88 
                                 f32 %1633 = OpLoad %1632 
                                               OpStore %1629 %1633 
                                               OpBranch %1631 
                                     %1634 = OpLabel 
                        Private f32* %1635 = OpAccessChain %119 %88 
                                 f32 %1636 = OpLoad %1635 
                                               OpStore %1629 %1636 
                                               OpBranch %1631 
                                     %1631 = OpLabel 
                                 f32 %1637 = OpLoad %1629 
                        Private f32* %1638 = OpAccessChain %41 %88 
                                               OpStore %1638 %1637 
                       Private bool* %1639 = OpAccessChain %323 %67 
                                bool %1640 = OpLoad %1639 
                                               OpSelectionMerge %1643 None 
                                               OpBranchConditional %1640 %1642 %1646 
                                     %1642 = OpLabel 
                        Private f32* %1644 = OpAccessChain %78 %67 
                                 f32 %1645 = OpLoad %1644 
                                               OpStore %1641 %1645 
                                               OpBranch %1643 
                                     %1646 = OpLabel 
                        Private f32* %1647 = OpAccessChain %119 %67 
                                 f32 %1648 = OpLoad %1647 
                                               OpStore %1641 %1648 
                                               OpBranch %1643 
                                     %1643 = OpLabel 
                                 f32 %1649 = OpLoad %1641 
                        Private f32* %1650 = OpAccessChain %41 %67 
                                               OpStore %1650 %1649 
                       Private bool* %1651 = OpAccessChain %323 %641 
                                bool %1652 = OpLoad %1651 
                                               OpSelectionMerge %1655 None 
                                               OpBranchConditional %1652 %1654 %1658 
                                     %1654 = OpLabel 
                        Private f32* %1656 = OpAccessChain %78 %641 
                                 f32 %1657 = OpLoad %1656 
                                               OpStore %1653 %1657 
                                               OpBranch %1655 
                                     %1658 = OpLabel 
                        Private f32* %1659 = OpAccessChain %119 %641 
                                 f32 %1660 = OpLoad %1659 
                                               OpStore %1653 %1660 
                                               OpBranch %1655 
                                     %1655 = OpLabel 
                                 f32 %1661 = OpLoad %1653 
                        Private f32* %1662 = OpAccessChain %41 %641 
                                               OpStore %1662 %1661 
                               f32_4 %1665 = OpLoad %41 
                                               OpStore %1664 %1665 
                                               OpReturn
                                               OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "vulkan " {
""
}
SubProgram "vulkan " {
Keywords { "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA_KEEP_ALPHA" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA_NO_ALPHA" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA" "FXAA_KEEP_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA" "FXAA_NO_ALPHA" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA_LOW" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA_KEEP_ALPHA" "FXAA_LOW" "STEREO_DOUBLEWIDE_TARGET" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" }
""
}
SubProgram "vulkan " {
Keywords { "FXAA_LOW" "FXAA_NO_ALPHA" "STEREO_DOUBLEWIDE_TARGET" }
""
}
}
}
}
}